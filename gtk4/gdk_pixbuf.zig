// This file is auto-generated by zig-gir-ffi
const gdk_pixbuf = @This();
pub const gobject = @import("gobject");
pub const gio = @import("gio");
pub const glib = @import("glib");
pub const gmodule = @import("gmodule");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// Enum [Colorspace](https://docs.gtk.org/gdk-pixbuf/enum.Colorspace.html)
pub const Colorspace = enum(u32) {
    rgb = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_colorspace_get_type" });
        return cFn();
    }
};
/// Enum [InterpType](https://docs.gtk.org/gdk-pixbuf/enum.InterpType.html)
pub const InterpType = enum(u32) {
    nearest = 0,
    tiles = 1,
    bilinear = 2,
    hyper = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_interp_type_get_type" });
        return cFn();
    }
};
/// const [PIXBUF_MAJOR](https://docs.gtk.org/gdk-pixbuf/const.PIXBUF_MAJOR.html)
pub const PIXBUF_MAJOR = 2;
/// const [PIXBUF_MICRO](https://docs.gtk.org/gdk-pixbuf/const.PIXBUF_MICRO.html)
pub const PIXBUF_MICRO = 12;
/// const [PIXBUF_MINOR](https://docs.gtk.org/gdk-pixbuf/const.PIXBUF_MINOR.html)
pub const PIXBUF_MINOR = 42;
/// const [PIXBUF_VERSION](https://docs.gtk.org/gdk-pixbuf/const.PIXBUF_VERSION.html)
pub const PIXBUF_VERSION = "2.42.12";
/// Class [Pixbuf](https://docs.gtk.org/gdk-pixbuf/class.Pixbuf.html)
/// - property [bits-per-sample](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.bits-per-sample.html): (r-) `i32`
/// - property [colorspace](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.colorspace.html): (r-) `gdk_pixbuf.Colorspace`
/// - property [has-alpha](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.has-alpha.html): (r-) `bool`
/// - property [height](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.height.html): (r-) `i32`
/// - property [n-channels](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.n-channels.html): (r-) `i32`
/// - property [pixel-bytes](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.pixel-bytes.html): (r-) `glib.Bytes`
/// - property [pixels](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.pixels.html): (r-) `*anyopaque`
/// - property [rowstride](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.rowstride.html): (r-) `i32`
/// - property [width](https://docs.gtk.org/gdk-pixbuf/property.Pixbuf.width.html): (r-) `i32`
pub const Pixbuf = opaque {
    pub const Interfaces = [_]type{ gio.Icon, gio.LoadableIcon };
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new.html)
    pub fn new(_colorspace: gdk_pixbuf.Colorspace, _has_alpha: bool, _bits_per_sample: i32, _width: i32, _height: i32) ?*Pixbuf {
        const cFn = @extern(*const fn (gdk_pixbuf.Colorspace, bool, i32, i32, i32) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new" });
        const ret = cFn(_colorspace, _has_alpha, _bits_per_sample, _width, _height);
        return ret;
    }
    /// ctor [new_from_bytes](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_bytes.html)
    pub fn newFromBytes(_data: *glib.Bytes, _colorspace: gdk_pixbuf.Colorspace, _has_alpha: bool, _bits_per_sample: i32, _width: i32, _height: i32, _rowstride: i32) *Pixbuf {
        const cFn = @extern(*const fn (*glib.Bytes, gdk_pixbuf.Colorspace, bool, i32, i32, i32, i32) callconv(.c) *Pixbuf, .{ .name = "gdk_pixbuf_new_from_bytes" });
        const ret = cFn(_data, _colorspace, _has_alpha, _bits_per_sample, _width, _height, _rowstride);
        return ret;
    }
    /// ctor [new_from_data](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_data.html)
    pub fn newFromData(_data: [*]u8, _colorspace: gdk_pixbuf.Colorspace, _has_alpha: bool, _bits_per_sample: i32, _width: i32, _height: i32, _rowstride: i32, destroy_fn: anytype, destroy_fn_args: anytype) *Pixbuf {
        var closure_destroy_fn = core.zig_closure(destroy_fn, destroy_fn_args, &.{ void, [*]u8 });
        closure_destroy_fn.setOnce();
        const _destroy_fn: ?gdk_pixbuf.PixbufDestroyNotify = @ptrCast(closure_destroy_fn.c_closure());
        const _destroy_fn_data: ?*anyopaque = @ptrCast(closure_destroy_fn.c_data());
        const cFn = @extern(*const fn ([*]u8, gdk_pixbuf.Colorspace, bool, i32, i32, i32, i32, ?gdk_pixbuf.PixbufDestroyNotify, ?*anyopaque) callconv(.c) *Pixbuf, .{ .name = "gdk_pixbuf_new_from_data" });
        const ret = cFn(_data, _colorspace, _has_alpha, _bits_per_sample, _width, _height, _rowstride, _destroy_fn, @ptrCast(_destroy_fn_data));
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_file.html)
    pub fn newFromFile(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_file" });
        const ret = cFn(_filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_file_at_scale](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_file_at_scale.html)
    pub fn newFromFileAtScale(_filename: [*:0]const u8, _width: i32, _height: i32, _preserve_aspect_ratio: bool, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn ([*:0]const u8, i32, i32, bool, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_file_at_scale" });
        const ret = cFn(_filename, _width, _height, _preserve_aspect_ratio, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_file_at_size](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_file_at_size.html)
    pub fn newFromFileAtSize(_filename: [*:0]const u8, _width: i32, _height: i32, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn ([*:0]const u8, i32, i32, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_file_at_size" });
        const ret = cFn(_filename, _width, _height, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// ctor [new_from_inline](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_inline.html)
    pub const newFromInline = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromInline(_datas: []u8, _copy_pixels: bool, _error: *?*core.Error) error{GError}!*Pixbuf {
            const _data_length: i32 = @intCast(_datas.len);
            const _data = _datas.ptr;
            const cFn = @extern(*const fn (i32, [*]u8, bool, *?*core.Error) callconv(.c) *Pixbuf, .{ .name = "gdk_pixbuf_new_from_inline" });
            const ret = cFn(_data_length, _data, _copy_pixels, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.newFromInline;
    /// ctor [new_from_resource](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_resource.html)
    pub fn newFromResource(_resource_path: [*:0]const u8, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_resource" });
        const ret = cFn(_resource_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_resource_at_scale](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_resource_at_scale.html)
    pub fn newFromResourceAtScale(_resource_path: [*:0]const u8, _width: i32, _height: i32, _preserve_aspect_ratio: bool, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn ([*:0]const u8, i32, i32, bool, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_resource_at_scale" });
        const ret = cFn(_resource_path, _width, _height, _preserve_aspect_ratio, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_stream](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_stream.html)
    pub fn newFromStream(_stream: *gio.InputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn (*gio.InputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_stream" });
        const ret = cFn(_stream, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_stream_at_scale](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_stream_at_scale.html)
    pub fn newFromStreamAtScale(_stream: *gio.InputStream, _width: i32, _height: i32, _preserve_aspect_ratio: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn (*gio.InputStream, i32, i32, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_stream_at_scale" });
        const ret = cFn(_stream, _width, _height, _preserve_aspect_ratio, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_stream_finish](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_stream_finish.html)
    pub fn newFromStreamFinish(_async_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*Pixbuf {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_stream_finish" });
        const ret = cFn(_async_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_xpm_data](https://docs.gtk.org/gdk-pixbuf/ctor.Pixbuf.new_from_xpm_data.html)
    pub fn newFromXpmData(_data: [*:null]?[*:0]const u8) ?*Pixbuf {
        const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) ?*Pixbuf, .{ .name = "gdk_pixbuf_new_from_xpm_data" });
        const ret = cFn(_data);
        return ret;
    }
    /// type func [calculate_rowstride](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.calculate_rowstride.html)
    pub fn calculateRowstride(_colorspace: gdk_pixbuf.Colorspace, _has_alpha: bool, _bits_per_sample: i32, _width: i32, _height: i32) i32 {
        const cFn = @extern(*const fn (gdk_pixbuf.Colorspace, bool, i32, i32, i32) callconv(.c) i32, .{ .name = "gdk_pixbuf_calculate_rowstride" });
        const ret = cFn(_colorspace, _has_alpha, _bits_per_sample, _width, _height);
        return ret;
    }
    /// type func [get_file_info](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.get_file_info.html)
    pub fn getFileInfo(_filename: [*:0]const u8) struct {
        ret: ?*gdk_pixbuf.PixbufFormat,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn ([*:0]const u8, ?*i32, ?*i32) callconv(.c) ?*gdk_pixbuf.PixbufFormat, .{ .name = "gdk_pixbuf_get_file_info" });
        const ret = cFn(_filename, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// type func [get_file_info_async](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.get_file_info_async.html)
    pub fn getFileInfoAsync(_filename: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn ([*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_pixbuf_get_file_info_async" });
        const ret = cFn(_filename, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [get_file_info_finish](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.get_file_info_finish.html)
    pub fn getFileInfoFinish(_async_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: ?*gdk_pixbuf.PixbufFormat,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*gio.AsyncResult, *i32, *i32, *?*core.Error) callconv(.c) ?*gdk_pixbuf.PixbufFormat, .{ .name = "gdk_pixbuf_get_file_info_finish" });
        const ret = cFn(_async_result, _width, _height, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// type func [get_formats](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.get_formats.html)
    pub fn getFormats() ?*core.SList {
        const cFn = @extern(*const fn () callconv(.c) ?*core.SList, .{ .name = "gdk_pixbuf_get_formats" });
        const ret = cFn();
        return ret;
    }
    /// type func [init_modules](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.init_modules.html)
    pub fn initModules(_path: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_init_modules" });
        const ret = cFn(_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new_from_stream_async](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.new_from_stream_async.html)
    pub fn newFromStreamAsync(_stream: *gio.InputStream, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.InputStream, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_pixbuf_new_from_stream_async" });
        const ret = cFn(_stream, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_from_stream_at_scale_async](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.new_from_stream_at_scale_async.html)
    pub fn newFromStreamAtScaleAsync(_stream: *gio.InputStream, _width: i32, _height: i32, _preserve_aspect_ratio: bool, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.InputStream, i32, i32, bool, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_pixbuf_new_from_stream_at_scale_async" });
        const ret = cFn(_stream, _width, _height, _preserve_aspect_ratio, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [save_to_stream_finish](https://docs.gtk.org/gdk-pixbuf/type_func.Pixbuf.save_to_stream_finish.html)
    pub fn saveToStreamFinish(_async_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_save_to_stream_finish" });
        const ret = cFn(_async_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_alpha](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.add_alpha.html)
    pub fn addAlpha(self: *Pixbuf, _substitute_color: bool, _r: u8, _g: u8, _b: u8) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, bool, u8, u8, u8) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_add_alpha" });
        const ret = cFn(self, _substitute_color, _r, _g, _b);
        return ret;
    }
    /// method [apply_embedded_orientation](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.apply_embedded_orientation.html)
    pub fn applyEmbeddedOrientation(self: *Pixbuf) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_apply_embedded_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [composite](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.composite.html)
    pub fn composite(self: *Pixbuf, _dest: *gdk_pixbuf.Pixbuf, _dest_x: i32, _dest_y: i32, _dest_width: i32, _dest_height: i32, _offset_x: f64, _offset_y: f64, _scale_x: f64, _scale_y: f64, _interp_type: gdk_pixbuf.InterpType, _overall_alpha: i32) void {
        const cFn = @extern(*const fn (*Pixbuf, *gdk_pixbuf.Pixbuf, i32, i32, i32, i32, f64, f64, f64, f64, gdk_pixbuf.InterpType, i32) callconv(.c) void, .{ .name = "gdk_pixbuf_composite" });
        const ret = cFn(self, _dest, _dest_x, _dest_y, _dest_width, _dest_height, _offset_x, _offset_y, _scale_x, _scale_y, _interp_type, _overall_alpha);
        return ret;
    }
    /// method [composite_color](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.composite_color.html)
    pub fn compositeColor(self: *Pixbuf, _dest: *gdk_pixbuf.Pixbuf, _dest_x: i32, _dest_y: i32, _dest_width: i32, _dest_height: i32, _offset_x: f64, _offset_y: f64, _scale_x: f64, _scale_y: f64, _interp_type: gdk_pixbuf.InterpType, _overall_alpha: i32, _check_x: i32, _check_y: i32, _check_size: i32, _color1: u32, _color2: u32) void {
        const cFn = @extern(*const fn (*Pixbuf, *gdk_pixbuf.Pixbuf, i32, i32, i32, i32, f64, f64, f64, f64, gdk_pixbuf.InterpType, i32, i32, i32, i32, u32, u32) callconv(.c) void, .{ .name = "gdk_pixbuf_composite_color" });
        const ret = cFn(self, _dest, _dest_x, _dest_y, _dest_width, _dest_height, _offset_x, _offset_y, _scale_x, _scale_y, _interp_type, _overall_alpha, _check_x, _check_y, _check_size, _color1, _color2);
        return ret;
    }
    /// method [composite_color_simple](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.composite_color_simple.html)
    pub fn compositeColorSimple(self: *Pixbuf, _dest_width: i32, _dest_height: i32, _interp_type: gdk_pixbuf.InterpType, _overall_alpha: i32, _check_size: i32, _color1: u32, _color2: u32) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, i32, i32, gdk_pixbuf.InterpType, i32, i32, u32, u32) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_composite_color_simple" });
        const ret = cFn(self, _dest_width, _dest_height, _interp_type, _overall_alpha, _check_size, _color1, _color2);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.copy.html)
    pub fn copy(self: *Pixbuf) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy_area](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.copy_area.html)
    pub fn copyArea(self: *Pixbuf, _src_x: i32, _src_y: i32, _width: i32, _height: i32, _dest_pixbuf: *gdk_pixbuf.Pixbuf, _dest_x: i32, _dest_y: i32) void {
        const cFn = @extern(*const fn (*Pixbuf, i32, i32, i32, i32, *gdk_pixbuf.Pixbuf, i32, i32) callconv(.c) void, .{ .name = "gdk_pixbuf_copy_area" });
        const ret = cFn(self, _src_x, _src_y, _width, _height, _dest_pixbuf, _dest_x, _dest_y);
        return ret;
    }
    /// method [copy_options](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.copy_options.html)
    pub fn copyOptions(self: *Pixbuf, _dest_pixbuf: *gdk_pixbuf.Pixbuf) bool {
        const cFn = @extern(*const fn (*Pixbuf, *gdk_pixbuf.Pixbuf) callconv(.c) bool, .{ .name = "gdk_pixbuf_copy_options" });
        const ret = cFn(self, _dest_pixbuf);
        return ret;
    }
    /// method [fill](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.fill.html)
    pub fn fill(self: *Pixbuf, _pixel: u32) void {
        const cFn = @extern(*const fn (*Pixbuf, u32) callconv(.c) void, .{ .name = "gdk_pixbuf_fill" });
        const ret = cFn(self, _pixel);
        return ret;
    }
    /// method [flip](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.flip.html)
    pub fn flip(self: *Pixbuf, _horizontal: bool) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, bool) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_flip" });
        const ret = cFn(self, _horizontal);
        return ret;
    }
    /// method [get_bits_per_sample](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_bits_per_sample.html)
    pub fn getBitsPerSample(self: *Pixbuf) i32 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) i32, .{ .name = "gdk_pixbuf_get_bits_per_sample" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_byte_length](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_byte_length.html)
    pub fn getByteLength(self: *Pixbuf) u64 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) u64, .{ .name = "gdk_pixbuf_get_byte_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_colorspace](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_colorspace.html)
    pub fn getColorspace(self: *Pixbuf) gdk_pixbuf.Colorspace {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) gdk_pixbuf.Colorspace, .{ .name = "gdk_pixbuf_get_colorspace" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_alpha](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_has_alpha.html)
    pub fn getHasAlpha(self: *Pixbuf) bool {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) bool, .{ .name = "gdk_pixbuf_get_has_alpha" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_height.html)
    pub fn getHeight(self: *Pixbuf) i32 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) i32, .{ .name = "gdk_pixbuf_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_channels](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_n_channels.html)
    pub fn getNChannels(self: *Pixbuf) i32 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) i32, .{ .name = "gdk_pixbuf_get_n_channels" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_option](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_option.html)
    pub fn getOption(self: *Pixbuf, _key: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Pixbuf, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "gdk_pixbuf_get_option" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_options](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_options.html)
    pub fn getOptions(self: *Pixbuf) *core.HashTable {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) *core.HashTable, .{ .name = "gdk_pixbuf_get_options" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixels](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_pixels.html)
    pub fn getPixels(self: *Pixbuf) struct {
        ret: [*]u8,
        length: u32,
    } {
        var length_out: u32 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Pixbuf, *u32) callconv(.c) [*]u8, .{ .name = "gdk_pixbuf_get_pixels_with_length" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_rowstride](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_rowstride.html)
    pub fn getRowstride(self: *Pixbuf) i32 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) i32, .{ .name = "gdk_pixbuf_get_rowstride" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.get_width.html)
    pub fn getWidth(self: *Pixbuf) i32 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) i32, .{ .name = "gdk_pixbuf_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [new_subpixbuf](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.new_subpixbuf.html)
    pub fn newSubpixbuf(self: *Pixbuf, _src_x: i32, _src_y: i32, _width: i32, _height: i32) *gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, i32, i32, i32, i32) callconv(.c) *gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_new_subpixbuf" });
        const ret = cFn(self, _src_x, _src_y, _width, _height);
        return ret;
    }
    /// method [read_pixel_bytes](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.read_pixel_bytes.html)
    pub fn readPixelBytes(self: *Pixbuf) *glib.Bytes {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) *glib.Bytes, .{ .name = "gdk_pixbuf_read_pixel_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_pixels](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.read_pixels.html)
    pub fn readPixels(self: *Pixbuf) *u8 {
        const cFn = @extern(*const fn (*Pixbuf) callconv(.c) *u8, .{ .name = "gdk_pixbuf_read_pixels" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_option](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.remove_option.html)
    pub fn removeOption(self: *Pixbuf, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Pixbuf, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_pixbuf_remove_option" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [rotate_simple](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.rotate_simple.html)
    pub fn rotateSimple(self: *Pixbuf, _angle: gdk_pixbuf.PixbufRotation) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, gdk_pixbuf.PixbufRotation) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_rotate_simple" });
        const ret = cFn(self, _angle);
        return ret;
    }
    /// method [saturate_and_pixelate](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.saturate_and_pixelate.html)
    pub fn saturateAndPixelate(self: *Pixbuf, _dest: *gdk_pixbuf.Pixbuf, _saturation: f32, _pixelate: bool) void {
        const cFn = @extern(*const fn (*Pixbuf, *gdk_pixbuf.Pixbuf, f32, bool) callconv(.c) void, .{ .name = "gdk_pixbuf_saturate_and_pixelate" });
        const ret = cFn(self, _dest, _saturation, _pixelate);
        return ret;
    }
    /// method [save_to_bufferv](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.save_to_bufferv.html)
    pub fn saveToBufferv(self: *Pixbuf, _type: [*:0]const u8, _option_keys: ?[*:null]?[*:0]const u8, _option_values: ?[*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        buffer: []u8,
    } {
        var buffer_out: [*]u8 = undefined;
        const _buffer = &buffer_out;
        var buffer_size_out: u64 = undefined;
        const _buffer_size = &buffer_size_out;
        const cFn = @extern(*const fn (*Pixbuf, *[*]u8, *u64, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_save_to_bufferv" });
        const ret = cFn(self, _buffer, _buffer_size, _type, _option_keys, _option_values, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .buffer = buffer_out[0..@intCast(buffer_size_out)] };
    }
    /// method [save_to_callbackv](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.save_to_callbackv.html)
    pub fn saveToCallbackv(self: *Pixbuf, save_func: anytype, save_func_args: anytype, _type: [*:0]const u8, _option_keys: ?[*:null]?[*:0]const u8, _option_values: ?[*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        var closure_save_func = core.zig_closure(save_func, save_func_args, &.{ bool, [*]u8, u64, **core.Error });
        defer closure_save_func.deinit();
        const _save_func: gdk_pixbuf.PixbufSaveFunc = @ptrCast(closure_save_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_save_func.c_data());
        const cFn = @extern(*const fn (*Pixbuf, gdk_pixbuf.PixbufSaveFunc, ?*anyopaque, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_save_to_callbackv" });
        const ret = cFn(self, _save_func, @ptrCast(_user_data), _type, _option_keys, _option_values, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [save_to_streamv](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.save_to_streamv.html)
    pub fn saveToStreamv(self: *Pixbuf, _stream: *gio.OutputStream, _type: [*:0]const u8, _option_keys: ?[*:null]?[*:0]const u8, _option_values: ?[*:null]?[*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Pixbuf, *gio.OutputStream, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_save_to_streamv" });
        const ret = cFn(self, _stream, _type, _option_keys, _option_values, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [save_to_streamv_async](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.save_to_streamv_async.html)
    pub fn saveToStreamvAsync(self: *Pixbuf, _stream: *gio.OutputStream, _type: [*:0]const u8, _option_keys: ?[*:null]?[*:0]const u8, _option_values: ?[*:null]?[*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Pixbuf, *gio.OutputStream, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_pixbuf_save_to_streamv_async" });
        const ret = cFn(self, _stream, _type, _option_keys, _option_values, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [savev](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.savev.html)
    pub fn savev(self: *Pixbuf, _filename: [*:0]const u8, _type: [*:0]const u8, _option_keys: ?[*:null]?[*:0]const u8, _option_values: ?[*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Pixbuf, [*:0]const u8, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_savev" });
        const ret = cFn(self, _filename, _type, _option_keys, _option_values, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [scale](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.scale.html)
    pub fn scale(self: *Pixbuf, _dest: *gdk_pixbuf.Pixbuf, _dest_x: i32, _dest_y: i32, _dest_width: i32, _dest_height: i32, _offset_x: f64, _offset_y: f64, _scale_x: f64, _scale_y: f64, _interp_type: gdk_pixbuf.InterpType) void {
        const cFn = @extern(*const fn (*Pixbuf, *gdk_pixbuf.Pixbuf, i32, i32, i32, i32, f64, f64, f64, f64, gdk_pixbuf.InterpType) callconv(.c) void, .{ .name = "gdk_pixbuf_scale" });
        const ret = cFn(self, _dest, _dest_x, _dest_y, _dest_width, _dest_height, _offset_x, _offset_y, _scale_x, _scale_y, _interp_type);
        return ret;
    }
    /// method [scale_simple](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.scale_simple.html)
    pub fn scaleSimple(self: *Pixbuf, _dest_width: i32, _dest_height: i32, _interp_type: gdk_pixbuf.InterpType) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*Pixbuf, i32, i32, gdk_pixbuf.InterpType) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_scale_simple" });
        const ret = cFn(self, _dest_width, _dest_height, _interp_type);
        return ret;
    }
    /// method [set_option](https://docs.gtk.org/gdk-pixbuf/method.Pixbuf.set_option.html)
    pub fn setOption(self: *Pixbuf, _key: [*:0]const u8, _value: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Pixbuf, [*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_pixbuf_set_option" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Enum [PixbufAlphaMode](https://docs.gtk.org/gdk-pixbuf/enum.PixbufAlphaMode.html)
pub const PixbufAlphaMode = if (config.disable_deprecated) core.Deprecated else enum(u32) {
    bilevel = 0,
    full = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_alpha_mode_get_type" });
        return cFn();
    }
};
/// Class [PixbufAnimation](https://docs.gtk.org/gdk-pixbuf/class.PixbufAnimation.html)
pub const PixbufAnimation = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gdk_pixbuf.PixbufAnimationClass;
    /// ctor [new_from_file](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufAnimation.new_from_file.html)
    pub fn newFromFile(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}!?*PixbufAnimation {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*PixbufAnimation, .{ .name = "gdk_pixbuf_animation_new_from_file" });
        const ret = cFn(_filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_resource](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufAnimation.new_from_resource.html)
    pub fn newFromResource(_resource_path: [*:0]const u8, _error: *?*core.Error) error{GError}!?*PixbufAnimation {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*PixbufAnimation, .{ .name = "gdk_pixbuf_animation_new_from_resource" });
        const ret = cFn(_resource_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_stream](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufAnimation.new_from_stream.html)
    pub fn newFromStream(_stream: *gio.InputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*PixbufAnimation {
        const cFn = @extern(*const fn (*gio.InputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*PixbufAnimation, .{ .name = "gdk_pixbuf_animation_new_from_stream" });
        const ret = cFn(_stream, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_stream_finish](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufAnimation.new_from_stream_finish.html)
    pub fn newFromStreamFinish(_async_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*PixbufAnimation {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) ?*PixbufAnimation, .{ .name = "gdk_pixbuf_animation_new_from_stream_finish" });
        const ret = cFn(_async_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new_from_stream_async](https://docs.gtk.org/gdk-pixbuf/type_func.PixbufAnimation.new_from_stream_async.html)
    pub fn newFromStreamAsync(_stream: *gio.InputStream, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.InputStream, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_pixbuf_animation_new_from_stream_async" });
        const ret = cFn(_stream, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimation.get_height.html)
    pub fn getHeight(self: *PixbufAnimation) i32 {
        const cFn = @extern(*const fn (*PixbufAnimation) callconv(.c) i32, .{ .name = "gdk_pixbuf_animation_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iter](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimation.get_iter.html)
    pub fn getIter(self: *PixbufAnimation, _start_time: ?*glib.TimeVal) *gdk_pixbuf.PixbufAnimationIter {
        const cFn = @extern(*const fn (*PixbufAnimation, ?*glib.TimeVal) callconv(.c) *gdk_pixbuf.PixbufAnimationIter, .{ .name = "gdk_pixbuf_animation_get_iter" });
        const ret = cFn(self, _start_time);
        return ret;
    }
    /// method [get_static_image](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimation.get_static_image.html)
    pub fn getStaticImage(self: *PixbufAnimation) *gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*PixbufAnimation) callconv(.c) *gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_animation_get_static_image" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimation.get_width.html)
    pub fn getWidth(self: *PixbufAnimation) i32 {
        const cFn = @extern(*const fn (*PixbufAnimation) callconv(.c) i32, .{ .name = "gdk_pixbuf_animation_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_static_image](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimation.is_static_image.html)
    pub fn isStaticImage(self: *PixbufAnimation) bool {
        const cFn = @extern(*const fn (*PixbufAnimation) callconv(.c) bool, .{ .name = "gdk_pixbuf_animation_is_static_image" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_iter](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimation.get_iter.html)
    pub fn getIterV(self: *PixbufAnimation, _start_time: ?*glib.TimeVal) *gdk_pixbuf.PixbufAnimationIter {
        const class: *PixbufAnimationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_iter.?;
        const ret = vFn(self, _start_time);
        return ret;
    }
    /// vfunc [get_size](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimation.get_size.html)
    pub fn getSizeV(self: *PixbufAnimation, _width: *i32, _height: *i32) void {
        const class: *PixbufAnimationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_size.?;
        const ret = vFn(self, _width, _height);
        return ret;
    }
    /// vfunc [get_static_image](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimation.get_static_image.html)
    pub fn getStaticImageV(self: *PixbufAnimation) *gdk_pixbuf.Pixbuf {
        const class: *PixbufAnimationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_static_image.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_static_image](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimation.is_static_image.html)
    pub fn isStaticImageV(self: *PixbufAnimation) bool {
        const class: *PixbufAnimationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_static_image.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_animation_get_type" });
        return cFn();
    }
};
pub const PixbufAnimationClass = extern struct {
    parent_class: gobject.ObjectClass,
    is_static_image: ?*const fn (_animation: *gdk_pixbuf.PixbufAnimation) callconv(.c) bool,
    get_static_image: ?*const fn (_animation: *gdk_pixbuf.PixbufAnimation) callconv(.c) *gdk_pixbuf.Pixbuf,
    get_size: ?*const fn (_animation: *gdk_pixbuf.PixbufAnimation, _width: *i32, _height: *i32) callconv(.c) void,
    get_iter: ?*const fn (_animation: *gdk_pixbuf.PixbufAnimation, _start_time: ?*glib.TimeVal) callconv(.c) *gdk_pixbuf.PixbufAnimationIter,
};
/// Class [PixbufAnimationIter](https://docs.gtk.org/gdk-pixbuf/class.PixbufAnimationIter.html)
pub const PixbufAnimationIter = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gdk_pixbuf.PixbufAnimationIterClass;
    /// method [advance](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimationIter.advance.html)
    pub fn advance(self: *PixbufAnimationIter, _current_time: ?*glib.TimeVal) bool {
        const cFn = @extern(*const fn (*PixbufAnimationIter, ?*glib.TimeVal) callconv(.c) bool, .{ .name = "gdk_pixbuf_animation_iter_advance" });
        const ret = cFn(self, _current_time);
        return ret;
    }
    /// method [get_delay_time](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimationIter.get_delay_time.html)
    pub fn getDelayTime(self: *PixbufAnimationIter) i32 {
        const cFn = @extern(*const fn (*PixbufAnimationIter) callconv(.c) i32, .{ .name = "gdk_pixbuf_animation_iter_get_delay_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixbuf](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimationIter.get_pixbuf.html)
    pub fn getPixbuf(self: *PixbufAnimationIter) *gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*PixbufAnimationIter) callconv(.c) *gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_animation_iter_get_pixbuf" });
        const ret = cFn(self);
        return ret;
    }
    /// method [on_currently_loading_frame](https://docs.gtk.org/gdk-pixbuf/method.PixbufAnimationIter.on_currently_loading_frame.html)
    pub fn onCurrentlyLoadingFrame(self: *PixbufAnimationIter) bool {
        const cFn = @extern(*const fn (*PixbufAnimationIter) callconv(.c) bool, .{ .name = "gdk_pixbuf_animation_iter_on_currently_loading_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [advance](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimationIter.advance.html)
    pub fn advanceV(self: *PixbufAnimationIter, _current_time: ?*glib.TimeVal) bool {
        const class: *PixbufAnimationIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.advance.?;
        const ret = vFn(self, _current_time);
        return ret;
    }
    /// vfunc [get_delay_time](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimationIter.get_delay_time.html)
    pub fn getDelayTimeV(self: *PixbufAnimationIter) i32 {
        const class: *PixbufAnimationIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_delay_time.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_pixbuf](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimationIter.get_pixbuf.html)
    pub fn getPixbufV(self: *PixbufAnimationIter) *gdk_pixbuf.Pixbuf {
        const class: *PixbufAnimationIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_pixbuf.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [on_currently_loading_frame](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufAnimationIter.on_currently_loading_frame.html)
    pub fn onCurrentlyLoadingFrameV(self: *PixbufAnimationIter) bool {
        const class: *PixbufAnimationIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.on_currently_loading_frame.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_animation_iter_get_type" });
        return cFn();
    }
};
pub const PixbufAnimationIterClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_delay_time: ?*const fn (_iter: *gdk_pixbuf.PixbufAnimationIter) callconv(.c) i32,
    get_pixbuf: ?*const fn (_iter: *gdk_pixbuf.PixbufAnimationIter) callconv(.c) *gdk_pixbuf.Pixbuf,
    on_currently_loading_frame: ?*const fn (_iter: *gdk_pixbuf.PixbufAnimationIter) callconv(.c) bool,
    advance: ?*const fn (_iter: *gdk_pixbuf.PixbufAnimationIter, _current_time: ?*glib.TimeVal) callconv(.c) bool,
};
/// callback [PixbufDestroyNotify](https://docs.gtk.org/gdk-pixbuf/callback.PixbufDestroyNotify.html)
pub const PixbufDestroyNotify = *const fn (_pixels: [*]u8, _data: ?*anyopaque) callconv(.c) void;
/// Error [PixbufError](https://docs.gtk.org/gdk-pixbuf/error.PixbufError.html)
pub const PixbufError = enum(u32) {
    corrupt_image = 0,
    insufficient_memory = 1,
    bad_option = 2,
    unknown_type = 3,
    unsupported_operation = 4,
    failed = 5,
    incomplete_animation = 6,

    /// type func [quark](https://docs.gtk.org/gdk-pixbuf/type_func.PixbufError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_pixbuf_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_error_get_type" });
        return cFn();
    }
};
/// Struct [PixbufFormat](https://docs.gtk.org/gdk-pixbuf/struct.PixbufFormat.html)
pub const PixbufFormat = extern struct {
    name: ?[*:0]const u8,
    signature: ?*gdk_pixbuf.PixbufModulePattern,
    domain: ?[*:0]const u8,
    description: ?[*:0]const u8,
    mime_types: ?[*:null]?[*:0]const u8,
    extensions: ?[*:null]?[*:0]const u8,
    flags: u32,
    disabled: bool,
    license: ?[*:0]const u8,
    /// method [copy](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.copy.html)
    pub fn copy(self: *PixbufFormat) ?*gdk_pixbuf.PixbufFormat {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?*gdk_pixbuf.PixbufFormat, .{ .name = "gdk_pixbuf_format_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.free.html)
    pub fn free(self: *PixbufFormat) void {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) void, .{ .name = "gdk_pixbuf_format_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.get_description.html)
    pub fn getDescription(self: *PixbufFormat) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?[*:0]u8, .{ .name = "gdk_pixbuf_format_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extensions](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.get_extensions.html)
    pub fn getExtensions(self: *PixbufFormat) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gdk_pixbuf_format_get_extensions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_license](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.get_license.html)
    pub fn getLicense(self: *PixbufFormat) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?[*:0]u8, .{ .name = "gdk_pixbuf_format_get_license" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mime_types](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.get_mime_types.html)
    pub fn getMimeTypes(self: *PixbufFormat) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gdk_pixbuf_format_get_mime_types" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.get_name.html)
    pub fn getName(self: *PixbufFormat) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) ?[*:0]u8, .{ .name = "gdk_pixbuf_format_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_disabled](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.is_disabled.html)
    pub fn isDisabled(self: *PixbufFormat) bool {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) bool, .{ .name = "gdk_pixbuf_format_is_disabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_save_option_supported](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.is_save_option_supported.html)
    pub fn isSaveOptionSupported(self: *PixbufFormat, _option_key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PixbufFormat, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_pixbuf_format_is_save_option_supported" });
        const ret = cFn(self, _option_key);
        return ret;
    }
    /// method [is_scalable](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.is_scalable.html)
    pub fn isScalable(self: *PixbufFormat) bool {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) bool, .{ .name = "gdk_pixbuf_format_is_scalable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_writable](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.is_writable.html)
    pub fn isWritable(self: *PixbufFormat) bool {
        const cFn = @extern(*const fn (*PixbufFormat) callconv(.c) bool, .{ .name = "gdk_pixbuf_format_is_writable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_disabled](https://docs.gtk.org/gdk-pixbuf/method.PixbufFormat.set_disabled.html)
    pub fn setDisabled(self: *PixbufFormat, _disabled: bool) void {
        const cFn = @extern(*const fn (*PixbufFormat, bool) callconv(.c) void, .{ .name = "gdk_pixbuf_format_set_disabled" });
        const ret = cFn(self, _disabled);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_format_get_type" });
        return cFn();
    }
};
/// Flags [PixbufFormatFlags](https://docs.gtk.org/gdk-pixbuf/flags.PixbufFormatFlags.html)
pub const PixbufFormatFlags = packed struct(u32) {
    writable: bool = false,
    scalable: bool = false,
    threadsafe: bool = false,
    _: u29 = 0,
};
/// Class [PixbufLoader](https://docs.gtk.org/gdk-pixbuf/class.PixbufLoader.html)
pub const PixbufLoader = extern struct {
    parent_instance: gobject.Object,
    priv: ?*anyopaque,
    pub const Parent = gobject.Object;
    pub const Class = gdk_pixbuf.PixbufLoaderClass;
    /// ctor [new](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufLoader.new.html)
    pub fn new() *PixbufLoader {
        const cFn = @extern(*const fn () callconv(.c) *PixbufLoader, .{ .name = "gdk_pixbuf_loader_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_mime_type](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufLoader.new_with_mime_type.html)
    pub fn newWithMimeType(_mime_type: [*:0]const u8, _error: *?*core.Error) error{GError}!*PixbufLoader {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *PixbufLoader, .{ .name = "gdk_pixbuf_loader_new_with_mime_type" });
        const ret = cFn(_mime_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_with_type](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufLoader.new_with_type.html)
    pub fn newWithType(_image_type: [*:0]const u8, _error: *?*core.Error) error{GError}!*PixbufLoader {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *PixbufLoader, .{ .name = "gdk_pixbuf_loader_new_with_type" });
        const ret = cFn(_image_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.close.html)
    pub fn close(self: *PixbufLoader, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PixbufLoader, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_loader_close" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_animation](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.get_animation.html)
    pub fn getAnimation(self: *PixbufLoader) ?*gdk_pixbuf.PixbufAnimation {
        const cFn = @extern(*const fn (*PixbufLoader) callconv(.c) ?*gdk_pixbuf.PixbufAnimation, .{ .name = "gdk_pixbuf_loader_get_animation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_format](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.get_format.html)
    pub fn getFormat(self: *PixbufLoader) ?*gdk_pixbuf.PixbufFormat {
        const cFn = @extern(*const fn (*PixbufLoader) callconv(.c) ?*gdk_pixbuf.PixbufFormat, .{ .name = "gdk_pixbuf_loader_get_format" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixbuf](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.get_pixbuf.html)
    pub fn getPixbuf(self: *PixbufLoader) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*PixbufLoader) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_loader_get_pixbuf" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.set_size.html)
    pub fn setSize(self: *PixbufLoader, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*PixbufLoader, i32, i32) callconv(.c) void, .{ .name = "gdk_pixbuf_loader_set_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [write](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.write.html)
    pub fn write(self: *PixbufLoader, _bufs: []u8, _error: *?*core.Error) error{GError}!bool {
        const _buf = _bufs.ptr;
        const _count: u64 = @intCast(_bufs.len);
        const cFn = @extern(*const fn (*PixbufLoader, [*]u8, u64, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_loader_write" });
        const ret = cFn(self, _buf, _count, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [write_bytes](https://docs.gtk.org/gdk-pixbuf/method.PixbufLoader.write_bytes.html)
    pub fn writeBytes(self: *PixbufLoader, _buffer: *glib.Bytes, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PixbufLoader, *glib.Bytes, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_pixbuf_loader_write_bytes" });
        const ret = cFn(self, _buffer, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [area_prepared](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufLoader.area_prepared.html)
    pub fn areaPreparedV(self: *PixbufLoader) void {
        const class: *PixbufLoaderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.area_prepared.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [area_updated](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufLoader.area_updated.html)
    pub fn areaUpdatedV(self: *PixbufLoader, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const class: *PixbufLoaderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.area_updated.?;
        const ret = vFn(self, _x, _y, _width, _height);
        return ret;
    }
    /// vfunc [closed](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufLoader.closed.html)
    pub fn closedV(self: *PixbufLoader) void {
        const class: *PixbufLoaderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.closed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [size_prepared](https://docs.gtk.org/gdk-pixbuf/vfunc.PixbufLoader.size_prepared.html)
    pub fn sizePreparedV(self: *PixbufLoader, _width: i32, _height: i32) void {
        const class: *PixbufLoaderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.size_prepared.?;
        const ret = vFn(self, _width, _height);
        return ret;
    }
    /// signal [area-prepared](https://docs.gtk.org/gdk-pixbuf/signal.PixbufLoader.area-prepared.html)
    pub fn connectAreaPrepared(self: *PixbufLoader, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("area-prepared", handler, args, flags, &.{ void, *PixbufLoader });
    }
    /// signal [area-updated](https://docs.gtk.org/gdk-pixbuf/signal.PixbufLoader.area-updated.html)
    pub fn connectAreaUpdated(self: *PixbufLoader, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("area-updated", handler, args, flags, &.{ void, *PixbufLoader, i32, i32, i32, i32 });
    }
    /// signal [closed](https://docs.gtk.org/gdk-pixbuf/signal.PixbufLoader.closed.html)
    pub fn connectClosed(self: *PixbufLoader, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("closed", handler, args, flags, &.{ void, *PixbufLoader });
    }
    /// signal [size-prepared](https://docs.gtk.org/gdk-pixbuf/signal.PixbufLoader.size-prepared.html)
    pub fn connectSizePrepared(self: *PixbufLoader, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("size-prepared", handler, args, flags, &.{ void, *PixbufLoader, i32, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_loader_get_type" });
        return cFn();
    }
};
pub const PixbufLoaderClass = extern struct {
    parent_class: gobject.ObjectClass,
    size_prepared: ?*const fn (_loader: *gdk_pixbuf.PixbufLoader, _width: i32, _height: i32) callconv(.c) void,
    area_prepared: ?*const fn (_loader: *gdk_pixbuf.PixbufLoader) callconv(.c) void,
    area_updated: ?*const fn (_loader: *gdk_pixbuf.PixbufLoader, _x: i32, _y: i32, _width: i32, _height: i32) callconv(.c) void,
    closed: ?*const fn (_loader: *gdk_pixbuf.PixbufLoader) callconv(.c) void,
};
/// Struct [PixbufModule](https://docs.gtk.org/gdk-pixbuf/struct.PixbufModule.html)
pub const PixbufModule = extern struct {
    module_name: ?[*:0]const u8,
    module_path: ?[*:0]const u8,
    module: ?*gmodule.Module,
    info: ?*gdk_pixbuf.PixbufFormat,
    load: ?*const fn (_f: ?*anyopaque, _error: *?*core.Error) callconv(.c) *gdk_pixbuf.Pixbuf,
    load_xpm_data: ?*const fn (_data: [*:null]?[*:0]const u8) callconv(.c) *gdk_pixbuf.Pixbuf,
    begin_load: ?*anyopaque,
    stop_load: ?*const fn (_context: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool,
    load_increment: ?*const fn (_context: ?*anyopaque, _buf: [*]u8, _size: u32, _error: *?*core.Error) callconv(.c) bool,
    load_animation: ?*const fn (_f: ?*anyopaque, _error: *?*core.Error) callconv(.c) *gdk_pixbuf.PixbufAnimation,
    save: ?*const fn (_f: ?*anyopaque, _pixbuf: *gdk_pixbuf.Pixbuf, _param_keys: ?[*:null]?[*:0]const u8, _param_values: ?[*:null]?[*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    save_to_callback: ?*anyopaque,
    is_save_option_supported: ?*const fn (_option_key: [*:0]const u8) callconv(.c) bool,
    _reserved1: ?*anyopaque,
    _reserved2: ?*anyopaque,
    _reserved3: ?*anyopaque,
    _reserved4: ?*anyopaque,
};
/// callback [PixbufModuleFillInfoFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleFillInfoFunc.html)
pub const PixbufModuleFillInfoFunc = *const fn (_info: *gdk_pixbuf.PixbufFormat) callconv(.c) void;
/// callback [PixbufModuleFillVtableFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleFillVtableFunc.html)
pub const PixbufModuleFillVtableFunc = *const fn (_module: *gdk_pixbuf.PixbufModule) callconv(.c) void;
/// callback [PixbufModuleIncrementLoadFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleIncrementLoadFunc.html)
pub const PixbufModuleIncrementLoadFunc = *const fn (_context: ?*anyopaque, _buf: [*]u8, _size: u32, _error: *?*core.Error) callconv(.c) bool;
/// callback [PixbufModuleLoadAnimationFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleLoadAnimationFunc.html)
pub const PixbufModuleLoadAnimationFunc = *const fn (_f: ?*anyopaque, _error: *?*core.Error) callconv(.c) *gdk_pixbuf.PixbufAnimation;
/// callback [PixbufModuleLoadFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleLoadFunc.html)
pub const PixbufModuleLoadFunc = *const fn (_f: ?*anyopaque, _error: *?*core.Error) callconv(.c) *gdk_pixbuf.Pixbuf;
/// callback [PixbufModuleLoadXpmDataFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleLoadXpmDataFunc.html)
pub const PixbufModuleLoadXpmDataFunc = *const fn (_data: [*:null]?[*:0]const u8) callconv(.c) *gdk_pixbuf.Pixbuf;
/// Struct [PixbufModulePattern](https://docs.gtk.org/gdk-pixbuf/struct.PixbufModulePattern.html)
pub const PixbufModulePattern = extern struct {
    prefix: ?[*:0]const u8,
    mask: ?[*:0]const u8,
    relevance: i32,
};
/// callback [PixbufModulePreparedFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModulePreparedFunc.html)
pub const PixbufModulePreparedFunc = *const fn (_pixbuf: *gdk_pixbuf.Pixbuf, _anim: *gdk_pixbuf.PixbufAnimation, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [PixbufModuleSaveFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleSaveFunc.html)
pub const PixbufModuleSaveFunc = *const fn (_f: ?*anyopaque, _pixbuf: *gdk_pixbuf.Pixbuf, _param_keys: ?[*:null]?[*:0]const u8, _param_values: ?[*:null]?[*:0]const u8, _error: *?*core.Error) callconv(.c) bool;
/// callback [PixbufModuleSaveOptionSupportedFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleSaveOptionSupportedFunc.html)
pub const PixbufModuleSaveOptionSupportedFunc = *const fn (_option_key: [*:0]const u8) callconv(.c) bool;
/// callback [PixbufModuleSizeFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleSizeFunc.html)
pub const PixbufModuleSizeFunc = *const fn (_width: *i32, _height: *i32, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [PixbufModuleStopLoadFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleStopLoadFunc.html)
pub const PixbufModuleStopLoadFunc = *const fn (_context: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool;
/// callback [PixbufModuleUpdatedFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufModuleUpdatedFunc.html)
pub const PixbufModuleUpdatedFunc = *const fn (_pixbuf: *gdk_pixbuf.Pixbuf, _x: i32, _y: i32, _width: i32, _height: i32, _user_data: ?*anyopaque) callconv(.c) void;
/// Class [PixbufNonAnim](https://docs.gtk.org/gdk-pixbuf/class.PixbufNonAnim.html)
pub const PixbufNonAnim = opaque {
    pub const Parent = gdk_pixbuf.PixbufAnimation;
    /// ctor [new](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufNonAnim.new.html)
    pub fn new(_pixbuf: *gdk_pixbuf.Pixbuf) *PixbufNonAnim {
        const cFn = @extern(*const fn (*gdk_pixbuf.Pixbuf) callconv(.c) *PixbufNonAnim, .{ .name = "gdk_pixbuf_non_anim_new" });
        const ret = cFn(_pixbuf);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_non_anim_get_type" });
        return cFn();
    }
};
/// Enum [PixbufRotation](https://docs.gtk.org/gdk-pixbuf/enum.PixbufRotation.html)
pub const PixbufRotation = enum(u32) {
    none = 0,
    counterclockwise = 90,
    upsidedown = 180,
    clockwise = 270,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_rotation_get_type" });
        return cFn();
    }
};
/// callback [PixbufSaveFunc](https://docs.gtk.org/gdk-pixbuf/callback.PixbufSaveFunc.html)
pub const PixbufSaveFunc = *const fn (_buf: [*]u8, _count: u64, _error: **core.Error, _data: ?*anyopaque) callconv(.c) bool;
/// Class [PixbufSimpleAnim](https://docs.gtk.org/gdk-pixbuf/class.PixbufSimpleAnim.html)
/// - property [loop](https://docs.gtk.org/gdk-pixbuf/property.PixbufSimpleAnim.loop.html): (rw) `bool`
pub const PixbufSimpleAnim = opaque {
    pub const Parent = gdk_pixbuf.PixbufAnimation;
    pub const Class = gdk_pixbuf.PixbufSimpleAnimClass;
    /// ctor [new](https://docs.gtk.org/gdk-pixbuf/ctor.PixbufSimpleAnim.new.html)
    pub fn new(_width: i32, _height: i32, _rate: f32) *PixbufSimpleAnim {
        const cFn = @extern(*const fn (i32, i32, f32) callconv(.c) *PixbufSimpleAnim, .{ .name = "gdk_pixbuf_simple_anim_new" });
        const ret = cFn(_width, _height, _rate);
        return ret;
    }
    /// method [add_frame](https://docs.gtk.org/gdk-pixbuf/method.PixbufSimpleAnim.add_frame.html)
    pub fn addFrame(self: *PixbufSimpleAnim, _pixbuf: *gdk_pixbuf.Pixbuf) void {
        const cFn = @extern(*const fn (*PixbufSimpleAnim, *gdk_pixbuf.Pixbuf) callconv(.c) void, .{ .name = "gdk_pixbuf_simple_anim_add_frame" });
        const ret = cFn(self, _pixbuf);
        return ret;
    }
    /// method [get_loop](https://docs.gtk.org/gdk-pixbuf/method.PixbufSimpleAnim.get_loop.html)
    pub fn getLoop(self: *PixbufSimpleAnim) bool {
        const cFn = @extern(*const fn (*PixbufSimpleAnim) callconv(.c) bool, .{ .name = "gdk_pixbuf_simple_anim_get_loop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_loop](https://docs.gtk.org/gdk-pixbuf/method.PixbufSimpleAnim.set_loop.html)
    pub fn setLoop(self: *PixbufSimpleAnim, _loop: bool) void {
        const cFn = @extern(*const fn (*PixbufSimpleAnim, bool) callconv(.c) void, .{ .name = "gdk_pixbuf_simple_anim_set_loop" });
        const ret = cFn(self, _loop);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_simple_anim_get_type" });
        return cFn();
    }
};
pub const PixbufSimpleAnimClass = opaque {};
/// Class [PixbufSimpleAnimIter](https://docs.gtk.org/gdk-pixbuf/class.PixbufSimpleAnimIter.html)
pub const PixbufSimpleAnimIter = opaque {
    pub const Parent = gdk_pixbuf.PixbufAnimationIter;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pixbuf_simple_anim_iter_get_type" });
        return cFn();
    }
};
/// func [pixbuf_error_quark](https://docs.gtk.org/gdk-pixbuf/func.pixbuf_error_quark.html)
pub fn pixbufErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_pixbuf_error_quark" });
    const ret = cFn();
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
