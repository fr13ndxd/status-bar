// This file is auto-generated by zig-gir-ffi
const glib = @This();
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// const [ALLOCATOR_LIST](https://docs.gtk.org/glib/const.ALLOCATOR_LIST.html)
pub const ALLOCATOR_LIST = 1;
/// const [ALLOCATOR_NODE](https://docs.gtk.org/glib/const.ALLOCATOR_NODE.html)
pub const ALLOCATOR_NODE = 3;
/// const [ALLOCATOR_SLIST](https://docs.gtk.org/glib/const.ALLOCATOR_SLIST.html)
pub const ALLOCATOR_SLIST = 2;
/// const [ALLOC_AND_FREE](https://docs.gtk.org/glib/const.ALLOC_AND_FREE.html)
pub const ALLOC_AND_FREE = 2;
/// const [ALLOC_ONLY](https://docs.gtk.org/glib/const.ALLOC_ONLY.html)
pub const ALLOC_ONLY = 1;
/// const [ANALYZER_ANALYZING](https://docs.gtk.org/glib/const.ANALYZER_ANALYZING.html)
pub const ANALYZER_ANALYZING = 1;
/// const [ASCII_DTOSTR_BUF_SIZE](https://docs.gtk.org/glib/const.ASCII_DTOSTR_BUF_SIZE.html)
pub const ASCII_DTOSTR_BUF_SIZE = 39;
/// const [ATOMIC_REF_COUNT_INIT](https://docs.gtk.org/glib/const.ATOMIC_REF_COUNT_INIT.html)
pub const ATOMIC_REF_COUNT_INIT = 1;
/// Struct [Allocator](https://docs.gtk.org/glib/struct.Allocator.html)
pub const Allocator = opaque {
    /// method [free](https://docs.gtk.org/glib/method.Allocator.free.html)
    pub fn free(self: *Allocator) void {
        const cFn = @extern(*const fn (*Allocator) callconv(.c) void, .{ .name = "g_allocator_free" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [Array](https://docs.gtk.org/glib/struct.Array.html)
pub const Array = extern struct {
    data: ?[*:0]const u8,
    len: u32,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_array_get_type" });
        return cFn();
    }
};
/// Flags [AsciiType](https://docs.gtk.org/glib/flags.AsciiType.html)
pub const AsciiType = packed struct(u32) {
    alnum: bool = false,
    alpha: bool = false,
    cntrl: bool = false,
    digit: bool = false,
    graph: bool = false,
    lower: bool = false,
    print: bool = false,
    punct: bool = false,
    space: bool = false,
    upper: bool = false,
    xdigit: bool = false,
    _: u21 = 0,
};
/// Struct [AsyncQueue](https://docs.gtk.org/glib/struct.AsyncQueue.html)
pub const AsyncQueue = opaque {
    /// method [length](https://docs.gtk.org/glib/method.AsyncQueue.length.html)
    pub fn length(self: *AsyncQueue) i32 {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) i32, .{ .name = "g_async_queue_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [length_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.length_unlocked.html)
    pub fn lengthUnlocked(self: *AsyncQueue) i32 {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) i32, .{ .name = "g_async_queue_length_unlocked" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lock](https://docs.gtk.org/glib/method.AsyncQueue.lock.html)
    pub fn lock(self: *AsyncQueue) void {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) void, .{ .name = "g_async_queue_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pop](https://docs.gtk.org/glib/method.AsyncQueue.pop.html)
    pub fn pop(self: *AsyncQueue) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pop_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.pop_unlocked.html)
    pub fn popUnlocked(self: *AsyncQueue) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_pop_unlocked" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push](https://docs.gtk.org/glib/method.AsyncQueue.push.html)
    pub fn push(self: *AsyncQueue, _data: *anyopaque) void {
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [push_front](https://docs.gtk.org/glib/method.AsyncQueue.push_front.html)
    pub fn pushFront(self: *AsyncQueue, _item: *anyopaque) void {
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push_front" });
        const ret = cFn(self, @ptrCast(_item));
        return ret;
    }
    /// method [push_front_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.push_front_unlocked.html)
    pub fn pushFrontUnlocked(self: *AsyncQueue, _item: *anyopaque) void {
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push_front_unlocked" });
        const ret = cFn(self, @ptrCast(_item));
        return ret;
    }
    /// method [push_sorted](https://docs.gtk.org/glib/method.AsyncQueue.push_sorted.html)
    pub fn pushSorted(self: *AsyncQueue, _data: *anyopaque, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.CompareDataFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push_sorted" });
        const ret = cFn(self, @ptrCast(_data), _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [push_sorted_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.push_sorted_unlocked.html)
    pub fn pushSortedUnlocked(self: *AsyncQueue, _data: ?*anyopaque, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.CompareDataFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*AsyncQueue, ?*anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push_sorted_unlocked" });
        const ret = cFn(self, @ptrCast(_data), _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [push_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.push_unlocked.html)
    pub fn pushUnlocked(self: *AsyncQueue, _data: *anyopaque) void {
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque) callconv(.c) void, .{ .name = "g_async_queue_push_unlocked" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// Deprecated:
    /// method [ref_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.ref_unlocked.html)
    pub const refUnlocked = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn refUnlocked(self: *AsyncQueue) void {
            const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) void, .{ .name = "g_async_queue_ref_unlocked" });
            const ret = cFn(self);
            return ret;
        }
    }.refUnlocked;
    /// method [remove](https://docs.gtk.org/glib/method.AsyncQueue.remove.html)
    pub fn remove(self: *AsyncQueue, _item: *anyopaque) bool {
        const cFn = @extern(*const fn (*AsyncQueue, *anyopaque) callconv(.c) bool, .{ .name = "g_async_queue_remove" });
        const ret = cFn(self, @ptrCast(_item));
        return ret;
    }
    /// method [remove_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.remove_unlocked.html)
    pub fn removeUnlocked(self: *AsyncQueue, _item: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*AsyncQueue, ?*anyopaque) callconv(.c) bool, .{ .name = "g_async_queue_remove_unlocked" });
        const ret = cFn(self, @ptrCast(_item));
        return ret;
    }
    /// method [sort](https://docs.gtk.org/glib/method.AsyncQueue.sort.html)
    pub fn sort(self: *AsyncQueue, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.CompareDataFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*AsyncQueue, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_queue_sort" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [sort_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.sort_unlocked.html)
    pub fn sortUnlocked(self: *AsyncQueue, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.CompareDataFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*AsyncQueue, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_queue_sort_unlocked" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// Deprecated:
    /// method [timed_pop](https://docs.gtk.org/glib/method.AsyncQueue.timed_pop.html)
    pub const timedPop = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn timedPop(self: *AsyncQueue, _end_time: *glib.TimeVal) ?*anyopaque {
            const cFn = @extern(*const fn (*AsyncQueue, *glib.TimeVal) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_timed_pop" });
            const ret = cFn(self, _end_time);
            return ret;
        }
    }.timedPop;
    /// Deprecated:
    /// method [timed_pop_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.timed_pop_unlocked.html)
    pub const timedPopUnlocked = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn timedPopUnlocked(self: *AsyncQueue, _end_time: *glib.TimeVal) ?*anyopaque {
            const cFn = @extern(*const fn (*AsyncQueue, *glib.TimeVal) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_timed_pop_unlocked" });
            const ret = cFn(self, _end_time);
            return ret;
        }
    }.timedPopUnlocked;
    /// method [timeout_pop](https://docs.gtk.org/glib/method.AsyncQueue.timeout_pop.html)
    pub fn timeoutPop(self: *AsyncQueue, _timeout: u64) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue, u64) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_timeout_pop" });
        const ret = cFn(self, _timeout);
        return ret;
    }
    /// method [timeout_pop_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.timeout_pop_unlocked.html)
    pub fn timeoutPopUnlocked(self: *AsyncQueue, _timeout: u64) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue, u64) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_timeout_pop_unlocked" });
        const ret = cFn(self, _timeout);
        return ret;
    }
    /// method [try_pop](https://docs.gtk.org/glib/method.AsyncQueue.try_pop.html)
    pub fn tryPop(self: *AsyncQueue) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_try_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [try_pop_unlocked](https://docs.gtk.org/glib/method.AsyncQueue.try_pop_unlocked.html)
    pub fn tryPopUnlocked(self: *AsyncQueue) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) ?*anyopaque, .{ .name = "g_async_queue_try_pop_unlocked" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unlock](https://docs.gtk.org/glib/method.AsyncQueue.unlock.html)
    pub fn unlock(self: *AsyncQueue) void {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) void, .{ .name = "g_async_queue_unlock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.AsyncQueue.unref.html)
    pub fn unref(self: *AsyncQueue) void {
        const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) void, .{ .name = "g_async_queue_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [unref_and_unlock](https://docs.gtk.org/glib/method.AsyncQueue.unref_and_unlock.html)
    pub const unrefAndUnlock = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unrefAndUnlock(self: *AsyncQueue) void {
            const cFn = @extern(*const fn (*AsyncQueue) callconv(.c) void, .{ .name = "g_async_queue_unref_and_unlock" });
            const ret = cFn(self);
            return ret;
        }
    }.unrefAndUnlock;
};
/// const [BIG_ENDIAN](https://docs.gtk.org/glib/const.BIG_ENDIAN.html)
pub const BIG_ENDIAN = 4321;
/// Struct [BookmarkFile](https://docs.gtk.org/glib/struct.BookmarkFile.html)
pub const BookmarkFile = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.BookmarkFile.new.html)
    pub fn new() *BookmarkFile {
        const cFn = @extern(*const fn () callconv(.c) *BookmarkFile, .{ .name = "g_bookmark_file_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_application](https://docs.gtk.org/glib/method.BookmarkFile.add_application.html)
    pub fn addApplication(self: *BookmarkFile, _uri: [*:0]const u8, _name: ?[*:0]const u8, _exec: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_add_application" });
        const ret = cFn(self, _uri, _name, _exec);
        return ret;
    }
    /// method [add_group](https://docs.gtk.org/glib/method.BookmarkFile.add_group.html)
    pub fn addGroup(self: *BookmarkFile, _uri: [*:0]const u8, _group: [*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_add_group" });
        const ret = cFn(self, _uri, _group);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.BookmarkFile.copy.html)
    pub fn copy(self: *BookmarkFile) *glib.BookmarkFile {
        const cFn = @extern(*const fn (*BookmarkFile) callconv(.c) *glib.BookmarkFile, .{ .name = "g_bookmark_file_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.BookmarkFile.free.html)
    pub fn free(self: *BookmarkFile) void {
        const cFn = @extern(*const fn (*BookmarkFile) callconv(.c) void, .{ .name = "g_bookmark_file_free" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_added](https://docs.gtk.org/glib/method.BookmarkFile.get_added.html)
    pub const getAdded = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAdded(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!i64 {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) i64, .{ .name = "g_bookmark_file_get_added" });
            const ret = cFn(self, _uri, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.getAdded;
    /// method [get_added_date_time](https://docs.gtk.org/glib/method.BookmarkFile.get_added_date_time.html)
    pub fn getAddedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!*glib.DateTime {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) *glib.DateTime, .{ .name = "g_bookmark_file_get_added_date_time" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [get_app_info](https://docs.gtk.org/glib/method.BookmarkFile.get_app_info.html)
    pub const getAppInfo = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAppInfo(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _error: *?*core.Error) error{GError}!?struct {
            exec: [*:0]u8,
            count: u32,
            stamp: i64,
        } {
            var exec_out: [*:0]u8 = undefined;
            const _exec = &exec_out;
            var count_out: u32 = undefined;
            const _count = &count_out;
            var stamp_out: i64 = undefined;
            const _stamp = &stamp_out;
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, ?*[*:0]u8, ?*u32, ?*i64, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_get_app_info" });
            const ret = cFn(self, _uri, _name, _exec, _count, _stamp, _error);
            if (_error.* != null) return error.GError;
            if (!ret) return null;
            return .{ .exec = exec_out, .count = count_out, .stamp = stamp_out };
        }
    }.getAppInfo;
    /// method [get_application_info](https://docs.gtk.org/glib/method.BookmarkFile.get_application_info.html)
    pub fn getApplicationInfo(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _error: *?*core.Error) error{GError}!?struct {
        exec: [*:0]u8,
        count: u32,
        stamp: *glib.DateTime,
    } {
        var exec_out: [*:0]u8 = undefined;
        const _exec = &exec_out;
        var count_out: u32 = undefined;
        const _count = &count_out;
        var stamp_out: *glib.DateTime = undefined;
        const _stamp = &stamp_out;
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, ?*[*:0]u8, ?*u32, ?**glib.DateTime, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_get_application_info" });
        const ret = cFn(self, _uri, _name, _exec, _count, _stamp, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return .{ .exec = exec_out, .count = count_out, .stamp = stamp_out };
    }
    /// method [get_applications](https://docs.gtk.org/glib/method.BookmarkFile.get_applications.html)
    pub fn getApplications(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*][*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?*u64, *?*core.Error) callconv(.c) [*][*:0]const u8, .{ .name = "g_bookmark_file_get_applications" });
        const ret = cFn(self, _uri, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_description](https://docs.gtk.org/glib/method.BookmarkFile.get_description.html)
    pub fn getDescription(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_bookmark_file_get_description" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_groups](https://docs.gtk.org/glib/method.BookmarkFile.get_groups.html)
    pub fn getGroups(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*][*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?*u64, *?*core.Error) callconv(.c) [*][*:0]const u8, .{ .name = "g_bookmark_file_get_groups" });
        const ret = cFn(self, _uri, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_icon](https://docs.gtk.org/glib/method.BookmarkFile.get_icon.html)
    pub fn getIcon(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!?struct {
        href: [*:0]u8,
        mime_type: [*:0]u8,
    } {
        var href_out: [*:0]u8 = undefined;
        const _href = &href_out;
        var mime_type_out: [*:0]u8 = undefined;
        const _mime_type = &mime_type_out;
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?*[*:0]u8, ?*[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_get_icon" });
        const ret = cFn(self, _uri, _href, _mime_type, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return .{ .href = href_out, .mime_type = mime_type_out };
    }
    /// method [get_is_private](https://docs.gtk.org/glib/method.BookmarkFile.get_is_private.html)
    pub fn getIsPrivate(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_get_is_private" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_mime_type](https://docs.gtk.org/glib/method.BookmarkFile.get_mime_type.html)
    pub fn getMimeType(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_bookmark_file_get_mime_type" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [get_modified](https://docs.gtk.org/glib/method.BookmarkFile.get_modified.html)
    pub const getModified = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModified(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!i64 {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) i64, .{ .name = "g_bookmark_file_get_modified" });
            const ret = cFn(self, _uri, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.getModified;
    /// method [get_modified_date_time](https://docs.gtk.org/glib/method.BookmarkFile.get_modified_date_time.html)
    pub fn getModifiedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!*glib.DateTime {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) *glib.DateTime, .{ .name = "g_bookmark_file_get_modified_date_time" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/glib/method.BookmarkFile.get_size.html)
    pub fn getSize(self: *BookmarkFile) i32 {
        const cFn = @extern(*const fn (*BookmarkFile) callconv(.c) i32, .{ .name = "g_bookmark_file_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/glib/method.BookmarkFile.get_title.html)
    pub fn getTitle(self: *BookmarkFile, _uri: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*BookmarkFile, ?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_bookmark_file_get_title" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_uris](https://docs.gtk.org/glib/method.BookmarkFile.get_uris.html)
    pub fn getUris(self: *BookmarkFile) struct {
        ret: [*][*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*BookmarkFile, ?*u64) callconv(.c) [*][*:0]const u8, .{ .name = "g_bookmark_file_get_uris" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// Deprecated:
    /// method [get_visited](https://docs.gtk.org/glib/method.BookmarkFile.get_visited.html)
    pub const getVisited = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisited(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!i64 {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) i64, .{ .name = "g_bookmark_file_get_visited" });
            const ret = cFn(self, _uri, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.getVisited;
    /// method [get_visited_date_time](https://docs.gtk.org/glib/method.BookmarkFile.get_visited_date_time.html)
    pub fn getVisitedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!*glib.DateTime {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) *glib.DateTime, .{ .name = "g_bookmark_file_get_visited_date_time" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_application](https://docs.gtk.org/glib/method.BookmarkFile.has_application.html)
    pub fn hasApplication(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_has_application" });
        const ret = cFn(self, _uri, _name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_group](https://docs.gtk.org/glib/method.BookmarkFile.has_group.html)
    pub fn hasGroup(self: *BookmarkFile, _uri: [*:0]const u8, _group: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_has_group" });
        const ret = cFn(self, _uri, _group, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_item](https://docs.gtk.org/glib/method.BookmarkFile.has_item.html)
    pub fn hasItem(self: *BookmarkFile, _uri: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8) callconv(.c) bool, .{ .name = "g_bookmark_file_has_item" });
        const ret = cFn(self, _uri);
        return ret;
    }
    /// method [load_from_data](https://docs.gtk.org/glib/method.BookmarkFile.load_from_data.html)
    pub fn loadFromData(self: *BookmarkFile, _datas: []u8, _error: *?*core.Error) error{GError}!bool {
        const _data = _datas.ptr;
        const _length: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (*BookmarkFile, [*]u8, u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_load_from_data" });
        const ret = cFn(self, _data, _length, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [load_from_data_dirs](https://docs.gtk.org/glib/method.BookmarkFile.load_from_data_dirs.html)
    pub fn loadFromDataDirs(self: *BookmarkFile, _file: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        full_path: [*:0]u8,
    } {
        var full_path_out: [*:0]u8 = undefined;
        const _full_path = &full_path_out;
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?*[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_load_from_data_dirs" });
        const ret = cFn(self, _file, _full_path, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .full_path = full_path_out };
    }
    /// method [load_from_file](https://docs.gtk.org/glib/method.BookmarkFile.load_from_file.html)
    pub fn loadFromFile(self: *BookmarkFile, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_load_from_file" });
        const ret = cFn(self, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [move_item](https://docs.gtk.org/glib/method.BookmarkFile.move_item.html)
    pub fn moveItem(self: *BookmarkFile, _old_uri: [*:0]const u8, _new_uri: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_move_item" });
        const ret = cFn(self, _old_uri, _new_uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_application](https://docs.gtk.org/glib/method.BookmarkFile.remove_application.html)
    pub fn removeApplication(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_remove_application" });
        const ret = cFn(self, _uri, _name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_group](https://docs.gtk.org/glib/method.BookmarkFile.remove_group.html)
    pub fn removeGroup(self: *BookmarkFile, _uri: [*:0]const u8, _group: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_remove_group" });
        const ret = cFn(self, _uri, _group, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_item](https://docs.gtk.org/glib/method.BookmarkFile.remove_item.html)
    pub fn removeItem(self: *BookmarkFile, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_remove_item" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [set_added](https://docs.gtk.org/glib/method.BookmarkFile.set_added.html)
    pub const setAdded = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAdded(self: *BookmarkFile, _uri: [*:0]const u8, _added: i64) void {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, i64) callconv(.c) void, .{ .name = "g_bookmark_file_set_added" });
            const ret = cFn(self, _uri, _added);
            return ret;
        }
    }.setAdded;
    /// method [set_added_date_time](https://docs.gtk.org/glib/method.BookmarkFile.set_added_date_time.html)
    pub fn setAddedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _added: *glib.DateTime) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *glib.DateTime) callconv(.c) void, .{ .name = "g_bookmark_file_set_added_date_time" });
        const ret = cFn(self, _uri, _added);
        return ret;
    }
    /// Deprecated:
    /// method [set_app_info](https://docs.gtk.org/glib/method.BookmarkFile.set_app_info.html)
    pub const setAppInfo = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAppInfo(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _exec: [*:0]const u8, _count: i32, _stamp: i64, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, [*:0]const u8, i32, i64, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_set_app_info" });
            const ret = cFn(self, _uri, _name, _exec, _count, _stamp, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.setAppInfo;
    /// method [set_application_info](https://docs.gtk.org/glib/method.BookmarkFile.set_application_info.html)
    pub fn setApplicationInfo(self: *BookmarkFile, _uri: [*:0]const u8, _name: [*:0]const u8, _exec: [*:0]const u8, _count: i32, _stamp: ?*glib.DateTime, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8, [*:0]const u8, i32, ?*glib.DateTime, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_set_application_info" });
        const ret = cFn(self, _uri, _name, _exec, _count, _stamp, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_description](https://docs.gtk.org/glib/method.BookmarkFile.set_description.html)
    pub fn setDescription(self: *BookmarkFile, _uri: ?[*:0]const u8, _description: [*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_set_description" });
        const ret = cFn(self, _uri, _description);
        return ret;
    }
    /// method [set_groups](https://docs.gtk.org/glib/method.BookmarkFile.set_groups.html)
    pub fn setGroups(self: *BookmarkFile, _uri: [*:0]const u8, _groupss: [][*:0]const u8) void {
        const _groups = _groupss.ptr;
        const _length: u64 = @intCast(_groupss.len);
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?[*][*:0]const u8, u64) callconv(.c) void, .{ .name = "g_bookmark_file_set_groups" });
        const ret = cFn(self, _uri, _groups, _length);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/glib/method.BookmarkFile.set_icon.html)
    pub fn setIcon(self: *BookmarkFile, _uri: [*:0]const u8, _href: ?[*:0]const u8, _mime_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_set_icon" });
        const ret = cFn(self, _uri, _href, _mime_type);
        return ret;
    }
    /// method [set_is_private](https://docs.gtk.org/glib/method.BookmarkFile.set_is_private.html)
    pub fn setIsPrivate(self: *BookmarkFile, _uri: [*:0]const u8, _is_private: bool) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_bookmark_file_set_is_private" });
        const ret = cFn(self, _uri, _is_private);
        return ret;
    }
    /// method [set_mime_type](https://docs.gtk.org/glib/method.BookmarkFile.set_mime_type.html)
    pub fn setMimeType(self: *BookmarkFile, _uri: [*:0]const u8, _mime_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_set_mime_type" });
        const ret = cFn(self, _uri, _mime_type);
        return ret;
    }
    /// Deprecated:
    /// method [set_modified](https://docs.gtk.org/glib/method.BookmarkFile.set_modified.html)
    pub const setModified = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModified(self: *BookmarkFile, _uri: [*:0]const u8, _modified: i64) void {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, i64) callconv(.c) void, .{ .name = "g_bookmark_file_set_modified" });
            const ret = cFn(self, _uri, _modified);
            return ret;
        }
    }.setModified;
    /// method [set_modified_date_time](https://docs.gtk.org/glib/method.BookmarkFile.set_modified_date_time.html)
    pub fn setModifiedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _modified: *glib.DateTime) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *glib.DateTime) callconv(.c) void, .{ .name = "g_bookmark_file_set_modified_date_time" });
        const ret = cFn(self, _uri, _modified);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/glib/method.BookmarkFile.set_title.html)
    pub fn setTitle(self: *BookmarkFile, _uri: ?[*:0]const u8, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkFile, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_bookmark_file_set_title" });
        const ret = cFn(self, _uri, _title);
        return ret;
    }
    /// Deprecated:
    /// method [set_visited](https://docs.gtk.org/glib/method.BookmarkFile.set_visited.html)
    pub const setVisited = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setVisited(self: *BookmarkFile, _uri: [*:0]const u8, _visited: i64) void {
            const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, i64) callconv(.c) void, .{ .name = "g_bookmark_file_set_visited" });
            const ret = cFn(self, _uri, _visited);
            return ret;
        }
    }.setVisited;
    /// method [set_visited_date_time](https://docs.gtk.org/glib/method.BookmarkFile.set_visited_date_time.html)
    pub fn setVisitedDateTime(self: *BookmarkFile, _uri: [*:0]const u8, _visited: *glib.DateTime) void {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *glib.DateTime) callconv(.c) void, .{ .name = "g_bookmark_file_set_visited_date_time" });
        const ret = cFn(self, _uri, _visited);
        return ret;
    }
    /// method [to_data](https://docs.gtk.org/glib/method.BookmarkFile.to_data.html)
    pub fn toData(self: *BookmarkFile, _error: *?*core.Error) error{GError}!struct {
        ret: [*]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*BookmarkFile, ?*u64, *?*core.Error) callconv(.c) [*]u8, .{ .name = "g_bookmark_file_to_data" });
        const ret = cFn(self, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [to_file](https://docs.gtk.org/glib/method.BookmarkFile.to_file.html)
    pub fn toFile(self: *BookmarkFile, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*BookmarkFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_bookmark_file_to_file" });
        const ret = cFn(self, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.BookmarkFile.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_bookmark_file_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bookmark_file_get_type" });
        return cFn();
    }
};
/// Error [BookmarkFileError](https://docs.gtk.org/glib/error.BookmarkFileError.html)
pub const BookmarkFileError = enum(u32) {
    invalid_uri = 0,
    invalid_value = 1,
    app_not_registered = 2,
    uri_not_found = 3,
    read = 4,
    unknown_encoding = 5,
    write = 6,
    file_not_found = 7,
};
/// Struct [ByteArray](https://docs.gtk.org/glib/struct.ByteArray.html)
pub const ByteArray = extern struct {
    data: ?*u8,
    len: u32,
    /// type func [append](https://docs.gtk.org/glib/type_func.ByteArray.append.html)
    pub fn append(_array: *core.ByteArray, _data: *u8, _len: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, *u8, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_append" });
        const ret = cFn(_array, _data, _len);
        return ret;
    }
    /// type func [free](https://docs.gtk.org/glib/type_func.ByteArray.free.html)
    pub fn free(_array: *core.ByteArray, _free_segment: bool) *u8 {
        const cFn = @extern(*const fn (*core.ByteArray, bool) callconv(.c) *u8, .{ .name = "g_byte_array_free" });
        const ret = cFn(_array, _free_segment);
        return ret;
    }
    /// type func [free_to_bytes](https://docs.gtk.org/glib/type_func.ByteArray.free_to_bytes.html)
    pub fn freeToBytes(_array: *core.ByteArray) *glib.Bytes {
        const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) *glib.Bytes, .{ .name = "g_byte_array_free_to_bytes" });
        const ret = cFn(_array);
        return ret;
    }
    /// type func [new](https://docs.gtk.org/glib/type_func.ByteArray.new.html)
    pub fn new() *core.ByteArray {
        const cFn = @extern(*const fn () callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [new_take](https://docs.gtk.org/glib/type_func.ByteArray.new_take.html)
    pub fn newTake(_datas: []u8) *core.ByteArray {
        const _data = _datas.ptr;
        const _len: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn ([*]u8, u64) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_new_take" });
        const ret = cFn(_data, _len);
        return ret;
    }
    /// type func [prepend](https://docs.gtk.org/glib/type_func.ByteArray.prepend.html)
    pub fn prepend(_array: *core.ByteArray, _data: *u8, _len: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, *u8, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_prepend" });
        const ret = cFn(_array, _data, _len);
        return ret;
    }
    /// type func [ref](https://docs.gtk.org/glib/type_func.ByteArray.ref.html)
    pub fn ref(_array: *core.ByteArray) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_ref" });
        const ret = cFn(_array);
        return ret;
    }
    /// type func [remove_index](https://docs.gtk.org/glib/type_func.ByteArray.remove_index.html)
    pub fn removeIndex(_array: *core.ByteArray, _index_: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_index" });
        const ret = cFn(_array, _index_);
        return ret;
    }
    /// type func [remove_index_fast](https://docs.gtk.org/glib/type_func.ByteArray.remove_index_fast.html)
    pub fn removeIndexFast(_array: *core.ByteArray, _index_: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_index_fast" });
        const ret = cFn(_array, _index_);
        return ret;
    }
    /// type func [remove_range](https://docs.gtk.org/glib/type_func.ByteArray.remove_range.html)
    pub fn removeRange(_array: *core.ByteArray, _index_: u32, _length: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, u32, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_range" });
        const ret = cFn(_array, _index_, _length);
        return ret;
    }
    /// type func [set_size](https://docs.gtk.org/glib/type_func.ByteArray.set_size.html)
    pub fn setSize(_array: *core.ByteArray, _length: u32) *core.ByteArray {
        const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_set_size" });
        const ret = cFn(_array, _length);
        return ret;
    }
    /// type func [sized_new](https://docs.gtk.org/glib/type_func.ByteArray.sized_new.html)
    pub fn sizedNew(_reserved_size: u32) *core.ByteArray {
        const cFn = @extern(*const fn (u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_sized_new" });
        const ret = cFn(_reserved_size);
        return ret;
    }
    /// type func [sort](https://docs.gtk.org/glib/type_func.ByteArray.sort.html)
    pub fn sort(_array: *core.ByteArray, _compare_func: glib.CompareFunc) void {
        const cFn = @extern(*const fn (*core.ByteArray, glib.CompareFunc) callconv(.c) void, .{ .name = "g_byte_array_sort" });
        const ret = cFn(_array, _compare_func);
        return ret;
    }
    /// type func [sort_with_data](https://docs.gtk.org/glib/type_func.ByteArray.sort_with_data.html)
    pub fn sortWithData(_array: *core.ByteArray, compare_func: anytype, compare_func_args: anytype) void {
        var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_compare_func.deinit();
        const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
        const cFn = @extern(*const fn (*core.ByteArray, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_byte_array_sort_with_data" });
        const ret = cFn(_array, _compare_func, @ptrCast(_user_data));
        return ret;
    }
    /// type func [steal](https://docs.gtk.org/glib/type_func.ByteArray.steal.html)
    pub fn steal(_array: *core.ByteArray) struct {
        ret: *u8,
        len: u64,
    } {
        var len_out: u64 = undefined;
        const _len = &len_out;
        const cFn = @extern(*const fn (*core.ByteArray, ?*u64) callconv(.c) *u8, .{ .name = "g_byte_array_steal" });
        const ret = cFn(_array, _len);
        return .{ .ret = ret, .len = len_out };
    }
    /// type func [unref](https://docs.gtk.org/glib/type_func.ByteArray.unref.html)
    pub fn unref(_array: *core.ByteArray) void {
        const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) void, .{ .name = "g_byte_array_unref" });
        const ret = cFn(_array);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_byte_array_get_type" });
        return cFn();
    }
};
/// Struct [Bytes](https://docs.gtk.org/glib/struct.Bytes.html)
pub const Bytes = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.Bytes.new.html)
    pub fn new(_datas: []u8) *Bytes {
        const _data = _datas.ptr;
        const _size: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (?[*]u8, u64) callconv(.c) *Bytes, .{ .name = "g_bytes_new" });
        const ret = cFn(_data, _size);
        return ret;
    }
    /// ctor [new_take](https://docs.gtk.org/glib/ctor.Bytes.new_take.html)
    pub fn newTake(_datas: []u8) *Bytes {
        const _data = _datas.ptr;
        const _size: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (?[*]u8, u64) callconv(.c) *Bytes, .{ .name = "g_bytes_new_take" });
        const ret = cFn(_data, _size);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/glib/method.Bytes.compare.html)
    pub fn compare(self: *Bytes, _bytes2: *glib.Bytes) i32 {
        const cFn = @extern(*const fn (*Bytes, *glib.Bytes) callconv(.c) i32, .{ .name = "g_bytes_compare" });
        const ret = cFn(self, _bytes2);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/glib/method.Bytes.equal.html)
    pub fn equal(self: *Bytes, _bytes2: *glib.Bytes) bool {
        const cFn = @extern(*const fn (*Bytes, *glib.Bytes) callconv(.c) bool, .{ .name = "g_bytes_equal" });
        const ret = cFn(self, _bytes2);
        return ret;
    }
    /// method [get_data](https://docs.gtk.org/glib/method.Bytes.get_data.html)
    pub fn getData(self: *Bytes) struct {
        ret: ?[*]u8,
        size: u64,
    } {
        var size_out: u64 = undefined;
        const _size = &size_out;
        const cFn = @extern(*const fn (*Bytes, ?*u64) callconv(.c) ?[*]u8, .{ .name = "g_bytes_get_data" });
        const ret = cFn(self, _size);
        return .{ .ret = ret, .size = size_out };
    }
    /// method [get_region](https://docs.gtk.org/glib/method.Bytes.get_region.html)
    pub fn getRegion(self: *Bytes, _element_size: u64, _offset: u64, _n_elements: u64) ?*anyopaque {
        const cFn = @extern(*const fn (*Bytes, u64, u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_bytes_get_region" });
        const ret = cFn(self, _element_size, _offset, _n_elements);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/glib/method.Bytes.get_size.html)
    pub fn getSize(self: *Bytes) u64 {
        const cFn = @extern(*const fn (*Bytes) callconv(.c) u64, .{ .name = "g_bytes_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/glib/method.Bytes.hash.html)
    pub fn hash(self: *Bytes) u32 {
        const cFn = @extern(*const fn (*Bytes) callconv(.c) u32, .{ .name = "g_bytes_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [new_from_bytes](https://docs.gtk.org/glib/method.Bytes.new_from_bytes.html)
    pub fn newFromBytes(self: *Bytes, _offset: u64, _length: u64) *glib.Bytes {
        const cFn = @extern(*const fn (*Bytes, u64, u64) callconv(.c) *glib.Bytes, .{ .name = "g_bytes_new_from_bytes" });
        const ret = cFn(self, _offset, _length);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Bytes.ref.html)
    pub fn ref(self: *Bytes) *glib.Bytes {
        const cFn = @extern(*const fn (*Bytes) callconv(.c) *glib.Bytes, .{ .name = "g_bytes_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Bytes.unref.html)
    pub fn unref(self: *Bytes) void {
        const cFn = @extern(*const fn (*Bytes) callconv(.c) void, .{ .name = "g_bytes_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref_to_array](https://docs.gtk.org/glib/method.Bytes.unref_to_array.html)
    pub fn unrefToArray(self: *Bytes) *core.ByteArray {
        const cFn = @extern(*const fn (*Bytes) callconv(.c) *core.ByteArray, .{ .name = "g_bytes_unref_to_array" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref_to_data](https://docs.gtk.org/glib/method.Bytes.unref_to_data.html)
    pub fn unrefToData(self: *Bytes) struct {
        ret: [*]u8,
        size: u64,
    } {
        var size_out: u64 = undefined;
        const _size = &size_out;
        const cFn = @extern(*const fn (*Bytes, *u64) callconv(.c) [*]u8, .{ .name = "g_bytes_unref_to_data" });
        const ret = cFn(self, _size);
        return .{ .ret = ret, .size = size_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bytes_get_type" });
        return cFn();
    }
};
/// const [CSET_A_2_Z](https://docs.gtk.org/glib/const.CSET_A_2_Z.html)
pub const CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
/// const [CSET_DIGITS](https://docs.gtk.org/glib/const.CSET_DIGITS.html)
pub const CSET_DIGITS = "0123456789";
/// const [CSET_a_2_z](https://docs.gtk.org/glib/const.CSET_a_2_z.html)
pub const CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";
/// const [C_STD_VERSION](https://docs.gtk.org/glib/const.C_STD_VERSION.html)
pub const C_STD_VERSION = 199000;
/// Deprecated:
/// Struct [Cache](https://docs.gtk.org/glib/struct.Cache.html)
pub const Cache = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [destroy](https://docs.gtk.org/glib/method.Cache.destroy.html)
    pub const destroy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn destroy(self: *Cache) void {
            const cFn = @extern(*const fn (*Cache) callconv(.c) void, .{ .name = "g_cache_destroy" });
            const ret = cFn(self);
            return ret;
        }
    }.destroy;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/glib/method.Cache.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *Cache, _key: ?*anyopaque) ?*anyopaque {
            const cFn = @extern(*const fn (*Cache, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_cache_insert" });
            const ret = cFn(self, @ptrCast(_key));
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [key_foreach](https://docs.gtk.org/glib/method.Cache.key_foreach.html)
    pub const keyForeach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn keyForeach(self: *Cache, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque, ?*anyopaque });
            defer closure_func.deinit();
            const _func: glib.HFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*Cache, glib.HFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_cache_key_foreach" });
            const ret = cFn(self, _func, @ptrCast(_user_data));
            return ret;
        }
    }.keyForeach;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/glib/method.Cache.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *Cache, _value: ?*anyopaque) void {
            const cFn = @extern(*const fn (*Cache, ?*anyopaque) callconv(.c) void, .{ .name = "g_cache_remove" });
            const ret = cFn(self, @ptrCast(_value));
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [value_foreach](https://docs.gtk.org/glib/method.Cache.value_foreach.html)
    pub const valueForeach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn valueForeach(self: *Cache, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque, ?*anyopaque });
            defer closure_func.deinit();
            const _func: glib.HFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*Cache, glib.HFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_cache_value_foreach" });
            const ret = cFn(self, _func, @ptrCast(_user_data));
            return ret;
        }
    }.valueForeach;
};
/// Deprecated:
/// callback [CacheDestroyFunc](https://docs.gtk.org/glib/callback.CacheDestroyFunc.html)
pub const CacheDestroyFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_value: ?*anyopaque) callconv(.c) void;
/// Deprecated:
/// callback [CacheDupFunc](https://docs.gtk.org/glib/callback.CacheDupFunc.html)
pub const CacheDupFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_value: ?*anyopaque) callconv(.c) ?*anyopaque;
/// Deprecated:
/// callback [CacheNewFunc](https://docs.gtk.org/glib/callback.CacheNewFunc.html)
pub const CacheNewFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_key: ?*anyopaque) callconv(.c) ?*anyopaque;
/// Struct [Checksum](https://docs.gtk.org/glib/struct.Checksum.html)
pub const Checksum = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.Checksum.new.html)
    pub fn new(_checksum_type: glib.ChecksumType) ?*Checksum {
        const cFn = @extern(*const fn (glib.ChecksumType) callconv(.c) ?*Checksum, .{ .name = "g_checksum_new" });
        const ret = cFn(_checksum_type);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.Checksum.copy.html)
    pub fn copy(self: *Checksum) *glib.Checksum {
        const cFn = @extern(*const fn (*Checksum) callconv(.c) *glib.Checksum, .{ .name = "g_checksum_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Checksum.free.html)
    pub fn free(self: *Checksum) void {
        const cFn = @extern(*const fn (*Checksum) callconv(.c) void, .{ .name = "g_checksum_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/glib/method.Checksum.get_string.html)
    pub fn getString(self: *Checksum) [*:0]u8 {
        const cFn = @extern(*const fn (*Checksum) callconv(.c) [*:0]u8, .{ .name = "g_checksum_get_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/glib/method.Checksum.reset.html)
    pub fn reset(self: *Checksum) void {
        const cFn = @extern(*const fn (*Checksum) callconv(.c) void, .{ .name = "g_checksum_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [update](https://docs.gtk.org/glib/method.Checksum.update.html)
    pub fn update(self: *Checksum, _datas: []u8) void {
        const _data = _datas.ptr;
        const _length: i64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (*Checksum, [*]u8, i64) callconv(.c) void, .{ .name = "g_checksum_update" });
        const ret = cFn(self, _data, _length);
        return ret;
    }
    /// type func [type_get_length](https://docs.gtk.org/glib/type_func.Checksum.type_get_length.html)
    pub fn typeGetLength(_checksum_type: glib.ChecksumType) i64 {
        const cFn = @extern(*const fn (glib.ChecksumType) callconv(.c) i64, .{ .name = "g_checksum_type_get_length" });
        const ret = cFn(_checksum_type);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_checksum_get_type" });
        return cFn();
    }
};
/// Enum [ChecksumType](https://docs.gtk.org/glib/enum.ChecksumType.html)
pub const ChecksumType = enum(u32) {
    md5 = 0,
    sha1 = 1,
    sha256 = 2,
    sha512 = 3,
    sha384 = 4,
};
/// callback [ChildWatchFunc](https://docs.gtk.org/glib/callback.ChildWatchFunc.html)
pub const ChildWatchFunc = *const fn (_pid: i32, _wait_status: i32, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [ClearHandleFunc](https://docs.gtk.org/glib/callback.ClearHandleFunc.html)
pub const ClearHandleFunc = *const fn (_handle_id: u32) callconv(.c) void;
/// callback [CompareDataFunc](https://docs.gtk.org/glib/callback.CompareDataFunc.html)
pub const CompareDataFunc = *const fn (_a: ?*anyopaque, _b: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) i32;
/// callback [CompareFunc](https://docs.gtk.org/glib/callback.CompareFunc.html)
pub const CompareFunc = *const fn (_a: ?*anyopaque, _b: ?*anyopaque) callconv(.c) i32;
/// Deprecated:
/// Struct [Completion](https://docs.gtk.org/glib/struct.Completion.html)
pub const Completion = if (config.disable_deprecated) core.Deprecated else extern struct {
    items: ?*core.List,
    func: ?*const fn (_item: ?*anyopaque) callconv(.c) [*:0]u8,
    prefix: ?[*:0]const u8,
    cache: ?*core.List,
    strncmp_func: ?*const fn (_s1: [*:0]const u8, _s2: [*:0]const u8, _n: u64) callconv(.c) i32,
    /// Deprecated:
    /// method [clear_items](https://docs.gtk.org/glib/method.Completion.clear_items.html)
    pub const clearItems = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clearItems(self: *Completion) void {
            const cFn = @extern(*const fn (*Completion) callconv(.c) void, .{ .name = "g_completion_clear_items" });
            const ret = cFn(self);
            return ret;
        }
    }.clearItems;
    /// Deprecated:
    /// method [complete_utf8](https://docs.gtk.org/glib/method.Completion.complete_utf8.html)
    pub const completeUtf8 = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn completeUtf8(self: *Completion, _prefix: [*:0]const u8, _new_prefix: [*:0]const u8) ?*core.List {
            const cFn = @extern(*const fn (*Completion, [*:0]const u8, [*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_completion_complete_utf8" });
            const ret = cFn(self, _prefix, _new_prefix);
            return ret;
        }
    }.completeUtf8;
    /// Deprecated:
    /// method [free](https://docs.gtk.org/glib/method.Completion.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *Completion) void {
            const cFn = @extern(*const fn (*Completion) callconv(.c) void, .{ .name = "g_completion_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
};
/// Deprecated:
/// callback [CompletionFunc](https://docs.gtk.org/glib/callback.CompletionFunc.html)
pub const CompletionFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_item: ?*anyopaque) callconv(.c) [*:0]u8;
/// Deprecated:
/// callback [CompletionStrncmpFunc](https://docs.gtk.org/glib/callback.CompletionStrncmpFunc.html)
pub const CompletionStrncmpFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_s1: [*:0]const u8, _s2: [*:0]const u8, _n: u64) callconv(.c) i32;
/// Struct [Cond](https://docs.gtk.org/glib/struct.Cond.html)
pub const Cond = extern struct {
    p: ?*anyopaque,
    i: [2]u32,
    /// method [broadcast](https://docs.gtk.org/glib/method.Cond.broadcast.html)
    pub fn broadcast(self: *Cond) void {
        const cFn = @extern(*const fn (*Cond) callconv(.c) void, .{ .name = "g_cond_broadcast" });
        const ret = cFn(self);
        return ret;
    }
    /// method [clear](https://docs.gtk.org/glib/method.Cond.clear.html)
    pub fn clear(self: *Cond) void {
        const cFn = @extern(*const fn (*Cond) callconv(.c) void, .{ .name = "g_cond_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.Cond.init.html)
    pub fn init(self: *Cond) void {
        const cFn = @extern(*const fn (*Cond) callconv(.c) void, .{ .name = "g_cond_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [signal](https://docs.gtk.org/glib/method.Cond.signal.html)
    pub fn signal(self: *Cond) void {
        const cFn = @extern(*const fn (*Cond) callconv(.c) void, .{ .name = "g_cond_signal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [wait](https://docs.gtk.org/glib/method.Cond.wait.html)
    pub fn wait(self: *Cond, _mutex: *glib.Mutex) void {
        const cFn = @extern(*const fn (*Cond, *glib.Mutex) callconv(.c) void, .{ .name = "g_cond_wait" });
        const ret = cFn(self, _mutex);
        return ret;
    }
    /// method [wait_until](https://docs.gtk.org/glib/method.Cond.wait_until.html)
    pub fn waitUntil(self: *Cond, _mutex: *glib.Mutex, _end_time: i64) bool {
        const cFn = @extern(*const fn (*Cond, *glib.Mutex, i64) callconv(.c) bool, .{ .name = "g_cond_wait_until" });
        const ret = cFn(self, _mutex, _end_time);
        return ret;
    }
};
/// Error [ConvertError](https://docs.gtk.org/glib/error.ConvertError.html)
pub const ConvertError = enum(u32) {
    no_conversion = 0,
    illegal_sequence = 1,
    failed = 2,
    partial_input = 3,
    bad_uri = 4,
    not_absolute_path = 5,
    no_memory = 6,
    embedded_nul = 7,
};
/// callback [CopyFunc](https://docs.gtk.org/glib/callback.CopyFunc.html)
pub const CopyFunc = *const fn (_src: *anyopaque, _data: ?*anyopaque) callconv(.c) *anyopaque;
/// const [DATALIST_FLAGS_MASK](https://docs.gtk.org/glib/const.DATALIST_FLAGS_MASK.html)
pub const DATALIST_FLAGS_MASK = 3;
/// const [DATE_BAD_DAY](https://docs.gtk.org/glib/const.DATE_BAD_DAY.html)
pub const DATE_BAD_DAY = 0;
/// const [DATE_BAD_JULIAN](https://docs.gtk.org/glib/const.DATE_BAD_JULIAN.html)
pub const DATE_BAD_JULIAN = 0;
/// const [DATE_BAD_YEAR](https://docs.gtk.org/glib/const.DATE_BAD_YEAR.html)
pub const DATE_BAD_YEAR = 0;
/// const [DIR_SEPARATOR](https://docs.gtk.org/glib/const.DIR_SEPARATOR.html)
pub const DIR_SEPARATOR = 47;
/// const [DIR_SEPARATOR_S](https://docs.gtk.org/glib/const.DIR_SEPARATOR_S.html)
pub const DIR_SEPARATOR_S = "/";
/// Struct [Data](https://docs.gtk.org/glib/struct.Data.html)
pub const Data = opaque {};
/// callback [DataForeachFunc](https://docs.gtk.org/glib/callback.DataForeachFunc.html)
pub const DataForeachFunc = *const fn (_key_id: u32, _data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
/// Struct [Date](https://docs.gtk.org/glib/struct.Date.html)
pub const Date = extern struct {
    julian_days: u32,
    julian: u32,
    dmy: u32,
    day: u32,
    month: u32,
    year: u32,
    /// ctor [new](https://docs.gtk.org/glib/ctor.Date.new.html)
    pub fn new() *Date {
        const cFn = @extern(*const fn () callconv(.c) *Date, .{ .name = "g_date_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_dmy](https://docs.gtk.org/glib/ctor.Date.new_dmy.html)
    pub fn newDmy(_day: u8, _month: glib.DateMonth, _year: u16) *Date {
        const cFn = @extern(*const fn (u8, glib.DateMonth, u16) callconv(.c) *Date, .{ .name = "g_date_new_dmy" });
        const ret = cFn(_day, _month, _year);
        return ret;
    }
    /// ctor [new_julian](https://docs.gtk.org/glib/ctor.Date.new_julian.html)
    pub fn newJulian(_julian_day: u32) *Date {
        const cFn = @extern(*const fn (u32) callconv(.c) *Date, .{ .name = "g_date_new_julian" });
        const ret = cFn(_julian_day);
        return ret;
    }
    /// method [add_days](https://docs.gtk.org/glib/method.Date.add_days.html)
    pub fn addDays(self: *Date, _n_days: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_add_days" });
        const ret = cFn(self, _n_days);
        return ret;
    }
    /// method [add_months](https://docs.gtk.org/glib/method.Date.add_months.html)
    pub fn addMonths(self: *Date, _n_months: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_add_months" });
        const ret = cFn(self, _n_months);
        return ret;
    }
    /// method [add_years](https://docs.gtk.org/glib/method.Date.add_years.html)
    pub fn addYears(self: *Date, _n_years: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_add_years" });
        const ret = cFn(self, _n_years);
        return ret;
    }
    /// method [clamp](https://docs.gtk.org/glib/method.Date.clamp.html)
    pub fn clamp(self: *Date, _min_date: *glib.Date, _max_date: *glib.Date) void {
        const cFn = @extern(*const fn (*Date, *glib.Date, *glib.Date) callconv(.c) void, .{ .name = "g_date_clamp" });
        const ret = cFn(self, _min_date, _max_date);
        return ret;
    }
    /// method [clear](https://docs.gtk.org/glib/method.Date.clear.html)
    pub fn clear(self: *Date, _n_dates: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_clear" });
        const ret = cFn(self, _n_dates);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/glib/method.Date.compare.html)
    pub fn compare(self: *Date, _rhs: *glib.Date) i32 {
        const cFn = @extern(*const fn (*Date, *glib.Date) callconv(.c) i32, .{ .name = "g_date_compare" });
        const ret = cFn(self, _rhs);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.Date.copy.html)
    pub fn copy(self: *Date) *glib.Date {
        const cFn = @extern(*const fn (*Date) callconv(.c) *glib.Date, .{ .name = "g_date_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [days_between](https://docs.gtk.org/glib/method.Date.days_between.html)
    pub fn daysBetween(self: *Date, _date2: *glib.Date) i32 {
        const cFn = @extern(*const fn (*Date, *glib.Date) callconv(.c) i32, .{ .name = "g_date_days_between" });
        const ret = cFn(self, _date2);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Date.free.html)
    pub fn free(self: *Date) void {
        const cFn = @extern(*const fn (*Date) callconv(.c) void, .{ .name = "g_date_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day](https://docs.gtk.org/glib/method.Date.get_day.html)
    pub fn getDay(self: *Date) u8 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u8, .{ .name = "g_date_get_day" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day_of_year](https://docs.gtk.org/glib/method.Date.get_day_of_year.html)
    pub fn getDayOfYear(self: *Date) u32 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u32, .{ .name = "g_date_get_day_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iso8601_week_of_year](https://docs.gtk.org/glib/method.Date.get_iso8601_week_of_year.html)
    pub fn getIso8601WeekOfYear(self: *Date) u32 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u32, .{ .name = "g_date_get_iso8601_week_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_julian](https://docs.gtk.org/glib/method.Date.get_julian.html)
    pub fn getJulian(self: *Date) u32 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u32, .{ .name = "g_date_get_julian" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_monday_week_of_year](https://docs.gtk.org/glib/method.Date.get_monday_week_of_year.html)
    pub fn getMondayWeekOfYear(self: *Date) u32 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u32, .{ .name = "g_date_get_monday_week_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_month](https://docs.gtk.org/glib/method.Date.get_month.html)
    pub fn getMonth(self: *Date) glib.DateMonth {
        const cFn = @extern(*const fn (*Date) callconv(.c) glib.DateMonth, .{ .name = "g_date_get_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sunday_week_of_year](https://docs.gtk.org/glib/method.Date.get_sunday_week_of_year.html)
    pub fn getSundayWeekOfYear(self: *Date) u32 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u32, .{ .name = "g_date_get_sunday_week_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_weekday](https://docs.gtk.org/glib/method.Date.get_weekday.html)
    pub fn getWeekday(self: *Date) glib.DateWeekday {
        const cFn = @extern(*const fn (*Date) callconv(.c) glib.DateWeekday, .{ .name = "g_date_get_weekday" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_year](https://docs.gtk.org/glib/method.Date.get_year.html)
    pub fn getYear(self: *Date) u16 {
        const cFn = @extern(*const fn (*Date) callconv(.c) u16, .{ .name = "g_date_get_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_first_of_month](https://docs.gtk.org/glib/method.Date.is_first_of_month.html)
    pub fn isFirstOfMonth(self: *Date) bool {
        const cFn = @extern(*const fn (*Date) callconv(.c) bool, .{ .name = "g_date_is_first_of_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_last_of_month](https://docs.gtk.org/glib/method.Date.is_last_of_month.html)
    pub fn isLastOfMonth(self: *Date) bool {
        const cFn = @extern(*const fn (*Date) callconv(.c) bool, .{ .name = "g_date_is_last_of_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [order](https://docs.gtk.org/glib/method.Date.order.html)
    pub fn order(self: *Date, _date2: *glib.Date) void {
        const cFn = @extern(*const fn (*Date, *glib.Date) callconv(.c) void, .{ .name = "g_date_order" });
        const ret = cFn(self, _date2);
        return ret;
    }
    /// method [set_day](https://docs.gtk.org/glib/method.Date.set_day.html)
    pub fn setDay(self: *Date, _day: u8) void {
        const cFn = @extern(*const fn (*Date, u8) callconv(.c) void, .{ .name = "g_date_set_day" });
        const ret = cFn(self, _day);
        return ret;
    }
    /// method [set_dmy](https://docs.gtk.org/glib/method.Date.set_dmy.html)
    pub fn setDmy(self: *Date, _day: u8, _month: glib.DateMonth, _y: u16) void {
        const cFn = @extern(*const fn (*Date, u8, glib.DateMonth, u16) callconv(.c) void, .{ .name = "g_date_set_dmy" });
        const ret = cFn(self, _day, _month, _y);
        return ret;
    }
    /// method [set_julian](https://docs.gtk.org/glib/method.Date.set_julian.html)
    pub fn setJulian(self: *Date, _julian_date: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_set_julian" });
        const ret = cFn(self, _julian_date);
        return ret;
    }
    /// method [set_month](https://docs.gtk.org/glib/method.Date.set_month.html)
    pub fn setMonth(self: *Date, _month: glib.DateMonth) void {
        const cFn = @extern(*const fn (*Date, glib.DateMonth) callconv(.c) void, .{ .name = "g_date_set_month" });
        const ret = cFn(self, _month);
        return ret;
    }
    /// method [set_parse](https://docs.gtk.org/glib/method.Date.set_parse.html)
    pub fn setParse(self: *Date, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Date, [*:0]const u8) callconv(.c) void, .{ .name = "g_date_set_parse" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// Deprecated:
    /// method [set_time](https://docs.gtk.org/glib/method.Date.set_time.html)
    pub const setTime = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTime(self: *Date, _time_: i32) void {
            const cFn = @extern(*const fn (*Date, i32) callconv(.c) void, .{ .name = "g_date_set_time" });
            const ret = cFn(self, _time_);
            return ret;
        }
    }.setTime;
    /// method [set_time_t](https://docs.gtk.org/glib/method.Date.set_time_t.html)
    pub fn setTimeT(self: *Date, _timet: i64) void {
        const cFn = @extern(*const fn (*Date, i64) callconv(.c) void, .{ .name = "g_date_set_time_t" });
        const ret = cFn(self, _timet);
        return ret;
    }
    /// Deprecated:
    /// method [set_time_val](https://docs.gtk.org/glib/method.Date.set_time_val.html)
    pub const setTimeVal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTimeVal(self: *Date, _timeval: *glib.TimeVal) void {
            const cFn = @extern(*const fn (*Date, *glib.TimeVal) callconv(.c) void, .{ .name = "g_date_set_time_val" });
            const ret = cFn(self, _timeval);
            return ret;
        }
    }.setTimeVal;
    /// method [set_year](https://docs.gtk.org/glib/method.Date.set_year.html)
    pub fn setYear(self: *Date, _year: u16) void {
        const cFn = @extern(*const fn (*Date, u16) callconv(.c) void, .{ .name = "g_date_set_year" });
        const ret = cFn(self, _year);
        return ret;
    }
    /// method [subtract_days](https://docs.gtk.org/glib/method.Date.subtract_days.html)
    pub fn subtractDays(self: *Date, _n_days: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_subtract_days" });
        const ret = cFn(self, _n_days);
        return ret;
    }
    /// method [subtract_months](https://docs.gtk.org/glib/method.Date.subtract_months.html)
    pub fn subtractMonths(self: *Date, _n_months: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_subtract_months" });
        const ret = cFn(self, _n_months);
        return ret;
    }
    /// method [subtract_years](https://docs.gtk.org/glib/method.Date.subtract_years.html)
    pub fn subtractYears(self: *Date, _n_years: u32) void {
        const cFn = @extern(*const fn (*Date, u32) callconv(.c) void, .{ .name = "g_date_subtract_years" });
        const ret = cFn(self, _n_years);
        return ret;
    }
    /// method [to_struct_tm](https://docs.gtk.org/glib/method.Date.to_struct_tm.html)
    pub fn toStructTm(self: *Date, _tm: *anyopaque) void {
        const cFn = @extern(*const fn (*Date, *anyopaque) callconv(.c) void, .{ .name = "g_date_to_struct_tm" });
        const ret = cFn(self, @ptrCast(_tm));
        return ret;
    }
    /// method [valid](https://docs.gtk.org/glib/method.Date.valid.html)
    pub fn valid(self: *Date) bool {
        const cFn = @extern(*const fn (*Date) callconv(.c) bool, .{ .name = "g_date_valid" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [get_days_in_month](https://docs.gtk.org/glib/type_func.Date.get_days_in_month.html)
    pub fn getDaysInMonth(_month: glib.DateMonth, _year: u16) u8 {
        const cFn = @extern(*const fn (glib.DateMonth, u16) callconv(.c) u8, .{ .name = "g_date_get_days_in_month" });
        const ret = cFn(_month, _year);
        return ret;
    }
    /// type func [get_monday_weeks_in_year](https://docs.gtk.org/glib/type_func.Date.get_monday_weeks_in_year.html)
    pub fn getMondayWeeksInYear(_year: u16) u8 {
        const cFn = @extern(*const fn (u16) callconv(.c) u8, .{ .name = "g_date_get_monday_weeks_in_year" });
        const ret = cFn(_year);
        return ret;
    }
    /// type func [get_sunday_weeks_in_year](https://docs.gtk.org/glib/type_func.Date.get_sunday_weeks_in_year.html)
    pub fn getSundayWeeksInYear(_year: u16) u8 {
        const cFn = @extern(*const fn (u16) callconv(.c) u8, .{ .name = "g_date_get_sunday_weeks_in_year" });
        const ret = cFn(_year);
        return ret;
    }
    /// type func [is_leap_year](https://docs.gtk.org/glib/type_func.Date.is_leap_year.html)
    pub fn isLeapYear(_year: u16) bool {
        const cFn = @extern(*const fn (u16) callconv(.c) bool, .{ .name = "g_date_is_leap_year" });
        const ret = cFn(_year);
        return ret;
    }
    /// type func [strftime](https://docs.gtk.org/glib/type_func.Date.strftime.html)
    pub fn strftime(_s: [*:0]const u8, _slen: u64, _format: [*:0]const u8, _date: *glib.Date) u64 {
        const cFn = @extern(*const fn ([*:0]const u8, u64, [*:0]const u8, *glib.Date) callconv(.c) u64, .{ .name = "g_date_strftime" });
        const ret = cFn(_s, _slen, _format, _date);
        return ret;
    }
    /// type func [valid_day](https://docs.gtk.org/glib/type_func.Date.valid_day.html)
    pub fn validDay(_day: u8) bool {
        const cFn = @extern(*const fn (u8) callconv(.c) bool, .{ .name = "g_date_valid_day" });
        const ret = cFn(_day);
        return ret;
    }
    /// type func [valid_dmy](https://docs.gtk.org/glib/type_func.Date.valid_dmy.html)
    pub fn validDmy(_day: u8, _month: glib.DateMonth, _year: u16) bool {
        const cFn = @extern(*const fn (u8, glib.DateMonth, u16) callconv(.c) bool, .{ .name = "g_date_valid_dmy" });
        const ret = cFn(_day, _month, _year);
        return ret;
    }
    /// type func [valid_julian](https://docs.gtk.org/glib/type_func.Date.valid_julian.html)
    pub fn validJulian(_julian_date: u32) bool {
        const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "g_date_valid_julian" });
        const ret = cFn(_julian_date);
        return ret;
    }
    /// type func [valid_month](https://docs.gtk.org/glib/type_func.Date.valid_month.html)
    pub fn validMonth(_month: glib.DateMonth) bool {
        const cFn = @extern(*const fn (glib.DateMonth) callconv(.c) bool, .{ .name = "g_date_valid_month" });
        const ret = cFn(_month);
        return ret;
    }
    /// type func [valid_weekday](https://docs.gtk.org/glib/type_func.Date.valid_weekday.html)
    pub fn validWeekday(_weekday: glib.DateWeekday) bool {
        const cFn = @extern(*const fn (glib.DateWeekday) callconv(.c) bool, .{ .name = "g_date_valid_weekday" });
        const ret = cFn(_weekday);
        return ret;
    }
    /// type func [valid_year](https://docs.gtk.org/glib/type_func.Date.valid_year.html)
    pub fn validYear(_year: u16) bool {
        const cFn = @extern(*const fn (u16) callconv(.c) bool, .{ .name = "g_date_valid_year" });
        const ret = cFn(_year);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_date_get_type" });
        return cFn();
    }
};
/// Enum [DateDMY](https://docs.gtk.org/glib/enum.DateDMY.html)
pub const DateDMY = enum(u32) {
    day = 0,
    month = 1,
    year = 2,
};
/// Enum [DateMonth](https://docs.gtk.org/glib/enum.DateMonth.html)
pub const DateMonth = enum(u32) {
    bad_month = 0,
    january = 1,
    february = 2,
    march = 3,
    april = 4,
    may = 5,
    june = 6,
    july = 7,
    august = 8,
    september = 9,
    october = 10,
    november = 11,
    december = 12,
};
/// Struct [DateTime](https://docs.gtk.org/glib/struct.DateTime.html)
pub const DateTime = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.DateTime.new.html)
    pub fn new(_tz: *glib.TimeZone, _year: i32, _month: i32, _day: i32, _hour: i32, _minute: i32, _seconds: f64) ?*DateTime {
        const cFn = @extern(*const fn (*glib.TimeZone, i32, i32, i32, i32, i32, f64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new" });
        const ret = cFn(_tz, _year, _month, _day, _hour, _minute, _seconds);
        return ret;
    }
    /// ctor [new_from_iso8601](https://docs.gtk.org/glib/ctor.DateTime.new_from_iso8601.html)
    pub fn newFromIso8601(_text: [*:0]const u8, _default_tz: ?*glib.TimeZone) ?*DateTime {
        const cFn = @extern(*const fn ([*:0]const u8, ?*glib.TimeZone) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_iso8601" });
        const ret = cFn(_text, _default_tz);
        return ret;
    }
    /// Deprecated:
    /// ctor [new_from_timeval_local](https://docs.gtk.org/glib/ctor.DateTime.new_from_timeval_local.html)
    pub const newFromTimevalLocal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromTimevalLocal(_tv: *glib.TimeVal) ?*DateTime {
            const cFn = @extern(*const fn (*glib.TimeVal) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_timeval_local" });
            const ret = cFn(_tv);
            return ret;
        }
    }.newFromTimevalLocal;
    /// Deprecated:
    /// ctor [new_from_timeval_utc](https://docs.gtk.org/glib/ctor.DateTime.new_from_timeval_utc.html)
    pub const newFromTimevalUtc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromTimevalUtc(_tv: *glib.TimeVal) ?*DateTime {
            const cFn = @extern(*const fn (*glib.TimeVal) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_timeval_utc" });
            const ret = cFn(_tv);
            return ret;
        }
    }.newFromTimevalUtc;
    /// ctor [new_from_unix_local](https://docs.gtk.org/glib/ctor.DateTime.new_from_unix_local.html)
    pub fn newFromUnixLocal(_t: i64) ?*DateTime {
        const cFn = @extern(*const fn (i64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_unix_local" });
        const ret = cFn(_t);
        return ret;
    }
    /// ctor [new_from_unix_local_usec](https://docs.gtk.org/glib/ctor.DateTime.new_from_unix_local_usec.html)
    pub fn newFromUnixLocalUsec(_usecs: i64) ?*DateTime {
        const cFn = @extern(*const fn (i64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_unix_local_usec" });
        const ret = cFn(_usecs);
        return ret;
    }
    /// ctor [new_from_unix_utc](https://docs.gtk.org/glib/ctor.DateTime.new_from_unix_utc.html)
    pub fn newFromUnixUtc(_t: i64) ?*DateTime {
        const cFn = @extern(*const fn (i64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_unix_utc" });
        const ret = cFn(_t);
        return ret;
    }
    /// ctor [new_from_unix_utc_usec](https://docs.gtk.org/glib/ctor.DateTime.new_from_unix_utc_usec.html)
    pub fn newFromUnixUtcUsec(_usecs: i64) ?*DateTime {
        const cFn = @extern(*const fn (i64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_from_unix_utc_usec" });
        const ret = cFn(_usecs);
        return ret;
    }
    /// ctor [new_local](https://docs.gtk.org/glib/ctor.DateTime.new_local.html)
    pub fn newLocal(_year: i32, _month: i32, _day: i32, _hour: i32, _minute: i32, _seconds: f64) ?*DateTime {
        const cFn = @extern(*const fn (i32, i32, i32, i32, i32, f64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_local" });
        const ret = cFn(_year, _month, _day, _hour, _minute, _seconds);
        return ret;
    }
    /// ctor [new_now](https://docs.gtk.org/glib/ctor.DateTime.new_now.html)
    pub fn newNow(_tz: *glib.TimeZone) ?*DateTime {
        const cFn = @extern(*const fn (*glib.TimeZone) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_now" });
        const ret = cFn(_tz);
        return ret;
    }
    /// ctor [new_now_local](https://docs.gtk.org/glib/ctor.DateTime.new_now_local.html)
    pub fn newNowLocal() ?*DateTime {
        const cFn = @extern(*const fn () callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_now_local" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_now_utc](https://docs.gtk.org/glib/ctor.DateTime.new_now_utc.html)
    pub fn newNowUtc() ?*DateTime {
        const cFn = @extern(*const fn () callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_now_utc" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_utc](https://docs.gtk.org/glib/ctor.DateTime.new_utc.html)
    pub fn newUtc(_year: i32, _month: i32, _day: i32, _hour: i32, _minute: i32, _seconds: f64) ?*DateTime {
        const cFn = @extern(*const fn (i32, i32, i32, i32, i32, f64) callconv(.c) ?*DateTime, .{ .name = "g_date_time_new_utc" });
        const ret = cFn(_year, _month, _day, _hour, _minute, _seconds);
        return ret;
    }
    /// method [add](https://docs.gtk.org/glib/method.DateTime.add.html)
    pub fn add(self: *DateTime, _timespan: i64) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i64) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add" });
        const ret = cFn(self, _timespan);
        return ret;
    }
    /// method [add_days](https://docs.gtk.org/glib/method.DateTime.add_days.html)
    pub fn addDays(self: *DateTime, _days: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_days" });
        const ret = cFn(self, _days);
        return ret;
    }
    /// method [add_full](https://docs.gtk.org/glib/method.DateTime.add_full.html)
    pub fn addFull(self: *DateTime, _years: i32, _months: i32, _days: i32, _hours: i32, _minutes: i32, _seconds: f64) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32, i32, i32, i32, i32, f64) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_full" });
        const ret = cFn(self, _years, _months, _days, _hours, _minutes, _seconds);
        return ret;
    }
    /// method [add_hours](https://docs.gtk.org/glib/method.DateTime.add_hours.html)
    pub fn addHours(self: *DateTime, _hours: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_hours" });
        const ret = cFn(self, _hours);
        return ret;
    }
    /// method [add_minutes](https://docs.gtk.org/glib/method.DateTime.add_minutes.html)
    pub fn addMinutes(self: *DateTime, _minutes: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_minutes" });
        const ret = cFn(self, _minutes);
        return ret;
    }
    /// method [add_months](https://docs.gtk.org/glib/method.DateTime.add_months.html)
    pub fn addMonths(self: *DateTime, _months: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_months" });
        const ret = cFn(self, _months);
        return ret;
    }
    /// method [add_seconds](https://docs.gtk.org/glib/method.DateTime.add_seconds.html)
    pub fn addSeconds(self: *DateTime, _seconds: f64) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, f64) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_seconds" });
        const ret = cFn(self, _seconds);
        return ret;
    }
    /// method [add_weeks](https://docs.gtk.org/glib/method.DateTime.add_weeks.html)
    pub fn addWeeks(self: *DateTime, _weeks: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_weeks" });
        const ret = cFn(self, _weeks);
        return ret;
    }
    /// method [add_years](https://docs.gtk.org/glib/method.DateTime.add_years.html)
    pub fn addYears(self: *DateTime, _years: i32) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, i32) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_add_years" });
        const ret = cFn(self, _years);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/glib/method.DateTime.compare.html)
    pub fn compare(self: *DateTime, _dt2: *glib.DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime, *glib.DateTime) callconv(.c) i32, .{ .name = "g_date_time_compare" });
        const ret = cFn(self, _dt2);
        return ret;
    }
    /// method [difference](https://docs.gtk.org/glib/method.DateTime.difference.html)
    pub fn difference(self: *DateTime, _begin: *glib.DateTime) i64 {
        const cFn = @extern(*const fn (*DateTime, *glib.DateTime) callconv(.c) i64, .{ .name = "g_date_time_difference" });
        const ret = cFn(self, _begin);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/glib/method.DateTime.equal.html)
    pub fn equal(self: *DateTime, _dt2: *glib.DateTime) bool {
        const cFn = @extern(*const fn (*DateTime, *glib.DateTime) callconv(.c) bool, .{ .name = "g_date_time_equal" });
        const ret = cFn(self, _dt2);
        return ret;
    }
    /// method [format](https://docs.gtk.org/glib/method.DateTime.format.html)
    pub fn format(self: *DateTime, _format: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DateTime, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_date_time_format" });
        const ret = cFn(self, _format);
        return ret;
    }
    /// method [format_iso8601](https://docs.gtk.org/glib/method.DateTime.format_iso8601.html)
    pub fn formatIso8601(self: *DateTime) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) ?[*:0]u8, .{ .name = "g_date_time_format_iso8601" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day_of_month](https://docs.gtk.org/glib/method.DateTime.get_day_of_month.html)
    pub fn getDayOfMonth(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_day_of_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day_of_week](https://docs.gtk.org/glib/method.DateTime.get_day_of_week.html)
    pub fn getDayOfWeek(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_day_of_week" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day_of_year](https://docs.gtk.org/glib/method.DateTime.get_day_of_year.html)
    pub fn getDayOfYear(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_day_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hour](https://docs.gtk.org/glib/method.DateTime.get_hour.html)
    pub fn getHour(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_hour" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_microsecond](https://docs.gtk.org/glib/method.DateTime.get_microsecond.html)
    pub fn getMicrosecond(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_microsecond" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_minute](https://docs.gtk.org/glib/method.DateTime.get_minute.html)
    pub fn getMinute(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_minute" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_month](https://docs.gtk.org/glib/method.DateTime.get_month.html)
    pub fn getMonth(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_second](https://docs.gtk.org/glib/method.DateTime.get_second.html)
    pub fn getSecond(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_second" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_seconds](https://docs.gtk.org/glib/method.DateTime.get_seconds.html)
    pub fn getSeconds(self: *DateTime) f64 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) f64, .{ .name = "g_date_time_get_seconds" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_timezone](https://docs.gtk.org/glib/method.DateTime.get_timezone.html)
    pub fn getTimezone(self: *DateTime) *glib.TimeZone {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) *glib.TimeZone, .{ .name = "g_date_time_get_timezone" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_timezone_abbreviation](https://docs.gtk.org/glib/method.DateTime.get_timezone_abbreviation.html)
    pub fn getTimezoneAbbreviation(self: *DateTime) [*:0]u8 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) [*:0]u8, .{ .name = "g_date_time_get_timezone_abbreviation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_utc_offset](https://docs.gtk.org/glib/method.DateTime.get_utc_offset.html)
    pub fn getUtcOffset(self: *DateTime) i64 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i64, .{ .name = "g_date_time_get_utc_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_week_numbering_year](https://docs.gtk.org/glib/method.DateTime.get_week_numbering_year.html)
    pub fn getWeekNumberingYear(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_week_numbering_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_week_of_year](https://docs.gtk.org/glib/method.DateTime.get_week_of_year.html)
    pub fn getWeekOfYear(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_week_of_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_year](https://docs.gtk.org/glib/method.DateTime.get_year.html)
    pub fn getYear(self: *DateTime) i32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i32, .{ .name = "g_date_time_get_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ymd](https://docs.gtk.org/glib/method.DateTime.get_ymd.html)
    pub fn getYmd(self: *DateTime) struct {
        ret: void,
        year: i32,
        month: i32,
        day: i32,
    } {
        var year_out: i32 = undefined;
        const _year = &year_out;
        var month_out: i32 = undefined;
        const _month = &month_out;
        var day_out: i32 = undefined;
        const _day = &day_out;
        const cFn = @extern(*const fn (*DateTime, ?*i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "g_date_time_get_ymd" });
        const ret = cFn(self, _year, _month, _day);
        return .{ .ret = ret, .year = year_out, .month = month_out, .day = day_out };
    }
    /// method [hash](https://docs.gtk.org/glib/method.DateTime.hash.html)
    pub fn hash(self: *DateTime) u32 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) u32, .{ .name = "g_date_time_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_daylight_savings](https://docs.gtk.org/glib/method.DateTime.is_daylight_savings.html)
    pub fn isDaylightSavings(self: *DateTime) bool {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) bool, .{ .name = "g_date_time_is_daylight_savings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.DateTime.ref.html)
    pub fn ref(self: *DateTime) *glib.DateTime {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) *glib.DateTime, .{ .name = "g_date_time_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_local](https://docs.gtk.org/glib/method.DateTime.to_local.html)
    pub fn toLocal(self: *DateTime) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_to_local" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [to_timeval](https://docs.gtk.org/glib/method.DateTime.to_timeval.html)
    pub const toTimeval = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toTimeval(self: *DateTime, _tv: *glib.TimeVal) bool {
            const cFn = @extern(*const fn (*DateTime, *glib.TimeVal) callconv(.c) bool, .{ .name = "g_date_time_to_timeval" });
            const ret = cFn(self, _tv);
            return ret;
        }
    }.toTimeval;
    /// method [to_timezone](https://docs.gtk.org/glib/method.DateTime.to_timezone.html)
    pub fn toTimezone(self: *DateTime, _tz: *glib.TimeZone) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime, *glib.TimeZone) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_to_timezone" });
        const ret = cFn(self, _tz);
        return ret;
    }
    /// method [to_unix](https://docs.gtk.org/glib/method.DateTime.to_unix.html)
    pub fn toUnix(self: *DateTime) i64 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i64, .{ .name = "g_date_time_to_unix" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_unix_usec](https://docs.gtk.org/glib/method.DateTime.to_unix_usec.html)
    pub fn toUnixUsec(self: *DateTime) i64 {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) i64, .{ .name = "g_date_time_to_unix_usec" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_utc](https://docs.gtk.org/glib/method.DateTime.to_utc.html)
    pub fn toUtc(self: *DateTime) ?*glib.DateTime {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) ?*glib.DateTime, .{ .name = "g_date_time_to_utc" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.DateTime.unref.html)
    pub fn unref(self: *DateTime) void {
        const cFn = @extern(*const fn (*DateTime) callconv(.c) void, .{ .name = "g_date_time_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_date_time_get_type" });
        return cFn();
    }
};
/// Enum [DateWeekday](https://docs.gtk.org/glib/enum.DateWeekday.html)
pub const DateWeekday = enum(u32) {
    bad_weekday = 0,
    monday = 1,
    tuesday = 2,
    wednesday = 3,
    thursday = 4,
    friday = 5,
    saturday = 6,
    sunday = 7,
};
/// Struct [DebugKey](https://docs.gtk.org/glib/struct.DebugKey.html)
pub const DebugKey = extern struct {
    key: ?[*:0]const u8,
    value: u32,
};
/// callback [DestroyNotify](https://docs.gtk.org/glib/callback.DestroyNotify.html)
pub const DestroyNotify = *const fn (_data: ?*anyopaque) callconv(.c) void;
/// Struct [Dir](https://docs.gtk.org/glib/struct.Dir.html)
pub const Dir = opaque {
    /// ctor [open](https://docs.gtk.org/glib/ctor.Dir.open.html)
    pub fn open(_path: [*:0]const u8, _flags: u32, _error: *?*core.Error) error{GError}!*Dir {
        const cFn = @extern(*const fn ([*:0]const u8, u32, *?*core.Error) callconv(.c) *Dir, .{ .name = "g_dir_open" });
        const ret = cFn(_path, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close](https://docs.gtk.org/glib/method.Dir.close.html)
    pub fn close(self: *Dir) void {
        const cFn = @extern(*const fn (*Dir) callconv(.c) void, .{ .name = "g_dir_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_name](https://docs.gtk.org/glib/method.Dir.read_name.html)
    pub fn readName(self: *Dir) [*:0]u8 {
        const cFn = @extern(*const fn (*Dir) callconv(.c) [*:0]u8, .{ .name = "g_dir_read_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Dir.ref.html)
    pub fn ref(self: *Dir) *glib.Dir {
        const cFn = @extern(*const fn (*Dir) callconv(.c) *glib.Dir, .{ .name = "g_dir_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [rewind](https://docs.gtk.org/glib/method.Dir.rewind.html)
    pub fn rewind(self: *Dir) void {
        const cFn = @extern(*const fn (*Dir) callconv(.c) void, .{ .name = "g_dir_rewind" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Dir.unref.html)
    pub fn unref(self: *Dir) void {
        const cFn = @extern(*const fn (*Dir) callconv(.c) void, .{ .name = "g_dir_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [make_tmp](https://docs.gtk.org/glib/type_func.Dir.make_tmp.html)
    pub fn makeTmp(_tmpl: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_dir_make_tmp" });
        const ret = cFn(_tmpl, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dir_get_type" });
        return cFn();
    }
};
/// Union [DoubleIEEE754](https://docs.gtk.org/glib/union.DoubleIEEE754.html)
pub const DoubleIEEE754 = extern union {
    v_double: f64,
};
/// callback [DuplicateFunc](https://docs.gtk.org/glib/callback.DuplicateFunc.html)
pub const DuplicateFunc = *const fn (_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) ?*anyopaque;
/// const [E](https://docs.gtk.org/glib/const.E.html)
pub const E = 2.718282e0;
/// callback [EqualFunc](https://docs.gtk.org/glib/callback.EqualFunc.html)
pub const EqualFunc = *const fn (_a: ?*anyopaque, _b: ?*anyopaque) callconv(.c) bool;
/// callback [EqualFuncFull](https://docs.gtk.org/glib/callback.EqualFuncFull.html)
pub const EqualFuncFull = *const fn (_a: ?*anyopaque, _b: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [Error](https://docs.gtk.org/glib/struct.Error.html)
pub const Error = extern struct {
    domain: u32,
    code: i32,
    message: ?[*:0]const u8,
    /// ctor [new_literal](https://docs.gtk.org/glib/ctor.Error.new_literal.html)
    pub fn newLiteral(_domain: u32, _code: i32, _message: [*:0]const u8) *Error {
        const cFn = @extern(*const fn (u32, i32, [*:0]const u8) callconv(.c) *Error, .{ .name = "g_error_new_literal" });
        const ret = cFn(_domain, _code, _message);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.Error.copy.html)
    pub fn copy(self: *Error) *core.Error {
        const cFn = @extern(*const fn (*Error) callconv(.c) *core.Error, .{ .name = "g_error_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Error.free.html)
    pub fn free(self: *Error) void {
        const cFn = @extern(*const fn (*Error) callconv(.c) void, .{ .name = "g_error_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/glib/method.Error.matches.html)
    pub fn matches(self: *Error, _domain: u32, _code: i32) bool {
        const cFn = @extern(*const fn (*Error, u32, i32) callconv(.c) bool, .{ .name = "g_error_matches" });
        const ret = cFn(self, _domain, _code);
        return ret;
    }
    /// type func [domain_register](https://docs.gtk.org/glib/type_func.Error.domain_register.html)
    pub fn domainRegister(_error_type_name: [*:0]const u8, _error_type_private_size: u64, _error_type_init: glib.ErrorInitFunc, _error_type_copy: glib.ErrorCopyFunc, _error_type_clear: glib.ErrorClearFunc) u32 {
        const cFn = @extern(*const fn ([*:0]const u8, u64, glib.ErrorInitFunc, glib.ErrorCopyFunc, glib.ErrorClearFunc) callconv(.c) u32, .{ .name = "g_error_domain_register" });
        const ret = cFn(_error_type_name, _error_type_private_size, _error_type_init, _error_type_copy, _error_type_clear);
        return ret;
    }
    /// type func [domain_register_static](https://docs.gtk.org/glib/type_func.Error.domain_register_static.html)
    pub fn domainRegisterStatic(_error_type_name: [*:0]const u8, _error_type_private_size: u64, _error_type_init: glib.ErrorInitFunc, _error_type_copy: glib.ErrorCopyFunc, _error_type_clear: glib.ErrorClearFunc) u32 {
        const cFn = @extern(*const fn ([*:0]const u8, u64, glib.ErrorInitFunc, glib.ErrorCopyFunc, glib.ErrorClearFunc) callconv(.c) u32, .{ .name = "g_error_domain_register_static" });
        const ret = cFn(_error_type_name, _error_type_private_size, _error_type_init, _error_type_copy, _error_type_clear);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_error_get_type" });
        return cFn();
    }
};
/// callback [ErrorClearFunc](https://docs.gtk.org/glib/callback.ErrorClearFunc.html)
pub const ErrorClearFunc = *const fn (_error: *core.Error) callconv(.c) void;
/// callback [ErrorCopyFunc](https://docs.gtk.org/glib/callback.ErrorCopyFunc.html)
pub const ErrorCopyFunc = *const fn (_src_error: *core.Error, _dest_error: *core.Error) callconv(.c) void;
/// callback [ErrorInitFunc](https://docs.gtk.org/glib/callback.ErrorInitFunc.html)
pub const ErrorInitFunc = *const fn (_error: *core.Error) callconv(.c) void;
/// Enum [ErrorType](https://docs.gtk.org/glib/enum.ErrorType.html)
pub const ErrorType = enum(u32) {
    unknown = 0,
    unexp_eof = 1,
    unexp_eof_in_string = 2,
    unexp_eof_in_comment = 3,
    non_digit_in_const = 4,
    digit_radix = 5,
    float_radix = 6,
    float_malformed = 7,
};
/// Error [FileError](https://docs.gtk.org/glib/error.FileError.html)
pub const FileError = enum(u32) {
    exist = 0,
    isdir = 1,
    acces = 2,
    nametoolong = 3,
    noent = 4,
    notdir = 5,
    nxio = 6,
    nodev = 7,
    rofs = 8,
    txtbsy = 9,
    fault = 10,
    loop = 11,
    nospc = 12,
    nomem = 13,
    mfile = 14,
    nfile = 15,
    badf = 16,
    inval = 17,
    pipe = 18,
    again = 19,
    intr = 20,
    io = 21,
    perm = 22,
    nosys = 23,
    failed = 24,
};
/// Flags [FileSetContentsFlags](https://docs.gtk.org/glib/flags.FileSetContentsFlags.html)
pub const FileSetContentsFlags = packed struct(u32) {
    consistent: bool = false,
    durable: bool = false,
    only_existing: bool = false,
    _: u29 = 0,
};
/// Flags [FileTest](https://docs.gtk.org/glib/flags.FileTest.html)
pub const FileTest = packed struct(u32) {
    is_regular: bool = false,
    is_symlink: bool = false,
    is_dir: bool = false,
    is_executable: bool = false,
    exists: bool = false,
    _: u27 = 0,
};
/// Union [FloatIEEE754](https://docs.gtk.org/glib/union.FloatIEEE754.html)
pub const FloatIEEE754 = extern union {
    v_float: f32,
};
/// Flags [FormatSizeFlags](https://docs.gtk.org/glib/flags.FormatSizeFlags.html)
pub const FormatSizeFlags = packed struct(u32) {
    long_format: bool = false,
    iec_units: bool = false,
    bits: bool = false,
    only_value: bool = false,
    only_unit: bool = false,
    _: u27 = 0,
};
/// callback [FreeFunc](https://docs.gtk.org/glib/callback.FreeFunc.html)
pub const FreeFunc = *const fn (_data: ?*anyopaque) callconv(.c) void;
/// callback [Func](https://docs.gtk.org/glib/callback.Func.html)
pub const Func = *const fn (_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
/// const [GINT16_FORMAT](https://docs.gtk.org/glib/const.GINT16_FORMAT.html)
pub const GINT16_FORMAT = "hi";
/// const [GINT16_MODIFIER](https://docs.gtk.org/glib/const.GINT16_MODIFIER.html)
pub const GINT16_MODIFIER = "h";
/// const [GINT32_FORMAT](https://docs.gtk.org/glib/const.GINT32_FORMAT.html)
pub const GINT32_FORMAT = "i";
/// const [GINT32_MODIFIER](https://docs.gtk.org/glib/const.GINT32_MODIFIER.html)
pub const GINT32_MODIFIER = "";
/// const [GINT64_FORMAT](https://docs.gtk.org/glib/const.GINT64_FORMAT.html)
pub const GINT64_FORMAT = "li";
/// const [GINT64_MODIFIER](https://docs.gtk.org/glib/const.GINT64_MODIFIER.html)
pub const GINT64_MODIFIER = "l";
/// const [GINTPTR_FORMAT](https://docs.gtk.org/glib/const.GINTPTR_FORMAT.html)
pub const GINTPTR_FORMAT = "li";
/// const [GINTPTR_MODIFIER](https://docs.gtk.org/glib/const.GINTPTR_MODIFIER.html)
pub const GINTPTR_MODIFIER = "l";
/// Deprecated:
/// const [GNUC_FUNCTION](https://docs.gtk.org/glib/const.GNUC_FUNCTION.html)
pub const GNUC_FUNCTION = if (config.disable_deprecated) core.Deprecated else "";
/// Deprecated:
/// const [GNUC_PRETTY_FUNCTION](https://docs.gtk.org/glib/const.GNUC_PRETTY_FUNCTION.html)
pub const GNUC_PRETTY_FUNCTION = if (config.disable_deprecated) core.Deprecated else "";
/// const [GSIZE_FORMAT](https://docs.gtk.org/glib/const.GSIZE_FORMAT.html)
pub const GSIZE_FORMAT = "lu";
/// const [GSIZE_MODIFIER](https://docs.gtk.org/glib/const.GSIZE_MODIFIER.html)
pub const GSIZE_MODIFIER = "l";
/// const [GSSIZE_FORMAT](https://docs.gtk.org/glib/const.GSSIZE_FORMAT.html)
pub const GSSIZE_FORMAT = "li";
/// const [GSSIZE_MODIFIER](https://docs.gtk.org/glib/const.GSSIZE_MODIFIER.html)
pub const GSSIZE_MODIFIER = "l";
/// const [GUINT16_FORMAT](https://docs.gtk.org/glib/const.GUINT16_FORMAT.html)
pub const GUINT16_FORMAT = "hu";
/// const [GUINT32_FORMAT](https://docs.gtk.org/glib/const.GUINT32_FORMAT.html)
pub const GUINT32_FORMAT = "u";
/// const [GUINT64_FORMAT](https://docs.gtk.org/glib/const.GUINT64_FORMAT.html)
pub const GUINT64_FORMAT = "lu";
/// const [GUINTPTR_FORMAT](https://docs.gtk.org/glib/const.GUINTPTR_FORMAT.html)
pub const GUINTPTR_FORMAT = "lu";
/// const [HAVE_GINT64](https://docs.gtk.org/glib/const.HAVE_GINT64.html)
pub const HAVE_GINT64 = 1;
/// const [HAVE_GNUC_VARARGS](https://docs.gtk.org/glib/const.HAVE_GNUC_VARARGS.html)
pub const HAVE_GNUC_VARARGS = 1;
/// const [HAVE_GNUC_VISIBILITY](https://docs.gtk.org/glib/const.HAVE_GNUC_VISIBILITY.html)
pub const HAVE_GNUC_VISIBILITY = 1;
/// const [HAVE_GROWING_STACK](https://docs.gtk.org/glib/const.HAVE_GROWING_STACK.html)
pub const HAVE_GROWING_STACK = 0;
/// const [HAVE_ISO_VARARGS](https://docs.gtk.org/glib/const.HAVE_ISO_VARARGS.html)
pub const HAVE_ISO_VARARGS = 1;
/// callback [HFunc](https://docs.gtk.org/glib/callback.HFunc.html)
pub const HFunc = *const fn (_key: ?*anyopaque, _value: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
/// const [HOOK_FLAG_USER_SHIFT](https://docs.gtk.org/glib/const.HOOK_FLAG_USER_SHIFT.html)
pub const HOOK_FLAG_USER_SHIFT = 4;
/// callback [HRFunc](https://docs.gtk.org/glib/callback.HRFunc.html)
pub const HRFunc = *const fn (_key: ?*anyopaque, _value: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) bool;
/// callback [HashFunc](https://docs.gtk.org/glib/callback.HashFunc.html)
pub const HashFunc = *const fn (_key: ?*anyopaque) callconv(.c) u32;
/// Struct [HashTable](https://docs.gtk.org/glib/struct.HashTable.html)
pub const HashTable = opaque {
    /// type func [add](https://docs.gtk.org/glib/type_func.HashTable.add.html)
    pub fn add(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_add" });
        const ret = cFn(_hash_table, @ptrCast(_key));
        return ret;
    }
    /// type func [contains](https://docs.gtk.org/glib/type_func.HashTable.contains.html)
    pub fn contains(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_contains" });
        const ret = cFn(_hash_table, @ptrCast(_key));
        return ret;
    }
    /// type func [destroy](https://docs.gtk.org/glib/type_func.HashTable.destroy.html)
    pub fn destroy(_hash_table: *core.HashTable) void {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_destroy" });
        const ret = cFn(_hash_table);
        return ret;
    }
    /// type func [find](https://docs.gtk.org/glib/type_func.HashTable.find.html)
    pub fn find(_hash_table: *core.HashTable, predicate: anytype, predicate_args: anytype) ?*anyopaque {
        var closure_predicate = core.zig_closure(predicate, predicate_args, &.{ bool, ?*anyopaque, ?*anyopaque });
        defer closure_predicate.deinit();
        const _predicate: glib.HRFunc = @ptrCast(closure_predicate.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_predicate.c_data());
        const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_hash_table_find" });
        const ret = cFn(_hash_table, _predicate, @ptrCast(_user_data));
        return ret;
    }
    /// type func [foreach](https://docs.gtk.org/glib/type_func.HashTable.foreach.html)
    pub fn foreach(_hash_table: *core.HashTable, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.HFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*core.HashTable, glib.HFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_hash_table_foreach" });
        const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
        return ret;
    }
    /// type func [foreach_remove](https://docs.gtk.org/glib/type_func.HashTable.foreach_remove.html)
    pub fn foreachRemove(_hash_table: *core.HashTable, func: anytype, func_args: anytype) u32 {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.HRFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) u32, .{ .name = "g_hash_table_foreach_remove" });
        const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
        return ret;
    }
    /// type func [foreach_steal](https://docs.gtk.org/glib/type_func.HashTable.foreach_steal.html)
    pub fn foreachSteal(_hash_table: *core.HashTable, func: anytype, func_args: anytype) u32 {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.HRFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) u32, .{ .name = "g_hash_table_foreach_steal" });
        const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
        return ret;
    }
    /// type func [insert](https://docs.gtk.org/glib/type_func.HashTable.insert.html)
    pub fn insert(_hash_table: *core.HashTable, _key: ?*anyopaque, _value: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_insert" });
        const ret = cFn(_hash_table, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// type func [lookup](https://docs.gtk.org/glib/type_func.HashTable.lookup.html)
    pub fn lookup(_hash_table: *core.HashTable, _key: ?*anyopaque) ?*anyopaque {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_hash_table_lookup" });
        const ret = cFn(_hash_table, @ptrCast(_key));
        return ret;
    }
    /// type func [lookup_extended](https://docs.gtk.org/glib/type_func.HashTable.lookup_extended.html)
    pub fn lookupExtended(_hash_table: *core.HashTable, _lookup_key: ?*anyopaque) struct {
        ret: bool,
        orig_key: ?*anyopaque,
        value: ?*anyopaque,
    } {
        var orig_key_out: ?*anyopaque = undefined;
        const _orig_key = &orig_key_out;
        var value_out: ?*anyopaque = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_lookup_extended" });
        const ret = cFn(_hash_table, @ptrCast(_lookup_key), @ptrCast(_orig_key), @ptrCast(_value));
        return .{ .ret = ret, .orig_key = orig_key_out, .value = value_out };
    }
    /// type func [new_similar](https://docs.gtk.org/glib/type_func.HashTable.new_similar.html)
    pub fn newSimilar(_other_hash_table: *core.HashTable) *core.HashTable {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) *core.HashTable, .{ .name = "g_hash_table_new_similar" });
        const ret = cFn(_other_hash_table);
        return ret;
    }
    /// type func [ref](https://docs.gtk.org/glib/type_func.HashTable.ref.html)
    pub fn ref(_hash_table: *core.HashTable) *core.HashTable {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) *core.HashTable, .{ .name = "g_hash_table_ref" });
        const ret = cFn(_hash_table);
        return ret;
    }
    /// type func [remove](https://docs.gtk.org/glib/type_func.HashTable.remove.html)
    pub fn remove(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_remove" });
        const ret = cFn(_hash_table, @ptrCast(_key));
        return ret;
    }
    /// type func [remove_all](https://docs.gtk.org/glib/type_func.HashTable.remove_all.html)
    pub fn removeAll(_hash_table: *core.HashTable) void {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_remove_all" });
        const ret = cFn(_hash_table);
        return ret;
    }
    /// type func [replace](https://docs.gtk.org/glib/type_func.HashTable.replace.html)
    pub fn replace(_hash_table: *core.HashTable, _key: ?*anyopaque, _value: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_replace" });
        const ret = cFn(_hash_table, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// type func [size](https://docs.gtk.org/glib/type_func.HashTable.size.html)
    pub fn size(_hash_table: *core.HashTable) u32 {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) u32, .{ .name = "g_hash_table_size" });
        const ret = cFn(_hash_table);
        return ret;
    }
    /// type func [steal](https://docs.gtk.org/glib/type_func.HashTable.steal.html)
    pub fn steal(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_steal" });
        const ret = cFn(_hash_table, @ptrCast(_key));
        return ret;
    }
    /// type func [steal_all](https://docs.gtk.org/glib/type_func.HashTable.steal_all.html)
    pub fn stealAll(_hash_table: *core.HashTable) void {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_steal_all" });
        const ret = cFn(_hash_table);
        return ret;
    }
    /// type func [steal_extended](https://docs.gtk.org/glib/type_func.HashTable.steal_extended.html)
    pub fn stealExtended(_hash_table: *core.HashTable, _lookup_key: ?*anyopaque) struct {
        ret: bool,
        stolen_key: ?*anyopaque,
        stolen_value: ?*anyopaque,
    } {
        var stolen_key_out: ?*anyopaque = undefined;
        const _stolen_key = &stolen_key_out;
        var stolen_value_out: ?*anyopaque = undefined;
        const _stolen_value = &stolen_value_out;
        const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_steal_extended" });
        const ret = cFn(_hash_table, @ptrCast(_lookup_key), @ptrCast(_stolen_key), @ptrCast(_stolen_value));
        return .{ .ret = ret, .stolen_key = stolen_key_out, .stolen_value = stolen_value_out };
    }
    /// type func [unref](https://docs.gtk.org/glib/type_func.HashTable.unref.html)
    pub fn unref(_hash_table: *core.HashTable) void {
        const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_unref" });
        const ret = cFn(_hash_table);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_hash_table_get_type" });
        return cFn();
    }
};
/// Struct [HashTableIter](https://docs.gtk.org/glib/struct.HashTableIter.html)
pub const HashTableIter = extern struct {
    dummy1: ?*anyopaque,
    dummy2: ?*anyopaque,
    dummy3: ?*anyopaque,
    dummy4: i32,
    dummy5: bool,
    dummy6: ?*anyopaque,
    /// method [get_hash_table](https://docs.gtk.org/glib/method.HashTableIter.get_hash_table.html)
    pub fn getHashTable(self: *HashTableIter) *core.HashTable {
        const cFn = @extern(*const fn (*HashTableIter) callconv(.c) *core.HashTable, .{ .name = "g_hash_table_iter_get_hash_table" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.HashTableIter.init.html)
    pub fn init(self: *HashTableIter, _hash_table: *core.HashTable) void {
        const cFn = @extern(*const fn (*HashTableIter, *core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_iter_init" });
        const ret = cFn(self, _hash_table);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.HashTableIter.next.html)
    pub fn next(self: *HashTableIter) struct {
        ret: bool,
        key: ?*anyopaque,
        value: ?*anyopaque,
    } {
        var key_out: ?*anyopaque = undefined;
        const _key = &key_out;
        var value_out: ?*anyopaque = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*HashTableIter, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_iter_next" });
        const ret = cFn(self, @ptrCast(_key), @ptrCast(_value));
        return .{ .ret = ret, .key = key_out, .value = value_out };
    }
    /// method [remove](https://docs.gtk.org/glib/method.HashTableIter.remove.html)
    pub fn remove(self: *HashTableIter) void {
        const cFn = @extern(*const fn (*HashTableIter) callconv(.c) void, .{ .name = "g_hash_table_iter_remove" });
        const ret = cFn(self);
        return ret;
    }
    /// method [replace](https://docs.gtk.org/glib/method.HashTableIter.replace.html)
    pub fn replace(self: *HashTableIter, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*HashTableIter, ?*anyopaque) callconv(.c) void, .{ .name = "g_hash_table_iter_replace" });
        const ret = cFn(self, @ptrCast(_value));
        return ret;
    }
    /// method [steal](https://docs.gtk.org/glib/method.HashTableIter.steal.html)
    pub fn steal(self: *HashTableIter) void {
        const cFn = @extern(*const fn (*HashTableIter) callconv(.c) void, .{ .name = "g_hash_table_iter_steal" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [Hmac](https://docs.gtk.org/glib/struct.Hmac.html)
pub const Hmac = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.Hmac.new.html)
    pub fn new(_digest_type: glib.ChecksumType, _keys: []u8) ?*Hmac {
        const _key = _keys.ptr;
        const _key_len: u64 = @intCast(_keys.len);
        const cFn = @extern(*const fn (glib.ChecksumType, [*]u8, u64) callconv(.c) ?*Hmac, .{ .name = "g_hmac_new" });
        const ret = cFn(_digest_type, _key, _key_len);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.Hmac.copy.html)
    pub fn copy(self: *Hmac) *glib.Hmac {
        const cFn = @extern(*const fn (*Hmac) callconv(.c) *glib.Hmac, .{ .name = "g_hmac_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_digest](https://docs.gtk.org/glib/method.Hmac.get_digest.html)
    pub fn getDigest(self: *Hmac, _buffers: []u8) void {
        const _buffer = _buffers.ptr;
        const _digest_len: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Hmac, [*]u8, *u64) callconv(.c) void, .{ .name = "g_hmac_get_digest" });
        const ret = cFn(self, _buffer, _digest_len);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/glib/method.Hmac.get_string.html)
    pub fn getString(self: *Hmac) [*:0]u8 {
        const cFn = @extern(*const fn (*Hmac) callconv(.c) [*:0]u8, .{ .name = "g_hmac_get_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Hmac.ref.html)
    pub fn ref(self: *Hmac) *glib.Hmac {
        const cFn = @extern(*const fn (*Hmac) callconv(.c) *glib.Hmac, .{ .name = "g_hmac_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Hmac.unref.html)
    pub fn unref(self: *Hmac) void {
        const cFn = @extern(*const fn (*Hmac) callconv(.c) void, .{ .name = "g_hmac_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [update](https://docs.gtk.org/glib/method.Hmac.update.html)
    pub fn update(self: *Hmac, _datas: []u8) void {
        const _data = _datas.ptr;
        const _length: i64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (*Hmac, [*]u8, i64) callconv(.c) void, .{ .name = "g_hmac_update" });
        const ret = cFn(self, _data, _length);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_hmac_get_type" });
        return cFn();
    }
};
/// Struct [Hook](https://docs.gtk.org/glib/struct.Hook.html)
pub const Hook = extern struct {
    data: ?*anyopaque,
    next: ?*glib.Hook,
    prev: ?*glib.Hook,
    ref_count: u32,
    hook_id: u64,
    flags: u32,
    func: ?*anyopaque,
    destroy: ?*const fn (_data: ?*anyopaque) callconv(.c) void,
    /// method [compare_ids](https://docs.gtk.org/glib/method.Hook.compare_ids.html)
    pub fn compareIds(self: *Hook, _sibling: *glib.Hook) i32 {
        const cFn = @extern(*const fn (*Hook, *glib.Hook) callconv(.c) i32, .{ .name = "g_hook_compare_ids" });
        const ret = cFn(self, _sibling);
        return ret;
    }
    /// type func [destroy](https://docs.gtk.org/glib/type_func.Hook.destroy.html)
    pub fn destroyID(_hook_list: *glib.HookList, _hook_id: u64) bool {
        const cFn = @extern(*const fn (*glib.HookList, u64) callconv(.c) bool, .{ .name = "g_hook_destroy" });
        const ret = cFn(_hook_list, _hook_id);
        return ret;
    }
    /// type func [destroy_link](https://docs.gtk.org/glib/type_func.Hook.destroy_link.html)
    pub fn destroyLink(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
        const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_destroy_link" });
        const ret = cFn(_hook_list, _hook);
        return ret;
    }
    /// type func [free](https://docs.gtk.org/glib/type_func.Hook.free.html)
    pub fn free(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
        const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_free" });
        const ret = cFn(_hook_list, _hook);
        return ret;
    }
    /// type func [insert_before](https://docs.gtk.org/glib/type_func.Hook.insert_before.html)
    pub fn insertBefore(_hook_list: *glib.HookList, _sibling: ?*glib.Hook, _hook: *glib.Hook) void {
        const cFn = @extern(*const fn (*glib.HookList, ?*glib.Hook, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_insert_before" });
        const ret = cFn(_hook_list, _sibling, _hook);
        return ret;
    }
    /// type func [insert_sorted](https://docs.gtk.org/glib/type_func.Hook.insert_sorted.html)
    pub fn insertSorted(_hook_list: *glib.HookList, _hook: *glib.Hook, _func: glib.HookCompareFunc) void {
        const cFn = @extern(*const fn (*glib.HookList, *glib.Hook, glib.HookCompareFunc) callconv(.c) void, .{ .name = "g_hook_insert_sorted" });
        const ret = cFn(_hook_list, _hook, _func);
        return ret;
    }
    /// type func [prepend](https://docs.gtk.org/glib/type_func.Hook.prepend.html)
    pub fn prepend(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
        const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_prepend" });
        const ret = cFn(_hook_list, _hook);
        return ret;
    }
    /// type func [unref](https://docs.gtk.org/glib/type_func.Hook.unref.html)
    pub fn unref(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
        const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_unref" });
        const ret = cFn(_hook_list, _hook);
        return ret;
    }
};
/// callback [HookCheckFunc](https://docs.gtk.org/glib/callback.HookCheckFunc.html)
pub const HookCheckFunc = *const fn (_data: ?*anyopaque) callconv(.c) bool;
/// callback [HookCheckMarshaller](https://docs.gtk.org/glib/callback.HookCheckMarshaller.html)
pub const HookCheckMarshaller = *const fn (_hook: *glib.Hook, _marshal_data: ?*anyopaque) callconv(.c) bool;
/// callback [HookCompareFunc](https://docs.gtk.org/glib/callback.HookCompareFunc.html)
pub const HookCompareFunc = *const fn (_new_hook: *glib.Hook, _sibling: *glib.Hook) callconv(.c) i32;
/// callback [HookFinalizeFunc](https://docs.gtk.org/glib/callback.HookFinalizeFunc.html)
pub const HookFinalizeFunc = *const fn (_hook_list: *glib.HookList, _hook: *glib.Hook) callconv(.c) void;
/// callback [HookFindFunc](https://docs.gtk.org/glib/callback.HookFindFunc.html)
pub const HookFindFunc = *const fn (_hook: *glib.Hook, _data: ?*anyopaque) callconv(.c) bool;
/// Flags [HookFlagMask](https://docs.gtk.org/glib/flags.HookFlagMask.html)
pub const HookFlagMask = packed struct(u32) {
    active: bool = false,
    in_call: bool = false,
    _: u30 = 0,
    pub const mask: @This() = @bitCast(@as(u32, 15));
};
/// callback [HookFunc](https://docs.gtk.org/glib/callback.HookFunc.html)
pub const HookFunc = *const fn (_data: ?*anyopaque) callconv(.c) void;
/// Struct [HookList](https://docs.gtk.org/glib/struct.HookList.html)
pub const HookList = extern struct {
    seq_id: u64,
    hook_size: u32,
    is_setup: u32,
    hooks: ?*glib.Hook,
    dummy3: ?*anyopaque,
    finalize_hook: ?*const fn (_hook_list: *glib.HookList, _hook: *glib.Hook) callconv(.c) void,
    dummy: [2]?*anyopaque,
    /// method [clear](https://docs.gtk.org/glib/method.HookList.clear.html)
    pub fn clear(self: *HookList) void {
        const cFn = @extern(*const fn (*HookList) callconv(.c) void, .{ .name = "g_hook_list_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.HookList.init.html)
    pub fn init(self: *HookList, _hook_size: u32) void {
        const cFn = @extern(*const fn (*HookList, u32) callconv(.c) void, .{ .name = "g_hook_list_init" });
        const ret = cFn(self, _hook_size);
        return ret;
    }
    /// method [invoke](https://docs.gtk.org/glib/method.HookList.invoke.html)
    pub fn invoke(self: *HookList, _may_recurse: bool) void {
        const cFn = @extern(*const fn (*HookList, bool) callconv(.c) void, .{ .name = "g_hook_list_invoke" });
        const ret = cFn(self, _may_recurse);
        return ret;
    }
    /// method [invoke_check](https://docs.gtk.org/glib/method.HookList.invoke_check.html)
    pub fn invokeCheck(self: *HookList, _may_recurse: bool) void {
        const cFn = @extern(*const fn (*HookList, bool) callconv(.c) void, .{ .name = "g_hook_list_invoke_check" });
        const ret = cFn(self, _may_recurse);
        return ret;
    }
    /// method [marshal](https://docs.gtk.org/glib/method.HookList.marshal.html)
    pub fn marshal(self: *HookList, _may_recurse: bool, marshaller: anytype, marshaller_args: anytype) void {
        var closure_marshaller = core.zig_closure(marshaller, marshaller_args, &.{ void, *glib.Hook });
        defer closure_marshaller.deinit();
        const _marshaller: glib.HookMarshaller = @ptrCast(closure_marshaller.c_closure());
        const _marshal_data: ?*anyopaque = @ptrCast(closure_marshaller.c_data());
        const cFn = @extern(*const fn (*HookList, bool, glib.HookMarshaller, ?*anyopaque) callconv(.c) void, .{ .name = "g_hook_list_marshal" });
        const ret = cFn(self, _may_recurse, _marshaller, @ptrCast(_marshal_data));
        return ret;
    }
    /// method [marshal_check](https://docs.gtk.org/glib/method.HookList.marshal_check.html)
    pub fn marshalCheck(self: *HookList, _may_recurse: bool, marshaller: anytype, marshaller_args: anytype) void {
        var closure_marshaller = core.zig_closure(marshaller, marshaller_args, &.{ bool, *glib.Hook });
        defer closure_marshaller.deinit();
        const _marshaller: glib.HookCheckMarshaller = @ptrCast(closure_marshaller.c_closure());
        const _marshal_data: ?*anyopaque = @ptrCast(closure_marshaller.c_data());
        const cFn = @extern(*const fn (*HookList, bool, glib.HookCheckMarshaller, ?*anyopaque) callconv(.c) void, .{ .name = "g_hook_list_marshal_check" });
        const ret = cFn(self, _may_recurse, _marshaller, @ptrCast(_marshal_data));
        return ret;
    }
};
/// callback [HookMarshaller](https://docs.gtk.org/glib/callback.HookMarshaller.html)
pub const HookMarshaller = *const fn (_hook: *glib.Hook, _marshal_data: ?*anyopaque) callconv(.c) void;
/// const [IEEE754_DOUBLE_BIAS](https://docs.gtk.org/glib/const.IEEE754_DOUBLE_BIAS.html)
pub const IEEE754_DOUBLE_BIAS = 1023;
/// const [IEEE754_FLOAT_BIAS](https://docs.gtk.org/glib/const.IEEE754_FLOAT_BIAS.html)
pub const IEEE754_FLOAT_BIAS = 127;
/// Struct [IOChannel](https://docs.gtk.org/glib/struct.IOChannel.html)
pub const IOChannel = extern struct {
    ref_count: i32,
    funcs: ?*glib.IOFuncs,
    encoding: ?[*:0]const u8,
    read_cd: ?*anyopaque,
    write_cd: ?*anyopaque,
    line_term: ?[*:0]const u8,
    line_term_len: u32,
    buf_size: u64,
    read_buf: ?*glib.String,
    encoded_read_buf: ?*glib.String,
    write_buf: ?*glib.String,
    partial_write_buf: [6]i8,
    use_buffer: u32,
    do_encode: u32,
    close_on_unref: u32,
    is_readable: u32,
    is_writeable: u32,
    is_seekable: u32,
    reserved1: ?*anyopaque,
    reserved2: ?*anyopaque,
    /// ctor [new_file](https://docs.gtk.org/glib/ctor.IOChannel.new_file.html)
    pub fn newFile(_filename: [*:0]const u8, _mode: [*:0]const u8, _error: *?*core.Error) error{GError}!*IOChannel {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) *IOChannel, .{ .name = "g_io_channel_new_file" });
        const ret = cFn(_filename, _mode, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [unix_new](https://docs.gtk.org/glib/ctor.IOChannel.unix_new.html)
    pub fn unixNew(_fd: i32) *IOChannel {
        const cFn = @extern(*const fn (i32) callconv(.c) *IOChannel, .{ .name = "g_io_channel_unix_new" });
        const ret = cFn(_fd);
        return ret;
    }
    /// Deprecated:
    /// method [close](https://docs.gtk.org/glib/method.IOChannel.close.html)
    pub const close = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn close(self: *IOChannel) void {
            const cFn = @extern(*const fn (*IOChannel) callconv(.c) void, .{ .name = "g_io_channel_close" });
            const ret = cFn(self);
            return ret;
        }
    }.close;
    /// method [flush](https://docs.gtk.org/glib/method.IOChannel.flush.html)
    pub fn flush(self: *IOChannel, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_flush" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_buffer_condition](https://docs.gtk.org/glib/method.IOChannel.get_buffer_condition.html)
    pub fn getBufferCondition(self: *IOChannel) glib.IOCondition {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) glib.IOCondition, .{ .name = "g_io_channel_get_buffer_condition" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer_size](https://docs.gtk.org/glib/method.IOChannel.get_buffer_size.html)
    pub fn getBufferSize(self: *IOChannel) u64 {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) u64, .{ .name = "g_io_channel_get_buffer_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffered](https://docs.gtk.org/glib/method.IOChannel.get_buffered.html)
    pub fn getBuffered(self: *IOChannel) bool {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) bool, .{ .name = "g_io_channel_get_buffered" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_close_on_unref](https://docs.gtk.org/glib/method.IOChannel.get_close_on_unref.html)
    pub fn getCloseOnUnref(self: *IOChannel) bool {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) bool, .{ .name = "g_io_channel_get_close_on_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_encoding](https://docs.gtk.org/glib/method.IOChannel.get_encoding.html)
    pub fn getEncoding(self: *IOChannel) [*:0]u8 {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) [*:0]u8, .{ .name = "g_io_channel_get_encoding" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/glib/method.IOChannel.get_flags.html)
    pub fn getFlags(self: *IOChannel) glib.IOFlags {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) glib.IOFlags, .{ .name = "g_io_channel_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_term](https://docs.gtk.org/glib/method.IOChannel.get_line_term.html)
    pub fn getLineTerm(self: *IOChannel) struct {
        ret: [*:0]u8,
        length: i32,
    } {
        var length_out: i32 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*IOChannel, ?*i32) callconv(.c) [*:0]u8, .{ .name = "g_io_channel_get_line_term" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [init](https://docs.gtk.org/glib/method.IOChannel.init.html)
    pub fn init(self: *IOChannel) void {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) void, .{ .name = "g_io_channel_init" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [read](https://docs.gtk.org/glib/method.IOChannel.read.html)
    pub const read = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn read(self: *IOChannel, _buf: [*:0]const u8, _count: u64, _bytes_read: *u64) glib.IOError {
            const cFn = @extern(*const fn (*IOChannel, [*:0]const u8, u64, *u64) callconv(.c) glib.IOError, .{ .name = "g_io_channel_read" });
            const ret = cFn(self, _buf, _count, _bytes_read);
            return ret;
        }
    }.read;
    /// method [read_chars](https://docs.gtk.org/glib/method.IOChannel.read_chars.html)
    pub fn readChars(self: *IOChannel, _bufs: []u8, _error: *?*core.Error) error{GError}!struct {
        ret: glib.IOStatus,
        bytes_read: u64,
    } {
        const _buf = _bufs.ptr;
        const _count: u64 = @intCast(_bufs.len);
        var bytes_read_out: u64 = undefined;
        const _bytes_read = &bytes_read_out;
        const cFn = @extern(*const fn (*IOChannel, [*]u8, u64, ?*u64, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_read_chars" });
        const ret = cFn(self, _buf, _count, _bytes_read, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_read = bytes_read_out };
    }
    /// method [read_line](https://docs.gtk.org/glib/method.IOChannel.read_line.html)
    pub fn readLine(self: *IOChannel, _error: *?*core.Error) error{GError}!struct {
        ret: glib.IOStatus,
        str_return: [*:0]u8,
        length: u64,
        terminator_pos: u64,
    } {
        var str_return_out: [*:0]u8 = undefined;
        const _str_return = &str_return_out;
        var length_out: u64 = undefined;
        const _length = &length_out;
        var terminator_pos_out: u64 = undefined;
        const _terminator_pos = &terminator_pos_out;
        const cFn = @extern(*const fn (*IOChannel, *[*:0]u8, ?*u64, ?*u64, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_read_line" });
        const ret = cFn(self, _str_return, _length, _terminator_pos, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .str_return = str_return_out, .length = length_out, .terminator_pos = terminator_pos_out };
    }
    /// method [read_line_string](https://docs.gtk.org/glib/method.IOChannel.read_line_string.html)
    pub fn readLineString(self: *IOChannel, _buffer: *glib.String, _terminator_pos: ?*u64, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, *glib.String, ?*u64, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_read_line_string" });
        const ret = cFn(self, _buffer, _terminator_pos, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_to_end](https://docs.gtk.org/glib/method.IOChannel.read_to_end.html)
    pub fn readToEnd(self: *IOChannel, _error: *?*core.Error) error{GError}!struct {
        ret: glib.IOStatus,
        str_return: []u8,
    } {
        var str_return_out: [*]u8 = undefined;
        const _str_return = &str_return_out;
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*IOChannel, *[*]u8, *u64, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_read_to_end" });
        const ret = cFn(self, _str_return, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .str_return = str_return_out[0..@intCast(length_out)] };
    }
    /// method [read_unichar](https://docs.gtk.org/glib/method.IOChannel.read_unichar.html)
    pub fn readUnichar(self: *IOChannel, _error: *?*core.Error) error{GError}!struct {
        ret: glib.IOStatus,
        thechar: core.Unichar,
    } {
        var thechar_out: core.Unichar = undefined;
        const _thechar = &thechar_out;
        const cFn = @extern(*const fn (*IOChannel, *core.Unichar, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_read_unichar" });
        const ret = cFn(self, _thechar, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .thechar = thechar_out };
    }
    /// method [ref](https://docs.gtk.org/glib/method.IOChannel.ref.html)
    pub fn ref(self: *IOChannel) *glib.IOChannel {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) *glib.IOChannel, .{ .name = "g_io_channel_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [seek](https://docs.gtk.org/glib/method.IOChannel.seek.html)
    pub const seek = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn seek(self: *IOChannel, _offset: i64, _type: glib.SeekType) glib.IOError {
            const cFn = @extern(*const fn (*IOChannel, i64, glib.SeekType) callconv(.c) glib.IOError, .{ .name = "g_io_channel_seek" });
            const ret = cFn(self, _offset, _type);
            return ret;
        }
    }.seek;
    /// method [seek_position](https://docs.gtk.org/glib/method.IOChannel.seek_position.html)
    pub fn seekPosition(self: *IOChannel, _offset: i64, _type: glib.SeekType, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, i64, glib.SeekType, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_seek_position" });
        const ret = cFn(self, _offset, _type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_buffer_size](https://docs.gtk.org/glib/method.IOChannel.set_buffer_size.html)
    pub fn setBufferSize(self: *IOChannel, _size: u64) void {
        const cFn = @extern(*const fn (*IOChannel, u64) callconv(.c) void, .{ .name = "g_io_channel_set_buffer_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_buffered](https://docs.gtk.org/glib/method.IOChannel.set_buffered.html)
    pub fn setBuffered(self: *IOChannel, _buffered: bool) void {
        const cFn = @extern(*const fn (*IOChannel, bool) callconv(.c) void, .{ .name = "g_io_channel_set_buffered" });
        const ret = cFn(self, _buffered);
        return ret;
    }
    /// method [set_close_on_unref](https://docs.gtk.org/glib/method.IOChannel.set_close_on_unref.html)
    pub fn setCloseOnUnref(self: *IOChannel, _do_close: bool) void {
        const cFn = @extern(*const fn (*IOChannel, bool) callconv(.c) void, .{ .name = "g_io_channel_set_close_on_unref" });
        const ret = cFn(self, _do_close);
        return ret;
    }
    /// method [set_encoding](https://docs.gtk.org/glib/method.IOChannel.set_encoding.html)
    pub fn setEncoding(self: *IOChannel, _encoding: ?[*:0]const u8, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, ?[*:0]const u8, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_set_encoding" });
        const ret = cFn(self, _encoding, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/glib/method.IOChannel.set_flags.html)
    pub fn setFlags(self: *IOChannel, _flags: glib.IOFlags, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, glib.IOFlags, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_set_flags" });
        const ret = cFn(self, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_line_term](https://docs.gtk.org/glib/method.IOChannel.set_line_term.html)
    pub fn setLineTerm(self: *IOChannel, _line_term: ?[*:0]const u8, _length: i32) void {
        const cFn = @extern(*const fn (*IOChannel, ?[*:0]const u8, i32) callconv(.c) void, .{ .name = "g_io_channel_set_line_term" });
        const ret = cFn(self, _line_term, _length);
        return ret;
    }
    /// method [shutdown](https://docs.gtk.org/glib/method.IOChannel.shutdown.html)
    pub fn shutdown(self: *IOChannel, _flush: bool, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, bool, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_shutdown" });
        const ret = cFn(self, _flush, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [unix_get_fd](https://docs.gtk.org/glib/method.IOChannel.unix_get_fd.html)
    pub fn unixGetFd(self: *IOChannel) i32 {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) i32, .{ .name = "g_io_channel_unix_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.IOChannel.unref.html)
    pub fn unref(self: *IOChannel) void {
        const cFn = @extern(*const fn (*IOChannel) callconv(.c) void, .{ .name = "g_io_channel_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [write](https://docs.gtk.org/glib/method.IOChannel.write.html)
    pub const write = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn write(self: *IOChannel, _buf: [*:0]const u8, _count: u64, _bytes_written: *u64) glib.IOError {
            const cFn = @extern(*const fn (*IOChannel, [*:0]const u8, u64, *u64) callconv(.c) glib.IOError, .{ .name = "g_io_channel_write" });
            const ret = cFn(self, _buf, _count, _bytes_written);
            return ret;
        }
    }.write;
    /// method [write_chars](https://docs.gtk.org/glib/method.IOChannel.write_chars.html)
    pub fn writeChars(self: *IOChannel, _buf: [*]u8, _count: i64, _error: *?*core.Error) error{GError}!struct {
        ret: glib.IOStatus,
        bytes_written: u64,
    } {
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*IOChannel, [*]u8, i64, *u64, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_write_chars" });
        const ret = cFn(self, _buf, _count, _bytes_written, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [write_unichar](https://docs.gtk.org/glib/method.IOChannel.write_unichar.html)
    pub fn writeUnichar(self: *IOChannel, _thechar: core.Unichar, _error: *?*core.Error) error{GError}!glib.IOStatus {
        const cFn = @extern(*const fn (*IOChannel, core.Unichar, *?*core.Error) callconv(.c) glib.IOStatus, .{ .name = "g_io_channel_write_unichar" });
        const ret = cFn(self, _thechar, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [error_from_errno](https://docs.gtk.org/glib/type_func.IOChannel.error_from_errno.html)
    pub fn errorFromErrno(_en: i32) glib.IOChannelError {
        const cFn = @extern(*const fn (i32) callconv(.c) glib.IOChannelError, .{ .name = "g_io_channel_error_from_errno" });
        const ret = cFn(_en);
        return ret;
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.IOChannel.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_io_channel_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_channel_get_type" });
        return cFn();
    }
};
/// Error [IOChannelError](https://docs.gtk.org/glib/error.IOChannelError.html)
pub const IOChannelError = enum(u32) {
    fbig = 0,
    inval = 1,
    io = 2,
    isdir = 3,
    nospc = 4,
    nxio = 5,
    overflow = 6,
    pipe = 7,
    failed = 8,
};
/// Flags [IOCondition](https://docs.gtk.org/glib/flags.IOCondition.html)
pub const IOCondition = packed struct(u32) {
    in: bool = false,
    pri: bool = false,
    out: bool = false,
    err: bool = false,
    hup: bool = false,
    nval: bool = false,
    _: u26 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_condition_get_type" });
        return cFn();
    }
};
/// Error [IOError](https://docs.gtk.org/glib/error.IOError.html)
pub const IOError = enum(u32) {
    none = 0,
    again = 1,
    inval = 2,
    unknown = 3,
};
/// Flags [IOFlags](https://docs.gtk.org/glib/flags.IOFlags.html)
pub const IOFlags = packed struct(u32) {
    append: bool = false,
    nonblock: bool = false,
    is_readable: bool = false,
    is_writable: bool = false,
    is_seekable: bool = false,
    _: u27 = 0,
    pub const mask: @This() = @bitCast(@as(u32, 31));
    pub const get_mask: @This() = @bitCast(@as(u32, 31));
    pub const set_mask: @This() = @bitCast(@as(u32, 3));
};
/// callback [IOFunc](https://docs.gtk.org/glib/callback.IOFunc.html)
pub const IOFunc = *const fn (_source: *glib.IOChannel, _condition: glib.IOCondition, _data: ?*anyopaque) callconv(.c) bool;
/// Struct [IOFuncs](https://docs.gtk.org/glib/struct.IOFuncs.html)
pub const IOFuncs = extern struct {
    io_read: ?*const fn (_channel: *glib.IOChannel, _buf: [*:0]const u8, _count: u64, _bytes_read: *u64, _error: *?*core.Error) callconv(.c) glib.IOStatus,
    io_write: ?*const fn (_channel: *glib.IOChannel, _buf: [*:0]const u8, _count: u64, _bytes_written: *u64, _error: *?*core.Error) callconv(.c) glib.IOStatus,
    io_seek: ?*const fn (_channel: *glib.IOChannel, _offset: i64, _type: glib.SeekType, _error: *?*core.Error) callconv(.c) glib.IOStatus,
    io_close: ?*const fn (_channel: *glib.IOChannel, _error: *?*core.Error) callconv(.c) glib.IOStatus,
    io_create_watch: ?*const fn (_channel: *glib.IOChannel, _condition: glib.IOCondition) callconv(.c) *glib.Source,
    io_free: ?*const fn (_channel: *glib.IOChannel) callconv(.c) void,
    io_set_flags: ?*const fn (_channel: *glib.IOChannel, _flags: glib.IOFlags, _error: *?*core.Error) callconv(.c) glib.IOStatus,
    io_get_flags: ?*const fn (_channel: *glib.IOChannel) callconv(.c) glib.IOFlags,
};
/// Enum [IOStatus](https://docs.gtk.org/glib/enum.IOStatus.html)
pub const IOStatus = enum(u32) {
    @"error" = 0,
    normal = 1,
    eof = 2,
    again = 3,
};
/// const [KEY_FILE_DESKTOP_GROUP](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_GROUP.html)
pub const KEY_FILE_DESKTOP_GROUP = "Desktop Entry";
/// const [KEY_FILE_DESKTOP_KEY_ACTIONS](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_ACTIONS.html)
pub const KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions";
/// const [KEY_FILE_DESKTOP_KEY_CATEGORIES](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_CATEGORIES.html)
pub const KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories";
/// const [KEY_FILE_DESKTOP_KEY_COMMENT](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_COMMENT.html)
pub const KEY_FILE_DESKTOP_KEY_COMMENT = "Comment";
/// const [KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE.html)
pub const KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable";
/// const [KEY_FILE_DESKTOP_KEY_EXEC](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_EXEC.html)
pub const KEY_FILE_DESKTOP_KEY_EXEC = "Exec";
/// const [KEY_FILE_DESKTOP_KEY_GENERIC_NAME](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_GENERIC_NAME.html)
pub const KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName";
/// const [KEY_FILE_DESKTOP_KEY_HIDDEN](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_HIDDEN.html)
pub const KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden";
/// const [KEY_FILE_DESKTOP_KEY_ICON](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_ICON.html)
pub const KEY_FILE_DESKTOP_KEY_ICON = "Icon";
/// const [KEY_FILE_DESKTOP_KEY_MIME_TYPE](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_MIME_TYPE.html)
pub const KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType";
/// const [KEY_FILE_DESKTOP_KEY_NAME](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_NAME.html)
pub const KEY_FILE_DESKTOP_KEY_NAME = "Name";
/// const [KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN.html)
pub const KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn";
/// const [KEY_FILE_DESKTOP_KEY_NO_DISPLAY](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_NO_DISPLAY.html)
pub const KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay";
/// const [KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN.html)
pub const KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn";
/// const [KEY_FILE_DESKTOP_KEY_PATH](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_PATH.html)
pub const KEY_FILE_DESKTOP_KEY_PATH = "Path";
/// const [KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY.html)
pub const KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify";
/// const [KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS.html)
pub const KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass";
/// const [KEY_FILE_DESKTOP_KEY_TERMINAL](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_TERMINAL.html)
pub const KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal";
/// const [KEY_FILE_DESKTOP_KEY_TRY_EXEC](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_TRY_EXEC.html)
pub const KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec";
/// const [KEY_FILE_DESKTOP_KEY_TYPE](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_TYPE.html)
pub const KEY_FILE_DESKTOP_KEY_TYPE = "Type";
/// const [KEY_FILE_DESKTOP_KEY_URL](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_URL.html)
pub const KEY_FILE_DESKTOP_KEY_URL = "URL";
/// const [KEY_FILE_DESKTOP_KEY_VERSION](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_KEY_VERSION.html)
pub const KEY_FILE_DESKTOP_KEY_VERSION = "Version";
/// const [KEY_FILE_DESKTOP_TYPE_APPLICATION](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_TYPE_APPLICATION.html)
pub const KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application";
/// const [KEY_FILE_DESKTOP_TYPE_DIRECTORY](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_TYPE_DIRECTORY.html)
pub const KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory";
/// const [KEY_FILE_DESKTOP_TYPE_LINK](https://docs.gtk.org/glib/const.KEY_FILE_DESKTOP_TYPE_LINK.html)
pub const KEY_FILE_DESKTOP_TYPE_LINK = "Link";
/// Struct [KeyFile](https://docs.gtk.org/glib/struct.KeyFile.html)
pub const KeyFile = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.KeyFile.new.html)
    pub fn new() *KeyFile {
        const cFn = @extern(*const fn () callconv(.c) *KeyFile, .{ .name = "g_key_file_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_boolean](https://docs.gtk.org/glib/method.KeyFile.get_boolean.html)
    pub fn getBoolean(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_get_boolean" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_boolean_list](https://docs.gtk.org/glib/method.KeyFile.get_boolean_list.html)
    pub fn getBooleanList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*]bool,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *u64, *?*core.Error) callconv(.c) [*]bool, .{ .name = "g_key_file_get_boolean_list" });
        const ret = cFn(self, _group_name, _key, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_comment](https://docs.gtk.org/glib/method.KeyFile.get_comment.html)
    pub fn getComment(self: *KeyFile, _group_name: ?[*:0]const u8, _key: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile, ?[*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_key_file_get_comment" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_double](https://docs.gtk.org/glib/method.KeyFile.get_double.html)
    pub fn getDouble(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!f64 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) f64, .{ .name = "g_key_file_get_double" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_double_list](https://docs.gtk.org/glib/method.KeyFile.get_double_list.html)
    pub fn getDoubleList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*]f64,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *u64, *?*core.Error) callconv(.c) [*]f64, .{ .name = "g_key_file_get_double_list" });
        const ret = cFn(self, _group_name, _key, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_groups](https://docs.gtk.org/glib/method.KeyFile.get_groups.html)
    pub fn getGroups(self: *KeyFile) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_key_file_get_groups" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_int64](https://docs.gtk.org/glib/method.KeyFile.get_int64.html)
    pub fn getInt64(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) i64, .{ .name = "g_key_file_get_int64" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_integer](https://docs.gtk.org/glib/method.KeyFile.get_integer.html)
    pub fn getInteger(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) i32, .{ .name = "g_key_file_get_integer" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_integer_list](https://docs.gtk.org/glib/method.KeyFile.get_integer_list.html)
    pub fn getIntegerList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*]i32,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *u64, *?*core.Error) callconv(.c) [*]i32, .{ .name = "g_key_file_get_integer_list" });
        const ret = cFn(self, _group_name, _key, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_keys](https://docs.gtk.org/glib/method.KeyFile.get_keys.html)
    pub fn getKeys(self: *KeyFile, _group_name: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, ?*u64, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_key_file_get_keys" });
        const ret = cFn(self, _group_name, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_locale_for_key](https://docs.gtk.org/glib/method.KeyFile.get_locale_for_key.html)
    pub fn getLocaleForKey(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _locale: ?[*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_key_file_get_locale_for_key" });
        const ret = cFn(self, _group_name, _key, _locale);
        return ret;
    }
    /// method [get_locale_string](https://docs.gtk.org/glib/method.KeyFile.get_locale_string.html)
    pub fn getLocaleString(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _locale: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_key_file_get_locale_string" });
        const ret = cFn(self, _group_name, _key, _locale, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_locale_string_list](https://docs.gtk.org/glib/method.KeyFile.get_locale_string_list.html)
    pub fn getLocaleStringList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _locale: ?[*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, ?[*:0]const u8, ?*u64, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_key_file_get_locale_string_list" });
        const ret = cFn(self, _group_name, _key, _locale, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_start_group](https://docs.gtk.org/glib/method.KeyFile.get_start_group.html)
    pub fn getStartGroup(self: *KeyFile) ?[*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile) callconv(.c) ?[*:0]u8, .{ .name = "g_key_file_get_start_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/glib/method.KeyFile.get_string.html)
    pub fn getString(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_key_file_get_string" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_string_list](https://docs.gtk.org/glib/method.KeyFile.get_string_list.html)
    pub fn getStringList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, ?*u64, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_key_file_get_string_list" });
        const ret = cFn(self, _group_name, _key, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_uint64](https://docs.gtk.org/glib/method.KeyFile.get_uint64.html)
    pub fn getUint64(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!u64 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) u64, .{ .name = "g_key_file_get_uint64" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/glib/method.KeyFile.get_value.html)
    pub fn getValue(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_key_file_get_value" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_group](https://docs.gtk.org/glib/method.KeyFile.has_group.html)
    pub fn hasGroup(self: *KeyFile, _group_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8) callconv(.c) bool, .{ .name = "g_key_file_has_group" });
        const ret = cFn(self, _group_name);
        return ret;
    }
    /// method [load_from_bytes](https://docs.gtk.org/glib/method.KeyFile.load_from_bytes.html)
    pub fn loadFromBytes(self: *KeyFile, _bytes: *glib.Bytes, _flags: glib.KeyFileFlags, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, *glib.Bytes, glib.KeyFileFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_load_from_bytes" });
        const ret = cFn(self, _bytes, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [load_from_data](https://docs.gtk.org/glib/method.KeyFile.load_from_data.html)
    pub fn loadFromData(self: *KeyFile, _data: [*:0]const u8, _length: u64, _flags: glib.KeyFileFlags, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, u64, glib.KeyFileFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_load_from_data" });
        const ret = cFn(self, _data, _length, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [load_from_data_dirs](https://docs.gtk.org/glib/method.KeyFile.load_from_data_dirs.html)
    pub fn loadFromDataDirs(self: *KeyFile, _file: [*:0]const u8, _flags: glib.KeyFileFlags, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        full_path: [*:0]u8,
    } {
        var full_path_out: [*:0]u8 = undefined;
        const _full_path = &full_path_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, ?*[*:0]u8, glib.KeyFileFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_load_from_data_dirs" });
        const ret = cFn(self, _file, _full_path, _flags, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .full_path = full_path_out };
    }
    /// method [load_from_dirs](https://docs.gtk.org/glib/method.KeyFile.load_from_dirs.html)
    pub fn loadFromDirs(self: *KeyFile, _file: [*:0]const u8, _search_dirs: [*:null]?[*:0]const u8, _flags: glib.KeyFileFlags, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        full_path: [*:0]u8,
    } {
        var full_path_out: [*:0]u8 = undefined;
        const _full_path = &full_path_out;
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:null]?[*:0]const u8, ?*[*:0]u8, glib.KeyFileFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_load_from_dirs" });
        const ret = cFn(self, _file, _search_dirs, _full_path, _flags, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .full_path = full_path_out };
    }
    /// method [load_from_file](https://docs.gtk.org/glib/method.KeyFile.load_from_file.html)
    pub fn loadFromFile(self: *KeyFile, _file: [*:0]const u8, _flags: glib.KeyFileFlags, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, glib.KeyFileFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_load_from_file" });
        const ret = cFn(self, _file, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_comment](https://docs.gtk.org/glib/method.KeyFile.remove_comment.html)
    pub fn removeComment(self: *KeyFile, _group_name: ?[*:0]const u8, _key: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, ?[*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_remove_comment" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_group](https://docs.gtk.org/glib/method.KeyFile.remove_group.html)
    pub fn removeGroup(self: *KeyFile, _group_name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_remove_group" });
        const ret = cFn(self, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_key](https://docs.gtk.org/glib/method.KeyFile.remove_key.html)
    pub fn removeKey(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_remove_key" });
        const ret = cFn(self, _group_name, _key, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [save_to_file](https://docs.gtk.org/glib/method.KeyFile.save_to_file.html)
    pub fn saveToFile(self: *KeyFile, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_save_to_file" });
        const ret = cFn(self, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_boolean](https://docs.gtk.org/glib/method.KeyFile.set_boolean.html)
    pub fn setBoolean(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: bool) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_key_file_set_boolean" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [set_boolean_list](https://docs.gtk.org/glib/method.KeyFile.set_boolean_list.html)
    pub fn setBooleanList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _lists: []bool) void {
        const _list = _lists.ptr;
        const _length: u64 = @intCast(_lists.len);
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*]bool, u64) callconv(.c) void, .{ .name = "g_key_file_set_boolean_list" });
        const ret = cFn(self, _group_name, _key, _list, _length);
        return ret;
    }
    /// method [set_comment](https://docs.gtk.org/glib/method.KeyFile.set_comment.html)
    pub fn setComment(self: *KeyFile, _group_name: ?[*:0]const u8, _key: ?[*:0]const u8, _comment: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*KeyFile, ?[*:0]const u8, ?[*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_key_file_set_comment" });
        const ret = cFn(self, _group_name, _key, _comment, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_double](https://docs.gtk.org/glib/method.KeyFile.set_double.html)
    pub fn setDouble(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: f64) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, f64) callconv(.c) void, .{ .name = "g_key_file_set_double" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [set_double_list](https://docs.gtk.org/glib/method.KeyFile.set_double_list.html)
    pub fn setDoubleList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _lists: []f64) void {
        const _list = _lists.ptr;
        const _length: u64 = @intCast(_lists.len);
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*]f64, u64) callconv(.c) void, .{ .name = "g_key_file_set_double_list" });
        const ret = cFn(self, _group_name, _key, _list, _length);
        return ret;
    }
    /// method [set_int64](https://docs.gtk.org/glib/method.KeyFile.set_int64.html)
    pub fn setInt64(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: i64) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, i64) callconv(.c) void, .{ .name = "g_key_file_set_int64" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [set_integer](https://docs.gtk.org/glib/method.KeyFile.set_integer.html)
    pub fn setInteger(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: i32) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, i32) callconv(.c) void, .{ .name = "g_key_file_set_integer" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [set_integer_list](https://docs.gtk.org/glib/method.KeyFile.set_integer_list.html)
    pub fn setIntegerList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _lists: []i32) void {
        const _list = _lists.ptr;
        const _length: u64 = @intCast(_lists.len);
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*]i32, u64) callconv(.c) void, .{ .name = "g_key_file_set_integer_list" });
        const ret = cFn(self, _group_name, _key, _list, _length);
        return ret;
    }
    /// method [set_list_separator](https://docs.gtk.org/glib/method.KeyFile.set_list_separator.html)
    pub fn setListSeparator(self: *KeyFile, _separator: i8) void {
        const cFn = @extern(*const fn (*KeyFile, i8) callconv(.c) void, .{ .name = "g_key_file_set_list_separator" });
        const ret = cFn(self, _separator);
        return ret;
    }
    /// method [set_locale_string](https://docs.gtk.org/glib/method.KeyFile.set_locale_string.html)
    pub fn setLocaleString(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _locale: [*:0]const u8, _string: [*:0]const u8) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_key_file_set_locale_string" });
        const ret = cFn(self, _group_name, _key, _locale, _string);
        return ret;
    }
    /// method [set_locale_string_list](https://docs.gtk.org/glib/method.KeyFile.set_locale_string_list.html)
    pub fn setLocaleStringList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _locale: [*:0]const u8, _lists: []?[*:0]const u8) void {
        const _list = _lists.ptr;
        const _length: u64 = @intCast(_lists.len);
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*:0]const u8, [*:null]?[*:0]const u8, u64) callconv(.c) void, .{ .name = "g_key_file_set_locale_string_list" });
        const ret = cFn(self, _group_name, _key, _locale, _list, _length);
        return ret;
    }
    /// method [set_string](https://docs.gtk.org/glib/method.KeyFile.set_string.html)
    pub fn setString(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _string: [*:0]const u8) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_key_file_set_string" });
        const ret = cFn(self, _group_name, _key, _string);
        return ret;
    }
    /// method [set_string_list](https://docs.gtk.org/glib/method.KeyFile.set_string_list.html)
    pub fn setStringList(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _lists: []?[*:0]const u8) void {
        const _list = _lists.ptr;
        const _length: u64 = @intCast(_lists.len);
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*:null]?[*:0]const u8, u64) callconv(.c) void, .{ .name = "g_key_file_set_string_list" });
        const ret = cFn(self, _group_name, _key, _list, _length);
        return ret;
    }
    /// method [set_uint64](https://docs.gtk.org/glib/method.KeyFile.set_uint64.html)
    pub fn setUint64(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: u64) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, u64) callconv(.c) void, .{ .name = "g_key_file_set_uint64" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/glib/method.KeyFile.set_value.html)
    pub fn setValue(self: *KeyFile, _group_name: [*:0]const u8, _key: [*:0]const u8, _value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*KeyFile, [*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_key_file_set_value" });
        const ret = cFn(self, _group_name, _key, _value);
        return ret;
    }
    /// method [to_data](https://docs.gtk.org/glib/method.KeyFile.to_data.html)
    pub fn toData(self: *KeyFile, _error: *?*core.Error) error{GError}!struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*KeyFile, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_key_file_to_data" });
        const ret = cFn(self, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [unref](https://docs.gtk.org/glib/method.KeyFile.unref.html)
    pub fn unref(self: *KeyFile) void {
        const cFn = @extern(*const fn (*KeyFile) callconv(.c) void, .{ .name = "g_key_file_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.KeyFile.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_key_file_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_key_file_get_type" });
        return cFn();
    }
};
/// Error [KeyFileError](https://docs.gtk.org/glib/error.KeyFileError.html)
pub const KeyFileError = enum(u32) {
    unknown_encoding = 0,
    parse = 1,
    not_found = 2,
    key_not_found = 3,
    group_not_found = 4,
    invalid_value = 5,
};
/// Flags [KeyFileFlags](https://docs.gtk.org/glib/flags.KeyFileFlags.html)
pub const KeyFileFlags = packed struct(u32) {
    keep_comments: bool = false,
    keep_translations: bool = false,
    _: u30 = 0,
};
/// const [LITTLE_ENDIAN](https://docs.gtk.org/glib/const.LITTLE_ENDIAN.html)
pub const LITTLE_ENDIAN = 1234;
/// const [LN10](https://docs.gtk.org/glib/const.LN10.html)
pub const LN10 = 2.302585e0;
/// const [LN2](https://docs.gtk.org/glib/const.LN2.html)
pub const LN2 = 6.93147e-1;
/// const [LOG_2_BASE_10](https://docs.gtk.org/glib/const.LOG_2_BASE_10.html)
pub const LOG_2_BASE_10 = 3.0103e-1;
/// const [LOG_DOMAIN](https://docs.gtk.org/glib/const.LOG_DOMAIN.html)
pub const LOG_DOMAIN = 0;
/// const [LOG_FATAL_MASK](https://docs.gtk.org/glib/const.LOG_FATAL_MASK.html)
pub const LOG_FATAL_MASK = 5;
/// const [LOG_LEVEL_USER_SHIFT](https://docs.gtk.org/glib/const.LOG_LEVEL_USER_SHIFT.html)
pub const LOG_LEVEL_USER_SHIFT = 8;
/// Struct [List](https://docs.gtk.org/glib/struct.List.html)
pub const List = extern struct {
    data: ?*anyopaque,
    next: ?*core.List,
    prev: ?*core.List,
    /// type func [pop_allocator](https://docs.gtk.org/glib/type_func.List.pop_allocator.html)
    pub fn popAllocator() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_list_pop_allocator" });
        const ret = cFn();
        return ret;
    }
    /// type func [push_allocator](https://docs.gtk.org/glib/type_func.List.push_allocator.html)
    pub fn pushAllocator(_allocator: *glib.Allocator) void {
        const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_list_push_allocator" });
        const ret = cFn(_allocator);
        return ret;
    }
};
/// Struct [LogField](https://docs.gtk.org/glib/struct.LogField.html)
pub const LogField = extern struct {
    key: ?[*:0]const u8,
    value: ?*anyopaque,
    length: i64,
};
/// callback [LogFunc](https://docs.gtk.org/glib/callback.LogFunc.html)
pub const LogFunc = *const fn (_log_domain: [*:0]const u8, _log_level: glib.LogLevelFlags, _message: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// Flags [LogLevelFlags](https://docs.gtk.org/glib/flags.LogLevelFlags.html)
pub const LogLevelFlags = packed struct(i32) {
    flag_recursion: bool = false,
    flag_fatal: bool = false,
    level_error: bool = false,
    level_critical: bool = false,
    level_warning: bool = false,
    level_message: bool = false,
    level_info: bool = false,
    level_debug: bool = false,
    _: u24 = 0,
    pub const level_mask: @This() = @bitCast(@as(i32, -4));
};
/// callback [LogWriterFunc](https://docs.gtk.org/glib/callback.LogWriterFunc.html)
pub const LogWriterFunc = *const fn (_log_level: glib.LogLevelFlags, _fields: [*]glib.LogField, _n_fields: u64, _user_data: ?*anyopaque) callconv(.c) glib.LogWriterOutput;
/// Enum [LogWriterOutput](https://docs.gtk.org/glib/enum.LogWriterOutput.html)
pub const LogWriterOutput = enum(u32) {
    handled = 1,
    unhandled = 0,
};
/// const [MAJOR_VERSION](https://docs.gtk.org/glib/const.MAJOR_VERSION.html)
pub const MAJOR_VERSION = 2;
/// const [MAXINT16](https://docs.gtk.org/glib/const.MAXINT16.html)
pub const MAXINT16 = 32767;
/// const [MAXINT32](https://docs.gtk.org/glib/const.MAXINT32.html)
pub const MAXINT32 = 2147483647;
/// const [MAXINT64](https://docs.gtk.org/glib/const.MAXINT64.html)
pub const MAXINT64 = 9223372036854775807;
/// const [MAXINT8](https://docs.gtk.org/glib/const.MAXINT8.html)
pub const MAXINT8 = 127;
/// const [MAXUINT16](https://docs.gtk.org/glib/const.MAXUINT16.html)
pub const MAXUINT16 = 65535;
/// const [MAXUINT32](https://docs.gtk.org/glib/const.MAXUINT32.html)
pub const MAXUINT32 = 4294967295;
/// const [MAXUINT64](https://docs.gtk.org/glib/const.MAXUINT64.html)
pub const MAXUINT64 = 18446744073709551615;
/// const [MAXUINT8](https://docs.gtk.org/glib/const.MAXUINT8.html)
pub const MAXUINT8 = 255;
/// const [MICRO_VERSION](https://docs.gtk.org/glib/const.MICRO_VERSION.html)
pub const MICRO_VERSION = 4;
/// const [MININT16](https://docs.gtk.org/glib/const.MININT16.html)
pub const MININT16 = -32768;
/// const [MININT32](https://docs.gtk.org/glib/const.MININT32.html)
pub const MININT32 = -2147483648;
/// const [MININT64](https://docs.gtk.org/glib/const.MININT64.html)
pub const MININT64 = -9223372036854775808;
/// const [MININT8](https://docs.gtk.org/glib/const.MININT8.html)
pub const MININT8 = -128;
/// const [MINOR_VERSION](https://docs.gtk.org/glib/const.MINOR_VERSION.html)
pub const MINOR_VERSION = 80;
/// const [MODULE_SUFFIX](https://docs.gtk.org/glib/const.MODULE_SUFFIX.html)
pub const MODULE_SUFFIX = "so";
/// Struct [MainContext](https://docs.gtk.org/glib/struct.MainContext.html)
pub const MainContext = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.MainContext.new.html)
    pub fn new() *MainContext {
        const cFn = @extern(*const fn () callconv(.c) *MainContext, .{ .name = "g_main_context_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_flags](https://docs.gtk.org/glib/ctor.MainContext.new_with_flags.html)
    pub fn newWithFlags(_flags: glib.MainContextFlags) *MainContext {
        const cFn = @extern(*const fn (glib.MainContextFlags) callconv(.c) *MainContext, .{ .name = "g_main_context_new_with_flags" });
        const ret = cFn(_flags);
        return ret;
    }
    /// method [acquire](https://docs.gtk.org/glib/method.MainContext.acquire.html)
    pub fn acquire(self: *MainContext) bool {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) bool, .{ .name = "g_main_context_acquire" });
        const ret = cFn(self);
        return ret;
    }
    /// method [add_poll](https://docs.gtk.org/glib/method.MainContext.add_poll.html)
    pub fn addPoll(self: *MainContext, _fd: *glib.PollFD, _priority: i32) void {
        const cFn = @extern(*const fn (*MainContext, *glib.PollFD, i32) callconv(.c) void, .{ .name = "g_main_context_add_poll" });
        const ret = cFn(self, _fd, _priority);
        return ret;
    }
    /// method [check](https://docs.gtk.org/glib/method.MainContext.check.html)
    pub fn check(self: *MainContext, _max_priority: i32, _fdss: []glib.PollFD) bool {
        const _fds = _fdss.ptr;
        const _n_fds: i32 = @intCast(_fdss.len);
        const cFn = @extern(*const fn (*MainContext, i32, [*]glib.PollFD, i32) callconv(.c) bool, .{ .name = "g_main_context_check" });
        const ret = cFn(self, _max_priority, _fds, _n_fds);
        return ret;
    }
    /// method [dispatch](https://docs.gtk.org/glib/method.MainContext.dispatch.html)
    pub fn dispatch(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_dispatch" });
        const ret = cFn(self);
        return ret;
    }
    /// method [find_source_by_funcs_user_data](https://docs.gtk.org/glib/method.MainContext.find_source_by_funcs_user_data.html)
    pub fn findSourceByFuncsUserData(self: *MainContext, _funcs: *glib.SourceFuncs, _user_data: ?*anyopaque) *glib.Source {
        const cFn = @extern(*const fn (*MainContext, *glib.SourceFuncs, ?*anyopaque) callconv(.c) *glib.Source, .{ .name = "g_main_context_find_source_by_funcs_user_data" });
        const ret = cFn(self, _funcs, @ptrCast(_user_data));
        return ret;
    }
    /// method [find_source_by_id](https://docs.gtk.org/glib/method.MainContext.find_source_by_id.html)
    pub fn findSourceById(self: *MainContext, _source_id: u32) *glib.Source {
        const cFn = @extern(*const fn (*MainContext, u32) callconv(.c) *glib.Source, .{ .name = "g_main_context_find_source_by_id" });
        const ret = cFn(self, _source_id);
        return ret;
    }
    /// method [find_source_by_user_data](https://docs.gtk.org/glib/method.MainContext.find_source_by_user_data.html)
    pub fn findSourceByUserData(self: *MainContext, _user_data: ?*anyopaque) *glib.Source {
        const cFn = @extern(*const fn (*MainContext, ?*anyopaque) callconv(.c) *glib.Source, .{ .name = "g_main_context_find_source_by_user_data" });
        const ret = cFn(self, @ptrCast(_user_data));
        return ret;
    }
    /// method [invoke_full](https://docs.gtk.org/glib/method.MainContext.invoke_full.html)
    pub fn invokeFull(self: *MainContext, _priority: i32, function: anytype, function_args: anytype) void {
        var closure_function = core.zig_closure(function, function_args, &.{bool});
        const _function: glib.SourceFunc = @ptrCast(closure_function.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_function.c_data());
        const _notify: ?glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
        const cFn = @extern(*const fn (*MainContext, i32, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_main_context_invoke_full" });
        const ret = cFn(self, _priority, _function, @ptrCast(_data), _notify);
        return ret;
    }
    /// method [is_owner](https://docs.gtk.org/glib/method.MainContext.is_owner.html)
    pub fn isOwner(self: *MainContext) bool {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) bool, .{ .name = "g_main_context_is_owner" });
        const ret = cFn(self);
        return ret;
    }
    /// method [iteration](https://docs.gtk.org/glib/method.MainContext.iteration.html)
    pub fn iteration(self: *MainContext, _may_block: bool) bool {
        const cFn = @extern(*const fn (*MainContext, bool) callconv(.c) bool, .{ .name = "g_main_context_iteration" });
        const ret = cFn(self, _may_block);
        return ret;
    }
    /// method [pending](https://docs.gtk.org/glib/method.MainContext.pending.html)
    pub fn pending(self: *MainContext) bool {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) bool, .{ .name = "g_main_context_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pop_thread_default](https://docs.gtk.org/glib/method.MainContext.pop_thread_default.html)
    pub fn popThreadDefault(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_pop_thread_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prepare](https://docs.gtk.org/glib/method.MainContext.prepare.html)
    pub fn prepare(self: *MainContext) struct {
        ret: bool,
        priority: i32,
    } {
        var priority_out: i32 = undefined;
        const _priority = &priority_out;
        const cFn = @extern(*const fn (*MainContext, ?*i32) callconv(.c) bool, .{ .name = "g_main_context_prepare" });
        const ret = cFn(self, _priority);
        return .{ .ret = ret, .priority = priority_out };
    }
    /// method [push_thread_default](https://docs.gtk.org/glib/method.MainContext.push_thread_default.html)
    pub fn pushThreadDefault(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_push_thread_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [query](https://docs.gtk.org/glib/method.MainContext.query.html)
    pub fn query(self: *MainContext, _max_priority: i32, _fdss: []glib.PollFD) struct {
        ret: i32,
        timeout_: i32,
    } {
        const _fds = _fdss.ptr;
        const _n_fds: i32 = @intCast(_fdss.len);
        var timeout__out: i32 = undefined;
        const _timeout_ = &timeout__out;
        const cFn = @extern(*const fn (*MainContext, i32, *i32, [*]glib.PollFD, i32) callconv(.c) i32, .{ .name = "g_main_context_query" });
        const ret = cFn(self, _max_priority, _timeout_, _fds, _n_fds);
        return .{ .ret = ret, .timeout_ = timeout__out };
    }
    /// method [ref](https://docs.gtk.org/glib/method.MainContext.ref.html)
    pub fn ref(self: *MainContext) *glib.MainContext {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) *glib.MainContext, .{ .name = "g_main_context_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [release](https://docs.gtk.org/glib/method.MainContext.release.html)
    pub fn release(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_release" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_poll](https://docs.gtk.org/glib/method.MainContext.remove_poll.html)
    pub fn removePoll(self: *MainContext, _fd: *glib.PollFD) void {
        const cFn = @extern(*const fn (*MainContext, *glib.PollFD) callconv(.c) void, .{ .name = "g_main_context_remove_poll" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.MainContext.unref.html)
    pub fn unref(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [wait](https://docs.gtk.org/glib/method.MainContext.wait.html)
    pub const wait = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn wait(self: *MainContext, _cond: *glib.Cond, _mutex: *glib.Mutex) bool {
            const cFn = @extern(*const fn (*MainContext, *glib.Cond, *glib.Mutex) callconv(.c) bool, .{ .name = "g_main_context_wait" });
            const ret = cFn(self, _cond, _mutex);
            return ret;
        }
    }.wait;
    /// method [wakeup](https://docs.gtk.org/glib/method.MainContext.wakeup.html)
    pub fn wakeup(self: *MainContext) void {
        const cFn = @extern(*const fn (*MainContext) callconv(.c) void, .{ .name = "g_main_context_wakeup" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [default](https://docs.gtk.org/glib/type_func.MainContext.default.html)
    pub fn default() *glib.MainContext {
        const cFn = @extern(*const fn () callconv(.c) *glib.MainContext, .{ .name = "g_main_context_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_thread_default](https://docs.gtk.org/glib/type_func.MainContext.get_thread_default.html)
    pub fn getThreadDefault() ?*glib.MainContext {
        const cFn = @extern(*const fn () callconv(.c) ?*glib.MainContext, .{ .name = "g_main_context_get_thread_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [ref_thread_default](https://docs.gtk.org/glib/type_func.MainContext.ref_thread_default.html)
    pub fn refThreadDefault() *glib.MainContext {
        const cFn = @extern(*const fn () callconv(.c) *glib.MainContext, .{ .name = "g_main_context_ref_thread_default" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_main_context_get_type" });
        return cFn();
    }
};
/// Flags [MainContextFlags](https://docs.gtk.org/glib/flags.MainContextFlags.html)
pub const MainContextFlags = packed struct(u32) {
    ownerless_polling: bool = false,
    _: u31 = 0,
};
/// Struct [MainLoop](https://docs.gtk.org/glib/struct.MainLoop.html)
pub const MainLoop = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.MainLoop.new.html)
    pub fn new(_context: ?*glib.MainContext, _is_running: bool) *MainLoop {
        const cFn = @extern(*const fn (?*glib.MainContext, bool) callconv(.c) *MainLoop, .{ .name = "g_main_loop_new" });
        const ret = cFn(_context, _is_running);
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/glib/method.MainLoop.get_context.html)
    pub fn getContext(self: *MainLoop) *glib.MainContext {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) *glib.MainContext, .{ .name = "g_main_loop_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_running](https://docs.gtk.org/glib/method.MainLoop.is_running.html)
    pub fn isRunning(self: *MainLoop) bool {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) bool, .{ .name = "g_main_loop_is_running" });
        const ret = cFn(self);
        return ret;
    }
    /// method [quit](https://docs.gtk.org/glib/method.MainLoop.quit.html)
    pub fn quit(self: *MainLoop) void {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) void, .{ .name = "g_main_loop_quit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.MainLoop.ref.html)
    pub fn ref(self: *MainLoop) *glib.MainLoop {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) *glib.MainLoop, .{ .name = "g_main_loop_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [run](https://docs.gtk.org/glib/method.MainLoop.run.html)
    pub fn run(self: *MainLoop) void {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) void, .{ .name = "g_main_loop_run" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.MainLoop.unref.html)
    pub fn unref(self: *MainLoop) void {
        const cFn = @extern(*const fn (*MainLoop) callconv(.c) void, .{ .name = "g_main_loop_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_main_loop_get_type" });
        return cFn();
    }
};
/// Struct [MappedFile](https://docs.gtk.org/glib/struct.MappedFile.html)
pub const MappedFile = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.MappedFile.new.html)
    pub fn new(_filename: [*:0]const u8, _writable: bool, _error: *?*core.Error) error{GError}!*MappedFile {
        const cFn = @extern(*const fn ([*:0]const u8, bool, *?*core.Error) callconv(.c) *MappedFile, .{ .name = "g_mapped_file_new" });
        const ret = cFn(_filename, _writable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_fd](https://docs.gtk.org/glib/ctor.MappedFile.new_from_fd.html)
    pub fn newFromFd(_fd: i32, _writable: bool, _error: *?*core.Error) error{GError}!*MappedFile {
        const cFn = @extern(*const fn (i32, bool, *?*core.Error) callconv(.c) *MappedFile, .{ .name = "g_mapped_file_new_from_fd" });
        const ret = cFn(_fd, _writable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [free](https://docs.gtk.org/glib/method.MappedFile.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *MappedFile) void {
            const cFn = @extern(*const fn (*MappedFile) callconv(.c) void, .{ .name = "g_mapped_file_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
    /// method [get_bytes](https://docs.gtk.org/glib/method.MappedFile.get_bytes.html)
    pub fn getBytes(self: *MappedFile) *glib.Bytes {
        const cFn = @extern(*const fn (*MappedFile) callconv(.c) *glib.Bytes, .{ .name = "g_mapped_file_get_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_contents](https://docs.gtk.org/glib/method.MappedFile.get_contents.html)
    pub fn getContents(self: *MappedFile) [*:0]u8 {
        const cFn = @extern(*const fn (*MappedFile) callconv(.c) [*:0]u8, .{ .name = "g_mapped_file_get_contents" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/glib/method.MappedFile.get_length.html)
    pub fn getLength(self: *MappedFile) u64 {
        const cFn = @extern(*const fn (*MappedFile) callconv(.c) u64, .{ .name = "g_mapped_file_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.MappedFile.ref.html)
    pub fn ref(self: *MappedFile) *glib.MappedFile {
        const cFn = @extern(*const fn (*MappedFile) callconv(.c) *glib.MappedFile, .{ .name = "g_mapped_file_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.MappedFile.unref.html)
    pub fn unref(self: *MappedFile) void {
        const cFn = @extern(*const fn (*MappedFile) callconv(.c) void, .{ .name = "g_mapped_file_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mapped_file_get_type" });
        return cFn();
    }
};
/// Flags [MarkupCollectType](https://docs.gtk.org/glib/flags.MarkupCollectType.html)
pub const MarkupCollectType = packed struct(u32) {
    string: bool = false,
    strdup: bool = false,
    tristate: bool = false,
    _3: u13 = 0,
    optional: bool = false,
    _: u15 = 0,
    pub const boolean: @This() = @bitCast(@as(u32, 3));
};
/// Error [MarkupError](https://docs.gtk.org/glib/error.MarkupError.html)
pub const MarkupError = enum(u32) {
    bad_utf8 = 0,
    empty = 1,
    parse = 2,
    unknown_element = 3,
    unknown_attribute = 4,
    invalid_content = 5,
    missing_attribute = 6,
};
/// Struct [MarkupParseContext](https://docs.gtk.org/glib/struct.MarkupParseContext.html)
pub const MarkupParseContext = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.MarkupParseContext.new.html)
    pub fn new(_parser: *glib.MarkupParser, _flags: glib.MarkupParseFlags, _user_data: ?*anyopaque, _user_data_dnotify: glib.DestroyNotify) *MarkupParseContext {
        const cFn = @extern(*const fn (*glib.MarkupParser, glib.MarkupParseFlags, ?*anyopaque, glib.DestroyNotify) callconv(.c) *MarkupParseContext, .{ .name = "g_markup_parse_context_new" });
        const ret = cFn(_parser, _flags, @ptrCast(_user_data), _user_data_dnotify);
        return ret;
    }
    /// method [end_parse](https://docs.gtk.org/glib/method.MarkupParseContext.end_parse.html)
    pub fn endParse(self: *MarkupParseContext, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*MarkupParseContext, *?*core.Error) callconv(.c) bool, .{ .name = "g_markup_parse_context_end_parse" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.MarkupParseContext.free.html)
    pub fn free(self: *MarkupParseContext) void {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) void, .{ .name = "g_markup_parse_context_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_element](https://docs.gtk.org/glib/method.MarkupParseContext.get_element.html)
    pub fn getElement(self: *MarkupParseContext) [*:0]u8 {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) [*:0]u8, .{ .name = "g_markup_parse_context_get_element" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_element_stack](https://docs.gtk.org/glib/method.MarkupParseContext.get_element_stack.html)
    pub fn getElementStack(self: *MarkupParseContext) ?*core.SList {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) ?*core.SList, .{ .name = "g_markup_parse_context_get_element_stack" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/glib/method.MarkupParseContext.get_position.html)
    pub fn getPosition(self: *MarkupParseContext) struct {
        ret: void,
        line_number: i32,
        char_number: i32,
    } {
        var line_number_out: i32 = undefined;
        const _line_number = &line_number_out;
        var char_number_out: i32 = undefined;
        const _char_number = &char_number_out;
        const cFn = @extern(*const fn (*MarkupParseContext, ?*i32, ?*i32) callconv(.c) void, .{ .name = "g_markup_parse_context_get_position" });
        const ret = cFn(self, _line_number, _char_number);
        return .{ .ret = ret, .line_number = line_number_out, .char_number = char_number_out };
    }
    /// method [get_user_data](https://docs.gtk.org/glib/method.MarkupParseContext.get_user_data.html)
    pub fn getUserData(self: *MarkupParseContext) ?*anyopaque {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) ?*anyopaque, .{ .name = "g_markup_parse_context_get_user_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse](https://docs.gtk.org/glib/method.MarkupParseContext.parse.html)
    pub fn parse(self: *MarkupParseContext, _text: [*:0]const u8, _text_len: i64, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*MarkupParseContext, [*:0]const u8, i64, *?*core.Error) callconv(.c) bool, .{ .name = "g_markup_parse_context_parse" });
        const ret = cFn(self, _text, _text_len, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [pop](https://docs.gtk.org/glib/method.MarkupParseContext.pop.html)
    pub fn pop(self: *MarkupParseContext) ?*anyopaque {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) ?*anyopaque, .{ .name = "g_markup_parse_context_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push](https://docs.gtk.org/glib/method.MarkupParseContext.push.html)
    pub fn push(self: *MarkupParseContext, _parser: *glib.MarkupParser, _user_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*MarkupParseContext, *glib.MarkupParser, ?*anyopaque) callconv(.c) void, .{ .name = "g_markup_parse_context_push" });
        const ret = cFn(self, _parser, @ptrCast(_user_data));
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.MarkupParseContext.ref.html)
    pub fn ref(self: *MarkupParseContext) *glib.MarkupParseContext {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) *glib.MarkupParseContext, .{ .name = "g_markup_parse_context_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.MarkupParseContext.unref.html)
    pub fn unref(self: *MarkupParseContext) void {
        const cFn = @extern(*const fn (*MarkupParseContext) callconv(.c) void, .{ .name = "g_markup_parse_context_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_markup_parse_context_get_type" });
        return cFn();
    }
};
/// Flags [MarkupParseFlags](https://docs.gtk.org/glib/flags.MarkupParseFlags.html)
pub const MarkupParseFlags = packed struct(u32) {
    do_not_use_this_unsupported_flag: bool = false,
    treat_cdata_as_text: bool = false,
    prefix_error_position: bool = false,
    ignore_qualified: bool = false,
    _: u28 = 0,
};
/// Struct [MarkupParser](https://docs.gtk.org/glib/struct.MarkupParser.html)
pub const MarkupParser = extern struct {
    start_element: ?*const fn (_context: *glib.MarkupParseContext, _element_name: [*:0]const u8, _attribute_names: [*:0]const u8, _attribute_values: [*:0]const u8, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    end_element: ?*const fn (_context: *glib.MarkupParseContext, _element_name: [*:0]const u8, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    text: ?*const fn (_context: *glib.MarkupParseContext, _text: [*:0]const u8, _text_len: u64, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    passthrough: ?*const fn (_context: *glib.MarkupParseContext, _passthrough_text: [*:0]const u8, _text_len: u64, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    @"error": ?*const fn (_context: *glib.MarkupParseContext, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) void,
};
/// Struct [MatchInfo](https://docs.gtk.org/glib/struct.MatchInfo.html)
pub const MatchInfo = opaque {
    /// method [expand_references](https://docs.gtk.org/glib/method.MatchInfo.expand_references.html)
    pub fn expandReferences(self: *MatchInfo, _string_to_expand: [*:0]const u8, _error: *?*core.Error) error{GError}!?[*:0]u8 {
        const cFn = @extern(*const fn (*MatchInfo, [*:0]const u8, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_match_info_expand_references" });
        const ret = cFn(self, _string_to_expand, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [fetch](https://docs.gtk.org/glib/method.MatchInfo.fetch.html)
    pub fn fetch(self: *MatchInfo, _match_num: i32) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MatchInfo, i32) callconv(.c) ?[*:0]u8, .{ .name = "g_match_info_fetch" });
        const ret = cFn(self, _match_num);
        return ret;
    }
    /// method [fetch_all](https://docs.gtk.org/glib/method.MatchInfo.fetch_all.html)
    pub fn fetchAll(self: *MatchInfo) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_match_info_fetch_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [fetch_named](https://docs.gtk.org/glib/method.MatchInfo.fetch_named.html)
    pub fn fetchNamed(self: *MatchInfo, _name: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MatchInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_match_info_fetch_named" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [fetch_named_pos](https://docs.gtk.org/glib/method.MatchInfo.fetch_named_pos.html)
    pub fn fetchNamedPos(self: *MatchInfo, _name: [*:0]const u8) struct {
        ret: bool,
        start_pos: i32,
        end_pos: i32,
    } {
        var start_pos_out: i32 = undefined;
        const _start_pos = &start_pos_out;
        var end_pos_out: i32 = undefined;
        const _end_pos = &end_pos_out;
        const cFn = @extern(*const fn (*MatchInfo, [*:0]const u8, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "g_match_info_fetch_named_pos" });
        const ret = cFn(self, _name, _start_pos, _end_pos);
        return .{ .ret = ret, .start_pos = start_pos_out, .end_pos = end_pos_out };
    }
    /// method [fetch_pos](https://docs.gtk.org/glib/method.MatchInfo.fetch_pos.html)
    pub fn fetchPos(self: *MatchInfo, _match_num: i32) struct {
        ret: bool,
        start_pos: i32,
        end_pos: i32,
    } {
        var start_pos_out: i32 = undefined;
        const _start_pos = &start_pos_out;
        var end_pos_out: i32 = undefined;
        const _end_pos = &end_pos_out;
        const cFn = @extern(*const fn (*MatchInfo, i32, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "g_match_info_fetch_pos" });
        const ret = cFn(self, _match_num, _start_pos, _end_pos);
        return .{ .ret = ret, .start_pos = start_pos_out, .end_pos = end_pos_out };
    }
    /// method [free](https://docs.gtk.org/glib/method.MatchInfo.free.html)
    pub fn free(self: *MatchInfo) void {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) void, .{ .name = "g_match_info_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_match_count](https://docs.gtk.org/glib/method.MatchInfo.get_match_count.html)
    pub fn getMatchCount(self: *MatchInfo) i32 {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) i32, .{ .name = "g_match_info_get_match_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_regex](https://docs.gtk.org/glib/method.MatchInfo.get_regex.html)
    pub fn getRegex(self: *MatchInfo) *glib.Regex {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) *glib.Regex, .{ .name = "g_match_info_get_regex" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/glib/method.MatchInfo.get_string.html)
    pub fn getString(self: *MatchInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) [*:0]u8, .{ .name = "g_match_info_get_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_partial_match](https://docs.gtk.org/glib/method.MatchInfo.is_partial_match.html)
    pub fn isPartialMatch(self: *MatchInfo) bool {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) bool, .{ .name = "g_match_info_is_partial_match" });
        const ret = cFn(self);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/glib/method.MatchInfo.matches.html)
    pub fn matches(self: *MatchInfo) bool {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) bool, .{ .name = "g_match_info_matches" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.MatchInfo.next.html)
    pub fn next(self: *MatchInfo, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*MatchInfo, *?*core.Error) callconv(.c) bool, .{ .name = "g_match_info_next" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.MatchInfo.ref.html)
    pub fn ref(self: *MatchInfo) *glib.MatchInfo {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) *glib.MatchInfo, .{ .name = "g_match_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.MatchInfo.unref.html)
    pub fn unref(self: *MatchInfo) void {
        const cFn = @extern(*const fn (*MatchInfo) callconv(.c) void, .{ .name = "g_match_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_match_info_get_type" });
        return cFn();
    }
};
/// Struct [MemChunk](https://docs.gtk.org/glib/struct.MemChunk.html)
pub const MemChunk = opaque {
    /// method [alloc](https://docs.gtk.org/glib/method.MemChunk.alloc.html)
    pub fn alloc(self: *MemChunk) ?*anyopaque {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) ?*anyopaque, .{ .name = "g_mem_chunk_alloc" });
        const ret = cFn(self);
        return ret;
    }
    /// method [alloc0](https://docs.gtk.org/glib/method.MemChunk.alloc0.html)
    pub fn alloc0(self: *MemChunk) ?*anyopaque {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) ?*anyopaque, .{ .name = "g_mem_chunk_alloc0" });
        const ret = cFn(self);
        return ret;
    }
    /// method [clean](https://docs.gtk.org/glib/method.MemChunk.clean.html)
    pub fn clean(self: *MemChunk) void {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) void, .{ .name = "g_mem_chunk_clean" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.MemChunk.destroy.html)
    pub fn destroy(self: *MemChunk) void {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) void, .{ .name = "g_mem_chunk_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.MemChunk.free.html)
    pub fn free(self: *MemChunk, _mem: ?*anyopaque) void {
        const cFn = @extern(*const fn (*MemChunk, ?*anyopaque) callconv(.c) void, .{ .name = "g_mem_chunk_free" });
        const ret = cFn(self, @ptrCast(_mem));
        return ret;
    }
    /// method [print](https://docs.gtk.org/glib/method.MemChunk.print.html)
    pub fn print(self: *MemChunk) void {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) void, .{ .name = "g_mem_chunk_print" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/glib/method.MemChunk.reset.html)
    pub fn reset(self: *MemChunk) void {
        const cFn = @extern(*const fn (*MemChunk) callconv(.c) void, .{ .name = "g_mem_chunk_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [info](https://docs.gtk.org/glib/type_func.MemChunk.info.html)
    pub fn info() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_mem_chunk_info" });
        const ret = cFn();
        return ret;
    }
};
/// Struct [MemVTable](https://docs.gtk.org/glib/struct.MemVTable.html)
pub const MemVTable = extern struct {
    malloc: ?*const fn (_n_bytes: u64) callconv(.c) *anyopaque,
    realloc: ?*const fn (_mem: *anyopaque, _n_bytes: u64) callconv(.c) *anyopaque,
    free: ?*const fn (_mem: *anyopaque) callconv(.c) void,
    calloc: ?*const fn (_n_blocks: u64, _n_block_bytes: u64) callconv(.c) *anyopaque,
    try_malloc: ?*const fn (_n_bytes: u64) callconv(.c) *anyopaque,
    try_realloc: ?*const fn (_mem: *anyopaque, _n_bytes: u64) callconv(.c) *anyopaque,
};
/// Union [Mutex](https://docs.gtk.org/glib/union.Mutex.html)
pub const Mutex = extern union {
    p: ?*anyopaque,
    i: [2]u32,
    /// method [clear](https://docs.gtk.org/glib/method.Mutex.clear.html)
    pub fn clear(self: *Mutex) void {
        const cFn = @extern(*const fn (*Mutex) callconv(.c) void, .{ .name = "g_mutex_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.Mutex.init.html)
    pub fn init(self: *Mutex) void {
        const cFn = @extern(*const fn (*Mutex) callconv(.c) void, .{ .name = "g_mutex_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lock](https://docs.gtk.org/glib/method.Mutex.lock.html)
    pub fn lock(self: *Mutex) void {
        const cFn = @extern(*const fn (*Mutex) callconv(.c) void, .{ .name = "g_mutex_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [trylock](https://docs.gtk.org/glib/method.Mutex.trylock.html)
    pub fn trylock(self: *Mutex) bool {
        const cFn = @extern(*const fn (*Mutex) callconv(.c) bool, .{ .name = "g_mutex_trylock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unlock](https://docs.gtk.org/glib/method.Mutex.unlock.html)
    pub fn unlock(self: *Mutex) void {
        const cFn = @extern(*const fn (*Mutex) callconv(.c) void, .{ .name = "g_mutex_unlock" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [Node](https://docs.gtk.org/glib/struct.Node.html)
pub const Node = extern struct {
    data: ?*anyopaque,
    next: ?*glib.Node,
    prev: ?*glib.Node,
    parent: ?*glib.Node,
    children: ?*glib.Node,
    /// method [child_index](https://docs.gtk.org/glib/method.Node.child_index.html)
    pub fn childIndex(self: *Node, _data: ?*anyopaque) i32 {
        const cFn = @extern(*const fn (*Node, ?*anyopaque) callconv(.c) i32, .{ .name = "g_node_child_index" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [child_position](https://docs.gtk.org/glib/method.Node.child_position.html)
    pub fn childPosition(self: *Node, _child: *glib.Node) i32 {
        const cFn = @extern(*const fn (*Node, *glib.Node) callconv(.c) i32, .{ .name = "g_node_child_position" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [children_foreach](https://docs.gtk.org/glib/method.Node.children_foreach.html)
    pub fn childrenForeach(self: *Node, _flags: glib.TraverseFlags, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *glib.Node });
        defer closure_func.deinit();
        const _func: glib.NodeForeachFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Node, glib.TraverseFlags, glib.NodeForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_node_children_foreach" });
        const ret = cFn(self, _flags, _func, @ptrCast(_data));
        return ret;
    }
    /// method [depth](https://docs.gtk.org/glib/method.Node.depth.html)
    pub fn depth(self: *Node) u32 {
        const cFn = @extern(*const fn (*Node) callconv(.c) u32, .{ .name = "g_node_depth" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.Node.destroy.html)
    pub fn destroy(self: *Node) void {
        const cFn = @extern(*const fn (*Node) callconv(.c) void, .{ .name = "g_node_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_ancestor](https://docs.gtk.org/glib/method.Node.is_ancestor.html)
    pub fn isAncestor(self: *Node, _descendant: *glib.Node) bool {
        const cFn = @extern(*const fn (*Node, *glib.Node) callconv(.c) bool, .{ .name = "g_node_is_ancestor" });
        const ret = cFn(self, _descendant);
        return ret;
    }
    /// method [max_height](https://docs.gtk.org/glib/method.Node.max_height.html)
    pub fn maxHeight(self: *Node) u32 {
        const cFn = @extern(*const fn (*Node) callconv(.c) u32, .{ .name = "g_node_max_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [n_children](https://docs.gtk.org/glib/method.Node.n_children.html)
    pub fn nChildren(self: *Node) u32 {
        const cFn = @extern(*const fn (*Node) callconv(.c) u32, .{ .name = "g_node_n_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [n_nodes](https://docs.gtk.org/glib/method.Node.n_nodes.html)
    pub fn nNodes(self: *Node, _flags: glib.TraverseFlags) u32 {
        const cFn = @extern(*const fn (*Node, glib.TraverseFlags) callconv(.c) u32, .{ .name = "g_node_n_nodes" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [reverse_children](https://docs.gtk.org/glib/method.Node.reverse_children.html)
    pub fn reverseChildren(self: *Node) void {
        const cFn = @extern(*const fn (*Node) callconv(.c) void, .{ .name = "g_node_reverse_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [traverse](https://docs.gtk.org/glib/method.Node.traverse.html)
    pub fn traverse(self: *Node, _order: glib.TraverseType, _flags: glib.TraverseFlags, _max_depth: i32, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, *glib.Node });
        defer closure_func.deinit();
        const _func: glib.NodeTraverseFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Node, glib.TraverseType, glib.TraverseFlags, i32, glib.NodeTraverseFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_node_traverse" });
        const ret = cFn(self, _order, _flags, _max_depth, _func, @ptrCast(_data));
        return ret;
    }
    /// method [unlink](https://docs.gtk.org/glib/method.Node.unlink.html)
    pub fn unlink(self: *Node) void {
        const cFn = @extern(*const fn (*Node) callconv(.c) void, .{ .name = "g_node_unlink" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [pop_allocator](https://docs.gtk.org/glib/type_func.Node.pop_allocator.html)
    pub fn popAllocator() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_node_pop_allocator" });
        const ret = cFn();
        return ret;
    }
    /// type func [push_allocator](https://docs.gtk.org/glib/type_func.Node.push_allocator.html)
    pub fn pushAllocator(_allocator: *glib.Allocator) void {
        const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_node_push_allocator" });
        const ret = cFn(_allocator);
        return ret;
    }
};
/// callback [NodeForeachFunc](https://docs.gtk.org/glib/callback.NodeForeachFunc.html)
pub const NodeForeachFunc = *const fn (_node: *glib.Node, _data: ?*anyopaque) callconv(.c) void;
/// callback [NodeTraverseFunc](https://docs.gtk.org/glib/callback.NodeTraverseFunc.html)
pub const NodeTraverseFunc = *const fn (_node: *glib.Node, _data: ?*anyopaque) callconv(.c) bool;
/// Enum [NormalizeMode](https://docs.gtk.org/glib/enum.NormalizeMode.html)
pub const NormalizeMode = enum(u32) {
    default = 0,
    default_compose = 1,
    all = 2,
    all_compose = 3,
    pub const nfd: @This() = @enumFromInt(0);
    pub const nfc: @This() = @enumFromInt(1);
    pub const nfkd: @This() = @enumFromInt(2);
    pub const nfkc: @This() = @enumFromInt(3);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_normalize_mode_get_type" });
        return cFn();
    }
};
/// Error [NumberParserError](https://docs.gtk.org/glib/error.NumberParserError.html)
pub const NumberParserError = enum(u32) {
    invalid = 0,
    out_of_bounds = 1,
};
/// const [OPTION_REMAINING](https://docs.gtk.org/glib/const.OPTION_REMAINING.html)
pub const OPTION_REMAINING = "";
/// Struct [Once](https://docs.gtk.org/glib/struct.Once.html)
pub const Once = extern struct {
    status: glib.OnceStatus,
    retval: ?*anyopaque,
    /// type func [init_enter](https://docs.gtk.org/glib/type_func.Once.init_enter.html)
    pub fn initEnter(_location: *anyopaque) bool {
        const cFn = @extern(*const fn (*anyopaque) callconv(.c) bool, .{ .name = "g_once_init_enter" });
        const ret = cFn(@ptrCast(_location));
        return ret;
    }
    /// type func [init_enter_impl](https://docs.gtk.org/glib/type_func.Once.init_enter_impl.html)
    pub fn initEnterImpl(_location: *u64) bool {
        const cFn = @extern(*const fn (*u64) callconv(.c) bool, .{ .name = "g_once_init_enter_impl" });
        const ret = cFn(_location);
        return ret;
    }
    /// type func [init_enter_pointer](https://docs.gtk.org/glib/type_func.Once.init_enter_pointer.html)
    pub fn initEnterPointer(_location: *anyopaque) bool {
        const cFn = @extern(*const fn (*anyopaque) callconv(.c) bool, .{ .name = "g_once_init_enter_pointer" });
        const ret = cFn(@ptrCast(_location));
        return ret;
    }
    /// type func [init_leave](https://docs.gtk.org/glib/type_func.Once.init_leave.html)
    pub fn initLeave(_location: *anyopaque, _result: u64) void {
        const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) void, .{ .name = "g_once_init_leave" });
        const ret = cFn(@ptrCast(_location), _result);
        return ret;
    }
    /// type func [init_leave_pointer](https://docs.gtk.org/glib/type_func.Once.init_leave_pointer.html)
    pub fn initLeavePointer(_location: *anyopaque, _result: ?*anyopaque) void {
        const cFn = @extern(*const fn (*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_once_init_leave_pointer" });
        const ret = cFn(@ptrCast(_location), @ptrCast(_result));
        return ret;
    }
};
/// Enum [OnceStatus](https://docs.gtk.org/glib/enum.OnceStatus.html)
pub const OnceStatus = enum(u32) {
    notcalled = 0,
    progress = 1,
    ready = 2,
};
/// Enum [OptionArg](https://docs.gtk.org/glib/enum.OptionArg.html)
pub const OptionArg = enum(u32) {
    none = 0,
    string = 1,
    int = 2,
    callback = 3,
    filename = 4,
    string_array = 5,
    filename_array = 6,
    double = 7,
    int64 = 8,
};
/// callback [OptionArgFunc](https://docs.gtk.org/glib/callback.OptionArgFunc.html)
pub const OptionArgFunc = *const fn (_option_name: [*:0]const u8, _value: [*:0]const u8, _data: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool;
/// Struct [OptionContext](https://docs.gtk.org/glib/struct.OptionContext.html)
pub const OptionContext = opaque {
    /// method [add_group](https://docs.gtk.org/glib/method.OptionContext.add_group.html)
    pub fn addGroup(self: *OptionContext, _group: *glib.OptionGroup) void {
        const cFn = @extern(*const fn (*OptionContext, *glib.OptionGroup) callconv(.c) void, .{ .name = "g_option_context_add_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// method [add_main_entries](https://docs.gtk.org/glib/method.OptionContext.add_main_entries.html)
    pub fn addMainEntries(self: *OptionContext, _entries: [*]glib.OptionEntry, _translation_domain: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*OptionContext, [*]glib.OptionEntry, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_option_context_add_main_entries" });
        const ret = cFn(self, _entries, _translation_domain);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.OptionContext.free.html)
    pub fn free(self: *OptionContext) void {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) void, .{ .name = "g_option_context_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/glib/method.OptionContext.get_description.html)
    pub fn getDescription(self: *OptionContext) [*:0]u8 {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) [*:0]u8, .{ .name = "g_option_context_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_help](https://docs.gtk.org/glib/method.OptionContext.get_help.html)
    pub fn getHelp(self: *OptionContext, _main_help: bool, _group: ?*glib.OptionGroup) [*:0]u8 {
        const cFn = @extern(*const fn (*OptionContext, bool, ?*glib.OptionGroup) callconv(.c) [*:0]u8, .{ .name = "g_option_context_get_help" });
        const ret = cFn(self, _main_help, _group);
        return ret;
    }
    /// method [get_help_enabled](https://docs.gtk.org/glib/method.OptionContext.get_help_enabled.html)
    pub fn getHelpEnabled(self: *OptionContext) bool {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) bool, .{ .name = "g_option_context_get_help_enabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ignore_unknown_options](https://docs.gtk.org/glib/method.OptionContext.get_ignore_unknown_options.html)
    pub fn getIgnoreUnknownOptions(self: *OptionContext) bool {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) bool, .{ .name = "g_option_context_get_ignore_unknown_options" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_main_group](https://docs.gtk.org/glib/method.OptionContext.get_main_group.html)
    pub fn getMainGroup(self: *OptionContext) *glib.OptionGroup {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) *glib.OptionGroup, .{ .name = "g_option_context_get_main_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_strict_posix](https://docs.gtk.org/glib/method.OptionContext.get_strict_posix.html)
    pub fn getStrictPosix(self: *OptionContext) bool {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) bool, .{ .name = "g_option_context_get_strict_posix" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_summary](https://docs.gtk.org/glib/method.OptionContext.get_summary.html)
    pub fn getSummary(self: *OptionContext) [*:0]u8 {
        const cFn = @extern(*const fn (*OptionContext) callconv(.c) [*:0]u8, .{ .name = "g_option_context_get_summary" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse](https://docs.gtk.org/glib/method.OptionContext.parse.html)
    pub fn parse(self: *OptionContext, _argvs: ?[][*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const _argc: i32 = if (_argvs) |some| @intCast(some.len) else 0;
        const _argv = if (_argvs) |some| some.ptr else null;
        const cFn = @extern(*const fn (*OptionContext, ?*i32, ?*[*][*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_option_context_parse" });
        const ret = cFn(self, _argc, _argv, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [parse_strv](https://docs.gtk.org/glib/method.OptionContext.parse_strv.html)
    pub fn parseStrv(self: *OptionContext, _arguments: ?*[*][*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OptionContext, ?*[*][*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_option_context_parse_strv" });
        const ret = cFn(self, _arguments, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_description](https://docs.gtk.org/glib/method.OptionContext.set_description.html)
    pub fn setDescription(self: *OptionContext, _description: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*OptionContext, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_option_context_set_description" });
        const ret = cFn(self, _description);
        return ret;
    }
    /// method [set_help_enabled](https://docs.gtk.org/glib/method.OptionContext.set_help_enabled.html)
    pub fn setHelpEnabled(self: *OptionContext, _help_enabled: bool) void {
        const cFn = @extern(*const fn (*OptionContext, bool) callconv(.c) void, .{ .name = "g_option_context_set_help_enabled" });
        const ret = cFn(self, _help_enabled);
        return ret;
    }
    /// method [set_ignore_unknown_options](https://docs.gtk.org/glib/method.OptionContext.set_ignore_unknown_options.html)
    pub fn setIgnoreUnknownOptions(self: *OptionContext, _ignore_unknown: bool) void {
        const cFn = @extern(*const fn (*OptionContext, bool) callconv(.c) void, .{ .name = "g_option_context_set_ignore_unknown_options" });
        const ret = cFn(self, _ignore_unknown);
        return ret;
    }
    /// method [set_main_group](https://docs.gtk.org/glib/method.OptionContext.set_main_group.html)
    pub fn setMainGroup(self: *OptionContext, _group: *glib.OptionGroup) void {
        const cFn = @extern(*const fn (*OptionContext, *glib.OptionGroup) callconv(.c) void, .{ .name = "g_option_context_set_main_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// method [set_strict_posix](https://docs.gtk.org/glib/method.OptionContext.set_strict_posix.html)
    pub fn setStrictPosix(self: *OptionContext, _strict_posix: bool) void {
        const cFn = @extern(*const fn (*OptionContext, bool) callconv(.c) void, .{ .name = "g_option_context_set_strict_posix" });
        const ret = cFn(self, _strict_posix);
        return ret;
    }
    /// method [set_summary](https://docs.gtk.org/glib/method.OptionContext.set_summary.html)
    pub fn setSummary(self: *OptionContext, _summary: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*OptionContext, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_option_context_set_summary" });
        const ret = cFn(self, _summary);
        return ret;
    }
    /// method [set_translate_func](https://docs.gtk.org/glib/method.OptionContext.set_translate_func.html)
    pub fn setTranslateFunc(self: *OptionContext, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ [*:0]u8, [*:0]const u8 });
        const _func: ?glib.TranslateFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*OptionContext, ?glib.TranslateFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_option_context_set_translate_func" });
        const ret = cFn(self, _func, @ptrCast(_data), _destroy_notify);
        return ret;
    }
    /// method [set_translation_domain](https://docs.gtk.org/glib/method.OptionContext.set_translation_domain.html)
    pub fn setTranslationDomain(self: *OptionContext, _domain: [*:0]const u8) void {
        const cFn = @extern(*const fn (*OptionContext, [*:0]const u8) callconv(.c) void, .{ .name = "g_option_context_set_translation_domain" });
        const ret = cFn(self, _domain);
        return ret;
    }
};
/// Struct [OptionEntry](https://docs.gtk.org/glib/struct.OptionEntry.html)
pub const OptionEntry = extern struct {
    long_name: ?[*:0]const u8,
    short_name: i8,
    flags: i32,
    arg: glib.OptionArg,
    arg_data: ?*anyopaque,
    description: ?[*:0]const u8,
    arg_description: ?[*:0]const u8,
};
/// Error [OptionError](https://docs.gtk.org/glib/error.OptionError.html)
pub const OptionError = enum(u32) {
    unknown_option = 0,
    bad_value = 1,
    failed = 2,
};
/// callback [OptionErrorFunc](https://docs.gtk.org/glib/callback.OptionErrorFunc.html)
pub const OptionErrorFunc = *const fn (_context: *glib.OptionContext, _group: *glib.OptionGroup, _data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void;
/// Flags [OptionFlags](https://docs.gtk.org/glib/flags.OptionFlags.html)
pub const OptionFlags = packed struct(u32) {
    hidden: bool = false,
    in_main: bool = false,
    reverse: bool = false,
    no_arg: bool = false,
    filename: bool = false,
    optional_arg: bool = false,
    @"noalias": bool = false,
    _: u25 = 0,
};
/// Struct [OptionGroup](https://docs.gtk.org/glib/struct.OptionGroup.html)
pub const OptionGroup = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.OptionGroup.new.html)
    pub fn new(_name: [*:0]const u8, _description: [*:0]const u8, _help_description: [*:0]const u8, _user_data: ?*anyopaque, _destroy: ?glib.DestroyNotify) *OptionGroup {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, [*:0]const u8, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) *OptionGroup, .{ .name = "g_option_group_new" });
        const ret = cFn(_name, _description, _help_description, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [add_entries](https://docs.gtk.org/glib/method.OptionGroup.add_entries.html)
    pub fn addEntries(self: *OptionGroup, _entries: [*]glib.OptionEntry) void {
        const cFn = @extern(*const fn (*OptionGroup, [*]glib.OptionEntry) callconv(.c) void, .{ .name = "g_option_group_add_entries" });
        const ret = cFn(self, _entries);
        return ret;
    }
    /// Deprecated:
    /// method [free](https://docs.gtk.org/glib/method.OptionGroup.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *OptionGroup) void {
            const cFn = @extern(*const fn (*OptionGroup) callconv(.c) void, .{ .name = "g_option_group_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
    /// method [ref](https://docs.gtk.org/glib/method.OptionGroup.ref.html)
    pub fn ref(self: *OptionGroup) *glib.OptionGroup {
        const cFn = @extern(*const fn (*OptionGroup) callconv(.c) *glib.OptionGroup, .{ .name = "g_option_group_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_translate_func](https://docs.gtk.org/glib/method.OptionGroup.set_translate_func.html)
    pub fn setTranslateFunc(self: *OptionGroup, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ [*:0]u8, [*:0]const u8 });
        const _func: ?glib.TranslateFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*OptionGroup, ?glib.TranslateFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_option_group_set_translate_func" });
        const ret = cFn(self, _func, @ptrCast(_data), _destroy_notify);
        return ret;
    }
    /// method [set_translation_domain](https://docs.gtk.org/glib/method.OptionGroup.set_translation_domain.html)
    pub fn setTranslationDomain(self: *OptionGroup, _domain: [*:0]const u8) void {
        const cFn = @extern(*const fn (*OptionGroup, [*:0]const u8) callconv(.c) void, .{ .name = "g_option_group_set_translation_domain" });
        const ret = cFn(self, _domain);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.OptionGroup.unref.html)
    pub fn unref(self: *OptionGroup) void {
        const cFn = @extern(*const fn (*OptionGroup) callconv(.c) void, .{ .name = "g_option_group_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_option_group_get_type" });
        return cFn();
    }
};
/// callback [OptionParseFunc](https://docs.gtk.org/glib/callback.OptionParseFunc.html)
pub const OptionParseFunc = *const fn (_context: *glib.OptionContext, _group: *glib.OptionGroup, _data: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool;
/// const [PDP_ENDIAN](https://docs.gtk.org/glib/const.PDP_ENDIAN.html)
pub const PDP_ENDIAN = 3412;
/// const [PI](https://docs.gtk.org/glib/const.PI.html)
pub const PI = 3.141593e0;
/// const [PID_FORMAT](https://docs.gtk.org/glib/const.PID_FORMAT.html)
pub const PID_FORMAT = "i";
/// const [PI_2](https://docs.gtk.org/glib/const.PI_2.html)
pub const PI_2 = 1.570796e0;
/// const [PI_4](https://docs.gtk.org/glib/const.PI_4.html)
pub const PI_4 = 7.85398e-1;
/// const [POLLFD_FORMAT](https://docs.gtk.org/glib/const.POLLFD_FORMAT.html)
pub const POLLFD_FORMAT = "%d";
/// const [PRIORITY_DEFAULT](https://docs.gtk.org/glib/const.PRIORITY_DEFAULT.html)
pub const PRIORITY_DEFAULT = 0;
/// const [PRIORITY_DEFAULT_IDLE](https://docs.gtk.org/glib/const.PRIORITY_DEFAULT_IDLE.html)
pub const PRIORITY_DEFAULT_IDLE = 200;
/// const [PRIORITY_HIGH](https://docs.gtk.org/glib/const.PRIORITY_HIGH.html)
pub const PRIORITY_HIGH = -100;
/// const [PRIORITY_HIGH_IDLE](https://docs.gtk.org/glib/const.PRIORITY_HIGH_IDLE.html)
pub const PRIORITY_HIGH_IDLE = 100;
/// const [PRIORITY_LOW](https://docs.gtk.org/glib/const.PRIORITY_LOW.html)
pub const PRIORITY_LOW = 300;
/// Struct [PathBuf](https://docs.gtk.org/glib/struct.PathBuf.html)
pub const PathBuf = extern struct {
    dummy: [8]?*anyopaque,
    /// method [clear](https://docs.gtk.org/glib/method.PathBuf.clear.html)
    pub fn clear(self: *PathBuf) void {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) void, .{ .name = "g_path_buf_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [clear_to_path](https://docs.gtk.org/glib/method.PathBuf.clear_to_path.html)
    pub fn clearToPath(self: *PathBuf) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) ?[*:0]u8, .{ .name = "g_path_buf_clear_to_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.PathBuf.free.html)
    pub fn free(self: *PathBuf) void {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) void, .{ .name = "g_path_buf_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free_to_path](https://docs.gtk.org/glib/method.PathBuf.free_to_path.html)
    pub fn freeToPath(self: *PathBuf) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) ?[*:0]u8, .{ .name = "g_path_buf_free_to_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.PathBuf.init.html)
    pub fn init(self: *PathBuf) *glib.PathBuf {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) *glib.PathBuf, .{ .name = "g_path_buf_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init_from_path](https://docs.gtk.org/glib/method.PathBuf.init_from_path.html)
    pub fn initFromPath(self: *PathBuf, _path: ?[*:0]const u8) *glib.PathBuf {
        const cFn = @extern(*const fn (*PathBuf, ?[*:0]const u8) callconv(.c) *glib.PathBuf, .{ .name = "g_path_buf_init_from_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [pop](https://docs.gtk.org/glib/method.PathBuf.pop.html)
    pub fn pop(self: *PathBuf) bool {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) bool, .{ .name = "g_path_buf_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push](https://docs.gtk.org/glib/method.PathBuf.push.html)
    pub fn push(self: *PathBuf, _path: [*:0]const u8) *glib.PathBuf {
        const cFn = @extern(*const fn (*PathBuf, [*:0]const u8) callconv(.c) *glib.PathBuf, .{ .name = "g_path_buf_push" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [set_extension](https://docs.gtk.org/glib/method.PathBuf.set_extension.html)
    pub fn setExtension(self: *PathBuf, _extension: ?[*:0]const u8) bool {
        const cFn = @extern(*const fn (*PathBuf, ?[*:0]const u8) callconv(.c) bool, .{ .name = "g_path_buf_set_extension" });
        const ret = cFn(self, _extension);
        return ret;
    }
    /// method [set_filename](https://docs.gtk.org/glib/method.PathBuf.set_filename.html)
    pub fn setFilename(self: *PathBuf, _file_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PathBuf, [*:0]const u8) callconv(.c) bool, .{ .name = "g_path_buf_set_filename" });
        const ret = cFn(self, _file_name);
        return ret;
    }
    /// method [to_path](https://docs.gtk.org/glib/method.PathBuf.to_path.html)
    pub fn toPath(self: *PathBuf) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PathBuf) callconv(.c) ?[*:0]u8, .{ .name = "g_path_buf_to_path" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [equal](https://docs.gtk.org/glib/type_func.PathBuf.equal.html)
    pub fn equal(_v1: *anyopaque, _v2: *anyopaque) bool {
        const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_path_buf_equal" });
        const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
        return ret;
    }
};
/// Struct [PatternSpec](https://docs.gtk.org/glib/struct.PatternSpec.html)
pub const PatternSpec = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.PatternSpec.new.html)
    pub fn new(_pattern: [*:0]const u8) *PatternSpec {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *PatternSpec, .{ .name = "g_pattern_spec_new" });
        const ret = cFn(_pattern);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.PatternSpec.copy.html)
    pub fn copy(self: *PatternSpec) *glib.PatternSpec {
        const cFn = @extern(*const fn (*PatternSpec) callconv(.c) *glib.PatternSpec, .{ .name = "g_pattern_spec_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/glib/method.PatternSpec.equal.html)
    pub fn equal(self: *PatternSpec, _pspec2: *glib.PatternSpec) bool {
        const cFn = @extern(*const fn (*PatternSpec, *glib.PatternSpec) callconv(.c) bool, .{ .name = "g_pattern_spec_equal" });
        const ret = cFn(self, _pspec2);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.PatternSpec.free.html)
    pub fn free(self: *PatternSpec) void {
        const cFn = @extern(*const fn (*PatternSpec) callconv(.c) void, .{ .name = "g_pattern_spec_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [match](https://docs.gtk.org/glib/method.PatternSpec.match.html)
    pub fn match(self: *PatternSpec, _string_length: u64, _string: [*:0]const u8, _string_reversed: ?[*:0]const u8) bool {
        const cFn = @extern(*const fn (*PatternSpec, u64, [*:0]const u8, ?[*:0]const u8) callconv(.c) bool, .{ .name = "g_pattern_spec_match" });
        const ret = cFn(self, _string_length, _string, _string_reversed);
        return ret;
    }
    /// method [match_string](https://docs.gtk.org/glib/method.PatternSpec.match_string.html)
    pub fn matchString(self: *PatternSpec, _string: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PatternSpec, [*:0]const u8) callconv(.c) bool, .{ .name = "g_pattern_spec_match_string" });
        const ret = cFn(self, _string);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pattern_spec_get_type" });
        return cFn();
    }
};
/// Struct [PollFD](https://docs.gtk.org/glib/struct.PollFD.html)
pub const PollFD = extern struct {
    fd: i32,
    events: u16,
    revents: u16,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pollfd_get_type" });
        return cFn();
    }
};
/// callback [PollFunc](https://docs.gtk.org/glib/callback.PollFunc.html)
pub const PollFunc = *const fn (_ufds: *glib.PollFD, _nfsd: u32, _timeout_: i32) callconv(.c) i32;
/// callback [PrintFunc](https://docs.gtk.org/glib/callback.PrintFunc.html)
pub const PrintFunc = *const fn (_string: [*:0]const u8) callconv(.c) void;
pub const Private = extern struct {
    p: ?*anyopaque,
    notify: ?*const fn (_data: ?*anyopaque) callconv(.c) void,
    future: [2]?*anyopaque,
    /// method [get](https://docs.gtk.org/glib/method.Private.get.html)
    pub fn get(self: *Private) ?*anyopaque {
        const cFn = @extern(*const fn (*Private) callconv(.c) ?*anyopaque, .{ .name = "g_private_get" });
        const ret = cFn(self);
        return ret;
    }
    /// method [replace](https://docs.gtk.org/glib/method.Private.replace.html)
    pub fn replace(self: *Private, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Private, ?*anyopaque) callconv(.c) void, .{ .name = "g_private_replace" });
        const ret = cFn(self, @ptrCast(_value));
        return ret;
    }
    /// method [set](https://docs.gtk.org/glib/method.Private.set.html)
    pub fn set(self: *Private, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Private, ?*anyopaque) callconv(.c) void, .{ .name = "g_private_set" });
        const ret = cFn(self, @ptrCast(_value));
        return ret;
    }
};
/// Struct [PtrArray](https://docs.gtk.org/glib/struct.PtrArray.html)
pub const PtrArray = extern struct {
    pdata: ?*anyopaque,
    len: u32,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_ptr_array_get_type" });
        return cFn();
    }
};
/// Struct [Queue](https://docs.gtk.org/glib/struct.Queue.html)
pub const Queue = extern struct {
    head: ?*core.List,
    tail: ?*core.List,
    length: u32,
    /// method [clear](https://docs.gtk.org/glib/method.Queue.clear.html)
    pub fn clear(self: *Queue) void {
        const cFn = @extern(*const fn (*Queue) callconv(.c) void, .{ .name = "g_queue_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [clear_full](https://docs.gtk.org/glib/method.Queue.clear_full.html)
    pub fn clearFull(self: *Queue, _free_func: ?glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*Queue, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_queue_clear_full" });
        const ret = cFn(self, _free_func);
        return ret;
    }
    /// method [foreach](https://docs.gtk.org/glib/method.Queue.foreach.html)
    pub fn foreach(self: *Queue, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.Func = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Queue, glib.Func, ?*anyopaque) callconv(.c) void, .{ .name = "g_queue_foreach" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Queue.free.html)
    pub fn free(self: *Queue) void {
        const cFn = @extern(*const fn (*Queue) callconv(.c) void, .{ .name = "g_queue_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free_full](https://docs.gtk.org/glib/method.Queue.free_full.html)
    pub fn freeFull(self: *Queue, _free_func: glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*Queue, glib.DestroyNotify) callconv(.c) void, .{ .name = "g_queue_free_full" });
        const ret = cFn(self, _free_func);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/glib/method.Queue.get_length.html)
    pub fn getLength(self: *Queue) u32 {
        const cFn = @extern(*const fn (*Queue) callconv(.c) u32, .{ .name = "g_queue_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [index](https://docs.gtk.org/glib/method.Queue.index.html)
    pub fn index(self: *Queue, _data: ?*anyopaque) i32 {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque) callconv(.c) i32, .{ .name = "g_queue_index" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.Queue.init.html)
    pub fn init(self: *Queue) void {
        const cFn = @extern(*const fn (*Queue) callconv(.c) void, .{ .name = "g_queue_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_sorted](https://docs.gtk.org/glib/method.Queue.insert_sorted.html)
    pub fn insertSorted(self: *Queue, _data: ?*anyopaque, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.CompareDataFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Queue, ?*anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_queue_insert_sorted" });
        const ret = cFn(self, @ptrCast(_data), _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [is_empty](https://docs.gtk.org/glib/method.Queue.is_empty.html)
    pub fn isEmpty(self: *Queue) bool {
        const cFn = @extern(*const fn (*Queue) callconv(.c) bool, .{ .name = "g_queue_is_empty" });
        const ret = cFn(self);
        return ret;
    }
    /// method [peek_head](https://docs.gtk.org/glib/method.Queue.peek_head.html)
    pub fn peekHead(self: *Queue) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue) callconv(.c) ?*anyopaque, .{ .name = "g_queue_peek_head" });
        const ret = cFn(self);
        return ret;
    }
    /// method [peek_nth](https://docs.gtk.org/glib/method.Queue.peek_nth.html)
    pub fn peekNth(self: *Queue, _n: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue, u32) callconv(.c) ?*anyopaque, .{ .name = "g_queue_peek_nth" });
        const ret = cFn(self, _n);
        return ret;
    }
    /// method [peek_tail](https://docs.gtk.org/glib/method.Queue.peek_tail.html)
    pub fn peekTail(self: *Queue) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue) callconv(.c) ?*anyopaque, .{ .name = "g_queue_peek_tail" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pop_head](https://docs.gtk.org/glib/method.Queue.pop_head.html)
    pub fn popHead(self: *Queue) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue) callconv(.c) ?*anyopaque, .{ .name = "g_queue_pop_head" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pop_nth](https://docs.gtk.org/glib/method.Queue.pop_nth.html)
    pub fn popNth(self: *Queue, _n: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue, u32) callconv(.c) ?*anyopaque, .{ .name = "g_queue_pop_nth" });
        const ret = cFn(self, _n);
        return ret;
    }
    /// method [pop_tail](https://docs.gtk.org/glib/method.Queue.pop_tail.html)
    pub fn popTail(self: *Queue) ?*anyopaque {
        const cFn = @extern(*const fn (*Queue) callconv(.c) ?*anyopaque, .{ .name = "g_queue_pop_tail" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push_head](https://docs.gtk.org/glib/method.Queue.push_head.html)
    pub fn pushHead(self: *Queue, _data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque) callconv(.c) void, .{ .name = "g_queue_push_head" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [push_nth](https://docs.gtk.org/glib/method.Queue.push_nth.html)
    pub fn pushNth(self: *Queue, _data: ?*anyopaque, _n: i32) void {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque, i32) callconv(.c) void, .{ .name = "g_queue_push_nth" });
        const ret = cFn(self, @ptrCast(_data), _n);
        return ret;
    }
    /// method [push_tail](https://docs.gtk.org/glib/method.Queue.push_tail.html)
    pub fn pushTail(self: *Queue, _data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque) callconv(.c) void, .{ .name = "g_queue_push_tail" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [remove](https://docs.gtk.org/glib/method.Queue.remove.html)
    pub fn remove(self: *Queue, _data: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque) callconv(.c) bool, .{ .name = "g_queue_remove" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/glib/method.Queue.remove_all.html)
    pub fn removeAll(self: *Queue, _data: ?*anyopaque) u32 {
        const cFn = @extern(*const fn (*Queue, ?*anyopaque) callconv(.c) u32, .{ .name = "g_queue_remove_all" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [reverse](https://docs.gtk.org/glib/method.Queue.reverse.html)
    pub fn reverse(self: *Queue) void {
        const cFn = @extern(*const fn (*Queue) callconv(.c) void, .{ .name = "g_queue_reverse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [sort](https://docs.gtk.org/glib/method.Queue.sort.html)
    pub fn sort(self: *Queue, compare_func: anytype, compare_func_args: anytype) void {
        var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_compare_func.deinit();
        const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
        const cFn = @extern(*const fn (*Queue, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_queue_sort" });
        const ret = cFn(self, _compare_func, @ptrCast(_user_data));
        return ret;
    }
};
/// const [REF_COUNT_INIT](https://docs.gtk.org/glib/const.REF_COUNT_INIT.html)
pub const REF_COUNT_INIT = -1;
/// Struct [RWLock](https://docs.gtk.org/glib/struct.RWLock.html)
pub const RWLock = extern struct {
    p: ?*anyopaque,
    i: [2]u32,
    /// method [clear](https://docs.gtk.org/glib/method.RWLock.clear.html)
    pub fn clear(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.RWLock.init.html)
    pub fn init(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reader_lock](https://docs.gtk.org/glib/method.RWLock.reader_lock.html)
    pub fn readerLock(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_reader_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reader_trylock](https://docs.gtk.org/glib/method.RWLock.reader_trylock.html)
    pub fn readerTrylock(self: *RWLock) bool {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) bool, .{ .name = "g_rw_lock_reader_trylock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reader_unlock](https://docs.gtk.org/glib/method.RWLock.reader_unlock.html)
    pub fn readerUnlock(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_reader_unlock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [writer_lock](https://docs.gtk.org/glib/method.RWLock.writer_lock.html)
    pub fn writerLock(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_writer_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [writer_trylock](https://docs.gtk.org/glib/method.RWLock.writer_trylock.html)
    pub fn writerTrylock(self: *RWLock) bool {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) bool, .{ .name = "g_rw_lock_writer_trylock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [writer_unlock](https://docs.gtk.org/glib/method.RWLock.writer_unlock.html)
    pub fn writerUnlock(self: *RWLock) void {
        const cFn = @extern(*const fn (*RWLock) callconv(.c) void, .{ .name = "g_rw_lock_writer_unlock" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [Rand](https://docs.gtk.org/glib/struct.Rand.html)
pub const Rand = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.Rand.new.html)
    pub fn new() *Rand {
        const cFn = @extern(*const fn () callconv(.c) *Rand, .{ .name = "g_rand_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_seed](https://docs.gtk.org/glib/ctor.Rand.new_with_seed.html)
    pub fn newWithSeed(_seed: u32) *Rand {
        const cFn = @extern(*const fn (u32) callconv(.c) *Rand, .{ .name = "g_rand_new_with_seed" });
        const ret = cFn(_seed);
        return ret;
    }
    /// ctor [new_with_seed_array](https://docs.gtk.org/glib/ctor.Rand.new_with_seed_array.html)
    pub fn newWithSeedArray(_seed: *u32, _seed_length: u32) *Rand {
        const cFn = @extern(*const fn (*u32, u32) callconv(.c) *Rand, .{ .name = "g_rand_new_with_seed_array" });
        const ret = cFn(_seed, _seed_length);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.Rand.copy.html)
    pub fn copy(self: *Rand) *glib.Rand {
        const cFn = @extern(*const fn (*Rand) callconv(.c) *glib.Rand, .{ .name = "g_rand_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [double](https://docs.gtk.org/glib/method.Rand.double.html)
    pub fn double(self: *Rand) f64 {
        const cFn = @extern(*const fn (*Rand) callconv(.c) f64, .{ .name = "g_rand_double" });
        const ret = cFn(self);
        return ret;
    }
    /// method [double_range](https://docs.gtk.org/glib/method.Rand.double_range.html)
    pub fn doubleRange(self: *Rand, _begin: f64, _end: f64) f64 {
        const cFn = @extern(*const fn (*Rand, f64, f64) callconv(.c) f64, .{ .name = "g_rand_double_range" });
        const ret = cFn(self, _begin, _end);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Rand.free.html)
    pub fn free(self: *Rand) void {
        const cFn = @extern(*const fn (*Rand) callconv(.c) void, .{ .name = "g_rand_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [int](https://docs.gtk.org/glib/method.Rand.int.html)
    pub fn int(self: *Rand) u32 {
        const cFn = @extern(*const fn (*Rand) callconv(.c) u32, .{ .name = "g_rand_int" });
        const ret = cFn(self);
        return ret;
    }
    /// method [int_range](https://docs.gtk.org/glib/method.Rand.int_range.html)
    pub fn intRange(self: *Rand, _begin: i32, _end: i32) i32 {
        const cFn = @extern(*const fn (*Rand, i32, i32) callconv(.c) i32, .{ .name = "g_rand_int_range" });
        const ret = cFn(self, _begin, _end);
        return ret;
    }
    /// method [set_seed](https://docs.gtk.org/glib/method.Rand.set_seed.html)
    pub fn setSeed(self: *Rand, _seed: u32) void {
        const cFn = @extern(*const fn (*Rand, u32) callconv(.c) void, .{ .name = "g_rand_set_seed" });
        const ret = cFn(self, _seed);
        return ret;
    }
    /// method [set_seed_array](https://docs.gtk.org/glib/method.Rand.set_seed_array.html)
    pub fn setSeedArray(self: *Rand, _seed: *u32, _seed_length: u32) void {
        const cFn = @extern(*const fn (*Rand, *u32, u32) callconv(.c) void, .{ .name = "g_rand_set_seed_array" });
        const ret = cFn(self, _seed, _seed_length);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_rand_get_type" });
        return cFn();
    }
};
/// Struct [RecMutex](https://docs.gtk.org/glib/struct.RecMutex.html)
pub const RecMutex = extern struct {
    p: ?*anyopaque,
    i: [2]u32,
    /// method [clear](https://docs.gtk.org/glib/method.RecMutex.clear.html)
    pub fn clear(self: *RecMutex) void {
        const cFn = @extern(*const fn (*RecMutex) callconv(.c) void, .{ .name = "g_rec_mutex_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/glib/method.RecMutex.init.html)
    pub fn init(self: *RecMutex) void {
        const cFn = @extern(*const fn (*RecMutex) callconv(.c) void, .{ .name = "g_rec_mutex_init" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lock](https://docs.gtk.org/glib/method.RecMutex.lock.html)
    pub fn lock(self: *RecMutex) void {
        const cFn = @extern(*const fn (*RecMutex) callconv(.c) void, .{ .name = "g_rec_mutex_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [trylock](https://docs.gtk.org/glib/method.RecMutex.trylock.html)
    pub fn trylock(self: *RecMutex) bool {
        const cFn = @extern(*const fn (*RecMutex) callconv(.c) bool, .{ .name = "g_rec_mutex_trylock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unlock](https://docs.gtk.org/glib/method.RecMutex.unlock.html)
    pub fn unlock(self: *RecMutex) void {
        const cFn = @extern(*const fn (*RecMutex) callconv(.c) void, .{ .name = "g_rec_mutex_unlock" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [Regex](https://docs.gtk.org/glib/struct.Regex.html)
pub const Regex = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.Regex.new.html)
    pub fn new(_pattern: [*:0]const u8, _compile_options: glib.RegexCompileFlags, _match_options: glib.RegexMatchFlags, _error: *?*core.Error) error{GError}!?*Regex {
        const cFn = @extern(*const fn ([*:0]const u8, glib.RegexCompileFlags, glib.RegexMatchFlags, *?*core.Error) callconv(.c) ?*Regex, .{ .name = "g_regex_new" });
        const ret = cFn(_pattern, _compile_options, _match_options, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_capture_count](https://docs.gtk.org/glib/method.Regex.get_capture_count.html)
    pub fn getCaptureCount(self: *Regex) i32 {
        const cFn = @extern(*const fn (*Regex) callconv(.c) i32, .{ .name = "g_regex_get_capture_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_compile_flags](https://docs.gtk.org/glib/method.Regex.get_compile_flags.html)
    pub fn getCompileFlags(self: *Regex) glib.RegexCompileFlags {
        const cFn = @extern(*const fn (*Regex) callconv(.c) glib.RegexCompileFlags, .{ .name = "g_regex_get_compile_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_cr_or_lf](https://docs.gtk.org/glib/method.Regex.get_has_cr_or_lf.html)
    pub fn getHasCrOrLf(self: *Regex) bool {
        const cFn = @extern(*const fn (*Regex) callconv(.c) bool, .{ .name = "g_regex_get_has_cr_or_lf" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_match_flags](https://docs.gtk.org/glib/method.Regex.get_match_flags.html)
    pub fn getMatchFlags(self: *Regex) glib.RegexMatchFlags {
        const cFn = @extern(*const fn (*Regex) callconv(.c) glib.RegexMatchFlags, .{ .name = "g_regex_get_match_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_backref](https://docs.gtk.org/glib/method.Regex.get_max_backref.html)
    pub fn getMaxBackref(self: *Regex) i32 {
        const cFn = @extern(*const fn (*Regex) callconv(.c) i32, .{ .name = "g_regex_get_max_backref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_lookbehind](https://docs.gtk.org/glib/method.Regex.get_max_lookbehind.html)
    pub fn getMaxLookbehind(self: *Regex) i32 {
        const cFn = @extern(*const fn (*Regex) callconv(.c) i32, .{ .name = "g_regex_get_max_lookbehind" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pattern](https://docs.gtk.org/glib/method.Regex.get_pattern.html)
    pub fn getPattern(self: *Regex) [*:0]u8 {
        const cFn = @extern(*const fn (*Regex) callconv(.c) [*:0]u8, .{ .name = "g_regex_get_pattern" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string_number](https://docs.gtk.org/glib/method.Regex.get_string_number.html)
    pub fn getStringNumber(self: *Regex, _name: [*:0]const u8) i32 {
        const cFn = @extern(*const fn (*Regex, [*:0]const u8) callconv(.c) i32, .{ .name = "g_regex_get_string_number" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [match](https://docs.gtk.org/glib/method.Regex.match.html)
    pub fn match(self: *Regex, _string: [*:0]const u8, _match_options: glib.RegexMatchFlags) struct {
        ret: bool,
        match_info: *glib.MatchInfo,
    } {
        var match_info_out: *glib.MatchInfo = undefined;
        const _match_info = &match_info_out;
        const cFn = @extern(*const fn (*Regex, [*:0]const u8, glib.RegexMatchFlags, ?**glib.MatchInfo) callconv(.c) bool, .{ .name = "g_regex_match" });
        const ret = cFn(self, _string, _match_options, _match_info);
        return .{ .ret = ret, .match_info = match_info_out };
    }
    /// method [match_all](https://docs.gtk.org/glib/method.Regex.match_all.html)
    pub fn matchAll(self: *Regex, _string: [*:0]const u8, _match_options: glib.RegexMatchFlags) struct {
        ret: bool,
        match_info: *glib.MatchInfo,
    } {
        var match_info_out: *glib.MatchInfo = undefined;
        const _match_info = &match_info_out;
        const cFn = @extern(*const fn (*Regex, [*:0]const u8, glib.RegexMatchFlags, ?**glib.MatchInfo) callconv(.c) bool, .{ .name = "g_regex_match_all" });
        const ret = cFn(self, _string, _match_options, _match_info);
        return .{ .ret = ret, .match_info = match_info_out };
    }
    /// method [match_all_full](https://docs.gtk.org/glib/method.Regex.match_all_full.html)
    pub fn matchAllFull(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _match_options: glib.RegexMatchFlags, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        match_info: *glib.MatchInfo,
    } {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        var match_info_out: *glib.MatchInfo = undefined;
        const _match_info = &match_info_out;
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, glib.RegexMatchFlags, ?**glib.MatchInfo, *?*core.Error) callconv(.c) bool, .{ .name = "g_regex_match_all_full" });
        const ret = cFn(self, _string, _string_len, _start_position, _match_options, _match_info, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .match_info = match_info_out };
    }
    /// method [match_full](https://docs.gtk.org/glib/method.Regex.match_full.html)
    pub fn matchFull(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _match_options: glib.RegexMatchFlags, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        match_info: *glib.MatchInfo,
    } {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        var match_info_out: *glib.MatchInfo = undefined;
        const _match_info = &match_info_out;
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, glib.RegexMatchFlags, ?**glib.MatchInfo, *?*core.Error) callconv(.c) bool, .{ .name = "g_regex_match_full" });
        const ret = cFn(self, _string, _string_len, _start_position, _match_options, _match_info, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .match_info = match_info_out };
    }
    /// method [ref](https://docs.gtk.org/glib/method.Regex.ref.html)
    pub fn ref(self: *Regex) *glib.Regex {
        const cFn = @extern(*const fn (*Regex) callconv(.c) *glib.Regex, .{ .name = "g_regex_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [replace](https://docs.gtk.org/glib/method.Regex.replace.html)
    pub fn replace(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _replacement: [*:0]const u8, _match_options: glib.RegexMatchFlags, _error: *?*core.Error) error{GError}![*:0]u8 {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, [*:0]const u8, glib.RegexMatchFlags, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_regex_replace" });
        const ret = cFn(self, _string, _string_len, _start_position, _replacement, _match_options, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace_eval](https://docs.gtk.org/glib/method.Regex.replace_eval.html)
    pub fn replaceEval(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _match_options: glib.RegexMatchFlags, eval: anytype, eval_args: anytype, _error: *?*core.Error) error{GError}![*:0]u8 {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        var closure_eval = core.zig_closure(eval, eval_args, &.{ bool, *glib.MatchInfo, *glib.String });
        defer closure_eval.deinit();
        const _eval: glib.RegexEvalCallback = @ptrCast(closure_eval.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_eval.c_data());
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, glib.RegexMatchFlags, glib.RegexEvalCallback, ?*anyopaque, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_regex_replace_eval" });
        const ret = cFn(self, _string, _string_len, _start_position, _match_options, _eval, @ptrCast(_user_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace_literal](https://docs.gtk.org/glib/method.Regex.replace_literal.html)
    pub fn replaceLiteral(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _replacement: [*:0]const u8, _match_options: glib.RegexMatchFlags, _error: *?*core.Error) error{GError}![*:0]u8 {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, [*:0]const u8, glib.RegexMatchFlags, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_regex_replace_literal" });
        const ret = cFn(self, _string, _string_len, _start_position, _replacement, _match_options, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [split](https://docs.gtk.org/glib/method.Regex.split.html)
    pub fn split(self: *Regex, _string: [*:0]const u8, _match_options: glib.RegexMatchFlags) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Regex, [*:0]const u8, glib.RegexMatchFlags) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_regex_split" });
        const ret = cFn(self, _string, _match_options);
        return ret;
    }
    /// method [split_full](https://docs.gtk.org/glib/method.Regex.split_full.html)
    pub fn splitFull(self: *Regex, _strings: [][*:0]const u8, _start_position: i32, _match_options: glib.RegexMatchFlags, _max_tokens: i32, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const _string = _strings.ptr;
        const _string_len: i64 = @intCast(_strings.len);
        const cFn = @extern(*const fn (*Regex, [*][*:0]const u8, i64, i32, glib.RegexMatchFlags, i32, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_regex_split_full" });
        const ret = cFn(self, _string, _string_len, _start_position, _match_options, _max_tokens, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Regex.unref.html)
    pub fn unref(self: *Regex) void {
        const cFn = @extern(*const fn (*Regex) callconv(.c) void, .{ .name = "g_regex_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [check_replacement](https://docs.gtk.org/glib/type_func.Regex.check_replacement.html)
    pub fn checkReplacement(_replacement: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        has_references: bool,
    } {
        var has_references_out: bool = undefined;
        const _has_references = &has_references_out;
        const cFn = @extern(*const fn ([*:0]const u8, ?*bool, *?*core.Error) callconv(.c) bool, .{ .name = "g_regex_check_replacement" });
        const ret = cFn(_replacement, _has_references, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .has_references = has_references_out };
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.Regex.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_regex_error_quark" });
        const ret = cFn();
        return ret;
    }
    /// type func [escape_nul](https://docs.gtk.org/glib/type_func.Regex.escape_nul.html)
    pub fn escapeNul(_string: [*:0]const u8, _length: i32) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) [*:0]u8, .{ .name = "g_regex_escape_nul" });
        const ret = cFn(_string, _length);
        return ret;
    }
    /// type func [escape_string](https://docs.gtk.org/glib/type_func.Regex.escape_string.html)
    pub fn escapeString(_string: [*:0]const u8, _length: i32) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) [*:0]u8, .{ .name = "g_regex_escape_string" });
        const ret = cFn(_string, _length);
        return ret;
    }
    /// type func [match_simple](https://docs.gtk.org/glib/type_func.Regex.match_simple.html)
    pub fn matchSimple(_pattern: [*:0]const u8, _string: [*:0]const u8, _compile_options: glib.RegexCompileFlags, _match_options: glib.RegexMatchFlags) bool {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, glib.RegexCompileFlags, glib.RegexMatchFlags) callconv(.c) bool, .{ .name = "g_regex_match_simple" });
        const ret = cFn(_pattern, _string, _compile_options, _match_options);
        return ret;
    }
    /// type func [split_simple](https://docs.gtk.org/glib/type_func.Regex.split_simple.html)
    pub fn splitSimple(_pattern: [*:0]const u8, _string: [*:0]const u8, _compile_options: glib.RegexCompileFlags, _match_options: glib.RegexMatchFlags) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, glib.RegexCompileFlags, glib.RegexMatchFlags) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_regex_split_simple" });
        const ret = cFn(_pattern, _string, _compile_options, _match_options);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_regex_get_type" });
        return cFn();
    }
};
/// Flags [RegexCompileFlags](https://docs.gtk.org/glib/flags.RegexCompileFlags.html)
pub const RegexCompileFlags = packed struct(u32) {
    caseless: bool = false,
    multiline: bool = false,
    dotall: bool = false,
    extended: bool = false,
    anchored: bool = false,
    dollar_endonly: bool = false,
    _6: u3 = 0,
    ungreedy: bool = false,
    _10: u1 = 0,
    raw: bool = false,
    no_auto_capture: bool = false,
    optimize: bool = false,
    _14: u4 = 0,
    firstline: bool = false,
    dupnames: bool = false,
    newline_cr: bool = false,
    newline_lf: bool = false,
    _22: u1 = 0,
    bsr_anycrlf: bool = false,
    _24: u1 = 0,
    javascript_compat: bool = false,
    _: u6 = 0,
    pub const newline_crlf: @This() = @bitCast(@as(u32, 3145728));
    pub const newline_anycrlf: @This() = @bitCast(@as(u32, 5242880));
};
/// Error [RegexError](https://docs.gtk.org/glib/error.RegexError.html)
pub const RegexError = enum(u32) {
    compile = 0,
    optimize = 1,
    replace = 2,
    match = 3,
    internal = 4,
    stray_backslash = 101,
    missing_control_char = 102,
    unrecognized_escape = 103,
    quantifiers_out_of_order = 104,
    quantifier_too_big = 105,
    unterminated_character_class = 106,
    invalid_escape_in_character_class = 107,
    range_out_of_order = 108,
    nothing_to_repeat = 109,
    unrecognized_character = 112,
    posix_named_class_outside_class = 113,
    unmatched_parenthesis = 114,
    inexistent_subpattern_reference = 115,
    unterminated_comment = 118,
    expression_too_large = 120,
    memory_error = 121,
    variable_length_lookbehind = 125,
    malformed_condition = 126,
    too_many_conditional_branches = 127,
    assertion_expected = 128,
    unknown_posix_class_name = 130,
    posix_collating_elements_not_supported = 131,
    hex_code_too_large = 134,
    invalid_condition = 135,
    single_byte_match_in_lookbehind = 136,
    infinite_loop = 140,
    missing_subpattern_name_terminator = 142,
    duplicate_subpattern_name = 143,
    malformed_property = 146,
    unknown_property = 147,
    subpattern_name_too_long = 148,
    too_many_subpatterns = 149,
    invalid_octal_value = 151,
    too_many_branches_in_define = 154,
    define_repetion = 155,
    inconsistent_newline_options = 156,
    missing_back_reference = 157,
    invalid_relative_reference = 158,
    backtracking_control_verb_argument_forbidden = 159,
    unknown_backtracking_control_verb = 160,
    number_too_big = 161,
    missing_subpattern_name = 162,
    missing_digit = 163,
    invalid_data_character = 164,
    extra_subpattern_name = 165,
    backtracking_control_verb_argument_required = 166,
    invalid_control_char = 168,
    missing_name = 169,
    not_supported_in_class = 171,
    too_many_forward_references = 172,
    name_too_long = 175,
    character_value_too_large = 176,
};
/// callback [RegexEvalCallback](https://docs.gtk.org/glib/callback.RegexEvalCallback.html)
pub const RegexEvalCallback = *const fn (_match_info: *glib.MatchInfo, _result: *glib.String, _user_data: ?*anyopaque) callconv(.c) bool;
/// Flags [RegexMatchFlags](https://docs.gtk.org/glib/flags.RegexMatchFlags.html)
pub const RegexMatchFlags = packed struct(u32) {
    _0: u4 = 0,
    anchored: bool = false,
    _5: u2 = 0,
    notbol: bool = false,
    noteol: bool = false,
    _9: u1 = 0,
    notempty: bool = false,
    _11: u4 = 0,
    partial: bool = false,
    _16: u4 = 0,
    newline_cr: bool = false,
    newline_lf: bool = false,
    newline_any: bool = false,
    bsr_anycrlf: bool = false,
    bsr_any: bool = false,
    _25: u2 = 0,
    partial_hard: bool = false,
    notempty_atstart: bool = false,
    _: u3 = 0,
    pub const newline_crlf: @This() = @bitCast(@as(u32, 3145728));
    pub const newline_anycrlf: @This() = @bitCast(@as(u32, 5242880));
};
/// Deprecated:
/// Struct [Relation](https://docs.gtk.org/glib/struct.Relation.html)
pub const Relation = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [count](https://docs.gtk.org/glib/method.Relation.count.html)
    pub const count = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn count(self: *Relation, _key: ?*anyopaque, _field: i32) i32 {
            const cFn = @extern(*const fn (*Relation, ?*anyopaque, i32) callconv(.c) i32, .{ .name = "g_relation_count" });
            const ret = cFn(self, @ptrCast(_key), _field);
            return ret;
        }
    }.count;
    /// Deprecated:
    /// method [delete](https://docs.gtk.org/glib/method.Relation.delete.html)
    pub const delete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn delete(self: *Relation, _key: ?*anyopaque, _field: i32) i32 {
            const cFn = @extern(*const fn (*Relation, ?*anyopaque, i32) callconv(.c) i32, .{ .name = "g_relation_delete" });
            const ret = cFn(self, @ptrCast(_key), _field);
            return ret;
        }
    }.delete;
    /// Deprecated:
    /// method [destroy](https://docs.gtk.org/glib/method.Relation.destroy.html)
    pub const destroy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn destroy(self: *Relation) void {
            const cFn = @extern(*const fn (*Relation) callconv(.c) void, .{ .name = "g_relation_destroy" });
            const ret = cFn(self);
            return ret;
        }
    }.destroy;
    /// Deprecated:
    /// method [print](https://docs.gtk.org/glib/method.Relation.print.html)
    pub const print = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn print(self: *Relation) void {
            const cFn = @extern(*const fn (*Relation) callconv(.c) void, .{ .name = "g_relation_print" });
            const ret = cFn(self);
            return ret;
        }
    }.print;
};
/// const [SEARCHPATH_SEPARATOR](https://docs.gtk.org/glib/const.SEARCHPATH_SEPARATOR.html)
pub const SEARCHPATH_SEPARATOR = 58;
/// const [SEARCHPATH_SEPARATOR_S](https://docs.gtk.org/glib/const.SEARCHPATH_SEPARATOR_S.html)
pub const SEARCHPATH_SEPARATOR_S = ":";
/// const [SIZEOF_LONG](https://docs.gtk.org/glib/const.SIZEOF_LONG.html)
pub const SIZEOF_LONG = 8;
/// const [SIZEOF_SIZE_T](https://docs.gtk.org/glib/const.SIZEOF_SIZE_T.html)
pub const SIZEOF_SIZE_T = 8;
/// const [SIZEOF_SSIZE_T](https://docs.gtk.org/glib/const.SIZEOF_SSIZE_T.html)
pub const SIZEOF_SSIZE_T = 8;
/// const [SIZEOF_VOID_P](https://docs.gtk.org/glib/const.SIZEOF_VOID_P.html)
pub const SIZEOF_VOID_P = 8;
/// Struct [SList](https://docs.gtk.org/glib/struct.SList.html)
pub const SList = extern struct {
    data: ?*anyopaque,
    next: ?*core.SList,
    /// type func [pop_allocator](https://docs.gtk.org/glib/type_func.SList.pop_allocator.html)
    pub fn popAllocator() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_slist_pop_allocator" });
        const ret = cFn();
        return ret;
    }
    /// type func [push_allocator](https://docs.gtk.org/glib/type_func.SList.push_allocator.html)
    pub fn pushAllocator(_allocator: *glib.Allocator) void {
        const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_slist_push_allocator" });
        const ret = cFn(_allocator);
        return ret;
    }
};
/// const [SOURCE_CONTINUE](https://docs.gtk.org/glib/const.SOURCE_CONTINUE.html)
pub const SOURCE_CONTINUE = true;
/// const [SOURCE_REMOVE](https://docs.gtk.org/glib/const.SOURCE_REMOVE.html)
pub const SOURCE_REMOVE = false;
/// const [SQRT2](https://docs.gtk.org/glib/const.SQRT2.html)
pub const SQRT2 = 1.414214e0;
/// const [STR_DELIMITERS](https://docs.gtk.org/glib/const.STR_DELIMITERS.html)
pub const STR_DELIMITERS = "_-|> <.";
/// const [SYSDEF_AF_INET](https://docs.gtk.org/glib/const.SYSDEF_AF_INET.html)
pub const SYSDEF_AF_INET = 2;
/// const [SYSDEF_AF_INET6](https://docs.gtk.org/glib/const.SYSDEF_AF_INET6.html)
pub const SYSDEF_AF_INET6 = 10;
/// const [SYSDEF_AF_UNIX](https://docs.gtk.org/glib/const.SYSDEF_AF_UNIX.html)
pub const SYSDEF_AF_UNIX = 1;
/// const [SYSDEF_MSG_DONTROUTE](https://docs.gtk.org/glib/const.SYSDEF_MSG_DONTROUTE.html)
pub const SYSDEF_MSG_DONTROUTE = 4;
/// const [SYSDEF_MSG_OOB](https://docs.gtk.org/glib/const.SYSDEF_MSG_OOB.html)
pub const SYSDEF_MSG_OOB = 1;
/// const [SYSDEF_MSG_PEEK](https://docs.gtk.org/glib/const.SYSDEF_MSG_PEEK.html)
pub const SYSDEF_MSG_PEEK = 2;
/// Struct [Scanner](https://docs.gtk.org/glib/struct.Scanner.html)
pub const Scanner = extern struct {
    user_data: ?*anyopaque,
    max_parse_errors: u32,
    parse_errors: u32,
    input_name: ?[*:0]const u8,
    qdata: ?*glib.Data,
    config: ?*glib.ScannerConfig,
    token: glib.TokenType,
    value: glib.TokenValue,
    line: u32,
    position: u32,
    next_token: glib.TokenType,
    next_value: glib.TokenValue,
    next_line: u32,
    next_position: u32,
    symbol_table: ?*core.HashTable,
    input_fd: i32,
    text: ?[*:0]const u8,
    text_end: ?[*:0]const u8,
    buffer: ?[*:0]const u8,
    scope_id: u32,
    msg_handler: ?*const fn (_scanner: *glib.Scanner, _message: [*:0]const u8, _error: bool) callconv(.c) void,
    /// method [cur_line](https://docs.gtk.org/glib/method.Scanner.cur_line.html)
    pub fn curLine(self: *Scanner) u32 {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) u32, .{ .name = "g_scanner_cur_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [cur_position](https://docs.gtk.org/glib/method.Scanner.cur_position.html)
    pub fn curPosition(self: *Scanner) u32 {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) u32, .{ .name = "g_scanner_cur_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [cur_token](https://docs.gtk.org/glib/method.Scanner.cur_token.html)
    pub fn curToken(self: *Scanner) glib.TokenType {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) glib.TokenType, .{ .name = "g_scanner_cur_token" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.Scanner.destroy.html)
    pub fn destroy(self: *Scanner) void {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) void, .{ .name = "g_scanner_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [eof](https://docs.gtk.org/glib/method.Scanner.eof.html)
    pub fn eof(self: *Scanner) bool {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) bool, .{ .name = "g_scanner_eof" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_next_token](https://docs.gtk.org/glib/method.Scanner.get_next_token.html)
    pub fn getNextToken(self: *Scanner) glib.TokenType {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) glib.TokenType, .{ .name = "g_scanner_get_next_token" });
        const ret = cFn(self);
        return ret;
    }
    /// method [input_file](https://docs.gtk.org/glib/method.Scanner.input_file.html)
    pub fn inputFile(self: *Scanner, _input_fd: i32) void {
        const cFn = @extern(*const fn (*Scanner, i32) callconv(.c) void, .{ .name = "g_scanner_input_file" });
        const ret = cFn(self, _input_fd);
        return ret;
    }
    /// method [input_text](https://docs.gtk.org/glib/method.Scanner.input_text.html)
    pub fn inputText(self: *Scanner, _text: [*:0]const u8, _text_len: u32) void {
        const cFn = @extern(*const fn (*Scanner, [*:0]const u8, u32) callconv(.c) void, .{ .name = "g_scanner_input_text" });
        const ret = cFn(self, _text, _text_len);
        return ret;
    }
    /// method [lookup_symbol](https://docs.gtk.org/glib/method.Scanner.lookup_symbol.html)
    pub fn lookupSymbol(self: *Scanner, _symbol: [*:0]const u8) ?*anyopaque {
        const cFn = @extern(*const fn (*Scanner, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_scanner_lookup_symbol" });
        const ret = cFn(self, _symbol);
        return ret;
    }
    /// method [peek_next_token](https://docs.gtk.org/glib/method.Scanner.peek_next_token.html)
    pub fn peekNextToken(self: *Scanner) glib.TokenType {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) glib.TokenType, .{ .name = "g_scanner_peek_next_token" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scope_add_symbol](https://docs.gtk.org/glib/method.Scanner.scope_add_symbol.html)
    pub fn scopeAddSymbol(self: *Scanner, _scope_id: u32, _symbol: [*:0]const u8, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Scanner, u32, [*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_scanner_scope_add_symbol" });
        const ret = cFn(self, _scope_id, _symbol, @ptrCast(_value));
        return ret;
    }
    /// method [scope_foreach_symbol](https://docs.gtk.org/glib/method.Scanner.scope_foreach_symbol.html)
    pub fn scopeForeachSymbol(self: *Scanner, _scope_id: u32, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.HFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Scanner, u32, glib.HFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_scanner_scope_foreach_symbol" });
        const ret = cFn(self, _scope_id, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [scope_lookup_symbol](https://docs.gtk.org/glib/method.Scanner.scope_lookup_symbol.html)
    pub fn scopeLookupSymbol(self: *Scanner, _scope_id: u32, _symbol: [*:0]const u8) ?*anyopaque {
        const cFn = @extern(*const fn (*Scanner, u32, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_scanner_scope_lookup_symbol" });
        const ret = cFn(self, _scope_id, _symbol);
        return ret;
    }
    /// method [scope_remove_symbol](https://docs.gtk.org/glib/method.Scanner.scope_remove_symbol.html)
    pub fn scopeRemoveSymbol(self: *Scanner, _scope_id: u32, _symbol: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Scanner, u32, [*:0]const u8) callconv(.c) void, .{ .name = "g_scanner_scope_remove_symbol" });
        const ret = cFn(self, _scope_id, _symbol);
        return ret;
    }
    /// method [set_scope](https://docs.gtk.org/glib/method.Scanner.set_scope.html)
    pub fn setScope(self: *Scanner, _scope_id: u32) u32 {
        const cFn = @extern(*const fn (*Scanner, u32) callconv(.c) u32, .{ .name = "g_scanner_set_scope" });
        const ret = cFn(self, _scope_id);
        return ret;
    }
    /// method [sync_file_offset](https://docs.gtk.org/glib/method.Scanner.sync_file_offset.html)
    pub fn syncFileOffset(self: *Scanner) void {
        const cFn = @extern(*const fn (*Scanner) callconv(.c) void, .{ .name = "g_scanner_sync_file_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unexp_token](https://docs.gtk.org/glib/method.Scanner.unexp_token.html)
    pub fn unexpToken(self: *Scanner, _expected_token: glib.TokenType, _identifier_spec: [*:0]const u8, _symbol_spec: [*:0]const u8, _symbol_name: [*:0]const u8, _message: [*:0]const u8, _is_error: i32) void {
        const cFn = @extern(*const fn (*Scanner, glib.TokenType, [*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, i32) callconv(.c) void, .{ .name = "g_scanner_unexp_token" });
        const ret = cFn(self, _expected_token, _identifier_spec, _symbol_spec, _symbol_name, _message, _is_error);
        return ret;
    }
};
/// Struct [ScannerConfig](https://docs.gtk.org/glib/struct.ScannerConfig.html)
pub const ScannerConfig = extern struct {
    cset_skip_characters: ?[*:0]const u8,
    cset_identifier_first: ?[*:0]const u8,
    cset_identifier_nth: ?[*:0]const u8,
    cpair_comment_single: ?[*:0]const u8,
    case_sensitive: u32,
    skip_comment_multi: u32,
    skip_comment_single: u32,
    scan_comment_multi: u32,
    scan_identifier: u32,
    scan_identifier_1char: u32,
    scan_identifier_NULL: u32,
    scan_symbols: u32,
    scan_binary: u32,
    scan_octal: u32,
    scan_float: u32,
    scan_hex: u32,
    scan_hex_dollar: u32,
    scan_string_sq: u32,
    scan_string_dq: u32,
    numbers_2_int: u32,
    int_2_float: u32,
    identifier_2_string: u32,
    char_2_token: u32,
    symbol_2_token: u32,
    scope_0_fallback: u32,
    store_int64: u32,
    padding_dummy: u32,
};
/// callback [ScannerMsgFunc](https://docs.gtk.org/glib/callback.ScannerMsgFunc.html)
pub const ScannerMsgFunc = *const fn (_scanner: *glib.Scanner, _message: [*:0]const u8, _error: bool) callconv(.c) void;
/// Enum [SeekType](https://docs.gtk.org/glib/enum.SeekType.html)
pub const SeekType = enum(u32) {
    cur = 0,
    set = 1,
    end = 2,
};
/// Struct [Sequence](https://docs.gtk.org/glib/struct.Sequence.html)
pub const Sequence = opaque {
    /// method [append](https://docs.gtk.org/glib/method.Sequence.append.html)
    pub fn append(self: *Sequence, _data: ?*anyopaque) *glib.SequenceIter {
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_append" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [foreach](https://docs.gtk.org/glib/method.Sequence.foreach.html)
    pub fn foreach(self: *Sequence, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.Func = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Sequence, glib.Func, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_foreach" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.Sequence.free.html)
    pub fn free(self: *Sequence) void {
        const cFn = @extern(*const fn (*Sequence) callconv(.c) void, .{ .name = "g_sequence_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_begin_iter](https://docs.gtk.org/glib/method.Sequence.get_begin_iter.html)
    pub fn getBeginIter(self: *Sequence) *glib.SequenceIter {
        const cFn = @extern(*const fn (*Sequence) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_get_begin_iter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_end_iter](https://docs.gtk.org/glib/method.Sequence.get_end_iter.html)
    pub fn getEndIter(self: *Sequence) *glib.SequenceIter {
        const cFn = @extern(*const fn (*Sequence) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_get_end_iter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iter_at_pos](https://docs.gtk.org/glib/method.Sequence.get_iter_at_pos.html)
    pub fn getIterAtPos(self: *Sequence, _pos: i32) *glib.SequenceIter {
        const cFn = @extern(*const fn (*Sequence, i32) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_get_iter_at_pos" });
        const ret = cFn(self, _pos);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/glib/method.Sequence.get_length.html)
    pub fn getLength(self: *Sequence) i32 {
        const cFn = @extern(*const fn (*Sequence) callconv(.c) i32, .{ .name = "g_sequence_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_sorted](https://docs.gtk.org/glib/method.Sequence.insert_sorted.html)
    pub fn insertSorted(self: *Sequence, _data: ?*anyopaque, cmp_func: anytype, cmp_func_args: anytype) *glib.SequenceIter {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_insert_sorted" });
        const ret = cFn(self, @ptrCast(_data), _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [insert_sorted_iter](https://docs.gtk.org/glib/method.Sequence.insert_sorted_iter.html)
    pub fn insertSortedIter(self: *Sequence, _data: ?*anyopaque, iter_cmp: anytype, iter_cmp_args: anytype) *glib.SequenceIter {
        var closure_iter_cmp = core.zig_closure(iter_cmp, iter_cmp_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
        defer closure_iter_cmp.deinit();
        const _iter_cmp: glib.SequenceIterCompareFunc = @ptrCast(closure_iter_cmp.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_iter_cmp.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_insert_sorted_iter" });
        const ret = cFn(self, @ptrCast(_data), _iter_cmp, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [is_empty](https://docs.gtk.org/glib/method.Sequence.is_empty.html)
    pub fn isEmpty(self: *Sequence) bool {
        const cFn = @extern(*const fn (*Sequence) callconv(.c) bool, .{ .name = "g_sequence_is_empty" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/glib/method.Sequence.lookup.html)
    pub fn lookup(self: *Sequence, _data: ?*anyopaque, cmp_func: anytype, cmp_func_args: anytype) ?*glib.SequenceIter {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) ?*glib.SequenceIter, .{ .name = "g_sequence_lookup" });
        const ret = cFn(self, @ptrCast(_data), _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [lookup_iter](https://docs.gtk.org/glib/method.Sequence.lookup_iter.html)
    pub fn lookupIter(self: *Sequence, _data: ?*anyopaque, iter_cmp: anytype, iter_cmp_args: anytype) ?*glib.SequenceIter {
        var closure_iter_cmp = core.zig_closure(iter_cmp, iter_cmp_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
        defer closure_iter_cmp.deinit();
        const _iter_cmp: glib.SequenceIterCompareFunc = @ptrCast(closure_iter_cmp.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_iter_cmp.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) ?*glib.SequenceIter, .{ .name = "g_sequence_lookup_iter" });
        const ret = cFn(self, @ptrCast(_data), _iter_cmp, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/glib/method.Sequence.prepend.html)
    pub fn prepend(self: *Sequence, _data: ?*anyopaque) *glib.SequenceIter {
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_prepend" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [search](https://docs.gtk.org/glib/method.Sequence.search.html)
    pub fn search(self: *Sequence, _data: ?*anyopaque, cmp_func: anytype, cmp_func_args: anytype) *glib.SequenceIter {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.CompareDataFunc, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_search" });
        const ret = cFn(self, @ptrCast(_data), _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [search_iter](https://docs.gtk.org/glib/method.Sequence.search_iter.html)
    pub fn searchIter(self: *Sequence, _data: ?*anyopaque, iter_cmp: anytype, iter_cmp_args: anytype) *glib.SequenceIter {
        var closure_iter_cmp = core.zig_closure(iter_cmp, iter_cmp_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
        defer closure_iter_cmp.deinit();
        const _iter_cmp: glib.SequenceIterCompareFunc = @ptrCast(closure_iter_cmp.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_iter_cmp.c_data());
        const cFn = @extern(*const fn (*Sequence, ?*anyopaque, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_search_iter" });
        const ret = cFn(self, @ptrCast(_data), _iter_cmp, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [sort](https://docs.gtk.org/glib/method.Sequence.sort.html)
    pub fn sort(self: *Sequence, cmp_func: anytype, cmp_func_args: anytype) void {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*Sequence, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort" });
        const ret = cFn(self, _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// method [sort_iter](https://docs.gtk.org/glib/method.Sequence.sort_iter.html)
    pub fn sortIter(self: *Sequence, cmp_func: anytype, cmp_func_args: anytype) void {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.SequenceIterCompareFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*Sequence, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort_iter" });
        const ret = cFn(self, _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// type func [foreach_range](https://docs.gtk.org/glib/type_func.Sequence.foreach_range.html)
    pub fn foreachRange(_begin: *glib.SequenceIter, _end: *glib.SequenceIter, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.Func = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter, glib.Func, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_foreach_range" });
        const ret = cFn(_begin, _end, _func, @ptrCast(_user_data));
        return ret;
    }
    /// type func [get](https://docs.gtk.org/glib/type_func.Sequence.get.html)
    pub fn get(_iter: *glib.SequenceIter) ?*anyopaque {
        const cFn = @extern(*const fn (*glib.SequenceIter) callconv(.c) ?*anyopaque, .{ .name = "g_sequence_get" });
        const ret = cFn(_iter);
        return ret;
    }
    /// type func [insert_before](https://docs.gtk.org/glib/type_func.Sequence.insert_before.html)
    pub fn insertBefore(_iter: *glib.SequenceIter, _data: ?*anyopaque) *glib.SequenceIter {
        const cFn = @extern(*const fn (*glib.SequenceIter, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_insert_before" });
        const ret = cFn(_iter, @ptrCast(_data));
        return ret;
    }
    /// type func [move](https://docs.gtk.org/glib/type_func.Sequence.move.html)
    pub fn move(_src: *glib.SequenceIter, _dest: *glib.SequenceIter) void {
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_move" });
        const ret = cFn(_src, _dest);
        return ret;
    }
    /// type func [move_range](https://docs.gtk.org/glib/type_func.Sequence.move_range.html)
    pub fn moveRange(_dest: *glib.SequenceIter, _begin: *glib.SequenceIter, _end: *glib.SequenceIter) void {
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_move_range" });
        const ret = cFn(_dest, _begin, _end);
        return ret;
    }
    /// type func [range_get_midpoint](https://docs.gtk.org/glib/type_func.Sequence.range_get_midpoint.html)
    pub fn rangeGetMidpoint(_begin: *glib.SequenceIter, _end: *glib.SequenceIter) *glib.SequenceIter {
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_range_get_midpoint" });
        const ret = cFn(_begin, _end);
        return ret;
    }
    /// type func [remove](https://docs.gtk.org/glib/type_func.Sequence.remove.html)
    pub fn remove(_iter: *glib.SequenceIter) void {
        const cFn = @extern(*const fn (*glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_remove" });
        const ret = cFn(_iter);
        return ret;
    }
    /// type func [remove_range](https://docs.gtk.org/glib/type_func.Sequence.remove_range.html)
    pub fn removeRange(_begin: *glib.SequenceIter, _end: *glib.SequenceIter) void {
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_remove_range" });
        const ret = cFn(_begin, _end);
        return ret;
    }
    /// type func [set](https://docs.gtk.org/glib/type_func.Sequence.set.html)
    pub fn set(_iter: *glib.SequenceIter, _data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*glib.SequenceIter, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_set" });
        const ret = cFn(_iter, @ptrCast(_data));
        return ret;
    }
    /// type func [sort_changed](https://docs.gtk.org/glib/type_func.Sequence.sort_changed.html)
    pub fn sortChanged(_iter: *glib.SequenceIter, cmp_func: anytype, cmp_func_args: anytype) void {
        var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_cmp_func.deinit();
        const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
        const cFn = @extern(*const fn (*glib.SequenceIter, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort_changed" });
        const ret = cFn(_iter, _cmp_func, @ptrCast(_cmp_data));
        return ret;
    }
    /// type func [sort_changed_iter](https://docs.gtk.org/glib/type_func.Sequence.sort_changed_iter.html)
    pub fn sortChangedIter(_iter: *glib.SequenceIter, iter_cmp: anytype, iter_cmp_args: anytype) void {
        var closure_iter_cmp = core.zig_closure(iter_cmp, iter_cmp_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
        defer closure_iter_cmp.deinit();
        const _iter_cmp: glib.SequenceIterCompareFunc = @ptrCast(closure_iter_cmp.c_closure());
        const _cmp_data: ?*anyopaque = @ptrCast(closure_iter_cmp.c_data());
        const cFn = @extern(*const fn (*glib.SequenceIter, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort_changed_iter" });
        const ret = cFn(_iter, _iter_cmp, @ptrCast(_cmp_data));
        return ret;
    }
    /// type func [swap](https://docs.gtk.org/glib/type_func.Sequence.swap.html)
    pub fn swap(_a: *glib.SequenceIter, _b: *glib.SequenceIter) void {
        const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_swap" });
        const ret = cFn(_a, _b);
        return ret;
    }
};
/// Struct [SequenceIter](https://docs.gtk.org/glib/struct.SequenceIter.html)
pub const SequenceIter = opaque {
    /// method [compare](https://docs.gtk.org/glib/method.SequenceIter.compare.html)
    pub fn compare(self: *SequenceIter, _b: *glib.SequenceIter) i32 {
        const cFn = @extern(*const fn (*SequenceIter, *glib.SequenceIter) callconv(.c) i32, .{ .name = "g_sequence_iter_compare" });
        const ret = cFn(self, _b);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/glib/method.SequenceIter.get_position.html)
    pub fn getPosition(self: *SequenceIter) i32 {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) i32, .{ .name = "g_sequence_iter_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sequence](https://docs.gtk.org/glib/method.SequenceIter.get_sequence.html)
    pub fn getSequence(self: *SequenceIter) *glib.Sequence {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) *glib.Sequence, .{ .name = "g_sequence_iter_get_sequence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_begin](https://docs.gtk.org/glib/method.SequenceIter.is_begin.html)
    pub fn isBegin(self: *SequenceIter) bool {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) bool, .{ .name = "g_sequence_iter_is_begin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_end](https://docs.gtk.org/glib/method.SequenceIter.is_end.html)
    pub fn isEnd(self: *SequenceIter) bool {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) bool, .{ .name = "g_sequence_iter_is_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [move](https://docs.gtk.org/glib/method.SequenceIter.move.html)
    pub fn move(self: *SequenceIter, _delta: i32) *glib.SequenceIter {
        const cFn = @extern(*const fn (*SequenceIter, i32) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_iter_move" });
        const ret = cFn(self, _delta);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.SequenceIter.next.html)
    pub fn next(self: *SequenceIter) *glib.SequenceIter {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_iter_next" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prev](https://docs.gtk.org/glib/method.SequenceIter.prev.html)
    pub fn prev(self: *SequenceIter) *glib.SequenceIter {
        const cFn = @extern(*const fn (*SequenceIter) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_iter_prev" });
        const ret = cFn(self);
        return ret;
    }
};
/// callback [SequenceIterCompareFunc](https://docs.gtk.org/glib/callback.SequenceIterCompareFunc.html)
pub const SequenceIterCompareFunc = *const fn (_a: *glib.SequenceIter, _b: *glib.SequenceIter, _data: ?*anyopaque) callconv(.c) i32;
/// Error [ShellError](https://docs.gtk.org/glib/error.ShellError.html)
pub const ShellError = enum(u32) {
    bad_quoting = 0,
    empty_string = 1,
    failed = 2,
};
/// Enum [SliceConfig](https://docs.gtk.org/glib/enum.SliceConfig.html)
pub const SliceConfig = enum(u32) {
    always_malloc = 1,
    bypass_magazines = 2,
    working_set_msecs = 3,
    color_increment = 4,
    chunk_sizes = 5,
    contention_counter = 6,
};
/// Struct [Source](https://docs.gtk.org/glib/struct.Source.html)
pub const Source = extern struct {
    callback_data: ?*anyopaque,
    callback_funcs: ?*glib.SourceCallbackFuncs,
    source_funcs: ?*glib.SourceFuncs,
    ref_count: u32,
    context: ?*glib.MainContext,
    priority: i32,
    flags: u32,
    source_id: u32,
    poll_fds: ?*core.SList,
    prev: ?*glib.Source,
    next: ?*glib.Source,
    name: ?[*:0]const u8,
    priv: ?*glib.SourcePrivate,
    /// ctor [new](https://docs.gtk.org/glib/ctor.Source.new.html)
    pub fn new(_source_funcs: *glib.SourceFuncs, _struct_size: u32) *Source {
        const cFn = @extern(*const fn (*glib.SourceFuncs, u32) callconv(.c) *Source, .{ .name = "g_source_new" });
        const ret = cFn(_source_funcs, _struct_size);
        return ret;
    }
    /// method [add_child_source](https://docs.gtk.org/glib/method.Source.add_child_source.html)
    pub fn addChildSource(self: *Source, _child_source: *glib.Source) void {
        const cFn = @extern(*const fn (*Source, *glib.Source) callconv(.c) void, .{ .name = "g_source_add_child_source" });
        const ret = cFn(self, _child_source);
        return ret;
    }
    /// method [add_poll](https://docs.gtk.org/glib/method.Source.add_poll.html)
    pub fn addPoll(self: *Source, _fd: *glib.PollFD) void {
        const cFn = @extern(*const fn (*Source, *glib.PollFD) callconv(.c) void, .{ .name = "g_source_add_poll" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [add_unix_fd](https://docs.gtk.org/glib/method.Source.add_unix_fd.html)
    pub fn addUnixFd(self: *Source, _fd: i32, _events: glib.IOCondition) *anyopaque {
        const cFn = @extern(*const fn (*Source, i32, glib.IOCondition) callconv(.c) *anyopaque, .{ .name = "g_source_add_unix_fd" });
        const ret = cFn(self, _fd, _events);
        return ret;
    }
    /// method [attach](https://docs.gtk.org/glib/method.Source.attach.html)
    pub fn attach(self: *Source, _context: ?*glib.MainContext) u32 {
        const cFn = @extern(*const fn (*Source, ?*glib.MainContext) callconv(.c) u32, .{ .name = "g_source_attach" });
        const ret = cFn(self, _context);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.Source.destroy.html)
    pub fn destroy(self: *Source) void {
        const cFn = @extern(*const fn (*Source) callconv(.c) void, .{ .name = "g_source_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_recurse](https://docs.gtk.org/glib/method.Source.get_can_recurse.html)
    pub fn getCanRecurse(self: *Source) bool {
        const cFn = @extern(*const fn (*Source) callconv(.c) bool, .{ .name = "g_source_get_can_recurse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/glib/method.Source.get_context.html)
    pub fn getContext(self: *Source) ?*glib.MainContext {
        const cFn = @extern(*const fn (*Source) callconv(.c) ?*glib.MainContext, .{ .name = "g_source_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_current_time](https://docs.gtk.org/glib/method.Source.get_current_time.html)
    pub const getCurrentTime = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCurrentTime(self: *Source, _timeval: *glib.TimeVal) void {
            const cFn = @extern(*const fn (*Source, *glib.TimeVal) callconv(.c) void, .{ .name = "g_source_get_current_time" });
            const ret = cFn(self, _timeval);
            return ret;
        }
    }.getCurrentTime;
    /// method [get_id](https://docs.gtk.org/glib/method.Source.get_id.html)
    pub fn getId(self: *Source) u32 {
        const cFn = @extern(*const fn (*Source) callconv(.c) u32, .{ .name = "g_source_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/glib/method.Source.get_name.html)
    pub fn getName(self: *Source) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Source) callconv(.c) ?[*:0]u8, .{ .name = "g_source_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/glib/method.Source.get_priority.html)
    pub fn getPriority(self: *Source) i32 {
        const cFn = @extern(*const fn (*Source) callconv(.c) i32, .{ .name = "g_source_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ready_time](https://docs.gtk.org/glib/method.Source.get_ready_time.html)
    pub fn getReadyTime(self: *Source) i64 {
        const cFn = @extern(*const fn (*Source) callconv(.c) i64, .{ .name = "g_source_get_ready_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_time](https://docs.gtk.org/glib/method.Source.get_time.html)
    pub fn getTime(self: *Source) i64 {
        const cFn = @extern(*const fn (*Source) callconv(.c) i64, .{ .name = "g_source_get_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_destroyed](https://docs.gtk.org/glib/method.Source.is_destroyed.html)
    pub fn isDestroyed(self: *Source) bool {
        const cFn = @extern(*const fn (*Source) callconv(.c) bool, .{ .name = "g_source_is_destroyed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [modify_unix_fd](https://docs.gtk.org/glib/method.Source.modify_unix_fd.html)
    pub fn modifyUnixFd(self: *Source, _tag: *anyopaque, _new_events: glib.IOCondition) void {
        const cFn = @extern(*const fn (*Source, *anyopaque, glib.IOCondition) callconv(.c) void, .{ .name = "g_source_modify_unix_fd" });
        const ret = cFn(self, @ptrCast(_tag), _new_events);
        return ret;
    }
    /// method [query_unix_fd](https://docs.gtk.org/glib/method.Source.query_unix_fd.html)
    pub fn queryUnixFd(self: *Source, _tag: *anyopaque) glib.IOCondition {
        const cFn = @extern(*const fn (*Source, *anyopaque) callconv(.c) glib.IOCondition, .{ .name = "g_source_query_unix_fd" });
        const ret = cFn(self, @ptrCast(_tag));
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Source.ref.html)
    pub fn ref(self: *Source) *glib.Source {
        const cFn = @extern(*const fn (*Source) callconv(.c) *glib.Source, .{ .name = "g_source_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_child_source](https://docs.gtk.org/glib/method.Source.remove_child_source.html)
    pub fn removeChildSource(self: *Source, _child_source: *glib.Source) void {
        const cFn = @extern(*const fn (*Source, *glib.Source) callconv(.c) void, .{ .name = "g_source_remove_child_source" });
        const ret = cFn(self, _child_source);
        return ret;
    }
    /// method [remove_poll](https://docs.gtk.org/glib/method.Source.remove_poll.html)
    pub fn removePoll(self: *Source, _fd: *glib.PollFD) void {
        const cFn = @extern(*const fn (*Source, *glib.PollFD) callconv(.c) void, .{ .name = "g_source_remove_poll" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [remove_unix_fd](https://docs.gtk.org/glib/method.Source.remove_unix_fd.html)
    pub fn removeUnixFd(self: *Source, _tag: *anyopaque) void {
        const cFn = @extern(*const fn (*Source, *anyopaque) callconv(.c) void, .{ .name = "g_source_remove_unix_fd" });
        const ret = cFn(self, @ptrCast(_tag));
        return ret;
    }
    /// method [set_callback](https://docs.gtk.org/glib/method.Source.set_callback.html)
    pub fn setCallback(self: *Source, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{bool});
        const _func: glib.SourceFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*Source, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_source_set_callback" });
        const ret = cFn(self, _func, @ptrCast(_data), _notify);
        return ret;
    }
    /// method [set_callback_indirect](https://docs.gtk.org/glib/method.Source.set_callback_indirect.html)
    pub fn setCallbackIndirect(self: *Source, _callback_data: ?*anyopaque, _callback_funcs: *glib.SourceCallbackFuncs) void {
        const cFn = @extern(*const fn (*Source, ?*anyopaque, *glib.SourceCallbackFuncs) callconv(.c) void, .{ .name = "g_source_set_callback_indirect" });
        const ret = cFn(self, @ptrCast(_callback_data), _callback_funcs);
        return ret;
    }
    /// method [set_can_recurse](https://docs.gtk.org/glib/method.Source.set_can_recurse.html)
    pub fn setCanRecurse(self: *Source, _can_recurse: bool) void {
        const cFn = @extern(*const fn (*Source, bool) callconv(.c) void, .{ .name = "g_source_set_can_recurse" });
        const ret = cFn(self, _can_recurse);
        return ret;
    }
    /// method [set_funcs](https://docs.gtk.org/glib/method.Source.set_funcs.html)
    pub fn setFuncs(self: *Source, _funcs: *glib.SourceFuncs) void {
        const cFn = @extern(*const fn (*Source, *glib.SourceFuncs) callconv(.c) void, .{ .name = "g_source_set_funcs" });
        const ret = cFn(self, _funcs);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/glib/method.Source.set_name.html)
    pub fn setName(self: *Source, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Source, [*:0]const u8) callconv(.c) void, .{ .name = "g_source_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_priority](https://docs.gtk.org/glib/method.Source.set_priority.html)
    pub fn setPriority(self: *Source, _priority: i32) void {
        const cFn = @extern(*const fn (*Source, i32) callconv(.c) void, .{ .name = "g_source_set_priority" });
        const ret = cFn(self, _priority);
        return ret;
    }
    /// method [set_ready_time](https://docs.gtk.org/glib/method.Source.set_ready_time.html)
    pub fn setReadyTime(self: *Source, _ready_time: i64) void {
        const cFn = @extern(*const fn (*Source, i64) callconv(.c) void, .{ .name = "g_source_set_ready_time" });
        const ret = cFn(self, _ready_time);
        return ret;
    }
    /// method [set_static_name](https://docs.gtk.org/glib/method.Source.set_static_name.html)
    pub fn setStaticName(self: *Source, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Source, [*:0]const u8) callconv(.c) void, .{ .name = "g_source_set_static_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Source.unref.html)
    pub fn unref(self: *Source) void {
        const cFn = @extern(*const fn (*Source) callconv(.c) void, .{ .name = "g_source_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [remove](https://docs.gtk.org/glib/type_func.Source.remove.html)
    pub fn remove(_tag: u32) bool {
        const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "g_source_remove" });
        const ret = cFn(_tag);
        return ret;
    }
    /// type func [remove_by_funcs_user_data](https://docs.gtk.org/glib/type_func.Source.remove_by_funcs_user_data.html)
    pub fn removeByFuncsUserData(_funcs: *glib.SourceFuncs, _user_data: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*glib.SourceFuncs, ?*anyopaque) callconv(.c) bool, .{ .name = "g_source_remove_by_funcs_user_data" });
        const ret = cFn(_funcs, @ptrCast(_user_data));
        return ret;
    }
    /// type func [remove_by_user_data](https://docs.gtk.org/glib/type_func.Source.remove_by_user_data.html)
    pub fn removeByUserData(_user_data: ?*anyopaque) bool {
        const cFn = @extern(*const fn (?*anyopaque) callconv(.c) bool, .{ .name = "g_source_remove_by_user_data" });
        const ret = cFn(@ptrCast(_user_data));
        return ret;
    }
    /// type func [set_name_by_id](https://docs.gtk.org/glib/type_func.Source.set_name_by_id.html)
    pub fn setNameById(_tag: u32, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (u32, [*:0]const u8) callconv(.c) void, .{ .name = "g_source_set_name_by_id" });
        const ret = cFn(_tag, _name);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_source_get_type" });
        return cFn();
    }
};
/// Struct [SourceCallbackFuncs](https://docs.gtk.org/glib/struct.SourceCallbackFuncs.html)
pub const SourceCallbackFuncs = extern struct {
    ref: ?*const fn (_cb_data: *anyopaque) callconv(.c) void,
    unref: ?*const fn (_cb_data: *anyopaque) callconv(.c) void,
    get: ?*anyopaque,
};
/// callback [SourceDisposeFunc](https://docs.gtk.org/glib/callback.SourceDisposeFunc.html)
pub const SourceDisposeFunc = *const fn (_source: *glib.Source) callconv(.c) void;
/// callback [SourceDummyMarshal](https://docs.gtk.org/glib/callback.SourceDummyMarshal.html)
pub const SourceDummyMarshal = *const fn () callconv(.c) void;
/// callback [SourceFunc](https://docs.gtk.org/glib/callback.SourceFunc.html)
pub const SourceFunc = *const fn (_user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [SourceFuncs](https://docs.gtk.org/glib/struct.SourceFuncs.html)
pub const SourceFuncs = extern struct {
    prepare: ?*const fn (_source: *glib.Source, _timeout_: *i32) callconv(.c) bool,
    check: ?*const fn (_source: *glib.Source) callconv(.c) bool,
    dispatch: ?*anyopaque,
    finalize: ?*const fn (_source: *glib.Source) callconv(.c) void,
    closure_callback: ?*const fn (_user_data: ?*anyopaque) callconv(.c) bool,
    closure_marshal: ?*const fn () callconv(.c) void,
};
/// callback [SourceOnceFunc](https://docs.gtk.org/glib/callback.SourceOnceFunc.html)
pub const SourceOnceFunc = *const fn (_user_data: ?*anyopaque) callconv(.c) void;
pub const SourcePrivate = opaque {};
/// callback [SpawnChildSetupFunc](https://docs.gtk.org/glib/callback.SpawnChildSetupFunc.html)
pub const SpawnChildSetupFunc = *const fn (_data: ?*anyopaque) callconv(.c) void;
/// Error [SpawnError](https://docs.gtk.org/glib/error.SpawnError.html)
pub const SpawnError = enum(u32) {
    fork = 0,
    read = 1,
    chdir = 2,
    acces = 3,
    perm = 4,
    too_big = 5,
    noexec = 6,
    nametoolong = 7,
    noent = 8,
    nomem = 9,
    notdir = 10,
    loop = 11,
    txtbusy = 12,
    io = 13,
    nfile = 14,
    mfile = 15,
    inval = 16,
    isdir = 17,
    libbad = 18,
    failed = 19,
    pub const @"2big": @This() = @enumFromInt(5);
};
/// Flags [SpawnFlags](https://docs.gtk.org/glib/flags.SpawnFlags.html)
pub const SpawnFlags = packed struct(u32) {
    leave_descriptors_open: bool = false,
    do_not_reap_child: bool = false,
    search_path: bool = false,
    stdout_to_dev_null: bool = false,
    stderr_to_dev_null: bool = false,
    child_inherits_stdin: bool = false,
    file_and_argv_zero: bool = false,
    search_path_from_envp: bool = false,
    cloexec_pipes: bool = false,
    child_inherits_stdout: bool = false,
    child_inherits_stderr: bool = false,
    stdin_from_dev_null: bool = false,
    _: u20 = 0,
};
/// Struct [StatBuf](https://docs.gtk.org/glib/struct.StatBuf.html)
pub const StatBuf = opaque {};
/// Struct [String](https://docs.gtk.org/glib/struct.String.html)
pub const String = extern struct {
    str: ?[*:0]const u8,
    len: u64,
    allocated_len: u64,
    /// ctor [new](https://docs.gtk.org/glib/ctor.String.new.html)
    pub fn new(_init: ?[*:0]const u8) *String {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *String, .{ .name = "g_string_new" });
        const ret = cFn(_init);
        return ret;
    }
    /// ctor [new_len](https://docs.gtk.org/glib/ctor.String.new_len.html)
    pub fn newLen(_init: [*:0]const u8, _len: i64) *String {
        const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) *String, .{ .name = "g_string_new_len" });
        const ret = cFn(_init, _len);
        return ret;
    }
    /// ctor [new_take](https://docs.gtk.org/glib/ctor.String.new_take.html)
    pub fn newTake(_init: ?[*:0]const u8) *String {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *String, .{ .name = "g_string_new_take" });
        const ret = cFn(_init);
        return ret;
    }
    /// ctor [sized_new](https://docs.gtk.org/glib/ctor.String.sized_new.html)
    pub fn sizedNew(_dfl_size: u64) *String {
        const cFn = @extern(*const fn (u64) callconv(.c) *String, .{ .name = "g_string_sized_new" });
        const ret = cFn(_dfl_size);
        return ret;
    }
    /// method [append](https://docs.gtk.org/glib/method.String.append.html)
    pub fn append(self: *String, _val: [*:0]const u8) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8) callconv(.c) *glib.String, .{ .name = "g_string_append" });
        const ret = cFn(self, _val);
        return ret;
    }
    /// method [append_c](https://docs.gtk.org/glib/method.String.append_c.html)
    pub fn appendC(self: *String, _c: i8) *glib.String {
        const cFn = @extern(*const fn (*String, i8) callconv(.c) *glib.String, .{ .name = "g_string_append_c" });
        const ret = cFn(self, _c);
        return ret;
    }
    /// method [append_len](https://docs.gtk.org/glib/method.String.append_len.html)
    pub fn appendLen(self: *String, _val: [*:0]const u8, _len: i64) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8, i64) callconv(.c) *glib.String, .{ .name = "g_string_append_len" });
        const ret = cFn(self, _val, _len);
        return ret;
    }
    /// method [append_unichar](https://docs.gtk.org/glib/method.String.append_unichar.html)
    pub fn appendUnichar(self: *String, _wc: core.Unichar) *glib.String {
        const cFn = @extern(*const fn (*String, core.Unichar) callconv(.c) *glib.String, .{ .name = "g_string_append_unichar" });
        const ret = cFn(self, _wc);
        return ret;
    }
    /// method [append_uri_escaped](https://docs.gtk.org/glib/method.String.append_uri_escaped.html)
    pub fn appendUriEscaped(self: *String, _unescaped: [*:0]const u8, _reserved_chars_allowed: [*:0]const u8, _allow_utf8: bool) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8, [*:0]const u8, bool) callconv(.c) *glib.String, .{ .name = "g_string_append_uri_escaped" });
        const ret = cFn(self, _unescaped, _reserved_chars_allowed, _allow_utf8);
        return ret;
    }
    /// method [ascii_down](https://docs.gtk.org/glib/method.String.ascii_down.html)
    pub fn asciiDown(self: *String) *glib.String {
        const cFn = @extern(*const fn (*String) callconv(.c) *glib.String, .{ .name = "g_string_ascii_down" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ascii_up](https://docs.gtk.org/glib/method.String.ascii_up.html)
    pub fn asciiUp(self: *String) *glib.String {
        const cFn = @extern(*const fn (*String) callconv(.c) *glib.String, .{ .name = "g_string_ascii_up" });
        const ret = cFn(self);
        return ret;
    }
    /// method [assign](https://docs.gtk.org/glib/method.String.assign.html)
    pub fn assign(self: *String, _rval: [*:0]const u8) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8) callconv(.c) *glib.String, .{ .name = "g_string_assign" });
        const ret = cFn(self, _rval);
        return ret;
    }
    /// Deprecated:
    /// method [down](https://docs.gtk.org/glib/method.String.down.html)
    pub const down = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn down(self: *String) *glib.String {
            const cFn = @extern(*const fn (*String) callconv(.c) *glib.String, .{ .name = "g_string_down" });
            const ret = cFn(self);
            return ret;
        }
    }.down;
    /// method [equal](https://docs.gtk.org/glib/method.String.equal.html)
    pub fn equal(self: *String, _v2: *glib.String) bool {
        const cFn = @extern(*const fn (*String, *glib.String) callconv(.c) bool, .{ .name = "g_string_equal" });
        const ret = cFn(self, _v2);
        return ret;
    }
    /// method [erase](https://docs.gtk.org/glib/method.String.erase.html)
    pub fn erase(self: *String, _pos: i64, _len: i64) *glib.String {
        const cFn = @extern(*const fn (*String, i64, i64) callconv(.c) *glib.String, .{ .name = "g_string_erase" });
        const ret = cFn(self, _pos, _len);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.String.free.html)
    pub fn free(self: *String, _free_segment: bool) ?[*:0]u8 {
        const cFn = @extern(*const fn (*String, bool) callconv(.c) ?[*:0]u8, .{ .name = "g_string_free" });
        const ret = cFn(self, _free_segment);
        return ret;
    }
    /// method [free_and_steal](https://docs.gtk.org/glib/method.String.free_and_steal.html)
    pub fn freeAndSteal(self: *String) [*:0]u8 {
        const cFn = @extern(*const fn (*String) callconv(.c) [*:0]u8, .{ .name = "g_string_free_and_steal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free_to_bytes](https://docs.gtk.org/glib/method.String.free_to_bytes.html)
    pub fn freeToBytes(self: *String) *glib.Bytes {
        const cFn = @extern(*const fn (*String) callconv(.c) *glib.Bytes, .{ .name = "g_string_free_to_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/glib/method.String.hash.html)
    pub fn hash(self: *String) u32 {
        const cFn = @extern(*const fn (*String) callconv(.c) u32, .{ .name = "g_string_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/glib/method.String.insert.html)
    pub fn insert(self: *String, _pos: i64, _val: [*:0]const u8) *glib.String {
        const cFn = @extern(*const fn (*String, i64, [*:0]const u8) callconv(.c) *glib.String, .{ .name = "g_string_insert" });
        const ret = cFn(self, _pos, _val);
        return ret;
    }
    /// method [insert_c](https://docs.gtk.org/glib/method.String.insert_c.html)
    pub fn insertC(self: *String, _pos: i64, _c: i8) *glib.String {
        const cFn = @extern(*const fn (*String, i64, i8) callconv(.c) *glib.String, .{ .name = "g_string_insert_c" });
        const ret = cFn(self, _pos, _c);
        return ret;
    }
    /// method [insert_len](https://docs.gtk.org/glib/method.String.insert_len.html)
    pub fn insertLen(self: *String, _pos: i64, _val: [*:0]const u8, _len: i64) *glib.String {
        const cFn = @extern(*const fn (*String, i64, [*:0]const u8, i64) callconv(.c) *glib.String, .{ .name = "g_string_insert_len" });
        const ret = cFn(self, _pos, _val, _len);
        return ret;
    }
    /// method [insert_unichar](https://docs.gtk.org/glib/method.String.insert_unichar.html)
    pub fn insertUnichar(self: *String, _pos: i64, _wc: core.Unichar) *glib.String {
        const cFn = @extern(*const fn (*String, i64, core.Unichar) callconv(.c) *glib.String, .{ .name = "g_string_insert_unichar" });
        const ret = cFn(self, _pos, _wc);
        return ret;
    }
    /// method [overwrite](https://docs.gtk.org/glib/method.String.overwrite.html)
    pub fn overwrite(self: *String, _pos: u64, _val: [*:0]const u8) *glib.String {
        const cFn = @extern(*const fn (*String, u64, [*:0]const u8) callconv(.c) *glib.String, .{ .name = "g_string_overwrite" });
        const ret = cFn(self, _pos, _val);
        return ret;
    }
    /// method [overwrite_len](https://docs.gtk.org/glib/method.String.overwrite_len.html)
    pub fn overwriteLen(self: *String, _pos: u64, _val: [*:0]const u8, _len: i64) *glib.String {
        const cFn = @extern(*const fn (*String, u64, [*:0]const u8, i64) callconv(.c) *glib.String, .{ .name = "g_string_overwrite_len" });
        const ret = cFn(self, _pos, _val, _len);
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/glib/method.String.prepend.html)
    pub fn prepend(self: *String, _val: [*:0]const u8) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8) callconv(.c) *glib.String, .{ .name = "g_string_prepend" });
        const ret = cFn(self, _val);
        return ret;
    }
    /// method [prepend_c](https://docs.gtk.org/glib/method.String.prepend_c.html)
    pub fn prependC(self: *String, _c: i8) *glib.String {
        const cFn = @extern(*const fn (*String, i8) callconv(.c) *glib.String, .{ .name = "g_string_prepend_c" });
        const ret = cFn(self, _c);
        return ret;
    }
    /// method [prepend_len](https://docs.gtk.org/glib/method.String.prepend_len.html)
    pub fn prependLen(self: *String, _val: [*:0]const u8, _len: i64) *glib.String {
        const cFn = @extern(*const fn (*String, [*:0]const u8, i64) callconv(.c) *glib.String, .{ .name = "g_string_prepend_len" });
        const ret = cFn(self, _val, _len);
        return ret;
    }
    /// method [prepend_unichar](https://docs.gtk.org/glib/method.String.prepend_unichar.html)
    pub fn prependUnichar(self: *String, _wc: core.Unichar) *glib.String {
        const cFn = @extern(*const fn (*String, core.Unichar) callconv(.c) *glib.String, .{ .name = "g_string_prepend_unichar" });
        const ret = cFn(self, _wc);
        return ret;
    }
    /// method [replace](https://docs.gtk.org/glib/method.String.replace.html)
    pub fn replace(self: *String, _find: [*:0]const u8, _replace: [*:0]const u8, _limit: u32) u32 {
        const cFn = @extern(*const fn (*String, [*:0]const u8, [*:0]const u8, u32) callconv(.c) u32, .{ .name = "g_string_replace" });
        const ret = cFn(self, _find, _replace, _limit);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/glib/method.String.set_size.html)
    pub fn setSize(self: *String, _len: u64) *glib.String {
        const cFn = @extern(*const fn (*String, u64) callconv(.c) *glib.String, .{ .name = "g_string_set_size" });
        const ret = cFn(self, _len);
        return ret;
    }
    /// method [truncate](https://docs.gtk.org/glib/method.String.truncate.html)
    pub fn truncate(self: *String, _len: u64) *glib.String {
        const cFn = @extern(*const fn (*String, u64) callconv(.c) *glib.String, .{ .name = "g_string_truncate" });
        const ret = cFn(self, _len);
        return ret;
    }
    /// Deprecated:
    /// method [up](https://docs.gtk.org/glib/method.String.up.html)
    pub const up = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn up(self: *String) *glib.String {
            const cFn = @extern(*const fn (*String) callconv(.c) *glib.String, .{ .name = "g_string_up" });
            const ret = cFn(self);
            return ret;
        }
    }.up;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_gstring_get_type" });
        return cFn();
    }
};
/// Struct [StringChunk](https://docs.gtk.org/glib/struct.StringChunk.html)
pub const StringChunk = opaque {
    /// method [clear](https://docs.gtk.org/glib/method.StringChunk.clear.html)
    pub fn clear(self: *StringChunk) void {
        const cFn = @extern(*const fn (*StringChunk) callconv(.c) void, .{ .name = "g_string_chunk_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.StringChunk.free.html)
    pub fn free(self: *StringChunk) void {
        const cFn = @extern(*const fn (*StringChunk) callconv(.c) void, .{ .name = "g_string_chunk_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/glib/method.StringChunk.insert.html)
    pub fn insert(self: *StringChunk, _string: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (*StringChunk, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_string_chunk_insert" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [insert_const](https://docs.gtk.org/glib/method.StringChunk.insert_const.html)
    pub fn insertConst(self: *StringChunk, _string: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (*StringChunk, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_string_chunk_insert_const" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [insert_len](https://docs.gtk.org/glib/method.StringChunk.insert_len.html)
    pub fn insertLen(self: *StringChunk, _string: [*:0]const u8, _len: i64) [*:0]u8 {
        const cFn = @extern(*const fn (*StringChunk, [*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_string_chunk_insert_len" });
        const ret = cFn(self, _string, _len);
        return ret;
    }
};
/// Struct [StrvBuilder](https://docs.gtk.org/glib/struct.StrvBuilder.html)
pub const StrvBuilder = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.StrvBuilder.new.html)
    pub fn new() *StrvBuilder {
        const cFn = @extern(*const fn () callconv(.c) *StrvBuilder, .{ .name = "g_strv_builder_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add](https://docs.gtk.org/glib/method.StrvBuilder.add.html)
    pub fn add(self: *StrvBuilder, _value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StrvBuilder, [*:0]const u8) callconv(.c) void, .{ .name = "g_strv_builder_add" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [addv](https://docs.gtk.org/glib/method.StrvBuilder.addv.html)
    pub fn addv(self: *StrvBuilder, _value: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*StrvBuilder, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_strv_builder_addv" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [end](https://docs.gtk.org/glib/method.StrvBuilder.end.html)
    pub fn end(self: *StrvBuilder) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*StrvBuilder) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_strv_builder_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.StrvBuilder.ref.html)
    pub fn ref(self: *StrvBuilder) *glib.StrvBuilder {
        const cFn = @extern(*const fn (*StrvBuilder) callconv(.c) *glib.StrvBuilder, .{ .name = "g_strv_builder_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [take](https://docs.gtk.org/glib/method.StrvBuilder.take.html)
    pub fn take(self: *StrvBuilder, _value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StrvBuilder, [*:0]const u8) callconv(.c) void, .{ .name = "g_strv_builder_take" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.StrvBuilder.unref.html)
    pub fn unref(self: *StrvBuilder) void {
        const cFn = @extern(*const fn (*StrvBuilder) callconv(.c) void, .{ .name = "g_strv_builder_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_strv_builder_get_type" });
        return cFn();
    }
};
/// const [TEST_OPTION_ISOLATE_DIRS](https://docs.gtk.org/glib/const.TEST_OPTION_ISOLATE_DIRS.html)
pub const TEST_OPTION_ISOLATE_DIRS = "isolate_dirs";
/// const [TIME_SPAN_DAY](https://docs.gtk.org/glib/const.TIME_SPAN_DAY.html)
pub const TIME_SPAN_DAY = 86400000000;
/// const [TIME_SPAN_HOUR](https://docs.gtk.org/glib/const.TIME_SPAN_HOUR.html)
pub const TIME_SPAN_HOUR = 3600000000;
/// const [TIME_SPAN_MILLISECOND](https://docs.gtk.org/glib/const.TIME_SPAN_MILLISECOND.html)
pub const TIME_SPAN_MILLISECOND = 1000;
/// const [TIME_SPAN_MINUTE](https://docs.gtk.org/glib/const.TIME_SPAN_MINUTE.html)
pub const TIME_SPAN_MINUTE = 60000000;
/// const [TIME_SPAN_SECOND](https://docs.gtk.org/glib/const.TIME_SPAN_SECOND.html)
pub const TIME_SPAN_SECOND = 1000000;
/// Struct [TestCase](https://docs.gtk.org/glib/struct.TestCase.html)
pub const TestCase = opaque {
    /// method [free](https://docs.gtk.org/glib/method.TestCase.free.html)
    pub fn free(self: *TestCase) void {
        const cFn = @extern(*const fn (*TestCase) callconv(.c) void, .{ .name = "g_test_case_free" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [TestConfig](https://docs.gtk.org/glib/struct.TestConfig.html)
pub const TestConfig = extern struct {
    test_initialized: bool,
    test_quick: bool,
    test_perf: bool,
    test_verbose: bool,
    test_quiet: bool,
    test_undefined: bool,
};
/// callback [TestDataFunc](https://docs.gtk.org/glib/callback.TestDataFunc.html)
pub const TestDataFunc = *const fn (_user_data: ?*anyopaque) callconv(.c) void;
/// Enum [TestFileType](https://docs.gtk.org/glib/enum.TestFileType.html)
pub const TestFileType = enum(u32) {
    dist = 0,
    built = 1,
};
/// callback [TestFixtureFunc](https://docs.gtk.org/glib/callback.TestFixtureFunc.html)
pub const TestFixtureFunc = *const fn (_fixture: *anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [TestFunc](https://docs.gtk.org/glib/callback.TestFunc.html)
pub const TestFunc = *const fn () callconv(.c) void;
/// Struct [TestLogBuffer](https://docs.gtk.org/glib/struct.TestLogBuffer.html)
pub const TestLogBuffer = extern struct {
    data: ?*glib.String,
    msgs: ?*core.SList,
    /// method [free](https://docs.gtk.org/glib/method.TestLogBuffer.free.html)
    pub fn free(self: *TestLogBuffer) void {
        const cFn = @extern(*const fn (*TestLogBuffer) callconv(.c) void, .{ .name = "g_test_log_buffer_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push](https://docs.gtk.org/glib/method.TestLogBuffer.push.html)
    pub fn push(self: *TestLogBuffer, _n_bytes: u32, _bytes: *u8) void {
        const cFn = @extern(*const fn (*TestLogBuffer, u32, *u8) callconv(.c) void, .{ .name = "g_test_log_buffer_push" });
        const ret = cFn(self, _n_bytes, _bytes);
        return ret;
    }
};
/// callback [TestLogFatalFunc](https://docs.gtk.org/glib/callback.TestLogFatalFunc.html)
pub const TestLogFatalFunc = *const fn (_log_domain: [*:0]const u8, _log_level: glib.LogLevelFlags, _message: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [TestLogMsg](https://docs.gtk.org/glib/struct.TestLogMsg.html)
pub const TestLogMsg = extern struct {
    log_type: glib.TestLogType,
    n_strings: u32,
    strings: ?[*:0]const u8,
    n_nums: u32,
    nums: ?*anyopaque,
    /// method [free](https://docs.gtk.org/glib/method.TestLogMsg.free.html)
    pub fn free(self: *TestLogMsg) void {
        const cFn = @extern(*const fn (*TestLogMsg) callconv(.c) void, .{ .name = "g_test_log_msg_free" });
        const ret = cFn(self);
        return ret;
    }
};
/// Enum [TestLogType](https://docs.gtk.org/glib/enum.TestLogType.html)
pub const TestLogType = enum(u32) {
    none = 0,
    @"error" = 1,
    start_binary = 2,
    list_case = 3,
    skip_case = 4,
    start_case = 5,
    stop_case = 6,
    min_result = 7,
    max_result = 8,
    message = 9,
    start_suite = 10,
    stop_suite = 11,
};
/// Enum [TestResult](https://docs.gtk.org/glib/enum.TestResult.html)
pub const TestResult = enum(u32) {
    success = 0,
    skipped = 1,
    failure = 2,
    incomplete = 3,
};
/// Flags [TestSubprocessFlags](https://docs.gtk.org/glib/flags.TestSubprocessFlags.html)
pub const TestSubprocessFlags = packed struct(u32) {
    inherit_stdin: bool = false,
    inherit_stdout: bool = false,
    inherit_stderr: bool = false,
    _: u29 = 0,
};
/// Struct [TestSuite](https://docs.gtk.org/glib/struct.TestSuite.html)
pub const TestSuite = opaque {
    /// method [add](https://docs.gtk.org/glib/method.TestSuite.add.html)
    pub fn add(self: *TestSuite, _test_case: *glib.TestCase) void {
        const cFn = @extern(*const fn (*TestSuite, *glib.TestCase) callconv(.c) void, .{ .name = "g_test_suite_add" });
        const ret = cFn(self, _test_case);
        return ret;
    }
    /// method [add_suite](https://docs.gtk.org/glib/method.TestSuite.add_suite.html)
    pub fn addSuite(self: *TestSuite, _nestedsuite: *glib.TestSuite) void {
        const cFn = @extern(*const fn (*TestSuite, *glib.TestSuite) callconv(.c) void, .{ .name = "g_test_suite_add_suite" });
        const ret = cFn(self, _nestedsuite);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.TestSuite.free.html)
    pub fn free(self: *TestSuite) void {
        const cFn = @extern(*const fn (*TestSuite) callconv(.c) void, .{ .name = "g_test_suite_free" });
        const ret = cFn(self);
        return ret;
    }
};
/// Deprecated:
/// Flags [TestTrapFlags](https://docs.gtk.org/glib/flags.TestTrapFlags.html)
pub const TestTrapFlags = if (config.disable_deprecated) core.Deprecated else packed struct(u32) {
    _0: u7 = 0,
    silence_stdout: bool = false,
    silence_stderr: bool = false,
    inherit_stdin: bool = false,
    _: u22 = 0,
};
/// Struct [Thread](https://docs.gtk.org/glib/struct.Thread.html)
pub const Thread = extern struct {
    func: ?*const fn (_data: ?*anyopaque) callconv(.c) ?*anyopaque,
    data: ?*anyopaque,
    joinable: bool,
    priority: ?*anyopaque,
    /// ctor [new](https://docs.gtk.org/glib/ctor.Thread.new.html)
    pub fn new(_name: ?[*:0]const u8, func: anytype, func_args: anytype) *Thread {
        var closure_func = core.zig_closure(func, func_args, &.{?*anyopaque});
        closure_func.setOnce();
        const _func: glib.ThreadFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (?[*:0]const u8, glib.ThreadFunc, ?*anyopaque) callconv(.c) *Thread, .{ .name = "g_thread_new" });
        const ret = cFn(_name, _func, @ptrCast(_data));
        return ret;
    }
    /// ctor [try_new](https://docs.gtk.org/glib/ctor.Thread.try_new.html)
    pub fn tryNew(_name: ?[*:0]const u8, func: anytype, func_args: anytype, _error: *?*core.Error) error{GError}!*Thread {
        var closure_func = core.zig_closure(func, func_args, &.{?*anyopaque});
        closure_func.setOnce();
        const _func: glib.ThreadFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (?[*:0]const u8, glib.ThreadFunc, ?*anyopaque, *?*core.Error) callconv(.c) *Thread, .{ .name = "g_thread_try_new" });
        const ret = cFn(_name, _func, @ptrCast(_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [join](https://docs.gtk.org/glib/method.Thread.join.html)
    pub fn join(self: *Thread) ?*anyopaque {
        const cFn = @extern(*const fn (*Thread) callconv(.c) ?*anyopaque, .{ .name = "g_thread_join" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Thread.ref.html)
    pub fn ref(self: *Thread) *glib.Thread {
        const cFn = @extern(*const fn (*Thread) callconv(.c) *glib.Thread, .{ .name = "g_thread_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Thread.unref.html)
    pub fn unref(self: *Thread) void {
        const cFn = @extern(*const fn (*Thread) callconv(.c) void, .{ .name = "g_thread_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.Thread.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_error_quark" });
        const ret = cFn();
        return ret;
    }
    /// type func [exit](https://docs.gtk.org/glib/type_func.Thread.exit.html)
    pub fn exit(_retval: ?*anyopaque) void {
        const cFn = @extern(*const fn (?*anyopaque) callconv(.c) void, .{ .name = "g_thread_exit" });
        const ret = cFn(@ptrCast(_retval));
        return ret;
    }
    /// type func [self](https://docs.gtk.org/glib/type_func.Thread.self.html)
    pub fn getSelf() *glib.Thread {
        const cFn = @extern(*const fn () callconv(.c) *glib.Thread, .{ .name = "g_thread_self" });
        const ret = cFn();
        return ret;
    }
    /// type func [yield](https://docs.gtk.org/glib/type_func.Thread.yield.html)
    pub fn yield() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_thread_yield" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_thread_get_type" });
        return cFn();
    }
};
/// Error [ThreadError](https://docs.gtk.org/glib/error.ThreadError.html)
pub const ThreadError = enum(u32) {
    thread_error_again = 0,
};
/// callback [ThreadFunc](https://docs.gtk.org/glib/callback.ThreadFunc.html)
pub const ThreadFunc = *const fn (_data: ?*anyopaque) callconv(.c) ?*anyopaque;
/// Struct [ThreadPool](https://docs.gtk.org/glib/struct.ThreadPool.html)
pub const ThreadPool = extern struct {
    func: ?*const fn (_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void,
    user_data: ?*anyopaque,
    exclusive: bool,
    /// method [free](https://docs.gtk.org/glib/method.ThreadPool.free.html)
    pub fn free(self: *ThreadPool, _immediate: bool, _wait_: bool) void {
        const cFn = @extern(*const fn (*ThreadPool, bool, bool) callconv(.c) void, .{ .name = "g_thread_pool_free" });
        const ret = cFn(self, _immediate, _wait_);
        return ret;
    }
    /// method [get_max_threads](https://docs.gtk.org/glib/method.ThreadPool.get_max_threads.html)
    pub fn getMaxThreads(self: *ThreadPool) i32 {
        const cFn = @extern(*const fn (*ThreadPool) callconv(.c) i32, .{ .name = "g_thread_pool_get_max_threads" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_num_threads](https://docs.gtk.org/glib/method.ThreadPool.get_num_threads.html)
    pub fn getNumThreads(self: *ThreadPool) u32 {
        const cFn = @extern(*const fn (*ThreadPool) callconv(.c) u32, .{ .name = "g_thread_pool_get_num_threads" });
        const ret = cFn(self);
        return ret;
    }
    /// method [move_to_front](https://docs.gtk.org/glib/method.ThreadPool.move_to_front.html)
    pub fn moveToFront(self: *ThreadPool, _data: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*ThreadPool, ?*anyopaque) callconv(.c) bool, .{ .name = "g_thread_pool_move_to_front" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [push](https://docs.gtk.org/glib/method.ThreadPool.push.html)
    pub fn push(self: *ThreadPool, _data: ?*anyopaque, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*ThreadPool, ?*anyopaque, *?*core.Error) callconv(.c) bool, .{ .name = "g_thread_pool_push" });
        const ret = cFn(self, @ptrCast(_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_max_threads](https://docs.gtk.org/glib/method.ThreadPool.set_max_threads.html)
    pub fn setMaxThreads(self: *ThreadPool, _max_threads: i32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*ThreadPool, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_thread_pool_set_max_threads" });
        const ret = cFn(self, _max_threads, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [unprocessed](https://docs.gtk.org/glib/method.ThreadPool.unprocessed.html)
    pub fn unprocessed(self: *ThreadPool) u32 {
        const cFn = @extern(*const fn (*ThreadPool) callconv(.c) u32, .{ .name = "g_thread_pool_unprocessed" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [get_max_idle_time](https://docs.gtk.org/glib/type_func.ThreadPool.get_max_idle_time.html)
    pub fn getMaxIdleTime() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_pool_get_max_idle_time" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_max_unused_threads](https://docs.gtk.org/glib/type_func.ThreadPool.get_max_unused_threads.html)
    pub fn getMaxUnusedThreads() i32 {
        const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "g_thread_pool_get_max_unused_threads" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_num_unused_threads](https://docs.gtk.org/glib/type_func.ThreadPool.get_num_unused_threads.html)
    pub fn getNumUnusedThreads() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_pool_get_num_unused_threads" });
        const ret = cFn();
        return ret;
    }
    /// type func [set_max_idle_time](https://docs.gtk.org/glib/type_func.ThreadPool.set_max_idle_time.html)
    pub fn setMaxIdleTime(_interval: u32) void {
        const cFn = @extern(*const fn (u32) callconv(.c) void, .{ .name = "g_thread_pool_set_max_idle_time" });
        const ret = cFn(_interval);
        return ret;
    }
    /// type func [set_max_unused_threads](https://docs.gtk.org/glib/type_func.ThreadPool.set_max_unused_threads.html)
    pub fn setMaxUnusedThreads(_max_threads: i32) void {
        const cFn = @extern(*const fn (i32) callconv(.c) void, .{ .name = "g_thread_pool_set_max_unused_threads" });
        const ret = cFn(_max_threads);
        return ret;
    }
    /// type func [stop_unused_threads](https://docs.gtk.org/glib/type_func.ThreadPool.stop_unused_threads.html)
    pub fn stopUnusedThreads() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_thread_pool_stop_unused_threads" });
        const ret = cFn();
        return ret;
    }
};
/// Enum [TimeType](https://docs.gtk.org/glib/enum.TimeType.html)
pub const TimeType = enum(u32) {
    standard = 0,
    daylight = 1,
    universal = 2,
};
/// Deprecated:
/// Struct [TimeVal](https://docs.gtk.org/glib/struct.TimeVal.html)
pub const TimeVal = if (config.disable_deprecated) core.Deprecated else extern struct {
    tv_sec: i64,
    tv_usec: i64,
    /// Deprecated:
    /// method [add](https://docs.gtk.org/glib/method.TimeVal.add.html)
    pub const add = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn add(self: *TimeVal, _microseconds: i64) void {
            const cFn = @extern(*const fn (*TimeVal, i64) callconv(.c) void, .{ .name = "g_time_val_add" });
            const ret = cFn(self, _microseconds);
            return ret;
        }
    }.add;
    /// Deprecated:
    /// method [to_iso8601](https://docs.gtk.org/glib/method.TimeVal.to_iso8601.html)
    pub const toIso8601 = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toIso8601(self: *TimeVal) ?[*:0]u8 {
            const cFn = @extern(*const fn (*TimeVal) callconv(.c) ?[*:0]u8, .{ .name = "g_time_val_to_iso8601" });
            const ret = cFn(self);
            return ret;
        }
    }.toIso8601;
    /// Deprecated:
    /// type func [from_iso8601](https://docs.gtk.org/glib/type_func.TimeVal.from_iso8601.html)
    pub const fromIso8601 = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn fromIso8601(_iso_date: [*:0]const u8, _time_: *glib.TimeVal) bool {
            const cFn = @extern(*const fn ([*:0]const u8, *glib.TimeVal) callconv(.c) bool, .{ .name = "g_time_val_from_iso8601" });
            const ret = cFn(_iso_date, _time_);
            return ret;
        }
    }.fromIso8601;
};
/// Struct [TimeZone](https://docs.gtk.org/glib/struct.TimeZone.html)
pub const TimeZone = opaque {
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/glib/ctor.TimeZone.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_identifier: ?[*:0]const u8) *TimeZone {
            const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *TimeZone, .{ .name = "g_time_zone_new" });
            const ret = cFn(_identifier);
            return ret;
        }
    }.new;
    /// ctor [new_identifier](https://docs.gtk.org/glib/ctor.TimeZone.new_identifier.html)
    pub fn newIdentifier(_identifier: ?[*:0]const u8) ?*TimeZone {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) ?*TimeZone, .{ .name = "g_time_zone_new_identifier" });
        const ret = cFn(_identifier);
        return ret;
    }
    /// ctor [new_local](https://docs.gtk.org/glib/ctor.TimeZone.new_local.html)
    pub fn newLocal() *TimeZone {
        const cFn = @extern(*const fn () callconv(.c) *TimeZone, .{ .name = "g_time_zone_new_local" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_offset](https://docs.gtk.org/glib/ctor.TimeZone.new_offset.html)
    pub fn newOffset(_seconds: i32) *TimeZone {
        const cFn = @extern(*const fn (i32) callconv(.c) *TimeZone, .{ .name = "g_time_zone_new_offset" });
        const ret = cFn(_seconds);
        return ret;
    }
    /// ctor [new_utc](https://docs.gtk.org/glib/ctor.TimeZone.new_utc.html)
    pub fn newUtc() *TimeZone {
        const cFn = @extern(*const fn () callconv(.c) *TimeZone, .{ .name = "g_time_zone_new_utc" });
        const ret = cFn();
        return ret;
    }
    /// method [adjust_time](https://docs.gtk.org/glib/method.TimeZone.adjust_time.html)
    pub fn adjustTime(self: *TimeZone, _type: glib.TimeType, _time_: *i64) i32 {
        const cFn = @extern(*const fn (*TimeZone, glib.TimeType, *i64) callconv(.c) i32, .{ .name = "g_time_zone_adjust_time" });
        const ret = cFn(self, _type, _time_);
        return ret;
    }
    /// method [find_interval](https://docs.gtk.org/glib/method.TimeZone.find_interval.html)
    pub fn findInterval(self: *TimeZone, _type: glib.TimeType, _time_: i64) i32 {
        const cFn = @extern(*const fn (*TimeZone, glib.TimeType, i64) callconv(.c) i32, .{ .name = "g_time_zone_find_interval" });
        const ret = cFn(self, _type, _time_);
        return ret;
    }
    /// method [get_abbreviation](https://docs.gtk.org/glib/method.TimeZone.get_abbreviation.html)
    pub fn getAbbreviation(self: *TimeZone, _interval: i32) [*:0]u8 {
        const cFn = @extern(*const fn (*TimeZone, i32) callconv(.c) [*:0]u8, .{ .name = "g_time_zone_get_abbreviation" });
        const ret = cFn(self, _interval);
        return ret;
    }
    /// method [get_identifier](https://docs.gtk.org/glib/method.TimeZone.get_identifier.html)
    pub fn getIdentifier(self: *TimeZone) [*:0]u8 {
        const cFn = @extern(*const fn (*TimeZone) callconv(.c) [*:0]u8, .{ .name = "g_time_zone_get_identifier" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/glib/method.TimeZone.get_offset.html)
    pub fn getOffset(self: *TimeZone, _interval: i32) i32 {
        const cFn = @extern(*const fn (*TimeZone, i32) callconv(.c) i32, .{ .name = "g_time_zone_get_offset" });
        const ret = cFn(self, _interval);
        return ret;
    }
    /// method [is_dst](https://docs.gtk.org/glib/method.TimeZone.is_dst.html)
    pub fn isDst(self: *TimeZone, _interval: i32) bool {
        const cFn = @extern(*const fn (*TimeZone, i32) callconv(.c) bool, .{ .name = "g_time_zone_is_dst" });
        const ret = cFn(self, _interval);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.TimeZone.ref.html)
    pub fn ref(self: *TimeZone) *glib.TimeZone {
        const cFn = @extern(*const fn (*TimeZone) callconv(.c) *glib.TimeZone, .{ .name = "g_time_zone_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.TimeZone.unref.html)
    pub fn unref(self: *TimeZone) void {
        const cFn = @extern(*const fn (*TimeZone) callconv(.c) void, .{ .name = "g_time_zone_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_time_zone_get_type" });
        return cFn();
    }
};
/// Struct [Timer](https://docs.gtk.org/glib/struct.Timer.html)
pub const Timer = opaque {
    /// method [continue](https://docs.gtk.org/glib/method.Timer.continue.html)
    pub fn @"continue"(self: *Timer) void {
        const cFn = @extern(*const fn (*Timer) callconv(.c) void, .{ .name = "g_timer_continue" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.Timer.destroy.html)
    pub fn destroy(self: *Timer) void {
        const cFn = @extern(*const fn (*Timer) callconv(.c) void, .{ .name = "g_timer_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [elapsed](https://docs.gtk.org/glib/method.Timer.elapsed.html)
    pub fn elapsed(self: *Timer, _microseconds: *u64) f64 {
        const cFn = @extern(*const fn (*Timer, *u64) callconv(.c) f64, .{ .name = "g_timer_elapsed" });
        const ret = cFn(self, _microseconds);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/glib/method.Timer.is_active.html)
    pub fn isActive(self: *Timer) bool {
        const cFn = @extern(*const fn (*Timer) callconv(.c) bool, .{ .name = "g_timer_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/glib/method.Timer.reset.html)
    pub fn reset(self: *Timer) void {
        const cFn = @extern(*const fn (*Timer) callconv(.c) void, .{ .name = "g_timer_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [start](https://docs.gtk.org/glib/method.Timer.start.html)
    pub fn start(self: *Timer) void {
        const cFn = @extern(*const fn (*Timer) callconv(.c) void, .{ .name = "g_timer_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop](https://docs.gtk.org/glib/method.Timer.stop.html)
    pub fn stop(self: *Timer) void {
        const cFn = @extern(*const fn (*Timer) callconv(.c) void, .{ .name = "g_timer_stop" });
        const ret = cFn(self);
        return ret;
    }
};
/// Enum [TokenType](https://docs.gtk.org/glib/enum.TokenType.html)
pub const TokenType = enum(u32) {
    eof = 0,
    left_paren = 40,
    right_paren = 41,
    left_curly = 123,
    right_curly = 125,
    left_brace = 91,
    right_brace = 93,
    equal_sign = 61,
    comma = 44,
    none = 256,
    @"error" = 257,
    char = 258,
    binary = 259,
    octal = 260,
    int = 261,
    hex = 262,
    float = 263,
    string = 264,
    symbol = 265,
    identifier = 266,
    identifier_null = 267,
    comment_single = 268,
    comment_multi = 269,
};
/// Union [TokenValue](https://docs.gtk.org/glib/union.TokenValue.html)
pub const TokenValue = extern union {
    v_symbol: ?*anyopaque,
    v_identifier: ?[*:0]const u8,
    v_binary: u64,
    v_octal: u64,
    v_int: u64,
    v_int64: u64,
    v_float: f64,
    v_hex: u64,
    v_string: ?[*:0]const u8,
    v_comment: ?[*:0]const u8,
    v_char: u8,
    v_error: u32,
};
/// callback [TranslateFunc](https://docs.gtk.org/glib/callback.TranslateFunc.html)
pub const TranslateFunc = *const fn (_str: [*:0]const u8, _data: ?*anyopaque) callconv(.c) [*:0]u8;
/// Deprecated:
/// Struct [TrashStack](https://docs.gtk.org/glib/struct.TrashStack.html)
pub const TrashStack = if (config.disable_deprecated) core.Deprecated else extern struct {
    next: ?*glib.TrashStack,
    /// Deprecated:
    /// type func [height](https://docs.gtk.org/glib/type_func.TrashStack.height.html)
    pub const height = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn height(_stack_p: *glib.TrashStack) u32 {
            const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) u32, .{ .name = "g_trash_stack_height" });
            const ret = cFn(_stack_p);
            return ret;
        }
    }.height;
    /// Deprecated:
    /// type func [peek](https://docs.gtk.org/glib/type_func.TrashStack.peek.html)
    pub const peek = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn peek(_stack_p: *glib.TrashStack) ?*anyopaque {
            const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) ?*anyopaque, .{ .name = "g_trash_stack_peek" });
            const ret = cFn(_stack_p);
            return ret;
        }
    }.peek;
    /// Deprecated:
    /// type func [pop](https://docs.gtk.org/glib/type_func.TrashStack.pop.html)
    pub const pop = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pop(_stack_p: *glib.TrashStack) ?*anyopaque {
            const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) ?*anyopaque, .{ .name = "g_trash_stack_pop" });
            const ret = cFn(_stack_p);
            return ret;
        }
    }.pop;
    /// Deprecated:
    /// type func [push](https://docs.gtk.org/glib/type_func.TrashStack.push.html)
    pub const push = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn push(_stack_p: *glib.TrashStack, _data_p: *anyopaque) void {
            const cFn = @extern(*const fn (*glib.TrashStack, *anyopaque) callconv(.c) void, .{ .name = "g_trash_stack_push" });
            const ret = cFn(_stack_p, @ptrCast(_data_p));
            return ret;
        }
    }.push;
};
/// Flags [TraverseFlags](https://docs.gtk.org/glib/flags.TraverseFlags.html)
pub const TraverseFlags = packed struct(u32) {
    leaves: bool = false,
    non_leaves: bool = false,
    _: u30 = 0,
    pub const all: @This() = @bitCast(@as(u32, 3));
    pub const mask: @This() = @bitCast(@as(u32, 3));
};
/// callback [TraverseFunc](https://docs.gtk.org/glib/callback.TraverseFunc.html)
pub const TraverseFunc = *const fn (_key: ?*anyopaque, _value: ?*anyopaque, _data: ?*anyopaque) callconv(.c) bool;
/// callback [TraverseNodeFunc](https://docs.gtk.org/glib/callback.TraverseNodeFunc.html)
pub const TraverseNodeFunc = *const fn (_node: *glib.TreeNode, _data: ?*anyopaque) callconv(.c) bool;
/// Enum [TraverseType](https://docs.gtk.org/glib/enum.TraverseType.html)
pub const TraverseType = enum(u32) {
    in_order = 0,
    pre_order = 1,
    post_order = 2,
    level_order = 3,
};
/// Struct [Tree](https://docs.gtk.org/glib/struct.Tree.html)
pub const Tree = opaque {
    /// ctor [new_full](https://docs.gtk.org/glib/ctor.Tree.new_full.html)
    pub fn newFull(key_compare_func: anytype, key_compare_func_args: anytype, _key_destroy_func: glib.DestroyNotify) *Tree {
        var closure_key_compare_func = core.zig_closure(key_compare_func, key_compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        const _key_compare_func: glib.CompareDataFunc = @ptrCast(closure_key_compare_func.c_closure());
        const _key_compare_data: ?*anyopaque = @ptrCast(closure_key_compare_func.c_data());
        const _value_destroy_func: glib.DestroyNotify = @ptrCast(closure_key_compare_func.c_destroy());
        const cFn = @extern(*const fn (glib.CompareDataFunc, ?*anyopaque, glib.DestroyNotify, glib.DestroyNotify) callconv(.c) *Tree, .{ .name = "g_tree_new_full" });
        const ret = cFn(_key_compare_func, @ptrCast(_key_compare_data), _key_destroy_func, _value_destroy_func);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/glib/method.Tree.destroy.html)
    pub fn destroy(self: *Tree) void {
        const cFn = @extern(*const fn (*Tree) callconv(.c) void, .{ .name = "g_tree_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [foreach](https://docs.gtk.org/glib/method.Tree.foreach.html)
    pub fn foreach(self: *Tree, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
        defer closure_func.deinit();
        const _func: glib.TraverseFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Tree, glib.TraverseFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_tree_foreach" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [foreach_node](https://docs.gtk.org/glib/method.Tree.foreach_node.html)
    pub fn foreachNode(self: *Tree, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, *glib.TreeNode });
        defer closure_func.deinit();
        const _func: glib.TraverseNodeFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Tree, glib.TraverseNodeFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_tree_foreach_node" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [height](https://docs.gtk.org/glib/method.Tree.height.html)
    pub fn height(self: *Tree) i32 {
        const cFn = @extern(*const fn (*Tree) callconv(.c) i32, .{ .name = "g_tree_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/glib/method.Tree.insert.html)
    pub fn insert(self: *Tree, _key: ?*anyopaque, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_tree_insert" });
        const ret = cFn(self, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// method [insert_node](https://docs.gtk.org/glib/method.Tree.insert_node.html)
    pub fn insertNode(self: *Tree, _key: ?*anyopaque, _value: ?*anyopaque) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_insert_node" });
        const ret = cFn(self, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/glib/method.Tree.lookup.html)
    pub fn lookup(self: *Tree, _key: ?*anyopaque) ?*anyopaque {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_tree_lookup" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    /// method [lookup_extended](https://docs.gtk.org/glib/method.Tree.lookup_extended.html)
    pub fn lookupExtended(self: *Tree, _lookup_key: ?*anyopaque) struct {
        ret: bool,
        orig_key: ?*anyopaque,
        value: ?*anyopaque,
    } {
        var orig_key_out: ?*anyopaque = undefined;
        const _orig_key = &orig_key_out;
        var value_out: ?*anyopaque = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*Tree, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_tree_lookup_extended" });
        const ret = cFn(self, @ptrCast(_lookup_key), @ptrCast(_orig_key), @ptrCast(_value));
        return .{ .ret = ret, .orig_key = orig_key_out, .value = value_out };
    }
    /// method [lookup_node](https://docs.gtk.org/glib/method.Tree.lookup_node.html)
    pub fn lookupNode(self: *Tree, _key: ?*anyopaque) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_lookup_node" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    /// method [lower_bound](https://docs.gtk.org/glib/method.Tree.lower_bound.html)
    pub fn lowerBound(self: *Tree, _key: ?*anyopaque) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_lower_bound" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    /// method [nnodes](https://docs.gtk.org/glib/method.Tree.nnodes.html)
    pub fn nnodes(self: *Tree) i32 {
        const cFn = @extern(*const fn (*Tree) callconv(.c) i32, .{ .name = "g_tree_nnodes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [node_first](https://docs.gtk.org/glib/method.Tree.node_first.html)
    pub fn nodeFirst(self: *Tree) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_node_first" });
        const ret = cFn(self);
        return ret;
    }
    /// method [node_last](https://docs.gtk.org/glib/method.Tree.node_last.html)
    pub fn nodeLast(self: *Tree) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_node_last" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Tree.ref.html)
    pub fn ref(self: *Tree) *glib.Tree {
        const cFn = @extern(*const fn (*Tree) callconv(.c) *glib.Tree, .{ .name = "g_tree_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/glib/method.Tree.remove.html)
    pub fn remove(self: *Tree, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) bool, .{ .name = "g_tree_remove" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/glib/method.Tree.remove_all.html)
    pub fn removeAll(self: *Tree) void {
        const cFn = @extern(*const fn (*Tree) callconv(.c) void, .{ .name = "g_tree_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [replace](https://docs.gtk.org/glib/method.Tree.replace.html)
    pub fn replace(self: *Tree, _key: ?*anyopaque, _value: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_tree_replace" });
        const ret = cFn(self, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// method [replace_node](https://docs.gtk.org/glib/method.Tree.replace_node.html)
    pub fn replaceNode(self: *Tree, _key: ?*anyopaque, _value: ?*anyopaque) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_replace_node" });
        const ret = cFn(self, @ptrCast(_key), @ptrCast(_value));
        return ret;
    }
    /// method [search](https://docs.gtk.org/glib/method.Tree.search.html)
    pub fn search(self: *Tree, search_func: anytype, search_func_args: anytype) ?*anyopaque {
        var closure_search_func = core.zig_closure(search_func, search_func_args, &.{ i32, ?*anyopaque });
        defer closure_search_func.deinit();
        const _search_func: glib.CompareFunc = @ptrCast(closure_search_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_search_func.c_data());
        const cFn = @extern(*const fn (*Tree, glib.CompareFunc, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_tree_search" });
        const ret = cFn(self, _search_func, @ptrCast(_user_data));
        return ret;
    }
    /// method [search_node](https://docs.gtk.org/glib/method.Tree.search_node.html)
    pub fn searchNode(self: *Tree, search_func: anytype, search_func_args: anytype) ?*glib.TreeNode {
        var closure_search_func = core.zig_closure(search_func, search_func_args, &.{ i32, ?*anyopaque });
        defer closure_search_func.deinit();
        const _search_func: glib.CompareFunc = @ptrCast(closure_search_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_search_func.c_data());
        const cFn = @extern(*const fn (*Tree, glib.CompareFunc, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_search_node" });
        const ret = cFn(self, _search_func, @ptrCast(_user_data));
        return ret;
    }
    /// method [steal](https://docs.gtk.org/glib/method.Tree.steal.html)
    pub fn steal(self: *Tree, _key: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) bool, .{ .name = "g_tree_steal" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    /// Deprecated:
    /// method [traverse](https://docs.gtk.org/glib/method.Tree.traverse.html)
    pub const traverse = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn traverse(self: *Tree, traverse_func: anytype, traverse_func_args: anytype, _traverse_type: glib.TraverseType) void {
            var closure_traverse_func = core.zig_closure(traverse_func, traverse_func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
            defer closure_traverse_func.deinit();
            const _traverse_func: glib.TraverseFunc = @ptrCast(closure_traverse_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_traverse_func.c_data());
            const cFn = @extern(*const fn (*Tree, glib.TraverseFunc, glib.TraverseType, ?*anyopaque) callconv(.c) void, .{ .name = "g_tree_traverse" });
            const ret = cFn(self, _traverse_func, _traverse_type, @ptrCast(_user_data));
            return ret;
        }
    }.traverse;
    /// method [unref](https://docs.gtk.org/glib/method.Tree.unref.html)
    pub fn unref(self: *Tree) void {
        const cFn = @extern(*const fn (*Tree) callconv(.c) void, .{ .name = "g_tree_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [upper_bound](https://docs.gtk.org/glib/method.Tree.upper_bound.html)
    pub fn upperBound(self: *Tree, _key: ?*anyopaque) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*Tree, ?*anyopaque) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_upper_bound" });
        const ret = cFn(self, @ptrCast(_key));
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tree_get_type" });
        return cFn();
    }
};
/// Struct [TreeNode](https://docs.gtk.org/glib/struct.TreeNode.html)
pub const TreeNode = opaque {
    /// method [key](https://docs.gtk.org/glib/method.TreeNode.key.html)
    pub fn key(self: *TreeNode) ?*anyopaque {
        const cFn = @extern(*const fn (*TreeNode) callconv(.c) ?*anyopaque, .{ .name = "g_tree_node_key" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.TreeNode.next.html)
    pub fn next(self: *TreeNode) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*TreeNode) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_node_next" });
        const ret = cFn(self);
        return ret;
    }
    /// method [previous](https://docs.gtk.org/glib/method.TreeNode.previous.html)
    pub fn previous(self: *TreeNode) ?*glib.TreeNode {
        const cFn = @extern(*const fn (*TreeNode) callconv(.c) ?*glib.TreeNode, .{ .name = "g_tree_node_previous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [value](https://docs.gtk.org/glib/method.TreeNode.value.html)
    pub fn value(self: *TreeNode) ?*anyopaque {
        const cFn = @extern(*const fn (*TreeNode) callconv(.c) ?*anyopaque, .{ .name = "g_tree_node_value" });
        const ret = cFn(self);
        return ret;
    }
};
/// Deprecated:
/// Struct [Tuples](https://docs.gtk.org/glib/struct.Tuples.html)
pub const Tuples = if (config.disable_deprecated) core.Deprecated else extern struct {
    len: u32,
    /// Deprecated:
    /// method [destroy](https://docs.gtk.org/glib/method.Tuples.destroy.html)
    pub const destroy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn destroy(self: *Tuples) void {
            const cFn = @extern(*const fn (*Tuples) callconv(.c) void, .{ .name = "g_tuples_destroy" });
            const ret = cFn(self);
            return ret;
        }
    }.destroy;
    /// Deprecated:
    /// method [index](https://docs.gtk.org/glib/method.Tuples.index.html)
    pub const index = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn index(self: *Tuples, _index_: i32, _field: i32) ?*anyopaque {
            const cFn = @extern(*const fn (*Tuples, i32, i32) callconv(.c) ?*anyopaque, .{ .name = "g_tuples_index" });
            const ret = cFn(self, _index_, _field);
            return ret;
        }
    }.index;
};
/// const [UNICHAR_MAX_DECOMPOSITION_LENGTH](https://docs.gtk.org/glib/const.UNICHAR_MAX_DECOMPOSITION_LENGTH.html)
pub const UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;
/// const [URI_RESERVED_CHARS_GENERIC_DELIMITERS](https://docs.gtk.org/glib/const.URI_RESERVED_CHARS_GENERIC_DELIMITERS.html)
pub const URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@";
/// const [URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS](https://docs.gtk.org/glib/const.URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS.html)
pub const URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;=";
/// const [USEC_PER_SEC](https://docs.gtk.org/glib/const.USEC_PER_SEC.html)
pub const USEC_PER_SEC = 1000000;
/// Enum [UnicodeBreakType](https://docs.gtk.org/glib/enum.UnicodeBreakType.html)
pub const UnicodeBreakType = enum(u32) {
    mandatory = 0,
    carriage_return = 1,
    line_feed = 2,
    combining_mark = 3,
    surrogate = 4,
    zero_width_space = 5,
    inseparable = 6,
    non_breaking_glue = 7,
    contingent = 8,
    space = 9,
    after = 10,
    before = 11,
    before_and_after = 12,
    hyphen = 13,
    non_starter = 14,
    open_punctuation = 15,
    close_punctuation = 16,
    quotation = 17,
    exclamation = 18,
    ideographic = 19,
    numeric = 20,
    infix_separator = 21,
    symbol = 22,
    alphabetic = 23,
    prefix = 24,
    postfix = 25,
    complex_context = 26,
    ambiguous = 27,
    unknown = 28,
    next_line = 29,
    word_joiner = 30,
    hangul_l_jamo = 31,
    hangul_v_jamo = 32,
    hangul_t_jamo = 33,
    hangul_lv_syllable = 34,
    hangul_lvt_syllable = 35,
    close_paranthesis = 36,
    conditional_japanese_starter = 37,
    hebrew_letter = 38,
    regional_indicator = 39,
    emoji_base = 40,
    emoji_modifier = 41,
    zero_width_joiner = 42,
    aksara = 43,
    aksara_pre_base = 44,
    aksara_start = 45,
    virama_final = 46,
    virama = 47,
    pub const close_parenthesis: @This() = @enumFromInt(36);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unicode_break_type_get_type" });
        return cFn();
    }
};
/// Enum [UnicodeScript](https://docs.gtk.org/glib/enum.UnicodeScript.html)
pub const UnicodeScript = enum(i32) {
    invalid_code = -1,
    common = 0,
    inherited = 1,
    arabic = 2,
    armenian = 3,
    bengali = 4,
    bopomofo = 5,
    cherokee = 6,
    coptic = 7,
    cyrillic = 8,
    deseret = 9,
    devanagari = 10,
    ethiopic = 11,
    georgian = 12,
    gothic = 13,
    greek = 14,
    gujarati = 15,
    gurmukhi = 16,
    han = 17,
    hangul = 18,
    hebrew = 19,
    hiragana = 20,
    kannada = 21,
    katakana = 22,
    khmer = 23,
    lao = 24,
    latin = 25,
    malayalam = 26,
    mongolian = 27,
    myanmar = 28,
    ogham = 29,
    old_italic = 30,
    oriya = 31,
    runic = 32,
    sinhala = 33,
    syriac = 34,
    tamil = 35,
    telugu = 36,
    thaana = 37,
    thai = 38,
    tibetan = 39,
    canadian_aboriginal = 40,
    yi = 41,
    tagalog = 42,
    hanunoo = 43,
    buhid = 44,
    tagbanwa = 45,
    braille = 46,
    cypriot = 47,
    limbu = 48,
    osmanya = 49,
    shavian = 50,
    linear_b = 51,
    tai_le = 52,
    ugaritic = 53,
    new_tai_lue = 54,
    buginese = 55,
    glagolitic = 56,
    tifinagh = 57,
    syloti_nagri = 58,
    old_persian = 59,
    kharoshthi = 60,
    unknown = 61,
    balinese = 62,
    cuneiform = 63,
    phoenician = 64,
    phags_pa = 65,
    nko = 66,
    kayah_li = 67,
    lepcha = 68,
    rejang = 69,
    sundanese = 70,
    saurashtra = 71,
    cham = 72,
    ol_chiki = 73,
    vai = 74,
    carian = 75,
    lycian = 76,
    lydian = 77,
    avestan = 78,
    bamum = 79,
    egyptian_hieroglyphs = 80,
    imperial_aramaic = 81,
    inscriptional_pahlavi = 82,
    inscriptional_parthian = 83,
    javanese = 84,
    kaithi = 85,
    lisu = 86,
    meetei_mayek = 87,
    old_south_arabian = 88,
    old_turkic = 89,
    samaritan = 90,
    tai_tham = 91,
    tai_viet = 92,
    batak = 93,
    brahmi = 94,
    mandaic = 95,
    chakma = 96,
    meroitic_cursive = 97,
    meroitic_hieroglyphs = 98,
    miao = 99,
    sharada = 100,
    sora_sompeng = 101,
    takri = 102,
    bassa_vah = 103,
    caucasian_albanian = 104,
    duployan = 105,
    elbasan = 106,
    grantha = 107,
    khojki = 108,
    khudawadi = 109,
    linear_a = 110,
    mahajani = 111,
    manichaean = 112,
    mende_kikakui = 113,
    modi = 114,
    mro = 115,
    nabataean = 116,
    old_north_arabian = 117,
    old_permic = 118,
    pahawh_hmong = 119,
    palmyrene = 120,
    pau_cin_hau = 121,
    psalter_pahlavi = 122,
    siddham = 123,
    tirhuta = 124,
    warang_citi = 125,
    ahom = 126,
    anatolian_hieroglyphs = 127,
    hatran = 128,
    multani = 129,
    old_hungarian = 130,
    signwriting = 131,
    adlam = 132,
    bhaiksuki = 133,
    marchen = 134,
    newa = 135,
    osage = 136,
    tangut = 137,
    masaram_gondi = 138,
    nushu = 139,
    soyombo = 140,
    zanabazar_square = 141,
    dogra = 142,
    gunjala_gondi = 143,
    hanifi_rohingya = 144,
    makasar = 145,
    medefaidrin = 146,
    old_sogdian = 147,
    sogdian = 148,
    elymaic = 149,
    nandinagari = 150,
    nyiakeng_puachue_hmong = 151,
    wancho = 152,
    chorasmian = 153,
    dives_akuru = 154,
    khitan_small_script = 155,
    yezidi = 156,
    cypro_minoan = 157,
    old_uyghur = 158,
    tangsa = 159,
    toto = 160,
    vithkuqi = 161,
    math = 162,
    kawi = 163,
    nag_mundari = 164,

    /// type func [from_iso15924](https://docs.gtk.org/glib/type_func.UnicodeScript.from_iso15924.html)
    pub fn fromIso15924(_iso15924: u32) glib.UnicodeScript {
        const cFn = @extern(*const fn (u32) callconv(.c) glib.UnicodeScript, .{ .name = "g_unicode_script_from_iso15924" });
        const ret = cFn(_iso15924);
        return ret;
    }

    /// type func [to_iso15924](https://docs.gtk.org/glib/type_func.UnicodeScript.to_iso15924.html)
    pub fn toIso15924(_script: glib.UnicodeScript) u32 {
        const cFn = @extern(*const fn (glib.UnicodeScript) callconv(.c) u32, .{ .name = "g_unicode_script_to_iso15924" });
        const ret = cFn(_script);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unicode_script_get_type" });
        return cFn();
    }
};
/// Enum [UnicodeType](https://docs.gtk.org/glib/enum.UnicodeType.html)
pub const UnicodeType = enum(u32) {
    control = 0,
    format = 1,
    unassigned = 2,
    private_use = 3,
    surrogate = 4,
    lowercase_letter = 5,
    modifier_letter = 6,
    other_letter = 7,
    titlecase_letter = 8,
    uppercase_letter = 9,
    spacing_mark = 10,
    enclosing_mark = 11,
    non_spacing_mark = 12,
    decimal_number = 13,
    letter_number = 14,
    other_number = 15,
    connect_punctuation = 16,
    dash_punctuation = 17,
    close_punctuation = 18,
    final_punctuation = 19,
    initial_punctuation = 20,
    other_punctuation = 21,
    open_punctuation = 22,
    currency_symbol = 23,
    modifier_symbol = 24,
    math_symbol = 25,
    other_symbol = 26,
    line_separator = 27,
    paragraph_separator = 28,
    space_separator = 29,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unicode_type_get_type" });
        return cFn();
    }
};
/// callback [UnixFDSourceFunc](https://docs.gtk.org/glib/callback.UnixFDSourceFunc.html)
pub const UnixFDSourceFunc = *const fn (_fd: i32, _condition: glib.IOCondition, _user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [UnixPipe](https://docs.gtk.org/glib/struct.UnixPipe.html)
pub const UnixPipe = extern struct {
    fds: [2]i32,
};
/// Enum [UnixPipeEnd](https://docs.gtk.org/glib/enum.UnixPipeEnd.html)
pub const UnixPipeEnd = enum(u32) {
    read = 0,
    write = 1,
};
/// Struct [Uri](https://docs.gtk.org/glib/struct.Uri.html)
pub const Uri = opaque {
    /// method [get_auth_params](https://docs.gtk.org/glib/method.Uri.get_auth_params.html)
    pub fn getAuthParams(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_auth_params" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/glib/method.Uri.get_flags.html)
    pub fn getFlags(self: *Uri) glib.UriFlags {
        const cFn = @extern(*const fn (*Uri) callconv(.c) glib.UriFlags, .{ .name = "g_uri_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fragment](https://docs.gtk.org/glib/method.Uri.get_fragment.html)
    pub fn getFragment(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_fragment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_host](https://docs.gtk.org/glib/method.Uri.get_host.html)
    pub fn getHost(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_host" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_password](https://docs.gtk.org/glib/method.Uri.get_password.html)
    pub fn getPassword(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_password" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_path](https://docs.gtk.org/glib/method.Uri.get_path.html)
    pub fn getPath(self: *Uri) [*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) [*:0]u8, .{ .name = "g_uri_get_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_port](https://docs.gtk.org/glib/method.Uri.get_port.html)
    pub fn getPort(self: *Uri) i32 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) i32, .{ .name = "g_uri_get_port" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_query](https://docs.gtk.org/glib/method.Uri.get_query.html)
    pub fn getQuery(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_query" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scheme](https://docs.gtk.org/glib/method.Uri.get_scheme.html)
    pub fn getScheme(self: *Uri) [*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) [*:0]u8, .{ .name = "g_uri_get_scheme" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_user](https://docs.gtk.org/glib/method.Uri.get_user.html)
    pub fn getUser(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_user" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_userinfo](https://docs.gtk.org/glib/method.Uri.get_userinfo.html)
    pub fn getUserinfo(self: *Uri) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_get_userinfo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse_relative](https://docs.gtk.org/glib/method.Uri.parse_relative.html)
    pub fn parseRelative(self: *Uri, _uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!*glib.Uri {
        const cFn = @extern(*const fn (*Uri, [*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) *glib.Uri, .{ .name = "g_uri_parse_relative" });
        const ret = cFn(self, _uri_ref, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/glib/method.Uri.to_string.html)
    pub fn toString(self: *Uri) [*:0]u8 {
        const cFn = @extern(*const fn (*Uri) callconv(.c) [*:0]u8, .{ .name = "g_uri_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string_partial](https://docs.gtk.org/glib/method.Uri.to_string_partial.html)
    pub fn toStringPartial(self: *Uri, _flags: glib.UriHideFlags) [*:0]u8 {
        const cFn = @extern(*const fn (*Uri, glib.UriHideFlags) callconv(.c) [*:0]u8, .{ .name = "g_uri_to_string_partial" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// type func [build](https://docs.gtk.org/glib/type_func.Uri.build.html)
    pub fn build(_flags: glib.UriFlags, _scheme: [*:0]const u8, _userinfo: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) *glib.Uri {
        const cFn = @extern(*const fn (glib.UriFlags, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *glib.Uri, .{ .name = "g_uri_build" });
        const ret = cFn(_flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment);
        return ret;
    }
    /// type func [build_with_user](https://docs.gtk.org/glib/type_func.Uri.build_with_user.html)
    pub fn buildWithUser(_flags: glib.UriFlags, _scheme: [*:0]const u8, _user: ?[*:0]const u8, _password: ?[*:0]const u8, _auth_params: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) *glib.Uri {
        const cFn = @extern(*const fn (glib.UriFlags, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *glib.Uri, .{ .name = "g_uri_build_with_user" });
        const ret = cFn(_flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment);
        return ret;
    }
    /// type func [error_quark](https://docs.gtk.org/glib/type_func.Uri.error_quark.html)
    pub fn errorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_uri_error_quark" });
        const ret = cFn();
        return ret;
    }
    /// type func [escape_bytes](https://docs.gtk.org/glib/type_func.Uri.escape_bytes.html)
    pub fn escapeBytes(_unescapeds: []u8, _reserved_chars_allowed: ?[*:0]const u8) [*:0]u8 {
        const _unescaped = _unescapeds.ptr;
        const _length: u64 = @intCast(_unescapeds.len);
        const cFn = @extern(*const fn ([*]u8, u64, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_escape_bytes" });
        const ret = cFn(_unescaped, _length, _reserved_chars_allowed);
        return ret;
    }
    /// type func [escape_string](https://docs.gtk.org/glib/type_func.Uri.escape_string.html)
    pub fn escapeString(_unescaped: [*:0]const u8, _reserved_chars_allowed: ?[*:0]const u8, _allow_utf8: bool) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, bool) callconv(.c) [*:0]u8, .{ .name = "g_uri_escape_string" });
        const ret = cFn(_unescaped, _reserved_chars_allowed, _allow_utf8);
        return ret;
    }
    /// type func [is_valid](https://docs.gtk.org/glib/type_func.Uri.is_valid.html)
    pub fn isValid(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_uri_is_valid" });
        const ret = cFn(_uri_string, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [join](https://docs.gtk.org/glib/type_func.Uri.join.html)
    pub fn join(_flags: glib.UriFlags, _scheme: ?[*:0]const u8, _userinfo: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (glib.UriFlags, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_join" });
        const ret = cFn(_flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment);
        return ret;
    }
    /// type func [join_with_user](https://docs.gtk.org/glib/type_func.Uri.join_with_user.html)
    pub fn joinWithUser(_flags: glib.UriFlags, _scheme: ?[*:0]const u8, _user: ?[*:0]const u8, _password: ?[*:0]const u8, _auth_params: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (glib.UriFlags, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_join_with_user" });
        const ret = cFn(_flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment);
        return ret;
    }
    /// type func [list_extract_uris](https://docs.gtk.org/glib/type_func.Uri.list_extract_uris.html)
    pub fn listExtractUris(_uri_list: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_uri_list_extract_uris" });
        const ret = cFn(_uri_list);
        return ret;
    }
    /// type func [parse](https://docs.gtk.org/glib/type_func.Uri.parse.html)
    pub fn parse(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!*glib.Uri {
        const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) *glib.Uri, .{ .name = "g_uri_parse" });
        const ret = cFn(_uri_string, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [parse_params](https://docs.gtk.org/glib/type_func.Uri.parse_params.html)
    pub fn parseParams(_params: [*:0]const u8, _length: i64, _separators: [*:0]const u8, _flags: glib.UriParamsFlags, _error: *?*core.Error) error{GError}!*core.HashTable {
        const cFn = @extern(*const fn ([*:0]const u8, i64, [*:0]const u8, glib.UriParamsFlags, *?*core.Error) callconv(.c) *core.HashTable, .{ .name = "g_uri_parse_params" });
        const ret = cFn(_params, _length, _separators, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [parse_scheme](https://docs.gtk.org/glib/type_func.Uri.parse_scheme.html)
    pub fn parseScheme(_uri: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_parse_scheme" });
        const ret = cFn(_uri);
        return ret;
    }
    /// type func [peek_scheme](https://docs.gtk.org/glib/type_func.Uri.peek_scheme.html)
    pub fn peekScheme(_uri: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_peek_scheme" });
        const ret = cFn(_uri);
        return ret;
    }
    /// type func [resolve_relative](https://docs.gtk.org/glib/type_func.Uri.resolve_relative.html)
    pub fn resolveRelative(_base_uri_string: ?[*:0]const u8, _uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_uri_resolve_relative" });
        const ret = cFn(_base_uri_string, _uri_ref, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [split](https://docs.gtk.org/glib/type_func.Uri.split.html)
    pub fn split(_uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
        scheme: ?[*:0]u8,
        userinfo: ?[*:0]u8,
        host: ?[*:0]u8,
        port: i32,
        path: [*:0]u8,
        query: ?[*:0]u8,
        fragment: ?[*:0]u8,
    } {
        var scheme_out: ?[*:0]u8 = undefined;
        const _scheme = &scheme_out;
        var userinfo_out: ?[*:0]u8 = undefined;
        const _userinfo = &userinfo_out;
        var host_out: ?[*:0]u8 = undefined;
        const _host = &host_out;
        var port_out: i32 = undefined;
        const _port = &port_out;
        var path_out: [*:0]u8 = undefined;
        const _path = &path_out;
        var query_out: ?[*:0]u8 = undefined;
        const _query = &query_out;
        var fragment_out: ?[*:0]u8 = undefined;
        const _fragment = &fragment_out;
        const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, ?*[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split" });
        const ret = cFn(_uri_ref, _flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment, _error);
        _ = ret;
        if (_error.* != null) return error.GError;
        return .{ .scheme = scheme_out, .userinfo = userinfo_out, .host = host_out, .port = port_out, .path = path_out, .query = query_out, .fragment = fragment_out };
    }
    /// type func [split_network](https://docs.gtk.org/glib/type_func.Uri.split_network.html)
    pub fn splitNetwork(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
        scheme: ?[*:0]u8,
        host: ?[*:0]u8,
        port: i32,
    } {
        var scheme_out: ?[*:0]u8 = undefined;
        const _scheme = &scheme_out;
        var host_out: ?[*:0]u8 = undefined;
        const _host = &host_out;
        var port_out: i32 = undefined;
        const _port = &port_out;
        const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split_network" });
        const ret = cFn(_uri_string, _flags, _scheme, _host, _port, _error);
        _ = ret;
        if (_error.* != null) return error.GError;
        return .{ .scheme = scheme_out, .host = host_out, .port = port_out };
    }
    /// type func [split_with_user](https://docs.gtk.org/glib/type_func.Uri.split_with_user.html)
    pub fn splitWithUser(_uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
        scheme: ?[*:0]u8,
        user: ?[*:0]u8,
        password: ?[*:0]u8,
        auth_params: ?[*:0]u8,
        host: ?[*:0]u8,
        port: i32,
        path: [*:0]u8,
        query: ?[*:0]u8,
        fragment: ?[*:0]u8,
    } {
        var scheme_out: ?[*:0]u8 = undefined;
        const _scheme = &scheme_out;
        var user_out: ?[*:0]u8 = undefined;
        const _user = &user_out;
        var password_out: ?[*:0]u8 = undefined;
        const _password = &password_out;
        var auth_params_out: ?[*:0]u8 = undefined;
        const _auth_params = &auth_params_out;
        var host_out: ?[*:0]u8 = undefined;
        const _host = &host_out;
        var port_out: i32 = undefined;
        const _port = &port_out;
        var path_out: [*:0]u8 = undefined;
        const _path = &path_out;
        var query_out: ?[*:0]u8 = undefined;
        const _query = &query_out;
        var fragment_out: ?[*:0]u8 = undefined;
        const _fragment = &fragment_out;
        const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, ?*[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split_with_user" });
        const ret = cFn(_uri_ref, _flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment, _error);
        _ = ret;
        if (_error.* != null) return error.GError;
        return .{ .scheme = scheme_out, .user = user_out, .password = password_out, .auth_params = auth_params_out, .host = host_out, .port = port_out, .path = path_out, .query = query_out, .fragment = fragment_out };
    }
    /// type func [unescape_bytes](https://docs.gtk.org/glib/type_func.Uri.unescape_bytes.html)
    pub fn unescapeBytes(_escaped_string: [*:0]const u8, _length: i64, _illegal_characters: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*glib.Bytes {
        const cFn = @extern(*const fn ([*:0]const u8, i64, ?[*:0]const u8, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_uri_unescape_bytes" });
        const ret = cFn(_escaped_string, _length, _illegal_characters, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [unescape_segment](https://docs.gtk.org/glib/type_func.Uri.unescape_segment.html)
    pub fn unescapeSegment(_escaped_string: ?[*:0]const u8, _escaped_string_end: ?[*:0]const u8, _illegal_characters: ?[*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_unescape_segment" });
        const ret = cFn(_escaped_string, _escaped_string_end, _illegal_characters);
        return ret;
    }
    /// type func [unescape_string](https://docs.gtk.org/glib/type_func.Uri.unescape_string.html)
    pub fn unescapeString(_escaped_string: [*:0]const u8, _illegal_characters: ?[*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_unescape_string" });
        const ret = cFn(_escaped_string, _illegal_characters);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_uri_get_type" });
        return cFn();
    }
};
/// Error [UriError](https://docs.gtk.org/glib/error.UriError.html)
pub const UriError = enum(u32) {
    failed = 0,
    bad_scheme = 1,
    bad_user = 2,
    bad_password = 3,
    bad_auth_params = 4,
    bad_host = 5,
    bad_port = 6,
    bad_path = 7,
    bad_query = 8,
    bad_fragment = 9,
};
/// Flags [UriFlags](https://docs.gtk.org/glib/flags.UriFlags.html)
pub const UriFlags = packed struct(u32) {
    parse_relaxed: bool = false,
    has_password: bool = false,
    has_auth_params: bool = false,
    encoded: bool = false,
    non_dns: bool = false,
    encoded_query: bool = false,
    encoded_path: bool = false,
    encoded_fragment: bool = false,
    scheme_normalize: bool = false,
    _: u23 = 0,
};
/// Flags [UriHideFlags](https://docs.gtk.org/glib/flags.UriHideFlags.html)
pub const UriHideFlags = packed struct(u32) {
    userinfo: bool = false,
    password: bool = false,
    auth_params: bool = false,
    query: bool = false,
    fragment: bool = false,
    _: u27 = 0,
};
/// Flags [UriParamsFlags](https://docs.gtk.org/glib/flags.UriParamsFlags.html)
pub const UriParamsFlags = packed struct(u32) {
    case_insensitive: bool = false,
    www_form: bool = false,
    parse_relaxed: bool = false,
    _: u29 = 0,
};
/// Struct [UriParamsIter](https://docs.gtk.org/glib/struct.UriParamsIter.html)
pub const UriParamsIter = extern struct {
    dummy0: i32,
    dummy1: ?*anyopaque,
    dummy2: ?*anyopaque,
    dummy3: [256]u8,
    /// method [init](https://docs.gtk.org/glib/method.UriParamsIter.init.html)
    pub fn init(self: *UriParamsIter, _params: [*:0]const u8, _length: i64, _separators: [*:0]const u8, _flags: glib.UriParamsFlags) void {
        const cFn = @extern(*const fn (*UriParamsIter, [*:0]const u8, i64, [*:0]const u8, glib.UriParamsFlags) callconv(.c) void, .{ .name = "g_uri_params_iter_init" });
        const ret = cFn(self, _params, _length, _separators, _flags);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.UriParamsIter.next.html)
    pub fn next(self: *UriParamsIter, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        attribute: ?[*:0]u8,
        value: ?[*:0]u8,
    } {
        var attribute_out: ?[*:0]u8 = undefined;
        const _attribute = &attribute_out;
        var value_out: ?[*:0]u8 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*UriParamsIter, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_uri_params_iter_next" });
        const ret = cFn(self, _attribute, _value, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .attribute = attribute_out, .value = value_out };
    }
};
/// Enum [UserDirectory](https://docs.gtk.org/glib/enum.UserDirectory.html)
pub const UserDirectory = enum(u32) {
    directory_desktop = 0,
    directory_documents = 1,
    directory_download = 2,
    directory_music = 3,
    directory_pictures = 4,
    directory_public_share = 5,
    directory_templates = 6,
    directory_videos = 7,
    n_directories = 8,
};
/// const [VA_COPY_AS_ARRAY](https://docs.gtk.org/glib/const.VA_COPY_AS_ARRAY.html)
pub const VA_COPY_AS_ARRAY = 1;
/// const [VERSION_MIN_REQUIRED](https://docs.gtk.org/glib/const.VERSION_MIN_REQUIRED.html)
pub const VERSION_MIN_REQUIRED = 2;
/// Struct [Variant](https://docs.gtk.org/glib/struct.Variant.html)
pub const Variant = opaque {
    /// ctor [new_array](https://docs.gtk.org/glib/ctor.Variant.new_array.html)
    pub fn newArray(_child_type: ?*glib.VariantType, _childrens: []*glib.Variant) *Variant {
        const _children = _childrens.ptr;
        const _n_children: u64 = @intCast(_childrens.len);
        const cFn = @extern(*const fn (?*glib.VariantType, ?[*]*glib.Variant, u64) callconv(.c) *Variant, .{ .name = "g_variant_new_array" });
        const ret = cFn(_child_type, _children, _n_children);
        return ret;
    }
    /// ctor [new_boolean](https://docs.gtk.org/glib/ctor.Variant.new_boolean.html)
    pub fn newBoolean(_value: bool) *Variant {
        const cFn = @extern(*const fn (bool) callconv(.c) *Variant, .{ .name = "g_variant_new_boolean" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_byte](https://docs.gtk.org/glib/ctor.Variant.new_byte.html)
    pub fn newByte(_value: u8) *Variant {
        const cFn = @extern(*const fn (u8) callconv(.c) *Variant, .{ .name = "g_variant_new_byte" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_bytestring](https://docs.gtk.org/glib/ctor.Variant.new_bytestring.html)
    pub fn newBytestring(_string: [*:0]u8) *Variant {
        const cFn = @extern(*const fn ([*:0]u8) callconv(.c) *Variant, .{ .name = "g_variant_new_bytestring" });
        const ret = cFn(_string);
        return ret;
    }
    /// ctor [new_bytestring_array](https://docs.gtk.org/glib/ctor.Variant.new_bytestring_array.html)
    pub fn newBytestringArray(_strvs: [][*:0]const u8) *Variant {
        const _strv = _strvs.ptr;
        const _length: i64 = @intCast(_strvs.len);
        const cFn = @extern(*const fn ([*][*:0]const u8, i64) callconv(.c) *Variant, .{ .name = "g_variant_new_bytestring_array" });
        const ret = cFn(_strv, _length);
        return ret;
    }
    /// ctor [new_dict_entry](https://docs.gtk.org/glib/ctor.Variant.new_dict_entry.html)
    pub fn newDictEntry(_key: *glib.Variant, _value: *glib.Variant) *Variant {
        const cFn = @extern(*const fn (*glib.Variant, *glib.Variant) callconv(.c) *Variant, .{ .name = "g_variant_new_dict_entry" });
        const ret = cFn(_key, _value);
        return ret;
    }
    /// ctor [new_double](https://docs.gtk.org/glib/ctor.Variant.new_double.html)
    pub fn newDouble(_value: f64) *Variant {
        const cFn = @extern(*const fn (f64) callconv(.c) *Variant, .{ .name = "g_variant_new_double" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_fixed_array](https://docs.gtk.org/glib/ctor.Variant.new_fixed_array.html)
    pub fn newFixedArray(_element_type: *glib.VariantType, _elements: ?*anyopaque, _n_elements: u64, _element_size: u64) *Variant {
        const cFn = @extern(*const fn (*glib.VariantType, ?*anyopaque, u64, u64) callconv(.c) *Variant, .{ .name = "g_variant_new_fixed_array" });
        const ret = cFn(_element_type, @ptrCast(_elements), _n_elements, _element_size);
        return ret;
    }
    /// ctor [new_from_bytes](https://docs.gtk.org/glib/ctor.Variant.new_from_bytes.html)
    pub fn newFromBytes(_type: *glib.VariantType, _bytes: *glib.Bytes, _trusted: bool) *Variant {
        const cFn = @extern(*const fn (*glib.VariantType, *glib.Bytes, bool) callconv(.c) *Variant, .{ .name = "g_variant_new_from_bytes" });
        const ret = cFn(_type, _bytes, _trusted);
        return ret;
    }
    /// ctor [new_from_data](https://docs.gtk.org/glib/ctor.Variant.new_from_data.html)
    pub fn newFromData(_type: *glib.VariantType, _datas: []u8, _trusted: bool, _notify: glib.DestroyNotify, _user_data: ?*anyopaque) *Variant {
        const _data = _datas.ptr;
        const _size: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (*glib.VariantType, [*]u8, u64, bool, glib.DestroyNotify, ?*anyopaque) callconv(.c) *Variant, .{ .name = "g_variant_new_from_data" });
        const ret = cFn(_type, _data, _size, _trusted, _notify, @ptrCast(_user_data));
        return ret;
    }
    /// ctor [new_handle](https://docs.gtk.org/glib/ctor.Variant.new_handle.html)
    pub fn newHandle(_value: i32) *Variant {
        const cFn = @extern(*const fn (i32) callconv(.c) *Variant, .{ .name = "g_variant_new_handle" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_int16](https://docs.gtk.org/glib/ctor.Variant.new_int16.html)
    pub fn newInt16(_value: i16) *Variant {
        const cFn = @extern(*const fn (i16) callconv(.c) *Variant, .{ .name = "g_variant_new_int16" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_int32](https://docs.gtk.org/glib/ctor.Variant.new_int32.html)
    pub fn newInt32(_value: i32) *Variant {
        const cFn = @extern(*const fn (i32) callconv(.c) *Variant, .{ .name = "g_variant_new_int32" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_int64](https://docs.gtk.org/glib/ctor.Variant.new_int64.html)
    pub fn newInt64(_value: i64) *Variant {
        const cFn = @extern(*const fn (i64) callconv(.c) *Variant, .{ .name = "g_variant_new_int64" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_maybe](https://docs.gtk.org/glib/ctor.Variant.new_maybe.html)
    pub fn newMaybe(_child_type: ?*glib.VariantType, _child: ?*glib.Variant) *Variant {
        const cFn = @extern(*const fn (?*glib.VariantType, ?*glib.Variant) callconv(.c) *Variant, .{ .name = "g_variant_new_maybe" });
        const ret = cFn(_child_type, _child);
        return ret;
    }
    /// ctor [new_object_path](https://docs.gtk.org/glib/ctor.Variant.new_object_path.html)
    pub fn newObjectPath(_object_path: [*:0]const u8) *Variant {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Variant, .{ .name = "g_variant_new_object_path" });
        const ret = cFn(_object_path);
        return ret;
    }
    /// ctor [new_objv](https://docs.gtk.org/glib/ctor.Variant.new_objv.html)
    pub fn newObjv(_strvs: [][*:0]const u8) *Variant {
        const _strv = _strvs.ptr;
        const _length: i64 = @intCast(_strvs.len);
        const cFn = @extern(*const fn ([*][*:0]const u8, i64) callconv(.c) *Variant, .{ .name = "g_variant_new_objv" });
        const ret = cFn(_strv, _length);
        return ret;
    }
    /// ctor [new_signature](https://docs.gtk.org/glib/ctor.Variant.new_signature.html)
    pub fn newSignature(_signature: [*:0]const u8) *Variant {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Variant, .{ .name = "g_variant_new_signature" });
        const ret = cFn(_signature);
        return ret;
    }
    /// ctor [new_string](https://docs.gtk.org/glib/ctor.Variant.new_string.html)
    pub fn newString(_string: [*:0]const u8) *Variant {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Variant, .{ .name = "g_variant_new_string" });
        const ret = cFn(_string);
        return ret;
    }
    /// ctor [new_strv](https://docs.gtk.org/glib/ctor.Variant.new_strv.html)
    pub fn newStrv(_strvs: [][*:0]const u8) *Variant {
        const _strv = _strvs.ptr;
        const _length: i64 = @intCast(_strvs.len);
        const cFn = @extern(*const fn ([*][*:0]const u8, i64) callconv(.c) *Variant, .{ .name = "g_variant_new_strv" });
        const ret = cFn(_strv, _length);
        return ret;
    }
    /// ctor [new_tuple](https://docs.gtk.org/glib/ctor.Variant.new_tuple.html)
    pub fn newTuple(_childrens: []*glib.Variant) *Variant {
        const _children = _childrens.ptr;
        const _n_children: u64 = @intCast(_childrens.len);
        const cFn = @extern(*const fn ([*]*glib.Variant, u64) callconv(.c) *Variant, .{ .name = "g_variant_new_tuple" });
        const ret = cFn(_children, _n_children);
        return ret;
    }
    /// ctor [new_uint16](https://docs.gtk.org/glib/ctor.Variant.new_uint16.html)
    pub fn newUint16(_value: u16) *Variant {
        const cFn = @extern(*const fn (u16) callconv(.c) *Variant, .{ .name = "g_variant_new_uint16" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_uint32](https://docs.gtk.org/glib/ctor.Variant.new_uint32.html)
    pub fn newUint32(_value: u32) *Variant {
        const cFn = @extern(*const fn (u32) callconv(.c) *Variant, .{ .name = "g_variant_new_uint32" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_uint64](https://docs.gtk.org/glib/ctor.Variant.new_uint64.html)
    pub fn newUint64(_value: u64) *Variant {
        const cFn = @extern(*const fn (u64) callconv(.c) *Variant, .{ .name = "g_variant_new_uint64" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_variant](https://docs.gtk.org/glib/ctor.Variant.new_variant.html)
    pub fn newVariant(_value: *glib.Variant) *Variant {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) *Variant, .{ .name = "g_variant_new_variant" });
        const ret = cFn(_value);
        return ret;
    }
    /// method [byteswap](https://docs.gtk.org/glib/method.Variant.byteswap.html)
    pub fn byteswap(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_byteswap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [check_format_string](https://docs.gtk.org/glib/method.Variant.check_format_string.html)
    pub fn checkFormatString(self: *Variant, _format_string: [*:0]const u8, _copy_only: bool) bool {
        const cFn = @extern(*const fn (*Variant, [*:0]const u8, bool) callconv(.c) bool, .{ .name = "g_variant_check_format_string" });
        const ret = cFn(self, _format_string, _copy_only);
        return ret;
    }
    /// method [classify](https://docs.gtk.org/glib/method.Variant.classify.html)
    pub fn classify(self: *Variant) glib.VariantClass {
        const cFn = @extern(*const fn (*Variant) callconv(.c) glib.VariantClass, .{ .name = "g_variant_classify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/glib/method.Variant.compare.html)
    pub fn compare(self: *Variant, _two: *glib.Variant) i32 {
        const cFn = @extern(*const fn (*Variant, *glib.Variant) callconv(.c) i32, .{ .name = "g_variant_compare" });
        const ret = cFn(self, _two);
        return ret;
    }
    /// method [dup_bytestring](https://docs.gtk.org/glib/method.Variant.dup_bytestring.html)
    pub fn dupBytestring(self: *Variant) struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:0]u8, .{ .name = "g_variant_dup_bytestring" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [dup_bytestring_array](https://docs.gtk.org/glib/method.Variant.dup_bytestring_array.html)
    pub fn dupBytestringArray(self: *Variant) struct {
        ret: [*][*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*][*:0]const u8, .{ .name = "g_variant_dup_bytestring_array" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [dup_objv](https://docs.gtk.org/glib/method.Variant.dup_objv.html)
    pub fn dupObjv(self: *Variant) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_variant_dup_objv" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [dup_string](https://docs.gtk.org/glib/method.Variant.dup_string.html)
    pub fn dupString(self: *Variant) struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, *u64) callconv(.c) [*:0]u8, .{ .name = "g_variant_dup_string" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [dup_strv](https://docs.gtk.org/glib/method.Variant.dup_strv.html)
    pub fn dupStrv(self: *Variant) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_variant_dup_strv" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [equal](https://docs.gtk.org/glib/method.Variant.equal.html)
    pub fn equal(self: *Variant, _two: *glib.Variant) bool {
        const cFn = @extern(*const fn (*Variant, *glib.Variant) callconv(.c) bool, .{ .name = "g_variant_equal" });
        const ret = cFn(self, _two);
        return ret;
    }
    /// method [get_boolean](https://docs.gtk.org/glib/method.Variant.get_boolean.html)
    pub fn getBoolean(self: *Variant) bool {
        const cFn = @extern(*const fn (*Variant) callconv(.c) bool, .{ .name = "g_variant_get_boolean" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_byte](https://docs.gtk.org/glib/method.Variant.get_byte.html)
    pub fn getByte(self: *Variant) u8 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u8, .{ .name = "g_variant_get_byte" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bytestring](https://docs.gtk.org/glib/method.Variant.get_bytestring.html)
    pub fn getBytestring(self: *Variant) [*:0]u8 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) [*:0]u8, .{ .name = "g_variant_get_bytestring" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bytestring_array](https://docs.gtk.org/glib/method.Variant.get_bytestring_array.html)
    pub fn getBytestringArray(self: *Variant) struct {
        ret: [*][*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*][*:0]const u8, .{ .name = "g_variant_get_bytestring_array" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_child_value](https://docs.gtk.org/glib/method.Variant.get_child_value.html)
    pub fn getChildValue(self: *Variant, _index_: u64) *glib.Variant {
        const cFn = @extern(*const fn (*Variant, u64) callconv(.c) *glib.Variant, .{ .name = "g_variant_get_child_value" });
        const ret = cFn(self, _index_);
        return ret;
    }
    /// method [get_data](https://docs.gtk.org/glib/method.Variant.get_data.html)
    pub fn getData(self: *Variant) ?*anyopaque {
        const cFn = @extern(*const fn (*Variant) callconv(.c) ?*anyopaque, .{ .name = "g_variant_get_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_data_as_bytes](https://docs.gtk.org/glib/method.Variant.get_data_as_bytes.html)
    pub fn getDataAsBytes(self: *Variant) *glib.Bytes {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Bytes, .{ .name = "g_variant_get_data_as_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_double](https://docs.gtk.org/glib/method.Variant.get_double.html)
    pub fn getDouble(self: *Variant) f64 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) f64, .{ .name = "g_variant_get_double" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_handle](https://docs.gtk.org/glib/method.Variant.get_handle.html)
    pub fn getHandle(self: *Variant) i32 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) i32, .{ .name = "g_variant_get_handle" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int16](https://docs.gtk.org/glib/method.Variant.get_int16.html)
    pub fn getInt16(self: *Variant) i16 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) i16, .{ .name = "g_variant_get_int16" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int32](https://docs.gtk.org/glib/method.Variant.get_int32.html)
    pub fn getInt32(self: *Variant) i32 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) i32, .{ .name = "g_variant_get_int32" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int64](https://docs.gtk.org/glib/method.Variant.get_int64.html)
    pub fn getInt64(self: *Variant) i64 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) i64, .{ .name = "g_variant_get_int64" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_maybe](https://docs.gtk.org/glib/method.Variant.get_maybe.html)
    pub fn getMaybe(self: *Variant) ?*glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) ?*glib.Variant, .{ .name = "g_variant_get_maybe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_normal_form](https://docs.gtk.org/glib/method.Variant.get_normal_form.html)
    pub fn getNormalForm(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_get_normal_form" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_objv](https://docs.gtk.org/glib/method.Variant.get_objv.html)
    pub fn getObjv(self: *Variant) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_variant_get_objv" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_size](https://docs.gtk.org/glib/method.Variant.get_size.html)
    pub fn getSize(self: *Variant) u64 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u64, .{ .name = "g_variant_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/glib/method.Variant.get_string.html)
    pub fn getString(self: *Variant) struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:0]u8, .{ .name = "g_variant_get_string" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_strv](https://docs.gtk.org/glib/method.Variant.get_strv.html)
    pub fn getStrv(self: *Variant) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*Variant, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_variant_get_strv" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_type](https://docs.gtk.org/glib/method.Variant.get_type.html)
    pub fn getType(self: *Variant) *glib.VariantType {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.VariantType, .{ .name = "g_variant_get_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_type_string](https://docs.gtk.org/glib/method.Variant.get_type_string.html)
    pub fn getTypeString(self: *Variant) [*:0]u8 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) [*:0]u8, .{ .name = "g_variant_get_type_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uint16](https://docs.gtk.org/glib/method.Variant.get_uint16.html)
    pub fn getUint16(self: *Variant) u16 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u16, .{ .name = "g_variant_get_uint16" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uint32](https://docs.gtk.org/glib/method.Variant.get_uint32.html)
    pub fn getUint32(self: *Variant) u32 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u32, .{ .name = "g_variant_get_uint32" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uint64](https://docs.gtk.org/glib/method.Variant.get_uint64.html)
    pub fn getUint64(self: *Variant) u64 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u64, .{ .name = "g_variant_get_uint64" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_variant](https://docs.gtk.org/glib/method.Variant.get_variant.html)
    pub fn getVariant(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_get_variant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/glib/method.Variant.hash.html)
    pub fn hash(self: *Variant) u32 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u32, .{ .name = "g_variant_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_container](https://docs.gtk.org/glib/method.Variant.is_container.html)
    pub fn isContainer(self: *Variant) bool {
        const cFn = @extern(*const fn (*Variant) callconv(.c) bool, .{ .name = "g_variant_is_container" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_floating](https://docs.gtk.org/glib/method.Variant.is_floating.html)
    pub fn isFloating(self: *Variant) bool {
        const cFn = @extern(*const fn (*Variant) callconv(.c) bool, .{ .name = "g_variant_is_floating" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_normal_form](https://docs.gtk.org/glib/method.Variant.is_normal_form.html)
    pub fn isNormalForm(self: *Variant) bool {
        const cFn = @extern(*const fn (*Variant) callconv(.c) bool, .{ .name = "g_variant_is_normal_form" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_of_type](https://docs.gtk.org/glib/method.Variant.is_of_type.html)
    pub fn isOfType(self: *Variant, _type: *glib.VariantType) bool {
        const cFn = @extern(*const fn (*Variant, *glib.VariantType) callconv(.c) bool, .{ .name = "g_variant_is_of_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [lookup_value](https://docs.gtk.org/glib/method.Variant.lookup_value.html)
    pub fn lookupValue(self: *Variant, _key: [*:0]const u8, _expected_type: ?*glib.VariantType) *glib.Variant {
        const cFn = @extern(*const fn (*Variant, [*:0]const u8, ?*glib.VariantType) callconv(.c) *glib.Variant, .{ .name = "g_variant_lookup_value" });
        const ret = cFn(self, _key, _expected_type);
        return ret;
    }
    /// method [n_children](https://docs.gtk.org/glib/method.Variant.n_children.html)
    pub fn nChildren(self: *Variant) u64 {
        const cFn = @extern(*const fn (*Variant) callconv(.c) u64, .{ .name = "g_variant_n_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [print](https://docs.gtk.org/glib/method.Variant.print.html)
    pub fn print(self: *Variant, _type_annotate: bool) [*:0]u8 {
        const cFn = @extern(*const fn (*Variant, bool) callconv(.c) [*:0]u8, .{ .name = "g_variant_print" });
        const ret = cFn(self, _type_annotate);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.Variant.ref.html)
    pub fn ref(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref_sink](https://docs.gtk.org/glib/method.Variant.ref_sink.html)
    pub fn refSink(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_ref_sink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [store](https://docs.gtk.org/glib/method.Variant.store.html)
    pub fn store(self: *Variant, _data: *anyopaque) void {
        const cFn = @extern(*const fn (*Variant, *anyopaque) callconv(.c) void, .{ .name = "g_variant_store" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// method [take_ref](https://docs.gtk.org/glib/method.Variant.take_ref.html)
    pub fn takeRef(self: *Variant) *glib.Variant {
        const cFn = @extern(*const fn (*Variant) callconv(.c) *glib.Variant, .{ .name = "g_variant_take_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.Variant.unref.html)
    pub fn unref(self: *Variant) void {
        const cFn = @extern(*const fn (*Variant) callconv(.c) void, .{ .name = "g_variant_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [is_object_path](https://docs.gtk.org/glib/type_func.Variant.is_object_path.html)
    pub fn isObjectPath(_string: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_is_object_path" });
        const ret = cFn(_string);
        return ret;
    }
    /// type func [is_signature](https://docs.gtk.org/glib/type_func.Variant.is_signature.html)
    pub fn isSignature(_string: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_is_signature" });
        const ret = cFn(_string);
        return ret;
    }
    /// type func [parse](https://docs.gtk.org/glib/type_func.Variant.parse.html)
    pub fn parse(_type: ?*glib.VariantType, _text: [*:0]const u8, _limit: ?[*:0]const u8, _endptr: ?*[*:0]const u8, _error: *?*core.Error) error{GError}!*glib.Variant {
        const cFn = @extern(*const fn (?*glib.VariantType, [*:0]const u8, ?[*:0]const u8, ?*[*:0]const u8, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_variant_parse" });
        const ret = cFn(_type, _text, _limit, _endptr, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [parse_error_print_context](https://docs.gtk.org/glib/type_func.Variant.parse_error_print_context.html)
    pub fn parseErrorPrintContext(_error: *core.Error, _source_str: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (*core.Error, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_variant_parse_error_print_context" });
        const ret = cFn(_error, _source_str);
        return ret;
    }
    /// type func [parse_error_quark](https://docs.gtk.org/glib/type_func.Variant.parse_error_quark.html)
    pub fn parseErrorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_variant_parse_error_quark" });
        const ret = cFn();
        return ret;
    }
    /// Deprecated:
    /// type func [parser_get_error_quark](https://docs.gtk.org/glib/type_func.Variant.parser_get_error_quark.html)
    pub const parserGetErrorQuark = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn parserGetErrorQuark() u32 {
            const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_variant_parser_get_error_quark" });
            const ret = cFn();
            return ret;
        }
    }.parserGetErrorQuark;
    pub fn gType() core.Type {
        return @enumFromInt(84);
    }
};
/// Struct [VariantBuilder](https://docs.gtk.org/glib/struct.VariantBuilder.html)
pub const VariantBuilder = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.VariantBuilder.new.html)
    pub fn new(_type: *glib.VariantType) *VariantBuilder {
        const cFn = @extern(*const fn (*glib.VariantType) callconv(.c) *VariantBuilder, .{ .name = "g_variant_builder_new" });
        const ret = cFn(_type);
        return ret;
    }
    /// method [add_value](https://docs.gtk.org/glib/method.VariantBuilder.add_value.html)
    pub fn addValue(self: *VariantBuilder, _value: *glib.Variant) void {
        const cFn = @extern(*const fn (*VariantBuilder, *glib.Variant) callconv(.c) void, .{ .name = "g_variant_builder_add_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [close](https://docs.gtk.org/glib/method.VariantBuilder.close.html)
    pub fn close(self: *VariantBuilder) void {
        const cFn = @extern(*const fn (*VariantBuilder) callconv(.c) void, .{ .name = "g_variant_builder_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [end](https://docs.gtk.org/glib/method.VariantBuilder.end.html)
    pub fn end(self: *VariantBuilder) *glib.Variant {
        const cFn = @extern(*const fn (*VariantBuilder) callconv(.c) *glib.Variant, .{ .name = "g_variant_builder_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [open](https://docs.gtk.org/glib/method.VariantBuilder.open.html)
    pub fn open(self: *VariantBuilder, _type: *glib.VariantType) void {
        const cFn = @extern(*const fn (*VariantBuilder, *glib.VariantType) callconv(.c) void, .{ .name = "g_variant_builder_open" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.VariantBuilder.ref.html)
    pub fn ref(self: *VariantBuilder) *glib.VariantBuilder {
        const cFn = @extern(*const fn (*VariantBuilder) callconv(.c) *glib.VariantBuilder, .{ .name = "g_variant_builder_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.VariantBuilder.unref.html)
    pub fn unref(self: *VariantBuilder) void {
        const cFn = @extern(*const fn (*VariantBuilder) callconv(.c) void, .{ .name = "g_variant_builder_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_builder_get_type" });
        return cFn();
    }
};
/// Enum [VariantClass](https://docs.gtk.org/glib/enum.VariantClass.html)
pub const VariantClass = enum(u32) {
    boolean = 98,
    byte = 121,
    int16 = 110,
    uint16 = 113,
    int32 = 105,
    uint32 = 117,
    int64 = 120,
    uint64 = 116,
    handle = 104,
    double = 100,
    string = 115,
    object_path = 111,
    signature = 103,
    variant = 118,
    maybe = 109,
    array = 97,
    tuple = 40,
    dict_entry = 123,
};
/// Struct [VariantDict](https://docs.gtk.org/glib/struct.VariantDict.html)
pub const VariantDict = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.VariantDict.new.html)
    pub fn new(_from_asv: ?*glib.Variant) *VariantDict {
        const cFn = @extern(*const fn (?*glib.Variant) callconv(.c) *VariantDict, .{ .name = "g_variant_dict_new" });
        const ret = cFn(_from_asv);
        return ret;
    }
    /// method [clear](https://docs.gtk.org/glib/method.VariantDict.clear.html)
    pub fn clear(self: *VariantDict) void {
        const cFn = @extern(*const fn (*VariantDict) callconv(.c) void, .{ .name = "g_variant_dict_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [contains](https://docs.gtk.org/glib/method.VariantDict.contains.html)
    pub fn contains(self: *VariantDict, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*VariantDict, [*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_dict_contains" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [end](https://docs.gtk.org/glib/method.VariantDict.end.html)
    pub fn end(self: *VariantDict) *glib.Variant {
        const cFn = @extern(*const fn (*VariantDict) callconv(.c) *glib.Variant, .{ .name = "g_variant_dict_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_value](https://docs.gtk.org/glib/method.VariantDict.insert_value.html)
    pub fn insertValue(self: *VariantDict, _key: [*:0]const u8, _value: *glib.Variant) void {
        const cFn = @extern(*const fn (*VariantDict, [*:0]const u8, *glib.Variant) callconv(.c) void, .{ .name = "g_variant_dict_insert_value" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [lookup_value](https://docs.gtk.org/glib/method.VariantDict.lookup_value.html)
    pub fn lookupValue(self: *VariantDict, _key: [*:0]const u8, _expected_type: ?*glib.VariantType) ?*glib.Variant {
        const cFn = @extern(*const fn (*VariantDict, [*:0]const u8, ?*glib.VariantType) callconv(.c) ?*glib.Variant, .{ .name = "g_variant_dict_lookup_value" });
        const ret = cFn(self, _key, _expected_type);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/glib/method.VariantDict.ref.html)
    pub fn ref(self: *VariantDict) *glib.VariantDict {
        const cFn = @extern(*const fn (*VariantDict) callconv(.c) *glib.VariantDict, .{ .name = "g_variant_dict_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/glib/method.VariantDict.remove.html)
    pub fn remove(self: *VariantDict, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*VariantDict, [*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_dict_remove" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/glib/method.VariantDict.unref.html)
    pub fn unref(self: *VariantDict) void {
        const cFn = @extern(*const fn (*VariantDict) callconv(.c) void, .{ .name = "g_variant_dict_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_dict_get_type" });
        return cFn();
    }
};
/// Error [VariantParseError](https://docs.gtk.org/glib/error.VariantParseError.html)
pub const VariantParseError = enum(u32) {
    failed = 0,
    basic_type_expected = 1,
    cannot_infer_type = 2,
    definite_type_expected = 3,
    input_not_at_end = 4,
    invalid_character = 5,
    invalid_format_string = 6,
    invalid_object_path = 7,
    invalid_signature = 8,
    invalid_type_string = 9,
    no_common_type = 10,
    number_out_of_range = 11,
    number_too_big = 12,
    type_error = 13,
    unexpected_token = 14,
    unknown_keyword = 15,
    unterminated_string_constant = 16,
    value_expected = 17,
    recursion = 18,
};
/// Struct [VariantType](https://docs.gtk.org/glib/struct.VariantType.html)
pub const VariantType = opaque {
    /// ctor [new](https://docs.gtk.org/glib/ctor.VariantType.new.html)
    pub fn new(_type_string: [*:0]const u8) *VariantType {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *VariantType, .{ .name = "g_variant_type_new" });
        const ret = cFn(_type_string);
        return ret;
    }
    /// ctor [new_array](https://docs.gtk.org/glib/ctor.VariantType.new_array.html)
    pub fn newArray(_element: *glib.VariantType) *VariantType {
        const cFn = @extern(*const fn (*glib.VariantType) callconv(.c) *VariantType, .{ .name = "g_variant_type_new_array" });
        const ret = cFn(_element);
        return ret;
    }
    /// ctor [new_dict_entry](https://docs.gtk.org/glib/ctor.VariantType.new_dict_entry.html)
    pub fn newDictEntry(_key: *glib.VariantType, _value: *glib.VariantType) *VariantType {
        const cFn = @extern(*const fn (*glib.VariantType, *glib.VariantType) callconv(.c) *VariantType, .{ .name = "g_variant_type_new_dict_entry" });
        const ret = cFn(_key, _value);
        return ret;
    }
    /// ctor [new_maybe](https://docs.gtk.org/glib/ctor.VariantType.new_maybe.html)
    pub fn newMaybe(_element: *glib.VariantType) *VariantType {
        const cFn = @extern(*const fn (*glib.VariantType) callconv(.c) *VariantType, .{ .name = "g_variant_type_new_maybe" });
        const ret = cFn(_element);
        return ret;
    }
    /// ctor [new_tuple](https://docs.gtk.org/glib/ctor.VariantType.new_tuple.html)
    pub fn newTuple(_itemss: []*glib.VariantType) *VariantType {
        const _items = _itemss.ptr;
        const _length: i32 = @intCast(_itemss.len);
        const cFn = @extern(*const fn ([*]*glib.VariantType, i32) callconv(.c) *VariantType, .{ .name = "g_variant_type_new_tuple" });
        const ret = cFn(_items, _length);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/glib/method.VariantType.copy.html)
    pub fn copy(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [dup_string](https://docs.gtk.org/glib/method.VariantType.dup_string.html)
    pub fn dupString(self: *VariantType) [*:0]u8 {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) [*:0]u8, .{ .name = "g_variant_type_dup_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [element](https://docs.gtk.org/glib/method.VariantType.element.html)
    pub fn element(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_element" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/glib/method.VariantType.equal.html)
    pub fn equal(self: *VariantType, _type2: *glib.VariantType) bool {
        const cFn = @extern(*const fn (*VariantType, *glib.VariantType) callconv(.c) bool, .{ .name = "g_variant_type_equal" });
        const ret = cFn(self, _type2);
        return ret;
    }
    /// method [first](https://docs.gtk.org/glib/method.VariantType.first.html)
    pub fn first(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_first" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/glib/method.VariantType.free.html)
    pub fn free(self: *VariantType) void {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) void, .{ .name = "g_variant_type_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string_length](https://docs.gtk.org/glib/method.VariantType.get_string_length.html)
    pub fn getStringLength(self: *VariantType) u64 {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) u64, .{ .name = "g_variant_type_get_string_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/glib/method.VariantType.hash.html)
    pub fn hash(self: *VariantType) u32 {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) u32, .{ .name = "g_variant_type_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_array](https://docs.gtk.org/glib/method.VariantType.is_array.html)
    pub fn isArray(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_array" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_basic](https://docs.gtk.org/glib/method.VariantType.is_basic.html)
    pub fn isBasic(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_basic" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_container](https://docs.gtk.org/glib/method.VariantType.is_container.html)
    pub fn isContainer(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_container" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_definite](https://docs.gtk.org/glib/method.VariantType.is_definite.html)
    pub fn isDefinite(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_definite" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_dict_entry](https://docs.gtk.org/glib/method.VariantType.is_dict_entry.html)
    pub fn isDictEntry(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_dict_entry" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_maybe](https://docs.gtk.org/glib/method.VariantType.is_maybe.html)
    pub fn isMaybe(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_maybe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_subtype_of](https://docs.gtk.org/glib/method.VariantType.is_subtype_of.html)
    pub fn isSubtypeOf(self: *VariantType, _supertype: *glib.VariantType) bool {
        const cFn = @extern(*const fn (*VariantType, *glib.VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_subtype_of" });
        const ret = cFn(self, _supertype);
        return ret;
    }
    /// method [is_tuple](https://docs.gtk.org/glib/method.VariantType.is_tuple.html)
    pub fn isTuple(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_tuple" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_variant](https://docs.gtk.org/glib/method.VariantType.is_variant.html)
    pub fn isVariant(self: *VariantType) bool {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) bool, .{ .name = "g_variant_type_is_variant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [key](https://docs.gtk.org/glib/method.VariantType.key.html)
    pub fn key(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_key" });
        const ret = cFn(self);
        return ret;
    }
    /// method [n_items](https://docs.gtk.org/glib/method.VariantType.n_items.html)
    pub fn nItems(self: *VariantType) u64 {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) u64, .{ .name = "g_variant_type_n_items" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/glib/method.VariantType.next.html)
    pub fn next(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_next" });
        const ret = cFn(self);
        return ret;
    }
    /// method [value](https://docs.gtk.org/glib/method.VariantType.value.html)
    pub fn value(self: *VariantType) *glib.VariantType {
        const cFn = @extern(*const fn (*VariantType) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_value" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [checked_](https://docs.gtk.org/glib/type_func.VariantType.checked_.html)
    pub fn checked(_type_string: [*:0]const u8) *glib.VariantType {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_checked_" });
        const ret = cFn(_type_string);
        return ret;
    }
    /// type func [string_get_depth_](https://docs.gtk.org/glib/type_func.VariantType.string_get_depth_.html)
    pub fn stringGetDepth(_type_string: [*:0]const u8) u64 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) u64, .{ .name = "g_variant_type_string_get_depth_" });
        const ret = cFn(_type_string);
        return ret;
    }
    /// type func [string_is_valid](https://docs.gtk.org/glib/type_func.VariantType.string_is_valid.html)
    pub fn stringIsValid(_type_string: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_type_string_is_valid" });
        const ret = cFn(_type_string);
        return ret;
    }
    /// type func [string_scan](https://docs.gtk.org/glib/type_func.VariantType.string_scan.html)
    pub fn stringScan(_string: [*:0]const u8, _limit: ?[*:0]const u8) struct {
        ret: bool,
        endptr: [*:0]u8,
    } {
        var endptr_out: [*:0]u8 = undefined;
        const _endptr = &endptr_out;
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?*[*:0]u8) callconv(.c) bool, .{ .name = "g_variant_type_string_scan" });
        const ret = cFn(_string, _limit, _endptr);
        return .{ .ret = ret, .endptr = endptr_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_type_get_gtype" });
        return cFn();
    }
};
/// callback [VoidFunc](https://docs.gtk.org/glib/callback.VoidFunc.html)
pub const VoidFunc = *const fn () callconv(.c) void;
/// const [WIN32_MSG_HANDLE](https://docs.gtk.org/glib/const.WIN32_MSG_HANDLE.html)
pub const WIN32_MSG_HANDLE = 19981206;
/// func [access](https://docs.gtk.org/glib/func.access.html)
pub fn access(_filename: [*:0]const u8, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) i32, .{ .name = "g_access" });
    const ret = cFn(_filename, _mode);
    return ret;
}
/// func [aligned_alloc](https://docs.gtk.org/glib/func.aligned_alloc.html)
pub fn alignedAlloc(_n_blocks: u64, _n_block_bytes: u64, _alignment: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_aligned_alloc" });
    const ret = cFn(_n_blocks, _n_block_bytes, _alignment);
    return ret;
}
/// func [aligned_alloc0](https://docs.gtk.org/glib/func.aligned_alloc0.html)
pub fn alignedAlloc0(_n_blocks: u64, _n_block_bytes: u64, _alignment: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_aligned_alloc0" });
    const ret = cFn(_n_blocks, _n_block_bytes, _alignment);
    return ret;
}
/// func [aligned_free](https://docs.gtk.org/glib/func.aligned_free.html)
pub fn alignedFree(_mem: ?*anyopaque) void {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) void, .{ .name = "g_aligned_free" });
    const ret = cFn(@ptrCast(_mem));
    return ret;
}
/// func [aligned_free_sized](https://docs.gtk.org/glib/func.aligned_free_sized.html)
pub fn alignedFreeSized(_mem: ?*anyopaque, _alignment: u64, _size: u64) void {
    const cFn = @extern(*const fn (?*anyopaque, u64, u64) callconv(.c) void, .{ .name = "g_aligned_free_sized" });
    const ret = cFn(@ptrCast(_mem), _alignment, _size);
    return ret;
}
/// func [ascii_digit_value](https://docs.gtk.org/glib/func.ascii_digit_value.html)
pub fn asciiDigitValue(_c: i8) i32 {
    const cFn = @extern(*const fn (i8) callconv(.c) i32, .{ .name = "g_ascii_digit_value" });
    const ret = cFn(_c);
    return ret;
}
/// func [ascii_dtostr](https://docs.gtk.org/glib/func.ascii_dtostr.html)
pub fn asciiDtostr(_buffer: [*:0]const u8, _buf_len: i32, _d: f64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i32, f64) callconv(.c) [*:0]u8, .{ .name = "g_ascii_dtostr" });
    const ret = cFn(_buffer, _buf_len, _d);
    return ret;
}
/// func [ascii_formatd](https://docs.gtk.org/glib/func.ascii_formatd.html)
pub fn asciiFormatd(_buffer: [*:0]const u8, _buf_len: i32, _format: [*:0]const u8, _d: f64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i32, [*:0]const u8, f64) callconv(.c) [*:0]u8, .{ .name = "g_ascii_formatd" });
    const ret = cFn(_buffer, _buf_len, _format, _d);
    return ret;
}
/// func [ascii_strcasecmp](https://docs.gtk.org/glib/func.ascii_strcasecmp.html)
pub fn asciiStrcasecmp(_s1: [*:0]const u8, _s2: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) i32, .{ .name = "g_ascii_strcasecmp" });
    const ret = cFn(_s1, _s2);
    return ret;
}
/// func [ascii_strdown](https://docs.gtk.org/glib/func.ascii_strdown.html)
pub fn asciiStrdown(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_ascii_strdown" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [ascii_string_to_signed](https://docs.gtk.org/glib/func.ascii_string_to_signed.html)
pub fn asciiStringToSigned(_str: [*:0]const u8, _base: u32, _min: i64, _max: i64, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    out_num: i64,
} {
    var out_num_out: i64 = undefined;
    const _out_num = &out_num_out;
    const cFn = @extern(*const fn ([*:0]const u8, u32, i64, i64, ?*i64, *?*core.Error) callconv(.c) bool, .{ .name = "g_ascii_string_to_signed" });
    const ret = cFn(_str, _base, _min, _max, _out_num, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .out_num = out_num_out };
}
/// func [ascii_string_to_unsigned](https://docs.gtk.org/glib/func.ascii_string_to_unsigned.html)
pub fn asciiStringToUnsigned(_str: [*:0]const u8, _base: u32, _min: u64, _max: u64, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    out_num: u64,
} {
    var out_num_out: u64 = undefined;
    const _out_num = &out_num_out;
    const cFn = @extern(*const fn ([*:0]const u8, u32, u64, u64, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_ascii_string_to_unsigned" });
    const ret = cFn(_str, _base, _min, _max, _out_num, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .out_num = out_num_out };
}
/// func [ascii_strncasecmp](https://docs.gtk.org/glib/func.ascii_strncasecmp.html)
pub fn asciiStrncasecmp(_s1: [*:0]const u8, _s2: [*:0]const u8, _n: u64) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, u64) callconv(.c) i32, .{ .name = "g_ascii_strncasecmp" });
    const ret = cFn(_s1, _s2, _n);
    return ret;
}
/// func [ascii_strtod](https://docs.gtk.org/glib/func.ascii_strtod.html)
pub fn asciiStrtod(_nptr: [*:0]const u8) struct {
    ret: f64,
    endptr: [*:0]u8,
} {
    var endptr_out: [*:0]u8 = undefined;
    const _endptr = &endptr_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8) callconv(.c) f64, .{ .name = "g_ascii_strtod" });
    const ret = cFn(_nptr, _endptr);
    return .{ .ret = ret, .endptr = endptr_out };
}
/// func [ascii_strtoll](https://docs.gtk.org/glib/func.ascii_strtoll.html)
pub fn asciiStrtoll(_nptr: [*:0]const u8, _base: u32) struct {
    ret: i64,
    endptr: [*:0]u8,
} {
    var endptr_out: [*:0]u8 = undefined;
    const _endptr = &endptr_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8, u32) callconv(.c) i64, .{ .name = "g_ascii_strtoll" });
    const ret = cFn(_nptr, _endptr, _base);
    return .{ .ret = ret, .endptr = endptr_out };
}
/// func [ascii_strtoull](https://docs.gtk.org/glib/func.ascii_strtoull.html)
pub fn asciiStrtoull(_nptr: [*:0]const u8, _base: u32) struct {
    ret: u64,
    endptr: [*:0]u8,
} {
    var endptr_out: [*:0]u8 = undefined;
    const _endptr = &endptr_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8, u32) callconv(.c) u64, .{ .name = "g_ascii_strtoull" });
    const ret = cFn(_nptr, _endptr, _base);
    return .{ .ret = ret, .endptr = endptr_out };
}
/// func [ascii_strup](https://docs.gtk.org/glib/func.ascii_strup.html)
pub fn asciiStrup(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_ascii_strup" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [ascii_tolower](https://docs.gtk.org/glib/func.ascii_tolower.html)
pub fn asciiTolower(_c: i8) i8 {
    const cFn = @extern(*const fn (i8) callconv(.c) i8, .{ .name = "g_ascii_tolower" });
    const ret = cFn(_c);
    return ret;
}
/// func [ascii_toupper](https://docs.gtk.org/glib/func.ascii_toupper.html)
pub fn asciiToupper(_c: i8) i8 {
    const cFn = @extern(*const fn (i8) callconv(.c) i8, .{ .name = "g_ascii_toupper" });
    const ret = cFn(_c);
    return ret;
}
/// func [ascii_xdigit_value](https://docs.gtk.org/glib/func.ascii_xdigit_value.html)
pub fn asciiXdigitValue(_c: i8) i32 {
    const cFn = @extern(*const fn (i8) callconv(.c) i32, .{ .name = "g_ascii_xdigit_value" });
    const ret = cFn(_c);
    return ret;
}
/// func [assert_warning](https://docs.gtk.org/glib/func.assert_warning.html)
pub fn assertWarning(_log_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _pretty_function: [*:0]const u8, _expression: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_assert_warning" });
    const ret = cFn(_log_domain, _file, _line, _pretty_function, _expression);
    return ret;
}
/// func [assertion_message](https://docs.gtk.org/glib/func.assertion_message.html)
pub fn assertionMessage(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _message: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_assertion_message" });
    const ret = cFn(_domain, _file, _line, _func, _message);
    return ret;
}
/// func [assertion_message_cmpint](https://docs.gtk.org/glib/func.assertion_message_cmpint.html)
pub fn assertionMessageCmpint(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _expr: [*:0]const u8, _arg1: u64, _cmp: [*:0]const u8, _arg2: u64, _numtype: i8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8, u64, [*:0]const u8, u64, i8) callconv(.c) void, .{ .name = "g_assertion_message_cmpint" });
    const ret = cFn(_domain, _file, _line, _func, _expr, _arg1, _cmp, _arg2, _numtype);
    return ret;
}
/// func [assertion_message_cmpstr](https://docs.gtk.org/glib/func.assertion_message_cmpstr.html)
pub fn assertionMessageCmpstr(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _expr: [*:0]const u8, _arg1: [*:0]const u8, _cmp: [*:0]const u8, _arg2: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_assertion_message_cmpstr" });
    const ret = cFn(_domain, _file, _line, _func, _expr, _arg1, _cmp, _arg2);
    return ret;
}
/// func [assertion_message_cmpstrv](https://docs.gtk.org/glib/func.assertion_message_cmpstrv.html)
pub fn assertionMessageCmpstrv(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _expr: [*:0]const u8, _arg1: *const [*:0]const u8, _arg2: *const [*:0]const u8, _first_wrong_idx: u64) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8, *const [*:0]const u8, *const [*:0]const u8, u64) callconv(.c) void, .{ .name = "g_assertion_message_cmpstrv" });
    const ret = cFn(_domain, _file, _line, _func, _expr, _arg1, _arg2, _first_wrong_idx);
    return ret;
}
/// func [assertion_message_error](https://docs.gtk.org/glib/func.assertion_message_error.html)
pub fn assertionMessageError(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _expr: [*:0]const u8, _error: *core.Error, _error_domain: u32, _error_code: i32) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8, *core.Error, u32, i32) callconv(.c) void, .{ .name = "g_assertion_message_error" });
    const ret = cFn(_domain, _file, _line, _func, _expr, _error, _error_domain, _error_code);
    return ret;
}
/// Deprecated:
/// func [atexit](https://docs.gtk.org/glib/func.atexit.html)
pub const atexit = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn atexit(_func: glib.VoidFunc) void {
        const cFn = @extern(*const fn (glib.VoidFunc) callconv(.c) void, .{ .name = "g_atexit" });
        const ret = cFn(_func);
        return ret;
    }
}.atexit;
/// func [atomic_int_add](https://docs.gtk.org/glib/func.atomic_int_add.html)
pub fn atomicIntAdd(_atomic: *i32, _val: i32) i32 {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) i32, .{ .name = "g_atomic_int_add" });
    const ret = cFn(_atomic, _val);
    return ret;
}
/// func [atomic_int_and](https://docs.gtk.org/glib/func.atomic_int_and.html)
pub fn atomicIntAnd(_atomic: *u32, _val: u32) u32 {
    const cFn = @extern(*const fn (*u32, u32) callconv(.c) u32, .{ .name = "g_atomic_int_and" });
    const ret = cFn(_atomic, _val);
    return ret;
}
/// func [atomic_int_compare_and_exchange](https://docs.gtk.org/glib/func.atomic_int_compare_and_exchange.html)
pub fn atomicIntCompareAndExchange(_atomic: *i32, _oldval: i32, _newval: i32) bool {
    const cFn = @extern(*const fn (*i32, i32, i32) callconv(.c) bool, .{ .name = "g_atomic_int_compare_and_exchange" });
    const ret = cFn(_atomic, _oldval, _newval);
    return ret;
}
/// func [atomic_int_compare_and_exchange_full](https://docs.gtk.org/glib/func.atomic_int_compare_and_exchange_full.html)
pub fn atomicIntCompareAndExchangeFull(_atomic: *i32, _oldval: i32, _newval: i32) struct {
    ret: bool,
    preval: i32,
} {
    var preval_out: i32 = undefined;
    const _preval = &preval_out;
    const cFn = @extern(*const fn (*i32, i32, i32, *i32) callconv(.c) bool, .{ .name = "g_atomic_int_compare_and_exchange_full" });
    const ret = cFn(_atomic, _oldval, _newval, _preval);
    return .{ .ret = ret, .preval = preval_out };
}
/// func [atomic_int_dec_and_test](https://docs.gtk.org/glib/func.atomic_int_dec_and_test.html)
pub fn atomicIntDecAndTest(_atomic: *i32) bool {
    const cFn = @extern(*const fn (*i32) callconv(.c) bool, .{ .name = "g_atomic_int_dec_and_test" });
    const ret = cFn(_atomic);
    return ret;
}
/// func [atomic_int_exchange](https://docs.gtk.org/glib/func.atomic_int_exchange.html)
pub fn atomicIntExchange(_atomic: *i32, _newval: i32) i32 {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) i32, .{ .name = "g_atomic_int_exchange" });
    const ret = cFn(_atomic, _newval);
    return ret;
}
/// Deprecated:
/// func [atomic_int_exchange_and_add](https://docs.gtk.org/glib/func.atomic_int_exchange_and_add.html)
pub const atomicIntExchangeAndAdd = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn atomicIntExchangeAndAdd(_atomic: *i32, _val: i32) i32 {
        const cFn = @extern(*const fn (*i32, i32) callconv(.c) i32, .{ .name = "g_atomic_int_exchange_and_add" });
        const ret = cFn(_atomic, _val);
        return ret;
    }
}.atomicIntExchangeAndAdd;
/// func [atomic_int_get](https://docs.gtk.org/glib/func.atomic_int_get.html)
pub fn atomicIntGet(_atomic: *i32) i32 {
    const cFn = @extern(*const fn (*i32) callconv(.c) i32, .{ .name = "g_atomic_int_get" });
    const ret = cFn(_atomic);
    return ret;
}
/// func [atomic_int_inc](https://docs.gtk.org/glib/func.atomic_int_inc.html)
pub fn atomicIntInc(_atomic: *i32) void {
    const cFn = @extern(*const fn (*i32) callconv(.c) void, .{ .name = "g_atomic_int_inc" });
    const ret = cFn(_atomic);
    return ret;
}
/// func [atomic_int_or](https://docs.gtk.org/glib/func.atomic_int_or.html)
pub fn atomicIntOr(_atomic: *u32, _val: u32) u32 {
    const cFn = @extern(*const fn (*u32, u32) callconv(.c) u32, .{ .name = "g_atomic_int_or" });
    const ret = cFn(_atomic, _val);
    return ret;
}
/// func [atomic_int_set](https://docs.gtk.org/glib/func.atomic_int_set.html)
pub fn atomicIntSet(_atomic: *i32, _newval: i32) void {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) void, .{ .name = "g_atomic_int_set" });
    const ret = cFn(_atomic, _newval);
    return ret;
}
/// func [atomic_int_xor](https://docs.gtk.org/glib/func.atomic_int_xor.html)
pub fn atomicIntXor(_atomic: *u32, _val: u32) u32 {
    const cFn = @extern(*const fn (*u32, u32) callconv(.c) u32, .{ .name = "g_atomic_int_xor" });
    const ret = cFn(_atomic, _val);
    return ret;
}
/// func [atomic_pointer_add](https://docs.gtk.org/glib/func.atomic_pointer_add.html)
pub fn atomicPointerAdd(_atomic: *anyopaque, _val: i64) i64 {
    const cFn = @extern(*const fn (*anyopaque, i64) callconv(.c) i64, .{ .name = "g_atomic_pointer_add" });
    const ret = cFn(@ptrCast(_atomic), _val);
    return ret;
}
/// func [atomic_pointer_and](https://docs.gtk.org/glib/func.atomic_pointer_and.html)
pub fn atomicPointerAnd(_atomic: *anyopaque, _val: u64) u64 {
    const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) u64, .{ .name = "g_atomic_pointer_and" });
    const ret = cFn(@ptrCast(_atomic), _val);
    return ret;
}
/// func [atomic_pointer_compare_and_exchange](https://docs.gtk.org/glib/func.atomic_pointer_compare_and_exchange.html)
pub fn atomicPointerCompareAndExchange(_atomic: *anyopaque, _oldval: ?*anyopaque, _newval: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_atomic_pointer_compare_and_exchange" });
    const ret = cFn(@ptrCast(_atomic), @ptrCast(_oldval), @ptrCast(_newval));
    return ret;
}
/// func [atomic_pointer_compare_and_exchange_full](https://docs.gtk.org/glib/func.atomic_pointer_compare_and_exchange_full.html)
pub fn atomicPointerCompareAndExchangeFull(_atomic: *anyopaque, _oldval: ?*anyopaque, _newval: ?*anyopaque) struct {
    ret: bool,
    preval: *anyopaque,
} {
    var preval_out: *anyopaque = undefined;
    const _preval = &preval_out;
    const cFn = @extern(*const fn (*anyopaque, ?*anyopaque, ?*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_atomic_pointer_compare_and_exchange_full" });
    const ret = cFn(@ptrCast(_atomic), @ptrCast(_oldval), @ptrCast(_newval), @ptrCast(_preval));
    return .{ .ret = ret, .preval = preval_out };
}
/// func [atomic_pointer_exchange](https://docs.gtk.org/glib/func.atomic_pointer_exchange.html)
pub fn atomicPointerExchange(_atomic: ?*anyopaque, _newval: ?*anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_atomic_pointer_exchange" });
    const ret = cFn(@ptrCast(_atomic), @ptrCast(_newval));
    return ret;
}
/// func [atomic_pointer_get](https://docs.gtk.org/glib/func.atomic_pointer_get.html)
pub fn atomicPointerGet(_atomic: *anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_atomic_pointer_get" });
    const ret = cFn(@ptrCast(_atomic));
    return ret;
}
/// func [atomic_pointer_or](https://docs.gtk.org/glib/func.atomic_pointer_or.html)
pub fn atomicPointerOr(_atomic: *anyopaque, _val: u64) u64 {
    const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) u64, .{ .name = "g_atomic_pointer_or" });
    const ret = cFn(@ptrCast(_atomic), _val);
    return ret;
}
/// func [atomic_pointer_set](https://docs.gtk.org/glib/func.atomic_pointer_set.html)
pub fn atomicPointerSet(_atomic: *anyopaque, _newval: ?*anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_atomic_pointer_set" });
    const ret = cFn(@ptrCast(_atomic), @ptrCast(_newval));
    return ret;
}
/// func [atomic_pointer_xor](https://docs.gtk.org/glib/func.atomic_pointer_xor.html)
pub fn atomicPointerXor(_atomic: *anyopaque, _val: u64) u64 {
    const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) u64, .{ .name = "g_atomic_pointer_xor" });
    const ret = cFn(@ptrCast(_atomic), _val);
    return ret;
}
/// func [atomic_rc_box_acquire](https://docs.gtk.org/glib/func.atomic_rc_box_acquire.html)
pub fn atomicRcBoxAcquire(_mem_block: *anyopaque) *anyopaque {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) *anyopaque, .{ .name = "g_atomic_rc_box_acquire" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [atomic_rc_box_alloc](https://docs.gtk.org/glib/func.atomic_rc_box_alloc.html)
pub fn atomicRcBoxAlloc(_block_size: u64) *anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) *anyopaque, .{ .name = "g_atomic_rc_box_alloc" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [atomic_rc_box_alloc0](https://docs.gtk.org/glib/func.atomic_rc_box_alloc0.html)
pub fn atomicRcBoxAlloc0(_block_size: u64) *anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) *anyopaque, .{ .name = "g_atomic_rc_box_alloc0" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [atomic_rc_box_dup](https://docs.gtk.org/glib/func.atomic_rc_box_dup.html)
pub fn atomicRcBoxDup(_block_size: u64, _mem_block: *anyopaque) *anyopaque {
    const cFn = @extern(*const fn (u64, *anyopaque) callconv(.c) *anyopaque, .{ .name = "g_atomic_rc_box_dup" });
    const ret = cFn(_block_size, @ptrCast(_mem_block));
    return ret;
}
/// func [atomic_rc_box_get_size](https://docs.gtk.org/glib/func.atomic_rc_box_get_size.html)
pub fn atomicRcBoxGetSize(_mem_block: *anyopaque) u64 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u64, .{ .name = "g_atomic_rc_box_get_size" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [atomic_rc_box_release](https://docs.gtk.org/glib/func.atomic_rc_box_release.html)
pub fn atomicRcBoxRelease(_mem_block: *anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) void, .{ .name = "g_atomic_rc_box_release" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [atomic_rc_box_release_full](https://docs.gtk.org/glib/func.atomic_rc_box_release_full.html)
pub fn atomicRcBoxReleaseFull(_mem_block: *anyopaque, _clear_func: glib.DestroyNotify) void {
    const cFn = @extern(*const fn (*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "g_atomic_rc_box_release_full" });
    const ret = cFn(@ptrCast(_mem_block), _clear_func);
    return ret;
}
/// func [atomic_ref_count_compare](https://docs.gtk.org/glib/func.atomic_ref_count_compare.html)
pub fn atomicRefCountCompare(_arc: *i32, _val: i32) bool {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) bool, .{ .name = "g_atomic_ref_count_compare" });
    const ret = cFn(_arc, _val);
    return ret;
}
/// func [atomic_ref_count_dec](https://docs.gtk.org/glib/func.atomic_ref_count_dec.html)
pub fn atomicRefCountDec(_arc: *i32) bool {
    const cFn = @extern(*const fn (*i32) callconv(.c) bool, .{ .name = "g_atomic_ref_count_dec" });
    const ret = cFn(_arc);
    return ret;
}
/// func [atomic_ref_count_inc](https://docs.gtk.org/glib/func.atomic_ref_count_inc.html)
pub fn atomicRefCountInc(_arc: *i32) void {
    const cFn = @extern(*const fn (*i32) callconv(.c) void, .{ .name = "g_atomic_ref_count_inc" });
    const ret = cFn(_arc);
    return ret;
}
/// func [atomic_ref_count_init](https://docs.gtk.org/glib/func.atomic_ref_count_init.html)
pub fn atomicRefCountInit(_arc: *i32) void {
    const cFn = @extern(*const fn (*i32) callconv(.c) void, .{ .name = "g_atomic_ref_count_init" });
    const ret = cFn(_arc);
    return ret;
}
/// func [base64_decode](https://docs.gtk.org/glib/func.base64_decode.html)
pub fn base64Decode(_text: [*:0]const u8) struct {
    ret: [*]u8,
    out_len: u64,
} {
    var out_len_out: u64 = undefined;
    const _out_len = &out_len_out;
    const cFn = @extern(*const fn ([*:0]const u8, *u64) callconv(.c) [*]u8, .{ .name = "g_base64_decode" });
    const ret = cFn(_text, _out_len);
    return .{ .ret = ret, .out_len = out_len_out };
}
/// func [base64_decode_inplace](https://docs.gtk.org/glib/func.base64_decode_inplace.html)
pub fn base64DecodeInplace(_texts: []u8) []u8 {
    const _text = _texts.ptr;
    var _out_len: u64 = @intCast(_texts.len);
    const cFn = @extern(*const fn ([*]u8, *u64) callconv(.c) [*]u8, .{ .name = "g_base64_decode_inplace" });
    const ret = cFn(_text, &_out_len);
    return ret[0.._out_len];
}
/// func [base64_encode](https://docs.gtk.org/glib/func.base64_encode.html)
pub fn base64Encode(_datas: []u8) [*:0]u8 {
    const _data = _datas.ptr;
    const _len: u64 = @intCast(_datas.len);
    const cFn = @extern(*const fn (?[*]u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_base64_encode" });
    const ret = cFn(_data, _len);
    return ret;
}
/// func [base64_encode_close](https://docs.gtk.org/glib/func.base64_encode_close.html)
pub fn base64EncodeClose(_break_lines: bool, _out: [*]u8, _state: *i32, _save: *i32) u64 {
    const cFn = @extern(*const fn (bool, [*]u8, *i32, *i32) callconv(.c) u64, .{ .name = "g_base64_encode_close" });
    const ret = cFn(_break_lines, _out, _state, _save);
    return ret;
}
/// func [base64_encode_step](https://docs.gtk.org/glib/func.base64_encode_step.html)
pub fn base64EncodeStep(_ins: []u8, _break_lines: bool, _out: [*]u8, _state: *i32, _save: *i32) u64 {
    const _in = _ins.ptr;
    const _len: u64 = @intCast(_ins.len);
    const cFn = @extern(*const fn ([*]u8, u64, bool, [*]u8, *i32, *i32) callconv(.c) u64, .{ .name = "g_base64_encode_step" });
    const ret = cFn(_in, _len, _break_lines, _out, _state, _save);
    return ret;
}
/// Deprecated:
/// func [basename](https://docs.gtk.org/glib/func.basename.html)
pub const basename = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn basename(_file_name: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_basename" });
        const ret = cFn(_file_name);
        return ret;
    }
}.basename;
/// func [bit_lock](https://docs.gtk.org/glib/func.bit_lock.html)
pub fn bitLock(_address: *i32, _lock_bit: i32) void {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) void, .{ .name = "g_bit_lock" });
    const ret = cFn(_address, _lock_bit);
    return ret;
}
/// func [bit_nth_lsf](https://docs.gtk.org/glib/func.bit_nth_lsf.html)
pub fn bitNthLsf(_mask: u64, _nth_bit: i32) i32 {
    const cFn = @extern(*const fn (u64, i32) callconv(.c) i32, .{ .name = "g_bit_nth_lsf" });
    const ret = cFn(_mask, _nth_bit);
    return ret;
}
/// func [bit_nth_msf](https://docs.gtk.org/glib/func.bit_nth_msf.html)
pub fn bitNthMsf(_mask: u64, _nth_bit: i32) i32 {
    const cFn = @extern(*const fn (u64, i32) callconv(.c) i32, .{ .name = "g_bit_nth_msf" });
    const ret = cFn(_mask, _nth_bit);
    return ret;
}
/// func [bit_storage](https://docs.gtk.org/glib/func.bit_storage.html)
pub fn bitStorage(_number: u64) u32 {
    const cFn = @extern(*const fn (u64) callconv(.c) u32, .{ .name = "g_bit_storage" });
    const ret = cFn(_number);
    return ret;
}
/// func [bit_trylock](https://docs.gtk.org/glib/func.bit_trylock.html)
pub fn bitTrylock(_address: *i32, _lock_bit: i32) bool {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) bool, .{ .name = "g_bit_trylock" });
    const ret = cFn(_address, _lock_bit);
    return ret;
}
/// func [bit_unlock](https://docs.gtk.org/glib/func.bit_unlock.html)
pub fn bitUnlock(_address: *i32, _lock_bit: i32) void {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) void, .{ .name = "g_bit_unlock" });
    const ret = cFn(_address, _lock_bit);
    return ret;
}
/// func [blow_chunks](https://docs.gtk.org/glib/func.blow_chunks.html)
pub fn blowChunks() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_blow_chunks" });
    const ret = cFn();
    return ret;
}
/// func [bookmark_file_error_quark](https://docs.gtk.org/glib/func.bookmark_file_error_quark.html)
pub fn bookmarkFileErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_bookmark_file_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [build_filenamev](https://docs.gtk.org/glib/func.build_filenamev.html)
pub fn buildFilenamev(_args: [*:null]?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_build_filenamev" });
    const ret = cFn(_args);
    return ret;
}
/// func [build_pathv](https://docs.gtk.org/glib/func.build_pathv.html)
pub fn buildPathv(_separator: [*:0]const u8, _args: [*:null]?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_build_pathv" });
    const ret = cFn(_separator, _args);
    return ret;
}
/// func [byte_array_append](https://docs.gtk.org/glib/func.byte_array_append.html)
pub fn byteArrayAppend(_array: *core.ByteArray, _data: *u8, _len: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, *u8, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_append" });
    const ret = cFn(_array, _data, _len);
    return ret;
}
/// func [byte_array_free](https://docs.gtk.org/glib/func.byte_array_free.html)
pub fn byteArrayFree(_array: *core.ByteArray, _free_segment: bool) *u8 {
    const cFn = @extern(*const fn (*core.ByteArray, bool) callconv(.c) *u8, .{ .name = "g_byte_array_free" });
    const ret = cFn(_array, _free_segment);
    return ret;
}
/// func [byte_array_free_to_bytes](https://docs.gtk.org/glib/func.byte_array_free_to_bytes.html)
pub fn byteArrayFreeToBytes(_array: *core.ByteArray) *glib.Bytes {
    const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) *glib.Bytes, .{ .name = "g_byte_array_free_to_bytes" });
    const ret = cFn(_array);
    return ret;
}
/// func [byte_array_new](https://docs.gtk.org/glib/func.byte_array_new.html)
pub fn byteArrayNew() *core.ByteArray {
    const cFn = @extern(*const fn () callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_new" });
    const ret = cFn();
    return ret;
}
/// func [byte_array_new_take](https://docs.gtk.org/glib/func.byte_array_new_take.html)
pub fn byteArrayNewTake(_datas: []u8) *core.ByteArray {
    const _data = _datas.ptr;
    const _len: u64 = @intCast(_datas.len);
    const cFn = @extern(*const fn ([*]u8, u64) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_new_take" });
    const ret = cFn(_data, _len);
    return ret;
}
/// func [byte_array_prepend](https://docs.gtk.org/glib/func.byte_array_prepend.html)
pub fn byteArrayPrepend(_array: *core.ByteArray, _data: *u8, _len: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, *u8, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_prepend" });
    const ret = cFn(_array, _data, _len);
    return ret;
}
/// func [byte_array_ref](https://docs.gtk.org/glib/func.byte_array_ref.html)
pub fn byteArrayRef(_array: *core.ByteArray) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_ref" });
    const ret = cFn(_array);
    return ret;
}
/// func [byte_array_remove_index](https://docs.gtk.org/glib/func.byte_array_remove_index.html)
pub fn byteArrayRemoveIndex(_array: *core.ByteArray, _index_: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_index" });
    const ret = cFn(_array, _index_);
    return ret;
}
/// func [byte_array_remove_index_fast](https://docs.gtk.org/glib/func.byte_array_remove_index_fast.html)
pub fn byteArrayRemoveIndexFast(_array: *core.ByteArray, _index_: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_index_fast" });
    const ret = cFn(_array, _index_);
    return ret;
}
/// func [byte_array_remove_range](https://docs.gtk.org/glib/func.byte_array_remove_range.html)
pub fn byteArrayRemoveRange(_array: *core.ByteArray, _index_: u32, _length: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, u32, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_remove_range" });
    const ret = cFn(_array, _index_, _length);
    return ret;
}
/// func [byte_array_set_size](https://docs.gtk.org/glib/func.byte_array_set_size.html)
pub fn byteArraySetSize(_array: *core.ByteArray, _length: u32) *core.ByteArray {
    const cFn = @extern(*const fn (*core.ByteArray, u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_set_size" });
    const ret = cFn(_array, _length);
    return ret;
}
/// func [byte_array_sized_new](https://docs.gtk.org/glib/func.byte_array_sized_new.html)
pub fn byteArraySizedNew(_reserved_size: u32) *core.ByteArray {
    const cFn = @extern(*const fn (u32) callconv(.c) *core.ByteArray, .{ .name = "g_byte_array_sized_new" });
    const ret = cFn(_reserved_size);
    return ret;
}
/// func [byte_array_sort](https://docs.gtk.org/glib/func.byte_array_sort.html)
pub fn byteArraySort(_array: *core.ByteArray, _compare_func: glib.CompareFunc) void {
    const cFn = @extern(*const fn (*core.ByteArray, glib.CompareFunc) callconv(.c) void, .{ .name = "g_byte_array_sort" });
    const ret = cFn(_array, _compare_func);
    return ret;
}
/// func [byte_array_sort_with_data](https://docs.gtk.org/glib/func.byte_array_sort_with_data.html)
pub fn byteArraySortWithData(_array: *core.ByteArray, compare_func: anytype, compare_func_args: anytype) void {
    var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
    defer closure_compare_func.deinit();
    const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
    const cFn = @extern(*const fn (*core.ByteArray, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_byte_array_sort_with_data" });
    const ret = cFn(_array, _compare_func, @ptrCast(_user_data));
    return ret;
}
/// func [byte_array_steal](https://docs.gtk.org/glib/func.byte_array_steal.html)
pub fn byteArraySteal(_array: *core.ByteArray) struct {
    ret: *u8,
    len: u64,
} {
    var len_out: u64 = undefined;
    const _len = &len_out;
    const cFn = @extern(*const fn (*core.ByteArray, ?*u64) callconv(.c) *u8, .{ .name = "g_byte_array_steal" });
    const ret = cFn(_array, _len);
    return .{ .ret = ret, .len = len_out };
}
/// func [byte_array_unref](https://docs.gtk.org/glib/func.byte_array_unref.html)
pub fn byteArrayUnref(_array: *core.ByteArray) void {
    const cFn = @extern(*const fn (*core.ByteArray) callconv(.c) void, .{ .name = "g_byte_array_unref" });
    const ret = cFn(_array);
    return ret;
}
/// func [canonicalize_filename](https://docs.gtk.org/glib/func.canonicalize_filename.html)
pub fn canonicalizeFilename(_filename: [*:0]const u8, _relative_to: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_canonicalize_filename" });
    const ret = cFn(_filename, _relative_to);
    return ret;
}
/// func [chdir](https://docs.gtk.org/glib/func.chdir.html)
pub fn chdir(_path: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) i32, .{ .name = "g_chdir" });
    const ret = cFn(_path);
    return ret;
}
/// func [check_version](https://docs.gtk.org/glib/func.check_version.html)
pub fn checkVersion(_required_major: u32, _required_minor: u32, _required_micro: u32) ?[*:0]u8 {
    const cFn = @extern(*const fn (u32, u32, u32) callconv(.c) ?[*:0]u8, .{ .name = "glib_check_version" });
    const ret = cFn(_required_major, _required_minor, _required_micro);
    return ret;
}
/// func [checksum_type_get_length](https://docs.gtk.org/glib/func.checksum_type_get_length.html)
pub fn checksumTypeGetLength(_checksum_type: glib.ChecksumType) i64 {
    const cFn = @extern(*const fn (glib.ChecksumType) callconv(.c) i64, .{ .name = "g_checksum_type_get_length" });
    const ret = cFn(_checksum_type);
    return ret;
}
/// func [child_watch_add](https://docs.gtk.org/glib/func.child_watch_add.html)
pub fn childWatchAdd(_priority: i32, _pid: i32, function: anytype, function_args: anytype) u32 {
    var closure_function = core.zig_closure(function, function_args, &.{ void, i32, i32 });
    const _function: glib.ChildWatchFunc = @ptrCast(closure_function.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_function.c_data());
    const _notify: ?glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
    const cFn = @extern(*const fn (i32, i32, glib.ChildWatchFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_child_watch_add_full" });
    const ret = cFn(_priority, _pid, _function, @ptrCast(_data), _notify);
    return ret;
}
/// func [child_watch_source_new](https://docs.gtk.org/glib/func.child_watch_source_new.html)
pub fn childWatchSourceNew(_pid: i32) *glib.Source {
    const cFn = @extern(*const fn (i32) callconv(.c) *glib.Source, .{ .name = "g_child_watch_source_new" });
    const ret = cFn(_pid);
    return ret;
}
/// func [chmod](https://docs.gtk.org/glib/func.chmod.html)
pub fn chmod(_filename: [*:0]const u8, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) i32, .{ .name = "g_chmod" });
    const ret = cFn(_filename, _mode);
    return ret;
}
/// func [clear_error](https://docs.gtk.org/glib/func.clear_error.html)
pub fn clearError(_error: *?*core.Error) error{GError}!void {
    const cFn = @extern(*const fn (*?*core.Error) callconv(.c) void, .{ .name = "g_clear_error" });
    const ret = cFn(_error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [close](https://docs.gtk.org/glib/func.close.html)
pub fn close(_fd: i32, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_close" });
    const ret = cFn(_fd, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [closefrom](https://docs.gtk.org/glib/func.closefrom.html)
pub fn closefrom(_lowfd: i32) i32 {
    const cFn = @extern(*const fn (i32) callconv(.c) i32, .{ .name = "g_closefrom" });
    const ret = cFn(_lowfd);
    return ret;
}
/// func [compute_checksum_for_bytes](https://docs.gtk.org/glib/func.compute_checksum_for_bytes.html)
pub fn computeChecksumForBytes(_checksum_type: glib.ChecksumType, _data: *glib.Bytes) ?[*:0]u8 {
    const cFn = @extern(*const fn (glib.ChecksumType, *glib.Bytes) callconv(.c) ?[*:0]u8, .{ .name = "g_compute_checksum_for_bytes" });
    const ret = cFn(_checksum_type, _data);
    return ret;
}
/// func [compute_checksum_for_data](https://docs.gtk.org/glib/func.compute_checksum_for_data.html)
pub fn computeChecksumForData(_checksum_type: glib.ChecksumType, _datas: []u8) ?[*:0]u8 {
    const _data = _datas.ptr;
    const _length: u64 = @intCast(_datas.len);
    const cFn = @extern(*const fn (glib.ChecksumType, [*]u8, u64) callconv(.c) ?[*:0]u8, .{ .name = "g_compute_checksum_for_data" });
    const ret = cFn(_checksum_type, _data, _length);
    return ret;
}
/// func [compute_checksum_for_string](https://docs.gtk.org/glib/func.compute_checksum_for_string.html)
pub fn computeChecksumForString(_checksum_type: glib.ChecksumType, _str: [*:0]const u8, _length: i64) ?[*:0]u8 {
    const cFn = @extern(*const fn (glib.ChecksumType, [*:0]const u8, i64) callconv(.c) ?[*:0]u8, .{ .name = "g_compute_checksum_for_string" });
    const ret = cFn(_checksum_type, _str, _length);
    return ret;
}
/// func [compute_hmac_for_bytes](https://docs.gtk.org/glib/func.compute_hmac_for_bytes.html)
pub fn computeHmacForBytes(_digest_type: glib.ChecksumType, _key: *glib.Bytes, _data: *glib.Bytes) [*:0]u8 {
    const cFn = @extern(*const fn (glib.ChecksumType, *glib.Bytes, *glib.Bytes) callconv(.c) [*:0]u8, .{ .name = "g_compute_hmac_for_bytes" });
    const ret = cFn(_digest_type, _key, _data);
    return ret;
}
/// func [compute_hmac_for_data](https://docs.gtk.org/glib/func.compute_hmac_for_data.html)
pub fn computeHmacForData(_digest_type: glib.ChecksumType, _keys: []u8, _datas: []u8) [*:0]u8 {
    const _key = _keys.ptr;
    const _key_len: u64 = @intCast(_keys.len);
    const _data = _datas.ptr;
    const _length: u64 = @intCast(_datas.len);
    const cFn = @extern(*const fn (glib.ChecksumType, [*]u8, u64, [*]u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_compute_hmac_for_data" });
    const ret = cFn(_digest_type, _key, _key_len, _data, _length);
    return ret;
}
/// func [compute_hmac_for_string](https://docs.gtk.org/glib/func.compute_hmac_for_string.html)
pub fn computeHmacForString(_digest_type: glib.ChecksumType, _keys: []u8, _str: [*:0]const u8, _length: i64) [*:0]u8 {
    const _key = _keys.ptr;
    const _key_len: u64 = @intCast(_keys.len);
    const cFn = @extern(*const fn (glib.ChecksumType, [*]u8, u64, [*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_compute_hmac_for_string" });
    const ret = cFn(_digest_type, _key, _key_len, _str, _length);
    return ret;
}
/// func [convert](https://docs.gtk.org/glib/func.convert.html)
pub fn convert(_strs: []u8, _to_codeset: [*:0]const u8, _from_codeset: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: [*]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*]u8, i64, [*:0]const u8, [*:0]const u8, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*]u8, .{ .name = "g_convert" });
    const ret = cFn(_str, _len, _to_codeset, _from_codeset, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [convert_error_quark](https://docs.gtk.org/glib/func.convert_error_quark.html)
pub fn convertErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_convert_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [convert_with_fallback](https://docs.gtk.org/glib/func.convert_with_fallback.html)
pub fn convertWithFallback(_strs: []u8, _to_codeset: [*:0]const u8, _from_codeset: [*:0]const u8, _fallback: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: [*]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*]u8, i64, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*]u8, .{ .name = "g_convert_with_fallback" });
    const ret = cFn(_str, _len, _to_codeset, _from_codeset, _fallback, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [creat](https://docs.gtk.org/glib/func.creat.html)
pub fn creat(_filename: [*:0]const u8, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) i32, .{ .name = "g_creat" });
    const ret = cFn(_filename, _mode);
    return ret;
}
/// func [datalist_foreach](https://docs.gtk.org/glib/func.datalist_foreach.html)
pub fn datalistForeach(_datalist: *glib.Data, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, u32, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.DataForeachFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*glib.Data, glib.DataForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_datalist_foreach" });
    const ret = cFn(_datalist, _func, @ptrCast(_user_data));
    return ret;
}
/// func [datalist_get_data](https://docs.gtk.org/glib/func.datalist_get_data.html)
pub fn datalistGetData(_datalist: *glib.Data, _key: [*:0]const u8) ?*anyopaque {
    const cFn = @extern(*const fn (*glib.Data, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_datalist_get_data" });
    const ret = cFn(_datalist, _key);
    return ret;
}
/// func [datalist_get_flags](https://docs.gtk.org/glib/func.datalist_get_flags.html)
pub fn datalistGetFlags(_datalist: *glib.Data) u32 {
    const cFn = @extern(*const fn (*glib.Data) callconv(.c) u32, .{ .name = "g_datalist_get_flags" });
    const ret = cFn(_datalist);
    return ret;
}
/// func [datalist_id_get_data](https://docs.gtk.org/glib/func.datalist_id_get_data.html)
pub fn datalistIdGetData(_datalist: *glib.Data, _key_id: u32) ?*anyopaque {
    const cFn = @extern(*const fn (*glib.Data, u32) callconv(.c) ?*anyopaque, .{ .name = "g_datalist_id_get_data" });
    const ret = cFn(_datalist, _key_id);
    return ret;
}
/// func [datalist_id_remove_multiple](https://docs.gtk.org/glib/func.datalist_id_remove_multiple.html)
pub fn datalistIdRemoveMultiple(_datalist: *glib.Data, _keyss: []u32) void {
    const _keys = _keyss.ptr;
    const _n_keys: u64 = @intCast(_keyss.len);
    const cFn = @extern(*const fn (*glib.Data, [*]u32, u64) callconv(.c) void, .{ .name = "g_datalist_id_remove_multiple" });
    const ret = cFn(_datalist, _keys, _n_keys);
    return ret;
}
/// func [datalist_set_flags](https://docs.gtk.org/glib/func.datalist_set_flags.html)
pub fn datalistSetFlags(_datalist: *glib.Data, _flags: u32) void {
    const cFn = @extern(*const fn (*glib.Data, u32) callconv(.c) void, .{ .name = "g_datalist_set_flags" });
    const ret = cFn(_datalist, _flags);
    return ret;
}
/// func [datalist_unset_flags](https://docs.gtk.org/glib/func.datalist_unset_flags.html)
pub fn datalistUnsetFlags(_datalist: *glib.Data, _flags: u32) void {
    const cFn = @extern(*const fn (*glib.Data, u32) callconv(.c) void, .{ .name = "g_datalist_unset_flags" });
    const ret = cFn(_datalist, _flags);
    return ret;
}
/// func [dataset_destroy](https://docs.gtk.org/glib/func.dataset_destroy.html)
pub fn datasetDestroy(_dataset_location: *anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) void, .{ .name = "g_dataset_destroy" });
    const ret = cFn(@ptrCast(_dataset_location));
    return ret;
}
/// func [dataset_foreach](https://docs.gtk.org/glib/func.dataset_foreach.html)
pub fn datasetForeach(_dataset_location: *anyopaque, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, u32, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.DataForeachFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*anyopaque, glib.DataForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_dataset_foreach" });
    const ret = cFn(@ptrCast(_dataset_location), _func, @ptrCast(_user_data));
    return ret;
}
/// func [dataset_id_get_data](https://docs.gtk.org/glib/func.dataset_id_get_data.html)
pub fn datasetIdGetData(_dataset_location: *anyopaque, _key_id: u32) ?*anyopaque {
    const cFn = @extern(*const fn (*anyopaque, u32) callconv(.c) ?*anyopaque, .{ .name = "g_dataset_id_get_data" });
    const ret = cFn(@ptrCast(_dataset_location), _key_id);
    return ret;
}
/// func [date_get_days_in_month](https://docs.gtk.org/glib/func.date_get_days_in_month.html)
pub fn dateGetDaysInMonth(_month: glib.DateMonth, _year: u16) u8 {
    const cFn = @extern(*const fn (glib.DateMonth, u16) callconv(.c) u8, .{ .name = "g_date_get_days_in_month" });
    const ret = cFn(_month, _year);
    return ret;
}
/// func [date_get_monday_weeks_in_year](https://docs.gtk.org/glib/func.date_get_monday_weeks_in_year.html)
pub fn dateGetMondayWeeksInYear(_year: u16) u8 {
    const cFn = @extern(*const fn (u16) callconv(.c) u8, .{ .name = "g_date_get_monday_weeks_in_year" });
    const ret = cFn(_year);
    return ret;
}
/// func [date_get_sunday_weeks_in_year](https://docs.gtk.org/glib/func.date_get_sunday_weeks_in_year.html)
pub fn dateGetSundayWeeksInYear(_year: u16) u8 {
    const cFn = @extern(*const fn (u16) callconv(.c) u8, .{ .name = "g_date_get_sunday_weeks_in_year" });
    const ret = cFn(_year);
    return ret;
}
/// func [date_is_leap_year](https://docs.gtk.org/glib/func.date_is_leap_year.html)
pub fn dateIsLeapYear(_year: u16) bool {
    const cFn = @extern(*const fn (u16) callconv(.c) bool, .{ .name = "g_date_is_leap_year" });
    const ret = cFn(_year);
    return ret;
}
/// func [date_strftime](https://docs.gtk.org/glib/func.date_strftime.html)
pub fn dateStrftime(_s: [*:0]const u8, _slen: u64, _format: [*:0]const u8, _date: *glib.Date) u64 {
    const cFn = @extern(*const fn ([*:0]const u8, u64, [*:0]const u8, *glib.Date) callconv(.c) u64, .{ .name = "g_date_strftime" });
    const ret = cFn(_s, _slen, _format, _date);
    return ret;
}
/// func [date_valid_day](https://docs.gtk.org/glib/func.date_valid_day.html)
pub fn dateValidDay(_day: u8) bool {
    const cFn = @extern(*const fn (u8) callconv(.c) bool, .{ .name = "g_date_valid_day" });
    const ret = cFn(_day);
    return ret;
}
/// func [date_valid_dmy](https://docs.gtk.org/glib/func.date_valid_dmy.html)
pub fn dateValidDmy(_day: u8, _month: glib.DateMonth, _year: u16) bool {
    const cFn = @extern(*const fn (u8, glib.DateMonth, u16) callconv(.c) bool, .{ .name = "g_date_valid_dmy" });
    const ret = cFn(_day, _month, _year);
    return ret;
}
/// func [date_valid_julian](https://docs.gtk.org/glib/func.date_valid_julian.html)
pub fn dateValidJulian(_julian_date: u32) bool {
    const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "g_date_valid_julian" });
    const ret = cFn(_julian_date);
    return ret;
}
/// func [date_valid_month](https://docs.gtk.org/glib/func.date_valid_month.html)
pub fn dateValidMonth(_month: glib.DateMonth) bool {
    const cFn = @extern(*const fn (glib.DateMonth) callconv(.c) bool, .{ .name = "g_date_valid_month" });
    const ret = cFn(_month);
    return ret;
}
/// func [date_valid_weekday](https://docs.gtk.org/glib/func.date_valid_weekday.html)
pub fn dateValidWeekday(_weekday: glib.DateWeekday) bool {
    const cFn = @extern(*const fn (glib.DateWeekday) callconv(.c) bool, .{ .name = "g_date_valid_weekday" });
    const ret = cFn(_weekday);
    return ret;
}
/// func [date_valid_year](https://docs.gtk.org/glib/func.date_valid_year.html)
pub fn dateValidYear(_year: u16) bool {
    const cFn = @extern(*const fn (u16) callconv(.c) bool, .{ .name = "g_date_valid_year" });
    const ret = cFn(_year);
    return ret;
}
/// func [dcgettext](https://docs.gtk.org/glib/func.dcgettext.html)
pub fn dcgettext(_domain: ?[*:0]const u8, _msgid: [*:0]const u8, _category: i32) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, i32) callconv(.c) [*:0]u8, .{ .name = "g_dcgettext" });
    const ret = cFn(_domain, _msgid, _category);
    return ret;
}
/// func [dgettext](https://docs.gtk.org/glib/func.dgettext.html)
pub fn dgettext(_domain: ?[*:0]const u8, _msgid: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_dgettext" });
    const ret = cFn(_domain, _msgid);
    return ret;
}
/// func [dir_make_tmp](https://docs.gtk.org/glib/func.dir_make_tmp.html)
pub fn dirMakeTmp(_tmpl: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_dir_make_tmp" });
    const ret = cFn(_tmpl, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [direct_equal](https://docs.gtk.org/glib/func.direct_equal.html)
pub fn directEqual(_v1: ?*anyopaque, _v2: ?*anyopaque) bool {
    const cFn = @extern(*const fn (?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_direct_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [direct_hash](https://docs.gtk.org/glib/func.direct_hash.html)
pub fn directHash(_v: ?*anyopaque) u32 {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) u32, .{ .name = "g_direct_hash" });
    const ret = cFn(@ptrCast(_v));
    return ret;
}
/// func [dngettext](https://docs.gtk.org/glib/func.dngettext.html)
pub fn dngettext(_domain: ?[*:0]const u8, _msgid: [*:0]const u8, _msgid_plural: [*:0]const u8, _n: u64) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, [*:0]const u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_dngettext" });
    const ret = cFn(_domain, _msgid, _msgid_plural, _n);
    return ret;
}
/// func [double_equal](https://docs.gtk.org/glib/func.double_equal.html)
pub fn doubleEqual(_v1: *anyopaque, _v2: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_double_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [double_hash](https://docs.gtk.org/glib/func.double_hash.html)
pub fn doubleHash(_v: *anyopaque) u32 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u32, .{ .name = "g_double_hash" });
    const ret = cFn(@ptrCast(_v));
    return ret;
}
/// func [dpgettext](https://docs.gtk.org/glib/func.dpgettext.html)
pub fn dpgettext(_domain: ?[*:0]const u8, _msgctxtid: [*:0]const u8, _msgidoffset: u64) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_dpgettext" });
    const ret = cFn(_domain, _msgctxtid, _msgidoffset);
    return ret;
}
/// func [dpgettext2](https://docs.gtk.org/glib/func.dpgettext2.html)
pub fn dpgettext2(_domain: ?[*:0]const u8, _context: [*:0]const u8, _msgid: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_dpgettext2" });
    const ret = cFn(_domain, _context, _msgid);
    return ret;
}
/// func [environ_getenv](https://docs.gtk.org/glib/func.environ_getenv.html)
pub fn environGetenv(_envp: ?[*:null]?[*:0]const u8, _variable: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_environ_getenv" });
    const ret = cFn(_envp, _variable);
    return ret;
}
/// func [environ_setenv](https://docs.gtk.org/glib/func.environ_setenv.html)
pub fn environSetenv(_envp: ?[*:null]?[*:0]const u8, _variable: [*:0]const u8, _value: [*:0]const u8, _overwrite: bool) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8, [*:0]const u8, [*:0]const u8, bool) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_environ_setenv" });
    const ret = cFn(_envp, _variable, _value, _overwrite);
    return ret;
}
/// func [environ_unsetenv](https://docs.gtk.org/glib/func.environ_unsetenv.html)
pub fn environUnsetenv(_envp: ?[*:null]?[*:0]const u8, _variable: [*:0]const u8) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8, [*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_environ_unsetenv" });
    const ret = cFn(_envp, _variable);
    return ret;
}
/// func [error_domain_register](https://docs.gtk.org/glib/func.error_domain_register.html)
pub fn errorDomainRegister(_error_type_name: [*:0]const u8, _error_type_private_size: u64, _error_type_init: glib.ErrorInitFunc, _error_type_copy: glib.ErrorCopyFunc, _error_type_clear: glib.ErrorClearFunc) u32 {
    const cFn = @extern(*const fn ([*:0]const u8, u64, glib.ErrorInitFunc, glib.ErrorCopyFunc, glib.ErrorClearFunc) callconv(.c) u32, .{ .name = "g_error_domain_register" });
    const ret = cFn(_error_type_name, _error_type_private_size, _error_type_init, _error_type_copy, _error_type_clear);
    return ret;
}
/// func [error_domain_register_static](https://docs.gtk.org/glib/func.error_domain_register_static.html)
pub fn errorDomainRegisterStatic(_error_type_name: [*:0]const u8, _error_type_private_size: u64, _error_type_init: glib.ErrorInitFunc, _error_type_copy: glib.ErrorCopyFunc, _error_type_clear: glib.ErrorClearFunc) u32 {
    const cFn = @extern(*const fn ([*:0]const u8, u64, glib.ErrorInitFunc, glib.ErrorCopyFunc, glib.ErrorClearFunc) callconv(.c) u32, .{ .name = "g_error_domain_register_static" });
    const ret = cFn(_error_type_name, _error_type_private_size, _error_type_init, _error_type_copy, _error_type_clear);
    return ret;
}
/// func [fdwalk_set_cloexec](https://docs.gtk.org/glib/func.fdwalk_set_cloexec.html)
pub fn fdwalkSetCloexec(_lowfd: i32) i32 {
    const cFn = @extern(*const fn (i32) callconv(.c) i32, .{ .name = "g_fdwalk_set_cloexec" });
    const ret = cFn(_lowfd);
    return ret;
}
/// func [file_error_from_errno](https://docs.gtk.org/glib/func.file_error_from_errno.html)
pub fn fileErrorFromErrno(_err_no: i32) glib.FileError {
    const cFn = @extern(*const fn (i32) callconv(.c) glib.FileError, .{ .name = "g_file_error_from_errno" });
    const ret = cFn(_err_no);
    return ret;
}
/// func [file_error_quark](https://docs.gtk.org/glib/func.file_error_quark.html)
pub fn fileErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_file_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [file_get_contents](https://docs.gtk.org/glib/func.file_get_contents.html)
pub fn fileGetContents(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    contents: []u8,
} {
    var contents_out: [*]u8 = undefined;
    const _contents = &contents_out;
    var length_out: u64 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn ([*:0]const u8, *[*]u8, *u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_get_contents" });
    const ret = cFn(_filename, _contents, _length, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .contents = contents_out[0..@intCast(length_out)] };
}
/// func [file_open_tmp](https://docs.gtk.org/glib/func.file_open_tmp.html)
pub fn fileOpenTmp(_tmpl: ?[*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: i32,
    name_used: [*:0]u8,
} {
    var name_used_out: [*:0]u8 = undefined;
    const _name_used = &name_used_out;
    const cFn = @extern(*const fn (?[*:0]const u8, *[*:0]u8, *?*core.Error) callconv(.c) i32, .{ .name = "g_file_open_tmp" });
    const ret = cFn(_tmpl, _name_used, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .name_used = name_used_out };
}
/// func [file_read_link](https://docs.gtk.org/glib/func.file_read_link.html)
pub fn fileReadLink(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_file_read_link" });
    const ret = cFn(_filename, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [file_set_contents](https://docs.gtk.org/glib/func.file_set_contents.html)
pub fn fileSetContents(_filename: [*:0]const u8, _contentss: []u8, _error: *?*core.Error) error{GError}!bool {
    const _contents = _contentss.ptr;
    const _length: i64 = @intCast(_contentss.len);
    const cFn = @extern(*const fn ([*:0]const u8, [*]u8, i64, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_contents" });
    const ret = cFn(_filename, _contents, _length, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [file_set_contents_full](https://docs.gtk.org/glib/func.file_set_contents_full.html)
pub fn fileSetContentsFull(_filename: [*:0]const u8, _contentss: []u8, _flags: glib.FileSetContentsFlags, _mode: i32, _error: *?*core.Error) error{GError}!bool {
    const _contents = _contentss.ptr;
    const _length: i64 = @intCast(_contentss.len);
    const cFn = @extern(*const fn ([*:0]const u8, [*]u8, i64, glib.FileSetContentsFlags, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_contents_full" });
    const ret = cFn(_filename, _contents, _length, _flags, _mode, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [file_test](https://docs.gtk.org/glib/func.file_test.html)
pub fn fileTest(_filename: [*:0]const u8, _test: glib.FileTest) bool {
    const cFn = @extern(*const fn ([*:0]const u8, glib.FileTest) callconv(.c) bool, .{ .name = "g_file_test" });
    const ret = cFn(_filename, _test);
    return ret;
}
/// func [filename_display_basename](https://docs.gtk.org/glib/func.filename_display_basename.html)
pub fn filenameDisplayBasename(_filename: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_filename_display_basename" });
    const ret = cFn(_filename);
    return ret;
}
/// func [filename_display_name](https://docs.gtk.org/glib/func.filename_display_name.html)
pub fn filenameDisplayName(_filename: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_filename_display_name" });
    const ret = cFn(_filename);
    return ret;
}
/// func [filename_from_uri](https://docs.gtk.org/glib/func.filename_from_uri.html)
pub fn filenameFromUri(_uri: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    hostname: ?[*:0]u8,
} {
    var hostname_out: ?[*:0]u8 = undefined;
    const _hostname = &hostname_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_filename_from_uri" });
    const ret = cFn(_uri, _hostname, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .hostname = hostname_out };
}
/// func [filename_from_utf8](https://docs.gtk.org/glib/func.filename_from_utf8.html)
pub fn filenameFromUtf8(_utf8string: [*:0]const u8, _len: i64, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_filename_from_utf8" });
    const ret = cFn(_utf8string, _len, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [filename_to_uri](https://docs.gtk.org/glib/func.filename_to_uri.html)
pub fn filenameToUri(_filename: [*:0]const u8, _hostname: ?[*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_filename_to_uri" });
    const ret = cFn(_filename, _hostname, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [filename_to_utf8](https://docs.gtk.org/glib/func.filename_to_utf8.html)
pub fn filenameToUtf8(_opsysstring: [*:0]const u8, _len: i64, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_filename_to_utf8" });
    const ret = cFn(_opsysstring, _len, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [find_program_in_path](https://docs.gtk.org/glib/func.find_program_in_path.html)
pub fn findProgramInPath(_program: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_find_program_in_path" });
    const ret = cFn(_program);
    return ret;
}
/// func [fopen](https://docs.gtk.org/glib/func.fopen.html)
pub fn fopen(_filename: [*:0]const u8, _mode: [*:0]const u8) ?*anyopaque {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_fopen" });
    const ret = cFn(_filename, _mode);
    return ret;
}
/// func [format_size](https://docs.gtk.org/glib/func.format_size.html)
pub fn formatSize(_size: u64) [*:0]u8 {
    const cFn = @extern(*const fn (u64) callconv(.c) [*:0]u8, .{ .name = "g_format_size" });
    const ret = cFn(_size);
    return ret;
}
/// Deprecated:
/// func [format_size_for_display](https://docs.gtk.org/glib/func.format_size_for_display.html)
pub const formatSizeForDisplay = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn formatSizeForDisplay(_size: i64) [*:0]u8 {
        const cFn = @extern(*const fn (i64) callconv(.c) [*:0]u8, .{ .name = "g_format_size_for_display" });
        const ret = cFn(_size);
        return ret;
    }
}.formatSizeForDisplay;
/// func [format_size_full](https://docs.gtk.org/glib/func.format_size_full.html)
pub fn formatSizeFull(_size: u64, _flags: glib.FormatSizeFlags) [*:0]u8 {
    const cFn = @extern(*const fn (u64, glib.FormatSizeFlags) callconv(.c) [*:0]u8, .{ .name = "g_format_size_full" });
    const ret = cFn(_size, _flags);
    return ret;
}
/// func [free](https://docs.gtk.org/glib/func.free.html)
pub fn free(_mem: ?*anyopaque) void {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) void, .{ .name = "g_free" });
    const ret = cFn(@ptrCast(_mem));
    return ret;
}
/// func [free_sized](https://docs.gtk.org/glib/func.free_sized.html)
pub fn freeSized(_mem: ?*anyopaque, _size: u64) void {
    const cFn = @extern(*const fn (?*anyopaque, u64) callconv(.c) void, .{ .name = "g_free_sized" });
    const ret = cFn(@ptrCast(_mem), _size);
    return ret;
}
/// func [freopen](https://docs.gtk.org/glib/func.freopen.html)
pub fn freopen(_filename: [*:0]const u8, _mode: [*:0]const u8, _stream: ?*anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_freopen" });
    const ret = cFn(_filename, _mode, @ptrCast(_stream));
    return ret;
}
/// func [fsync](https://docs.gtk.org/glib/func.fsync.html)
pub fn fsync(_fd: i32) i32 {
    const cFn = @extern(*const fn (i32) callconv(.c) i32, .{ .name = "g_fsync" });
    const ret = cFn(_fd);
    return ret;
}
/// func [get_application_name](https://docs.gtk.org/glib/func.get_application_name.html)
pub fn getApplicationName() ?[*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) ?[*:0]u8, .{ .name = "g_get_application_name" });
    const ret = cFn();
    return ret;
}
/// func [get_charset](https://docs.gtk.org/glib/func.get_charset.html)
pub fn getCharset() struct {
    ret: bool,
    charset: [*:0]u8,
} {
    var charset_out: [*:0]u8 = undefined;
    const _charset = &charset_out;
    const cFn = @extern(*const fn (?*[*:0]u8) callconv(.c) bool, .{ .name = "g_get_charset" });
    const ret = cFn(_charset);
    return .{ .ret = ret, .charset = charset_out };
}
/// func [get_codeset](https://docs.gtk.org/glib/func.get_codeset.html)
pub fn getCodeset() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_codeset" });
    const ret = cFn();
    return ret;
}
/// func [get_console_charset](https://docs.gtk.org/glib/func.get_console_charset.html)
pub fn getConsoleCharset() struct {
    ret: bool,
    charset: [*:0]u8,
} {
    var charset_out: [*:0]u8 = undefined;
    const _charset = &charset_out;
    const cFn = @extern(*const fn (?*[*:0]u8) callconv(.c) bool, .{ .name = "g_get_console_charset" });
    const ret = cFn(_charset);
    return .{ .ret = ret, .charset = charset_out };
}
/// func [get_current_dir](https://docs.gtk.org/glib/func.get_current_dir.html)
pub fn getCurrentDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_current_dir" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [get_current_time](https://docs.gtk.org/glib/func.get_current_time.html)
pub const getCurrentTime = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn getCurrentTime(_result: *glib.TimeVal) void {
        const cFn = @extern(*const fn (*glib.TimeVal) callconv(.c) void, .{ .name = "g_get_current_time" });
        const ret = cFn(_result);
        return ret;
    }
}.getCurrentTime;
/// func [get_environ](https://docs.gtk.org/glib/func.get_environ.html)
pub fn getEnviron() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_environ" });
    const ret = cFn();
    return ret;
}
/// func [get_filename_charsets](https://docs.gtk.org/glib/func.get_filename_charsets.html)
pub fn getFilenameCharsets() struct {
    ret: bool,
    filename_charsets: [*:null]?[*:0]const u8,
} {
    var filename_charsets_out: [*:null]?[*:0]const u8 = undefined;
    const _filename_charsets = &filename_charsets_out;
    const cFn = @extern(*const fn (*[*:null]?[*:0]const u8) callconv(.c) bool, .{ .name = "g_get_filename_charsets" });
    const ret = cFn(_filename_charsets);
    return .{ .ret = ret, .filename_charsets = filename_charsets_out };
}
/// func [get_home_dir](https://docs.gtk.org/glib/func.get_home_dir.html)
pub fn getHomeDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_home_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_host_name](https://docs.gtk.org/glib/func.get_host_name.html)
pub fn getHostName() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_host_name" });
    const ret = cFn();
    return ret;
}
/// func [get_language_names](https://docs.gtk.org/glib/func.get_language_names.html)
pub fn getLanguageNames() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_language_names" });
    const ret = cFn();
    return ret;
}
/// func [get_language_names_with_category](https://docs.gtk.org/glib/func.get_language_names_with_category.html)
pub fn getLanguageNamesWithCategory(_category_name: [*:0]const u8) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_language_names_with_category" });
    const ret = cFn(_category_name);
    return ret;
}
/// func [get_locale_variants](https://docs.gtk.org/glib/func.get_locale_variants.html)
pub fn getLocaleVariants(_locale: [*:0]const u8) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_locale_variants" });
    const ret = cFn(_locale);
    return ret;
}
/// func [get_monotonic_time](https://docs.gtk.org/glib/func.get_monotonic_time.html)
pub fn getMonotonicTime() i64 {
    const cFn = @extern(*const fn () callconv(.c) i64, .{ .name = "g_get_monotonic_time" });
    const ret = cFn();
    return ret;
}
/// func [get_num_processors](https://docs.gtk.org/glib/func.get_num_processors.html)
pub fn getNumProcessors() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_get_num_processors" });
    const ret = cFn();
    return ret;
}
/// func [get_os_info](https://docs.gtk.org/glib/func.get_os_info.html)
pub fn getOsInfo(_key_name: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_get_os_info" });
    const ret = cFn(_key_name);
    return ret;
}
/// func [get_prgname](https://docs.gtk.org/glib/func.get_prgname.html)
pub fn getPrgname() ?[*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) ?[*:0]u8, .{ .name = "g_get_prgname" });
    const ret = cFn();
    return ret;
}
/// func [get_real_name](https://docs.gtk.org/glib/func.get_real_name.html)
pub fn getRealName() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_real_name" });
    const ret = cFn();
    return ret;
}
/// func [get_real_time](https://docs.gtk.org/glib/func.get_real_time.html)
pub fn getRealTime() i64 {
    const cFn = @extern(*const fn () callconv(.c) i64, .{ .name = "g_get_real_time" });
    const ret = cFn();
    return ret;
}
/// func [get_system_config_dirs](https://docs.gtk.org/glib/func.get_system_config_dirs.html)
pub fn getSystemConfigDirs() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_system_config_dirs" });
    const ret = cFn();
    return ret;
}
/// func [get_system_data_dirs](https://docs.gtk.org/glib/func.get_system_data_dirs.html)
pub fn getSystemDataDirs() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_get_system_data_dirs" });
    const ret = cFn();
    return ret;
}
/// func [get_tmp_dir](https://docs.gtk.org/glib/func.get_tmp_dir.html)
pub fn getTmpDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_tmp_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_user_cache_dir](https://docs.gtk.org/glib/func.get_user_cache_dir.html)
pub fn getUserCacheDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_cache_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_user_config_dir](https://docs.gtk.org/glib/func.get_user_config_dir.html)
pub fn getUserConfigDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_config_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_user_data_dir](https://docs.gtk.org/glib/func.get_user_data_dir.html)
pub fn getUserDataDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_data_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_user_name](https://docs.gtk.org/glib/func.get_user_name.html)
pub fn getUserName() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_name" });
    const ret = cFn();
    return ret;
}
/// func [get_user_runtime_dir](https://docs.gtk.org/glib/func.get_user_runtime_dir.html)
pub fn getUserRuntimeDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_runtime_dir" });
    const ret = cFn();
    return ret;
}
/// func [get_user_special_dir](https://docs.gtk.org/glib/func.get_user_special_dir.html)
pub fn getUserSpecialDir(_directory: glib.UserDirectory) ?[*:0]u8 {
    const cFn = @extern(*const fn (glib.UserDirectory) callconv(.c) ?[*:0]u8, .{ .name = "g_get_user_special_dir" });
    const ret = cFn(_directory);
    return ret;
}
/// func [get_user_state_dir](https://docs.gtk.org/glib/func.get_user_state_dir.html)
pub fn getUserStateDir() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_get_user_state_dir" });
    const ret = cFn();
    return ret;
}
/// func [getenv](https://docs.gtk.org/glib/func.getenv.html)
pub fn getenv(_variable: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_getenv" });
    const ret = cFn(_variable);
    return ret;
}
/// func [hash_table_add](https://docs.gtk.org/glib/func.hash_table_add.html)
pub fn hashTableAdd(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_add" });
    const ret = cFn(_hash_table, @ptrCast(_key));
    return ret;
}
/// func [hash_table_contains](https://docs.gtk.org/glib/func.hash_table_contains.html)
pub fn hashTableContains(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_contains" });
    const ret = cFn(_hash_table, @ptrCast(_key));
    return ret;
}
/// func [hash_table_destroy](https://docs.gtk.org/glib/func.hash_table_destroy.html)
pub fn hashTableDestroy(_hash_table: *core.HashTable) void {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_destroy" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hash_table_find](https://docs.gtk.org/glib/func.hash_table_find.html)
pub fn hashTableFind(_hash_table: *core.HashTable, predicate: anytype, predicate_args: anytype) ?*anyopaque {
    var closure_predicate = core.zig_closure(predicate, predicate_args, &.{ bool, ?*anyopaque, ?*anyopaque });
    defer closure_predicate.deinit();
    const _predicate: glib.HRFunc = @ptrCast(closure_predicate.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_predicate.c_data());
    const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_hash_table_find" });
    const ret = cFn(_hash_table, _predicate, @ptrCast(_user_data));
    return ret;
}
/// func [hash_table_foreach](https://docs.gtk.org/glib/func.hash_table_foreach.html)
pub fn hashTableForeach(_hash_table: *core.HashTable, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.HFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*core.HashTable, glib.HFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_hash_table_foreach" });
    const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
    return ret;
}
/// func [hash_table_foreach_remove](https://docs.gtk.org/glib/func.hash_table_foreach_remove.html)
pub fn hashTableForeachRemove(_hash_table: *core.HashTable, func: anytype, func_args: anytype) u32 {
    var closure_func = core.zig_closure(func, func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.HRFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) u32, .{ .name = "g_hash_table_foreach_remove" });
    const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
    return ret;
}
/// func [hash_table_foreach_steal](https://docs.gtk.org/glib/func.hash_table_foreach_steal.html)
pub fn hashTableForeachSteal(_hash_table: *core.HashTable, func: anytype, func_args: anytype) u32 {
    var closure_func = core.zig_closure(func, func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.HRFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*core.HashTable, glib.HRFunc, ?*anyopaque) callconv(.c) u32, .{ .name = "g_hash_table_foreach_steal" });
    const ret = cFn(_hash_table, _func, @ptrCast(_user_data));
    return ret;
}
/// func [hash_table_insert](https://docs.gtk.org/glib/func.hash_table_insert.html)
pub fn hashTableInsert(_hash_table: *core.HashTable, _key: ?*anyopaque, _value: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_insert" });
    const ret = cFn(_hash_table, @ptrCast(_key), @ptrCast(_value));
    return ret;
}
/// func [hash_table_lookup](https://docs.gtk.org/glib/func.hash_table_lookup.html)
pub fn hashTableLookup(_hash_table: *core.HashTable, _key: ?*anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_hash_table_lookup" });
    const ret = cFn(_hash_table, @ptrCast(_key));
    return ret;
}
/// func [hash_table_lookup_extended](https://docs.gtk.org/glib/func.hash_table_lookup_extended.html)
pub fn hashTableLookupExtended(_hash_table: *core.HashTable, _lookup_key: ?*anyopaque) struct {
    ret: bool,
    orig_key: ?*anyopaque,
    value: ?*anyopaque,
} {
    var orig_key_out: ?*anyopaque = undefined;
    const _orig_key = &orig_key_out;
    var value_out: ?*anyopaque = undefined;
    const _value = &value_out;
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_lookup_extended" });
    const ret = cFn(_hash_table, @ptrCast(_lookup_key), @ptrCast(_orig_key), @ptrCast(_value));
    return .{ .ret = ret, .orig_key = orig_key_out, .value = value_out };
}
/// func [hash_table_new_similar](https://docs.gtk.org/glib/func.hash_table_new_similar.html)
pub fn hashTableNewSimilar(_other_hash_table: *core.HashTable) *core.HashTable {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) *core.HashTable, .{ .name = "g_hash_table_new_similar" });
    const ret = cFn(_other_hash_table);
    return ret;
}
/// func [hash_table_ref](https://docs.gtk.org/glib/func.hash_table_ref.html)
pub fn hashTableRef(_hash_table: *core.HashTable) *core.HashTable {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) *core.HashTable, .{ .name = "g_hash_table_ref" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hash_table_remove](https://docs.gtk.org/glib/func.hash_table_remove.html)
pub fn hashTableRemove(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_remove" });
    const ret = cFn(_hash_table, @ptrCast(_key));
    return ret;
}
/// func [hash_table_remove_all](https://docs.gtk.org/glib/func.hash_table_remove_all.html)
pub fn hashTableRemoveAll(_hash_table: *core.HashTable) void {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_remove_all" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hash_table_replace](https://docs.gtk.org/glib/func.hash_table_replace.html)
pub fn hashTableReplace(_hash_table: *core.HashTable, _key: ?*anyopaque, _value: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_replace" });
    const ret = cFn(_hash_table, @ptrCast(_key), @ptrCast(_value));
    return ret;
}
/// func [hash_table_size](https://docs.gtk.org/glib/func.hash_table_size.html)
pub fn hashTableSize(_hash_table: *core.HashTable) u32 {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) u32, .{ .name = "g_hash_table_size" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hash_table_steal](https://docs.gtk.org/glib/func.hash_table_steal.html)
pub fn hashTableSteal(_hash_table: *core.HashTable, _key: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_steal" });
    const ret = cFn(_hash_table, @ptrCast(_key));
    return ret;
}
/// func [hash_table_steal_all](https://docs.gtk.org/glib/func.hash_table_steal_all.html)
pub fn hashTableStealAll(_hash_table: *core.HashTable) void {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_steal_all" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hash_table_steal_extended](https://docs.gtk.org/glib/func.hash_table_steal_extended.html)
pub fn hashTableStealExtended(_hash_table: *core.HashTable, _lookup_key: ?*anyopaque) struct {
    ret: bool,
    stolen_key: ?*anyopaque,
    stolen_value: ?*anyopaque,
} {
    var stolen_key_out: ?*anyopaque = undefined;
    const _stolen_key = &stolen_key_out;
    var stolen_value_out: ?*anyopaque = undefined;
    const _stolen_value = &stolen_value_out;
    const cFn = @extern(*const fn (*core.HashTable, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.c) bool, .{ .name = "g_hash_table_steal_extended" });
    const ret = cFn(_hash_table, @ptrCast(_lookup_key), @ptrCast(_stolen_key), @ptrCast(_stolen_value));
    return .{ .ret = ret, .stolen_key = stolen_key_out, .stolen_value = stolen_value_out };
}
/// func [hash_table_unref](https://docs.gtk.org/glib/func.hash_table_unref.html)
pub fn hashTableUnref(_hash_table: *core.HashTable) void {
    const cFn = @extern(*const fn (*core.HashTable) callconv(.c) void, .{ .name = "g_hash_table_unref" });
    const ret = cFn(_hash_table);
    return ret;
}
/// func [hook_destroy](https://docs.gtk.org/glib/func.hook_destroy.html)
pub fn destroyID(_hook_list: *glib.HookList, _hook_id: u64) bool {
    const cFn = @extern(*const fn (*glib.HookList, u64) callconv(.c) bool, .{ .name = "g_hook_destroy" });
    const ret = cFn(_hook_list, _hook_id);
    return ret;
}
/// func [hook_destroy_link](https://docs.gtk.org/glib/func.hook_destroy_link.html)
pub fn hookDestroyLink(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
    const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_destroy_link" });
    const ret = cFn(_hook_list, _hook);
    return ret;
}
/// func [hook_free](https://docs.gtk.org/glib/func.hook_free.html)
pub fn hookFree(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
    const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_free" });
    const ret = cFn(_hook_list, _hook);
    return ret;
}
/// func [hook_insert_before](https://docs.gtk.org/glib/func.hook_insert_before.html)
pub fn hookInsertBefore(_hook_list: *glib.HookList, _sibling: ?*glib.Hook, _hook: *glib.Hook) void {
    const cFn = @extern(*const fn (*glib.HookList, ?*glib.Hook, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_insert_before" });
    const ret = cFn(_hook_list, _sibling, _hook);
    return ret;
}
/// func [hook_insert_sorted](https://docs.gtk.org/glib/func.hook_insert_sorted.html)
pub fn hookInsertSorted(_hook_list: *glib.HookList, _hook: *glib.Hook, _func: glib.HookCompareFunc) void {
    const cFn = @extern(*const fn (*glib.HookList, *glib.Hook, glib.HookCompareFunc) callconv(.c) void, .{ .name = "g_hook_insert_sorted" });
    const ret = cFn(_hook_list, _hook, _func);
    return ret;
}
/// func [hook_prepend](https://docs.gtk.org/glib/func.hook_prepend.html)
pub fn hookPrepend(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
    const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_prepend" });
    const ret = cFn(_hook_list, _hook);
    return ret;
}
/// func [hook_unref](https://docs.gtk.org/glib/func.hook_unref.html)
pub fn hookUnref(_hook_list: *glib.HookList, _hook: *glib.Hook) void {
    const cFn = @extern(*const fn (*glib.HookList, *glib.Hook) callconv(.c) void, .{ .name = "g_hook_unref" });
    const ret = cFn(_hook_list, _hook);
    return ret;
}
/// func [hostname_is_ascii_encoded](https://docs.gtk.org/glib/func.hostname_is_ascii_encoded.html)
pub fn hostnameIsAsciiEncoded(_hostname: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_hostname_is_ascii_encoded" });
    const ret = cFn(_hostname);
    return ret;
}
/// func [hostname_is_ip_address](https://docs.gtk.org/glib/func.hostname_is_ip_address.html)
pub fn hostnameIsIpAddress(_hostname: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_hostname_is_ip_address" });
    const ret = cFn(_hostname);
    return ret;
}
/// func [hostname_is_non_ascii](https://docs.gtk.org/glib/func.hostname_is_non_ascii.html)
pub fn hostnameIsNonAscii(_hostname: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_hostname_is_non_ascii" });
    const ret = cFn(_hostname);
    return ret;
}
/// func [hostname_to_ascii](https://docs.gtk.org/glib/func.hostname_to_ascii.html)
pub fn hostnameToAscii(_hostname: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_hostname_to_ascii" });
    const ret = cFn(_hostname);
    return ret;
}
/// func [hostname_to_unicode](https://docs.gtk.org/glib/func.hostname_to_unicode.html)
pub fn hostnameToUnicode(_hostname: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_hostname_to_unicode" });
    const ret = cFn(_hostname);
    return ret;
}
/// func [idle_add](https://docs.gtk.org/glib/func.idle_add.html)
pub fn idleAdd(_priority: i32, function: anytype, function_args: anytype) u32 {
    var closure_function = core.zig_closure(function, function_args, &.{bool});
    const _function: glib.SourceFunc = @ptrCast(closure_function.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_function.c_data());
    const _notify: ?glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
    const cFn = @extern(*const fn (i32, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_idle_add_full" });
    const ret = cFn(_priority, _function, @ptrCast(_data), _notify);
    return ret;
}
/// func [idle_remove_by_data](https://docs.gtk.org/glib/func.idle_remove_by_data.html)
pub fn idleRemoveByData(_data: ?*anyopaque) bool {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) bool, .{ .name = "g_idle_remove_by_data" });
    const ret = cFn(@ptrCast(_data));
    return ret;
}
/// func [idle_source_new](https://docs.gtk.org/glib/func.idle_source_new.html)
pub fn idleSourceNew() *glib.Source {
    const cFn = @extern(*const fn () callconv(.c) *glib.Source, .{ .name = "g_idle_source_new" });
    const ret = cFn();
    return ret;
}
/// func [int64_equal](https://docs.gtk.org/glib/func.int64_equal.html)
pub fn int64Equal(_v1: *anyopaque, _v2: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_int64_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [int64_hash](https://docs.gtk.org/glib/func.int64_hash.html)
pub fn int64Hash(_v: *anyopaque) u32 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u32, .{ .name = "g_int64_hash" });
    const ret = cFn(@ptrCast(_v));
    return ret;
}
/// func [int_equal](https://docs.gtk.org/glib/func.int_equal.html)
pub fn intEqual(_v1: *anyopaque, _v2: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_int_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [int_hash](https://docs.gtk.org/glib/func.int_hash.html)
pub fn intHash(_v: *anyopaque) u32 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u32, .{ .name = "g_int_hash" });
    const ret = cFn(@ptrCast(_v));
    return ret;
}
/// func [intern_static_string](https://docs.gtk.org/glib/func.intern_static_string.html)
pub fn internStaticString(_string: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_intern_static_string" });
    const ret = cFn(_string);
    return ret;
}
/// func [intern_string](https://docs.gtk.org/glib/func.intern_string.html)
pub fn internString(_string: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_intern_string" });
    const ret = cFn(_string);
    return ret;
}
/// func [io_add_watch](https://docs.gtk.org/glib/func.io_add_watch.html)
pub fn ioAddWatch(_channel: *glib.IOChannel, _priority: i32, _condition: glib.IOCondition, func: anytype, func_args: anytype) u32 {
    var closure_func = core.zig_closure(func, func_args, &.{ bool, *glib.IOChannel, glib.IOCondition });
    const _func: glib.IOFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _notify: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*glib.IOChannel, i32, glib.IOCondition, glib.IOFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_io_add_watch_full" });
    const ret = cFn(_channel, _priority, _condition, _func, @ptrCast(_user_data), _notify);
    return ret;
}
/// func [io_channel_error_from_errno](https://docs.gtk.org/glib/func.io_channel_error_from_errno.html)
pub fn ioChannelErrorFromErrno(_en: i32) glib.IOChannelError {
    const cFn = @extern(*const fn (i32) callconv(.c) glib.IOChannelError, .{ .name = "g_io_channel_error_from_errno" });
    const ret = cFn(_en);
    return ret;
}
/// func [io_channel_error_quark](https://docs.gtk.org/glib/func.io_channel_error_quark.html)
pub fn ioChannelErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_io_channel_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [io_create_watch](https://docs.gtk.org/glib/func.io_create_watch.html)
pub fn ioCreateWatch(_channel: *glib.IOChannel, _condition: glib.IOCondition) *glib.Source {
    const cFn = @extern(*const fn (*glib.IOChannel, glib.IOCondition) callconv(.c) *glib.Source, .{ .name = "g_io_create_watch" });
    const ret = cFn(_channel, _condition);
    return ret;
}
/// func [key_file_error_quark](https://docs.gtk.org/glib/func.key_file_error_quark.html)
pub fn keyFileErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_key_file_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [list_pop_allocator](https://docs.gtk.org/glib/func.list_pop_allocator.html)
pub fn listPopAllocator() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_list_pop_allocator" });
    const ret = cFn();
    return ret;
}
/// func [list_push_allocator](https://docs.gtk.org/glib/func.list_push_allocator.html)
pub fn listPushAllocator(_allocator: *glib.Allocator) void {
    const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_list_push_allocator" });
    const ret = cFn(_allocator);
    return ret;
}
/// func [listenv](https://docs.gtk.org/glib/func.listenv.html)
pub fn listenv() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_listenv" });
    const ret = cFn();
    return ret;
}
/// func [locale_from_utf8](https://docs.gtk.org/glib/func.locale_from_utf8.html)
pub fn localeFromUtf8(_utf8string: [*:0]const u8, _len: i64, _error: *?*core.Error) error{GError}!struct {
    ret: [*]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*]u8, .{ .name = "g_locale_from_utf8" });
    const ret = cFn(_utf8string, _len, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [locale_to_utf8](https://docs.gtk.org/glib/func.locale_to_utf8.html)
pub fn localeToUtf8(_opsysstrings: []u8, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    bytes_read: u64,
    bytes_written: u64,
} {
    const _opsysstring = _opsysstrings.ptr;
    const _len: i64 = @intCast(_opsysstrings.len);
    var bytes_read_out: u64 = undefined;
    const _bytes_read = &bytes_read_out;
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn ([*]u8, i64, ?*u64, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_locale_to_utf8" });
    const ret = cFn(_opsysstring, _len, _bytes_read, _bytes_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
}
/// func [log_default_handler](https://docs.gtk.org/glib/func.log_default_handler.html)
pub fn logDefaultHandler(_log_domain: ?[*:0]const u8, _log_level: glib.LogLevelFlags, _message: ?[*:0]const u8, _unused_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (?[*:0]const u8, glib.LogLevelFlags, ?[*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_log_default_handler" });
    const ret = cFn(_log_domain, _log_level, _message, @ptrCast(_unused_data));
    return ret;
}
/// func [log_get_debug_enabled](https://docs.gtk.org/glib/func.log_get_debug_enabled.html)
pub fn logGetDebugEnabled() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_log_get_debug_enabled" });
    const ret = cFn();
    return ret;
}
/// func [log_remove_handler](https://docs.gtk.org/glib/func.log_remove_handler.html)
pub fn logRemoveHandler(_log_domain: [*:0]const u8, _handler_id: u32) void {
    const cFn = @extern(*const fn ([*:0]const u8, u32) callconv(.c) void, .{ .name = "g_log_remove_handler" });
    const ret = cFn(_log_domain, _handler_id);
    return ret;
}
/// func [log_set_always_fatal](https://docs.gtk.org/glib/func.log_set_always_fatal.html)
pub fn logSetAlwaysFatal(_fatal_mask: glib.LogLevelFlags) glib.LogLevelFlags {
    const cFn = @extern(*const fn (glib.LogLevelFlags) callconv(.c) glib.LogLevelFlags, .{ .name = "g_log_set_always_fatal" });
    const ret = cFn(_fatal_mask);
    return ret;
}
/// func [log_set_debug_enabled](https://docs.gtk.org/glib/func.log_set_debug_enabled.html)
pub fn logSetDebugEnabled(_enabled: bool) void {
    const cFn = @extern(*const fn (bool) callconv(.c) void, .{ .name = "g_log_set_debug_enabled" });
    const ret = cFn(_enabled);
    return ret;
}
/// func [log_set_fatal_mask](https://docs.gtk.org/glib/func.log_set_fatal_mask.html)
pub fn logSetFatalMask(_log_domain: [*:0]const u8, _fatal_mask: glib.LogLevelFlags) glib.LogLevelFlags {
    const cFn = @extern(*const fn ([*:0]const u8, glib.LogLevelFlags) callconv(.c) glib.LogLevelFlags, .{ .name = "g_log_set_fatal_mask" });
    const ret = cFn(_log_domain, _fatal_mask);
    return ret;
}
/// func [log_set_handler](https://docs.gtk.org/glib/func.log_set_handler.html)
pub fn logSetHandler(_log_domain: ?[*:0]const u8, _log_levels: glib.LogLevelFlags, log_func: anytype, log_func_args: anytype) u32 {
    var closure_log_func = core.zig_closure(log_func, log_func_args, &.{ void, [*:0]const u8, glib.LogLevelFlags, [*:0]const u8 });
    const _log_func: glib.LogFunc = @ptrCast(closure_log_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_log_func.c_data());
    const _destroy: glib.DestroyNotify = @ptrCast(closure_log_func.c_destroy());
    const cFn = @extern(*const fn (?[*:0]const u8, glib.LogLevelFlags, glib.LogFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_log_set_handler_full" });
    const ret = cFn(_log_domain, _log_levels, _log_func, @ptrCast(_user_data), _destroy);
    return ret;
}
/// func [log_set_writer_func](https://docs.gtk.org/glib/func.log_set_writer_func.html)
pub fn logSetWriterFunc(func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ glib.LogWriterOutput, glib.LogLevelFlags, [*]glib.LogField, u64 });
    const _func: ?glib.LogWriterFunc = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _user_data_free: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (?glib.LogWriterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "g_log_set_writer_func" });
    const ret = cFn(_func, @ptrCast(_user_data), _user_data_free);
    return ret;
}
/// func [log_structured_array](https://docs.gtk.org/glib/func.log_structured_array.html)
pub fn logStructuredArray(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField) void {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64) callconv(.c) void, .{ .name = "g_log_structured_array" });
    const ret = cFn(_log_level, _fields, _n_fields);
    return ret;
}
/// func [log_variant](https://docs.gtk.org/glib/func.log_variant.html)
pub fn logVariant(_log_domain: ?[*:0]const u8, _log_level: glib.LogLevelFlags, _fields: *glib.Variant) void {
    const cFn = @extern(*const fn (?[*:0]const u8, glib.LogLevelFlags, *glib.Variant) callconv(.c) void, .{ .name = "g_log_variant" });
    const ret = cFn(_log_domain, _log_level, _fields);
    return ret;
}
/// func [log_writer_default](https://docs.gtk.org/glib/func.log_writer_default.html)
pub fn logWriterDefault(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField, _user_data: ?*anyopaque) glib.LogWriterOutput {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64, ?*anyopaque) callconv(.c) glib.LogWriterOutput, .{ .name = "g_log_writer_default" });
    const ret = cFn(_log_level, _fields, _n_fields, @ptrCast(_user_data));
    return ret;
}
/// func [log_writer_default_set_debug_domains](https://docs.gtk.org/glib/func.log_writer_default_set_debug_domains.html)
pub fn logWriterDefaultSetDebugDomains(_domains: *const [*:0]const u8) void {
    const cFn = @extern(*const fn (*const [*:0]const u8) callconv(.c) void, .{ .name = "g_log_writer_default_set_debug_domains" });
    const ret = cFn(_domains);
    return ret;
}
/// func [log_writer_default_set_use_stderr](https://docs.gtk.org/glib/func.log_writer_default_set_use_stderr.html)
pub fn logWriterDefaultSetUseStderr(_use_stderr: bool) void {
    const cFn = @extern(*const fn (bool) callconv(.c) void, .{ .name = "g_log_writer_default_set_use_stderr" });
    const ret = cFn(_use_stderr);
    return ret;
}
/// func [log_writer_default_would_drop](https://docs.gtk.org/glib/func.log_writer_default_would_drop.html)
pub fn logWriterDefaultWouldDrop(_log_level: glib.LogLevelFlags, _log_domain: ?[*:0]const u8) bool {
    const cFn = @extern(*const fn (glib.LogLevelFlags, ?[*:0]const u8) callconv(.c) bool, .{ .name = "g_log_writer_default_would_drop" });
    const ret = cFn(_log_level, _log_domain);
    return ret;
}
/// func [log_writer_format_fields](https://docs.gtk.org/glib/func.log_writer_format_fields.html)
pub fn logWriterFormatFields(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField, _use_color: bool) [*:0]u8 {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64, bool) callconv(.c) [*:0]u8, .{ .name = "g_log_writer_format_fields" });
    const ret = cFn(_log_level, _fields, _n_fields, _use_color);
    return ret;
}
/// func [log_writer_is_journald](https://docs.gtk.org/glib/func.log_writer_is_journald.html)
pub fn logWriterIsJournald(_output_fd: i32) bool {
    const cFn = @extern(*const fn (i32) callconv(.c) bool, .{ .name = "g_log_writer_is_journald" });
    const ret = cFn(_output_fd);
    return ret;
}
/// func [log_writer_journald](https://docs.gtk.org/glib/func.log_writer_journald.html)
pub fn logWriterJournald(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField, _user_data: ?*anyopaque) glib.LogWriterOutput {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64, ?*anyopaque) callconv(.c) glib.LogWriterOutput, .{ .name = "g_log_writer_journald" });
    const ret = cFn(_log_level, _fields, _n_fields, @ptrCast(_user_data));
    return ret;
}
/// func [log_writer_standard_streams](https://docs.gtk.org/glib/func.log_writer_standard_streams.html)
pub fn logWriterStandardStreams(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField, _user_data: ?*anyopaque) glib.LogWriterOutput {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64, ?*anyopaque) callconv(.c) glib.LogWriterOutput, .{ .name = "g_log_writer_standard_streams" });
    const ret = cFn(_log_level, _fields, _n_fields, @ptrCast(_user_data));
    return ret;
}
/// func [log_writer_supports_color](https://docs.gtk.org/glib/func.log_writer_supports_color.html)
pub fn logWriterSupportsColor(_output_fd: i32) bool {
    const cFn = @extern(*const fn (i32) callconv(.c) bool, .{ .name = "g_log_writer_supports_color" });
    const ret = cFn(_output_fd);
    return ret;
}
/// func [log_writer_syslog](https://docs.gtk.org/glib/func.log_writer_syslog.html)
pub fn logWriterSyslog(_log_level: glib.LogLevelFlags, _fieldss: []glib.LogField, _user_data: ?*anyopaque) glib.LogWriterOutput {
    const _fields = _fieldss.ptr;
    const _n_fields: u64 = @intCast(_fieldss.len);
    const cFn = @extern(*const fn (glib.LogLevelFlags, [*]glib.LogField, u64, ?*anyopaque) callconv(.c) glib.LogWriterOutput, .{ .name = "g_log_writer_syslog" });
    const ret = cFn(_log_level, _fields, _n_fields, @ptrCast(_user_data));
    return ret;
}
/// func [lstat](https://docs.gtk.org/glib/func.lstat.html)
pub fn lstat(_filename: [*:0]const u8, _buf: *glib.StatBuf) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, *glib.StatBuf) callconv(.c) i32, .{ .name = "g_lstat" });
    const ret = cFn(_filename, _buf);
    return ret;
}
/// const [macro__has_attribute___noreturn__](https://docs.gtk.org/glib/const.macro__has_attribute___noreturn__.html)
pub const macro__has_attribute___noreturn__ = 0;
/// func [main_context_default](https://docs.gtk.org/glib/func.main_context_default.html)
pub fn mainContextDefault() *glib.MainContext {
    const cFn = @extern(*const fn () callconv(.c) *glib.MainContext, .{ .name = "g_main_context_default" });
    const ret = cFn();
    return ret;
}
/// func [main_context_get_thread_default](https://docs.gtk.org/glib/func.main_context_get_thread_default.html)
pub fn mainContextGetThreadDefault() ?*glib.MainContext {
    const cFn = @extern(*const fn () callconv(.c) ?*glib.MainContext, .{ .name = "g_main_context_get_thread_default" });
    const ret = cFn();
    return ret;
}
/// func [main_context_ref_thread_default](https://docs.gtk.org/glib/func.main_context_ref_thread_default.html)
pub fn mainContextRefThreadDefault() *glib.MainContext {
    const cFn = @extern(*const fn () callconv(.c) *glib.MainContext, .{ .name = "g_main_context_ref_thread_default" });
    const ret = cFn();
    return ret;
}
/// func [main_current_source](https://docs.gtk.org/glib/func.main_current_source.html)
pub fn mainCurrentSource() ?*glib.Source {
    const cFn = @extern(*const fn () callconv(.c) ?*glib.Source, .{ .name = "g_main_current_source" });
    const ret = cFn();
    return ret;
}
/// func [main_depth](https://docs.gtk.org/glib/func.main_depth.html)
pub fn mainDepth() i32 {
    const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "g_main_depth" });
    const ret = cFn();
    return ret;
}
/// func [malloc](https://docs.gtk.org/glib/func.malloc.html)
pub fn malloc(_n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_malloc" });
    const ret = cFn(_n_bytes);
    return ret;
}
/// func [malloc0](https://docs.gtk.org/glib/func.malloc0.html)
pub fn malloc0(_n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_malloc0" });
    const ret = cFn(_n_bytes);
    return ret;
}
/// func [malloc0_n](https://docs.gtk.org/glib/func.malloc0_n.html)
pub fn malloc0N(_n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_malloc0_n" });
    const ret = cFn(_n_blocks, _n_block_bytes);
    return ret;
}
/// func [malloc_n](https://docs.gtk.org/glib/func.malloc_n.html)
pub fn mallocN(_n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_malloc_n" });
    const ret = cFn(_n_blocks, _n_block_bytes);
    return ret;
}
/// func [markup_error_quark](https://docs.gtk.org/glib/func.markup_error_quark.html)
pub fn markupErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_markup_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [markup_escape_text](https://docs.gtk.org/glib/func.markup_escape_text.html)
pub fn markupEscapeText(_text: [*:0]const u8, _length: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_markup_escape_text" });
    const ret = cFn(_text, _length);
    return ret;
}
/// func [mem_chunk_info](https://docs.gtk.org/glib/func.mem_chunk_info.html)
pub fn memChunkInfo() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_mem_chunk_info" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [mem_is_system_malloc](https://docs.gtk.org/glib/func.mem_is_system_malloc.html)
pub const memIsSystemMalloc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn memIsSystemMalloc() bool {
        const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_mem_is_system_malloc" });
        const ret = cFn();
        return ret;
    }
}.memIsSystemMalloc;
/// Deprecated:
/// func [mem_profile](https://docs.gtk.org/glib/func.mem_profile.html)
pub const memProfile = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn memProfile() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_mem_profile" });
        const ret = cFn();
        return ret;
    }
}.memProfile;
/// Deprecated:
/// func [mem_set_vtable](https://docs.gtk.org/glib/func.mem_set_vtable.html)
pub const memSetVtable = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn memSetVtable(_vtable: *glib.MemVTable) void {
        const cFn = @extern(*const fn (*glib.MemVTable) callconv(.c) void, .{ .name = "g_mem_set_vtable" });
        const ret = cFn(_vtable);
        return ret;
    }
}.memSetVtable;
/// Deprecated:
/// func [memdup](https://docs.gtk.org/glib/func.memdup.html)
pub const memdup = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn memdup(_mem: ?*anyopaque, _byte_size: u32) ?*anyopaque {
        const cFn = @extern(*const fn (?*anyopaque, u32) callconv(.c) ?*anyopaque, .{ .name = "g_memdup" });
        const ret = cFn(@ptrCast(_mem), _byte_size);
        return ret;
    }
}.memdup;
/// func [memdup2](https://docs.gtk.org/glib/func.memdup2.html)
pub fn memdup2(_mem: ?*anyopaque, _byte_size: u64) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u64) callconv(.c) ?*anyopaque, .{ .name = "g_memdup2" });
    const ret = cFn(@ptrCast(_mem), _byte_size);
    return ret;
}
/// func [mkdir](https://docs.gtk.org/glib/func.mkdir.html)
pub fn mkdir(_filename: [*:0]const u8, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) i32, .{ .name = "g_mkdir" });
    const ret = cFn(_filename, _mode);
    return ret;
}
/// func [mkdir_with_parents](https://docs.gtk.org/glib/func.mkdir_with_parents.html)
pub fn mkdirWithParents(_pathname: [*:0]const u8, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) i32, .{ .name = "g_mkdir_with_parents" });
    const ret = cFn(_pathname, _mode);
    return ret;
}
/// func [node_pop_allocator](https://docs.gtk.org/glib/func.node_pop_allocator.html)
pub fn nodePopAllocator() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_node_pop_allocator" });
    const ret = cFn();
    return ret;
}
/// func [node_push_allocator](https://docs.gtk.org/glib/func.node_push_allocator.html)
pub fn nodePushAllocator(_allocator: *glib.Allocator) void {
    const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_node_push_allocator" });
    const ret = cFn(_allocator);
    return ret;
}
/// func [nullify_pointer](https://docs.gtk.org/glib/func.nullify_pointer.html)
pub fn nullifyPointer(_nullify_location: *anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) void, .{ .name = "g_nullify_pointer" });
    const ret = cFn(@ptrCast(_nullify_location));
    return ret;
}
/// func [number_parser_error_quark](https://docs.gtk.org/glib/func.number_parser_error_quark.html)
pub fn numberParserErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_number_parser_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [on_error_query](https://docs.gtk.org/glib/func.on_error_query.html)
pub fn onErrorQuery(_prg_name: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_on_error_query" });
    const ret = cFn(_prg_name);
    return ret;
}
/// func [on_error_stack_trace](https://docs.gtk.org/glib/func.on_error_stack_trace.html)
pub fn onErrorStackTrace(_prg_name: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_on_error_stack_trace" });
    const ret = cFn(_prg_name);
    return ret;
}
/// func [once_init_enter](https://docs.gtk.org/glib/func.once_init_enter.html)
pub fn onceInitEnter(_location: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) bool, .{ .name = "g_once_init_enter" });
    const ret = cFn(@ptrCast(_location));
    return ret;
}
/// func [once_init_enter_impl](https://docs.gtk.org/glib/func.once_init_enter_impl.html)
pub fn onceInitEnterImpl(_location: *u64) bool {
    const cFn = @extern(*const fn (*u64) callconv(.c) bool, .{ .name = "g_once_init_enter_impl" });
    const ret = cFn(_location);
    return ret;
}
/// func [once_init_enter_pointer](https://docs.gtk.org/glib/func.once_init_enter_pointer.html)
pub fn onceInitEnterPointer(_location: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) bool, .{ .name = "g_once_init_enter_pointer" });
    const ret = cFn(@ptrCast(_location));
    return ret;
}
/// func [once_init_leave](https://docs.gtk.org/glib/func.once_init_leave.html)
pub fn onceInitLeave(_location: *anyopaque, _result: u64) void {
    const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) void, .{ .name = "g_once_init_leave" });
    const ret = cFn(@ptrCast(_location), _result);
    return ret;
}
/// func [once_init_leave_pointer](https://docs.gtk.org/glib/func.once_init_leave_pointer.html)
pub fn onceInitLeavePointer(_location: *anyopaque, _result: ?*anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_once_init_leave_pointer" });
    const ret = cFn(@ptrCast(_location), @ptrCast(_result));
    return ret;
}
/// func [open](https://docs.gtk.org/glib/func.open.html)
pub fn open(_filename: [*:0]const u8, _flags: i32, _mode: i32) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, i32, i32) callconv(.c) i32, .{ .name = "g_open" });
    const ret = cFn(_filename, _flags, _mode);
    return ret;
}
/// func [option_error_quark](https://docs.gtk.org/glib/func.option_error_quark.html)
pub fn optionErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_option_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [parse_debug_string](https://docs.gtk.org/glib/func.parse_debug_string.html)
pub fn parseDebugString(_string: ?[*:0]const u8, _keyss: []glib.DebugKey) u32 {
    const _keys = _keyss.ptr;
    const _nkeys: u32 = @intCast(_keyss.len);
    const cFn = @extern(*const fn (?[*:0]const u8, [*]glib.DebugKey, u32) callconv(.c) u32, .{ .name = "g_parse_debug_string" });
    const ret = cFn(_string, _keys, _nkeys);
    return ret;
}
/// func [path_buf_equal](https://docs.gtk.org/glib/func.path_buf_equal.html)
pub fn pathBufEqual(_v1: *anyopaque, _v2: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_path_buf_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [path_get_basename](https://docs.gtk.org/glib/func.path_get_basename.html)
pub fn pathGetBasename(_file_name: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_path_get_basename" });
    const ret = cFn(_file_name);
    return ret;
}
/// func [path_get_dirname](https://docs.gtk.org/glib/func.path_get_dirname.html)
pub fn pathGetDirname(_file_name: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_path_get_dirname" });
    const ret = cFn(_file_name);
    return ret;
}
/// func [path_is_absolute](https://docs.gtk.org/glib/func.path_is_absolute.html)
pub fn pathIsAbsolute(_file_name: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_path_is_absolute" });
    const ret = cFn(_file_name);
    return ret;
}
/// func [path_skip_root](https://docs.gtk.org/glib/func.path_skip_root.html)
pub fn pathSkipRoot(_file_name: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_path_skip_root" });
    const ret = cFn(_file_name);
    return ret;
}
/// func [pattern_match_simple](https://docs.gtk.org/glib/func.pattern_match_simple.html)
pub fn patternMatchSimple(_pattern: [*:0]const u8, _string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_pattern_match_simple" });
    const ret = cFn(_pattern, _string);
    return ret;
}
/// func [pointer_bit_lock](https://docs.gtk.org/glib/func.pointer_bit_lock.html)
pub fn pointerBitLock(_address: *anyopaque, _lock_bit: i32) void {
    const cFn = @extern(*const fn (*anyopaque, i32) callconv(.c) void, .{ .name = "g_pointer_bit_lock" });
    const ret = cFn(@ptrCast(_address), _lock_bit);
    return ret;
}
/// func [pointer_bit_lock_and_get](https://docs.gtk.org/glib/func.pointer_bit_lock_and_get.html)
pub fn pointerBitLockAndGet(_address: *anyopaque, _lock_bit: u32) struct {
    ret: void,
    out_ptr: u64,
} {
    var out_ptr_out: u64 = undefined;
    const _out_ptr = &out_ptr_out;
    const cFn = @extern(*const fn (*anyopaque, u32, ?*u64) callconv(.c) void, .{ .name = "g_pointer_bit_lock_and_get" });
    const ret = cFn(@ptrCast(_address), _lock_bit, _out_ptr);
    return .{ .ret = ret, .out_ptr = out_ptr_out };
}
/// func [pointer_bit_lock_mask_ptr](https://docs.gtk.org/glib/func.pointer_bit_lock_mask_ptr.html)
pub fn pointerBitLockMaskPtr(_ptr: ?*anyopaque, _lock_bit: u32, _set: bool, _preserve_mask: u64, _preserve_ptr: ?*anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u32, bool, u64, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_pointer_bit_lock_mask_ptr" });
    const ret = cFn(@ptrCast(_ptr), _lock_bit, _set, _preserve_mask, @ptrCast(_preserve_ptr));
    return ret;
}
/// func [pointer_bit_trylock](https://docs.gtk.org/glib/func.pointer_bit_trylock.html)
pub fn pointerBitTrylock(_address: *anyopaque, _lock_bit: i32) bool {
    const cFn = @extern(*const fn (*anyopaque, i32) callconv(.c) bool, .{ .name = "g_pointer_bit_trylock" });
    const ret = cFn(@ptrCast(_address), _lock_bit);
    return ret;
}
/// func [pointer_bit_unlock](https://docs.gtk.org/glib/func.pointer_bit_unlock.html)
pub fn pointerBitUnlock(_address: *anyopaque, _lock_bit: i32) void {
    const cFn = @extern(*const fn (*anyopaque, i32) callconv(.c) void, .{ .name = "g_pointer_bit_unlock" });
    const ret = cFn(@ptrCast(_address), _lock_bit);
    return ret;
}
/// func [pointer_bit_unlock_and_set](https://docs.gtk.org/glib/func.pointer_bit_unlock_and_set.html)
pub fn pointerBitUnlockAndSet(_address: *anyopaque, _lock_bit: u32, _ptr: ?*anyopaque, _preserve_mask: u64) void {
    const cFn = @extern(*const fn (*anyopaque, u32, ?*anyopaque, u64) callconv(.c) void, .{ .name = "g_pointer_bit_unlock_and_set" });
    const ret = cFn(@ptrCast(_address), _lock_bit, @ptrCast(_ptr), _preserve_mask);
    return ret;
}
/// func [poll](https://docs.gtk.org/glib/func.poll.html)
pub fn poll(_fds: *glib.PollFD, _nfds: u32, _timeout: i32) i32 {
    const cFn = @extern(*const fn (*glib.PollFD, u32, i32) callconv(.c) i32, .{ .name = "g_poll" });
    const ret = cFn(_fds, _nfds, _timeout);
    return ret;
}
/// func [prefix_error_literal](https://docs.gtk.org/glib/func.prefix_error_literal.html)
pub fn prefixErrorLiteral(_err: ?*?*core.Error, _prefix: [*:0]const u8) void {
    const cFn = @extern(*const fn (?*?*core.Error, [*:0]const u8) callconv(.c) void, .{ .name = "g_prefix_error_literal" });
    const ret = cFn(_err, _prefix);
    return ret;
}
/// func [propagate_error](https://docs.gtk.org/glib/func.propagate_error.html)
pub fn propagateError(_src: *core.Error) struct {
    ret: void,
    dest: ?*core.Error,
} {
    var dest_out: ?*core.Error = undefined;
    const _dest = &dest_out;
    const cFn = @extern(*const fn (?*?*core.Error, *core.Error) callconv(.c) void, .{ .name = "g_propagate_error" });
    const ret = cFn(_dest, _src);
    return .{ .ret = ret, .dest = dest_out };
}
/// func [qsort_with_data](https://docs.gtk.org/glib/func.qsort_with_data.html)
pub fn qsortWithData(_pbase: *anyopaque, _total_elems: i32, _size: u64, compare_func: anytype, compare_func_args: anytype) void {
    var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
    defer closure_compare_func.deinit();
    const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
    const cFn = @extern(*const fn (*anyopaque, i32, u64, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_qsort_with_data" });
    const ret = cFn(@ptrCast(_pbase), _total_elems, _size, _compare_func, @ptrCast(_user_data));
    return ret;
}
/// func [quark_from_static_string](https://docs.gtk.org/glib/func.quark_from_static_string.html)
pub fn quarkFromStaticString(_string: ?[*:0]const u8) u32 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) u32, .{ .name = "g_quark_from_static_string" });
    const ret = cFn(_string);
    return ret;
}
/// func [quark_from_string](https://docs.gtk.org/glib/func.quark_from_string.html)
pub fn quarkFromString(_string: ?[*:0]const u8) u32 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) u32, .{ .name = "g_quark_from_string" });
    const ret = cFn(_string);
    return ret;
}
/// func [quark_to_string](https://docs.gtk.org/glib/func.quark_to_string.html)
pub fn quarkToString(_quark: u32) [*:0]u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) [*:0]u8, .{ .name = "g_quark_to_string" });
    const ret = cFn(_quark);
    return ret;
}
/// func [quark_try_string](https://docs.gtk.org/glib/func.quark_try_string.html)
pub fn quarkTryString(_string: ?[*:0]const u8) u32 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) u32, .{ .name = "g_quark_try_string" });
    const ret = cFn(_string);
    return ret;
}
/// func [random_double](https://docs.gtk.org/glib/func.random_double.html)
pub fn randomDouble() f64 {
    const cFn = @extern(*const fn () callconv(.c) f64, .{ .name = "g_random_double" });
    const ret = cFn();
    return ret;
}
/// func [random_double_range](https://docs.gtk.org/glib/func.random_double_range.html)
pub fn randomDoubleRange(_begin: f64, _end: f64) f64 {
    const cFn = @extern(*const fn (f64, f64) callconv(.c) f64, .{ .name = "g_random_double_range" });
    const ret = cFn(_begin, _end);
    return ret;
}
/// func [random_int](https://docs.gtk.org/glib/func.random_int.html)
pub fn randomInt() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_random_int" });
    const ret = cFn();
    return ret;
}
/// func [random_int_range](https://docs.gtk.org/glib/func.random_int_range.html)
pub fn randomIntRange(_begin: i32, _end: i32) i32 {
    const cFn = @extern(*const fn (i32, i32) callconv(.c) i32, .{ .name = "g_random_int_range" });
    const ret = cFn(_begin, _end);
    return ret;
}
/// func [random_set_seed](https://docs.gtk.org/glib/func.random_set_seed.html)
pub fn randomSetSeed(_seed: u32) void {
    const cFn = @extern(*const fn (u32) callconv(.c) void, .{ .name = "g_random_set_seed" });
    const ret = cFn(_seed);
    return ret;
}
/// func [rc_box_acquire](https://docs.gtk.org/glib/func.rc_box_acquire.html)
pub fn rcBoxAcquire(_mem_block: *anyopaque) *anyopaque {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) *anyopaque, .{ .name = "g_rc_box_acquire" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [rc_box_alloc](https://docs.gtk.org/glib/func.rc_box_alloc.html)
pub fn rcBoxAlloc(_block_size: u64) *anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) *anyopaque, .{ .name = "g_rc_box_alloc" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [rc_box_alloc0](https://docs.gtk.org/glib/func.rc_box_alloc0.html)
pub fn rcBoxAlloc0(_block_size: u64) *anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) *anyopaque, .{ .name = "g_rc_box_alloc0" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [rc_box_dup](https://docs.gtk.org/glib/func.rc_box_dup.html)
pub fn rcBoxDup(_block_size: u64, _mem_block: *anyopaque) *anyopaque {
    const cFn = @extern(*const fn (u64, *anyopaque) callconv(.c) *anyopaque, .{ .name = "g_rc_box_dup" });
    const ret = cFn(_block_size, @ptrCast(_mem_block));
    return ret;
}
/// func [rc_box_get_size](https://docs.gtk.org/glib/func.rc_box_get_size.html)
pub fn rcBoxGetSize(_mem_block: *anyopaque) u64 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u64, .{ .name = "g_rc_box_get_size" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [rc_box_release](https://docs.gtk.org/glib/func.rc_box_release.html)
pub fn rcBoxRelease(_mem_block: *anyopaque) void {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) void, .{ .name = "g_rc_box_release" });
    const ret = cFn(@ptrCast(_mem_block));
    return ret;
}
/// func [rc_box_release_full](https://docs.gtk.org/glib/func.rc_box_release_full.html)
pub fn rcBoxReleaseFull(_mem_block: *anyopaque, _clear_func: glib.DestroyNotify) void {
    const cFn = @extern(*const fn (*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "g_rc_box_release_full" });
    const ret = cFn(@ptrCast(_mem_block), _clear_func);
    return ret;
}
/// func [realloc](https://docs.gtk.org/glib/func.realloc.html)
pub fn realloc(_mem: ?*anyopaque, _n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u64) callconv(.c) ?*anyopaque, .{ .name = "g_realloc" });
    const ret = cFn(@ptrCast(_mem), _n_bytes);
    return ret;
}
/// func [realloc_n](https://docs.gtk.org/glib/func.realloc_n.html)
pub fn reallocN(_mem: ?*anyopaque, _n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_realloc_n" });
    const ret = cFn(@ptrCast(_mem), _n_blocks, _n_block_bytes);
    return ret;
}
/// func [ref_count_compare](https://docs.gtk.org/glib/func.ref_count_compare.html)
pub fn refCountCompare(_rc: *i32, _val: i32) bool {
    const cFn = @extern(*const fn (*i32, i32) callconv(.c) bool, .{ .name = "g_ref_count_compare" });
    const ret = cFn(_rc, _val);
    return ret;
}
/// func [ref_count_dec](https://docs.gtk.org/glib/func.ref_count_dec.html)
pub fn refCountDec(_rc: *i32) bool {
    const cFn = @extern(*const fn (*i32) callconv(.c) bool, .{ .name = "g_ref_count_dec" });
    const ret = cFn(_rc);
    return ret;
}
/// func [ref_count_inc](https://docs.gtk.org/glib/func.ref_count_inc.html)
pub fn refCountInc(_rc: *i32) void {
    const cFn = @extern(*const fn (*i32) callconv(.c) void, .{ .name = "g_ref_count_inc" });
    const ret = cFn(_rc);
    return ret;
}
/// func [ref_count_init](https://docs.gtk.org/glib/func.ref_count_init.html)
pub fn refCountInit(_rc: *i32) void {
    const cFn = @extern(*const fn (*i32) callconv(.c) void, .{ .name = "g_ref_count_init" });
    const ret = cFn(_rc);
    return ret;
}
/// func [ref_string_acquire](https://docs.gtk.org/glib/func.ref_string_acquire.html)
pub fn refStringAcquire(_str: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_ref_string_acquire" });
    const ret = cFn(_str);
    return ret;
}
/// func [ref_string_length](https://docs.gtk.org/glib/func.ref_string_length.html)
pub fn refStringLength(_str: [*:0]const u8) u64 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) u64, .{ .name = "g_ref_string_length" });
    const ret = cFn(_str);
    return ret;
}
/// func [ref_string_new](https://docs.gtk.org/glib/func.ref_string_new.html)
pub fn refStringNew(_str: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_ref_string_new" });
    const ret = cFn(_str);
    return ret;
}
/// func [ref_string_new_intern](https://docs.gtk.org/glib/func.ref_string_new_intern.html)
pub fn refStringNewIntern(_str: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_ref_string_new_intern" });
    const ret = cFn(_str);
    return ret;
}
/// func [ref_string_new_len](https://docs.gtk.org/glib/func.ref_string_new_len.html)
pub fn refStringNewLen(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_ref_string_new_len" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [ref_string_release](https://docs.gtk.org/glib/func.ref_string_release.html)
pub fn refStringRelease(_str: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_ref_string_release" });
    const ret = cFn(_str);
    return ret;
}
/// func [regex_check_replacement](https://docs.gtk.org/glib/func.regex_check_replacement.html)
pub fn regexCheckReplacement(_replacement: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    has_references: bool,
} {
    var has_references_out: bool = undefined;
    const _has_references = &has_references_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*bool, *?*core.Error) callconv(.c) bool, .{ .name = "g_regex_check_replacement" });
    const ret = cFn(_replacement, _has_references, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .has_references = has_references_out };
}
/// func [regex_error_quark](https://docs.gtk.org/glib/func.regex_error_quark.html)
pub fn regexErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_regex_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [regex_escape_nul](https://docs.gtk.org/glib/func.regex_escape_nul.html)
pub fn regexEscapeNul(_string: [*:0]const u8, _length: i32) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) [*:0]u8, .{ .name = "g_regex_escape_nul" });
    const ret = cFn(_string, _length);
    return ret;
}
/// func [regex_escape_string](https://docs.gtk.org/glib/func.regex_escape_string.html)
pub fn regexEscapeString(_string: [*:0]const u8, _length: i32) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) [*:0]u8, .{ .name = "g_regex_escape_string" });
    const ret = cFn(_string, _length);
    return ret;
}
/// func [regex_match_simple](https://docs.gtk.org/glib/func.regex_match_simple.html)
pub fn regexMatchSimple(_pattern: [*:0]const u8, _string: [*:0]const u8, _compile_options: glib.RegexCompileFlags, _match_options: glib.RegexMatchFlags) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, glib.RegexCompileFlags, glib.RegexMatchFlags) callconv(.c) bool, .{ .name = "g_regex_match_simple" });
    const ret = cFn(_pattern, _string, _compile_options, _match_options);
    return ret;
}
/// func [regex_split_simple](https://docs.gtk.org/glib/func.regex_split_simple.html)
pub fn regexSplitSimple(_pattern: [*:0]const u8, _string: [*:0]const u8, _compile_options: glib.RegexCompileFlags, _match_options: glib.RegexMatchFlags) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, glib.RegexCompileFlags, glib.RegexMatchFlags) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_regex_split_simple" });
    const ret = cFn(_pattern, _string, _compile_options, _match_options);
    return ret;
}
/// func [reload_user_special_dirs_cache](https://docs.gtk.org/glib/func.reload_user_special_dirs_cache.html)
pub fn reloadUserSpecialDirsCache() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_reload_user_special_dirs_cache" });
    const ret = cFn();
    return ret;
}
/// func [remove](https://docs.gtk.org/glib/func.remove.html)
pub fn remove(_filename: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) i32, .{ .name = "g_remove" });
    const ret = cFn(_filename);
    return ret;
}
/// func [rename](https://docs.gtk.org/glib/func.rename.html)
pub fn rename(_oldfilename: [*:0]const u8, _newfilename: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) i32, .{ .name = "g_rename" });
    const ret = cFn(_oldfilename, _newfilename);
    return ret;
}
/// func [rmdir](https://docs.gtk.org/glib/func.rmdir.html)
pub fn rmdir(_filename: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) i32, .{ .name = "g_rmdir" });
    const ret = cFn(_filename);
    return ret;
}
/// func [sequence_foreach_range](https://docs.gtk.org/glib/func.sequence_foreach_range.html)
pub fn sequenceForeachRange(_begin: *glib.SequenceIter, _end: *glib.SequenceIter, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, ?*anyopaque });
    defer closure_func.deinit();
    const _func: glib.Func = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter, glib.Func, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_foreach_range" });
    const ret = cFn(_begin, _end, _func, @ptrCast(_user_data));
    return ret;
}
/// func [sequence_get](https://docs.gtk.org/glib/func.sequence_get.html)
pub fn sequenceGet(_iter: *glib.SequenceIter) ?*anyopaque {
    const cFn = @extern(*const fn (*glib.SequenceIter) callconv(.c) ?*anyopaque, .{ .name = "g_sequence_get" });
    const ret = cFn(_iter);
    return ret;
}
/// func [sequence_insert_before](https://docs.gtk.org/glib/func.sequence_insert_before.html)
pub fn sequenceInsertBefore(_iter: *glib.SequenceIter, _data: ?*anyopaque) *glib.SequenceIter {
    const cFn = @extern(*const fn (*glib.SequenceIter, ?*anyopaque) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_insert_before" });
    const ret = cFn(_iter, @ptrCast(_data));
    return ret;
}
/// func [sequence_move](https://docs.gtk.org/glib/func.sequence_move.html)
pub fn sequenceMove(_src: *glib.SequenceIter, _dest: *glib.SequenceIter) void {
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_move" });
    const ret = cFn(_src, _dest);
    return ret;
}
/// func [sequence_move_range](https://docs.gtk.org/glib/func.sequence_move_range.html)
pub fn sequenceMoveRange(_dest: *glib.SequenceIter, _begin: *glib.SequenceIter, _end: *glib.SequenceIter) void {
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_move_range" });
    const ret = cFn(_dest, _begin, _end);
    return ret;
}
/// func [sequence_range_get_midpoint](https://docs.gtk.org/glib/func.sequence_range_get_midpoint.html)
pub fn sequenceRangeGetMidpoint(_begin: *glib.SequenceIter, _end: *glib.SequenceIter) *glib.SequenceIter {
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) *glib.SequenceIter, .{ .name = "g_sequence_range_get_midpoint" });
    const ret = cFn(_begin, _end);
    return ret;
}
/// func [sequence_remove](https://docs.gtk.org/glib/func.sequence_remove.html)
pub fn sequenceRemove(_iter: *glib.SequenceIter) void {
    const cFn = @extern(*const fn (*glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_remove" });
    const ret = cFn(_iter);
    return ret;
}
/// func [sequence_remove_range](https://docs.gtk.org/glib/func.sequence_remove_range.html)
pub fn sequenceRemoveRange(_begin: *glib.SequenceIter, _end: *glib.SequenceIter) void {
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_remove_range" });
    const ret = cFn(_begin, _end);
    return ret;
}
/// func [sequence_set](https://docs.gtk.org/glib/func.sequence_set.html)
pub fn sequenceSet(_iter: *glib.SequenceIter, _data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*glib.SequenceIter, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_set" });
    const ret = cFn(_iter, @ptrCast(_data));
    return ret;
}
/// func [sequence_sort_changed](https://docs.gtk.org/glib/func.sequence_sort_changed.html)
pub fn sequenceSortChanged(_iter: *glib.SequenceIter, cmp_func: anytype, cmp_func_args: anytype) void {
    var closure_cmp_func = core.zig_closure(cmp_func, cmp_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
    defer closure_cmp_func.deinit();
    const _cmp_func: glib.CompareDataFunc = @ptrCast(closure_cmp_func.c_closure());
    const _cmp_data: ?*anyopaque = @ptrCast(closure_cmp_func.c_data());
    const cFn = @extern(*const fn (*glib.SequenceIter, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort_changed" });
    const ret = cFn(_iter, _cmp_func, @ptrCast(_cmp_data));
    return ret;
}
/// func [sequence_sort_changed_iter](https://docs.gtk.org/glib/func.sequence_sort_changed_iter.html)
pub fn sequenceSortChangedIter(_iter: *glib.SequenceIter, iter_cmp: anytype, iter_cmp_args: anytype) void {
    var closure_iter_cmp = core.zig_closure(iter_cmp, iter_cmp_args, &.{ i32, *glib.SequenceIter, *glib.SequenceIter });
    defer closure_iter_cmp.deinit();
    const _iter_cmp: glib.SequenceIterCompareFunc = @ptrCast(closure_iter_cmp.c_closure());
    const _cmp_data: ?*anyopaque = @ptrCast(closure_iter_cmp.c_data());
    const cFn = @extern(*const fn (*glib.SequenceIter, glib.SequenceIterCompareFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_sequence_sort_changed_iter" });
    const ret = cFn(_iter, _iter_cmp, @ptrCast(_cmp_data));
    return ret;
}
/// func [sequence_swap](https://docs.gtk.org/glib/func.sequence_swap.html)
pub fn sequenceSwap(_a: *glib.SequenceIter, _b: *glib.SequenceIter) void {
    const cFn = @extern(*const fn (*glib.SequenceIter, *glib.SequenceIter) callconv(.c) void, .{ .name = "g_sequence_swap" });
    const ret = cFn(_a, _b);
    return ret;
}
/// func [set_application_name](https://docs.gtk.org/glib/func.set_application_name.html)
pub fn setApplicationName(_application_name: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_set_application_name" });
    const ret = cFn(_application_name);
    return ret;
}
/// func [set_error_literal](https://docs.gtk.org/glib/func.set_error_literal.html)
pub fn setErrorLiteral(_domain: u32, _code: i32, _message: [*:0]const u8) struct {
    ret: void,
    err: *core.Error,
} {
    var err_out: *core.Error = undefined;
    const _err = &err_out;
    const cFn = @extern(*const fn (?**core.Error, u32, i32, [*:0]const u8) callconv(.c) void, .{ .name = "g_set_error_literal" });
    const ret = cFn(_err, _domain, _code, _message);
    return .{ .ret = ret, .err = err_out };
}
/// func [set_prgname](https://docs.gtk.org/glib/func.set_prgname.html)
pub fn setPrgname(_prgname: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_set_prgname" });
    const ret = cFn(_prgname);
    return ret;
}
/// func [setenv](https://docs.gtk.org/glib/func.setenv.html)
pub fn setenv(_variable: [*:0]const u8, _value: [*:0]const u8, _overwrite: bool) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, bool) callconv(.c) bool, .{ .name = "g_setenv" });
    const ret = cFn(_variable, _value, _overwrite);
    return ret;
}
/// func [shell_error_quark](https://docs.gtk.org/glib/func.shell_error_quark.html)
pub fn shellErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_shell_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [shell_parse_argv](https://docs.gtk.org/glib/func.shell_parse_argv.html)
pub fn shellParseArgv(_command_line: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    argvp: ?[]?[*:0]const u8,
} {
    var argcp_out: i32 = undefined;
    const _argcp = &argcp_out;
    var argvp_out: [*:null]?[*:0]const u8 = undefined;
    const _argvp = &argvp_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*i32, ?*[*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_shell_parse_argv" });
    const ret = cFn(_command_line, _argcp, _argvp, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .argvp = argvp_out[0..@intCast(argcp_out)] };
}
/// func [shell_quote](https://docs.gtk.org/glib/func.shell_quote.html)
pub fn shellQuote(_unquoted_string: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_shell_quote" });
    const ret = cFn(_unquoted_string);
    return ret;
}
/// func [shell_unquote](https://docs.gtk.org/glib/func.shell_unquote.html)
pub fn shellUnquote(_quoted_string: [*:0]const u8, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_shell_unquote" });
    const ret = cFn(_quoted_string, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [slice_alloc](https://docs.gtk.org/glib/func.slice_alloc.html)
pub fn sliceAlloc(_block_size: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_slice_alloc" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [slice_alloc0](https://docs.gtk.org/glib/func.slice_alloc0.html)
pub fn sliceAlloc0(_block_size: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_slice_alloc0" });
    const ret = cFn(_block_size);
    return ret;
}
/// func [slice_copy](https://docs.gtk.org/glib/func.slice_copy.html)
pub fn sliceCopy(_block_size: u64, _mem_block: ?*anyopaque) ?*anyopaque {
    const cFn = @extern(*const fn (u64, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_slice_copy" });
    const ret = cFn(_block_size, @ptrCast(_mem_block));
    return ret;
}
/// func [slice_free1](https://docs.gtk.org/glib/func.slice_free1.html)
pub fn sliceFree1(_block_size: u64, _mem_block: ?*anyopaque) void {
    const cFn = @extern(*const fn (u64, ?*anyopaque) callconv(.c) void, .{ .name = "g_slice_free1" });
    const ret = cFn(_block_size, @ptrCast(_mem_block));
    return ret;
}
/// func [slice_free_chain_with_offset](https://docs.gtk.org/glib/func.slice_free_chain_with_offset.html)
pub fn sliceFreeChainWithOffset(_block_size: u64, _mem_chain: ?*anyopaque, _next_offset: u64) void {
    const cFn = @extern(*const fn (u64, ?*anyopaque, u64) callconv(.c) void, .{ .name = "g_slice_free_chain_with_offset" });
    const ret = cFn(_block_size, @ptrCast(_mem_chain), _next_offset);
    return ret;
}
/// func [slice_get_config](https://docs.gtk.org/glib/func.slice_get_config.html)
pub fn sliceGetConfig(_ckey: glib.SliceConfig) i64 {
    const cFn = @extern(*const fn (glib.SliceConfig) callconv(.c) i64, .{ .name = "g_slice_get_config" });
    const ret = cFn(_ckey);
    return ret;
}
/// func [slice_get_config_state](https://docs.gtk.org/glib/func.slice_get_config_state.html)
pub fn sliceGetConfigState(_ckey: glib.SliceConfig, _address: i64, _n_values: *u32) *i64 {
    const cFn = @extern(*const fn (glib.SliceConfig, i64, *u32) callconv(.c) *i64, .{ .name = "g_slice_get_config_state" });
    const ret = cFn(_ckey, _address, _n_values);
    return ret;
}
/// func [slice_set_config](https://docs.gtk.org/glib/func.slice_set_config.html)
pub fn sliceSetConfig(_ckey: glib.SliceConfig, _value: i64) void {
    const cFn = @extern(*const fn (glib.SliceConfig, i64) callconv(.c) void, .{ .name = "g_slice_set_config" });
    const ret = cFn(_ckey, _value);
    return ret;
}
/// func [slist_pop_allocator](https://docs.gtk.org/glib/func.slist_pop_allocator.html)
pub fn slistPopAllocator() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_slist_pop_allocator" });
    const ret = cFn();
    return ret;
}
/// func [slist_push_allocator](https://docs.gtk.org/glib/func.slist_push_allocator.html)
pub fn slistPushAllocator(_allocator: *glib.Allocator) void {
    const cFn = @extern(*const fn (*glib.Allocator) callconv(.c) void, .{ .name = "g_slist_push_allocator" });
    const ret = cFn(_allocator);
    return ret;
}
/// func [source_remove](https://docs.gtk.org/glib/func.source_remove.html)
pub fn sourceRemove(_tag: u32) bool {
    const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "g_source_remove" });
    const ret = cFn(_tag);
    return ret;
}
/// func [source_remove_by_funcs_user_data](https://docs.gtk.org/glib/func.source_remove_by_funcs_user_data.html)
pub fn sourceRemoveByFuncsUserData(_funcs: *glib.SourceFuncs, _user_data: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*glib.SourceFuncs, ?*anyopaque) callconv(.c) bool, .{ .name = "g_source_remove_by_funcs_user_data" });
    const ret = cFn(_funcs, @ptrCast(_user_data));
    return ret;
}
/// func [source_remove_by_user_data](https://docs.gtk.org/glib/func.source_remove_by_user_data.html)
pub fn sourceRemoveByUserData(_user_data: ?*anyopaque) bool {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) bool, .{ .name = "g_source_remove_by_user_data" });
    const ret = cFn(@ptrCast(_user_data));
    return ret;
}
/// func [source_set_name_by_id](https://docs.gtk.org/glib/func.source_set_name_by_id.html)
pub fn sourceSetNameById(_tag: u32, _name: [*:0]const u8) void {
    const cFn = @extern(*const fn (u32, [*:0]const u8) callconv(.c) void, .{ .name = "g_source_set_name_by_id" });
    const ret = cFn(_tag, _name);
    return ret;
}
/// func [spaced_primes_closest](https://docs.gtk.org/glib/func.spaced_primes_closest.html)
pub fn spacedPrimesClosest(_num: u32) u32 {
    const cFn = @extern(*const fn (u32) callconv(.c) u32, .{ .name = "g_spaced_primes_closest" });
    const ret = cFn(_num);
    return ret;
}
/// func [spawn_async](https://docs.gtk.org/glib/func.spawn_async.html)
pub fn spawnAsync(_working_directory: ?[*:0]const u8, _argv: [*:null]?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _flags: glib.SpawnFlags, child_setup: anytype, child_setup_args: anytype, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    child_pid: i32,
} {
    var closure_child_setup = core.zig_closure(child_setup, child_setup_args, &.{void});
    closure_child_setup.setOnce();
    const _child_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_child_setup.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_child_setup.c_data());
    var child_pid_out: i32 = undefined;
    const _child_pid = &child_pid_out;
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?*i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_async" });
    const ret = cFn(_working_directory, _argv, _envp, _flags, _child_setup, @ptrCast(_user_data), _child_pid, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .child_pid = child_pid_out };
}
/// func [spawn_async_with_fds](https://docs.gtk.org/glib/func.spawn_async_with_fds.html)
pub fn spawnAsyncWithFds(_working_directory: ?[*:0]const u8, _argv: [*:null]?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _flags: glib.SpawnFlags, child_setup: anytype, child_setup_args: anytype, _stdin_fd: i32, _stdout_fd: i32, _stderr_fd: i32, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    child_pid: i32,
} {
    var closure_child_setup = core.zig_closure(child_setup, child_setup_args, &.{void});
    closure_child_setup.setOnce();
    const _child_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_child_setup.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_child_setup.c_data());
    var child_pid_out: i32 = undefined;
    const _child_pid = &child_pid_out;
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?*i32, i32, i32, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_async_with_fds" });
    const ret = cFn(_working_directory, _argv, _envp, _flags, _child_setup, @ptrCast(_user_data), _child_pid, _stdin_fd, _stdout_fd, _stderr_fd, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .child_pid = child_pid_out };
}
/// func [spawn_async_with_pipes](https://docs.gtk.org/glib/func.spawn_async_with_pipes.html)
pub fn spawnAsyncWithPipes(_working_directory: ?[*:0]const u8, _argv: [*:null]?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _flags: glib.SpawnFlags, child_setup: anytype, child_setup_args: anytype, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    child_pid: i32,
    standard_input: i32,
    standard_output: i32,
    standard_error: i32,
} {
    var closure_child_setup = core.zig_closure(child_setup, child_setup_args, &.{void});
    closure_child_setup.setOnce();
    const _child_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_child_setup.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_child_setup.c_data());
    var child_pid_out: i32 = undefined;
    const _child_pid = &child_pid_out;
    var standard_input_out: i32 = undefined;
    const _standard_input = &standard_input_out;
    var standard_output_out: i32 = undefined;
    const _standard_output = &standard_output_out;
    var standard_error_out: i32 = undefined;
    const _standard_error = &standard_error_out;
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?*i32, ?*i32, ?*i32, ?*i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_async_with_pipes" });
    const ret = cFn(_working_directory, _argv, _envp, _flags, _child_setup, @ptrCast(_user_data), _child_pid, _standard_input, _standard_output, _standard_error, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .child_pid = child_pid_out, .standard_input = standard_input_out, .standard_output = standard_output_out, .standard_error = standard_error_out };
}
/// func [spawn_async_with_pipes_and_fds](https://docs.gtk.org/glib/func.spawn_async_with_pipes_and_fds.html)
pub fn spawnAsyncWithPipesAndFds(_working_directory: ?[*:0]const u8, _argv: [*:null]?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _flags: glib.SpawnFlags, child_setup: anytype, child_setup_args: anytype, _stdin_fd: i32, _stdout_fd: i32, _stderr_fd: i32, _source_fdss: []i32, _target_fdss: []i32, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    child_pid_out: i32,
    stdin_pipe_out: i32,
    stdout_pipe_out: i32,
    stderr_pipe_out: i32,
} {
    var closure_child_setup = core.zig_closure(child_setup, child_setup_args, &.{void});
    closure_child_setup.setOnce();
    const _child_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_child_setup.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_child_setup.c_data());
    const _source_fds = _source_fdss.ptr;
    const _target_fds = _target_fdss.ptr;
    const _n_fds: u64 = @intCast(_source_fdss.len);
    var child_pid_out_out: i32 = undefined;
    const _child_pid_out = &child_pid_out_out;
    var stdin_pipe_out_out: i32 = undefined;
    const _stdin_pipe_out = &stdin_pipe_out_out;
    var stdout_pipe_out_out: i32 = undefined;
    const _stdout_pipe_out = &stdout_pipe_out_out;
    var stderr_pipe_out_out: i32 = undefined;
    const _stderr_pipe_out = &stderr_pipe_out_out;
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, i32, i32, i32, ?[*]i32, ?[*]i32, u64, ?*i32, ?*i32, ?*i32, ?*i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_async_with_pipes_and_fds" });
    const ret = cFn(_working_directory, _argv, _envp, _flags, _child_setup, @ptrCast(_user_data), _stdin_fd, _stdout_fd, _stderr_fd, _source_fds, _target_fds, _n_fds, _child_pid_out, _stdin_pipe_out, _stdout_pipe_out, _stderr_pipe_out, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .child_pid_out = child_pid_out_out, .stdin_pipe_out = stdin_pipe_out_out, .stdout_pipe_out = stdout_pipe_out_out, .stderr_pipe_out = stderr_pipe_out_out };
}
/// Deprecated:
/// func [spawn_check_exit_status](https://docs.gtk.org/glib/func.spawn_check_exit_status.html)
pub const spawnCheckExitStatus = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn spawnCheckExitStatus(_wait_status: i32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_check_exit_status" });
        const ret = cFn(_wait_status, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
}.spawnCheckExitStatus;
/// func [spawn_check_wait_status](https://docs.gtk.org/glib/func.spawn_check_wait_status.html)
pub fn spawnCheckWaitStatus(_wait_status: i32, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_check_wait_status" });
    const ret = cFn(_wait_status, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [spawn_close_pid](https://docs.gtk.org/glib/func.spawn_close_pid.html)
pub fn spawnClosePid(_pid: i32) void {
    const cFn = @extern(*const fn (i32) callconv(.c) void, .{ .name = "g_spawn_close_pid" });
    const ret = cFn(_pid);
    return ret;
}
/// func [spawn_command_line_async](https://docs.gtk.org/glib/func.spawn_command_line_async.html)
pub fn spawnCommandLineAsync(_command_line: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_command_line_async" });
    const ret = cFn(_command_line, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [spawn_command_line_sync](https://docs.gtk.org/glib/func.spawn_command_line_sync.html)
pub fn spawnCommandLineSync(_command_line: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    standard_output: [*:0]u8,
    standard_error: [*:0]u8,
    wait_status: i32,
} {
    var standard_output_out: [*:0]u8 = undefined;
    const _standard_output = &standard_output_out;
    var standard_error_out: [*:0]u8 = undefined;
    const _standard_error = &standard_error_out;
    var wait_status_out: i32 = undefined;
    const _wait_status = &wait_status_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8, ?*[*:0]u8, ?*i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_command_line_sync" });
    const ret = cFn(_command_line, _standard_output, _standard_error, _wait_status, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .standard_output = standard_output_out, .standard_error = standard_error_out, .wait_status = wait_status_out };
}
/// func [spawn_error_quark](https://docs.gtk.org/glib/func.spawn_error_quark.html)
pub fn spawnErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_spawn_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [spawn_exit_error_quark](https://docs.gtk.org/glib/func.spawn_exit_error_quark.html)
pub fn spawnExitErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_spawn_exit_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [spawn_sync](https://docs.gtk.org/glib/func.spawn_sync.html)
pub fn spawnSync(_working_directory: ?[*:0]const u8, _argv: [*:null]?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _flags: glib.SpawnFlags, child_setup: anytype, child_setup_args: anytype, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    standard_output: [*:0]u8,
    standard_error: [*:0]u8,
    wait_status: i32,
} {
    var closure_child_setup = core.zig_closure(child_setup, child_setup_args, &.{void});
    defer closure_child_setup.deinit();
    const _child_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_child_setup.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_child_setup.c_data());
    var standard_output_out: [*:0]u8 = undefined;
    const _standard_output = &standard_output_out;
    var standard_error_out: [*:0]u8 = undefined;
    const _standard_error = &standard_error_out;
    var wait_status_out: i32 = undefined;
    const _wait_status = &wait_status_out;
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?*[*:0]u8, ?*[*:0]u8, ?*i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_spawn_sync" });
    const ret = cFn(_working_directory, _argv, _envp, _flags, _child_setup, @ptrCast(_user_data), _standard_output, _standard_error, _wait_status, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .standard_output = standard_output_out, .standard_error = standard_error_out, .wait_status = wait_status_out };
}
/// func [stat](https://docs.gtk.org/glib/func.stat.html)
pub fn stat(_filename: [*:0]const u8, _buf: *glib.StatBuf) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, *glib.StatBuf) callconv(.c) i32, .{ .name = "g_stat" });
    const ret = cFn(_filename, _buf);
    return ret;
}
/// func [stpcpy](https://docs.gtk.org/glib/func.stpcpy.html)
pub fn stpcpy(_dest: [*:0]const u8, _src: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_stpcpy" });
    const ret = cFn(_dest, _src);
    return ret;
}
/// func [str_equal](https://docs.gtk.org/glib/func.str_equal.html)
pub fn strEqual(_v1: *anyopaque, _v2: *anyopaque) bool {
    const cFn = @extern(*const fn (*anyopaque, *anyopaque) callconv(.c) bool, .{ .name = "g_str_equal" });
    const ret = cFn(@ptrCast(_v1), @ptrCast(_v2));
    return ret;
}
/// func [str_has_prefix](https://docs.gtk.org/glib/func.str_has_prefix.html)
pub fn strHasPrefix(_str: [*:0]const u8, _prefix: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_str_has_prefix" });
    const ret = cFn(_str, _prefix);
    return ret;
}
/// func [str_has_suffix](https://docs.gtk.org/glib/func.str_has_suffix.html)
pub fn strHasSuffix(_str: [*:0]const u8, _suffix: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_str_has_suffix" });
    const ret = cFn(_str, _suffix);
    return ret;
}
/// func [str_hash](https://docs.gtk.org/glib/func.str_hash.html)
pub fn strHash(_v: *anyopaque) u32 {
    const cFn = @extern(*const fn (*anyopaque) callconv(.c) u32, .{ .name = "g_str_hash" });
    const ret = cFn(@ptrCast(_v));
    return ret;
}
/// func [str_is_ascii](https://docs.gtk.org/glib/func.str_is_ascii.html)
pub fn strIsAscii(_str: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_str_is_ascii" });
    const ret = cFn(_str);
    return ret;
}
/// func [str_match_string](https://docs.gtk.org/glib/func.str_match_string.html)
pub fn strMatchString(_search_term: [*:0]const u8, _potential_hit: [*:0]const u8, _accept_alternates: bool) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, bool) callconv(.c) bool, .{ .name = "g_str_match_string" });
    const ret = cFn(_search_term, _potential_hit, _accept_alternates);
    return ret;
}
/// func [str_to_ascii](https://docs.gtk.org/glib/func.str_to_ascii.html)
pub fn strToAscii(_str: [*:0]const u8, _from_locale: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_str_to_ascii" });
    const ret = cFn(_str, _from_locale);
    return ret;
}
/// func [str_tokenize_and_fold](https://docs.gtk.org/glib/func.str_tokenize_and_fold.html)
pub fn strTokenizeAndFold(_string: [*:0]const u8, _translit_locale: ?[*:0]const u8) struct {
    ret: [*:null]?[*:0]const u8,
    ascii_alternates: [*:null]?[*:0]const u8,
} {
    var ascii_alternates_out: [*:null]?[*:0]const u8 = undefined;
    const _ascii_alternates = &ascii_alternates_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?*[*:null]?[*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_str_tokenize_and_fold" });
    const ret = cFn(_string, _translit_locale, _ascii_alternates);
    return .{ .ret = ret, .ascii_alternates = ascii_alternates_out };
}
/// func [strcanon](https://docs.gtk.org/glib/func.strcanon.html)
pub fn strcanon(_string: [*:0]const u8, _valid_chars: [*:0]const u8, _substitutor: i8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i8) callconv(.c) [*:0]u8, .{ .name = "g_strcanon" });
    const ret = cFn(_string, _valid_chars, _substitutor);
    return ret;
}
/// Deprecated:
/// func [strcasecmp](https://docs.gtk.org/glib/func.strcasecmp.html)
pub const strcasecmp = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn strcasecmp(_s1: [*:0]const u8, _s2: [*:0]const u8) i32 {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) i32, .{ .name = "g_strcasecmp" });
        const ret = cFn(_s1, _s2);
        return ret;
    }
}.strcasecmp;
/// func [strchomp](https://docs.gtk.org/glib/func.strchomp.html)
pub fn strchomp(_string: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strchomp" });
    const ret = cFn(_string);
    return ret;
}
/// func [strchug](https://docs.gtk.org/glib/func.strchug.html)
pub fn strchug(_string: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strchug" });
    const ret = cFn(_string);
    return ret;
}
/// func [strcmp0](https://docs.gtk.org/glib/func.strcmp0.html)
pub fn strcmp0(_str1: ?[*:0]const u8, _str2: ?[*:0]const u8) i32 {
    const cFn = @extern(*const fn (?[*:0]const u8, ?[*:0]const u8) callconv(.c) i32, .{ .name = "g_strcmp0" });
    const ret = cFn(_str1, _str2);
    return ret;
}
/// func [strcompress](https://docs.gtk.org/glib/func.strcompress.html)
pub fn strcompress(_source: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strcompress" });
    const ret = cFn(_source);
    return ret;
}
/// func [strdelimit](https://docs.gtk.org/glib/func.strdelimit.html)
pub fn strdelimit(_string: [*:0]const u8, _delimiters: ?[*:0]const u8, _new_delimiter: i8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, i8) callconv(.c) [*:0]u8, .{ .name = "g_strdelimit" });
    const ret = cFn(_string, _delimiters, _new_delimiter);
    return ret;
}
/// Deprecated:
/// func [strdown](https://docs.gtk.org/glib/func.strdown.html)
pub const strdown = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn strdown(_string: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strdown" });
        const ret = cFn(_string);
        return ret;
    }
}.strdown;
/// func [strdup](https://docs.gtk.org/glib/func.strdup.html)
pub fn strdup(_str: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strdup" });
    const ret = cFn(_str);
    return ret;
}
/// func [strdupv](https://docs.gtk.org/glib/func.strdupv.html)
pub fn strdupv(_str_array: ?[*:null]?[*:0]const u8) ?[*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "g_strdupv" });
    const ret = cFn(_str_array);
    return ret;
}
/// func [strerror](https://docs.gtk.org/glib/func.strerror.html)
pub fn strerror(_errnum: i32) [*:0]u8 {
    const cFn = @extern(*const fn (i32) callconv(.c) [*:0]u8, .{ .name = "g_strerror" });
    const ret = cFn(_errnum);
    return ret;
}
/// func [strescape](https://docs.gtk.org/glib/func.strescape.html)
pub fn strescape(_source: [*:0]const u8, _exceptions: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strescape" });
    const ret = cFn(_source, _exceptions);
    return ret;
}
/// func [strfreev](https://docs.gtk.org/glib/func.strfreev.html)
pub fn strfreev(_str_array: ?[*:null]?[*:0]const u8) void {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_strfreev" });
    const ret = cFn(_str_array);
    return ret;
}
/// func [strip_context](https://docs.gtk.org/glib/func.strip_context.html)
pub fn stripContext(_msgid: [*:0]const u8, _msgval: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strip_context" });
    const ret = cFn(_msgid, _msgval);
    return ret;
}
/// func [strjoinv](https://docs.gtk.org/glib/func.strjoinv.html)
pub fn strjoinv(_separator: ?[*:0]const u8, _str_array: [*:null]?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strjoinv" });
    const ret = cFn(_separator, _str_array);
    return ret;
}
/// func [strlcat](https://docs.gtk.org/glib/func.strlcat.html)
pub fn strlcat(_dest: [*:0]const u8, _src: [*:0]const u8, _dest_size: u64) u64 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, u64) callconv(.c) u64, .{ .name = "g_strlcat" });
    const ret = cFn(_dest, _src, _dest_size);
    return ret;
}
/// func [strlcpy](https://docs.gtk.org/glib/func.strlcpy.html)
pub fn strlcpy(_dest: [*:0]const u8, _src: [*:0]const u8, _dest_size: u64) u64 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, u64) callconv(.c) u64, .{ .name = "g_strlcpy" });
    const ret = cFn(_dest, _src, _dest_size);
    return ret;
}
/// Deprecated:
/// func [strncasecmp](https://docs.gtk.org/glib/func.strncasecmp.html)
pub const strncasecmp = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn strncasecmp(_s1: [*:0]const u8, _s2: [*:0]const u8, _n: u32) i32 {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, u32) callconv(.c) i32, .{ .name = "g_strncasecmp" });
        const ret = cFn(_s1, _s2, _n);
        return ret;
    }
}.strncasecmp;
/// func [strndup](https://docs.gtk.org/glib/func.strndup.html)
pub fn strndup(_str: ?[*:0]const u8, _n: u64) ?[*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, u64) callconv(.c) ?[*:0]u8, .{ .name = "g_strndup" });
    const ret = cFn(_str, _n);
    return ret;
}
/// func [strnfill](https://docs.gtk.org/glib/func.strnfill.html)
pub fn strnfill(_length: u64, _fill_char: i8) [*:0]u8 {
    const cFn = @extern(*const fn (u64, i8) callconv(.c) [*:0]u8, .{ .name = "g_strnfill" });
    const ret = cFn(_length, _fill_char);
    return ret;
}
/// func [strreverse](https://docs.gtk.org/glib/func.strreverse.html)
pub fn strreverse(_string: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strreverse" });
    const ret = cFn(_string);
    return ret;
}
/// func [strrstr](https://docs.gtk.org/glib/func.strrstr.html)
pub fn strrstr(_haystack: [*:0]const u8, _needle: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strrstr" });
    const ret = cFn(_haystack, _needle);
    return ret;
}
/// func [strrstr_len](https://docs.gtk.org/glib/func.strrstr_len.html)
pub fn strrstrLen(_haystack: [*:0]const u8, _haystack_len: i64, _needle: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strrstr_len" });
    const ret = cFn(_haystack, _haystack_len, _needle);
    return ret;
}
/// func [strsignal](https://docs.gtk.org/glib/func.strsignal.html)
pub fn strsignal(_signum: i32) [*:0]u8 {
    const cFn = @extern(*const fn (i32) callconv(.c) [*:0]u8, .{ .name = "g_strsignal" });
    const ret = cFn(_signum);
    return ret;
}
/// func [strsplit](https://docs.gtk.org/glib/func.strsplit.html)
pub fn strsplit(_string: [*:0]const u8, _delimiter: [*:0]const u8, _max_tokens: i32) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_strsplit" });
    const ret = cFn(_string, _delimiter, _max_tokens);
    return ret;
}
/// func [strsplit_set](https://docs.gtk.org/glib/func.strsplit_set.html)
pub fn strsplitSet(_string: [*:0]const u8, _delimiters: [*:0]const u8, _max_tokens: i32) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_strsplit_set" });
    const ret = cFn(_string, _delimiters, _max_tokens);
    return ret;
}
/// func [strstr_len](https://docs.gtk.org/glib/func.strstr_len.html)
pub fn strstrLen(_haystack: [*:0]const u8, _haystack_len: i64, _needle: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strstr_len" });
    const ret = cFn(_haystack, _haystack_len, _needle);
    return ret;
}
/// func [strtod](https://docs.gtk.org/glib/func.strtod.html)
pub fn strtod(_nptr: [*:0]const u8) struct {
    ret: f64,
    endptr: [*:0]u8,
} {
    var endptr_out: [*:0]u8 = undefined;
    const _endptr = &endptr_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8) callconv(.c) f64, .{ .name = "g_strtod" });
    const ret = cFn(_nptr, _endptr);
    return .{ .ret = ret, .endptr = endptr_out };
}
/// Deprecated:
/// func [strup](https://docs.gtk.org/glib/func.strup.html)
pub const strup = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn strup(_string: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_strup" });
        const ret = cFn(_string);
        return ret;
    }
}.strup;
/// func [strv_contains](https://docs.gtk.org/glib/func.strv_contains.html)
pub fn strvContains(_strv: [*:null]?[*:0]const u8, _str: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:null]?[*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_strv_contains" });
    const ret = cFn(_strv, _str);
    return ret;
}
/// func [strv_equal](https://docs.gtk.org/glib/func.strv_equal.html)
pub fn strvEqual(_strv1: [*:null]?[*:0]const u8, _strv2: [*:null]?[*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:null]?[*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) bool, .{ .name = "g_strv_equal" });
    const ret = cFn(_strv1, _strv2);
    return ret;
}
/// func [strv_get_type](https://docs.gtk.org/glib/func.strv_get_type.html)
pub fn strvGetType() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_strv_get_type" });
    const ret = cFn();
    return ret;
}
/// func [strv_length](https://docs.gtk.org/glib/func.strv_length.html)
pub fn strvLength(_str_array: [*:null]?[*:0]const u8) u32 {
    const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) u32, .{ .name = "g_strv_length" });
    const ret = cFn(_str_array);
    return ret;
}
/// func [test_add_data_func](https://docs.gtk.org/glib/func.test_add_data_func.html)
pub fn testAddDataFunc(_testpath: [*:0]const u8, _test_data: ?*anyopaque, _test_func: glib.TestDataFunc) void {
    const cFn = @extern(*const fn ([*:0]const u8, ?*anyopaque, glib.TestDataFunc) callconv(.c) void, .{ .name = "g_test_add_data_func" });
    const ret = cFn(_testpath, @ptrCast(_test_data), _test_func);
    return ret;
}
/// func [test_add_data_func_full](https://docs.gtk.org/glib/func.test_add_data_func_full.html)
pub fn testAddDataFuncFull(_testpath: [*:0]const u8, _test_data: ?*anyopaque, _test_func: glib.TestDataFunc, _data_free_func: glib.DestroyNotify) void {
    const cFn = @extern(*const fn ([*:0]const u8, ?*anyopaque, glib.TestDataFunc, glib.DestroyNotify) callconv(.c) void, .{ .name = "g_test_add_data_func_full" });
    const ret = cFn(_testpath, @ptrCast(_test_data), _test_func, _data_free_func);
    return ret;
}
/// func [test_add_func](https://docs.gtk.org/glib/func.test_add_func.html)
pub fn testAddFunc(_testpath: [*:0]const u8, _test_func: glib.TestFunc) void {
    const cFn = @extern(*const fn ([*:0]const u8, glib.TestFunc) callconv(.c) void, .{ .name = "g_test_add_func" });
    const ret = cFn(_testpath, _test_func);
    return ret;
}
/// func [test_assert_expected_messages_internal](https://docs.gtk.org/glib/func.test_assert_expected_messages_internal.html)
pub fn testAssertExpectedMessagesInternal(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8) callconv(.c) void, .{ .name = "g_test_assert_expected_messages_internal" });
    const ret = cFn(_domain, _file, _line, _func);
    return ret;
}
/// func [test_bug](https://docs.gtk.org/glib/func.test_bug.html)
pub fn testBug(_bug_uri_snippet: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_test_bug" });
    const ret = cFn(_bug_uri_snippet);
    return ret;
}
/// func [test_bug_base](https://docs.gtk.org/glib/func.test_bug_base.html)
pub fn testBugBase(_uri_pattern: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_test_bug_base" });
    const ret = cFn(_uri_pattern);
    return ret;
}
/// func [test_disable_crash_reporting](https://docs.gtk.org/glib/func.test_disable_crash_reporting.html)
pub fn testDisableCrashReporting() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_test_disable_crash_reporting" });
    const ret = cFn();
    return ret;
}
/// func [test_expect_message](https://docs.gtk.org/glib/func.test_expect_message.html)
pub fn testExpectMessage(_log_domain: ?[*:0]const u8, _log_level: glib.LogLevelFlags, _pattern: [*:0]const u8) void {
    const cFn = @extern(*const fn (?[*:0]const u8, glib.LogLevelFlags, [*:0]const u8) callconv(.c) void, .{ .name = "g_test_expect_message" });
    const ret = cFn(_log_domain, _log_level, _pattern);
    return ret;
}
/// func [test_fail](https://docs.gtk.org/glib/func.test_fail.html)
pub fn testFail() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_test_fail" });
    const ret = cFn();
    return ret;
}
/// func [test_failed](https://docs.gtk.org/glib/func.test_failed.html)
pub fn testFailed() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_test_failed" });
    const ret = cFn();
    return ret;
}
/// func [test_get_dir](https://docs.gtk.org/glib/func.test_get_dir.html)
pub fn testGetDir(_file_type: glib.TestFileType) [*:0]u8 {
    const cFn = @extern(*const fn (glib.TestFileType) callconv(.c) [*:0]u8, .{ .name = "g_test_get_dir" });
    const ret = cFn(_file_type);
    return ret;
}
/// func [test_get_path](https://docs.gtk.org/glib/func.test_get_path.html)
pub fn testGetPath() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_test_get_path" });
    const ret = cFn();
    return ret;
}
/// func [test_incomplete](https://docs.gtk.org/glib/func.test_incomplete.html)
pub fn testIncomplete(_msg: ?[*:0]const u8) void {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) void, .{ .name = "g_test_incomplete" });
    const ret = cFn(_msg);
    return ret;
}
/// func [test_log_type_name](https://docs.gtk.org/glib/func.test_log_type_name.html)
pub fn testLogTypeName(_log_type: glib.TestLogType) [*:0]u8 {
    const cFn = @extern(*const fn (glib.TestLogType) callconv(.c) [*:0]u8, .{ .name = "g_test_log_type_name" });
    const ret = cFn(_log_type);
    return ret;
}
/// func [test_queue_destroy](https://docs.gtk.org/glib/func.test_queue_destroy.html)
pub fn testQueueDestroy(_destroy_func: glib.DestroyNotify, _destroy_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (glib.DestroyNotify, ?*anyopaque) callconv(.c) void, .{ .name = "g_test_queue_destroy" });
    const ret = cFn(_destroy_func, @ptrCast(_destroy_data));
    return ret;
}
/// func [test_queue_free](https://docs.gtk.org/glib/func.test_queue_free.html)
pub fn testQueueFree(_gfree_pointer: ?*anyopaque) void {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) void, .{ .name = "g_test_queue_free" });
    const ret = cFn(@ptrCast(_gfree_pointer));
    return ret;
}
/// func [test_rand_double](https://docs.gtk.org/glib/func.test_rand_double.html)
pub fn testRandDouble() f64 {
    const cFn = @extern(*const fn () callconv(.c) f64, .{ .name = "g_test_rand_double" });
    const ret = cFn();
    return ret;
}
/// func [test_rand_double_range](https://docs.gtk.org/glib/func.test_rand_double_range.html)
pub fn testRandDoubleRange(_range_start: f64, _range_end: f64) f64 {
    const cFn = @extern(*const fn (f64, f64) callconv(.c) f64, .{ .name = "g_test_rand_double_range" });
    const ret = cFn(_range_start, _range_end);
    return ret;
}
/// func [test_rand_int](https://docs.gtk.org/glib/func.test_rand_int.html)
pub fn testRandInt() i32 {
    const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "g_test_rand_int" });
    const ret = cFn();
    return ret;
}
/// func [test_rand_int_range](https://docs.gtk.org/glib/func.test_rand_int_range.html)
pub fn testRandIntRange(_begin: i32, _end: i32) i32 {
    const cFn = @extern(*const fn (i32, i32) callconv(.c) i32, .{ .name = "g_test_rand_int_range" });
    const ret = cFn(_begin, _end);
    return ret;
}
/// func [test_run](https://docs.gtk.org/glib/func.test_run.html)
pub fn testRun() i32 {
    const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "g_test_run" });
    const ret = cFn();
    return ret;
}
/// func [test_run_suite](https://docs.gtk.org/glib/func.test_run_suite.html)
pub fn testRunSuite(_suite: *glib.TestSuite) i32 {
    const cFn = @extern(*const fn (*glib.TestSuite) callconv(.c) i32, .{ .name = "g_test_run_suite" });
    const ret = cFn(_suite);
    return ret;
}
/// func [test_set_nonfatal_assertions](https://docs.gtk.org/glib/func.test_set_nonfatal_assertions.html)
pub fn testSetNonfatalAssertions() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_test_set_nonfatal_assertions" });
    const ret = cFn();
    return ret;
}
/// func [test_skip](https://docs.gtk.org/glib/func.test_skip.html)
pub fn testSkip(_msg: ?[*:0]const u8) void {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) void, .{ .name = "g_test_skip" });
    const ret = cFn(_msg);
    return ret;
}
/// func [test_subprocess](https://docs.gtk.org/glib/func.test_subprocess.html)
pub fn testSubprocess() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_test_subprocess" });
    const ret = cFn();
    return ret;
}
/// func [test_summary](https://docs.gtk.org/glib/func.test_summary.html)
pub fn testSummary(_summary: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_test_summary" });
    const ret = cFn(_summary);
    return ret;
}
/// func [test_timer_elapsed](https://docs.gtk.org/glib/func.test_timer_elapsed.html)
pub fn testTimerElapsed() f64 {
    const cFn = @extern(*const fn () callconv(.c) f64, .{ .name = "g_test_timer_elapsed" });
    const ret = cFn();
    return ret;
}
/// func [test_timer_last](https://docs.gtk.org/glib/func.test_timer_last.html)
pub fn testTimerLast() f64 {
    const cFn = @extern(*const fn () callconv(.c) f64, .{ .name = "g_test_timer_last" });
    const ret = cFn();
    return ret;
}
/// func [test_timer_start](https://docs.gtk.org/glib/func.test_timer_start.html)
pub fn testTimerStart() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_test_timer_start" });
    const ret = cFn();
    return ret;
}
/// func [test_trap_assertions](https://docs.gtk.org/glib/func.test_trap_assertions.html)
pub fn testTrapAssertions(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _assertion_flags: u64, _pattern: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, u64, [*:0]const u8) callconv(.c) void, .{ .name = "g_test_trap_assertions" });
    const ret = cFn(_domain, _file, _line, _func, _assertion_flags, _pattern);
    return ret;
}
/// Deprecated:
/// func [test_trap_fork](https://docs.gtk.org/glib/func.test_trap_fork.html)
pub const testTrapFork = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn testTrapFork(_usec_timeout: u64, _test_trap_flags: glib.TestTrapFlags) bool {
        const cFn = @extern(*const fn (u64, glib.TestTrapFlags) callconv(.c) bool, .{ .name = "g_test_trap_fork" });
        const ret = cFn(_usec_timeout, _test_trap_flags);
        return ret;
    }
}.testTrapFork;
/// func [test_trap_has_passed](https://docs.gtk.org/glib/func.test_trap_has_passed.html)
pub fn testTrapHasPassed() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_test_trap_has_passed" });
    const ret = cFn();
    return ret;
}
/// func [test_trap_reached_timeout](https://docs.gtk.org/glib/func.test_trap_reached_timeout.html)
pub fn testTrapReachedTimeout() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_test_trap_reached_timeout" });
    const ret = cFn();
    return ret;
}
/// func [test_trap_subprocess](https://docs.gtk.org/glib/func.test_trap_subprocess.html)
pub fn testTrapSubprocess(_test_path: ?[*:0]const u8, _usec_timeout: u64, _test_flags: glib.TestSubprocessFlags) void {
    const cFn = @extern(*const fn (?[*:0]const u8, u64, glib.TestSubprocessFlags) callconv(.c) void, .{ .name = "g_test_trap_subprocess" });
    const ret = cFn(_test_path, _usec_timeout, _test_flags);
    return ret;
}
/// func [test_trap_subprocess_with_envp](https://docs.gtk.org/glib/func.test_trap_subprocess_with_envp.html)
pub fn testTrapSubprocessWithEnvp(_test_path: ?[*:0]const u8, _envp: ?[*:null]?[*:0]const u8, _usec_timeout: u64, _test_flags: glib.TestSubprocessFlags) void {
    const cFn = @extern(*const fn (?[*:0]const u8, ?[*:null]?[*:0]const u8, u64, glib.TestSubprocessFlags) callconv(.c) void, .{ .name = "g_test_trap_subprocess_with_envp" });
    const ret = cFn(_test_path, _envp, _usec_timeout, _test_flags);
    return ret;
}
/// func [thread_error_quark](https://docs.gtk.org/glib/func.thread_error_quark.html)
pub fn threadErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [thread_exit](https://docs.gtk.org/glib/func.thread_exit.html)
pub fn threadExit(_retval: ?*anyopaque) void {
    const cFn = @extern(*const fn (?*anyopaque) callconv(.c) void, .{ .name = "g_thread_exit" });
    const ret = cFn(@ptrCast(_retval));
    return ret;
}
/// func [thread_pool_get_max_idle_time](https://docs.gtk.org/glib/func.thread_pool_get_max_idle_time.html)
pub fn threadPoolGetMaxIdleTime() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_pool_get_max_idle_time" });
    const ret = cFn();
    return ret;
}
/// func [thread_pool_get_max_unused_threads](https://docs.gtk.org/glib/func.thread_pool_get_max_unused_threads.html)
pub fn threadPoolGetMaxUnusedThreads() i32 {
    const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "g_thread_pool_get_max_unused_threads" });
    const ret = cFn();
    return ret;
}
/// func [thread_pool_get_num_unused_threads](https://docs.gtk.org/glib/func.thread_pool_get_num_unused_threads.html)
pub fn threadPoolGetNumUnusedThreads() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_thread_pool_get_num_unused_threads" });
    const ret = cFn();
    return ret;
}
/// func [thread_pool_set_max_idle_time](https://docs.gtk.org/glib/func.thread_pool_set_max_idle_time.html)
pub fn threadPoolSetMaxIdleTime(_interval: u32) void {
    const cFn = @extern(*const fn (u32) callconv(.c) void, .{ .name = "g_thread_pool_set_max_idle_time" });
    const ret = cFn(_interval);
    return ret;
}
/// func [thread_pool_set_max_unused_threads](https://docs.gtk.org/glib/func.thread_pool_set_max_unused_threads.html)
pub fn threadPoolSetMaxUnusedThreads(_max_threads: i32) void {
    const cFn = @extern(*const fn (i32) callconv(.c) void, .{ .name = "g_thread_pool_set_max_unused_threads" });
    const ret = cFn(_max_threads);
    return ret;
}
/// func [thread_pool_stop_unused_threads](https://docs.gtk.org/glib/func.thread_pool_stop_unused_threads.html)
pub fn threadPoolStopUnusedThreads() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_thread_pool_stop_unused_threads" });
    const ret = cFn();
    return ret;
}
/// func [thread_self](https://docs.gtk.org/glib/func.thread_self.html)
pub fn threadSelf() *glib.Thread {
    const cFn = @extern(*const fn () callconv(.c) *glib.Thread, .{ .name = "g_thread_self" });
    const ret = cFn();
    return ret;
}
/// func [thread_yield](https://docs.gtk.org/glib/func.thread_yield.html)
pub fn threadYield() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_thread_yield" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [time_val_from_iso8601](https://docs.gtk.org/glib/func.time_val_from_iso8601.html)
pub const timeValFromIso8601 = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn timeValFromIso8601(_iso_date: [*:0]const u8, _time_: *glib.TimeVal) bool {
        const cFn = @extern(*const fn ([*:0]const u8, *glib.TimeVal) callconv(.c) bool, .{ .name = "g_time_val_from_iso8601" });
        const ret = cFn(_iso_date, _time_);
        return ret;
    }
}.timeValFromIso8601;
/// func [timeout_add](https://docs.gtk.org/glib/func.timeout_add.html)
pub fn timeoutAdd(_priority: i32, _interval: u32, function: anytype, function_args: anytype) u32 {
    var closure_function = core.zig_closure(function, function_args, &.{bool});
    const _function: glib.SourceFunc = @ptrCast(closure_function.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_function.c_data());
    const _notify: ?glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
    const cFn = @extern(*const fn (i32, u32, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_timeout_add_full" });
    const ret = cFn(_priority, _interval, _function, @ptrCast(_data), _notify);
    return ret;
}
/// func [timeout_add_seconds](https://docs.gtk.org/glib/func.timeout_add_seconds.html)
pub fn timeoutAddSeconds(_priority: i32, _interval: u32, function: anytype, function_args: anytype) u32 {
    var closure_function = core.zig_closure(function, function_args, &.{bool});
    const _function: glib.SourceFunc = @ptrCast(closure_function.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_function.c_data());
    const _notify: ?glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
    const cFn = @extern(*const fn (i32, u32, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_timeout_add_seconds_full" });
    const ret = cFn(_priority, _interval, _function, @ptrCast(_data), _notify);
    return ret;
}
/// func [timeout_source_new](https://docs.gtk.org/glib/func.timeout_source_new.html)
pub fn timeoutSourceNew(_interval: u32) *glib.Source {
    const cFn = @extern(*const fn (u32) callconv(.c) *glib.Source, .{ .name = "g_timeout_source_new" });
    const ret = cFn(_interval);
    return ret;
}
/// func [timeout_source_new_seconds](https://docs.gtk.org/glib/func.timeout_source_new_seconds.html)
pub fn timeoutSourceNewSeconds(_interval: u32) *glib.Source {
    const cFn = @extern(*const fn (u32) callconv(.c) *glib.Source, .{ .name = "g_timeout_source_new_seconds" });
    const ret = cFn(_interval);
    return ret;
}
/// Deprecated:
/// func [trash_stack_height](https://docs.gtk.org/glib/func.trash_stack_height.html)
pub const trashStackHeight = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn trashStackHeight(_stack_p: *glib.TrashStack) u32 {
        const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) u32, .{ .name = "g_trash_stack_height" });
        const ret = cFn(_stack_p);
        return ret;
    }
}.trashStackHeight;
/// Deprecated:
/// func [trash_stack_peek](https://docs.gtk.org/glib/func.trash_stack_peek.html)
pub const trashStackPeek = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn trashStackPeek(_stack_p: *glib.TrashStack) ?*anyopaque {
        const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) ?*anyopaque, .{ .name = "g_trash_stack_peek" });
        const ret = cFn(_stack_p);
        return ret;
    }
}.trashStackPeek;
/// Deprecated:
/// func [trash_stack_pop](https://docs.gtk.org/glib/func.trash_stack_pop.html)
pub const trashStackPop = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn trashStackPop(_stack_p: *glib.TrashStack) ?*anyopaque {
        const cFn = @extern(*const fn (*glib.TrashStack) callconv(.c) ?*anyopaque, .{ .name = "g_trash_stack_pop" });
        const ret = cFn(_stack_p);
        return ret;
    }
}.trashStackPop;
/// Deprecated:
/// func [trash_stack_push](https://docs.gtk.org/glib/func.trash_stack_push.html)
pub const trashStackPush = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn trashStackPush(_stack_p: *glib.TrashStack, _data_p: *anyopaque) void {
        const cFn = @extern(*const fn (*glib.TrashStack, *anyopaque) callconv(.c) void, .{ .name = "g_trash_stack_push" });
        const ret = cFn(_stack_p, @ptrCast(_data_p));
        return ret;
    }
}.trashStackPush;
/// func [try_malloc](https://docs.gtk.org/glib/func.try_malloc.html)
pub fn tryMalloc(_n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_malloc" });
    const ret = cFn(_n_bytes);
    return ret;
}
/// func [try_malloc0](https://docs.gtk.org/glib/func.try_malloc0.html)
pub fn tryMalloc0(_n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_malloc0" });
    const ret = cFn(_n_bytes);
    return ret;
}
/// func [try_malloc0_n](https://docs.gtk.org/glib/func.try_malloc0_n.html)
pub fn tryMalloc0N(_n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_malloc0_n" });
    const ret = cFn(_n_blocks, _n_block_bytes);
    return ret;
}
/// func [try_malloc_n](https://docs.gtk.org/glib/func.try_malloc_n.html)
pub fn tryMallocN(_n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_malloc_n" });
    const ret = cFn(_n_blocks, _n_block_bytes);
    return ret;
}
/// func [try_realloc](https://docs.gtk.org/glib/func.try_realloc.html)
pub fn tryRealloc(_mem: ?*anyopaque, _n_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_realloc" });
    const ret = cFn(@ptrCast(_mem), _n_bytes);
    return ret;
}
/// func [try_realloc_n](https://docs.gtk.org/glib/func.try_realloc_n.html)
pub fn tryReallocN(_mem: ?*anyopaque, _n_blocks: u64, _n_block_bytes: u64) ?*anyopaque {
    const cFn = @extern(*const fn (?*anyopaque, u64, u64) callconv(.c) ?*anyopaque, .{ .name = "g_try_realloc_n" });
    const ret = cFn(@ptrCast(_mem), _n_blocks, _n_block_bytes);
    return ret;
}
/// func [ucs4_to_utf16](https://docs.gtk.org/glib/func.ucs4_to_utf16.html)
pub fn ucs4ToUtf16(_strs: []core.Unichar, _error: *?*core.Error) error{GError}!struct {
    ret: *u16,
    items_read: i64,
    items_written: i64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*]core.Unichar, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) *u16, .{ .name = "g_ucs4_to_utf16" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [ucs4_to_utf8](https://docs.gtk.org/glib/func.ucs4_to_utf8.html)
pub fn ucs4ToUtf8(_strs: []core.Unichar, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    items_read: i64,
    items_written: i64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*]core.Unichar, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_ucs4_to_utf8" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [unichar_break_type](https://docs.gtk.org/glib/func.unichar_break_type.html)
pub fn unicharBreakType(_c: core.Unichar) glib.UnicodeBreakType {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) glib.UnicodeBreakType, .{ .name = "g_unichar_break_type" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_combining_class](https://docs.gtk.org/glib/func.unichar_combining_class.html)
pub fn unicharCombiningClass(_uc: core.Unichar) i32 {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) i32, .{ .name = "g_unichar_combining_class" });
    const ret = cFn(_uc);
    return ret;
}
/// func [unichar_compose](https://docs.gtk.org/glib/func.unichar_compose.html)
pub fn unicharCompose(_a: core.Unichar, _b: core.Unichar) struct {
    ret: bool,
    ch: core.Unichar,
} {
    var ch_out: core.Unichar = undefined;
    const _ch = &ch_out;
    const cFn = @extern(*const fn (core.Unichar, core.Unichar, *core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_compose" });
    const ret = cFn(_a, _b, _ch);
    return .{ .ret = ret, .ch = ch_out };
}
/// func [unichar_decompose](https://docs.gtk.org/glib/func.unichar_decompose.html)
pub fn unicharDecompose(_ch: core.Unichar) struct {
    ret: bool,
    a: core.Unichar,
    b: core.Unichar,
} {
    var a_out: core.Unichar = undefined;
    const _a = &a_out;
    var b_out: core.Unichar = undefined;
    const _b = &b_out;
    const cFn = @extern(*const fn (core.Unichar, *core.Unichar, *core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_decompose" });
    const ret = cFn(_ch, _a, _b);
    return .{ .ret = ret, .a = a_out, .b = b_out };
}
/// func [unichar_digit_value](https://docs.gtk.org/glib/func.unichar_digit_value.html)
pub fn unicharDigitValue(_c: core.Unichar) i32 {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) i32, .{ .name = "g_unichar_digit_value" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_fully_decompose](https://docs.gtk.org/glib/func.unichar_fully_decompose.html)
pub fn unicharFullyDecompose(_ch: core.Unichar, _compat: bool, _result: ?*core.Unichar, _result_len: u64) u64 {
    const cFn = @extern(*const fn (core.Unichar, bool, ?*core.Unichar, u64) callconv(.c) u64, .{ .name = "g_unichar_fully_decompose" });
    const ret = cFn(_ch, _compat, _result, _result_len);
    return ret;
}
/// func [unichar_get_mirror_char](https://docs.gtk.org/glib/func.unichar_get_mirror_char.html)
pub fn unicharGetMirrorChar(_ch: core.Unichar) struct {
    ret: bool,
    mirrored_ch: core.Unichar,
} {
    var mirrored_ch_out: core.Unichar = undefined;
    const _mirrored_ch = &mirrored_ch_out;
    const cFn = @extern(*const fn (core.Unichar, *core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_get_mirror_char" });
    const ret = cFn(_ch, _mirrored_ch);
    return .{ .ret = ret, .mirrored_ch = mirrored_ch_out };
}
/// func [unichar_get_script](https://docs.gtk.org/glib/func.unichar_get_script.html)
pub fn unicharGetScript(_ch: core.Unichar) glib.UnicodeScript {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) glib.UnicodeScript, .{ .name = "g_unichar_get_script" });
    const ret = cFn(_ch);
    return ret;
}
/// func [unichar_isalnum](https://docs.gtk.org/glib/func.unichar_isalnum.html)
pub fn unicharIsalnum(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isalnum" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isalpha](https://docs.gtk.org/glib/func.unichar_isalpha.html)
pub fn unicharIsalpha(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isalpha" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_iscntrl](https://docs.gtk.org/glib/func.unichar_iscntrl.html)
pub fn unicharIscntrl(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_iscntrl" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isdefined](https://docs.gtk.org/glib/func.unichar_isdefined.html)
pub fn unicharIsdefined(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isdefined" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isdigit](https://docs.gtk.org/glib/func.unichar_isdigit.html)
pub fn unicharIsdigit(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isdigit" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isgraph](https://docs.gtk.org/glib/func.unichar_isgraph.html)
pub fn unicharIsgraph(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isgraph" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_islower](https://docs.gtk.org/glib/func.unichar_islower.html)
pub fn unicharIslower(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_islower" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_ismark](https://docs.gtk.org/glib/func.unichar_ismark.html)
pub fn unicharIsmark(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_ismark" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isprint](https://docs.gtk.org/glib/func.unichar_isprint.html)
pub fn unicharIsprint(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isprint" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_ispunct](https://docs.gtk.org/glib/func.unichar_ispunct.html)
pub fn unicharIspunct(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_ispunct" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isspace](https://docs.gtk.org/glib/func.unichar_isspace.html)
pub fn unicharIsspace(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isspace" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_istitle](https://docs.gtk.org/glib/func.unichar_istitle.html)
pub fn unicharIstitle(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_istitle" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isupper](https://docs.gtk.org/glib/func.unichar_isupper.html)
pub fn unicharIsupper(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isupper" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_iswide](https://docs.gtk.org/glib/func.unichar_iswide.html)
pub fn unicharIswide(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_iswide" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_iswide_cjk](https://docs.gtk.org/glib/func.unichar_iswide_cjk.html)
pub fn unicharIswideCjk(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_iswide_cjk" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_isxdigit](https://docs.gtk.org/glib/func.unichar_isxdigit.html)
pub fn unicharIsxdigit(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_isxdigit" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_iszerowidth](https://docs.gtk.org/glib/func.unichar_iszerowidth.html)
pub fn unicharIszerowidth(_c: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_iszerowidth" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_to_utf8](https://docs.gtk.org/glib/func.unichar_to_utf8.html)
pub fn unicharToUtf8(_c: core.Unichar, _outbuf: [*]u8) i32 {
    const cFn = @extern(*const fn (core.Unichar, [*]u8) callconv(.c) i32, .{ .name = "g_unichar_to_utf8" });
    const ret = cFn(_c, _outbuf);
    return ret;
}
/// func [unichar_tolower](https://docs.gtk.org/glib/func.unichar_tolower.html)
pub fn unicharTolower(_c: core.Unichar) core.Unichar {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) core.Unichar, .{ .name = "g_unichar_tolower" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_totitle](https://docs.gtk.org/glib/func.unichar_totitle.html)
pub fn unicharTotitle(_c: core.Unichar) core.Unichar {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) core.Unichar, .{ .name = "g_unichar_totitle" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_toupper](https://docs.gtk.org/glib/func.unichar_toupper.html)
pub fn unicharToupper(_c: core.Unichar) core.Unichar {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) core.Unichar, .{ .name = "g_unichar_toupper" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_type](https://docs.gtk.org/glib/func.unichar_type.html)
pub fn unicharType(_c: core.Unichar) glib.UnicodeType {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) glib.UnicodeType, .{ .name = "g_unichar_type" });
    const ret = cFn(_c);
    return ret;
}
/// func [unichar_validate](https://docs.gtk.org/glib/func.unichar_validate.html)
pub fn unicharValidate(_ch: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "g_unichar_validate" });
    const ret = cFn(_ch);
    return ret;
}
/// func [unichar_xdigit_value](https://docs.gtk.org/glib/func.unichar_xdigit_value.html)
pub fn unicharXdigitValue(_c: core.Unichar) i32 {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) i32, .{ .name = "g_unichar_xdigit_value" });
    const ret = cFn(_c);
    return ret;
}
/// Deprecated:
/// func [unicode_canonical_decomposition](https://docs.gtk.org/glib/func.unicode_canonical_decomposition.html)
pub const unicodeCanonicalDecomposition = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn unicodeCanonicalDecomposition(_ch: core.Unichar, _result_len: *u64) *core.Unichar {
        const cFn = @extern(*const fn (core.Unichar, *u64) callconv(.c) *core.Unichar, .{ .name = "g_unicode_canonical_decomposition" });
        const ret = cFn(_ch, _result_len);
        return ret;
    }
}.unicodeCanonicalDecomposition;
/// func [unicode_canonical_ordering](https://docs.gtk.org/glib/func.unicode_canonical_ordering.html)
pub fn unicodeCanonicalOrdering(_strings: []core.Unichar) void {
    const _string = _strings.ptr;
    const _len: u64 = @intCast(_strings.len);
    const cFn = @extern(*const fn ([*]core.Unichar, u64) callconv(.c) void, .{ .name = "g_unicode_canonical_ordering" });
    const ret = cFn(_string, _len);
    return ret;
}
/// func [unicode_script_from_iso15924](https://docs.gtk.org/glib/func.unicode_script_from_iso15924.html)
pub fn unicodeScriptFromIso15924(_iso15924: u32) glib.UnicodeScript {
    const cFn = @extern(*const fn (u32) callconv(.c) glib.UnicodeScript, .{ .name = "g_unicode_script_from_iso15924" });
    const ret = cFn(_iso15924);
    return ret;
}
/// func [unicode_script_to_iso15924](https://docs.gtk.org/glib/func.unicode_script_to_iso15924.html)
pub fn unicodeScriptToIso15924(_script: glib.UnicodeScript) u32 {
    const cFn = @extern(*const fn (glib.UnicodeScript) callconv(.c) u32, .{ .name = "g_unicode_script_to_iso15924" });
    const ret = cFn(_script);
    return ret;
}
/// func [unix_error_quark](https://docs.gtk.org/glib/func.unix_error_quark.html)
pub fn unixErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_unix_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [unix_fd_add_full](https://docs.gtk.org/glib/func.unix_fd_add_full.html)
pub fn unixFdAddFull(_priority: i32, _fd: i32, _condition: glib.IOCondition, function: anytype, function_args: anytype) u32 {
    var closure_function = core.zig_closure(function, function_args, &.{ bool, i32, glib.IOCondition });
    const _function: glib.UnixFDSourceFunc = @ptrCast(closure_function.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_function.c_data());
    const _notify: glib.DestroyNotify = @ptrCast(closure_function.c_destroy());
    const cFn = @extern(*const fn (i32, i32, glib.IOCondition, glib.UnixFDSourceFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_unix_fd_add_full" });
    const ret = cFn(_priority, _fd, _condition, _function, @ptrCast(_user_data), _notify);
    return ret;
}
/// func [unix_fd_source_new](https://docs.gtk.org/glib/func.unix_fd_source_new.html)
pub fn unixFdSourceNew(_fd: i32, _condition: glib.IOCondition) *glib.Source {
    const cFn = @extern(*const fn (i32, glib.IOCondition) callconv(.c) *glib.Source, .{ .name = "g_unix_fd_source_new" });
    const ret = cFn(_fd, _condition);
    return ret;
}
/// func [unix_get_passwd_entry](https://docs.gtk.org/glib/func.unix_get_passwd_entry.html)
pub fn unixGetPasswdEntry(_user_name: [*:0]const u8, _error: *?*core.Error) error{GError}!?*anyopaque {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*anyopaque, .{ .name = "g_unix_get_passwd_entry" });
    const ret = cFn(_user_name, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [unix_open_pipe](https://docs.gtk.org/glib/func.unix_open_pipe.html)
pub fn unixOpenPipe(_fds: *[2]i32, _flags: i32, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (*[2]i32, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_open_pipe" });
    const ret = cFn(_fds, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [unix_set_fd_nonblocking](https://docs.gtk.org/glib/func.unix_set_fd_nonblocking.html)
pub fn unixSetFdNonblocking(_fd: i32, _nonblock: bool, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (i32, bool, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_set_fd_nonblocking" });
    const ret = cFn(_fd, _nonblock, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [unix_signal_add](https://docs.gtk.org/glib/func.unix_signal_add.html)
pub fn unixSignalAdd(_priority: i32, _signum: i32, handler: anytype, handler_args: anytype) u32 {
    var closure_handler = core.zig_closure(handler, handler_args, &.{bool});
    const _handler: glib.SourceFunc = @ptrCast(closure_handler.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_handler.c_data());
    const _notify: glib.DestroyNotify = @ptrCast(closure_handler.c_destroy());
    const cFn = @extern(*const fn (i32, i32, glib.SourceFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_unix_signal_add_full" });
    const ret = cFn(_priority, _signum, _handler, @ptrCast(_user_data), _notify);
    return ret;
}
/// func [unix_signal_source_new](https://docs.gtk.org/glib/func.unix_signal_source_new.html)
pub fn unixSignalSourceNew(_signum: i32) *glib.Source {
    const cFn = @extern(*const fn (i32) callconv(.c) *glib.Source, .{ .name = "g_unix_signal_source_new" });
    const ret = cFn(_signum);
    return ret;
}
/// func [unlink](https://docs.gtk.org/glib/func.unlink.html)
pub fn unlink(_filename: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) i32, .{ .name = "g_unlink" });
    const ret = cFn(_filename);
    return ret;
}
/// func [unsetenv](https://docs.gtk.org/glib/func.unsetenv.html)
pub fn unsetenv(_variable: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_unsetenv" });
    const ret = cFn(_variable);
    return ret;
}
/// func [uri_build](https://docs.gtk.org/glib/func.uri_build.html)
pub fn uriBuild(_flags: glib.UriFlags, _scheme: [*:0]const u8, _userinfo: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) *glib.Uri {
    const cFn = @extern(*const fn (glib.UriFlags, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *glib.Uri, .{ .name = "g_uri_build" });
    const ret = cFn(_flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment);
    return ret;
}
/// func [uri_build_with_user](https://docs.gtk.org/glib/func.uri_build_with_user.html)
pub fn uriBuildWithUser(_flags: glib.UriFlags, _scheme: [*:0]const u8, _user: ?[*:0]const u8, _password: ?[*:0]const u8, _auth_params: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) *glib.Uri {
    const cFn = @extern(*const fn (glib.UriFlags, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *glib.Uri, .{ .name = "g_uri_build_with_user" });
    const ret = cFn(_flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment);
    return ret;
}
/// func [uri_error_quark](https://docs.gtk.org/glib/func.uri_error_quark.html)
pub fn uriErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_uri_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [uri_escape_bytes](https://docs.gtk.org/glib/func.uri_escape_bytes.html)
pub fn uriEscapeBytes(_unescapeds: []u8, _reserved_chars_allowed: ?[*:0]const u8) [*:0]u8 {
    const _unescaped = _unescapeds.ptr;
    const _length: u64 = @intCast(_unescapeds.len);
    const cFn = @extern(*const fn ([*]u8, u64, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_escape_bytes" });
    const ret = cFn(_unescaped, _length, _reserved_chars_allowed);
    return ret;
}
/// func [uri_escape_string](https://docs.gtk.org/glib/func.uri_escape_string.html)
pub fn uriEscapeString(_unescaped: [*:0]const u8, _reserved_chars_allowed: ?[*:0]const u8, _allow_utf8: bool) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, bool) callconv(.c) [*:0]u8, .{ .name = "g_uri_escape_string" });
    const ret = cFn(_unescaped, _reserved_chars_allowed, _allow_utf8);
    return ret;
}
/// func [uri_is_valid](https://docs.gtk.org/glib/func.uri_is_valid.html)
pub fn uriIsValid(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) bool, .{ .name = "g_uri_is_valid" });
    const ret = cFn(_uri_string, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [uri_join](https://docs.gtk.org/glib/func.uri_join.html)
pub fn uriJoin(_flags: glib.UriFlags, _scheme: ?[*:0]const u8, _userinfo: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (glib.UriFlags, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_join" });
    const ret = cFn(_flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment);
    return ret;
}
/// func [uri_join_with_user](https://docs.gtk.org/glib/func.uri_join_with_user.html)
pub fn uriJoinWithUser(_flags: glib.UriFlags, _scheme: ?[*:0]const u8, _user: ?[*:0]const u8, _password: ?[*:0]const u8, _auth_params: ?[*:0]const u8, _host: ?[*:0]const u8, _port: i32, _path: [*:0]const u8, _query: ?[*:0]const u8, _fragment: ?[*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (glib.UriFlags, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, [*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_uri_join_with_user" });
    const ret = cFn(_flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment);
    return ret;
}
/// func [uri_list_extract_uris](https://docs.gtk.org/glib/func.uri_list_extract_uris.html)
pub fn uriListExtractUris(_uri_list: [*:0]const u8) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_uri_list_extract_uris" });
    const ret = cFn(_uri_list);
    return ret;
}
/// func [uri_parse](https://docs.gtk.org/glib/func.uri_parse.html)
pub fn uriParse(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!*glib.Uri {
    const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) *glib.Uri, .{ .name = "g_uri_parse" });
    const ret = cFn(_uri_string, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [uri_parse_params](https://docs.gtk.org/glib/func.uri_parse_params.html)
pub fn uriParseParams(_params: [*:0]const u8, _length: i64, _separators: [*:0]const u8, _flags: glib.UriParamsFlags, _error: *?*core.Error) error{GError}!*core.HashTable {
    const cFn = @extern(*const fn ([*:0]const u8, i64, [*:0]const u8, glib.UriParamsFlags, *?*core.Error) callconv(.c) *core.HashTable, .{ .name = "g_uri_parse_params" });
    const ret = cFn(_params, _length, _separators, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [uri_parse_scheme](https://docs.gtk.org/glib/func.uri_parse_scheme.html)
pub fn uriParseScheme(_uri: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_parse_scheme" });
    const ret = cFn(_uri);
    return ret;
}
/// func [uri_peek_scheme](https://docs.gtk.org/glib/func.uri_peek_scheme.html)
pub fn uriPeekScheme(_uri: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_peek_scheme" });
    const ret = cFn(_uri);
    return ret;
}
/// func [uri_resolve_relative](https://docs.gtk.org/glib/func.uri_resolve_relative.html)
pub fn uriResolveRelative(_base_uri_string: ?[*:0]const u8, _uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, glib.UriFlags, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_uri_resolve_relative" });
    const ret = cFn(_base_uri_string, _uri_ref, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [uri_split](https://docs.gtk.org/glib/func.uri_split.html)
pub fn uriSplit(_uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
    scheme: ?[*:0]u8,
    userinfo: ?[*:0]u8,
    host: ?[*:0]u8,
    port: i32,
    path: [*:0]u8,
    query: ?[*:0]u8,
    fragment: ?[*:0]u8,
} {
    var scheme_out: ?[*:0]u8 = undefined;
    const _scheme = &scheme_out;
    var userinfo_out: ?[*:0]u8 = undefined;
    const _userinfo = &userinfo_out;
    var host_out: ?[*:0]u8 = undefined;
    const _host = &host_out;
    var port_out: i32 = undefined;
    const _port = &port_out;
    var path_out: [*:0]u8 = undefined;
    const _path = &path_out;
    var query_out: ?[*:0]u8 = undefined;
    const _query = &query_out;
    var fragment_out: ?[*:0]u8 = undefined;
    const _fragment = &fragment_out;
    const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, ?*[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split" });
    const ret = cFn(_uri_ref, _flags, _scheme, _userinfo, _host, _port, _path, _query, _fragment, _error);
    _ = ret;
    if (_error.* != null) return error.GError;
    return .{ .scheme = scheme_out, .userinfo = userinfo_out, .host = host_out, .port = port_out, .path = path_out, .query = query_out, .fragment = fragment_out };
}
/// func [uri_split_network](https://docs.gtk.org/glib/func.uri_split_network.html)
pub fn uriSplitNetwork(_uri_string: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
    scheme: ?[*:0]u8,
    host: ?[*:0]u8,
    port: i32,
} {
    var scheme_out: ?[*:0]u8 = undefined;
    const _scheme = &scheme_out;
    var host_out: ?[*:0]u8 = undefined;
    const _host = &host_out;
    var port_out: i32 = undefined;
    const _port = &port_out;
    const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split_network" });
    const ret = cFn(_uri_string, _flags, _scheme, _host, _port, _error);
    _ = ret;
    if (_error.* != null) return error.GError;
    return .{ .scheme = scheme_out, .host = host_out, .port = port_out };
}
/// func [uri_split_with_user](https://docs.gtk.org/glib/func.uri_split_with_user.html)
pub fn uriSplitWithUser(_uri_ref: [*:0]const u8, _flags: glib.UriFlags, _error: *?*core.Error) error{GError}!struct {
    scheme: ?[*:0]u8,
    user: ?[*:0]u8,
    password: ?[*:0]u8,
    auth_params: ?[*:0]u8,
    host: ?[*:0]u8,
    port: i32,
    path: [*:0]u8,
    query: ?[*:0]u8,
    fragment: ?[*:0]u8,
} {
    var scheme_out: ?[*:0]u8 = undefined;
    const _scheme = &scheme_out;
    var user_out: ?[*:0]u8 = undefined;
    const _user = &user_out;
    var password_out: ?[*:0]u8 = undefined;
    const _password = &password_out;
    var auth_params_out: ?[*:0]u8 = undefined;
    const _auth_params = &auth_params_out;
    var host_out: ?[*:0]u8 = undefined;
    const _host = &host_out;
    var port_out: i32 = undefined;
    const _port = &port_out;
    var path_out: [*:0]u8 = undefined;
    const _path = &path_out;
    var query_out: ?[*:0]u8 = undefined;
    const _query = &query_out;
    var fragment_out: ?[*:0]u8 = undefined;
    const _fragment = &fragment_out;
    const cFn = @extern(*const fn ([*:0]const u8, glib.UriFlags, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, ?*i32, ?*[*:0]u8, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) void, .{ .name = "g_uri_split_with_user" });
    const ret = cFn(_uri_ref, _flags, _scheme, _user, _password, _auth_params, _host, _port, _path, _query, _fragment, _error);
    _ = ret;
    if (_error.* != null) return error.GError;
    return .{ .scheme = scheme_out, .user = user_out, .password = password_out, .auth_params = auth_params_out, .host = host_out, .port = port_out, .path = path_out, .query = query_out, .fragment = fragment_out };
}
/// func [uri_unescape_bytes](https://docs.gtk.org/glib/func.uri_unescape_bytes.html)
pub fn uriUnescapeBytes(_escaped_string: [*:0]const u8, _length: i64, _illegal_characters: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*glib.Bytes {
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?[*:0]const u8, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_uri_unescape_bytes" });
    const ret = cFn(_escaped_string, _length, _illegal_characters, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [uri_unescape_segment](https://docs.gtk.org/glib/func.uri_unescape_segment.html)
pub fn uriUnescapeSegment(_escaped_string: ?[*:0]const u8, _escaped_string_end: ?[*:0]const u8, _illegal_characters: ?[*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn (?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_unescape_segment" });
    const ret = cFn(_escaped_string, _escaped_string_end, _illegal_characters);
    return ret;
}
/// func [uri_unescape_string](https://docs.gtk.org/glib/func.uri_unescape_string.html)
pub fn uriUnescapeString(_escaped_string: [*:0]const u8, _illegal_characters: ?[*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_uri_unescape_string" });
    const ret = cFn(_escaped_string, _illegal_characters);
    return ret;
}
/// func [usleep](https://docs.gtk.org/glib/func.usleep.html)
pub fn usleep(_microseconds: u64) void {
    const cFn = @extern(*const fn (u64) callconv(.c) void, .{ .name = "g_usleep" });
    const ret = cFn(_microseconds);
    return ret;
}
/// func [utf16_to_ucs4](https://docs.gtk.org/glib/func.utf16_to_ucs4.html)
pub fn utf16ToUcs4(_strs: []u16, _error: *?*core.Error) error{GError}!struct {
    ret: *core.Unichar,
    items_read: i64,
    items_written: i64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*]u16, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) *core.Unichar, .{ .name = "g_utf16_to_ucs4" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [utf16_to_utf8](https://docs.gtk.org/glib/func.utf16_to_utf8.html)
pub fn utf16ToUtf8(_strs: []u16, _error: *?*core.Error) error{GError}!struct {
    ret: [*:0]u8,
    items_read: i64,
    items_written: i64,
} {
    const _str = _strs.ptr;
    const _len: i64 = @intCast(_strs.len);
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*]u16, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_utf16_to_utf8" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [utf8_casefold](https://docs.gtk.org/glib/func.utf8_casefold.html)
pub fn utf8Casefold(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_casefold" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_collate](https://docs.gtk.org/glib/func.utf8_collate.html)
pub fn utf8Collate(_str1: [*:0]const u8, _str2: [*:0]const u8) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) i32, .{ .name = "g_utf8_collate" });
    const ret = cFn(_str1, _str2);
    return ret;
}
/// func [utf8_collate_key](https://docs.gtk.org/glib/func.utf8_collate_key.html)
pub fn utf8CollateKey(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_collate_key" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_collate_key_for_filename](https://docs.gtk.org/glib/func.utf8_collate_key_for_filename.html)
pub fn utf8CollateKeyForFilename(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_collate_key_for_filename" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_find_next_char](https://docs.gtk.org/glib/func.utf8_find_next_char.html)
pub fn utf8FindNextChar(_p: [*:0]const u8, _end: ?[*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_utf8_find_next_char" });
    const ret = cFn(_p, _end);
    return ret;
}
/// func [utf8_find_prev_char](https://docs.gtk.org/glib/func.utf8_find_prev_char.html)
pub fn utf8FindPrevChar(_str: [*:0]const u8, _p: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_utf8_find_prev_char" });
    const ret = cFn(_str, _p);
    return ret;
}
/// func [utf8_get_char](https://docs.gtk.org/glib/func.utf8_get_char.html)
pub fn utf8GetChar(_p: [*:0]const u8) core.Unichar {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) core.Unichar, .{ .name = "g_utf8_get_char" });
    const ret = cFn(_p);
    return ret;
}
/// func [utf8_get_char_validated](https://docs.gtk.org/glib/func.utf8_get_char_validated.html)
pub fn utf8GetCharValidated(_p: [*:0]const u8, _max_len: i64) core.Unichar {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) core.Unichar, .{ .name = "g_utf8_get_char_validated" });
    const ret = cFn(_p, _max_len);
    return ret;
}
/// func [utf8_make_valid](https://docs.gtk.org/glib/func.utf8_make_valid.html)
pub fn utf8MakeValid(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_make_valid" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_normalize](https://docs.gtk.org/glib/func.utf8_normalize.html)
pub fn utf8Normalize(_str: [*:0]const u8, _len: i64, _mode: glib.NormalizeMode) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, glib.NormalizeMode) callconv(.c) ?[*:0]u8, .{ .name = "g_utf8_normalize" });
    const ret = cFn(_str, _len, _mode);
    return ret;
}
/// func [utf8_offset_to_pointer](https://docs.gtk.org/glib/func.utf8_offset_to_pointer.html)
pub fn utf8OffsetToPointer(_str: [*:0]const u8, _offset: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_offset_to_pointer" });
    const ret = cFn(_str, _offset);
    return ret;
}
/// func [utf8_pointer_to_offset](https://docs.gtk.org/glib/func.utf8_pointer_to_offset.html)
pub fn utf8PointerToOffset(_str: [*:0]const u8, _pos: [*:0]const u8) i64 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) i64, .{ .name = "g_utf8_pointer_to_offset" });
    const ret = cFn(_str, _pos);
    return ret;
}
/// func [utf8_prev_char](https://docs.gtk.org/glib/func.utf8_prev_char.html)
pub fn utf8PrevChar(_p: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_utf8_prev_char" });
    const ret = cFn(_p);
    return ret;
}
/// func [utf8_strchr](https://docs.gtk.org/glib/func.utf8_strchr.html)
pub fn utf8Strchr(_p: [*:0]const u8, _len: i64, _c: core.Unichar) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, core.Unichar) callconv(.c) ?[*:0]u8, .{ .name = "g_utf8_strchr" });
    const ret = cFn(_p, _len, _c);
    return ret;
}
/// func [utf8_strdown](https://docs.gtk.org/glib/func.utf8_strdown.html)
pub fn utf8Strdown(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_strdown" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_strlen](https://docs.gtk.org/glib/func.utf8_strlen.html)
pub fn utf8Strlen(_p: [*:0]const u8, _max: i64) i64 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) i64, .{ .name = "g_utf8_strlen" });
    const ret = cFn(_p, _max);
    return ret;
}
/// func [utf8_strncpy](https://docs.gtk.org/glib/func.utf8_strncpy.html)
pub fn utf8Strncpy(_dest: [*:0]const u8, _src: [*:0]const u8, _n: u64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_strncpy" });
    const ret = cFn(_dest, _src, _n);
    return ret;
}
/// func [utf8_strrchr](https://docs.gtk.org/glib/func.utf8_strrchr.html)
pub fn utf8Strrchr(_p: [*:0]const u8, _len: i64, _c: core.Unichar) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, core.Unichar) callconv(.c) ?[*:0]u8, .{ .name = "g_utf8_strrchr" });
    const ret = cFn(_p, _len, _c);
    return ret;
}
/// func [utf8_strreverse](https://docs.gtk.org/glib/func.utf8_strreverse.html)
pub fn utf8Strreverse(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_strreverse" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_strup](https://docs.gtk.org/glib/func.utf8_strup.html)
pub fn utf8Strup(_str: [*:0]const u8, _len: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_strup" });
    const ret = cFn(_str, _len);
    return ret;
}
/// func [utf8_substring](https://docs.gtk.org/glib/func.utf8_substring.html)
pub fn utf8Substring(_str: [*:0]const u8, _start_pos: i64, _end_pos: i64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i64, i64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_substring" });
    const ret = cFn(_str, _start_pos, _end_pos);
    return ret;
}
/// func [utf8_to_ucs4](https://docs.gtk.org/glib/func.utf8_to_ucs4.html)
pub fn utf8ToUcs4(_str: [*:0]const u8, _len: i64, _error: *?*core.Error) error{GError}!struct {
    ret: *core.Unichar,
    items_read: i64,
    items_written: i64,
} {
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) *core.Unichar, .{ .name = "g_utf8_to_ucs4" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [utf8_to_ucs4_fast](https://docs.gtk.org/glib/func.utf8_to_ucs4_fast.html)
pub fn utf8ToUcs4Fast(_str: [*:0]const u8, _len: i64) struct {
    ret: *core.Unichar,
    items_written: i64,
} {
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*i64) callconv(.c) *core.Unichar, .{ .name = "g_utf8_to_ucs4_fast" });
    const ret = cFn(_str, _len, _items_written);
    return .{ .ret = ret, .items_written = items_written_out };
}
/// func [utf8_to_utf16](https://docs.gtk.org/glib/func.utf8_to_utf16.html)
pub fn utf8ToUtf16(_str: [*:0]const u8, _len: i64, _error: *?*core.Error) error{GError}!struct {
    ret: *u16,
    items_read: i64,
    items_written: i64,
} {
    var items_read_out: i64 = undefined;
    const _items_read = &items_read_out;
    var items_written_out: i64 = undefined;
    const _items_written = &items_written_out;
    const cFn = @extern(*const fn ([*:0]const u8, i64, ?*i64, ?*i64, *?*core.Error) callconv(.c) *u16, .{ .name = "g_utf8_to_utf16" });
    const ret = cFn(_str, _len, _items_read, _items_written, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .items_read = items_read_out, .items_written = items_written_out };
}
/// func [utf8_truncate_middle](https://docs.gtk.org/glib/func.utf8_truncate_middle.html)
pub fn utf8TruncateMiddle(_string: [*:0]const u8, _truncate_length: u64) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, u64) callconv(.c) [*:0]u8, .{ .name = "g_utf8_truncate_middle" });
    const ret = cFn(_string, _truncate_length);
    return ret;
}
/// func [utf8_validate](https://docs.gtk.org/glib/func.utf8_validate.html)
pub fn utf8Validate(_strs: []u8) struct {
    ret: bool,
    end: [*:0]u8,
} {
    const _str = _strs.ptr;
    const _max_len: i64 = @intCast(_strs.len);
    var end_out: [*:0]u8 = undefined;
    const _end = &end_out;
    const cFn = @extern(*const fn ([*]u8, i64, ?*[*:0]u8) callconv(.c) bool, .{ .name = "g_utf8_validate" });
    const ret = cFn(_str, _max_len, _end);
    return .{ .ret = ret, .end = end_out };
}
/// func [utf8_validate_len](https://docs.gtk.org/glib/func.utf8_validate_len.html)
pub fn utf8ValidateLen(_strs: []u8) struct {
    ret: bool,
    end: [*:0]u8,
} {
    const _str = _strs.ptr;
    const _max_len: u64 = @intCast(_strs.len);
    var end_out: [*:0]u8 = undefined;
    const _end = &end_out;
    const cFn = @extern(*const fn ([*]u8, u64, ?*[*:0]u8) callconv(.c) bool, .{ .name = "g_utf8_validate_len" });
    const ret = cFn(_str, _max_len, _end);
    return .{ .ret = ret, .end = end_out };
}
/// func [utime](https://docs.gtk.org/glib/func.utime.html)
pub fn utime(_filename: [*:0]const u8, _utb: ?*anyopaque) i32 {
    const cFn = @extern(*const fn ([*:0]const u8, ?*anyopaque) callconv(.c) i32, .{ .name = "g_utime" });
    const ret = cFn(_filename, @ptrCast(_utb));
    return ret;
}
/// func [uuid_string_is_valid](https://docs.gtk.org/glib/func.uuid_string_is_valid.html)
pub fn uuidStringIsValid(_str: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_uuid_string_is_valid" });
    const ret = cFn(_str);
    return ret;
}
/// func [uuid_string_random](https://docs.gtk.org/glib/func.uuid_string_random.html)
pub fn uuidStringRandom() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_uuid_string_random" });
    const ret = cFn();
    return ret;
}
/// func [variant_get_gtype](https://docs.gtk.org/glib/func.variant_get_gtype.html)
pub fn variantGetGtype() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_get_gtype" });
    const ret = cFn();
    return ret;
}
/// func [variant_is_object_path](https://docs.gtk.org/glib/func.variant_is_object_path.html)
pub fn variantIsObjectPath(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_is_object_path" });
    const ret = cFn(_string);
    return ret;
}
/// func [variant_is_signature](https://docs.gtk.org/glib/func.variant_is_signature.html)
pub fn variantIsSignature(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_is_signature" });
    const ret = cFn(_string);
    return ret;
}
/// func [variant_parse](https://docs.gtk.org/glib/func.variant_parse.html)
pub fn variantParse(_type: ?*glib.VariantType, _text: [*:0]const u8, _limit: ?[*:0]const u8, _endptr: ?*[*:0]const u8, _error: *?*core.Error) error{GError}!*glib.Variant {
    const cFn = @extern(*const fn (?*glib.VariantType, [*:0]const u8, ?[*:0]const u8, ?*[*:0]const u8, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_variant_parse" });
    const ret = cFn(_type, _text, _limit, _endptr, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [variant_parse_error_print_context](https://docs.gtk.org/glib/func.variant_parse_error_print_context.html)
pub fn variantParseErrorPrintContext(_error: *core.Error, _source_str: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn (*core.Error, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_variant_parse_error_print_context" });
    const ret = cFn(_error, _source_str);
    return ret;
}
/// func [variant_parse_error_quark](https://docs.gtk.org/glib/func.variant_parse_error_quark.html)
pub fn variantParseErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_variant_parse_error_quark" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [variant_parser_get_error_quark](https://docs.gtk.org/glib/func.variant_parser_get_error_quark.html)
pub const variantParserGetErrorQuark = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn variantParserGetErrorQuark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_variant_parser_get_error_quark" });
        const ret = cFn();
        return ret;
    }
}.variantParserGetErrorQuark;
/// func [variant_type_checked_](https://docs.gtk.org/glib/func.variant_type_checked_.html)
pub fn variantTypeChecked(_type_string: [*:0]const u8) *glib.VariantType {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *glib.VariantType, .{ .name = "g_variant_type_checked_" });
    const ret = cFn(_type_string);
    return ret;
}
/// func [variant_type_string_get_depth_](https://docs.gtk.org/glib/func.variant_type_string_get_depth_.html)
pub fn variantTypeStringGetDepth(_type_string: [*:0]const u8) u64 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) u64, .{ .name = "g_variant_type_string_get_depth_" });
    const ret = cFn(_type_string);
    return ret;
}
/// func [variant_type_string_is_valid](https://docs.gtk.org/glib/func.variant_type_string_is_valid.html)
pub fn variantTypeStringIsValid(_type_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_variant_type_string_is_valid" });
    const ret = cFn(_type_string);
    return ret;
}
/// func [variant_type_string_scan](https://docs.gtk.org/glib/func.variant_type_string_scan.html)
pub fn variantTypeStringScan(_string: [*:0]const u8, _limit: ?[*:0]const u8) struct {
    ret: bool,
    endptr: [*:0]u8,
} {
    var endptr_out: [*:0]u8 = undefined;
    const _endptr = &endptr_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?*[*:0]u8) callconv(.c) bool, .{ .name = "g_variant_type_string_scan" });
    const ret = cFn(_string, _limit, _endptr);
    return .{ .ret = ret, .endptr = endptr_out };
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
