// This file is auto-generated by zig-gir-ffi
const gio = @This();
pub const gobject = @import("gobject");
pub const glib = @import("glib");
pub const gmodule = @import("gmodule");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// Iface [Action](https://docs.gtk.org/gio/iface.Action.html)
/// - property [enabled](https://docs.gtk.org/gio/property.Action.enabled.html): (r-) `bool`
/// - property [name](https://docs.gtk.org/gio/property.Action.name.html): (r-) `[*:0]const u8`
/// - property [parameter-type](https://docs.gtk.org/gio/property.Action.parameter-type.html): (r-) `glib.VariantType`
/// - property [state](https://docs.gtk.org/gio/property.Action.state.html): (r-) `glib.Variant`
/// - property [state-type](https://docs.gtk.org/gio/property.Action.state-type.html): (r-) `glib.VariantType`
pub const Action = opaque {
    /// type func [name_is_valid](https://docs.gtk.org/gio/type_func.Action.name_is_valid.html)
    pub fn nameIsValid(_action_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_action_name_is_valid" });
        const ret = cFn(_action_name);
        return ret;
    }
    /// type func [parse_detailed_name](https://docs.gtk.org/gio/type_func.Action.parse_detailed_name.html)
    pub fn parseDetailedName(_detailed_name: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        action_name: [*:0]u8,
        target_value: ?*glib.Variant,
    } {
        var action_name_out: [*:0]u8 = undefined;
        const _action_name = &action_name_out;
        var target_value_out: ?*glib.Variant = undefined;
        const _target_value = &target_value_out;
        const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8, ?*?*glib.Variant, *?*core.Error) callconv(.c) bool, .{ .name = "g_action_parse_detailed_name" });
        const ret = cFn(_detailed_name, _action_name, _target_value, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .action_name = action_name_out, .target_value = target_value_out };
    }
    /// type func [print_detailed_name](https://docs.gtk.org/gio/type_func.Action.print_detailed_name.html)
    pub fn printDetailedName(_action_name: [*:0]const u8, _target_value: ?*glib.Variant) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8, ?*glib.Variant) callconv(.c) [*:0]u8, .{ .name = "g_action_print_detailed_name" });
        const ret = cFn(_action_name, _target_value);
        return ret;
    }
    /// method [activate](https://docs.gtk.org/gio/method.Action.activate.html)
    pub fn activate(self: *Action, _parameter: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Action, ?*glib.Variant) callconv(.c) void, .{ .name = "g_action_activate" });
        const ret = cFn(self, _parameter);
        return ret;
    }
    /// method [change_state](https://docs.gtk.org/gio/method.Action.change_state.html)
    pub fn changeState(self: *Action, _value: *glib.Variant) void {
        const cFn = @extern(*const fn (*Action, *glib.Variant) callconv(.c) void, .{ .name = "g_action_change_state" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [get_enabled](https://docs.gtk.org/gio/method.Action.get_enabled.html)
    pub fn getEnabled(self: *Action) bool {
        const cFn = @extern(*const fn (*Action) callconv(.c) bool, .{ .name = "g_action_get_enabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.Action.get_name.html)
    pub fn getName(self: *Action) [*:0]u8 {
        const cFn = @extern(*const fn (*Action) callconv(.c) [*:0]u8, .{ .name = "g_action_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parameter_type](https://docs.gtk.org/gio/method.Action.get_parameter_type.html)
    pub fn getParameterType(self: *Action) ?*glib.VariantType {
        const cFn = @extern(*const fn (*Action) callconv(.c) ?*glib.VariantType, .{ .name = "g_action_get_parameter_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_state](https://docs.gtk.org/gio/method.Action.get_state.html)
    pub fn getState(self: *Action) ?*glib.Variant {
        const cFn = @extern(*const fn (*Action) callconv(.c) ?*glib.Variant, .{ .name = "g_action_get_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_state_hint](https://docs.gtk.org/gio/method.Action.get_state_hint.html)
    pub fn getStateHint(self: *Action) ?*glib.Variant {
        const cFn = @extern(*const fn (*Action) callconv(.c) ?*glib.Variant, .{ .name = "g_action_get_state_hint" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_state_type](https://docs.gtk.org/gio/method.Action.get_state_type.html)
    pub fn getStateType(self: *Action) ?*glib.VariantType {
        const cFn = @extern(*const fn (*Action) callconv(.c) ?*glib.VariantType, .{ .name = "g_action_get_state_type" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gio/vfunc.Action.activate.html)
    pub fn activateV(self: *Action, _parameter: ?*glib.Variant) void {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self, _parameter);
        return ret;
    }
    /// vfunc [change_state](https://docs.gtk.org/gio/vfunc.Action.change_state.html)
    pub fn changeStateV(self: *Action, _value: *glib.Variant) void {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.change_state.?;
        const ret = vFn(self, _value);
        return ret;
    }
    /// vfunc [get_enabled](https://docs.gtk.org/gio/vfunc.Action.get_enabled.html)
    pub fn getEnabledV(self: *Action) bool {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_enabled.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/gio/vfunc.Action.get_name.html)
    pub fn getNameV(self: *Action) [*:0]u8 {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_parameter_type](https://docs.gtk.org/gio/vfunc.Action.get_parameter_type.html)
    pub fn getParameterTypeV(self: *Action) ?*glib.VariantType {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_parameter_type.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_state](https://docs.gtk.org/gio/vfunc.Action.get_state.html)
    pub fn getStateV(self: *Action) ?*glib.Variant {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_state.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_state_hint](https://docs.gtk.org/gio/vfunc.Action.get_state_hint.html)
    pub fn getStateHintV(self: *Action) ?*glib.Variant {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_state_hint.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_state_type](https://docs.gtk.org/gio/vfunc.Action.get_state_type.html)
    pub fn getStateTypeV(self: *Action) ?*glib.VariantType {
        const class: *ActionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_state_type.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_action_get_type" });
        return cFn();
    }
};
/// Struct [ActionEntry](https://docs.gtk.org/gio/struct.ActionEntry.html)
pub const ActionEntry = extern struct {
    name: ?[*:0]const u8,
    activate: ?*const fn (_action: *gio.SimpleAction, _parameter: *glib.Variant, _user_data: ?*anyopaque) callconv(.c) void,
    parameter_type: ?[*:0]const u8,
    state: ?[*:0]const u8,
    change_state: ?*const fn (_action: *gio.SimpleAction, _value: *glib.Variant, _user_data: ?*anyopaque) callconv(.c) void,
    padding: [3]u64,
};
/// Iface [ActionGroup](https://docs.gtk.org/gio/iface.ActionGroup.html)
pub const ActionGroup = opaque {
    /// method [action_added](https://docs.gtk.org/gio/method.ActionGroup.action_added.html)
    pub fn actionAdded(self: *ActionGroup, _action_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) void, .{ .name = "g_action_group_action_added" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [action_enabled_changed](https://docs.gtk.org/gio/method.ActionGroup.action_enabled_changed.html)
    pub fn actionEnabledChanged(self: *ActionGroup, _action_name: [*:0]const u8, _enabled: bool) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_action_group_action_enabled_changed" });
        const ret = cFn(self, _action_name, _enabled);
        return ret;
    }
    /// method [action_removed](https://docs.gtk.org/gio/method.ActionGroup.action_removed.html)
    pub fn actionRemoved(self: *ActionGroup, _action_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) void, .{ .name = "g_action_group_action_removed" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [action_state_changed](https://docs.gtk.org/gio/method.ActionGroup.action_state_changed.html)
    pub fn actionStateChanged(self: *ActionGroup, _action_name: [*:0]const u8, _state: *glib.Variant) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8, *glib.Variant) callconv(.c) void, .{ .name = "g_action_group_action_state_changed" });
        const ret = cFn(self, _action_name, _state);
        return ret;
    }
    /// method [activate_action](https://docs.gtk.org/gio/method.ActionGroup.activate_action.html)
    pub fn activateAction(self: *ActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_action_group_activate_action" });
        const ret = cFn(self, _action_name, _parameter);
        return ret;
    }
    /// method [change_action_state](https://docs.gtk.org/gio/method.ActionGroup.change_action_state.html)
    pub fn changeActionState(self: *ActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant) void {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8, *glib.Variant) callconv(.c) void, .{ .name = "g_action_group_change_action_state" });
        const ret = cFn(self, _action_name, _value);
        return ret;
    }
    /// method [get_action_enabled](https://docs.gtk.org/gio/method.ActionGroup.get_action_enabled.html)
    pub fn getActionEnabled(self: *ActionGroup, _action_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) bool, .{ .name = "g_action_group_get_action_enabled" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [get_action_parameter_type](https://docs.gtk.org/gio/method.ActionGroup.get_action_parameter_type.html)
    pub fn getActionParameterType(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.VariantType {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) ?*glib.VariantType, .{ .name = "g_action_group_get_action_parameter_type" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [get_action_state](https://docs.gtk.org/gio/method.ActionGroup.get_action_state.html)
    pub fn getActionState(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.Variant {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) ?*glib.Variant, .{ .name = "g_action_group_get_action_state" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [get_action_state_hint](https://docs.gtk.org/gio/method.ActionGroup.get_action_state_hint.html)
    pub fn getActionStateHint(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.Variant {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) ?*glib.Variant, .{ .name = "g_action_group_get_action_state_hint" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [get_action_state_type](https://docs.gtk.org/gio/method.ActionGroup.get_action_state_type.html)
    pub fn getActionStateType(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.VariantType {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) ?*glib.VariantType, .{ .name = "g_action_group_get_action_state_type" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [has_action](https://docs.gtk.org/gio/method.ActionGroup.has_action.html)
    pub fn hasAction(self: *ActionGroup, _action_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8) callconv(.c) bool, .{ .name = "g_action_group_has_action" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [list_actions](https://docs.gtk.org/gio/method.ActionGroup.list_actions.html)
    pub fn listActions(self: *ActionGroup) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*ActionGroup) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_action_group_list_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [query_action](https://docs.gtk.org/gio/method.ActionGroup.query_action.html)
    pub fn queryAction(self: *ActionGroup, _action_name: [*:0]const u8) struct {
        ret: bool,
        enabled: bool,
        parameter_type: *glib.VariantType,
        state_type: *glib.VariantType,
        state_hint: *glib.Variant,
        state: *glib.Variant,
    } {
        var enabled_out: bool = undefined;
        const _enabled = &enabled_out;
        var parameter_type_out: *glib.VariantType = undefined;
        const _parameter_type = &parameter_type_out;
        var state_type_out: *glib.VariantType = undefined;
        const _state_type = &state_type_out;
        var state_hint_out: *glib.Variant = undefined;
        const _state_hint = &state_hint_out;
        var state_out: *glib.Variant = undefined;
        const _state = &state_out;
        const cFn = @extern(*const fn (*ActionGroup, [*:0]const u8, *bool, ?**glib.VariantType, ?**glib.VariantType, ?**glib.Variant, ?**glib.Variant) callconv(.c) bool, .{ .name = "g_action_group_query_action" });
        const ret = cFn(self, _action_name, _enabled, _parameter_type, _state_type, _state_hint, _state);
        return .{ .ret = ret, .enabled = enabled_out, .parameter_type = parameter_type_out, .state_type = state_type_out, .state_hint = state_hint_out, .state = state_out };
    }
    /// vfunc [action_added](https://docs.gtk.org/gio/vfunc.ActionGroup.action_added.html)
    pub fn actionAddedV(self: *ActionGroup, _action_name: [*:0]const u8) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.action_added.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [action_enabled_changed](https://docs.gtk.org/gio/vfunc.ActionGroup.action_enabled_changed.html)
    pub fn actionEnabledChangedV(self: *ActionGroup, _action_name: [*:0]const u8, _enabled: bool) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.action_enabled_changed.?;
        const ret = vFn(self, _action_name, _enabled);
        return ret;
    }
    /// vfunc [action_removed](https://docs.gtk.org/gio/vfunc.ActionGroup.action_removed.html)
    pub fn actionRemovedV(self: *ActionGroup, _action_name: [*:0]const u8) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.action_removed.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [action_state_changed](https://docs.gtk.org/gio/vfunc.ActionGroup.action_state_changed.html)
    pub fn actionStateChangedV(self: *ActionGroup, _action_name: [*:0]const u8, _state: *glib.Variant) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.action_state_changed.?;
        const ret = vFn(self, _action_name, _state);
        return ret;
    }
    /// vfunc [activate_action](https://docs.gtk.org/gio/vfunc.ActionGroup.activate_action.html)
    pub fn activateActionV(self: *ActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_action.?;
        const ret = vFn(self, _action_name, _parameter);
        return ret;
    }
    /// vfunc [change_action_state](https://docs.gtk.org/gio/vfunc.ActionGroup.change_action_state.html)
    pub fn changeActionStateV(self: *ActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant) void {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.change_action_state.?;
        const ret = vFn(self, _action_name, _value);
        return ret;
    }
    /// vfunc [get_action_enabled](https://docs.gtk.org/gio/vfunc.ActionGroup.get_action_enabled.html)
    pub fn getActionEnabledV(self: *ActionGroup, _action_name: [*:0]const u8) bool {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_enabled.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [get_action_parameter_type](https://docs.gtk.org/gio/vfunc.ActionGroup.get_action_parameter_type.html)
    pub fn getActionParameterTypeV(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.VariantType {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_parameter_type.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [get_action_state](https://docs.gtk.org/gio/vfunc.ActionGroup.get_action_state.html)
    pub fn getActionStateV(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.Variant {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_state.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [get_action_state_hint](https://docs.gtk.org/gio/vfunc.ActionGroup.get_action_state_hint.html)
    pub fn getActionStateHintV(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.Variant {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_state_hint.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [get_action_state_type](https://docs.gtk.org/gio/vfunc.ActionGroup.get_action_state_type.html)
    pub fn getActionStateTypeV(self: *ActionGroup, _action_name: [*:0]const u8) ?*glib.VariantType {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_state_type.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [has_action](https://docs.gtk.org/gio/vfunc.ActionGroup.has_action.html)
    pub fn hasActionV(self: *ActionGroup, _action_name: [*:0]const u8) bool {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.has_action.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [list_actions](https://docs.gtk.org/gio/vfunc.ActionGroup.list_actions.html)
    pub fn listActionsV(self: *ActionGroup) [*:null]?[*:0]const u8 {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.list_actions.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [query_action](https://docs.gtk.org/gio/vfunc.ActionGroup.query_action.html)
    pub fn queryActionV(self: *ActionGroup, _action_name: [*:0]const u8, _enabled: *bool, _parameter_type: ?**glib.VariantType, _state_type: ?**glib.VariantType, _state_hint: ?**glib.Variant, _state: ?**glib.Variant) bool {
        const class: *ActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_action.?;
        const ret = vFn(self, _action_name, _enabled, _parameter_type, _state_type, _state_hint, _state);
        return ret;
    }
    /// signal [action-added](https://docs.gtk.org/gio/signal.ActionGroup.action-added.html)
    pub fn connectActionAdded(self: *ActionGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("action-added", handler, args, flags, &.{ void, *ActionGroup, [*:0]const u8 });
    }
    /// signal [action-enabled-changed](https://docs.gtk.org/gio/signal.ActionGroup.action-enabled-changed.html)
    pub fn connectActionEnabledChanged(self: *ActionGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("action-enabled-changed", handler, args, flags, &.{ void, *ActionGroup, [*:0]const u8, bool });
    }
    /// signal [action-removed](https://docs.gtk.org/gio/signal.ActionGroup.action-removed.html)
    pub fn connectActionRemoved(self: *ActionGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("action-removed", handler, args, flags, &.{ void, *ActionGroup, [*:0]const u8 });
    }
    /// signal [action-state-changed](https://docs.gtk.org/gio/signal.ActionGroup.action-state-changed.html)
    pub fn connectActionStateChanged(self: *ActionGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("action-state-changed", handler, args, flags, &.{ void, *ActionGroup, [*:0]const u8, *glib.Variant });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_action_group_get_type" });
        return cFn();
    }
};
pub const ActionGroupInterface = extern struct {
    g_iface: gobject.TypeInterface,
    has_action: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) bool,
    list_actions: ?*const fn (_action_group: *gio.ActionGroup) callconv(.c) [*:null]?[*:0]const u8,
    get_action_enabled: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) bool,
    get_action_parameter_type: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) ?*glib.VariantType,
    get_action_state_type: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) ?*glib.VariantType,
    get_action_state_hint: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) ?*glib.Variant,
    get_action_state: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) ?*glib.Variant,
    change_action_state: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant) callconv(.c) void,
    activate_action: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant) callconv(.c) void,
    action_added: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) void,
    action_removed: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8) callconv(.c) void,
    action_enabled_changed: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8, _enabled: bool) callconv(.c) void,
    action_state_changed: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8, _state: *glib.Variant) callconv(.c) void,
    query_action: ?*const fn (_action_group: *gio.ActionGroup, _action_name: [*:0]const u8, _enabled: *bool, _parameter_type: ?**glib.VariantType, _state_type: ?**glib.VariantType, _state_hint: ?**glib.Variant, _state: ?**glib.Variant) callconv(.c) bool,
};
pub const ActionInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_name: ?*const fn (_action: *gio.Action) callconv(.c) [*:0]u8,
    get_parameter_type: ?*const fn (_action: *gio.Action) callconv(.c) ?*glib.VariantType,
    get_state_type: ?*const fn (_action: *gio.Action) callconv(.c) ?*glib.VariantType,
    get_state_hint: ?*const fn (_action: *gio.Action) callconv(.c) ?*glib.Variant,
    get_enabled: ?*const fn (_action: *gio.Action) callconv(.c) bool,
    get_state: ?*const fn (_action: *gio.Action) callconv(.c) ?*glib.Variant,
    change_state: ?*const fn (_action: *gio.Action, _value: *glib.Variant) callconv(.c) void,
    activate: ?*const fn (_action: *gio.Action, _parameter: ?*glib.Variant) callconv(.c) void,
};
/// Iface [ActionMap](https://docs.gtk.org/gio/iface.ActionMap.html)
pub const ActionMap = opaque {
    /// method [add_action](https://docs.gtk.org/gio/method.ActionMap.add_action.html)
    pub fn addAction(self: *ActionMap, _action: *gio.Action) void {
        const cFn = @extern(*const fn (*ActionMap, *gio.Action) callconv(.c) void, .{ .name = "g_action_map_add_action" });
        const ret = cFn(self, _action);
        return ret;
    }
    /// method [add_action_entries](https://docs.gtk.org/gio/method.ActionMap.add_action_entries.html)
    pub fn addActionEntries(self: *ActionMap, _entriess: []gio.ActionEntry, _user_data: ?*anyopaque) void {
        const _entries = _entriess.ptr;
        const _n_entries: i32 = @intCast(_entriess.len);
        const cFn = @extern(*const fn (*ActionMap, [*]gio.ActionEntry, i32, ?*anyopaque) callconv(.c) void, .{ .name = "g_action_map_add_action_entries" });
        const ret = cFn(self, _entries, _n_entries, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_action](https://docs.gtk.org/gio/method.ActionMap.lookup_action.html)
    pub fn lookupAction(self: *ActionMap, _action_name: [*:0]const u8) ?*gio.Action {
        const cFn = @extern(*const fn (*ActionMap, [*:0]const u8) callconv(.c) ?*gio.Action, .{ .name = "g_action_map_lookup_action" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [remove_action](https://docs.gtk.org/gio/method.ActionMap.remove_action.html)
    pub fn removeAction(self: *ActionMap, _action_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ActionMap, [*:0]const u8) callconv(.c) void, .{ .name = "g_action_map_remove_action" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [remove_action_entries](https://docs.gtk.org/gio/method.ActionMap.remove_action_entries.html)
    pub fn removeActionEntries(self: *ActionMap, _entriess: []gio.ActionEntry) void {
        const _entries = _entriess.ptr;
        const _n_entries: i32 = @intCast(_entriess.len);
        const cFn = @extern(*const fn (*ActionMap, [*]gio.ActionEntry, i32) callconv(.c) void, .{ .name = "g_action_map_remove_action_entries" });
        const ret = cFn(self, _entries, _n_entries);
        return ret;
    }
    /// vfunc [add_action](https://docs.gtk.org/gio/vfunc.ActionMap.add_action.html)
    pub fn addActionV(self: *ActionMap, _action: *gio.Action) void {
        const class: *ActionMapInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_action.?;
        const ret = vFn(self, _action);
        return ret;
    }
    /// vfunc [lookup_action](https://docs.gtk.org/gio/vfunc.ActionMap.lookup_action.html)
    pub fn lookupActionV(self: *ActionMap, _action_name: [*:0]const u8) ?*gio.Action {
        const class: *ActionMapInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_action.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [remove_action](https://docs.gtk.org/gio/vfunc.ActionMap.remove_action.html)
    pub fn removeActionV(self: *ActionMap, _action_name: [*:0]const u8) void {
        const class: *ActionMapInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove_action.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_action_map_get_type" });
        return cFn();
    }
};
pub const ActionMapInterface = extern struct {
    g_iface: gobject.TypeInterface,
    lookup_action: ?*const fn (_action_map: *gio.ActionMap, _action_name: [*:0]const u8) callconv(.c) ?*gio.Action,
    add_action: ?*const fn (_action_map: *gio.ActionMap, _action: *gio.Action) callconv(.c) void,
    remove_action: ?*const fn (_action_map: *gio.ActionMap, _action_name: [*:0]const u8) callconv(.c) void,
};
/// Iface [AppInfo](https://docs.gtk.org/gio/iface.AppInfo.html)
pub const AppInfo = opaque {
    /// type func [create_from_commandline](https://docs.gtk.org/gio/type_func.AppInfo.create_from_commandline.html)
    pub fn createFromCommandline(_commandline: [*:0]const u8, _application_name: ?[*:0]const u8, _flags: gio.AppInfoCreateFlags, _error: *?*core.Error) error{GError}!*gio.AppInfo {
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, gio.AppInfoCreateFlags, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_create_from_commandline" });
        const ret = cFn(_commandline, _application_name, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [get_all](https://docs.gtk.org/gio/type_func.AppInfo.get_all.html)
    pub fn getAll() ?*core.List {
        const cFn = @extern(*const fn () callconv(.c) ?*core.List, .{ .name = "g_app_info_get_all" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_all_for_type](https://docs.gtk.org/gio/type_func.AppInfo.get_all_for_type.html)
    pub fn getAllForType(_content_type: [*:0]const u8) ?*core.List {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_all_for_type" });
        const ret = cFn(_content_type);
        return ret;
    }
    /// type func [get_default_for_type](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_type.html)
    pub fn getDefaultForType(_content_type: [*:0]const u8, _must_support_uris: bool) ?*gio.AppInfo {
        const cFn = @extern(*const fn ([*:0]const u8, bool) callconv(.c) ?*gio.AppInfo, .{ .name = "g_app_info_get_default_for_type" });
        const ret = cFn(_content_type, _must_support_uris);
        return ret;
    }
    /// type func [get_default_for_type_async](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_type_async.html)
    pub fn getDefaultForTypeAsync(_content_type: [*:0]const u8, _must_support_uris: bool, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn ([*:0]const u8, bool, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_get_default_for_type_async" });
        const ret = cFn(_content_type, _must_support_uris, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [get_default_for_type_finish](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_type_finish.html)
    pub fn getDefaultForTypeFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.AppInfo {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_get_default_for_type_finish" });
        const ret = cFn(_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [get_default_for_uri_scheme](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_uri_scheme.html)
    pub fn getDefaultForUriScheme(_uri_scheme: [*:0]const u8) ?*gio.AppInfo {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gio.AppInfo, .{ .name = "g_app_info_get_default_for_uri_scheme" });
        const ret = cFn(_uri_scheme);
        return ret;
    }
    /// type func [get_default_for_uri_scheme_async](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_uri_scheme_async.html)
    pub fn getDefaultForUriSchemeAsync(_uri_scheme: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn ([*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_get_default_for_uri_scheme_async" });
        const ret = cFn(_uri_scheme, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [get_default_for_uri_scheme_finish](https://docs.gtk.org/gio/type_func.AppInfo.get_default_for_uri_scheme_finish.html)
    pub fn getDefaultForUriSchemeFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.AppInfo {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_get_default_for_uri_scheme_finish" });
        const ret = cFn(_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [get_fallback_for_type](https://docs.gtk.org/gio/type_func.AppInfo.get_fallback_for_type.html)
    pub fn getFallbackForType(_content_type: [*:0]const u8) ?*core.List {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_fallback_for_type" });
        const ret = cFn(_content_type);
        return ret;
    }
    /// type func [get_recommended_for_type](https://docs.gtk.org/gio/type_func.AppInfo.get_recommended_for_type.html)
    pub fn getRecommendedForType(_content_type: [*:0]const u8) ?*core.List {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_recommended_for_type" });
        const ret = cFn(_content_type);
        return ret;
    }
    /// type func [launch_default_for_uri](https://docs.gtk.org/gio/type_func.AppInfo.launch_default_for_uri.html)
    pub fn launchDefaultForUri(_uri: [*:0]const u8, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn ([*:0]const u8, ?*gio.AppLaunchContext, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_default_for_uri" });
        const ret = cFn(_uri, _context, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [launch_default_for_uri_async](https://docs.gtk.org/gio/type_func.AppInfo.launch_default_for_uri_async.html)
    pub fn launchDefaultForUriAsync(_uri: [*:0]const u8, _context: ?*gio.AppLaunchContext, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn ([*:0]const u8, ?*gio.AppLaunchContext, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_launch_default_for_uri_async" });
        const ret = cFn(_uri, _context, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [launch_default_for_uri_finish](https://docs.gtk.org/gio/type_func.AppInfo.launch_default_for_uri_finish.html)
    pub fn launchDefaultForUriFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_default_for_uri_finish" });
        const ret = cFn(_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [reset_type_associations](https://docs.gtk.org/gio/type_func.AppInfo.reset_type_associations.html)
    pub fn resetTypeAssociations(_content_type: [*:0]const u8) void {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_app_info_reset_type_associations" });
        const ret = cFn(_content_type);
        return ret;
    }
    /// method [add_supports_type](https://docs.gtk.org/gio/method.AppInfo.add_supports_type.html)
    pub fn addSupportsType(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_add_supports_type" });
        const ret = cFn(self, _content_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [can_delete](https://docs.gtk.org/gio/method.AppInfo.can_delete.html)
    pub fn canDelete(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_can_delete" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_remove_supports_type](https://docs.gtk.org/gio/method.AppInfo.can_remove_supports_type.html)
    pub fn canRemoveSupportsType(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_can_remove_supports_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [delete](https://docs.gtk.org/gio/method.AppInfo.delete.html)
    pub fn delete(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_delete" });
        const ret = cFn(self);
        return ret;
    }
    /// method [dup](https://docs.gtk.org/gio/method.AppInfo.dup.html)
    pub fn dup(self: *AppInfo) *gio.AppInfo {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_dup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gio/method.AppInfo.equal.html)
    pub fn equal(self: *AppInfo, _appinfo2: *gio.AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo, *gio.AppInfo) callconv(.c) bool, .{ .name = "g_app_info_equal" });
        const ret = cFn(self, _appinfo2);
        return ret;
    }
    /// method [get_commandline](https://docs.gtk.org/gio/method.AppInfo.get_commandline.html)
    pub fn getCommandline(self: *AppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_app_info_get_commandline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gio/method.AppInfo.get_description.html)
    pub fn getDescription(self: *AppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_app_info_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display_name](https://docs.gtk.org/gio/method.AppInfo.get_display_name.html)
    pub fn getDisplayName(self: *AppInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) [*:0]u8, .{ .name = "g_app_info_get_display_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_executable](https://docs.gtk.org/gio/method.AppInfo.get_executable.html)
    pub fn getExecutable(self: *AppInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) [*:0]u8, .{ .name = "g_app_info_get_executable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.AppInfo.get_icon.html)
    pub fn getIcon(self: *AppInfo) ?*gio.Icon {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) ?*gio.Icon, .{ .name = "g_app_info_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_id](https://docs.gtk.org/gio/method.AppInfo.get_id.html)
    pub fn getId(self: *AppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_app_info_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.AppInfo.get_name.html)
    pub fn getName(self: *AppInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) [*:0]u8, .{ .name = "g_app_info_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_supported_types](https://docs.gtk.org/gio/method.AppInfo.get_supported_types.html)
    pub fn getSupportedTypes(self: *AppInfo) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_app_info_get_supported_types" });
        const ret = cFn(self);
        return ret;
    }
    /// method [launch](https://docs.gtk.org/gio/method.AppInfo.launch.html)
    pub fn launch(self: *AppInfo, _files: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, ?*core.List, ?*gio.AppLaunchContext, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch" });
        const ret = cFn(self, _files, _context, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [launch_uris](https://docs.gtk.org/gio/method.AppInfo.launch_uris.html)
    pub fn launchUris(self: *AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, ?*core.List, ?*gio.AppLaunchContext, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_uris" });
        const ret = cFn(self, _uris, _context, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [launch_uris_async](https://docs.gtk.org/gio/method.AppInfo.launch_uris_async.html)
    pub fn launchUrisAsync(self: *AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*AppInfo, ?*core.List, ?*gio.AppLaunchContext, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_launch_uris_async" });
        const ret = cFn(self, _uris, _context, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [launch_uris_finish](https://docs.gtk.org/gio/method.AppInfo.launch_uris_finish.html)
    pub fn launchUrisFinish(self: *AppInfo, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_uris_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_supports_type](https://docs.gtk.org/gio/method.AppInfo.remove_supports_type.html)
    pub fn removeSupportsType(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_remove_supports_type" });
        const ret = cFn(self, _content_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_as_default_for_extension](https://docs.gtk.org/gio/method.AppInfo.set_as_default_for_extension.html)
    pub fn setAsDefaultForExtension(self: *AppInfo, _extension: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_set_as_default_for_extension" });
        const ret = cFn(self, _extension, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_as_default_for_type](https://docs.gtk.org/gio/method.AppInfo.set_as_default_for_type.html)
    pub fn setAsDefaultForType(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_set_as_default_for_type" });
        const ret = cFn(self, _content_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_as_last_used_for_type](https://docs.gtk.org/gio/method.AppInfo.set_as_last_used_for_type.html)
    pub fn setAsLastUsedForType(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AppInfo, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_set_as_last_used_for_type" });
        const ret = cFn(self, _content_type, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [should_show](https://docs.gtk.org/gio/method.AppInfo.should_show.html)
    pub fn shouldShow(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_should_show" });
        const ret = cFn(self);
        return ret;
    }
    /// method [supports_files](https://docs.gtk.org/gio/method.AppInfo.supports_files.html)
    pub fn supportsFiles(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_supports_files" });
        const ret = cFn(self);
        return ret;
    }
    /// method [supports_uris](https://docs.gtk.org/gio/method.AppInfo.supports_uris.html)
    pub fn supportsUris(self: *AppInfo) bool {
        const cFn = @extern(*const fn (*AppInfo) callconv(.c) bool, .{ .name = "g_app_info_supports_uris" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [add_supports_type](https://docs.gtk.org/gio/vfunc.AppInfo.add_supports_type.html)
    pub fn addSupportsTypeV(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_supports_type.?;
        const ret = vFn(self, _content_type, _error);
        return ret;
    }
    /// vfunc [can_delete](https://docs.gtk.org/gio/vfunc.AppInfo.can_delete.html)
    pub fn canDeleteV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_delete.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_remove_supports_type](https://docs.gtk.org/gio/vfunc.AppInfo.can_remove_supports_type.html)
    pub fn canRemoveSupportsTypeV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_remove_supports_type.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [do_delete](https://docs.gtk.org/gio/vfunc.AppInfo.do_delete.html)
    pub fn doDeleteV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.do_delete.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [dup](https://docs.gtk.org/gio/vfunc.AppInfo.dup.html)
    pub fn dupV(self: *AppInfo) *gio.AppInfo {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dup.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [equal](https://docs.gtk.org/gio/vfunc.AppInfo.equal.html)
    pub fn equalV(self: *AppInfo, _appinfo2: *gio.AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.equal.?;
        const ret = vFn(self, _appinfo2);
        return ret;
    }
    /// vfunc [get_commandline](https://docs.gtk.org/gio/vfunc.AppInfo.get_commandline.html)
    pub fn getCommandlineV(self: *AppInfo) ?[*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_commandline.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_description](https://docs.gtk.org/gio/vfunc.AppInfo.get_description.html)
    pub fn getDescriptionV(self: *AppInfo) ?[*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_description.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_display_name](https://docs.gtk.org/gio/vfunc.AppInfo.get_display_name.html)
    pub fn getDisplayNameV(self: *AppInfo) [*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_display_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_executable](https://docs.gtk.org/gio/vfunc.AppInfo.get_executable.html)
    pub fn getExecutableV(self: *AppInfo) [*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_executable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_icon](https://docs.gtk.org/gio/vfunc.AppInfo.get_icon.html)
    pub fn getIconV(self: *AppInfo) ?*gio.Icon {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_id](https://docs.gtk.org/gio/vfunc.AppInfo.get_id.html)
    pub fn getIdV(self: *AppInfo) ?[*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_id.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/gio/vfunc.AppInfo.get_name.html)
    pub fn getNameV(self: *AppInfo) [*:0]u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_supported_types](https://docs.gtk.org/gio/vfunc.AppInfo.get_supported_types.html)
    pub fn getSupportedTypesV(self: *AppInfo) [*:null]?[*:0]const u8 {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_supported_types.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [launch](https://docs.gtk.org/gio/vfunc.AppInfo.launch.html)
    pub fn launchV(self: *AppInfo, _files: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch.?;
        const ret = vFn(self, _files, _context, _error);
        return ret;
    }
    /// vfunc [launch_uris](https://docs.gtk.org/gio/vfunc.AppInfo.launch_uris.html)
    pub fn launchUrisV(self: *AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch_uris.?;
        const ret = vFn(self, _uris, _context, _error);
        return ret;
    }
    /// vfunc [launch_uris_async](https://docs.gtk.org/gio/vfunc.AppInfo.launch_uris_async.html)
    pub fn launchUrisAsyncV(self: *AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch_uris_async.?;
        const ret = vFn(self, _uris, _context, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [launch_uris_finish](https://docs.gtk.org/gio/vfunc.AppInfo.launch_uris_finish.html)
    pub fn launchUrisFinishV(self: *AppInfo, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch_uris_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [remove_supports_type](https://docs.gtk.org/gio/vfunc.AppInfo.remove_supports_type.html)
    pub fn removeSupportsTypeV(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove_supports_type.?;
        const ret = vFn(self, _content_type, _error);
        return ret;
    }
    /// vfunc [set_as_default_for_extension](https://docs.gtk.org/gio/vfunc.AppInfo.set_as_default_for_extension.html)
    pub fn setAsDefaultForExtensionV(self: *AppInfo, _extension: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_as_default_for_extension.?;
        const ret = vFn(self, _extension, _error);
        return ret;
    }
    /// vfunc [set_as_default_for_type](https://docs.gtk.org/gio/vfunc.AppInfo.set_as_default_for_type.html)
    pub fn setAsDefaultForTypeV(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_as_default_for_type.?;
        const ret = vFn(self, _content_type, _error);
        return ret;
    }
    /// vfunc [set_as_last_used_for_type](https://docs.gtk.org/gio/vfunc.AppInfo.set_as_last_used_for_type.html)
    pub fn setAsLastUsedForTypeV(self: *AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_as_last_used_for_type.?;
        const ret = vFn(self, _content_type, _error);
        return ret;
    }
    /// vfunc [should_show](https://docs.gtk.org/gio/vfunc.AppInfo.should_show.html)
    pub fn shouldShowV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.should_show.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [supports_files](https://docs.gtk.org/gio/vfunc.AppInfo.supports_files.html)
    pub fn supportsFilesV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.supports_files.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [supports_uris](https://docs.gtk.org/gio/vfunc.AppInfo.supports_uris.html)
    pub fn supportsUrisV(self: *AppInfo) bool {
        const class: *AppInfoIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.supports_uris.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_app_info_get_type" });
        return cFn();
    }
};
/// Flags [AppInfoCreateFlags](https://docs.gtk.org/gio/flags.AppInfoCreateFlags.html)
pub const AppInfoCreateFlags = packed struct(u32) {
    needs_terminal: bool = false,
    supports_uris: bool = false,
    supports_startup_notification: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_app_info_create_flags_get_type" });
        return cFn();
    }
};
/// Struct [AppInfoIface](https://docs.gtk.org/gio/struct.AppInfoIface.html)
pub const AppInfoIface = extern struct {
    g_iface: gobject.TypeInterface,
    dup: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) *gio.AppInfo,
    equal: ?*const fn (_appinfo1: *gio.AppInfo, _appinfo2: *gio.AppInfo) callconv(.c) bool,
    get_id: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) ?[*:0]u8,
    get_name: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) [*:0]u8,
    get_description: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) ?[*:0]u8,
    get_executable: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) [*:0]u8,
    get_icon: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) ?*gio.Icon,
    launch: ?*const fn (_appinfo: *gio.AppInfo, _files: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) callconv(.c) bool,
    supports_uris: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    supports_files: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    launch_uris: ?*const fn (_appinfo: *gio.AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) callconv(.c) bool,
    should_show: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    set_as_default_for_type: ?*const fn (_appinfo: *gio.AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    set_as_default_for_extension: ?*const fn (_appinfo: *gio.AppInfo, _extension: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    add_supports_type: ?*const fn (_appinfo: *gio.AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    can_remove_supports_type: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    remove_supports_type: ?*const fn (_appinfo: *gio.AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    can_delete: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    do_delete: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) bool,
    get_commandline: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) ?[*:0]u8,
    get_display_name: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) [*:0]u8,
    set_as_last_used_for_type: ?*const fn (_appinfo: *gio.AppInfo, _content_type: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    get_supported_types: ?*const fn (_appinfo: *gio.AppInfo) callconv(.c) [*:null]?[*:0]const u8,
    launch_uris_async: ?*const fn (_appinfo: *gio.AppInfo, _uris: ?*core.List, _context: ?*gio.AppLaunchContext, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    launch_uris_finish: ?*const fn (_appinfo: *gio.AppInfo, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
};
/// Class [AppInfoMonitor](https://docs.gtk.org/gio/class.AppInfoMonitor.html)
pub const AppInfoMonitor = opaque {
    pub const Parent = gobject.Object;
    /// type func [get](https://docs.gtk.org/gio/type_func.AppInfoMonitor.get.html)
    pub fn get() *gio.AppInfoMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.AppInfoMonitor, .{ .name = "g_app_info_monitor_get" });
        const ret = cFn();
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.AppInfoMonitor.changed.html)
    pub fn connectChanged(self: *AppInfoMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *AppInfoMonitor });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_app_info_monitor_get_type" });
        return cFn();
    }
};
/// Class [AppLaunchContext](https://docs.gtk.org/gio/class.AppLaunchContext.html)
pub const AppLaunchContext = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.AppLaunchContextPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.AppLaunchContextClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.AppLaunchContext.new.html)
    pub fn new() *AppLaunchContext {
        const cFn = @extern(*const fn () callconv(.c) *AppLaunchContext, .{ .name = "g_app_launch_context_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gio/method.AppLaunchContext.get_display.html)
    pub fn getDisplay(self: *AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AppLaunchContext, *gio.AppInfo, *core.List) callconv(.c) ?[*:0]u8, .{ .name = "g_app_launch_context_get_display" });
        const ret = cFn(self, _info, _files);
        return ret;
    }
    /// method [get_environment](https://docs.gtk.org/gio/method.AppLaunchContext.get_environment.html)
    pub fn getEnvironment(self: *AppLaunchContext) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AppLaunchContext) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_app_launch_context_get_environment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_startup_notify_id](https://docs.gtk.org/gio/method.AppLaunchContext.get_startup_notify_id.html)
    pub fn getStartupNotifyId(self: *AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AppLaunchContext, *gio.AppInfo, *core.List) callconv(.c) ?[*:0]u8, .{ .name = "g_app_launch_context_get_startup_notify_id" });
        const ret = cFn(self, _info, _files);
        return ret;
    }
    /// method [launch_failed](https://docs.gtk.org/gio/method.AppLaunchContext.launch_failed.html)
    pub fn launchFailed(self: *AppLaunchContext, _startup_notify_id: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AppLaunchContext, [*:0]const u8) callconv(.c) void, .{ .name = "g_app_launch_context_launch_failed" });
        const ret = cFn(self, _startup_notify_id);
        return ret;
    }
    /// method [setenv](https://docs.gtk.org/gio/method.AppLaunchContext.setenv.html)
    pub fn setenv(self: *AppLaunchContext, _variable: [*:0]const u8, _value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AppLaunchContext, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_app_launch_context_setenv" });
        const ret = cFn(self, _variable, _value);
        return ret;
    }
    /// method [unsetenv](https://docs.gtk.org/gio/method.AppLaunchContext.unsetenv.html)
    pub fn unsetenv(self: *AppLaunchContext, _variable: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AppLaunchContext, [*:0]const u8) callconv(.c) void, .{ .name = "g_app_launch_context_unsetenv" });
        const ret = cFn(self, _variable);
        return ret;
    }
    /// vfunc [get_display](https://docs.gtk.org/gio/vfunc.AppLaunchContext.get_display.html)
    pub fn getDisplayV(self: *AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) ?[*:0]u8 {
        const class: *AppLaunchContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_display.?;
        const ret = vFn(self, _info, _files);
        return ret;
    }
    /// vfunc [get_startup_notify_id](https://docs.gtk.org/gio/vfunc.AppLaunchContext.get_startup_notify_id.html)
    pub fn getStartupNotifyIdV(self: *AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) ?[*:0]u8 {
        const class: *AppLaunchContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_startup_notify_id.?;
        const ret = vFn(self, _info, _files);
        return ret;
    }
    /// vfunc [launch_failed](https://docs.gtk.org/gio/vfunc.AppLaunchContext.launch_failed.html)
    pub fn launchFailedV(self: *AppLaunchContext, _startup_notify_id: [*:0]const u8) void {
        const class: *AppLaunchContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch_failed.?;
        const ret = vFn(self, _startup_notify_id);
        return ret;
    }
    /// vfunc [launch_started](https://docs.gtk.org/gio/vfunc.AppLaunchContext.launch_started.html)
    pub fn launchStartedV(self: *AppLaunchContext, _info: *gio.AppInfo, _platform_data: *glib.Variant) void {
        const class: *AppLaunchContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launch_started.?;
        const ret = vFn(self, _info, _platform_data);
        return ret;
    }
    /// vfunc [launched](https://docs.gtk.org/gio/vfunc.AppLaunchContext.launched.html)
    pub fn launchedV(self: *AppLaunchContext, _info: *gio.AppInfo, _platform_data: *glib.Variant) void {
        const class: *AppLaunchContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.launched.?;
        const ret = vFn(self, _info, _platform_data);
        return ret;
    }
    /// signal [launch-failed](https://docs.gtk.org/gio/signal.AppLaunchContext.launch-failed.html)
    pub fn connectLaunchFailed(self: *AppLaunchContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("launch-failed", handler, args, flags, &.{ void, *AppLaunchContext, [*:0]const u8 });
    }
    /// signal [launch-started](https://docs.gtk.org/gio/signal.AppLaunchContext.launch-started.html)
    pub fn connectLaunchStarted(self: *AppLaunchContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("launch-started", handler, args, flags, &.{ void, *AppLaunchContext, *gio.AppInfo, *glib.Variant });
    }
    /// signal [launched](https://docs.gtk.org/gio/signal.AppLaunchContext.launched.html)
    pub fn connectLaunched(self: *AppLaunchContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("launched", handler, args, flags, &.{ void, *AppLaunchContext, *gio.AppInfo, *glib.Variant });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_app_launch_context_get_type" });
        return cFn();
    }
};
pub const AppLaunchContextClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_display: ?*const fn (_context: *gio.AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) callconv(.c) ?[*:0]u8,
    get_startup_notify_id: ?*const fn (_context: *gio.AppLaunchContext, _info: *gio.AppInfo, _files: *core.List) callconv(.c) ?[*:0]u8,
    launch_failed: ?*const fn (_context: *gio.AppLaunchContext, _startup_notify_id: [*:0]const u8) callconv(.c) void,
    launched: ?*const fn (_context: *gio.AppLaunchContext, _info: *gio.AppInfo, _platform_data: *glib.Variant) callconv(.c) void,
    launch_started: ?*const fn (_context: *gio.AppLaunchContext, _info: *gio.AppInfo, _platform_data: *glib.Variant) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
};
pub const AppLaunchContextPrivate = opaque {};
/// Class [Application](https://docs.gtk.org/gio/class.Application.html)
/// - property [action-group](https://docs.gtk.org/gio/property.Application.action-group.html): (-w) `gio.ActionGroup`
/// - property [application-id](https://docs.gtk.org/gio/property.Application.application-id.html): (rw) `[*:0]const u8`
/// - property [flags](https://docs.gtk.org/gio/property.Application.flags.html): (rw) `gio.ApplicationFlags`
/// - property [inactivity-timeout](https://docs.gtk.org/gio/property.Application.inactivity-timeout.html): (rw) `u32`
/// - property [is-busy](https://docs.gtk.org/gio/property.Application.is-busy.html): (r-) `bool`
/// - property [is-registered](https://docs.gtk.org/gio/property.Application.is-registered.html): (r-) `bool`
/// - property [is-remote](https://docs.gtk.org/gio/property.Application.is-remote.html): (r-) `bool`
/// - property [resource-base-path](https://docs.gtk.org/gio/property.Application.resource-base-path.html): (rw) `[*:0]const u8`
/// - property [version](https://docs.gtk.org/gio/property.Application.version.html): (rw) `[*:0]const u8`
pub const Application = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.ApplicationPrivate,
    pub const Interfaces = [_]type{ gio.ActionGroup, gio.ActionMap };
    pub const Parent = gobject.Object;
    pub const Class = gio.ApplicationClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Application.new.html)
    pub fn new(_application_id: ?[*:0]const u8, _flags: gio.ApplicationFlags) *Application {
        const cFn = @extern(*const fn (?[*:0]const u8, gio.ApplicationFlags) callconv(.c) *Application, .{ .name = "g_application_new" });
        const ret = cFn(_application_id, _flags);
        return ret;
    }
    /// type func [get_default](https://docs.gtk.org/gio/type_func.Application.get_default.html)
    pub fn getDefault() ?*gio.Application {
        const cFn = @extern(*const fn () callconv(.c) ?*gio.Application, .{ .name = "g_application_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [id_is_valid](https://docs.gtk.org/gio/type_func.Application.id_is_valid.html)
    pub fn idIsValid(_application_id: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_application_id_is_valid" });
        const ret = cFn(_application_id);
        return ret;
    }
    /// method [activate](https://docs.gtk.org/gio/method.Application.activate.html)
    pub fn activate(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [add_main_option](https://docs.gtk.org/gio/method.Application.add_main_option.html)
    pub fn addMainOption(self: *Application, _long_name: [*:0]const u8, _short_name: i8, _flags: glib.OptionFlags, _arg: glib.OptionArg, _description: [*:0]const u8, _arg_description: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, [*:0]const u8, i8, glib.OptionFlags, glib.OptionArg, [*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_add_main_option" });
        const ret = cFn(self, _long_name, _short_name, _flags, _arg, _description, _arg_description);
        return ret;
    }
    /// method [add_main_option_entries](https://docs.gtk.org/gio/method.Application.add_main_option_entries.html)
    pub fn addMainOptionEntries(self: *Application, _entries: [*]glib.OptionEntry) void {
        const cFn = @extern(*const fn (*Application, [*]glib.OptionEntry) callconv(.c) void, .{ .name = "g_application_add_main_option_entries" });
        const ret = cFn(self, _entries);
        return ret;
    }
    /// method [add_option_group](https://docs.gtk.org/gio/method.Application.add_option_group.html)
    pub fn addOptionGroup(self: *Application, _group: *glib.OptionGroup) void {
        const cFn = @extern(*const fn (*Application, *glib.OptionGroup) callconv(.c) void, .{ .name = "g_application_add_option_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// method [bind_busy_property](https://docs.gtk.org/gio/method.Application.bind_busy_property.html)
    pub fn bindBusyProperty(self: *Application, _object: *gobject.Object, _property: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, *gobject.Object, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_bind_busy_property" });
        const ret = cFn(self, _object, _property);
        return ret;
    }
    /// method [get_application_id](https://docs.gtk.org/gio/method.Application.get_application_id.html)
    pub fn getApplicationId(self: *Application) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?[*:0]u8, .{ .name = "g_application_get_application_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dbus_connection](https://docs.gtk.org/gio/method.Application.get_dbus_connection.html)
    pub fn getDbusConnection(self: *Application) ?*gio.DBusConnection {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?*gio.DBusConnection, .{ .name = "g_application_get_dbus_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dbus_object_path](https://docs.gtk.org/gio/method.Application.get_dbus_object_path.html)
    pub fn getDbusObjectPath(self: *Application) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?[*:0]u8, .{ .name = "g_application_get_dbus_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.Application.get_flags.html)
    pub fn getFlags(self: *Application) gio.ApplicationFlags {
        const cFn = @extern(*const fn (*Application) callconv(.c) gio.ApplicationFlags, .{ .name = "g_application_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_inactivity_timeout](https://docs.gtk.org/gio/method.Application.get_inactivity_timeout.html)
    pub fn getInactivityTimeout(self: *Application) u32 {
        const cFn = @extern(*const fn (*Application) callconv(.c) u32, .{ .name = "g_application_get_inactivity_timeout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_busy](https://docs.gtk.org/gio/method.Application.get_is_busy.html)
    pub fn getIsBusy(self: *Application) bool {
        const cFn = @extern(*const fn (*Application) callconv(.c) bool, .{ .name = "g_application_get_is_busy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_registered](https://docs.gtk.org/gio/method.Application.get_is_registered.html)
    pub fn getIsRegistered(self: *Application) bool {
        const cFn = @extern(*const fn (*Application) callconv(.c) bool, .{ .name = "g_application_get_is_registered" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_remote](https://docs.gtk.org/gio/method.Application.get_is_remote.html)
    pub fn getIsRemote(self: *Application) bool {
        const cFn = @extern(*const fn (*Application) callconv(.c) bool, .{ .name = "g_application_get_is_remote" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resource_base_path](https://docs.gtk.org/gio/method.Application.get_resource_base_path.html)
    pub fn getResourceBasePath(self: *Application) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?[*:0]u8, .{ .name = "g_application_get_resource_base_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_version](https://docs.gtk.org/gio/method.Application.get_version.html)
    pub fn getVersion(self: *Application) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?[*:0]u8, .{ .name = "g_application_get_version" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hold](https://docs.gtk.org/gio/method.Application.hold.html)
    pub fn hold(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_hold" });
        const ret = cFn(self);
        return ret;
    }
    /// method [mark_busy](https://docs.gtk.org/gio/method.Application.mark_busy.html)
    pub fn markBusy(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_mark_busy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [open](https://docs.gtk.org/gio/method.Application.open.html)
    pub fn open(self: *Application, _filess: []*gio.File, _hint: [*:0]const u8) void {
        const _files = _filess.ptr;
        const _n_files: i32 = @intCast(_filess.len);
        const cFn = @extern(*const fn (*Application, [*]*gio.File, i32, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_open" });
        const ret = cFn(self, _files, _n_files, _hint);
        return ret;
    }
    /// method [quit](https://docs.gtk.org/gio/method.Application.quit.html)
    pub fn quit(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_quit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [register](https://docs.gtk.org/gio/method.Application.register.html)
    pub fn register(self: *Application, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Application, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_application_register" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [release](https://docs.gtk.org/gio/method.Application.release.html)
    pub fn release(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_release" });
        const ret = cFn(self);
        return ret;
    }
    /// method [run](https://docs.gtk.org/gio/method.Application.run.html)
    pub fn run(self: *Application, _argvs: [][*:0]const u8) i32 {
        const _argc: i32 = @intCast(_argvs.len);
        const _argv = _argvs.ptr;
        const cFn = @extern(*const fn (*Application, i32, ?[*][*:0]const u8) callconv(.c) i32, .{ .name = "g_application_run" });
        const ret = cFn(self, _argc, _argv);
        return ret;
    }
    /// method [send_notification](https://docs.gtk.org/gio/method.Application.send_notification.html)
    pub fn sendNotification(self: *Application, _id: ?[*:0]const u8, _notification: *gio.Notification) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8, *gio.Notification) callconv(.c) void, .{ .name = "g_application_send_notification" });
        const ret = cFn(self, _id, _notification);
        return ret;
    }
    /// Deprecated:
    /// method [set_action_group](https://docs.gtk.org/gio/method.Application.set_action_group.html)
    pub const setActionGroup = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActionGroup(self: *Application, _action_group: ?*gio.ActionGroup) void {
            const cFn = @extern(*const fn (*Application, ?*gio.ActionGroup) callconv(.c) void, .{ .name = "g_application_set_action_group" });
            const ret = cFn(self, _action_group);
            return ret;
        }
    }.setActionGroup;
    /// method [set_application_id](https://docs.gtk.org/gio/method.Application.set_application_id.html)
    pub fn setApplicationId(self: *Application, _application_id: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_application_id" });
        const ret = cFn(self, _application_id);
        return ret;
    }
    /// method [set_default](https://docs.gtk.org/gio/method.Application.set_default.html)
    pub fn setDefault(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_set_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.Application.set_flags.html)
    pub fn setFlags(self: *Application, _flags: gio.ApplicationFlags) void {
        const cFn = @extern(*const fn (*Application, gio.ApplicationFlags) callconv(.c) void, .{ .name = "g_application_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_inactivity_timeout](https://docs.gtk.org/gio/method.Application.set_inactivity_timeout.html)
    pub fn setInactivityTimeout(self: *Application, _inactivity_timeout: u32) void {
        const cFn = @extern(*const fn (*Application, u32) callconv(.c) void, .{ .name = "g_application_set_inactivity_timeout" });
        const ret = cFn(self, _inactivity_timeout);
        return ret;
    }
    /// method [set_option_context_description](https://docs.gtk.org/gio/method.Application.set_option_context_description.html)
    pub fn setOptionContextDescription(self: *Application, _description: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_option_context_description" });
        const ret = cFn(self, _description);
        return ret;
    }
    /// method [set_option_context_parameter_string](https://docs.gtk.org/gio/method.Application.set_option_context_parameter_string.html)
    pub fn setOptionContextParameterString(self: *Application, _parameter_string: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_option_context_parameter_string" });
        const ret = cFn(self, _parameter_string);
        return ret;
    }
    /// method [set_option_context_summary](https://docs.gtk.org/gio/method.Application.set_option_context_summary.html)
    pub fn setOptionContextSummary(self: *Application, _summary: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_option_context_summary" });
        const ret = cFn(self, _summary);
        return ret;
    }
    /// method [set_resource_base_path](https://docs.gtk.org/gio/method.Application.set_resource_base_path.html)
    pub fn setResourceBasePath(self: *Application, _resource_path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_resource_base_path" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    /// method [set_version](https://docs.gtk.org/gio/method.Application.set_version.html)
    pub fn setVersion(self: *Application, _version: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_set_version" });
        const ret = cFn(self, _version);
        return ret;
    }
    /// method [unbind_busy_property](https://docs.gtk.org/gio/method.Application.unbind_busy_property.html)
    pub fn unbindBusyProperty(self: *Application, _object: *gobject.Object, _property: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, *gobject.Object, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_unbind_busy_property" });
        const ret = cFn(self, _object, _property);
        return ret;
    }
    /// method [unmark_busy](https://docs.gtk.org/gio/method.Application.unmark_busy.html)
    pub fn unmarkBusy(self: *Application) void {
        const cFn = @extern(*const fn (*Application) callconv(.c) void, .{ .name = "g_application_unmark_busy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [withdraw_notification](https://docs.gtk.org/gio/method.Application.withdraw_notification.html)
    pub fn withdrawNotification(self: *Application, _id: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_withdraw_notification" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gio/vfunc.Application.activate.html)
    pub fn activateV(self: *Application) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [add_platform_data](https://docs.gtk.org/gio/vfunc.Application.add_platform_data.html)
    pub fn addPlatformDataV(self: *Application, _builder: *glib.VariantBuilder) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_platform_data.?;
        const ret = vFn(self, _builder);
        return ret;
    }
    /// vfunc [after_emit](https://docs.gtk.org/gio/vfunc.Application.after_emit.html)
    pub fn afterEmitV(self: *Application, _platform_data: *glib.Variant) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.after_emit.?;
        const ret = vFn(self, _platform_data);
        return ret;
    }
    /// vfunc [before_emit](https://docs.gtk.org/gio/vfunc.Application.before_emit.html)
    pub fn beforeEmitV(self: *Application, _platform_data: *glib.Variant) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.before_emit.?;
        const ret = vFn(self, _platform_data);
        return ret;
    }
    /// vfunc [command_line](https://docs.gtk.org/gio/vfunc.Application.command_line.html)
    pub fn commandLineV(self: *Application, _command_line: *gio.ApplicationCommandLine) i32 {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.command_line.?;
        const ret = vFn(self, _command_line);
        return ret;
    }
    /// vfunc [dbus_register](https://docs.gtk.org/gio/vfunc.Application.dbus_register.html)
    pub fn dbusRegisterV(self: *Application, _connection: *gio.DBusConnection, _object_path: [*:0]const u8, _error: *?*core.Error) bool {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dbus_register.?;
        const ret = vFn(self, _connection, _object_path, _error);
        return ret;
    }
    /// vfunc [dbus_unregister](https://docs.gtk.org/gio/vfunc.Application.dbus_unregister.html)
    pub fn dbusUnregisterV(self: *Application, _connection: *gio.DBusConnection, _object_path: [*:0]const u8) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dbus_unregister.?;
        const ret = vFn(self, _connection, _object_path);
        return ret;
    }
    /// vfunc [handle_local_options](https://docs.gtk.org/gio/vfunc.Application.handle_local_options.html)
    pub fn handleLocalOptionsV(self: *Application, _options: *glib.VariantDict) i32 {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handle_local_options.?;
        const ret = vFn(self, _options);
        return ret;
    }
    /// vfunc [local_command_line](https://docs.gtk.org/gio/vfunc.Application.local_command_line.html)
    pub fn localCommandLineV(self: *Application, _arguments: *[*:null]?[*:0]const u8, _exit_status: *i32) bool {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.local_command_line.?;
        const ret = vFn(self, _arguments, _exit_status);
        return ret;
    }
    /// vfunc [name_lost](https://docs.gtk.org/gio/vfunc.Application.name_lost.html)
    pub fn nameLostV(self: *Application) bool {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.name_lost.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [open](https://docs.gtk.org/gio/vfunc.Application.open.html)
    pub fn openV(self: *Application, _files: [*]*gio.File, _n_files: i32, _hint: [*:0]const u8) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.open.?;
        const ret = vFn(self, _files, _n_files, _hint);
        return ret;
    }
    /// vfunc [quit_mainloop](https://docs.gtk.org/gio/vfunc.Application.quit_mainloop.html)
    pub fn quitMainloopV(self: *Application) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.quit_mainloop.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [run_mainloop](https://docs.gtk.org/gio/vfunc.Application.run_mainloop.html)
    pub fn runMainloopV(self: *Application) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.run_mainloop.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [shutdown](https://docs.gtk.org/gio/vfunc.Application.shutdown.html)
    pub fn shutdownV(self: *Application) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.shutdown.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [startup](https://docs.gtk.org/gio/vfunc.Application.startup.html)
    pub fn startupV(self: *Application) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.startup.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gio/signal.Application.activate.html)
    pub fn connectActivate(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Application });
    }
    /// signal [command-line](https://docs.gtk.org/gio/signal.Application.command-line.html)
    pub fn connectCommandLine(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("command-line", handler, args, flags, &.{ i32, *Application, *gio.ApplicationCommandLine });
    }
    /// signal [handle-local-options](https://docs.gtk.org/gio/signal.Application.handle-local-options.html)
    pub fn connectHandleLocalOptions(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("handle-local-options", handler, args, flags, &.{ i32, *Application, *glib.VariantDict });
    }
    /// signal [name-lost](https://docs.gtk.org/gio/signal.Application.name-lost.html)
    pub fn connectNameLost(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("name-lost", handler, args, flags, &.{ bool, *Application });
    }
    /// signal [open](https://docs.gtk.org/gio/signal.Application.open.html)
    pub fn connectOpen(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("open", handler, args, flags, &.{ void, *Application, [*]gio.File, i32, [*:0]const u8 });
    }
    /// signal [shutdown](https://docs.gtk.org/gio/signal.Application.shutdown.html)
    pub fn connectShutdown(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("shutdown", handler, args, flags, &.{ void, *Application });
    }
    /// signal [startup](https://docs.gtk.org/gio/signal.Application.startup.html)
    pub fn connectStartup(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("startup", handler, args, flags, &.{ void, *Application });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_application_get_type" });
        return cFn();
    }
};
pub const ApplicationClass = extern struct {
    parent_class: gobject.ObjectClass,
    startup: ?*const fn (_application: *gio.Application) callconv(.c) void,
    activate: ?*const fn (_application: *gio.Application) callconv(.c) void,
    open: ?*const fn (_application: *gio.Application, _files: [*]*gio.File, _n_files: i32, _hint: [*:0]const u8) callconv(.c) void,
    command_line: ?*const fn (_application: *gio.Application, _command_line: *gio.ApplicationCommandLine) callconv(.c) i32,
    local_command_line: ?*const fn (_application: *gio.Application, _arguments: *[*:null]?[*:0]const u8, _exit_status: *i32) callconv(.c) bool,
    before_emit: ?*const fn (_application: *gio.Application, _platform_data: *glib.Variant) callconv(.c) void,
    after_emit: ?*const fn (_application: *gio.Application, _platform_data: *glib.Variant) callconv(.c) void,
    add_platform_data: ?*const fn (_application: *gio.Application, _builder: *glib.VariantBuilder) callconv(.c) void,
    quit_mainloop: ?*const fn (_application: *gio.Application) callconv(.c) void,
    run_mainloop: ?*const fn (_application: *gio.Application) callconv(.c) void,
    shutdown: ?*const fn (_application: *gio.Application) callconv(.c) void,
    dbus_register: ?*const fn (_application: *gio.Application, _connection: *gio.DBusConnection, _object_path: [*:0]const u8, _error: *?*core.Error) callconv(.c) bool,
    dbus_unregister: ?*const fn (_application: *gio.Application, _connection: *gio.DBusConnection, _object_path: [*:0]const u8) callconv(.c) void,
    handle_local_options: ?*const fn (_application: *gio.Application, _options: *glib.VariantDict) callconv(.c) i32,
    name_lost: ?*const fn (_application: *gio.Application) callconv(.c) bool,
    padding: [7]?*anyopaque,
};
/// Class [ApplicationCommandLine](https://docs.gtk.org/gio/class.ApplicationCommandLine.html)
/// - property [arguments](https://docs.gtk.org/gio/property.ApplicationCommandLine.arguments.html): (--) `glib.Variant`
/// - property [is-remote](https://docs.gtk.org/gio/property.ApplicationCommandLine.is-remote.html): (r-) `bool`
/// - property [options](https://docs.gtk.org/gio/property.ApplicationCommandLine.options.html): (--) `glib.Variant`
/// - property [platform-data](https://docs.gtk.org/gio/property.ApplicationCommandLine.platform-data.html): (--) `glib.Variant`
pub const ApplicationCommandLine = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.ApplicationCommandLinePrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.ApplicationCommandLineClass;
    /// method [create_file_for_arg](https://docs.gtk.org/gio/method.ApplicationCommandLine.create_file_for_arg.html)
    pub fn createFileForArg(self: *ApplicationCommandLine, _arg: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*ApplicationCommandLine, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_application_command_line_create_file_for_arg" });
        const ret = cFn(self, _arg);
        return ret;
    }
    /// method [done](https://docs.gtk.org/gio/method.ApplicationCommandLine.done.html)
    pub fn done(self: *ApplicationCommandLine) void {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) void, .{ .name = "g_application_command_line_done" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_arguments](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_arguments.html)
    pub fn getArguments(self: *ApplicationCommandLine) struct {
        ret: [*][*:0]const u8,
        argc: i32,
    } {
        var argc_out: i32 = undefined;
        const _argc = &argc_out;
        const cFn = @extern(*const fn (*ApplicationCommandLine, ?*i32) callconv(.c) [*][*:0]const u8, .{ .name = "g_application_command_line_get_arguments" });
        const ret = cFn(self, _argc);
        return .{ .ret = ret, .argc = argc_out };
    }
    /// method [get_cwd](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_cwd.html)
    pub fn getCwd(self: *ApplicationCommandLine) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) ?[*:0]u8, .{ .name = "g_application_command_line_get_cwd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_environ](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_environ.html)
    pub fn getEnviron(self: *ApplicationCommandLine) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_application_command_line_get_environ" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_exit_status](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_exit_status.html)
    pub fn getExitStatus(self: *ApplicationCommandLine) i32 {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) i32, .{ .name = "g_application_command_line_get_exit_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_remote](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_is_remote.html)
    pub fn getIsRemote(self: *ApplicationCommandLine) bool {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) bool, .{ .name = "g_application_command_line_get_is_remote" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_options_dict](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_options_dict.html)
    pub fn getOptionsDict(self: *ApplicationCommandLine) *glib.VariantDict {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) *glib.VariantDict, .{ .name = "g_application_command_line_get_options_dict" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_platform_data](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_platform_data.html)
    pub fn getPlatformData(self: *ApplicationCommandLine) ?*glib.Variant {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) ?*glib.Variant, .{ .name = "g_application_command_line_get_platform_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stdin](https://docs.gtk.org/gio/method.ApplicationCommandLine.get_stdin.html)
    pub fn getStdin(self: *ApplicationCommandLine) ?*gio.InputStream {
        const cFn = @extern(*const fn (*ApplicationCommandLine) callconv(.c) ?*gio.InputStream, .{ .name = "g_application_command_line_get_stdin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [getenv](https://docs.gtk.org/gio/method.ApplicationCommandLine.getenv.html)
    pub fn getenv(self: *ApplicationCommandLine, _name: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ApplicationCommandLine, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_application_command_line_getenv" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [print_literal](https://docs.gtk.org/gio/method.ApplicationCommandLine.print_literal.html)
    pub fn printLiteral(self: *ApplicationCommandLine, _message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ApplicationCommandLine, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_command_line_print_literal" });
        const ret = cFn(self, _message);
        return ret;
    }
    /// method [printerr_literal](https://docs.gtk.org/gio/method.ApplicationCommandLine.printerr_literal.html)
    pub fn printerrLiteral(self: *ApplicationCommandLine, _message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ApplicationCommandLine, [*:0]const u8) callconv(.c) void, .{ .name = "g_application_command_line_printerr_literal" });
        const ret = cFn(self, _message);
        return ret;
    }
    /// method [set_exit_status](https://docs.gtk.org/gio/method.ApplicationCommandLine.set_exit_status.html)
    pub fn setExitStatus(self: *ApplicationCommandLine, _exit_status: i32) void {
        const cFn = @extern(*const fn (*ApplicationCommandLine, i32) callconv(.c) void, .{ .name = "g_application_command_line_set_exit_status" });
        const ret = cFn(self, _exit_status);
        return ret;
    }
    /// vfunc [done](https://docs.gtk.org/gio/vfunc.ApplicationCommandLine.done.html)
    pub fn doneV(self: *ApplicationCommandLine) void {
        const class: *ApplicationCommandLineClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.done.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_stdin](https://docs.gtk.org/gio/vfunc.ApplicationCommandLine.get_stdin.html)
    pub fn getStdinV(self: *ApplicationCommandLine) ?*gio.InputStream {
        const class: *ApplicationCommandLineClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_stdin.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [print_literal](https://docs.gtk.org/gio/vfunc.ApplicationCommandLine.print_literal.html)
    pub fn printLiteralV(self: *ApplicationCommandLine, _message: [*:0]const u8) void {
        const class: *ApplicationCommandLineClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.print_literal.?;
        const ret = vFn(self, _message);
        return ret;
    }
    /// vfunc [printerr_literal](https://docs.gtk.org/gio/vfunc.ApplicationCommandLine.printerr_literal.html)
    pub fn printerrLiteralV(self: *ApplicationCommandLine, _message: [*:0]const u8) void {
        const class: *ApplicationCommandLineClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.printerr_literal.?;
        const ret = vFn(self, _message);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_application_command_line_get_type" });
        return cFn();
    }
};
pub const ApplicationCommandLineClass = extern struct {
    parent_class: gobject.ObjectClass,
    print_literal: ?*const fn (_cmdline: *gio.ApplicationCommandLine, _message: [*:0]const u8) callconv(.c) void,
    printerr_literal: ?*const fn (_cmdline: *gio.ApplicationCommandLine, _message: [*:0]const u8) callconv(.c) void,
    get_stdin: ?*const fn (_cmdline: *gio.ApplicationCommandLine) callconv(.c) ?*gio.InputStream,
    done: ?*const fn (_cmdline: *gio.ApplicationCommandLine) callconv(.c) void,
    padding: [10]?*anyopaque,
};
pub const ApplicationCommandLinePrivate = opaque {};
/// Flags [ApplicationFlags](https://docs.gtk.org/gio/flags.ApplicationFlags.html)
pub const ApplicationFlags = packed struct(u32) {
    is_service: bool = false,
    is_launcher: bool = false,
    handles_open: bool = false,
    handles_command_line: bool = false,
    send_environment: bool = false,
    non_unique: bool = false,
    can_override_app_id: bool = false,
    allow_replacement: bool = false,
    replace: bool = false,
    _: u23 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_application_flags_get_type" });
        return cFn();
    }
};
pub const ApplicationPrivate = opaque {};
/// Flags [AskPasswordFlags](https://docs.gtk.org/gio/flags.AskPasswordFlags.html)
pub const AskPasswordFlags = packed struct(u32) {
    need_password: bool = false,
    need_username: bool = false,
    need_domain: bool = false,
    saving_supported: bool = false,
    anonymous_supported: bool = false,
    tcrypt: bool = false,
    _: u26 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_ask_password_flags_get_type" });
        return cFn();
    }
};
/// Iface [AsyncInitable](https://docs.gtk.org/gio/iface.AsyncInitable.html)
pub const AsyncInitable = opaque {
    /// Deprecated:
    /// type func [newv_async](https://docs.gtk.org/gio/type_func.AsyncInitable.newv_async.html)
    pub const newvAsync = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newvAsync(_object_type: core.Type, _n_parameters: u32, _parameters: *gobject.Parameter, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (core.Type, u32, *gobject.Parameter, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_initable_newv_async" });
            const ret = cFn(_object_type, _n_parameters, _parameters, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.newvAsync;
    /// method [init_async](https://docs.gtk.org/gio/method.AsyncInitable.init_async.html)
    pub fn initAsync(self: *AsyncInitable, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*AsyncInitable, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_initable_init_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [init_finish](https://docs.gtk.org/gio/method.AsyncInitable.init_finish.html)
    pub fn initFinish(self: *AsyncInitable, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AsyncInitable, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_async_initable_init_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [new_finish](https://docs.gtk.org/gio/method.AsyncInitable.new_finish.html)
    pub fn newFinish(self: *AsyncInitable, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gobject.Object {
        const cFn = @extern(*const fn (*AsyncInitable, *gio.AsyncResult, *?*core.Error) callconv(.c) *gobject.Object, .{ .name = "g_async_initable_new_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [init_async](https://docs.gtk.org/gio/vfunc.AsyncInitable.init_async.html)
    pub fn initAsyncV(self: *AsyncInitable, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *AsyncInitableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.init_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [init_finish](https://docs.gtk.org/gio/vfunc.AsyncInitable.init_finish.html)
    pub fn initFinishV(self: *AsyncInitable, _res: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *AsyncInitableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.init_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_async_initable_get_type" });
        return cFn();
    }
};
/// Struct [AsyncInitableIface](https://docs.gtk.org/gio/struct.AsyncInitableIface.html)
pub const AsyncInitableIface = extern struct {
    g_iface: gobject.TypeInterface,
    init_async: ?*const fn (_initable: *gio.AsyncInitable, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    init_finish: ?*const fn (_initable: *gio.AsyncInitable, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
};
/// callback [AsyncReadyCallback](https://docs.gtk.org/gio/callback.AsyncReadyCallback.html)
pub const AsyncReadyCallback = *const fn (_source_object: ?*gobject.Object, _res: *gio.AsyncResult, _data: ?*anyopaque) callconv(.c) void;
/// Iface [AsyncResult](https://docs.gtk.org/gio/iface.AsyncResult.html)
pub const AsyncResult = opaque {
    /// method [get_source_object](https://docs.gtk.org/gio/method.AsyncResult.get_source_object.html)
    pub fn getSourceObject(self: *AsyncResult) ?*gobject.Object {
        const cFn = @extern(*const fn (*AsyncResult) callconv(.c) ?*gobject.Object, .{ .name = "g_async_result_get_source_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_user_data](https://docs.gtk.org/gio/method.AsyncResult.get_user_data.html)
    pub fn getUserData(self: *AsyncResult) ?*anyopaque {
        const cFn = @extern(*const fn (*AsyncResult) callconv(.c) ?*anyopaque, .{ .name = "g_async_result_get_user_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_tagged](https://docs.gtk.org/gio/method.AsyncResult.is_tagged.html)
    pub fn isTagged(self: *AsyncResult, _source_tag: ?*anyopaque) bool {
        const cFn = @extern(*const fn (*AsyncResult, ?*anyopaque) callconv(.c) bool, .{ .name = "g_async_result_is_tagged" });
        const ret = cFn(self, @ptrCast(_source_tag));
        return ret;
    }
    /// method [legacy_propagate_error](https://docs.gtk.org/gio/method.AsyncResult.legacy_propagate_error.html)
    pub fn legacyPropagateError(self: *AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_async_result_legacy_propagate_error" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [get_source_object](https://docs.gtk.org/gio/vfunc.AsyncResult.get_source_object.html)
    pub fn getSourceObjectV(self: *AsyncResult) ?*gobject.Object {
        const class: *AsyncResultIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_source_object.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_user_data](https://docs.gtk.org/gio/vfunc.AsyncResult.get_user_data.html)
    pub fn getUserDataV(self: *AsyncResult) ?*anyopaque {
        const class: *AsyncResultIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_user_data.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_tagged](https://docs.gtk.org/gio/vfunc.AsyncResult.is_tagged.html)
    pub fn isTaggedV(self: *AsyncResult, _source_tag: ?*anyopaque) bool {
        const class: *AsyncResultIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_tagged.?;
        const ret = vFn(self, @ptrCast(_source_tag));
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_async_result_get_type" });
        return cFn();
    }
};
/// Struct [AsyncResultIface](https://docs.gtk.org/gio/struct.AsyncResultIface.html)
pub const AsyncResultIface = extern struct {
    g_iface: gobject.TypeInterface,
    get_user_data: ?*const fn (_res: *gio.AsyncResult) callconv(.c) ?*anyopaque,
    get_source_object: ?*const fn (_res: *gio.AsyncResult) callconv(.c) ?*gobject.Object,
    is_tagged: ?*const fn (_res: *gio.AsyncResult, _source_tag: ?*anyopaque) callconv(.c) bool,
};
/// Class [BufferedInputStream](https://docs.gtk.org/gio/class.BufferedInputStream.html)
/// - property [buffer-size](https://docs.gtk.org/gio/property.BufferedInputStream.buffer-size.html): (rw) `u32`
pub const BufferedInputStream = extern struct {
    parent_instance: gio.FilterInputStream,
    priv: ?*gio.BufferedInputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.FilterInputStream;
    pub const Class = gio.BufferedInputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.BufferedInputStream.new.html)
    pub fn new(_base_stream: *gio.InputStream) *BufferedInputStream {
        const cFn = @extern(*const fn (*gio.InputStream) callconv(.c) *BufferedInputStream, .{ .name = "g_buffered_input_stream_new" });
        const ret = cFn(_base_stream);
        return ret;
    }
    /// ctor [new_sized](https://docs.gtk.org/gio/ctor.BufferedInputStream.new_sized.html)
    pub fn newSized(_base_stream: *gio.InputStream, _size: u64) *BufferedInputStream {
        const cFn = @extern(*const fn (*gio.InputStream, u64) callconv(.c) *BufferedInputStream, .{ .name = "g_buffered_input_stream_new_sized" });
        const ret = cFn(_base_stream, _size);
        return ret;
    }
    /// method [fill](https://docs.gtk.org/gio/method.BufferedInputStream.fill.html)
    pub fn fill(self: *BufferedInputStream, _count: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*BufferedInputStream, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_buffered_input_stream_fill" });
        const ret = cFn(self, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [fill_async](https://docs.gtk.org/gio/method.BufferedInputStream.fill_async.html)
    pub fn fillAsync(self: *BufferedInputStream, _count: i64, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*BufferedInputStream, i64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_buffered_input_stream_fill_async" });
        const ret = cFn(self, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [fill_finish](https://docs.gtk.org/gio/method.BufferedInputStream.fill_finish.html)
    pub fn fillFinish(self: *BufferedInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*BufferedInputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_buffered_input_stream_fill_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_available](https://docs.gtk.org/gio/method.BufferedInputStream.get_available.html)
    pub fn getAvailable(self: *BufferedInputStream) u64 {
        const cFn = @extern(*const fn (*BufferedInputStream) callconv(.c) u64, .{ .name = "g_buffered_input_stream_get_available" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer_size](https://docs.gtk.org/gio/method.BufferedInputStream.get_buffer_size.html)
    pub fn getBufferSize(self: *BufferedInputStream) u64 {
        const cFn = @extern(*const fn (*BufferedInputStream) callconv(.c) u64, .{ .name = "g_buffered_input_stream_get_buffer_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [peek](https://docs.gtk.org/gio/method.BufferedInputStream.peek.html)
    pub fn peek(self: *BufferedInputStream, _buffers: []u8, _offset: u64) u64 {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*BufferedInputStream, [*]u8, u64, u64) callconv(.c) u64, .{ .name = "g_buffered_input_stream_peek" });
        const ret = cFn(self, _buffer, _offset, _count);
        return ret;
    }
    /// method [peek_buffer](https://docs.gtk.org/gio/method.BufferedInputStream.peek_buffer.html)
    pub fn peekBuffer(self: *BufferedInputStream) struct {
        ret: [*]u8,
        count: u64,
    } {
        var count_out: u64 = undefined;
        const _count = &count_out;
        const cFn = @extern(*const fn (*BufferedInputStream, *u64) callconv(.c) [*]u8, .{ .name = "g_buffered_input_stream_peek_buffer" });
        const ret = cFn(self, _count);
        return .{ .ret = ret, .count = count_out };
    }
    /// method [read_byte](https://docs.gtk.org/gio/method.BufferedInputStream.read_byte.html)
    pub fn readByte(self: *BufferedInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*BufferedInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_buffered_input_stream_read_byte" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_buffer_size](https://docs.gtk.org/gio/method.BufferedInputStream.set_buffer_size.html)
    pub fn setBufferSize(self: *BufferedInputStream, _size: u64) void {
        const cFn = @extern(*const fn (*BufferedInputStream, u64) callconv(.c) void, .{ .name = "g_buffered_input_stream_set_buffer_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// vfunc [fill](https://docs.gtk.org/gio/vfunc.BufferedInputStream.fill.html)
    pub fn fillV(self: *BufferedInputStream, _count: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i64 {
        const class: *BufferedInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.fill.?;
        const ret = vFn(self, _count, _cancellable, _error);
        return ret;
    }
    /// vfunc [fill_async](https://docs.gtk.org/gio/vfunc.BufferedInputStream.fill_async.html)
    pub fn fillAsyncV(self: *BufferedInputStream, _count: i64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *BufferedInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.fill_async.?;
        const ret = vFn(self, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [fill_finish](https://docs.gtk.org/gio/vfunc.BufferedInputStream.fill_finish.html)
    pub fn fillFinishV(self: *BufferedInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) i64 {
        const class: *BufferedInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.fill_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_buffered_input_stream_get_type" });
        return cFn();
    }
};
pub const BufferedInputStreamClass = extern struct {
    parent_class: gio.FilterInputStreamClass,
    fill: ?*const fn (_stream: *gio.BufferedInputStream, _count: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i64,
    fill_async: ?*const fn (_stream: *gio.BufferedInputStream, _count: i64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    fill_finish: ?*const fn (_stream: *gio.BufferedInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) i64,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const BufferedInputStreamPrivate = opaque {};
/// Class [BufferedOutputStream](https://docs.gtk.org/gio/class.BufferedOutputStream.html)
/// - property [auto-grow](https://docs.gtk.org/gio/property.BufferedOutputStream.auto-grow.html): (rw) `bool`
/// - property [buffer-size](https://docs.gtk.org/gio/property.BufferedOutputStream.buffer-size.html): (rw) `u32`
pub const BufferedOutputStream = extern struct {
    parent_instance: gio.FilterOutputStream,
    priv: ?*gio.BufferedOutputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.FilterOutputStream;
    pub const Class = gio.BufferedOutputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.BufferedOutputStream.new.html)
    pub fn new(_base_stream: *gio.OutputStream) *BufferedOutputStream {
        const cFn = @extern(*const fn (*gio.OutputStream) callconv(.c) *BufferedOutputStream, .{ .name = "g_buffered_output_stream_new" });
        const ret = cFn(_base_stream);
        return ret;
    }
    /// ctor [new_sized](https://docs.gtk.org/gio/ctor.BufferedOutputStream.new_sized.html)
    pub fn newSized(_base_stream: *gio.OutputStream, _size: u64) *BufferedOutputStream {
        const cFn = @extern(*const fn (*gio.OutputStream, u64) callconv(.c) *BufferedOutputStream, .{ .name = "g_buffered_output_stream_new_sized" });
        const ret = cFn(_base_stream, _size);
        return ret;
    }
    /// method [get_auto_grow](https://docs.gtk.org/gio/method.BufferedOutputStream.get_auto_grow.html)
    pub fn getAutoGrow(self: *BufferedOutputStream) bool {
        const cFn = @extern(*const fn (*BufferedOutputStream) callconv(.c) bool, .{ .name = "g_buffered_output_stream_get_auto_grow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer_size](https://docs.gtk.org/gio/method.BufferedOutputStream.get_buffer_size.html)
    pub fn getBufferSize(self: *BufferedOutputStream) u64 {
        const cFn = @extern(*const fn (*BufferedOutputStream) callconv(.c) u64, .{ .name = "g_buffered_output_stream_get_buffer_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_auto_grow](https://docs.gtk.org/gio/method.BufferedOutputStream.set_auto_grow.html)
    pub fn setAutoGrow(self: *BufferedOutputStream, _auto_grow: bool) void {
        const cFn = @extern(*const fn (*BufferedOutputStream, bool) callconv(.c) void, .{ .name = "g_buffered_output_stream_set_auto_grow" });
        const ret = cFn(self, _auto_grow);
        return ret;
    }
    /// method [set_buffer_size](https://docs.gtk.org/gio/method.BufferedOutputStream.set_buffer_size.html)
    pub fn setBufferSize(self: *BufferedOutputStream, _size: u64) void {
        const cFn = @extern(*const fn (*BufferedOutputStream, u64) callconv(.c) void, .{ .name = "g_buffered_output_stream_set_buffer_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_buffered_output_stream_get_type" });
        return cFn();
    }
};
pub const BufferedOutputStreamClass = extern struct {
    parent_class: gio.FilterOutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
};
pub const BufferedOutputStreamPrivate = opaque {};
/// callback [BusAcquiredCallback](https://docs.gtk.org/gio/callback.BusAcquiredCallback.html)
pub const BusAcquiredCallback = *const fn (_connection: *gio.DBusConnection, _name: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [BusNameAcquiredCallback](https://docs.gtk.org/gio/callback.BusNameAcquiredCallback.html)
pub const BusNameAcquiredCallback = *const fn (_connection: *gio.DBusConnection, _name: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [BusNameAppearedCallback](https://docs.gtk.org/gio/callback.BusNameAppearedCallback.html)
pub const BusNameAppearedCallback = *const fn (_connection: *gio.DBusConnection, _name: [*:0]const u8, _name_owner: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [BusNameLostCallback](https://docs.gtk.org/gio/callback.BusNameLostCallback.html)
pub const BusNameLostCallback = *const fn (_connection: *gio.DBusConnection, _name: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// Flags [BusNameOwnerFlags](https://docs.gtk.org/gio/flags.BusNameOwnerFlags.html)
pub const BusNameOwnerFlags = packed struct(u32) {
    allow_replacement: bool = false,
    replace: bool = false,
    do_not_queue: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bus_name_owner_flags_get_type" });
        return cFn();
    }
};
/// callback [BusNameVanishedCallback](https://docs.gtk.org/gio/callback.BusNameVanishedCallback.html)
pub const BusNameVanishedCallback = *const fn (_connection: *gio.DBusConnection, _name: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// Flags [BusNameWatcherFlags](https://docs.gtk.org/gio/flags.BusNameWatcherFlags.html)
pub const BusNameWatcherFlags = packed struct(u32) {
    auto_start: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bus_name_watcher_flags_get_type" });
        return cFn();
    }
};
/// Enum [BusType](https://docs.gtk.org/gio/enum.BusType.html)
pub const BusType = enum(i32) {
    starter = -1,
    none = 0,
    system = 1,
    session = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bus_type_get_type" });
        return cFn();
    }
};
/// Class [BytesIcon](https://docs.gtk.org/gio/class.BytesIcon.html)
/// - property [bytes](https://docs.gtk.org/gio/property.BytesIcon.bytes.html): (r-) `glib.Bytes`
pub const BytesIcon = opaque {
    pub const Interfaces = [_]type{ gio.Icon, gio.LoadableIcon };
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.BytesIcon.new.html)
    pub fn new(_bytes: *glib.Bytes) *BytesIcon {
        const cFn = @extern(*const fn (*glib.Bytes) callconv(.c) *BytesIcon, .{ .name = "g_bytes_icon_new" });
        const ret = cFn(_bytes);
        return ret;
    }
    /// method [get_bytes](https://docs.gtk.org/gio/method.BytesIcon.get_bytes.html)
    pub fn getBytes(self: *BytesIcon) *glib.Bytes {
        const cFn = @extern(*const fn (*BytesIcon) callconv(.c) *glib.Bytes, .{ .name = "g_bytes_icon_get_bytes" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bytes_icon_get_type" });
        return cFn();
    }
};
/// Class [Cancellable](https://docs.gtk.org/gio/class.Cancellable.html)
pub const Cancellable = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.CancellablePrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.CancellableClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Cancellable.new.html)
    pub fn new() *Cancellable {
        const cFn = @extern(*const fn () callconv(.c) *Cancellable, .{ .name = "g_cancellable_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_current](https://docs.gtk.org/gio/type_func.Cancellable.get_current.html)
    pub fn getCurrent() ?*gio.Cancellable {
        const cFn = @extern(*const fn () callconv(.c) ?*gio.Cancellable, .{ .name = "g_cancellable_get_current" });
        const ret = cFn();
        return ret;
    }
    /// method [cancel](https://docs.gtk.org/gio/method.Cancellable.cancel.html)
    pub fn cancel(self: *Cancellable) void {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) void, .{ .name = "g_cancellable_cancel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [connect](https://docs.gtk.org/gio/method.Cancellable.connect.html)
    pub fn connect(self: *Cancellable, callback: anytype, callback_args: anytype) u64 {
        var closure_callback = core.zig_closure(callback, callback_args, &.{void});
        const _callback: gobject.Callback = @ptrCast(closure_callback.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const _data_destroy_func: ?glib.DestroyNotify = @ptrCast(closure_callback.c_destroy());
        const cFn = @extern(*const fn (*Cancellable, gobject.Callback, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u64, .{ .name = "g_cancellable_connect" });
        const ret = cFn(self, _callback, @ptrCast(_data), _data_destroy_func);
        return ret;
    }
    /// method [disconnect](https://docs.gtk.org/gio/method.Cancellable.disconnect.html)
    pub fn disconnect(self: *Cancellable, _handler_id: u64) void {
        const cFn = @extern(*const fn (*Cancellable, u64) callconv(.c) void, .{ .name = "g_cancellable_disconnect" });
        const ret = cFn(self, _handler_id);
        return ret;
    }
    /// method [get_fd](https://docs.gtk.org/gio/method.Cancellable.get_fd.html)
    pub fn getFd(self: *Cancellable) i32 {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) i32, .{ .name = "g_cancellable_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_cancelled](https://docs.gtk.org/gio/method.Cancellable.is_cancelled.html)
    pub fn isCancelled(self: *Cancellable) bool {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) bool, .{ .name = "g_cancellable_is_cancelled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [make_pollfd](https://docs.gtk.org/gio/method.Cancellable.make_pollfd.html)
    pub fn makePollfd(self: *Cancellable, _pollfd: *glib.PollFD) bool {
        const cFn = @extern(*const fn (*Cancellable, *glib.PollFD) callconv(.c) bool, .{ .name = "g_cancellable_make_pollfd" });
        const ret = cFn(self, _pollfd);
        return ret;
    }
    /// method [pop_current](https://docs.gtk.org/gio/method.Cancellable.pop_current.html)
    pub fn popCurrent(self: *Cancellable) void {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) void, .{ .name = "g_cancellable_pop_current" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push_current](https://docs.gtk.org/gio/method.Cancellable.push_current.html)
    pub fn pushCurrent(self: *Cancellable) void {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) void, .{ .name = "g_cancellable_push_current" });
        const ret = cFn(self);
        return ret;
    }
    /// method [release_fd](https://docs.gtk.org/gio/method.Cancellable.release_fd.html)
    pub fn releaseFd(self: *Cancellable) void {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) void, .{ .name = "g_cancellable_release_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/gio/method.Cancellable.reset.html)
    pub fn reset(self: *Cancellable) void {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) void, .{ .name = "g_cancellable_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_error_if_cancelled](https://docs.gtk.org/gio/method.Cancellable.set_error_if_cancelled.html)
    pub fn setErrorIfCancelled(self: *Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_cancellable_set_error_if_cancelled" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [source_new](https://docs.gtk.org/gio/method.Cancellable.source_new.html)
    pub fn sourceNew(self: *Cancellable) *glib.Source {
        const cFn = @extern(*const fn (*Cancellable) callconv(.c) *glib.Source, .{ .name = "g_cancellable_source_new" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [cancelled](https://docs.gtk.org/gio/vfunc.Cancellable.cancelled.html)
    pub fn cancelledV(self: *Cancellable) void {
        const class: *CancellableClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.cancelled.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [cancelled](https://docs.gtk.org/gio/signal.Cancellable.cancelled.html)
    pub fn connectCancelled(self: *Cancellable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancelled", handler, args, flags, &.{ void, *Cancellable });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_cancellable_get_type" });
        return cFn();
    }
};
pub const CancellableClass = extern struct {
    parent_class: gobject.ObjectClass,
    cancelled: ?*const fn (_cancellable: ?*gio.Cancellable) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const CancellablePrivate = opaque {};
/// callback [CancellableSourceFunc](https://docs.gtk.org/gio/callback.CancellableSourceFunc.html)
pub const CancellableSourceFunc = *const fn (_cancellable: ?*gio.Cancellable, _data: ?*anyopaque) callconv(.c) bool;
/// Class [CharsetConverter](https://docs.gtk.org/gio/class.CharsetConverter.html)
/// - property [from-charset](https://docs.gtk.org/gio/property.CharsetConverter.from-charset.html): (r-) `[*:0]const u8`
/// - property [to-charset](https://docs.gtk.org/gio/property.CharsetConverter.to-charset.html): (r-) `[*:0]const u8`
/// - property [use-fallback](https://docs.gtk.org/gio/property.CharsetConverter.use-fallback.html): (rw) `bool`
pub const CharsetConverter = opaque {
    pub const Interfaces = [_]type{ gio.Converter, gio.Initable };
    pub const Parent = gobject.Object;
    pub const Class = gio.CharsetConverterClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.CharsetConverter.new.html)
    pub fn new(_to_charset: [*:0]const u8, _from_charset: [*:0]const u8, _error: *?*core.Error) error{GError}!*CharsetConverter {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) *CharsetConverter, .{ .name = "g_charset_converter_new" });
        const ret = cFn(_to_charset, _from_charset, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_num_fallbacks](https://docs.gtk.org/gio/method.CharsetConverter.get_num_fallbacks.html)
    pub fn getNumFallbacks(self: *CharsetConverter) u32 {
        const cFn = @extern(*const fn (*CharsetConverter) callconv(.c) u32, .{ .name = "g_charset_converter_get_num_fallbacks" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_fallback](https://docs.gtk.org/gio/method.CharsetConverter.get_use_fallback.html)
    pub fn getUseFallback(self: *CharsetConverter) bool {
        const cFn = @extern(*const fn (*CharsetConverter) callconv(.c) bool, .{ .name = "g_charset_converter_get_use_fallback" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_use_fallback](https://docs.gtk.org/gio/method.CharsetConverter.set_use_fallback.html)
    pub fn setUseFallback(self: *CharsetConverter, _use_fallback: bool) void {
        const cFn = @extern(*const fn (*CharsetConverter, bool) callconv(.c) void, .{ .name = "g_charset_converter_set_use_fallback" });
        const ret = cFn(self, _use_fallback);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_charset_converter_get_type" });
        return cFn();
    }
};
pub const CharsetConverterClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Iface [Converter](https://docs.gtk.org/gio/iface.Converter.html)
pub const Converter = opaque {
    /// method [convert](https://docs.gtk.org/gio/method.Converter.convert.html)
    pub fn convert(self: *Converter, _inbufs: []u8, _outbufs: []u8, _flags: gio.ConverterFlags, _error: *?*core.Error) error{GError}!struct {
        ret: gio.ConverterResult,
        bytes_read: u64,
        bytes_written: u64,
    } {
        const _inbuf = _inbufs.ptr;
        const _inbuf_size: u64 = @intCast(_inbufs.len);
        const _outbuf = _outbufs.ptr;
        const _outbuf_size: u64 = @intCast(_outbufs.len);
        var bytes_read_out: u64 = undefined;
        const _bytes_read = &bytes_read_out;
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*Converter, [*]u8, u64, [*]u8, u64, gio.ConverterFlags, *u64, *u64, *?*core.Error) callconv(.c) gio.ConverterResult, .{ .name = "g_converter_convert" });
        const ret = cFn(self, _inbuf, _inbuf_size, _outbuf, _outbuf_size, _flags, _bytes_read, _bytes_written, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_read = bytes_read_out, .bytes_written = bytes_written_out };
    }
    /// method [reset](https://docs.gtk.org/gio/method.Converter.reset.html)
    pub fn reset(self: *Converter) void {
        const cFn = @extern(*const fn (*Converter) callconv(.c) void, .{ .name = "g_converter_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [convert](https://docs.gtk.org/gio/vfunc.Converter.convert.html)
    pub fn convertV(self: *Converter, _inbuf: ?[*]u8, _inbuf_size: u64, _outbuf: [*]u8, _outbuf_size: u64, _flags: gio.ConverterFlags, _bytes_read: *u64, _bytes_written: *u64, _error: *?*core.Error) gio.ConverterResult {
        const class: *ConverterIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.convert.?;
        const ret = vFn(self, _inbuf, _inbuf_size, _outbuf, _outbuf_size, _flags, _bytes_read, _bytes_written, _error);
        return ret;
    }
    /// vfunc [reset](https://docs.gtk.org/gio/vfunc.Converter.reset.html)
    pub fn resetV(self: *Converter) void {
        const class: *ConverterIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reset.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_converter_get_type" });
        return cFn();
    }
};
/// Flags [ConverterFlags](https://docs.gtk.org/gio/flags.ConverterFlags.html)
pub const ConverterFlags = packed struct(u32) {
    input_at_end: bool = false,
    flush: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_converter_flags_get_type" });
        return cFn();
    }
};
/// Struct [ConverterIface](https://docs.gtk.org/gio/struct.ConverterIface.html)
pub const ConverterIface = extern struct {
    g_iface: gobject.TypeInterface,
    convert: ?*const fn (_converter: *gio.Converter, _inbuf: ?[*]u8, _inbuf_size: u64, _outbuf: [*]u8, _outbuf_size: u64, _flags: gio.ConverterFlags, _bytes_read: *u64, _bytes_written: *u64, _error: *?*core.Error) callconv(.c) gio.ConverterResult,
    reset: ?*const fn (_converter: *gio.Converter) callconv(.c) void,
};
/// Class [ConverterInputStream](https://docs.gtk.org/gio/class.ConverterInputStream.html)
/// - property [converter](https://docs.gtk.org/gio/property.ConverterInputStream.converter.html): (r-) `gio.Converter`
pub const ConverterInputStream = extern struct {
    parent_instance: gio.FilterInputStream,
    priv: ?*gio.ConverterInputStreamPrivate,
    pub const Interfaces = [_]type{gio.PollableInputStream};
    pub const Parent = gio.FilterInputStream;
    pub const Class = gio.ConverterInputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ConverterInputStream.new.html)
    pub fn new(_base_stream: *gio.InputStream, _converter: *gio.Converter) *ConverterInputStream {
        const cFn = @extern(*const fn (*gio.InputStream, *gio.Converter) callconv(.c) *ConverterInputStream, .{ .name = "g_converter_input_stream_new" });
        const ret = cFn(_base_stream, _converter);
        return ret;
    }
    /// method [get_converter](https://docs.gtk.org/gio/method.ConverterInputStream.get_converter.html)
    pub fn getConverter(self: *ConverterInputStream) *gio.Converter {
        const cFn = @extern(*const fn (*ConverterInputStream) callconv(.c) *gio.Converter, .{ .name = "g_converter_input_stream_get_converter" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_converter_input_stream_get_type" });
        return cFn();
    }
};
pub const ConverterInputStreamClass = extern struct {
    parent_class: gio.FilterInputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const ConverterInputStreamPrivate = opaque {};
/// Class [ConverterOutputStream](https://docs.gtk.org/gio/class.ConverterOutputStream.html)
/// - property [converter](https://docs.gtk.org/gio/property.ConverterOutputStream.converter.html): (r-) `gio.Converter`
pub const ConverterOutputStream = extern struct {
    parent_instance: gio.FilterOutputStream,
    priv: ?*gio.ConverterOutputStreamPrivate,
    pub const Interfaces = [_]type{gio.PollableOutputStream};
    pub const Parent = gio.FilterOutputStream;
    pub const Class = gio.ConverterOutputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ConverterOutputStream.new.html)
    pub fn new(_base_stream: *gio.OutputStream, _converter: *gio.Converter) *ConverterOutputStream {
        const cFn = @extern(*const fn (*gio.OutputStream, *gio.Converter) callconv(.c) *ConverterOutputStream, .{ .name = "g_converter_output_stream_new" });
        const ret = cFn(_base_stream, _converter);
        return ret;
    }
    /// method [get_converter](https://docs.gtk.org/gio/method.ConverterOutputStream.get_converter.html)
    pub fn getConverter(self: *ConverterOutputStream) *gio.Converter {
        const cFn = @extern(*const fn (*ConverterOutputStream) callconv(.c) *gio.Converter, .{ .name = "g_converter_output_stream_get_converter" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_converter_output_stream_get_type" });
        return cFn();
    }
};
pub const ConverterOutputStreamClass = extern struct {
    parent_class: gio.FilterOutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const ConverterOutputStreamPrivate = opaque {};
/// Enum [ConverterResult](https://docs.gtk.org/gio/enum.ConverterResult.html)
pub const ConverterResult = enum(u32) {
    @"error" = 0,
    converted = 1,
    finished = 2,
    flushed = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_converter_result_get_type" });
        return cFn();
    }
};
/// Class [Credentials](https://docs.gtk.org/gio/class.Credentials.html)
pub const Credentials = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gio.CredentialsClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Credentials.new.html)
    pub fn new() *Credentials {
        const cFn = @extern(*const fn () callconv(.c) *Credentials, .{ .name = "g_credentials_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_unix_pid](https://docs.gtk.org/gio/method.Credentials.get_unix_pid.html)
    pub fn getUnixPid(self: *Credentials, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*Credentials, *?*core.Error) callconv(.c) i32, .{ .name = "g_credentials_get_unix_pid" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_unix_user](https://docs.gtk.org/gio/method.Credentials.get_unix_user.html)
    pub fn getUnixUser(self: *Credentials, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*Credentials, *?*core.Error) callconv(.c) u32, .{ .name = "g_credentials_get_unix_user" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [is_same_user](https://docs.gtk.org/gio/method.Credentials.is_same_user.html)
    pub fn isSameUser(self: *Credentials, _other_credentials: *gio.Credentials, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Credentials, *gio.Credentials, *?*core.Error) callconv(.c) bool, .{ .name = "g_credentials_is_same_user" });
        const ret = cFn(self, _other_credentials, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_native](https://docs.gtk.org/gio/method.Credentials.set_native.html)
    pub fn setNative(self: *Credentials, _native_type: gio.CredentialsType, _native: *anyopaque) void {
        const cFn = @extern(*const fn (*Credentials, gio.CredentialsType, *anyopaque) callconv(.c) void, .{ .name = "g_credentials_set_native" });
        const ret = cFn(self, _native_type, @ptrCast(_native));
        return ret;
    }
    /// method [set_unix_user](https://docs.gtk.org/gio/method.Credentials.set_unix_user.html)
    pub fn setUnixUser(self: *Credentials, _uid: u32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Credentials, u32, *?*core.Error) callconv(.c) bool, .{ .name = "g_credentials_set_unix_user" });
        const ret = cFn(self, _uid, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.Credentials.to_string.html)
    pub fn toString(self: *Credentials) [*:0]u8 {
        const cFn = @extern(*const fn (*Credentials) callconv(.c) [*:0]u8, .{ .name = "g_credentials_to_string" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_credentials_get_type" });
        return cFn();
    }
};
pub const CredentialsClass = opaque {};
/// Enum [CredentialsType](https://docs.gtk.org/gio/enum.CredentialsType.html)
pub const CredentialsType = enum(u32) {
    invalid = 0,
    linux_ucred = 1,
    freebsd_cmsgcred = 2,
    openbsd_sockpeercred = 3,
    solaris_ucred = 4,
    netbsd_unpcbid = 5,
    apple_xucred = 6,
    win32_pid = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_credentials_type_get_type" });
        return cFn();
    }
};
/// const [DBUS_METHOD_INVOCATION_HANDLED](https://docs.gtk.org/gio/const.DBUS_METHOD_INVOCATION_HANDLED.html)
pub const DBUS_METHOD_INVOCATION_HANDLED = true;
/// const [DBUS_METHOD_INVOCATION_UNHANDLED](https://docs.gtk.org/gio/const.DBUS_METHOD_INVOCATION_UNHANDLED.html)
pub const DBUS_METHOD_INVOCATION_UNHANDLED = false;
/// Class [DBusActionGroup](https://docs.gtk.org/gio/class.DBusActionGroup.html)
pub const DBusActionGroup = opaque {
    pub const Interfaces = [_]type{ gio.ActionGroup, gio.RemoteActionGroup };
    pub const Parent = gobject.Object;
    /// type func [get](https://docs.gtk.org/gio/type_func.DBusActionGroup.get.html)
    pub fn get(_connection: *gio.DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8) *gio.DBusActionGroup {
        const cFn = @extern(*const fn (*gio.DBusConnection, ?[*:0]const u8, [*:0]const u8) callconv(.c) *gio.DBusActionGroup, .{ .name = "g_dbus_action_group_get" });
        const ret = cFn(_connection, _bus_name, _object_path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_action_group_get_type" });
        return cFn();
    }
};
/// Struct [DBusAnnotationInfo](https://docs.gtk.org/gio/struct.DBusAnnotationInfo.html)
pub const DBusAnnotationInfo = extern struct {
    ref_count: i32,
    key: ?[*:0]const u8,
    value: ?[*:0]const u8,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [ref](https://docs.gtk.org/gio/method.DBusAnnotationInfo.ref.html)
    pub fn ref(self: *DBusAnnotationInfo) *gio.DBusAnnotationInfo {
        const cFn = @extern(*const fn (*DBusAnnotationInfo) callconv(.c) *gio.DBusAnnotationInfo, .{ .name = "g_dbus_annotation_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusAnnotationInfo.unref.html)
    pub fn unref(self: *DBusAnnotationInfo) void {
        const cFn = @extern(*const fn (*DBusAnnotationInfo) callconv(.c) void, .{ .name = "g_dbus_annotation_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [lookup](https://docs.gtk.org/gio/type_func.DBusAnnotationInfo.lookup.html)
    pub fn lookup(_annotations: ?[*:null]?*gio.DBusAnnotationInfo, _name: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (?[*:null]?*gio.DBusAnnotationInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_annotation_info_lookup" });
        const ret = cFn(_annotations, _name);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_annotation_info_get_type" });
        return cFn();
    }
};
/// Struct [DBusArgInfo](https://docs.gtk.org/gio/struct.DBusArgInfo.html)
pub const DBusArgInfo = extern struct {
    ref_count: i32,
    name: ?[*:0]const u8,
    signature: ?[*:0]const u8,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [ref](https://docs.gtk.org/gio/method.DBusArgInfo.ref.html)
    pub fn ref(self: *DBusArgInfo) *gio.DBusArgInfo {
        const cFn = @extern(*const fn (*DBusArgInfo) callconv(.c) *gio.DBusArgInfo, .{ .name = "g_dbus_arg_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusArgInfo.unref.html)
    pub fn unref(self: *DBusArgInfo) void {
        const cFn = @extern(*const fn (*DBusArgInfo) callconv(.c) void, .{ .name = "g_dbus_arg_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_arg_info_get_type" });
        return cFn();
    }
};
/// Class [DBusAuthObserver](https://docs.gtk.org/gio/class.DBusAuthObserver.html)
pub const DBusAuthObserver = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DBusAuthObserver.new.html)
    pub fn new() *DBusAuthObserver {
        const cFn = @extern(*const fn () callconv(.c) *DBusAuthObserver, .{ .name = "g_dbus_auth_observer_new" });
        const ret = cFn();
        return ret;
    }
    /// method [allow_mechanism](https://docs.gtk.org/gio/method.DBusAuthObserver.allow_mechanism.html)
    pub fn allowMechanism(self: *DBusAuthObserver, _mechanism: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*DBusAuthObserver, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_auth_observer_allow_mechanism" });
        const ret = cFn(self, _mechanism);
        return ret;
    }
    /// method [authorize_authenticated_peer](https://docs.gtk.org/gio/method.DBusAuthObserver.authorize_authenticated_peer.html)
    pub fn authorizeAuthenticatedPeer(self: *DBusAuthObserver, _stream: *gio.IOStream, _credentials: ?*gio.Credentials) bool {
        const cFn = @extern(*const fn (*DBusAuthObserver, *gio.IOStream, ?*gio.Credentials) callconv(.c) bool, .{ .name = "g_dbus_auth_observer_authorize_authenticated_peer" });
        const ret = cFn(self, _stream, _credentials);
        return ret;
    }
    /// signal [allow-mechanism](https://docs.gtk.org/gio/signal.DBusAuthObserver.allow-mechanism.html)
    pub fn connectAllowMechanism(self: *DBusAuthObserver, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("allow-mechanism", handler, args, flags, &.{ bool, *DBusAuthObserver, [*:0]const u8 });
    }
    /// signal [authorize-authenticated-peer](https://docs.gtk.org/gio/signal.DBusAuthObserver.authorize-authenticated-peer.html)
    pub fn connectAuthorizeAuthenticatedPeer(self: *DBusAuthObserver, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("authorize-authenticated-peer", handler, args, flags, &.{ bool, *DBusAuthObserver, *gio.IOStream, *gio.Credentials });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_auth_observer_get_type" });
        return cFn();
    }
};
/// Flags [DBusCallFlags](https://docs.gtk.org/gio/flags.DBusCallFlags.html)
pub const DBusCallFlags = packed struct(u32) {
    no_auto_start: bool = false,
    allow_interactive_authorization: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_call_flags_get_type" });
        return cFn();
    }
};
/// Flags [DBusCapabilityFlags](https://docs.gtk.org/gio/flags.DBusCapabilityFlags.html)
pub const DBusCapabilityFlags = packed struct(u32) {
    unix_fd_passing: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_capability_flags_get_type" });
        return cFn();
    }
};
/// Class [DBusConnection](https://docs.gtk.org/gio/class.DBusConnection.html)
/// - property [address](https://docs.gtk.org/gio/property.DBusConnection.address.html): (--) `[*:0]const u8`
/// - property [authentication-observer](https://docs.gtk.org/gio/property.DBusConnection.authentication-observer.html): (--) `gio.DBusAuthObserver`
/// - property [capabilities](https://docs.gtk.org/gio/property.DBusConnection.capabilities.html): (r-) `gio.DBusCapabilityFlags`
/// - property [closed](https://docs.gtk.org/gio/property.DBusConnection.closed.html): (r-) `bool`
/// - property [exit-on-close](https://docs.gtk.org/gio/property.DBusConnection.exit-on-close.html): (rw) `bool`
/// - property [flags](https://docs.gtk.org/gio/property.DBusConnection.flags.html): (r-) `gio.DBusConnectionFlags`
/// - property [guid](https://docs.gtk.org/gio/property.DBusConnection.guid.html): (r-) `[*:0]const u8`
/// - property [stream](https://docs.gtk.org/gio/property.DBusConnection.stream.html): (r-) `gio.IOStream`
/// - property [unique-name](https://docs.gtk.org/gio/property.DBusConnection.unique-name.html): (r-) `[*:0]const u8`
pub const DBusConnection = opaque {
    pub const Interfaces = [_]type{ gio.AsyncInitable, gio.Initable };
    pub const Parent = gobject.Object;
    /// ctor [new_finish](https://docs.gtk.org/gio/ctor.DBusConnection.new_finish.html)
    pub fn newFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusConnection {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusConnection, .{ .name = "g_dbus_connection_new_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_address_finish](https://docs.gtk.org/gio/ctor.DBusConnection.new_for_address_finish.html)
    pub fn newForAddressFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusConnection {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusConnection, .{ .name = "g_dbus_connection_new_for_address_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_address_sync](https://docs.gtk.org/gio/ctor.DBusConnection.new_for_address_sync.html)
    pub fn newForAddressSync(_address: [*:0]const u8, _flags: gio.DBusConnectionFlags, _observer: ?*gio.DBusAuthObserver, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusConnection {
        const cFn = @extern(*const fn ([*:0]const u8, gio.DBusConnectionFlags, ?*gio.DBusAuthObserver, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusConnection, .{ .name = "g_dbus_connection_new_for_address_sync" });
        const ret = cFn(_address, _flags, _observer, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_sync](https://docs.gtk.org/gio/ctor.DBusConnection.new_sync.html)
    pub fn newSync(_stream: *gio.IOStream, _guid: ?[*:0]const u8, _flags: gio.DBusConnectionFlags, _observer: ?*gio.DBusAuthObserver, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusConnection {
        const cFn = @extern(*const fn (*gio.IOStream, ?[*:0]const u8, gio.DBusConnectionFlags, ?*gio.DBusAuthObserver, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusConnection, .{ .name = "g_dbus_connection_new_sync" });
        const ret = cFn(_stream, _guid, _flags, _observer, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new](https://docs.gtk.org/gio/type_func.DBusConnection.new.html)
    pub fn new(_stream: *gio.IOStream, _guid: ?[*:0]const u8, _flags: gio.DBusConnectionFlags, _observer: ?*gio.DBusAuthObserver, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.IOStream, ?[*:0]const u8, gio.DBusConnectionFlags, ?*gio.DBusAuthObserver, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_new" });
        const ret = cFn(_stream, _guid, _flags, _observer, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_for_address](https://docs.gtk.org/gio/type_func.DBusConnection.new_for_address.html)
    pub fn newForAddress(_address: [*:0]const u8, _flags: gio.DBusConnectionFlags, _observer: ?*gio.DBusAuthObserver, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn ([*:0]const u8, gio.DBusConnectionFlags, ?*gio.DBusAuthObserver, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_new_for_address" });
        const ret = cFn(_address, _flags, _observer, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [add_filter](https://docs.gtk.org/gio/method.DBusConnection.add_filter.html)
    pub fn addFilter(self: *DBusConnection, filter_function: anytype, filter_function_args: anytype) u32 {
        var closure_filter_function = core.zig_closure(filter_function, filter_function_args, &.{ ?*gio.DBusMessage, *gio.DBusConnection, *gio.DBusMessage, bool });
        const _filter_function: gio.DBusMessageFilterFunction = @ptrCast(closure_filter_function.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_filter_function.c_data());
        const _user_data_free_func: glib.DestroyNotify = @ptrCast(closure_filter_function.c_destroy());
        const cFn = @extern(*const fn (*DBusConnection, gio.DBusMessageFilterFunction, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_dbus_connection_add_filter" });
        const ret = cFn(self, _filter_function, @ptrCast(_user_data), _user_data_free_func);
        return ret;
    }
    /// method [call](https://docs.gtk.org/gio/method.DBusConnection.call.html)
    pub fn call(self: *DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _reply_type: ?*glib.VariantType, _flags: gio.DBusCallFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*glib.Variant, ?*glib.VariantType, gio.DBusCallFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_call" });
        const ret = cFn(self, _bus_name, _object_path, _interface_name, _method_name, _parameters, _reply_type, _flags, _timeout_msec, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [call_finish](https://docs.gtk.org/gio/method.DBusConnection.call_finish.html)
    pub fn callFinish(self: *DBusConnection, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*glib.Variant {
        const cFn = @extern(*const fn (*DBusConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_connection_call_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [call_sync](https://docs.gtk.org/gio/method.DBusConnection.call_sync.html)
    pub fn callSync(self: *DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _reply_type: ?*glib.VariantType, _flags: gio.DBusCallFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*glib.Variant {
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*glib.Variant, ?*glib.VariantType, gio.DBusCallFlags, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_connection_call_sync" });
        const ret = cFn(self, _bus_name, _object_path, _interface_name, _method_name, _parameters, _reply_type, _flags, _timeout_msec, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [call_with_unix_fd_list](https://docs.gtk.org/gio/method.DBusConnection.call_with_unix_fd_list.html)
    pub fn callWithUnixFdList(self: *DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _reply_type: ?*glib.VariantType, _flags: gio.DBusCallFlags, _timeout_msec: i32, _fd_list: ?*gio.UnixFDList, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*glib.Variant, ?*glib.VariantType, gio.DBusCallFlags, i32, ?*gio.UnixFDList, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_call_with_unix_fd_list" });
        const ret = cFn(self, _bus_name, _object_path, _interface_name, _method_name, _parameters, _reply_type, _flags, _timeout_msec, _fd_list, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [call_with_unix_fd_list_finish](https://docs.gtk.org/gio/method.DBusConnection.call_with_unix_fd_list_finish.html)
    pub fn callWithUnixFdListFinish(self: *DBusConnection, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Variant,
        out_fd_list: *gio.UnixFDList,
    } {
        var out_fd_list_out: *gio.UnixFDList = undefined;
        const _out_fd_list = &out_fd_list_out;
        const cFn = @extern(*const fn (*DBusConnection, ?**gio.UnixFDList, *gio.AsyncResult, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_connection_call_with_unix_fd_list_finish" });
        const ret = cFn(self, _out_fd_list, _res, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_fd_list = out_fd_list_out };
    }
    /// method [call_with_unix_fd_list_sync](https://docs.gtk.org/gio/method.DBusConnection.call_with_unix_fd_list_sync.html)
    pub fn callWithUnixFdListSync(self: *DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _reply_type: ?*glib.VariantType, _flags: gio.DBusCallFlags, _timeout_msec: i32, _fd_list: ?*gio.UnixFDList, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Variant,
        out_fd_list: *gio.UnixFDList,
    } {
        var out_fd_list_out: *gio.UnixFDList = undefined;
        const _out_fd_list = &out_fd_list_out;
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*glib.Variant, ?*glib.VariantType, gio.DBusCallFlags, i32, ?*gio.UnixFDList, ?**gio.UnixFDList, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_connection_call_with_unix_fd_list_sync" });
        const ret = cFn(self, _bus_name, _object_path, _interface_name, _method_name, _parameters, _reply_type, _flags, _timeout_msec, _fd_list, _out_fd_list, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_fd_list = out_fd_list_out };
    }
    /// method [close](https://docs.gtk.org/gio/method.DBusConnection.close.html)
    pub fn close(self: *DBusConnection, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusConnection, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_close" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.DBusConnection.close_finish.html)
    pub fn closeFinish(self: *DBusConnection, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_close_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_sync](https://docs.gtk.org/gio/method.DBusConnection.close_sync.html)
    pub fn closeSync(self: *DBusConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_close_sync" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [emit_signal](https://docs.gtk.org/gio/method.DBusConnection.emit_signal.html)
    pub fn emitSignal(self: *DBusConnection, _destination_bus_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: ?*glib.Variant, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*glib.Variant, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_emit_signal" });
        const ret = cFn(self, _destination_bus_name, _object_path, _interface_name, _signal_name, _parameters, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [export_action_group](https://docs.gtk.org/gio/method.DBusConnection.export_action_group.html)
    pub fn exportActionGroup(self: *DBusConnection, _object_path: [*:0]const u8, _action_group: *gio.ActionGroup, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*DBusConnection, [*:0]const u8, *gio.ActionGroup, *?*core.Error) callconv(.c) u32, .{ .name = "g_dbus_connection_export_action_group" });
        const ret = cFn(self, _object_path, _action_group, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [export_menu_model](https://docs.gtk.org/gio/method.DBusConnection.export_menu_model.html)
    pub fn exportMenuModel(self: *DBusConnection, _object_path: [*:0]const u8, _menu: *gio.MenuModel, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*DBusConnection, [*:0]const u8, *gio.MenuModel, *?*core.Error) callconv(.c) u32, .{ .name = "g_dbus_connection_export_menu_model" });
        const ret = cFn(self, _object_path, _menu, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [flush](https://docs.gtk.org/gio/method.DBusConnection.flush.html)
    pub fn flush(self: *DBusConnection, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusConnection, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_flush" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [flush_finish](https://docs.gtk.org/gio/method.DBusConnection.flush_finish.html)
    pub fn flushFinish(self: *DBusConnection, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_flush_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [flush_sync](https://docs.gtk.org/gio/method.DBusConnection.flush_sync.html)
    pub fn flushSync(self: *DBusConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_flush_sync" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_capabilities](https://docs.gtk.org/gio/method.DBusConnection.get_capabilities.html)
    pub fn getCapabilities(self: *DBusConnection) gio.DBusCapabilityFlags {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) gio.DBusCapabilityFlags, .{ .name = "g_dbus_connection_get_capabilities" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_exit_on_close](https://docs.gtk.org/gio/method.DBusConnection.get_exit_on_close.html)
    pub fn getExitOnClose(self: *DBusConnection) bool {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) bool, .{ .name = "g_dbus_connection_get_exit_on_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusConnection.get_flags.html)
    pub fn getFlags(self: *DBusConnection) gio.DBusConnectionFlags {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) gio.DBusConnectionFlags, .{ .name = "g_dbus_connection_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_guid](https://docs.gtk.org/gio/method.DBusConnection.get_guid.html)
    pub fn getGuid(self: *DBusConnection) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) [*:0]u8, .{ .name = "g_dbus_connection_get_guid" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_last_serial](https://docs.gtk.org/gio/method.DBusConnection.get_last_serial.html)
    pub fn getLastSerial(self: *DBusConnection) u32 {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) u32, .{ .name = "g_dbus_connection_get_last_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_peer_credentials](https://docs.gtk.org/gio/method.DBusConnection.get_peer_credentials.html)
    pub fn getPeerCredentials(self: *DBusConnection) ?*gio.Credentials {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) ?*gio.Credentials, .{ .name = "g_dbus_connection_get_peer_credentials" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stream](https://docs.gtk.org/gio/method.DBusConnection.get_stream.html)
    pub fn getStream(self: *DBusConnection) *gio.IOStream {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) *gio.IOStream, .{ .name = "g_dbus_connection_get_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_unique_name](https://docs.gtk.org/gio/method.DBusConnection.get_unique_name.html)
    pub fn getUniqueName(self: *DBusConnection) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_connection_get_unique_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.DBusConnection.is_closed.html)
    pub fn isClosed(self: *DBusConnection) bool {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) bool, .{ .name = "g_dbus_connection_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [register_object](https://docs.gtk.org/gio/method.DBusConnection.register_object.html)
    pub fn registerObject(self: *DBusConnection, _object_path: [*:0]const u8, _interface_info: *gio.DBusInterfaceInfo, _method_call_closure: ?*gobject.Closure, _get_property_closure: ?*gobject.Closure, _set_property_closure: ?*gobject.Closure, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*DBusConnection, [*:0]const u8, *gio.DBusInterfaceInfo, ?*gobject.Closure, ?*gobject.Closure, ?*gobject.Closure, *?*core.Error) callconv(.c) u32, .{ .name = "g_dbus_connection_register_object_with_closures" });
        const ret = cFn(self, _object_path, _interface_info, _method_call_closure, _get_property_closure, _set_property_closure, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [register_subtree](https://docs.gtk.org/gio/method.DBusConnection.register_subtree.html)
    pub fn registerSubtree(self: *DBusConnection, _object_path: [*:0]const u8, _vtable: *gio.DBusSubtreeVTable, _flags: gio.DBusSubtreeFlags, _user_data: ?*anyopaque, _user_data_free_func: glib.DestroyNotify, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*DBusConnection, [*:0]const u8, *gio.DBusSubtreeVTable, gio.DBusSubtreeFlags, ?*anyopaque, glib.DestroyNotify, *?*core.Error) callconv(.c) u32, .{ .name = "g_dbus_connection_register_subtree" });
        const ret = cFn(self, _object_path, _vtable, _flags, @ptrCast(_user_data), _user_data_free_func, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_filter](https://docs.gtk.org/gio/method.DBusConnection.remove_filter.html)
    pub fn removeFilter(self: *DBusConnection, _filter_id: u32) void {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) void, .{ .name = "g_dbus_connection_remove_filter" });
        const ret = cFn(self, _filter_id);
        return ret;
    }
    /// method [send_message](https://docs.gtk.org/gio/method.DBusConnection.send_message.html)
    pub fn sendMessage(self: *DBusConnection, _message: *gio.DBusMessage, _flags: gio.DBusSendMessageFlags, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        out_serial: u32,
    } {
        var out_serial_out: u32 = undefined;
        const _out_serial = &out_serial_out;
        const cFn = @extern(*const fn (*DBusConnection, *gio.DBusMessage, gio.DBusSendMessageFlags, ?*u32, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_connection_send_message" });
        const ret = cFn(self, _message, _flags, _out_serial, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_serial = out_serial_out };
    }
    /// method [send_message_with_reply](https://docs.gtk.org/gio/method.DBusConnection.send_message_with_reply.html)
    pub fn sendMessageWithReply(self: *DBusConnection, _message: *gio.DBusMessage, _flags: gio.DBusSendMessageFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) struct {
        ret: void,
        out_serial: u32,
    } {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        var out_serial_out: u32 = undefined;
        const _out_serial = &out_serial_out;
        const cFn = @extern(*const fn (*DBusConnection, *gio.DBusMessage, gio.DBusSendMessageFlags, i32, ?*u32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_connection_send_message_with_reply" });
        const ret = cFn(self, _message, _flags, _timeout_msec, _out_serial, _cancellable, _callback, @ptrCast(_user_data));
        return .{ .ret = ret, .out_serial = out_serial_out };
    }
    /// method [send_message_with_reply_finish](https://docs.gtk.org/gio/method.DBusConnection.send_message_with_reply_finish.html)
    pub fn sendMessageWithReplyFinish(self: *DBusConnection, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.DBusMessage {
        const cFn = @extern(*const fn (*DBusConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_connection_send_message_with_reply_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_message_with_reply_sync](https://docs.gtk.org/gio/method.DBusConnection.send_message_with_reply_sync.html)
    pub fn sendMessageWithReplySync(self: *DBusConnection, _message: *gio.DBusMessage, _flags: gio.DBusSendMessageFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.DBusMessage,
        out_serial: u32,
    } {
        var out_serial_out: u32 = undefined;
        const _out_serial = &out_serial_out;
        const cFn = @extern(*const fn (*DBusConnection, *gio.DBusMessage, gio.DBusSendMessageFlags, i32, ?*u32, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_connection_send_message_with_reply_sync" });
        const ret = cFn(self, _message, _flags, _timeout_msec, _out_serial, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_serial = out_serial_out };
    }
    /// method [set_exit_on_close](https://docs.gtk.org/gio/method.DBusConnection.set_exit_on_close.html)
    pub fn setExitOnClose(self: *DBusConnection, _exit_on_close: bool) void {
        const cFn = @extern(*const fn (*DBusConnection, bool) callconv(.c) void, .{ .name = "g_dbus_connection_set_exit_on_close" });
        const ret = cFn(self, _exit_on_close);
        return ret;
    }
    /// method [signal_subscribe](https://docs.gtk.org/gio/method.DBusConnection.signal_subscribe.html)
    pub fn signalSubscribe(self: *DBusConnection, _sender: ?[*:0]const u8, _interface_name: ?[*:0]const u8, _member: ?[*:0]const u8, _object_path: ?[*:0]const u8, _arg0: ?[*:0]const u8, _flags: gio.DBusSignalFlags, callback: anytype, callback_args: anytype) u32 {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, *gio.DBusConnection, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, [*:0]const u8, *glib.Variant });
        const _callback: gio.DBusSignalCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const _user_data_free_func: ?glib.DestroyNotify = @ptrCast(closure_callback.c_destroy());
        const cFn = @extern(*const fn (*DBusConnection, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, gio.DBusSignalFlags, gio.DBusSignalCallback, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u32, .{ .name = "g_dbus_connection_signal_subscribe" });
        const ret = cFn(self, _sender, _interface_name, _member, _object_path, _arg0, _flags, _callback, @ptrCast(_user_data), _user_data_free_func);
        return ret;
    }
    /// method [signal_unsubscribe](https://docs.gtk.org/gio/method.DBusConnection.signal_unsubscribe.html)
    pub fn signalUnsubscribe(self: *DBusConnection, _subscription_id: u32) void {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) void, .{ .name = "g_dbus_connection_signal_unsubscribe" });
        const ret = cFn(self, _subscription_id);
        return ret;
    }
    /// method [start_message_processing](https://docs.gtk.org/gio/method.DBusConnection.start_message_processing.html)
    pub fn startMessageProcessing(self: *DBusConnection) void {
        const cFn = @extern(*const fn (*DBusConnection) callconv(.c) void, .{ .name = "g_dbus_connection_start_message_processing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unexport_action_group](https://docs.gtk.org/gio/method.DBusConnection.unexport_action_group.html)
    pub fn unexportActionGroup(self: *DBusConnection, _export_id: u32) void {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) void, .{ .name = "g_dbus_connection_unexport_action_group" });
        const ret = cFn(self, _export_id);
        return ret;
    }
    /// method [unexport_menu_model](https://docs.gtk.org/gio/method.DBusConnection.unexport_menu_model.html)
    pub fn unexportMenuModel(self: *DBusConnection, _export_id: u32) void {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) void, .{ .name = "g_dbus_connection_unexport_menu_model" });
        const ret = cFn(self, _export_id);
        return ret;
    }
    /// method [unregister_object](https://docs.gtk.org/gio/method.DBusConnection.unregister_object.html)
    pub fn unregisterObject(self: *DBusConnection, _registration_id: u32) bool {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) bool, .{ .name = "g_dbus_connection_unregister_object" });
        const ret = cFn(self, _registration_id);
        return ret;
    }
    /// method [unregister_subtree](https://docs.gtk.org/gio/method.DBusConnection.unregister_subtree.html)
    pub fn unregisterSubtree(self: *DBusConnection, _registration_id: u32) bool {
        const cFn = @extern(*const fn (*DBusConnection, u32) callconv(.c) bool, .{ .name = "g_dbus_connection_unregister_subtree" });
        const ret = cFn(self, _registration_id);
        return ret;
    }
    /// signal [closed](https://docs.gtk.org/gio/signal.DBusConnection.closed.html)
    pub fn connectClosed(self: *DBusConnection, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("closed", handler, args, flags, &.{ void, *DBusConnection, bool, ?*core.Error });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_connection_get_type" });
        return cFn();
    }
};
/// Flags [DBusConnectionFlags](https://docs.gtk.org/gio/flags.DBusConnectionFlags.html)
pub const DBusConnectionFlags = packed struct(u32) {
    authentication_client: bool = false,
    authentication_server: bool = false,
    authentication_allow_anonymous: bool = false,
    message_bus_connection: bool = false,
    delay_message_processing: bool = false,
    authentication_require_same_user: bool = false,
    cross_namespace: bool = false,
    _: u25 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_connection_flags_get_type" });
        return cFn();
    }
};
/// Error [DBusError](https://docs.gtk.org/gio/error.DBusError.html)
pub const DBusError = enum(u32) {
    failed = 0,
    no_memory = 1,
    service_unknown = 2,
    name_has_no_owner = 3,
    no_reply = 4,
    io_error = 5,
    bad_address = 6,
    not_supported = 7,
    limits_exceeded = 8,
    access_denied = 9,
    auth_failed = 10,
    no_server = 11,
    timeout = 12,
    no_network = 13,
    address_in_use = 14,
    disconnected = 15,
    invalid_args = 16,
    file_not_found = 17,
    file_exists = 18,
    unknown_method = 19,
    timed_out = 20,
    match_rule_not_found = 21,
    match_rule_invalid = 22,
    spawn_exec_failed = 23,
    spawn_fork_failed = 24,
    spawn_child_exited = 25,
    spawn_child_signaled = 26,
    spawn_failed = 27,
    spawn_setup_failed = 28,
    spawn_config_invalid = 29,
    spawn_service_invalid = 30,
    spawn_service_not_found = 31,
    spawn_permissions_invalid = 32,
    spawn_file_invalid = 33,
    spawn_no_memory = 34,
    unix_process_id_unknown = 35,
    invalid_signature = 36,
    invalid_file_content = 37,
    selinux_security_context_unknown = 38,
    adt_audit_data_unknown = 39,
    object_path_in_use = 40,
    unknown_object = 41,
    unknown_interface = 42,
    unknown_property = 43,
    property_read_only = 44,

    /// type func [encode_gerror](https://docs.gtk.org/gio/type_func.DBusError.encode_gerror.html)
    pub fn encodeGerror(_error: *core.Error) [*:0]u8 {
        const cFn = @extern(*const fn (*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_dbus_error_encode_gerror" });
        const ret = cFn(_error);
        return ret;
    }

    /// type func [get_remote_error](https://docs.gtk.org/gio/type_func.DBusError.get_remote_error.html)
    pub fn getRemoteError(_error: *core.Error) ?[*:0]u8 {
        const cFn = @extern(*const fn (*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_error_get_remote_error" });
        const ret = cFn(_error);
        return ret;
    }

    /// type func [is_remote_error](https://docs.gtk.org/gio/type_func.DBusError.is_remote_error.html)
    pub fn isRemoteError(_error: *core.Error) bool {
        const cFn = @extern(*const fn (*core.Error) callconv(.c) bool, .{ .name = "g_dbus_error_is_remote_error" });
        const ret = cFn(_error);
        return ret;
    }

    /// type func [new_for_dbus_error](https://docs.gtk.org/gio/type_func.DBusError.new_for_dbus_error.html)
    pub fn newForDbusError(_dbus_error_name: [*:0]const u8, _dbus_error_message: [*:0]const u8) *core.Error {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) *core.Error, .{ .name = "g_dbus_error_new_for_dbus_error" });
        const ret = cFn(_dbus_error_name, _dbus_error_message);
        return ret;
    }

    /// type func [quark](https://docs.gtk.org/gio/type_func.DBusError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_dbus_error_quark" });
        const ret = cFn();
        return ret;
    }

    /// type func [register_error](https://docs.gtk.org/gio/type_func.DBusError.register_error.html)
    pub fn registerError(_error_domain: u32, _error_code: i32, _dbus_error_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (u32, i32, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_error_register_error" });
        const ret = cFn(_error_domain, _error_code, _dbus_error_name);
        return ret;
    }

    /// type func [register_error_domain](https://docs.gtk.org/gio/type_func.DBusError.register_error_domain.html)
    pub fn registerErrorDomain(_error_domain_quark_name: [*:0]const u8, _quark_volatile: *u64, _entriess: []gio.DBusErrorEntry) void {
        const _entries = _entriess.ptr;
        const _num_entries: u32 = @intCast(_entriess.len);
        const cFn = @extern(*const fn ([*:0]const u8, *u64, [*]gio.DBusErrorEntry, u32) callconv(.c) void, .{ .name = "g_dbus_error_register_error_domain" });
        const ret = cFn(_error_domain_quark_name, _quark_volatile, _entries, _num_entries);
        return ret;
    }

    /// type func [strip_remote_error](https://docs.gtk.org/gio/type_func.DBusError.strip_remote_error.html)
    pub fn stripRemoteError(_error: *core.Error) bool {
        const cFn = @extern(*const fn (*core.Error) callconv(.c) bool, .{ .name = "g_dbus_error_strip_remote_error" });
        const ret = cFn(_error);
        return ret;
    }

    /// type func [unregister_error](https://docs.gtk.org/gio/type_func.DBusError.unregister_error.html)
    pub fn unregisterError(_error_domain: u32, _error_code: i32, _dbus_error_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (u32, i32, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_error_unregister_error" });
        const ret = cFn(_error_domain, _error_code, _dbus_error_name);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_error_get_type" });
        return cFn();
    }
};
/// Struct [DBusErrorEntry](https://docs.gtk.org/gio/struct.DBusErrorEntry.html)
pub const DBusErrorEntry = extern struct {
    error_code: i32,
    dbus_error_name: ?[*:0]const u8,
};
/// Iface [DBusInterface](https://docs.gtk.org/gio/iface.DBusInterface.html)
pub const DBusInterface = opaque {
    /// method [get_object](https://docs.gtk.org/gio/method.DBusInterface.get_object.html)
    pub fn getObject(self: *DBusInterface) ?*gio.DBusObject {
        const cFn = @extern(*const fn (*DBusInterface) callconv(.c) ?*gio.DBusObject, .{ .name = "g_dbus_interface_dup_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_info](https://docs.gtk.org/gio/method.DBusInterface.get_info.html)
    pub fn getInfo(self: *DBusInterface) *gio.DBusInterfaceInfo {
        const cFn = @extern(*const fn (*DBusInterface) callconv(.c) *gio.DBusInterfaceInfo, .{ .name = "g_dbus_interface_get_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_object](https://docs.gtk.org/gio/method.DBusInterface.set_object.html)
    pub fn setObject(self: *DBusInterface, _object: ?*gio.DBusObject) void {
        const cFn = @extern(*const fn (*DBusInterface, ?*gio.DBusObject) callconv(.c) void, .{ .name = "g_dbus_interface_set_object" });
        const ret = cFn(self, _object);
        return ret;
    }
    /// vfunc [dup_object](https://docs.gtk.org/gio/vfunc.DBusInterface.dup_object.html)
    pub fn dupObjectV(self: *DBusInterface) ?*gio.DBusObject {
        const class: *DBusInterfaceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dup_object.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_info](https://docs.gtk.org/gio/vfunc.DBusInterface.get_info.html)
    pub fn getInfoV(self: *DBusInterface) *gio.DBusInterfaceInfo {
        const class: *DBusInterfaceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_info.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_object](https://docs.gtk.org/gio/vfunc.DBusInterface.set_object.html)
    pub fn setObjectV(self: *DBusInterface, _object: ?*gio.DBusObject) void {
        const class: *DBusInterfaceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_object.?;
        const ret = vFn(self, _object);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_interface_get_type" });
        return cFn();
    }
};
/// callback [DBusInterfaceGetPropertyFunc](https://docs.gtk.org/gio/callback.DBusInterfaceGetPropertyFunc.html)
pub const DBusInterfaceGetPropertyFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _property_name: [*:0]const u8, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) *glib.Variant;
/// Struct [DBusInterfaceIface](https://docs.gtk.org/gio/struct.DBusInterfaceIface.html)
pub const DBusInterfaceIface = extern struct {
    parent_iface: gobject.TypeInterface,
    get_info: ?*const fn (_interface_: *gio.DBusInterface) callconv(.c) *gio.DBusInterfaceInfo,
    get_object: ?*const fn (_interface_: *gio.DBusInterface) callconv(.c) ?*gio.DBusObject,
    set_object: ?*const fn (_interface_: *gio.DBusInterface, _object: ?*gio.DBusObject) callconv(.c) void,
    dup_object: ?*const fn (_interface_: *gio.DBusInterface) callconv(.c) ?*gio.DBusObject,
};
/// Struct [DBusInterfaceInfo](https://docs.gtk.org/gio/struct.DBusInterfaceInfo.html)
pub const DBusInterfaceInfo = extern struct {
    ref_count: i32,
    name: ?[*:0]const u8,
    methods: ?[*:null]?*gio.DBusMethodInfo,
    signals: ?[*:null]?*gio.DBusSignalInfo,
    properties: ?[*:null]?*gio.DBusPropertyInfo,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [cache_build](https://docs.gtk.org/gio/method.DBusInterfaceInfo.cache_build.html)
    pub fn cacheBuild(self: *DBusInterfaceInfo) void {
        const cFn = @extern(*const fn (*DBusInterfaceInfo) callconv(.c) void, .{ .name = "g_dbus_interface_info_cache_build" });
        const ret = cFn(self);
        return ret;
    }
    /// method [cache_release](https://docs.gtk.org/gio/method.DBusInterfaceInfo.cache_release.html)
    pub fn cacheRelease(self: *DBusInterfaceInfo) void {
        const cFn = @extern(*const fn (*DBusInterfaceInfo) callconv(.c) void, .{ .name = "g_dbus_interface_info_cache_release" });
        const ret = cFn(self);
        return ret;
    }
    /// method [generate_xml](https://docs.gtk.org/gio/method.DBusInterfaceInfo.generate_xml.html)
    pub fn generateXml(self: *DBusInterfaceInfo, _indent: u32, _string_builder: *glib.String) void {
        const cFn = @extern(*const fn (*DBusInterfaceInfo, u32, *glib.String) callconv(.c) void, .{ .name = "g_dbus_interface_info_generate_xml" });
        const ret = cFn(self, _indent, _string_builder);
        return ret;
    }
    /// method [lookup_method](https://docs.gtk.org/gio/method.DBusInterfaceInfo.lookup_method.html)
    pub fn lookupMethod(self: *DBusInterfaceInfo, _name: [*:0]const u8) ?*gio.DBusMethodInfo {
        const cFn = @extern(*const fn (*DBusInterfaceInfo, [*:0]const u8) callconv(.c) ?*gio.DBusMethodInfo, .{ .name = "g_dbus_interface_info_lookup_method" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [lookup_property](https://docs.gtk.org/gio/method.DBusInterfaceInfo.lookup_property.html)
    pub fn lookupProperty(self: *DBusInterfaceInfo, _name: [*:0]const u8) ?*gio.DBusPropertyInfo {
        const cFn = @extern(*const fn (*DBusInterfaceInfo, [*:0]const u8) callconv(.c) ?*gio.DBusPropertyInfo, .{ .name = "g_dbus_interface_info_lookup_property" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [lookup_signal](https://docs.gtk.org/gio/method.DBusInterfaceInfo.lookup_signal.html)
    pub fn lookupSignal(self: *DBusInterfaceInfo, _name: [*:0]const u8) ?*gio.DBusSignalInfo {
        const cFn = @extern(*const fn (*DBusInterfaceInfo, [*:0]const u8) callconv(.c) ?*gio.DBusSignalInfo, .{ .name = "g_dbus_interface_info_lookup_signal" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.DBusInterfaceInfo.ref.html)
    pub fn ref(self: *DBusInterfaceInfo) *gio.DBusInterfaceInfo {
        const cFn = @extern(*const fn (*DBusInterfaceInfo) callconv(.c) *gio.DBusInterfaceInfo, .{ .name = "g_dbus_interface_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusInterfaceInfo.unref.html)
    pub fn unref(self: *DBusInterfaceInfo) void {
        const cFn = @extern(*const fn (*DBusInterfaceInfo) callconv(.c) void, .{ .name = "g_dbus_interface_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_interface_info_get_type" });
        return cFn();
    }
};
/// callback [DBusInterfaceMethodCallFunc](https://docs.gtk.org/gio/callback.DBusInterfaceMethodCallFunc.html)
pub const DBusInterfaceMethodCallFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: *glib.Variant, _invocation: *gio.DBusMethodInvocation, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [DBusInterfaceSetPropertyFunc](https://docs.gtk.org/gio/callback.DBusInterfaceSetPropertyFunc.html)
pub const DBusInterfaceSetPropertyFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _property_name: [*:0]const u8, _value: *glib.Variant, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [DBusInterfaceSkeleton](https://docs.gtk.org/gio/class.DBusInterfaceSkeleton.html)
/// - property [g-flags](https://docs.gtk.org/gio/property.DBusInterfaceSkeleton.g-flags.html): (rw) `gio.DBusInterfaceSkeletonFlags`
pub const DBusInterfaceSkeleton = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusInterfaceSkeletonPrivate,
    pub const Interfaces = [_]type{gio.DBusInterface};
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusInterfaceSkeletonClass;
    /// method [export](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.export.html)
    pub fn @"export"(self: *DBusInterfaceSkeleton, _connection: *gio.DBusConnection, _object_path: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton, *gio.DBusConnection, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_interface_skeleton_export" });
        const ret = cFn(self, _connection, _object_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [flush](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.flush.html)
    pub fn flush(self: *DBusInterfaceSkeleton) void {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) void, .{ .name = "g_dbus_interface_skeleton_flush" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_connection.html)
    pub fn getConnection(self: *DBusInterfaceSkeleton) ?*gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) ?*gio.DBusConnection, .{ .name = "g_dbus_interface_skeleton_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_connections](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_connections.html)
    pub fn getConnections(self: *DBusInterfaceSkeleton) ?*core.List {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) ?*core.List, .{ .name = "g_dbus_interface_skeleton_get_connections" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_flags.html)
    pub fn getFlags(self: *DBusInterfaceSkeleton) gio.DBusInterfaceSkeletonFlags {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) gio.DBusInterfaceSkeletonFlags, .{ .name = "g_dbus_interface_skeleton_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_info](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_info.html)
    pub fn getInfo(self: *DBusInterfaceSkeleton) *gio.DBusInterfaceInfo {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) *gio.DBusInterfaceInfo, .{ .name = "g_dbus_interface_skeleton_get_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object_path](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_object_path.html)
    pub fn getObjectPath(self: *DBusInterfaceSkeleton) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_interface_skeleton_get_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_properties](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_properties.html)
    pub fn getProperties(self: *DBusInterfaceSkeleton) *glib.Variant {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) *glib.Variant, .{ .name = "g_dbus_interface_skeleton_get_properties" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vtable](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.get_vtable.html)
    pub fn getVtable(self: *DBusInterfaceSkeleton) *gio.DBusInterfaceVTable {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) *gio.DBusInterfaceVTable, .{ .name = "g_dbus_interface_skeleton_get_vtable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_connection](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.has_connection.html)
    pub fn hasConnection(self: *DBusInterfaceSkeleton, _connection: *gio.DBusConnection) bool {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton, *gio.DBusConnection) callconv(.c) bool, .{ .name = "g_dbus_interface_skeleton_has_connection" });
        const ret = cFn(self, _connection);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.set_flags.html)
    pub fn setFlags(self: *DBusInterfaceSkeleton, _flags: gio.DBusInterfaceSkeletonFlags) void {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton, gio.DBusInterfaceSkeletonFlags) callconv(.c) void, .{ .name = "g_dbus_interface_skeleton_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [unexport](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.unexport.html)
    pub fn unexport(self: *DBusInterfaceSkeleton) void {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton) callconv(.c) void, .{ .name = "g_dbus_interface_skeleton_unexport" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unexport_from_connection](https://docs.gtk.org/gio/method.DBusInterfaceSkeleton.unexport_from_connection.html)
    pub fn unexportFromConnection(self: *DBusInterfaceSkeleton, _connection: *gio.DBusConnection) void {
        const cFn = @extern(*const fn (*DBusInterfaceSkeleton, *gio.DBusConnection) callconv(.c) void, .{ .name = "g_dbus_interface_skeleton_unexport_from_connection" });
        const ret = cFn(self, _connection);
        return ret;
    }
    /// vfunc [flush](https://docs.gtk.org/gio/vfunc.DBusInterfaceSkeleton.flush.html)
    pub fn flushV(self: *DBusInterfaceSkeleton) void {
        const class: *DBusInterfaceSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.flush.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [g_authorize_method](https://docs.gtk.org/gio/vfunc.DBusInterfaceSkeleton.g_authorize_method.html)
    pub fn gAuthorizeMethodV(self: *DBusInterfaceSkeleton, _invocation: *gio.DBusMethodInvocation) bool {
        const class: *DBusInterfaceSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.g_authorize_method.?;
        const ret = vFn(self, _invocation);
        return ret;
    }
    /// vfunc [get_info](https://docs.gtk.org/gio/vfunc.DBusInterfaceSkeleton.get_info.html)
    pub fn getInfoV(self: *DBusInterfaceSkeleton) *gio.DBusInterfaceInfo {
        const class: *DBusInterfaceSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_info.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_properties](https://docs.gtk.org/gio/vfunc.DBusInterfaceSkeleton.get_properties.html)
    pub fn getPropertiesV(self: *DBusInterfaceSkeleton) *glib.Variant {
        const class: *DBusInterfaceSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_properties.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_vtable](https://docs.gtk.org/gio/vfunc.DBusInterfaceSkeleton.get_vtable.html)
    pub fn getVtableV(self: *DBusInterfaceSkeleton) *gio.DBusInterfaceVTable {
        const class: *DBusInterfaceSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_vtable.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [g-authorize-method](https://docs.gtk.org/gio/signal.DBusInterfaceSkeleton.g-authorize-method.html)
    pub fn connectGAuthorizeMethod(self: *DBusInterfaceSkeleton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("g-authorize-method", handler, args, flags, &.{ bool, *DBusInterfaceSkeleton, *gio.DBusMethodInvocation });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_interface_skeleton_get_type" });
        return cFn();
    }
};
pub const DBusInterfaceSkeletonClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_info: ?*const fn (_interface_: *gio.DBusInterfaceSkeleton) callconv(.c) *gio.DBusInterfaceInfo,
    get_vtable: ?*const fn (_interface_: *gio.DBusInterfaceSkeleton) callconv(.c) *gio.DBusInterfaceVTable,
    get_properties: ?*const fn (_interface_: *gio.DBusInterfaceSkeleton) callconv(.c) *glib.Variant,
    flush: ?*const fn (_interface_: *gio.DBusInterfaceSkeleton) callconv(.c) void,
    vfunc_padding: [8]?*anyopaque,
    g_authorize_method: ?*const fn (_interface_: *gio.DBusInterfaceSkeleton, _invocation: *gio.DBusMethodInvocation) callconv(.c) bool,
    signal_padding: [8]?*anyopaque,
};
/// Flags [DBusInterfaceSkeletonFlags](https://docs.gtk.org/gio/flags.DBusInterfaceSkeletonFlags.html)
pub const DBusInterfaceSkeletonFlags = packed struct(u32) {
    handle_method_invocations_in_thread: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_interface_skeleton_flags_get_type" });
        return cFn();
    }
};
pub const DBusInterfaceSkeletonPrivate = opaque {};
/// Struct [DBusInterfaceVTable](https://docs.gtk.org/gio/struct.DBusInterfaceVTable.html)
pub const DBusInterfaceVTable = extern struct {
    method_call: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _method_name: [*:0]const u8, _parameters: *glib.Variant, _invocation: *gio.DBusMethodInvocation, _user_data: ?*anyopaque) callconv(.c) void,
    get_property: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _property_name: [*:0]const u8, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) *glib.Variant,
    set_property: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _property_name: [*:0]const u8, _value: *glib.Variant, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) bool,
    padding: [8]?*anyopaque,
};
/// Class [DBusMenuModel](https://docs.gtk.org/gio/class.DBusMenuModel.html)
pub const DBusMenuModel = opaque {
    pub const Parent = gio.MenuModel;
    /// type func [get](https://docs.gtk.org/gio/type_func.DBusMenuModel.get.html)
    pub fn get(_connection: *gio.DBusConnection, _bus_name: ?[*:0]const u8, _object_path: [*:0]const u8) *gio.DBusMenuModel {
        const cFn = @extern(*const fn (*gio.DBusConnection, ?[*:0]const u8, [*:0]const u8) callconv(.c) *gio.DBusMenuModel, .{ .name = "g_dbus_menu_model_get" });
        const ret = cFn(_connection, _bus_name, _object_path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_menu_model_get_type" });
        return cFn();
    }
};
/// Class [DBusMessage](https://docs.gtk.org/gio/class.DBusMessage.html)
/// - property [locked](https://docs.gtk.org/gio/property.DBusMessage.locked.html): (r-) `bool`
pub const DBusMessage = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DBusMessage.new.html)
    pub fn new() *DBusMessage {
        const cFn = @extern(*const fn () callconv(.c) *DBusMessage, .{ .name = "g_dbus_message_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_blob](https://docs.gtk.org/gio/ctor.DBusMessage.new_from_blob.html)
    pub fn newFromBlob(_blobs: []u8, _capabilities: gio.DBusCapabilityFlags, _error: *?*core.Error) error{GError}!*DBusMessage {
        const _blob = _blobs.ptr;
        const _blob_len: u64 = @intCast(_blobs.len);
        const cFn = @extern(*const fn ([*]u8, u64, gio.DBusCapabilityFlags, *?*core.Error) callconv(.c) *DBusMessage, .{ .name = "g_dbus_message_new_from_blob" });
        const ret = cFn(_blob, _blob_len, _capabilities, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_method_call](https://docs.gtk.org/gio/ctor.DBusMessage.new_method_call.html)
    pub fn newMethodCall(_name: ?[*:0]const u8, _path: [*:0]const u8, _interface_: ?[*:0]const u8, _method: [*:0]const u8) *DBusMessage {
        const cFn = @extern(*const fn (?[*:0]const u8, [*:0]const u8, ?[*:0]const u8, [*:0]const u8) callconv(.c) *DBusMessage, .{ .name = "g_dbus_message_new_method_call" });
        const ret = cFn(_name, _path, _interface_, _method);
        return ret;
    }
    /// ctor [new_signal](https://docs.gtk.org/gio/ctor.DBusMessage.new_signal.html)
    pub fn newSignal(_path: [*:0]const u8, _interface_: [*:0]const u8, _signal: [*:0]const u8) *DBusMessage {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) *DBusMessage, .{ .name = "g_dbus_message_new_signal" });
        const ret = cFn(_path, _interface_, _signal);
        return ret;
    }
    /// type func [bytes_needed](https://docs.gtk.org/gio/type_func.DBusMessage.bytes_needed.html)
    pub fn bytesNeeded(_blobs: []u8, _error: *?*core.Error) error{GError}!i64 {
        const _blob = _blobs.ptr;
        const _blob_len: u64 = @intCast(_blobs.len);
        const cFn = @extern(*const fn ([*]u8, u64, *?*core.Error) callconv(.c) i64, .{ .name = "g_dbus_message_bytes_needed" });
        const ret = cFn(_blob, _blob_len, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gio/method.DBusMessage.copy.html)
    pub fn copy(self: *DBusMessage, _error: *?*core.Error) error{GError}!*gio.DBusMessage {
        const cFn = @extern(*const fn (*DBusMessage, *?*core.Error) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_message_copy" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_arg0](https://docs.gtk.org/gio/method.DBusMessage.get_arg0.html)
    pub fn getArg0(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_arg0" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_arg0_path](https://docs.gtk.org/gio/method.DBusMessage.get_arg0_path.html)
    pub fn getArg0Path(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_arg0_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_body](https://docs.gtk.org/gio/method.DBusMessage.get_body.html)
    pub fn getBody(self: *DBusMessage) ?*glib.Variant {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?*glib.Variant, .{ .name = "g_dbus_message_get_body" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_byte_order](https://docs.gtk.org/gio/method.DBusMessage.get_byte_order.html)
    pub fn getByteOrder(self: *DBusMessage) gio.DBusMessageByteOrder {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) gio.DBusMessageByteOrder, .{ .name = "g_dbus_message_get_byte_order" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_destination](https://docs.gtk.org/gio/method.DBusMessage.get_destination.html)
    pub fn getDestination(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_destination" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_error_name](https://docs.gtk.org/gio/method.DBusMessage.get_error_name.html)
    pub fn getErrorName(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_error_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusMessage.get_flags.html)
    pub fn getFlags(self: *DBusMessage) gio.DBusMessageFlags {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) gio.DBusMessageFlags, .{ .name = "g_dbus_message_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header](https://docs.gtk.org/gio/method.DBusMessage.get_header.html)
    pub fn getHeader(self: *DBusMessage, _header_field: gio.DBusMessageHeaderField) ?*glib.Variant {
        const cFn = @extern(*const fn (*DBusMessage, gio.DBusMessageHeaderField) callconv(.c) ?*glib.Variant, .{ .name = "g_dbus_message_get_header" });
        const ret = cFn(self, _header_field);
        return ret;
    }
    /// method [get_header_fields](https://docs.gtk.org/gio/method.DBusMessage.get_header_fields.html)
    pub fn getHeaderFields(self: *DBusMessage) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) [*:0]u8, .{ .name = "g_dbus_message_get_header_fields" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interface](https://docs.gtk.org/gio/method.DBusMessage.get_interface.html)
    pub fn getInterface(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_interface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_locked](https://docs.gtk.org/gio/method.DBusMessage.get_locked.html)
    pub fn getLocked(self: *DBusMessage) bool {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) bool, .{ .name = "g_dbus_message_get_locked" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_member](https://docs.gtk.org/gio/method.DBusMessage.get_member.html)
    pub fn getMember(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_member" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_message_type](https://docs.gtk.org/gio/method.DBusMessage.get_message_type.html)
    pub fn getMessageType(self: *DBusMessage) gio.DBusMessageType {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) gio.DBusMessageType, .{ .name = "g_dbus_message_get_message_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_num_unix_fds](https://docs.gtk.org/gio/method.DBusMessage.get_num_unix_fds.html)
    pub fn getNumUnixFds(self: *DBusMessage) u32 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) u32, .{ .name = "g_dbus_message_get_num_unix_fds" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_path](https://docs.gtk.org/gio/method.DBusMessage.get_path.html)
    pub fn getPath(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_reply_serial](https://docs.gtk.org/gio/method.DBusMessage.get_reply_serial.html)
    pub fn getReplySerial(self: *DBusMessage) u32 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) u32, .{ .name = "g_dbus_message_get_reply_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sender](https://docs.gtk.org/gio/method.DBusMessage.get_sender.html)
    pub fn getSender(self: *DBusMessage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_message_get_sender" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_serial](https://docs.gtk.org/gio/method.DBusMessage.get_serial.html)
    pub fn getSerial(self: *DBusMessage) u32 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) u32, .{ .name = "g_dbus_message_get_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_signature](https://docs.gtk.org/gio/method.DBusMessage.get_signature.html)
    pub fn getSignature(self: *DBusMessage) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) [*:0]u8, .{ .name = "g_dbus_message_get_signature" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_unix_fd_list](https://docs.gtk.org/gio/method.DBusMessage.get_unix_fd_list.html)
    pub fn getUnixFdList(self: *DBusMessage) ?*gio.UnixFDList {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) ?*gio.UnixFDList, .{ .name = "g_dbus_message_get_unix_fd_list" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lock](https://docs.gtk.org/gio/method.DBusMessage.lock.html)
    pub fn lock(self: *DBusMessage) void {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) void, .{ .name = "g_dbus_message_lock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [new_method_error_literal](https://docs.gtk.org/gio/method.DBusMessage.new_method_error_literal.html)
    pub fn newMethodErrorLiteral(self: *DBusMessage, _error_name: [*:0]const u8, _error_message: [*:0]const u8) *gio.DBusMessage {
        const cFn = @extern(*const fn (*DBusMessage, [*:0]const u8, [*:0]const u8) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_message_new_method_error_literal" });
        const ret = cFn(self, _error_name, _error_message);
        return ret;
    }
    /// method [new_method_reply](https://docs.gtk.org/gio/method.DBusMessage.new_method_reply.html)
    pub fn newMethodReply(self: *DBusMessage) *gio.DBusMessage {
        const cFn = @extern(*const fn (*DBusMessage) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_message_new_method_reply" });
        const ret = cFn(self);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gio/method.DBusMessage.print.html)
    pub fn print(self: *DBusMessage, _indent: u32) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMessage, u32) callconv(.c) [*:0]u8, .{ .name = "g_dbus_message_print" });
        const ret = cFn(self, _indent);
        return ret;
    }
    /// method [set_body](https://docs.gtk.org/gio/method.DBusMessage.set_body.html)
    pub fn setBody(self: *DBusMessage, _body: *glib.Variant) void {
        const cFn = @extern(*const fn (*DBusMessage, *glib.Variant) callconv(.c) void, .{ .name = "g_dbus_message_set_body" });
        const ret = cFn(self, _body);
        return ret;
    }
    /// method [set_byte_order](https://docs.gtk.org/gio/method.DBusMessage.set_byte_order.html)
    pub fn setByteOrder(self: *DBusMessage, _byte_order: gio.DBusMessageByteOrder) void {
        const cFn = @extern(*const fn (*DBusMessage, gio.DBusMessageByteOrder) callconv(.c) void, .{ .name = "g_dbus_message_set_byte_order" });
        const ret = cFn(self, _byte_order);
        return ret;
    }
    /// method [set_destination](https://docs.gtk.org/gio/method.DBusMessage.set_destination.html)
    pub fn setDestination(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_destination" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_error_name](https://docs.gtk.org/gio/method.DBusMessage.set_error_name.html)
    pub fn setErrorName(self: *DBusMessage, _value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, [*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_error_name" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.DBusMessage.set_flags.html)
    pub fn setFlags(self: *DBusMessage, _flags: gio.DBusMessageFlags) void {
        const cFn = @extern(*const fn (*DBusMessage, gio.DBusMessageFlags) callconv(.c) void, .{ .name = "g_dbus_message_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_header](https://docs.gtk.org/gio/method.DBusMessage.set_header.html)
    pub fn setHeader(self: *DBusMessage, _header_field: gio.DBusMessageHeaderField, _value: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*DBusMessage, gio.DBusMessageHeaderField, ?*glib.Variant) callconv(.c) void, .{ .name = "g_dbus_message_set_header" });
        const ret = cFn(self, _header_field, _value);
        return ret;
    }
    /// method [set_interface](https://docs.gtk.org/gio/method.DBusMessage.set_interface.html)
    pub fn setInterface(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_interface" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_member](https://docs.gtk.org/gio/method.DBusMessage.set_member.html)
    pub fn setMember(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_member" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_message_type](https://docs.gtk.org/gio/method.DBusMessage.set_message_type.html)
    pub fn setMessageType(self: *DBusMessage, _type: gio.DBusMessageType) void {
        const cFn = @extern(*const fn (*DBusMessage, gio.DBusMessageType) callconv(.c) void, .{ .name = "g_dbus_message_set_message_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [set_num_unix_fds](https://docs.gtk.org/gio/method.DBusMessage.set_num_unix_fds.html)
    pub fn setNumUnixFds(self: *DBusMessage, _value: u32) void {
        const cFn = @extern(*const fn (*DBusMessage, u32) callconv(.c) void, .{ .name = "g_dbus_message_set_num_unix_fds" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_path](https://docs.gtk.org/gio/method.DBusMessage.set_path.html)
    pub fn setPath(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_path" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_reply_serial](https://docs.gtk.org/gio/method.DBusMessage.set_reply_serial.html)
    pub fn setReplySerial(self: *DBusMessage, _value: u32) void {
        const cFn = @extern(*const fn (*DBusMessage, u32) callconv(.c) void, .{ .name = "g_dbus_message_set_reply_serial" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_sender](https://docs.gtk.org/gio/method.DBusMessage.set_sender.html)
    pub fn setSender(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_sender" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_serial](https://docs.gtk.org/gio/method.DBusMessage.set_serial.html)
    pub fn setSerial(self: *DBusMessage, _serial: u32) void {
        const cFn = @extern(*const fn (*DBusMessage, u32) callconv(.c) void, .{ .name = "g_dbus_message_set_serial" });
        const ret = cFn(self, _serial);
        return ret;
    }
    /// method [set_signature](https://docs.gtk.org/gio/method.DBusMessage.set_signature.html)
    pub fn setSignature(self: *DBusMessage, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMessage, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_message_set_signature" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_unix_fd_list](https://docs.gtk.org/gio/method.DBusMessage.set_unix_fd_list.html)
    pub fn setUnixFdList(self: *DBusMessage, _fd_list: ?*gio.UnixFDList) void {
        const cFn = @extern(*const fn (*DBusMessage, ?*gio.UnixFDList) callconv(.c) void, .{ .name = "g_dbus_message_set_unix_fd_list" });
        const ret = cFn(self, _fd_list);
        return ret;
    }
    /// method [to_blob](https://docs.gtk.org/gio/method.DBusMessage.to_blob.html)
    pub fn toBlob(self: *DBusMessage, _capabilities: gio.DBusCapabilityFlags, _error: *?*core.Error) error{GError}!struct {
        ret: [*]u8,
        out_size: u64,
    } {
        var out_size_out: u64 = undefined;
        const _out_size = &out_size_out;
        const cFn = @extern(*const fn (*DBusMessage, *u64, gio.DBusCapabilityFlags, *?*core.Error) callconv(.c) [*]u8, .{ .name = "g_dbus_message_to_blob" });
        const ret = cFn(self, _out_size, _capabilities, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_size = out_size_out };
    }
    /// method [to_gerror](https://docs.gtk.org/gio/method.DBusMessage.to_gerror.html)
    pub fn toGerror(self: *DBusMessage, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DBusMessage, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_message_to_gerror" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_message_get_type" });
        return cFn();
    }
};
/// Enum [DBusMessageByteOrder](https://docs.gtk.org/gio/enum.DBusMessageByteOrder.html)
pub const DBusMessageByteOrder = enum(u32) {
    big_endian = 66,
    little_endian = 108,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_message_byte_order_get_type" });
        return cFn();
    }
};
/// callback [DBusMessageFilterFunction](https://docs.gtk.org/gio/callback.DBusMessageFilterFunction.html)
pub const DBusMessageFilterFunction = *const fn (_connection: *gio.DBusConnection, _message: *gio.DBusMessage, _incoming: bool, _user_data: ?*anyopaque) callconv(.c) ?*gio.DBusMessage;
/// Flags [DBusMessageFlags](https://docs.gtk.org/gio/flags.DBusMessageFlags.html)
pub const DBusMessageFlags = packed struct(u32) {
    no_reply_expected: bool = false,
    no_auto_start: bool = false,
    allow_interactive_authorization: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_message_flags_get_type" });
        return cFn();
    }
};
/// Enum [DBusMessageHeaderField](https://docs.gtk.org/gio/enum.DBusMessageHeaderField.html)
pub const DBusMessageHeaderField = enum(u32) {
    invalid = 0,
    path = 1,
    interface = 2,
    member = 3,
    error_name = 4,
    reply_serial = 5,
    destination = 6,
    sender = 7,
    signature = 8,
    num_unix_fds = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_message_header_field_get_type" });
        return cFn();
    }
};
/// Enum [DBusMessageType](https://docs.gtk.org/gio/enum.DBusMessageType.html)
pub const DBusMessageType = enum(u32) {
    invalid = 0,
    method_call = 1,
    method_return = 2,
    @"error" = 3,
    signal = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_message_type_get_type" });
        return cFn();
    }
};
/// Struct [DBusMethodInfo](https://docs.gtk.org/gio/struct.DBusMethodInfo.html)
pub const DBusMethodInfo = extern struct {
    ref_count: i32,
    name: ?[*:0]const u8,
    in_args: ?[*:null]?*gio.DBusArgInfo,
    out_args: ?[*:null]?*gio.DBusArgInfo,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [ref](https://docs.gtk.org/gio/method.DBusMethodInfo.ref.html)
    pub fn ref(self: *DBusMethodInfo) *gio.DBusMethodInfo {
        const cFn = @extern(*const fn (*DBusMethodInfo) callconv(.c) *gio.DBusMethodInfo, .{ .name = "g_dbus_method_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusMethodInfo.unref.html)
    pub fn unref(self: *DBusMethodInfo) void {
        const cFn = @extern(*const fn (*DBusMethodInfo) callconv(.c) void, .{ .name = "g_dbus_method_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_method_info_get_type" });
        return cFn();
    }
};
/// Class [DBusMethodInvocation](https://docs.gtk.org/gio/class.DBusMethodInvocation.html)
pub const DBusMethodInvocation = opaque {
    pub const Parent = gobject.Object;
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_connection.html)
    pub fn getConnection(self: *DBusMethodInvocation) *gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) *gio.DBusConnection, .{ .name = "g_dbus_method_invocation_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interface_name](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_interface_name.html)
    pub fn getInterfaceName(self: *DBusMethodInvocation) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) [*:0]u8, .{ .name = "g_dbus_method_invocation_get_interface_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_message](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_message.html)
    pub fn getMessage(self: *DBusMethodInvocation) *gio.DBusMessage {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) *gio.DBusMessage, .{ .name = "g_dbus_method_invocation_get_message" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_method_info](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_method_info.html)
    pub fn getMethodInfo(self: *DBusMethodInvocation) ?*gio.DBusMethodInfo {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) ?*gio.DBusMethodInfo, .{ .name = "g_dbus_method_invocation_get_method_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_method_name](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_method_name.html)
    pub fn getMethodName(self: *DBusMethodInvocation) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) [*:0]u8, .{ .name = "g_dbus_method_invocation_get_method_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object_path](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_object_path.html)
    pub fn getObjectPath(self: *DBusMethodInvocation) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) [*:0]u8, .{ .name = "g_dbus_method_invocation_get_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parameters](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_parameters.html)
    pub fn getParameters(self: *DBusMethodInvocation) *glib.Variant {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) *glib.Variant, .{ .name = "g_dbus_method_invocation_get_parameters" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_property_info](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_property_info.html)
    pub fn getPropertyInfo(self: *DBusMethodInvocation) ?*gio.DBusPropertyInfo {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) ?*gio.DBusPropertyInfo, .{ .name = "g_dbus_method_invocation_get_property_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sender](https://docs.gtk.org/gio/method.DBusMethodInvocation.get_sender.html)
    pub fn getSender(self: *DBusMethodInvocation) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusMethodInvocation) callconv(.c) [*:0]u8, .{ .name = "g_dbus_method_invocation_get_sender" });
        const ret = cFn(self);
        return ret;
    }
    /// method [return_dbus_error](https://docs.gtk.org/gio/method.DBusMethodInvocation.return_dbus_error.html)
    pub fn returnDbusError(self: *DBusMethodInvocation, _error_name: [*:0]const u8, _error_message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMethodInvocation, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_method_invocation_return_dbus_error" });
        const ret = cFn(self, _error_name, _error_message);
        return ret;
    }
    /// method [return_error_literal](https://docs.gtk.org/gio/method.DBusMethodInvocation.return_error_literal.html)
    pub fn returnErrorLiteral(self: *DBusMethodInvocation, _domain: u32, _code: i32, _message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusMethodInvocation, u32, i32, [*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_method_invocation_return_error_literal" });
        const ret = cFn(self, _domain, _code, _message);
        return ret;
    }
    /// method [return_gerror](https://docs.gtk.org/gio/method.DBusMethodInvocation.return_gerror.html)
    pub fn returnGerror(self: *DBusMethodInvocation, _error: *core.Error) void {
        const cFn = @extern(*const fn (*DBusMethodInvocation, *core.Error) callconv(.c) void, .{ .name = "g_dbus_method_invocation_return_gerror" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [return_value](https://docs.gtk.org/gio/method.DBusMethodInvocation.return_value.html)
    pub fn returnValue(self: *DBusMethodInvocation, _parameters: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*DBusMethodInvocation, ?*glib.Variant) callconv(.c) void, .{ .name = "g_dbus_method_invocation_return_value" });
        const ret = cFn(self, _parameters);
        return ret;
    }
    /// method [return_value_with_unix_fd_list](https://docs.gtk.org/gio/method.DBusMethodInvocation.return_value_with_unix_fd_list.html)
    pub fn returnValueWithUnixFdList(self: *DBusMethodInvocation, _parameters: ?*glib.Variant, _fd_list: ?*gio.UnixFDList) void {
        const cFn = @extern(*const fn (*DBusMethodInvocation, ?*glib.Variant, ?*gio.UnixFDList) callconv(.c) void, .{ .name = "g_dbus_method_invocation_return_value_with_unix_fd_list" });
        const ret = cFn(self, _parameters, _fd_list);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_method_invocation_get_type" });
        return cFn();
    }
};
/// Struct [DBusNodeInfo](https://docs.gtk.org/gio/struct.DBusNodeInfo.html)
pub const DBusNodeInfo = extern struct {
    ref_count: i32,
    path: ?[*:0]const u8,
    interfaces: ?[*:null]?*gio.DBusInterfaceInfo,
    nodes: ?[*:null]?*gio.DBusNodeInfo,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// ctor [new_for_xml](https://docs.gtk.org/gio/ctor.DBusNodeInfo.new_for_xml.html)
    pub fn newForXml(_xml_data: [*:0]const u8, _error: *?*core.Error) error{GError}!*DBusNodeInfo {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *DBusNodeInfo, .{ .name = "g_dbus_node_info_new_for_xml" });
        const ret = cFn(_xml_data, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [generate_xml](https://docs.gtk.org/gio/method.DBusNodeInfo.generate_xml.html)
    pub fn generateXml(self: *DBusNodeInfo, _indent: u32, _string_builder: *glib.String) void {
        const cFn = @extern(*const fn (*DBusNodeInfo, u32, *glib.String) callconv(.c) void, .{ .name = "g_dbus_node_info_generate_xml" });
        const ret = cFn(self, _indent, _string_builder);
        return ret;
    }
    /// method [lookup_interface](https://docs.gtk.org/gio/method.DBusNodeInfo.lookup_interface.html)
    pub fn lookupInterface(self: *DBusNodeInfo, _name: [*:0]const u8) ?*gio.DBusInterfaceInfo {
        const cFn = @extern(*const fn (*DBusNodeInfo, [*:0]const u8) callconv(.c) ?*gio.DBusInterfaceInfo, .{ .name = "g_dbus_node_info_lookup_interface" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.DBusNodeInfo.ref.html)
    pub fn ref(self: *DBusNodeInfo) *gio.DBusNodeInfo {
        const cFn = @extern(*const fn (*DBusNodeInfo) callconv(.c) *gio.DBusNodeInfo, .{ .name = "g_dbus_node_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusNodeInfo.unref.html)
    pub fn unref(self: *DBusNodeInfo) void {
        const cFn = @extern(*const fn (*DBusNodeInfo) callconv(.c) void, .{ .name = "g_dbus_node_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_node_info_get_type" });
        return cFn();
    }
};
/// Iface [DBusObject](https://docs.gtk.org/gio/iface.DBusObject.html)
pub const DBusObject = opaque {
    /// method [get_interface](https://docs.gtk.org/gio/method.DBusObject.get_interface.html)
    pub fn getInterface(self: *DBusObject, _interface_name: [*:0]const u8) ?*gio.DBusInterface {
        const cFn = @extern(*const fn (*DBusObject, [*:0]const u8) callconv(.c) ?*gio.DBusInterface, .{ .name = "g_dbus_object_get_interface" });
        const ret = cFn(self, _interface_name);
        return ret;
    }
    /// method [get_interfaces](https://docs.gtk.org/gio/method.DBusObject.get_interfaces.html)
    pub fn getInterfaces(self: *DBusObject) ?*core.List {
        const cFn = @extern(*const fn (*DBusObject) callconv(.c) ?*core.List, .{ .name = "g_dbus_object_get_interfaces" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object_path](https://docs.gtk.org/gio/method.DBusObject.get_object_path.html)
    pub fn getObjectPath(self: *DBusObject) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusObject) callconv(.c) [*:0]u8, .{ .name = "g_dbus_object_get_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_interface](https://docs.gtk.org/gio/vfunc.DBusObject.get_interface.html)
    pub fn getInterfaceV(self: *DBusObject, _interface_name: [*:0]const u8) ?*gio.DBusInterface {
        const class: *DBusObjectIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_interface.?;
        const ret = vFn(self, _interface_name);
        return ret;
    }
    /// vfunc [get_interfaces](https://docs.gtk.org/gio/vfunc.DBusObject.get_interfaces.html)
    pub fn getInterfacesV(self: *DBusObject) ?*core.List {
        const class: *DBusObjectIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_interfaces.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_object_path](https://docs.gtk.org/gio/vfunc.DBusObject.get_object_path.html)
    pub fn getObjectPathV(self: *DBusObject) [*:0]u8 {
        const class: *DBusObjectIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_object_path.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [interface_added](https://docs.gtk.org/gio/vfunc.DBusObject.interface_added.html)
    pub fn interfaceAddedV(self: *DBusObject, _interface_: *gio.DBusInterface) void {
        const class: *DBusObjectIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_added.?;
        const ret = vFn(self, _interface_);
        return ret;
    }
    /// vfunc [interface_removed](https://docs.gtk.org/gio/vfunc.DBusObject.interface_removed.html)
    pub fn interfaceRemovedV(self: *DBusObject, _interface_: *gio.DBusInterface) void {
        const class: *DBusObjectIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_removed.?;
        const ret = vFn(self, _interface_);
        return ret;
    }
    /// signal [interface-added](https://docs.gtk.org/gio/signal.DBusObject.interface-added.html)
    pub fn connectInterfaceAdded(self: *DBusObject, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-added", handler, args, flags, &.{ void, *DBusObject, *gio.DBusInterface });
    }
    /// signal [interface-removed](https://docs.gtk.org/gio/signal.DBusObject.interface-removed.html)
    pub fn connectInterfaceRemoved(self: *DBusObject, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-removed", handler, args, flags, &.{ void, *DBusObject, *gio.DBusInterface });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_get_type" });
        return cFn();
    }
};
/// Struct [DBusObjectIface](https://docs.gtk.org/gio/struct.DBusObjectIface.html)
pub const DBusObjectIface = extern struct {
    parent_iface: gobject.TypeInterface,
    get_object_path: ?*const fn (_object: *gio.DBusObject) callconv(.c) [*:0]u8,
    get_interfaces: ?*const fn (_object: *gio.DBusObject) callconv(.c) ?*core.List,
    get_interface: ?*const fn (_object: *gio.DBusObject, _interface_name: [*:0]const u8) callconv(.c) ?*gio.DBusInterface,
    interface_added: ?*const fn (_object: *gio.DBusObject, _interface_: *gio.DBusInterface) callconv(.c) void,
    interface_removed: ?*const fn (_object: *gio.DBusObject, _interface_: *gio.DBusInterface) callconv(.c) void,
};
/// Iface [DBusObjectManager](https://docs.gtk.org/gio/iface.DBusObjectManager.html)
pub const DBusObjectManager = opaque {
    /// method [get_interface](https://docs.gtk.org/gio/method.DBusObjectManager.get_interface.html)
    pub fn getInterface(self: *DBusObjectManager, _object_path: [*:0]const u8, _interface_name: [*:0]const u8) ?*gio.DBusInterface {
        const cFn = @extern(*const fn (*DBusObjectManager, [*:0]const u8, [*:0]const u8) callconv(.c) ?*gio.DBusInterface, .{ .name = "g_dbus_object_manager_get_interface" });
        const ret = cFn(self, _object_path, _interface_name);
        return ret;
    }
    /// method [get_object](https://docs.gtk.org/gio/method.DBusObjectManager.get_object.html)
    pub fn getObject(self: *DBusObjectManager, _object_path: [*:0]const u8) ?*gio.DBusObject {
        const cFn = @extern(*const fn (*DBusObjectManager, [*:0]const u8) callconv(.c) ?*gio.DBusObject, .{ .name = "g_dbus_object_manager_get_object" });
        const ret = cFn(self, _object_path);
        return ret;
    }
    /// method [get_object_path](https://docs.gtk.org/gio/method.DBusObjectManager.get_object_path.html)
    pub fn getObjectPath(self: *DBusObjectManager) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusObjectManager) callconv(.c) [*:0]u8, .{ .name = "g_dbus_object_manager_get_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_objects](https://docs.gtk.org/gio/method.DBusObjectManager.get_objects.html)
    pub fn getObjects(self: *DBusObjectManager) ?*core.List {
        const cFn = @extern(*const fn (*DBusObjectManager) callconv(.c) ?*core.List, .{ .name = "g_dbus_object_manager_get_objects" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_interface](https://docs.gtk.org/gio/vfunc.DBusObjectManager.get_interface.html)
    pub fn getInterfaceV(self: *DBusObjectManager, _object_path: [*:0]const u8, _interface_name: [*:0]const u8) ?*gio.DBusInterface {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_interface.?;
        const ret = vFn(self, _object_path, _interface_name);
        return ret;
    }
    /// vfunc [get_object](https://docs.gtk.org/gio/vfunc.DBusObjectManager.get_object.html)
    pub fn getObjectV(self: *DBusObjectManager, _object_path: [*:0]const u8) ?*gio.DBusObject {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_object.?;
        const ret = vFn(self, _object_path);
        return ret;
    }
    /// vfunc [get_object_path](https://docs.gtk.org/gio/vfunc.DBusObjectManager.get_object_path.html)
    pub fn getObjectPathV(self: *DBusObjectManager) [*:0]u8 {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_object_path.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_objects](https://docs.gtk.org/gio/vfunc.DBusObjectManager.get_objects.html)
    pub fn getObjectsV(self: *DBusObjectManager) ?*core.List {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_objects.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [interface_added](https://docs.gtk.org/gio/vfunc.DBusObjectManager.interface_added.html)
    pub fn interfaceAddedV(self: *DBusObjectManager, _object: *gio.DBusObject, _interface_: *gio.DBusInterface) void {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_added.?;
        const ret = vFn(self, _object, _interface_);
        return ret;
    }
    /// vfunc [interface_removed](https://docs.gtk.org/gio/vfunc.DBusObjectManager.interface_removed.html)
    pub fn interfaceRemovedV(self: *DBusObjectManager, _object: *gio.DBusObject, _interface_: *gio.DBusInterface) void {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_removed.?;
        const ret = vFn(self, _object, _interface_);
        return ret;
    }
    /// vfunc [object_added](https://docs.gtk.org/gio/vfunc.DBusObjectManager.object_added.html)
    pub fn objectAddedV(self: *DBusObjectManager, _object: *gio.DBusObject) void {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.object_added.?;
        const ret = vFn(self, _object);
        return ret;
    }
    /// vfunc [object_removed](https://docs.gtk.org/gio/vfunc.DBusObjectManager.object_removed.html)
    pub fn objectRemovedV(self: *DBusObjectManager, _object: *gio.DBusObject) void {
        const class: *DBusObjectManagerIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.object_removed.?;
        const ret = vFn(self, _object);
        return ret;
    }
    /// signal [interface-added](https://docs.gtk.org/gio/signal.DBusObjectManager.interface-added.html)
    pub fn connectInterfaceAdded(self: *DBusObjectManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-added", handler, args, flags, &.{ void, *DBusObjectManager, *gio.DBusObject, *gio.DBusInterface });
    }
    /// signal [interface-removed](https://docs.gtk.org/gio/signal.DBusObjectManager.interface-removed.html)
    pub fn connectInterfaceRemoved(self: *DBusObjectManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-removed", handler, args, flags, &.{ void, *DBusObjectManager, *gio.DBusObject, *gio.DBusInterface });
    }
    /// signal [object-added](https://docs.gtk.org/gio/signal.DBusObjectManager.object-added.html)
    pub fn connectObjectAdded(self: *DBusObjectManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("object-added", handler, args, flags, &.{ void, *DBusObjectManager, *gio.DBusObject });
    }
    /// signal [object-removed](https://docs.gtk.org/gio/signal.DBusObjectManager.object-removed.html)
    pub fn connectObjectRemoved(self: *DBusObjectManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("object-removed", handler, args, flags, &.{ void, *DBusObjectManager, *gio.DBusObject });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_manager_get_type" });
        return cFn();
    }
};
/// Class [DBusObjectManagerClient](https://docs.gtk.org/gio/class.DBusObjectManagerClient.html)
/// - property [bus-type](https://docs.gtk.org/gio/property.DBusObjectManagerClient.bus-type.html): (--) `gio.BusType`
/// - property [connection](https://docs.gtk.org/gio/property.DBusObjectManagerClient.connection.html): (r-) `gio.DBusConnection`
/// - property [flags](https://docs.gtk.org/gio/property.DBusObjectManagerClient.flags.html): (r-) `gio.DBusObjectManagerClientFlags`
/// - property [get-proxy-type-destroy-notify](https://docs.gtk.org/gio/property.DBusObjectManagerClient.get-proxy-type-destroy-notify.html): (r-) `*anyopaque`
/// - property [get-proxy-type-func](https://docs.gtk.org/gio/property.DBusObjectManagerClient.get-proxy-type-func.html): (r-) `*anyopaque`
/// - property [get-proxy-type-user-data](https://docs.gtk.org/gio/property.DBusObjectManagerClient.get-proxy-type-user-data.html): (r-) `*anyopaque`
/// - property [name](https://docs.gtk.org/gio/property.DBusObjectManagerClient.name.html): (r-) `[*:0]const u8`
/// - property [name-owner](https://docs.gtk.org/gio/property.DBusObjectManagerClient.name-owner.html): (r-) `[*:0]const u8`
/// - property [object-path](https://docs.gtk.org/gio/property.DBusObjectManagerClient.object-path.html): (r-) `[*:0]const u8`
pub const DBusObjectManagerClient = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusObjectManagerClientPrivate,
    pub const Interfaces = [_]type{ gio.AsyncInitable, gio.DBusObjectManager, gio.Initable };
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusObjectManagerClientClass;
    /// ctor [new_finish](https://docs.gtk.org/gio/ctor.DBusObjectManagerClient.new_finish.html)
    pub fn newFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusObjectManagerClient {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusObjectManagerClient, .{ .name = "g_dbus_object_manager_client_new_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_bus_finish](https://docs.gtk.org/gio/ctor.DBusObjectManagerClient.new_for_bus_finish.html)
    pub fn newForBusFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusObjectManagerClient {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusObjectManagerClient, .{ .name = "g_dbus_object_manager_client_new_for_bus_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_bus_sync](https://docs.gtk.org/gio/ctor.DBusObjectManagerClient.new_for_bus_sync.html)
    pub fn newForBusSync(_bus_type: gio.BusType, _flags: gio.DBusObjectManagerClientFlags, _name: [*:0]const u8, _object_path: [*:0]const u8, get_proxy_type_func: anytype, get_proxy_type_func_args: anytype, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusObjectManagerClient {
        var closure_get_proxy_type_func = core.zig_closure(get_proxy_type_func, get_proxy_type_func_args, &.{ core.Type, *gio.DBusObjectManagerClient, [*:0]const u8, ?[*:0]const u8 });
        const _get_proxy_type_func: ?gio.DBusProxyTypeFunc = @ptrCast(closure_get_proxy_type_func.c_closure());
        const _get_proxy_type_user_data: ?*anyopaque = @ptrCast(closure_get_proxy_type_func.c_data());
        const _get_proxy_type_destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_get_proxy_type_func.c_destroy());
        const cFn = @extern(*const fn (gio.BusType, gio.DBusObjectManagerClientFlags, [*:0]const u8, [*:0]const u8, ?gio.DBusProxyTypeFunc, ?*anyopaque, ?glib.DestroyNotify, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusObjectManagerClient, .{ .name = "g_dbus_object_manager_client_new_for_bus_sync" });
        const ret = cFn(_bus_type, _flags, _name, _object_path, _get_proxy_type_func, @ptrCast(_get_proxy_type_user_data), _get_proxy_type_destroy_notify, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_sync](https://docs.gtk.org/gio/ctor.DBusObjectManagerClient.new_sync.html)
    pub fn newSync(_connection: *gio.DBusConnection, _flags: gio.DBusObjectManagerClientFlags, _name: ?[*:0]const u8, _object_path: [*:0]const u8, get_proxy_type_func: anytype, get_proxy_type_func_args: anytype, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusObjectManagerClient {
        var closure_get_proxy_type_func = core.zig_closure(get_proxy_type_func, get_proxy_type_func_args, &.{ core.Type, *gio.DBusObjectManagerClient, [*:0]const u8, ?[*:0]const u8 });
        const _get_proxy_type_func: ?gio.DBusProxyTypeFunc = @ptrCast(closure_get_proxy_type_func.c_closure());
        const _get_proxy_type_user_data: ?*anyopaque = @ptrCast(closure_get_proxy_type_func.c_data());
        const _get_proxy_type_destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_get_proxy_type_func.c_destroy());
        const cFn = @extern(*const fn (*gio.DBusConnection, gio.DBusObjectManagerClientFlags, ?[*:0]const u8, [*:0]const u8, ?gio.DBusProxyTypeFunc, ?*anyopaque, ?glib.DestroyNotify, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusObjectManagerClient, .{ .name = "g_dbus_object_manager_client_new_sync" });
        const ret = cFn(_connection, _flags, _name, _object_path, _get_proxy_type_func, @ptrCast(_get_proxy_type_user_data), _get_proxy_type_destroy_notify, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new](https://docs.gtk.org/gio/type_func.DBusObjectManagerClient.new.html)
    pub fn new(_connection: *gio.DBusConnection, _flags: gio.DBusObjectManagerClientFlags, _name: [*:0]const u8, _object_path: [*:0]const u8, get_proxy_type_func: anytype, get_proxy_type_func_args: anytype, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_get_proxy_type_func = core.zig_closure(get_proxy_type_func, get_proxy_type_func_args, &.{ core.Type, *gio.DBusObjectManagerClient, [*:0]const u8, ?[*:0]const u8 });
        const _get_proxy_type_func: ?gio.DBusProxyTypeFunc = @ptrCast(closure_get_proxy_type_func.c_closure());
        const _get_proxy_type_user_data: ?*anyopaque = @ptrCast(closure_get_proxy_type_func.c_data());
        const _get_proxy_type_destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_get_proxy_type_func.c_destroy());
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.DBusConnection, gio.DBusObjectManagerClientFlags, [*:0]const u8, [*:0]const u8, ?gio.DBusProxyTypeFunc, ?*anyopaque, ?glib.DestroyNotify, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_object_manager_client_new" });
        const ret = cFn(_connection, _flags, _name, _object_path, _get_proxy_type_func, @ptrCast(_get_proxy_type_user_data), _get_proxy_type_destroy_notify, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_for_bus](https://docs.gtk.org/gio/type_func.DBusObjectManagerClient.new_for_bus.html)
    pub fn newForBus(_bus_type: gio.BusType, _flags: gio.DBusObjectManagerClientFlags, _name: [*:0]const u8, _object_path: [*:0]const u8, get_proxy_type_func: anytype, get_proxy_type_func_args: anytype, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_get_proxy_type_func = core.zig_closure(get_proxy_type_func, get_proxy_type_func_args, &.{ core.Type, *gio.DBusObjectManagerClient, [*:0]const u8, ?[*:0]const u8 });
        const _get_proxy_type_func: ?gio.DBusProxyTypeFunc = @ptrCast(closure_get_proxy_type_func.c_closure());
        const _get_proxy_type_user_data: ?*anyopaque = @ptrCast(closure_get_proxy_type_func.c_data());
        const _get_proxy_type_destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_get_proxy_type_func.c_destroy());
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (gio.BusType, gio.DBusObjectManagerClientFlags, [*:0]const u8, [*:0]const u8, ?gio.DBusProxyTypeFunc, ?*anyopaque, ?glib.DestroyNotify, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_object_manager_client_new_for_bus" });
        const ret = cFn(_bus_type, _flags, _name, _object_path, _get_proxy_type_func, @ptrCast(_get_proxy_type_user_data), _get_proxy_type_destroy_notify, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusObjectManagerClient.get_connection.html)
    pub fn getConnection(self: *DBusObjectManagerClient) *gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusObjectManagerClient) callconv(.c) *gio.DBusConnection, .{ .name = "g_dbus_object_manager_client_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusObjectManagerClient.get_flags.html)
    pub fn getFlags(self: *DBusObjectManagerClient) gio.DBusObjectManagerClientFlags {
        const cFn = @extern(*const fn (*DBusObjectManagerClient) callconv(.c) gio.DBusObjectManagerClientFlags, .{ .name = "g_dbus_object_manager_client_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.DBusObjectManagerClient.get_name.html)
    pub fn getName(self: *DBusObjectManagerClient) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusObjectManagerClient) callconv(.c) [*:0]u8, .{ .name = "g_dbus_object_manager_client_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name_owner](https://docs.gtk.org/gio/method.DBusObjectManagerClient.get_name_owner.html)
    pub fn getNameOwner(self: *DBusObjectManagerClient) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusObjectManagerClient) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_object_manager_client_get_name_owner" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [interface_proxy_properties_changed](https://docs.gtk.org/gio/vfunc.DBusObjectManagerClient.interface_proxy_properties_changed.html)
    pub fn interfaceProxyPropertiesChangedV(self: *DBusObjectManagerClient, _object_proxy: *gio.DBusObjectProxy, _interface_proxy: *gio.DBusProxy, _changed_properties: *glib.Variant, _invalidated_properties: [*:0]const u8) void {
        const class: *DBusObjectManagerClientClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_proxy_properties_changed.?;
        const ret = vFn(self, _object_proxy, _interface_proxy, _changed_properties, _invalidated_properties);
        return ret;
    }
    /// vfunc [interface_proxy_signal](https://docs.gtk.org/gio/vfunc.DBusObjectManagerClient.interface_proxy_signal.html)
    pub fn interfaceProxySignalV(self: *DBusObjectManagerClient, _object_proxy: *gio.DBusObjectProxy, _interface_proxy: *gio.DBusProxy, _sender_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: *glib.Variant) void {
        const class: *DBusObjectManagerClientClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.interface_proxy_signal.?;
        const ret = vFn(self, _object_proxy, _interface_proxy, _sender_name, _signal_name, _parameters);
        return ret;
    }
    /// signal [interface-proxy-properties-changed](https://docs.gtk.org/gio/signal.DBusObjectManagerClient.interface-proxy-properties-changed.html)
    pub fn connectInterfaceProxyPropertiesChanged(self: *DBusObjectManagerClient, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-proxy-properties-changed", handler, args, flags, &.{ void, *DBusObjectManagerClient, *gio.DBusObjectProxy, *gio.DBusProxy, *glib.Variant, [*:null]?[*:0]const u8 });
    }
    /// signal [interface-proxy-signal](https://docs.gtk.org/gio/signal.DBusObjectManagerClient.interface-proxy-signal.html)
    pub fn connectInterfaceProxySignal(self: *DBusObjectManagerClient, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("interface-proxy-signal", handler, args, flags, &.{ void, *DBusObjectManagerClient, *gio.DBusObjectProxy, *gio.DBusProxy, [*:0]const u8, [*:0]const u8, *glib.Variant });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_manager_client_get_type" });
        return cFn();
    }
};
pub const DBusObjectManagerClientClass = extern struct {
    parent_class: gobject.ObjectClass,
    interface_proxy_signal: ?*const fn (_manager: *gio.DBusObjectManagerClient, _object_proxy: *gio.DBusObjectProxy, _interface_proxy: *gio.DBusProxy, _sender_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: *glib.Variant) callconv(.c) void,
    interface_proxy_properties_changed: ?*const fn (_manager: *gio.DBusObjectManagerClient, _object_proxy: *gio.DBusObjectProxy, _interface_proxy: *gio.DBusProxy, _changed_properties: *glib.Variant, _invalidated_properties: [*:0]const u8) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Flags [DBusObjectManagerClientFlags](https://docs.gtk.org/gio/flags.DBusObjectManagerClientFlags.html)
pub const DBusObjectManagerClientFlags = packed struct(u32) {
    do_not_auto_start: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_manager_client_flags_get_type" });
        return cFn();
    }
};
pub const DBusObjectManagerClientPrivate = opaque {};
/// Struct [DBusObjectManagerIface](https://docs.gtk.org/gio/struct.DBusObjectManagerIface.html)
pub const DBusObjectManagerIface = extern struct {
    parent_iface: gobject.TypeInterface,
    get_object_path: ?*const fn (_manager: *gio.DBusObjectManager) callconv(.c) [*:0]u8,
    get_objects: ?*const fn (_manager: *gio.DBusObjectManager) callconv(.c) ?*core.List,
    get_object: ?*const fn (_manager: *gio.DBusObjectManager, _object_path: [*:0]const u8) callconv(.c) ?*gio.DBusObject,
    get_interface: ?*const fn (_manager: *gio.DBusObjectManager, _object_path: [*:0]const u8, _interface_name: [*:0]const u8) callconv(.c) ?*gio.DBusInterface,
    object_added: ?*const fn (_manager: *gio.DBusObjectManager, _object: *gio.DBusObject) callconv(.c) void,
    object_removed: ?*const fn (_manager: *gio.DBusObjectManager, _object: *gio.DBusObject) callconv(.c) void,
    interface_added: ?*const fn (_manager: *gio.DBusObjectManager, _object: *gio.DBusObject, _interface_: *gio.DBusInterface) callconv(.c) void,
    interface_removed: ?*const fn (_manager: *gio.DBusObjectManager, _object: *gio.DBusObject, _interface_: *gio.DBusInterface) callconv(.c) void,
};
/// Class [DBusObjectManagerServer](https://docs.gtk.org/gio/class.DBusObjectManagerServer.html)
/// - property [connection](https://docs.gtk.org/gio/property.DBusObjectManagerServer.connection.html): (rw) `gio.DBusConnection`
/// - property [object-path](https://docs.gtk.org/gio/property.DBusObjectManagerServer.object-path.html): (r-) `[*:0]const u8`
pub const DBusObjectManagerServer = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusObjectManagerServerPrivate,
    pub const Interfaces = [_]type{gio.DBusObjectManager};
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusObjectManagerServerClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DBusObjectManagerServer.new.html)
    pub fn new(_object_path: [*:0]const u8) *DBusObjectManagerServer {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *DBusObjectManagerServer, .{ .name = "g_dbus_object_manager_server_new" });
        const ret = cFn(_object_path);
        return ret;
    }
    /// method [export](https://docs.gtk.org/gio/method.DBusObjectManagerServer.export.html)
    pub fn @"export"(self: *DBusObjectManagerServer, _object: *gio.DBusObjectSkeleton) void {
        const cFn = @extern(*const fn (*DBusObjectManagerServer, *gio.DBusObjectSkeleton) callconv(.c) void, .{ .name = "g_dbus_object_manager_server_export" });
        const ret = cFn(self, _object);
        return ret;
    }
    /// method [export_uniquely](https://docs.gtk.org/gio/method.DBusObjectManagerServer.export_uniquely.html)
    pub fn exportUniquely(self: *DBusObjectManagerServer, _object: *gio.DBusObjectSkeleton) void {
        const cFn = @extern(*const fn (*DBusObjectManagerServer, *gio.DBusObjectSkeleton) callconv(.c) void, .{ .name = "g_dbus_object_manager_server_export_uniquely" });
        const ret = cFn(self, _object);
        return ret;
    }
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusObjectManagerServer.get_connection.html)
    pub fn getConnection(self: *DBusObjectManagerServer) ?*gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusObjectManagerServer) callconv(.c) ?*gio.DBusConnection, .{ .name = "g_dbus_object_manager_server_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_exported](https://docs.gtk.org/gio/method.DBusObjectManagerServer.is_exported.html)
    pub fn isExported(self: *DBusObjectManagerServer, _object: *gio.DBusObjectSkeleton) bool {
        const cFn = @extern(*const fn (*DBusObjectManagerServer, *gio.DBusObjectSkeleton) callconv(.c) bool, .{ .name = "g_dbus_object_manager_server_is_exported" });
        const ret = cFn(self, _object);
        return ret;
    }
    /// method [set_connection](https://docs.gtk.org/gio/method.DBusObjectManagerServer.set_connection.html)
    pub fn setConnection(self: *DBusObjectManagerServer, _connection: ?*gio.DBusConnection) void {
        const cFn = @extern(*const fn (*DBusObjectManagerServer, ?*gio.DBusConnection) callconv(.c) void, .{ .name = "g_dbus_object_manager_server_set_connection" });
        const ret = cFn(self, _connection);
        return ret;
    }
    /// method [unexport](https://docs.gtk.org/gio/method.DBusObjectManagerServer.unexport.html)
    pub fn unexport(self: *DBusObjectManagerServer, _object_path: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*DBusObjectManagerServer, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_object_manager_server_unexport" });
        const ret = cFn(self, _object_path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_manager_server_get_type" });
        return cFn();
    }
};
pub const DBusObjectManagerServerClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const DBusObjectManagerServerPrivate = opaque {};
/// Class [DBusObjectProxy](https://docs.gtk.org/gio/class.DBusObjectProxy.html)
/// - property [g-connection](https://docs.gtk.org/gio/property.DBusObjectProxy.g-connection.html): (r-) `gio.DBusConnection`
/// - property [g-object-path](https://docs.gtk.org/gio/property.DBusObjectProxy.g-object-path.html): (r-) `[*:0]const u8`
pub const DBusObjectProxy = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusObjectProxyPrivate,
    pub const Interfaces = [_]type{gio.DBusObject};
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusObjectProxyClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DBusObjectProxy.new.html)
    pub fn new(_connection: *gio.DBusConnection, _object_path: [*:0]const u8) *DBusObjectProxy {
        const cFn = @extern(*const fn (*gio.DBusConnection, [*:0]const u8) callconv(.c) *DBusObjectProxy, .{ .name = "g_dbus_object_proxy_new" });
        const ret = cFn(_connection, _object_path);
        return ret;
    }
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusObjectProxy.get_connection.html)
    pub fn getConnection(self: *DBusObjectProxy) *gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusObjectProxy) callconv(.c) *gio.DBusConnection, .{ .name = "g_dbus_object_proxy_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_proxy_get_type" });
        return cFn();
    }
};
pub const DBusObjectProxyClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const DBusObjectProxyPrivate = opaque {};
/// Class [DBusObjectSkeleton](https://docs.gtk.org/gio/class.DBusObjectSkeleton.html)
/// - property [g-object-path](https://docs.gtk.org/gio/property.DBusObjectSkeleton.g-object-path.html): (rw) `[*:0]const u8`
pub const DBusObjectSkeleton = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusObjectSkeletonPrivate,
    pub const Interfaces = [_]type{gio.DBusObject};
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusObjectSkeletonClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DBusObjectSkeleton.new.html)
    pub fn new(_object_path: [*:0]const u8) *DBusObjectSkeleton {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *DBusObjectSkeleton, .{ .name = "g_dbus_object_skeleton_new" });
        const ret = cFn(_object_path);
        return ret;
    }
    /// method [add_interface](https://docs.gtk.org/gio/method.DBusObjectSkeleton.add_interface.html)
    pub fn addInterface(self: *DBusObjectSkeleton, _interface_: *gio.DBusInterfaceSkeleton) void {
        const cFn = @extern(*const fn (*DBusObjectSkeleton, *gio.DBusInterfaceSkeleton) callconv(.c) void, .{ .name = "g_dbus_object_skeleton_add_interface" });
        const ret = cFn(self, _interface_);
        return ret;
    }
    /// method [flush](https://docs.gtk.org/gio/method.DBusObjectSkeleton.flush.html)
    pub fn flush(self: *DBusObjectSkeleton) void {
        const cFn = @extern(*const fn (*DBusObjectSkeleton) callconv(.c) void, .{ .name = "g_dbus_object_skeleton_flush" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_interface](https://docs.gtk.org/gio/method.DBusObjectSkeleton.remove_interface.html)
    pub fn removeInterface(self: *DBusObjectSkeleton, _interface_: *gio.DBusInterfaceSkeleton) void {
        const cFn = @extern(*const fn (*DBusObjectSkeleton, *gio.DBusInterfaceSkeleton) callconv(.c) void, .{ .name = "g_dbus_object_skeleton_remove_interface" });
        const ret = cFn(self, _interface_);
        return ret;
    }
    /// method [remove_interface_by_name](https://docs.gtk.org/gio/method.DBusObjectSkeleton.remove_interface_by_name.html)
    pub fn removeInterfaceByName(self: *DBusObjectSkeleton, _interface_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusObjectSkeleton, [*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_object_skeleton_remove_interface_by_name" });
        const ret = cFn(self, _interface_name);
        return ret;
    }
    /// method [set_object_path](https://docs.gtk.org/gio/method.DBusObjectSkeleton.set_object_path.html)
    pub fn setObjectPath(self: *DBusObjectSkeleton, _object_path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*DBusObjectSkeleton, [*:0]const u8) callconv(.c) void, .{ .name = "g_dbus_object_skeleton_set_object_path" });
        const ret = cFn(self, _object_path);
        return ret;
    }
    /// vfunc [authorize_method](https://docs.gtk.org/gio/vfunc.DBusObjectSkeleton.authorize_method.html)
    pub fn authorizeMethodV(self: *DBusObjectSkeleton, _interface_: *gio.DBusInterfaceSkeleton, _invocation: *gio.DBusMethodInvocation) bool {
        const class: *DBusObjectSkeletonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.authorize_method.?;
        const ret = vFn(self, _interface_, _invocation);
        return ret;
    }
    /// signal [authorize-method](https://docs.gtk.org/gio/signal.DBusObjectSkeleton.authorize-method.html)
    pub fn connectAuthorizeMethod(self: *DBusObjectSkeleton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("authorize-method", handler, args, flags, &.{ bool, *DBusObjectSkeleton, *gio.DBusInterfaceSkeleton, *gio.DBusMethodInvocation });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_object_skeleton_get_type" });
        return cFn();
    }
};
pub const DBusObjectSkeletonClass = extern struct {
    parent_class: gobject.ObjectClass,
    authorize_method: ?*const fn (_object: *gio.DBusObjectSkeleton, _interface_: *gio.DBusInterfaceSkeleton, _invocation: *gio.DBusMethodInvocation) callconv(.c) bool,
    padding: [8]?*anyopaque,
};
pub const DBusObjectSkeletonPrivate = opaque {};
/// Struct [DBusPropertyInfo](https://docs.gtk.org/gio/struct.DBusPropertyInfo.html)
pub const DBusPropertyInfo = extern struct {
    ref_count: i32,
    name: ?[*:0]const u8,
    signature: ?[*:0]const u8,
    flags: gio.DBusPropertyInfoFlags,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [ref](https://docs.gtk.org/gio/method.DBusPropertyInfo.ref.html)
    pub fn ref(self: *DBusPropertyInfo) *gio.DBusPropertyInfo {
        const cFn = @extern(*const fn (*DBusPropertyInfo) callconv(.c) *gio.DBusPropertyInfo, .{ .name = "g_dbus_property_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusPropertyInfo.unref.html)
    pub fn unref(self: *DBusPropertyInfo) void {
        const cFn = @extern(*const fn (*DBusPropertyInfo) callconv(.c) void, .{ .name = "g_dbus_property_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_property_info_get_type" });
        return cFn();
    }
};
/// Flags [DBusPropertyInfoFlags](https://docs.gtk.org/gio/flags.DBusPropertyInfoFlags.html)
pub const DBusPropertyInfoFlags = packed struct(u32) {
    readable: bool = false,
    writable: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_property_info_flags_get_type" });
        return cFn();
    }
};
/// Class [DBusProxy](https://docs.gtk.org/gio/class.DBusProxy.html)
/// - property [g-bus-type](https://docs.gtk.org/gio/property.DBusProxy.g-bus-type.html): (--) `gio.BusType`
/// - property [g-connection](https://docs.gtk.org/gio/property.DBusProxy.g-connection.html): (r-) `gio.DBusConnection`
/// - property [g-default-timeout](https://docs.gtk.org/gio/property.DBusProxy.g-default-timeout.html): (rw) `i32`
/// - property [g-flags](https://docs.gtk.org/gio/property.DBusProxy.g-flags.html): (r-) `gio.DBusProxyFlags`
/// - property [g-interface-info](https://docs.gtk.org/gio/property.DBusProxy.g-interface-info.html): (rw) `gio.DBusInterfaceInfo`
/// - property [g-interface-name](https://docs.gtk.org/gio/property.DBusProxy.g-interface-name.html): (r-) `[*:0]const u8`
/// - property [g-name](https://docs.gtk.org/gio/property.DBusProxy.g-name.html): (r-) `[*:0]const u8`
/// - property [g-name-owner](https://docs.gtk.org/gio/property.DBusProxy.g-name-owner.html): (r-) `[*:0]const u8`
/// - property [g-object-path](https://docs.gtk.org/gio/property.DBusProxy.g-object-path.html): (r-) `[*:0]const u8`
pub const DBusProxy = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.DBusProxyPrivate,
    pub const Interfaces = [_]type{ gio.AsyncInitable, gio.DBusInterface, gio.Initable };
    pub const Parent = gobject.Object;
    pub const Class = gio.DBusProxyClass;
    /// ctor [new_finish](https://docs.gtk.org/gio/ctor.DBusProxy.new_finish.html)
    pub fn newFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusProxy {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusProxy, .{ .name = "g_dbus_proxy_new_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_bus_finish](https://docs.gtk.org/gio/ctor.DBusProxy.new_for_bus_finish.html)
    pub fn newForBusFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*DBusProxy {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *DBusProxy, .{ .name = "g_dbus_proxy_new_for_bus_finish" });
        const ret = cFn(_res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_for_bus_sync](https://docs.gtk.org/gio/ctor.DBusProxy.new_for_bus_sync.html)
    pub fn newForBusSync(_bus_type: gio.BusType, _flags: gio.DBusProxyFlags, _info: ?*gio.DBusInterfaceInfo, _name: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusProxy {
        const cFn = @extern(*const fn (gio.BusType, gio.DBusProxyFlags, ?*gio.DBusInterfaceInfo, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusProxy, .{ .name = "g_dbus_proxy_new_for_bus_sync" });
        const ret = cFn(_bus_type, _flags, _info, _name, _object_path, _interface_name, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_sync](https://docs.gtk.org/gio/ctor.DBusProxy.new_sync.html)
    pub fn newSync(_connection: *gio.DBusConnection, _flags: gio.DBusProxyFlags, _info: ?*gio.DBusInterfaceInfo, _name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusProxy {
        const cFn = @extern(*const fn (*gio.DBusConnection, gio.DBusProxyFlags, ?*gio.DBusInterfaceInfo, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusProxy, .{ .name = "g_dbus_proxy_new_sync" });
        const ret = cFn(_connection, _flags, _info, _name, _object_path, _interface_name, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new](https://docs.gtk.org/gio/type_func.DBusProxy.new.html)
    pub fn new(_connection: *gio.DBusConnection, _flags: gio.DBusProxyFlags, _info: ?*gio.DBusInterfaceInfo, _name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*gio.DBusConnection, gio.DBusProxyFlags, ?*gio.DBusInterfaceInfo, ?[*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_proxy_new" });
        const ret = cFn(_connection, _flags, _info, _name, _object_path, _interface_name, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_for_bus](https://docs.gtk.org/gio/type_func.DBusProxy.new_for_bus.html)
    pub fn newForBus(_bus_type: gio.BusType, _flags: gio.DBusProxyFlags, _info: ?*gio.DBusInterfaceInfo, _name: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (gio.BusType, gio.DBusProxyFlags, ?*gio.DBusInterfaceInfo, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_proxy_new_for_bus" });
        const ret = cFn(_bus_type, _flags, _info, _name, _object_path, _interface_name, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [call](https://docs.gtk.org/gio/method.DBusProxy.call.html)
    pub fn call(self: *DBusProxy, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _flags: gio.DBusCallFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8, ?*glib.Variant, gio.DBusCallFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_proxy_call" });
        const ret = cFn(self, _method_name, _parameters, _flags, _timeout_msec, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [call_finish](https://docs.gtk.org/gio/method.DBusProxy.call_finish.html)
    pub fn callFinish(self: *DBusProxy, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*glib.Variant {
        const cFn = @extern(*const fn (*DBusProxy, *gio.AsyncResult, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_proxy_call_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [call_sync](https://docs.gtk.org/gio/method.DBusProxy.call_sync.html)
    pub fn callSync(self: *DBusProxy, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _flags: gio.DBusCallFlags, _timeout_msec: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*glib.Variant {
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8, ?*glib.Variant, gio.DBusCallFlags, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_proxy_call_sync" });
        const ret = cFn(self, _method_name, _parameters, _flags, _timeout_msec, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [call_with_unix_fd_list](https://docs.gtk.org/gio/method.DBusProxy.call_with_unix_fd_list.html)
    pub fn callWithUnixFdList(self: *DBusProxy, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _flags: gio.DBusCallFlags, _timeout_msec: i32, _fd_list: ?*gio.UnixFDList, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8, ?*glib.Variant, gio.DBusCallFlags, i32, ?*gio.UnixFDList, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_proxy_call_with_unix_fd_list" });
        const ret = cFn(self, _method_name, _parameters, _flags, _timeout_msec, _fd_list, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [call_with_unix_fd_list_finish](https://docs.gtk.org/gio/method.DBusProxy.call_with_unix_fd_list_finish.html)
    pub fn callWithUnixFdListFinish(self: *DBusProxy, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Variant,
        out_fd_list: *gio.UnixFDList,
    } {
        var out_fd_list_out: *gio.UnixFDList = undefined;
        const _out_fd_list = &out_fd_list_out;
        const cFn = @extern(*const fn (*DBusProxy, ?**gio.UnixFDList, *gio.AsyncResult, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_proxy_call_with_unix_fd_list_finish" });
        const ret = cFn(self, _out_fd_list, _res, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_fd_list = out_fd_list_out };
    }
    /// method [call_with_unix_fd_list_sync](https://docs.gtk.org/gio/method.DBusProxy.call_with_unix_fd_list_sync.html)
    pub fn callWithUnixFdListSync(self: *DBusProxy, _method_name: [*:0]const u8, _parameters: ?*glib.Variant, _flags: gio.DBusCallFlags, _timeout_msec: i32, _fd_list: ?*gio.UnixFDList, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Variant,
        out_fd_list: *gio.UnixFDList,
    } {
        var out_fd_list_out: *gio.UnixFDList = undefined;
        const _out_fd_list = &out_fd_list_out;
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8, ?*glib.Variant, gio.DBusCallFlags, i32, ?*gio.UnixFDList, ?**gio.UnixFDList, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Variant, .{ .name = "g_dbus_proxy_call_with_unix_fd_list_sync" });
        const ret = cFn(self, _method_name, _parameters, _flags, _timeout_msec, _fd_list, _out_fd_list, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_fd_list = out_fd_list_out };
    }
    /// method [get_cached_property](https://docs.gtk.org/gio/method.DBusProxy.get_cached_property.html)
    pub fn getCachedProperty(self: *DBusProxy, _property_name: [*:0]const u8) ?*glib.Variant {
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8) callconv(.c) ?*glib.Variant, .{ .name = "g_dbus_proxy_get_cached_property" });
        const ret = cFn(self, _property_name);
        return ret;
    }
    /// method [get_cached_property_names](https://docs.gtk.org/gio/method.DBusProxy.get_cached_property_names.html)
    pub fn getCachedPropertyNames(self: *DBusProxy) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "g_dbus_proxy_get_cached_property_names" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_connection](https://docs.gtk.org/gio/method.DBusProxy.get_connection.html)
    pub fn getConnection(self: *DBusProxy) *gio.DBusConnection {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) *gio.DBusConnection, .{ .name = "g_dbus_proxy_get_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_timeout](https://docs.gtk.org/gio/method.DBusProxy.get_default_timeout.html)
    pub fn getDefaultTimeout(self: *DBusProxy) i32 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) i32, .{ .name = "g_dbus_proxy_get_default_timeout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusProxy.get_flags.html)
    pub fn getFlags(self: *DBusProxy) gio.DBusProxyFlags {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) gio.DBusProxyFlags, .{ .name = "g_dbus_proxy_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interface_info](https://docs.gtk.org/gio/method.DBusProxy.get_interface_info.html)
    pub fn getInterfaceInfo(self: *DBusProxy) ?*gio.DBusInterfaceInfo {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) ?*gio.DBusInterfaceInfo, .{ .name = "g_dbus_proxy_get_interface_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interface_name](https://docs.gtk.org/gio/method.DBusProxy.get_interface_name.html)
    pub fn getInterfaceName(self: *DBusProxy) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) [*:0]u8, .{ .name = "g_dbus_proxy_get_interface_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.DBusProxy.get_name.html)
    pub fn getName(self: *DBusProxy) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_proxy_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name_owner](https://docs.gtk.org/gio/method.DBusProxy.get_name_owner.html)
    pub fn getNameOwner(self: *DBusProxy) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_proxy_get_name_owner" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object_path](https://docs.gtk.org/gio/method.DBusProxy.get_object_path.html)
    pub fn getObjectPath(self: *DBusProxy) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusProxy) callconv(.c) [*:0]u8, .{ .name = "g_dbus_proxy_get_object_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_cached_property](https://docs.gtk.org/gio/method.DBusProxy.set_cached_property.html)
    pub fn setCachedProperty(self: *DBusProxy, _property_name: [*:0]const u8, _value: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*DBusProxy, [*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_dbus_proxy_set_cached_property" });
        const ret = cFn(self, _property_name, _value);
        return ret;
    }
    /// method [set_default_timeout](https://docs.gtk.org/gio/method.DBusProxy.set_default_timeout.html)
    pub fn setDefaultTimeout(self: *DBusProxy, _timeout_msec: i32) void {
        const cFn = @extern(*const fn (*DBusProxy, i32) callconv(.c) void, .{ .name = "g_dbus_proxy_set_default_timeout" });
        const ret = cFn(self, _timeout_msec);
        return ret;
    }
    /// method [set_interface_info](https://docs.gtk.org/gio/method.DBusProxy.set_interface_info.html)
    pub fn setInterfaceInfo(self: *DBusProxy, _info: ?*gio.DBusInterfaceInfo) void {
        const cFn = @extern(*const fn (*DBusProxy, ?*gio.DBusInterfaceInfo) callconv(.c) void, .{ .name = "g_dbus_proxy_set_interface_info" });
        const ret = cFn(self, _info);
        return ret;
    }
    /// vfunc [g_properties_changed](https://docs.gtk.org/gio/vfunc.DBusProxy.g_properties_changed.html)
    pub fn gPropertiesChangedV(self: *DBusProxy, _changed_properties: *glib.Variant, _invalidated_properties: [*:0]const u8) void {
        const class: *DBusProxyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.g_properties_changed.?;
        const ret = vFn(self, _changed_properties, _invalidated_properties);
        return ret;
    }
    /// vfunc [g_signal](https://docs.gtk.org/gio/vfunc.DBusProxy.g_signal.html)
    pub fn gSignalV(self: *DBusProxy, _sender_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: *glib.Variant) void {
        const class: *DBusProxyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.g_signal.?;
        const ret = vFn(self, _sender_name, _signal_name, _parameters);
        return ret;
    }
    /// signal [g-properties-changed](https://docs.gtk.org/gio/signal.DBusProxy.g-properties-changed.html)
    pub fn connectGPropertiesChanged(self: *DBusProxy, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("g-properties-changed", handler, args, flags, &.{ void, *DBusProxy, *glib.Variant, [*:null]?[*:0]const u8 });
    }
    /// signal [g-signal](https://docs.gtk.org/gio/signal.DBusProxy.g-signal.html)
    pub fn connectGSignal(self: *DBusProxy, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("g-signal", handler, args, flags, &.{ void, *DBusProxy, ?[*:0]const u8, [*:0]const u8, *glib.Variant });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_proxy_get_type" });
        return cFn();
    }
};
pub const DBusProxyClass = extern struct {
    parent_class: gobject.ObjectClass,
    g_properties_changed: ?*const fn (_proxy: *gio.DBusProxy, _changed_properties: *glib.Variant, _invalidated_properties: [*:0]const u8) callconv(.c) void,
    g_signal: ?*const fn (_proxy: *gio.DBusProxy, _sender_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: *glib.Variant) callconv(.c) void,
    padding: [32]?*anyopaque,
};
/// Flags [DBusProxyFlags](https://docs.gtk.org/gio/flags.DBusProxyFlags.html)
pub const DBusProxyFlags = packed struct(u32) {
    do_not_load_properties: bool = false,
    do_not_connect_signals: bool = false,
    do_not_auto_start: bool = false,
    get_invalidated_properties: bool = false,
    do_not_auto_start_at_construction: bool = false,
    no_match_rule: bool = false,
    _: u26 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_proxy_flags_get_type" });
        return cFn();
    }
};
pub const DBusProxyPrivate = opaque {};
/// callback [DBusProxyTypeFunc](https://docs.gtk.org/gio/callback.DBusProxyTypeFunc.html)
pub const DBusProxyTypeFunc = *const fn (_manager: *gio.DBusObjectManagerClient, _object_path: [*:0]const u8, _interface_name: ?[*:0]const u8, _data: ?*anyopaque) callconv(.c) core.Type;
/// Flags [DBusSendMessageFlags](https://docs.gtk.org/gio/flags.DBusSendMessageFlags.html)
pub const DBusSendMessageFlags = packed struct(u32) {
    preserve_serial: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_send_message_flags_get_type" });
        return cFn();
    }
};
/// Class [DBusServer](https://docs.gtk.org/gio/class.DBusServer.html)
/// - property [active](https://docs.gtk.org/gio/property.DBusServer.active.html): (r-) `bool`
/// - property [address](https://docs.gtk.org/gio/property.DBusServer.address.html): (r-) `[*:0]const u8`
/// - property [authentication-observer](https://docs.gtk.org/gio/property.DBusServer.authentication-observer.html): (r-) `gio.DBusAuthObserver`
/// - property [client-address](https://docs.gtk.org/gio/property.DBusServer.client-address.html): (r-) `[*:0]const u8`
/// - property [flags](https://docs.gtk.org/gio/property.DBusServer.flags.html): (r-) `gio.DBusServerFlags`
/// - property [guid](https://docs.gtk.org/gio/property.DBusServer.guid.html): (r-) `[*:0]const u8`
pub const DBusServer = opaque {
    pub const Interfaces = [_]type{gio.Initable};
    pub const Parent = gobject.Object;
    /// ctor [new_sync](https://docs.gtk.org/gio/ctor.DBusServer.new_sync.html)
    pub fn newSync(_address: [*:0]const u8, _flags: gio.DBusServerFlags, _guid: [*:0]const u8, _observer: ?*gio.DBusAuthObserver, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*DBusServer {
        const cFn = @extern(*const fn ([*:0]const u8, gio.DBusServerFlags, [*:0]const u8, ?*gio.DBusAuthObserver, ?*gio.Cancellable, *?*core.Error) callconv(.c) *DBusServer, .{ .name = "g_dbus_server_new_sync" });
        const ret = cFn(_address, _flags, _guid, _observer, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_client_address](https://docs.gtk.org/gio/method.DBusServer.get_client_address.html)
    pub fn getClientAddress(self: *DBusServer) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) [*:0]u8, .{ .name = "g_dbus_server_get_client_address" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.DBusServer.get_flags.html)
    pub fn getFlags(self: *DBusServer) gio.DBusServerFlags {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) gio.DBusServerFlags, .{ .name = "g_dbus_server_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_guid](https://docs.gtk.org/gio/method.DBusServer.get_guid.html)
    pub fn getGuid(self: *DBusServer) [*:0]u8 {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) [*:0]u8, .{ .name = "g_dbus_server_get_guid" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gio/method.DBusServer.is_active.html)
    pub fn isActive(self: *DBusServer) bool {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) bool, .{ .name = "g_dbus_server_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [start](https://docs.gtk.org/gio/method.DBusServer.start.html)
    pub fn start(self: *DBusServer) void {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) void, .{ .name = "g_dbus_server_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gio/method.DBusServer.stop.html)
    pub fn stop(self: *DBusServer) void {
        const cFn = @extern(*const fn (*DBusServer) callconv(.c) void, .{ .name = "g_dbus_server_stop" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [new-connection](https://docs.gtk.org/gio/signal.DBusServer.new-connection.html)
    pub fn connectNewConnection(self: *DBusServer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("new-connection", handler, args, flags, &.{ bool, *DBusServer, *gio.DBusConnection });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_server_get_type" });
        return cFn();
    }
};
/// Flags [DBusServerFlags](https://docs.gtk.org/gio/flags.DBusServerFlags.html)
pub const DBusServerFlags = packed struct(u32) {
    run_in_thread: bool = false,
    authentication_allow_anonymous: bool = false,
    authentication_require_same_user: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_server_flags_get_type" });
        return cFn();
    }
};
/// callback [DBusSignalCallback](https://docs.gtk.org/gio/callback.DBusSignalCallback.html)
pub const DBusSignalCallback = *const fn (_connection: *gio.DBusConnection, _sender_name: ?[*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _signal_name: [*:0]const u8, _parameters: *glib.Variant, _user_data: ?*anyopaque) callconv(.c) void;
/// Flags [DBusSignalFlags](https://docs.gtk.org/gio/flags.DBusSignalFlags.html)
pub const DBusSignalFlags = packed struct(u32) {
    no_match_rule: bool = false,
    match_arg0_namespace: bool = false,
    match_arg0_path: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_signal_flags_get_type" });
        return cFn();
    }
};
/// Struct [DBusSignalInfo](https://docs.gtk.org/gio/struct.DBusSignalInfo.html)
pub const DBusSignalInfo = extern struct {
    ref_count: i32,
    name: ?[*:0]const u8,
    args: ?[*:null]?*gio.DBusArgInfo,
    annotations: ?[*:null]?*gio.DBusAnnotationInfo,
    /// method [ref](https://docs.gtk.org/gio/method.DBusSignalInfo.ref.html)
    pub fn ref(self: *DBusSignalInfo) *gio.DBusSignalInfo {
        const cFn = @extern(*const fn (*DBusSignalInfo) callconv(.c) *gio.DBusSignalInfo, .{ .name = "g_dbus_signal_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.DBusSignalInfo.unref.html)
    pub fn unref(self: *DBusSignalInfo) void {
        const cFn = @extern(*const fn (*DBusSignalInfo) callconv(.c) void, .{ .name = "g_dbus_signal_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_signal_info_get_type" });
        return cFn();
    }
};
/// callback [DBusSubtreeDispatchFunc](https://docs.gtk.org/gio/callback.DBusSubtreeDispatchFunc.html)
pub const DBusSubtreeDispatchFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _node: [*:0]const u8, _out_user_data: *anyopaque, _user_data: ?*anyopaque) callconv(.c) ?*gio.DBusInterfaceVTable;
/// callback [DBusSubtreeEnumerateFunc](https://docs.gtk.org/gio/callback.DBusSubtreeEnumerateFunc.html)
pub const DBusSubtreeEnumerateFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) [*:null]?[*:0]const u8;
/// Flags [DBusSubtreeFlags](https://docs.gtk.org/gio/flags.DBusSubtreeFlags.html)
pub const DBusSubtreeFlags = packed struct(u32) {
    dispatch_to_unenumerated_nodes: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dbus_subtree_flags_get_type" });
        return cFn();
    }
};
/// callback [DBusSubtreeIntrospectFunc](https://docs.gtk.org/gio/callback.DBusSubtreeIntrospectFunc.html)
pub const DBusSubtreeIntrospectFunc = *const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _node: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) ?[*:null]?*gio.DBusInterfaceInfo;
/// Struct [DBusSubtreeVTable](https://docs.gtk.org/gio/struct.DBusSubtreeVTable.html)
pub const DBusSubtreeVTable = extern struct {
    enumerate: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) [*:null]?[*:0]const u8,
    introspect: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _node: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) ?[*:null]?*gio.DBusInterfaceInfo,
    dispatch: ?*const fn (_connection: *gio.DBusConnection, _sender: [*:0]const u8, _object_path: [*:0]const u8, _interface_name: [*:0]const u8, _node: [*:0]const u8, _out_user_data: *anyopaque, _user_data: ?*anyopaque) callconv(.c) ?*gio.DBusInterfaceVTable,
    padding: [8]?*anyopaque,
};
/// const [DEBUG_CONTROLLER_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.DEBUG_CONTROLLER_EXTENSION_POINT_NAME.html)
pub const DEBUG_CONTROLLER_EXTENSION_POINT_NAME = "gio-debug-controller";
/// Deprecated:
/// const [DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME.html)
pub const DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = if (config.disable_deprecated) core.Deprecated else "gio-desktop-app-info-lookup";
/// const [DRIVE_IDENTIFIER_KIND_UNIX_DEVICE](https://docs.gtk.org/gio/const.DRIVE_IDENTIFIER_KIND_UNIX_DEVICE.html)
pub const DRIVE_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
/// Class [DataInputStream](https://docs.gtk.org/gio/class.DataInputStream.html)
/// - property [byte-order](https://docs.gtk.org/gio/property.DataInputStream.byte-order.html): (rw) `gio.DataStreamByteOrder`
/// - property [newline-type](https://docs.gtk.org/gio/property.DataInputStream.newline-type.html): (rw) `gio.DataStreamNewlineType`
pub const DataInputStream = extern struct {
    parent_instance: gio.BufferedInputStream,
    priv: ?*gio.DataInputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.BufferedInputStream;
    pub const Class = gio.DataInputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DataInputStream.new.html)
    pub fn new(_base_stream: *gio.InputStream) *DataInputStream {
        const cFn = @extern(*const fn (*gio.InputStream) callconv(.c) *DataInputStream, .{ .name = "g_data_input_stream_new" });
        const ret = cFn(_base_stream);
        return ret;
    }
    /// method [get_byte_order](https://docs.gtk.org/gio/method.DataInputStream.get_byte_order.html)
    pub fn getByteOrder(self: *DataInputStream) gio.DataStreamByteOrder {
        const cFn = @extern(*const fn (*DataInputStream) callconv(.c) gio.DataStreamByteOrder, .{ .name = "g_data_input_stream_get_byte_order" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_newline_type](https://docs.gtk.org/gio/method.DataInputStream.get_newline_type.html)
    pub fn getNewlineType(self: *DataInputStream) gio.DataStreamNewlineType {
        const cFn = @extern(*const fn (*DataInputStream) callconv(.c) gio.DataStreamNewlineType, .{ .name = "g_data_input_stream_get_newline_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_byte](https://docs.gtk.org/gio/method.DataInputStream.read_byte.html)
    pub fn readByte(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!u8 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) u8, .{ .name = "g_data_input_stream_read_byte" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_int16](https://docs.gtk.org/gio/method.DataInputStream.read_int16.html)
    pub fn readInt16(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i16 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) i16, .{ .name = "g_data_input_stream_read_int16" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_int32](https://docs.gtk.org/gio/method.DataInputStream.read_int32.html)
    pub fn readInt32(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_data_input_stream_read_int32" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_int64](https://docs.gtk.org/gio/method.DataInputStream.read_int64.html)
    pub fn readInt64(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_data_input_stream_read_int64" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_line](https://docs.gtk.org/gio/method.DataInputStream.read_line.html)
    pub fn readLine(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: ?[*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_data_input_stream_read_line" });
        const ret = cFn(self, _length, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [read_line_async](https://docs.gtk.org/gio/method.DataInputStream.read_line_async.html)
    pub fn readLineAsync(self: *DataInputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DataInputStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_data_input_stream_read_line_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_line_finish](https://docs.gtk.org/gio/method.DataInputStream.read_line_finish.html)
    pub fn readLineFinish(self: *DataInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: ?[*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_data_input_stream_read_line_finish" });
        const ret = cFn(self, _result, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [read_line_finish_utf8](https://docs.gtk.org/gio/method.DataInputStream.read_line_finish_utf8.html)
    pub fn readLineFinishUtf8(self: *DataInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: ?[*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_data_input_stream_read_line_finish_utf8" });
        const ret = cFn(self, _result, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [read_line_utf8](https://docs.gtk.org/gio/method.DataInputStream.read_line_utf8.html)
    pub fn readLineUtf8(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: ?[*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_data_input_stream_read_line_utf8" });
        const ret = cFn(self, _length, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [read_uint16](https://docs.gtk.org/gio/method.DataInputStream.read_uint16.html)
    pub fn readUint16(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!u16 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) u16, .{ .name = "g_data_input_stream_read_uint16" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_uint32](https://docs.gtk.org/gio/method.DataInputStream.read_uint32.html)
    pub fn readUint32(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!u32 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) u32, .{ .name = "g_data_input_stream_read_uint32" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_uint64](https://docs.gtk.org/gio/method.DataInputStream.read_uint64.html)
    pub fn readUint64(self: *DataInputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!u64 {
        const cFn = @extern(*const fn (*DataInputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) u64, .{ .name = "g_data_input_stream_read_uint64" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [read_until](https://docs.gtk.org/gio/method.DataInputStream.read_until.html)
    pub const readUntil = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn readUntil(self: *DataInputStream, _stop_chars: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
            ret: [*:0]u8,
            length: u64,
        } {
            var length_out: u64 = undefined;
            const _length = &length_out;
            const cFn = @extern(*const fn (*DataInputStream, [*:0]const u8, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_data_input_stream_read_until" });
            const ret = cFn(self, _stop_chars, _length, _cancellable, _error);
            if (_error.* != null) return error.GError;
            return .{ .ret = ret, .length = length_out };
        }
    }.readUntil;
    /// Deprecated:
    /// method [read_until_async](https://docs.gtk.org/gio/method.DataInputStream.read_until_async.html)
    pub const readUntilAsync = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn readUntilAsync(self: *DataInputStream, _stop_chars: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*DataInputStream, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_data_input_stream_read_until_async" });
            const ret = cFn(self, _stop_chars, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.readUntilAsync;
    /// Deprecated:
    /// method [read_until_finish](https://docs.gtk.org/gio/method.DataInputStream.read_until_finish.html)
    pub const readUntilFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn readUntilFinish(self: *DataInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
            ret: [*:0]u8,
            length: u64,
        } {
            var length_out: u64 = undefined;
            const _length = &length_out;
            const cFn = @extern(*const fn (*DataInputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_data_input_stream_read_until_finish" });
            const ret = cFn(self, _result, _length, _error);
            if (_error.* != null) return error.GError;
            return .{ .ret = ret, .length = length_out };
        }
    }.readUntilFinish;
    /// method [read_upto](https://docs.gtk.org/gio/method.DataInputStream.read_upto.html)
    pub fn readUpto(self: *DataInputStream, _stop_chars: [*:0]const u8, _stop_chars_len: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, [*:0]const u8, i64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_data_input_stream_read_upto" });
        const ret = cFn(self, _stop_chars, _stop_chars_len, _length, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [read_upto_async](https://docs.gtk.org/gio/method.DataInputStream.read_upto_async.html)
    pub fn readUptoAsync(self: *DataInputStream, _stop_chars: [*:0]const u8, _stop_chars_len: i64, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DataInputStream, [*:0]const u8, i64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_data_input_stream_read_upto_async" });
        const ret = cFn(self, _stop_chars, _stop_chars_len, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_upto_finish](https://docs.gtk.org/gio/method.DataInputStream.read_upto_finish.html)
    pub fn readUptoFinish(self: *DataInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: [*:0]u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DataInputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_data_input_stream_read_upto_finish" });
        const ret = cFn(self, _result, _length, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .length = length_out };
    }
    /// method [set_byte_order](https://docs.gtk.org/gio/method.DataInputStream.set_byte_order.html)
    pub fn setByteOrder(self: *DataInputStream, _order: gio.DataStreamByteOrder) void {
        const cFn = @extern(*const fn (*DataInputStream, gio.DataStreamByteOrder) callconv(.c) void, .{ .name = "g_data_input_stream_set_byte_order" });
        const ret = cFn(self, _order);
        return ret;
    }
    /// method [set_newline_type](https://docs.gtk.org/gio/method.DataInputStream.set_newline_type.html)
    pub fn setNewlineType(self: *DataInputStream, _type: gio.DataStreamNewlineType) void {
        const cFn = @extern(*const fn (*DataInputStream, gio.DataStreamNewlineType) callconv(.c) void, .{ .name = "g_data_input_stream_set_newline_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_data_input_stream_get_type" });
        return cFn();
    }
};
pub const DataInputStreamClass = extern struct {
    parent_class: gio.BufferedInputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const DataInputStreamPrivate = opaque {};
/// Class [DataOutputStream](https://docs.gtk.org/gio/class.DataOutputStream.html)
/// - property [byte-order](https://docs.gtk.org/gio/property.DataOutputStream.byte-order.html): (rw) `gio.DataStreamByteOrder`
pub const DataOutputStream = extern struct {
    parent_instance: gio.FilterOutputStream,
    priv: ?*gio.DataOutputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.FilterOutputStream;
    pub const Class = gio.DataOutputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DataOutputStream.new.html)
    pub fn new(_base_stream: *gio.OutputStream) *DataOutputStream {
        const cFn = @extern(*const fn (*gio.OutputStream) callconv(.c) *DataOutputStream, .{ .name = "g_data_output_stream_new" });
        const ret = cFn(_base_stream);
        return ret;
    }
    /// method [get_byte_order](https://docs.gtk.org/gio/method.DataOutputStream.get_byte_order.html)
    pub fn getByteOrder(self: *DataOutputStream) gio.DataStreamByteOrder {
        const cFn = @extern(*const fn (*DataOutputStream) callconv(.c) gio.DataStreamByteOrder, .{ .name = "g_data_output_stream_get_byte_order" });
        const ret = cFn(self);
        return ret;
    }
    /// method [put_byte](https://docs.gtk.org/gio/method.DataOutputStream.put_byte.html)
    pub fn putByte(self: *DataOutputStream, _data: u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_byte" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_int16](https://docs.gtk.org/gio/method.DataOutputStream.put_int16.html)
    pub fn putInt16(self: *DataOutputStream, _data: i16, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, i16, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_int16" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_int32](https://docs.gtk.org/gio/method.DataOutputStream.put_int32.html)
    pub fn putInt32(self: *DataOutputStream, _data: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_int32" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_int64](https://docs.gtk.org/gio/method.DataOutputStream.put_int64.html)
    pub fn putInt64(self: *DataOutputStream, _data: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_int64" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_string](https://docs.gtk.org/gio/method.DataOutputStream.put_string.html)
    pub fn putString(self: *DataOutputStream, _str: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_string" });
        const ret = cFn(self, _str, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_uint16](https://docs.gtk.org/gio/method.DataOutputStream.put_uint16.html)
    pub fn putUint16(self: *DataOutputStream, _data: u16, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, u16, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_uint16" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_uint32](https://docs.gtk.org/gio/method.DataOutputStream.put_uint32.html)
    pub fn putUint32(self: *DataOutputStream, _data: u32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, u32, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_uint32" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [put_uint64](https://docs.gtk.org/gio/method.DataOutputStream.put_uint64.html)
    pub fn putUint64(self: *DataOutputStream, _data: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DataOutputStream, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_data_output_stream_put_uint64" });
        const ret = cFn(self, _data, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_byte_order](https://docs.gtk.org/gio/method.DataOutputStream.set_byte_order.html)
    pub fn setByteOrder(self: *DataOutputStream, _order: gio.DataStreamByteOrder) void {
        const cFn = @extern(*const fn (*DataOutputStream, gio.DataStreamByteOrder) callconv(.c) void, .{ .name = "g_data_output_stream_set_byte_order" });
        const ret = cFn(self, _order);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_data_output_stream_get_type" });
        return cFn();
    }
};
pub const DataOutputStreamClass = extern struct {
    parent_class: gio.FilterOutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const DataOutputStreamPrivate = opaque {};
/// Enum [DataStreamByteOrder](https://docs.gtk.org/gio/enum.DataStreamByteOrder.html)
pub const DataStreamByteOrder = enum(u32) {
    big_endian = 0,
    little_endian = 1,
    host_endian = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_data_stream_byte_order_get_type" });
        return cFn();
    }
};
/// Enum [DataStreamNewlineType](https://docs.gtk.org/gio/enum.DataStreamNewlineType.html)
pub const DataStreamNewlineType = enum(u32) {
    lf = 0,
    cr = 1,
    cr_lf = 2,
    any = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_data_stream_newline_type_get_type" });
        return cFn();
    }
};
/// Iface [DatagramBased](https://docs.gtk.org/gio/iface.DatagramBased.html)
pub const DatagramBased = opaque {
    /// method [condition_check](https://docs.gtk.org/gio/method.DatagramBased.condition_check.html)
    pub fn conditionCheck(self: *DatagramBased, _condition: glib.IOCondition) glib.IOCondition {
        const cFn = @extern(*const fn (*DatagramBased, glib.IOCondition) callconv(.c) glib.IOCondition, .{ .name = "g_datagram_based_condition_check" });
        const ret = cFn(self, _condition);
        return ret;
    }
    /// method [condition_wait](https://docs.gtk.org/gio/method.DatagramBased.condition_wait.html)
    pub fn conditionWait(self: *DatagramBased, _condition: glib.IOCondition, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DatagramBased, glib.IOCondition, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_datagram_based_condition_wait" });
        const ret = cFn(self, _condition, _timeout, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create_source](https://docs.gtk.org/gio/method.DatagramBased.create_source.html)
    pub fn createSource(self: *DatagramBased, _condition: glib.IOCondition, _cancellable: ?*gio.Cancellable) *glib.Source {
        const cFn = @extern(*const fn (*DatagramBased, glib.IOCondition, ?*gio.Cancellable) callconv(.c) *glib.Source, .{ .name = "g_datagram_based_create_source" });
        const ret = cFn(self, _condition, _cancellable);
        return ret;
    }
    /// method [receive_messages](https://docs.gtk.org/gio/method.DatagramBased.receive_messages.html)
    pub fn receiveMessages(self: *DatagramBased, _messagess: []gio.InputMessage, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const _messages = _messagess.ptr;
        const _num_messages: u32 = @intCast(_messagess.len);
        const cFn = @extern(*const fn (*DatagramBased, [*]gio.InputMessage, u32, i32, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_datagram_based_receive_messages" });
        const ret = cFn(self, _messages, _num_messages, _flags, _timeout, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_messages](https://docs.gtk.org/gio/method.DatagramBased.send_messages.html)
    pub fn sendMessages(self: *DatagramBased, _messagess: []gio.OutputMessage, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const _messages = _messagess.ptr;
        const _num_messages: u32 = @intCast(_messagess.len);
        const cFn = @extern(*const fn (*DatagramBased, [*]gio.OutputMessage, u32, i32, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_datagram_based_send_messages" });
        const ret = cFn(self, _messages, _num_messages, _flags, _timeout, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [condition_check](https://docs.gtk.org/gio/vfunc.DatagramBased.condition_check.html)
    pub fn conditionCheckV(self: *DatagramBased, _condition: glib.IOCondition) glib.IOCondition {
        const class: *DatagramBasedInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.condition_check.?;
        const ret = vFn(self, _condition);
        return ret;
    }
    /// vfunc [condition_wait](https://docs.gtk.org/gio/vfunc.DatagramBased.condition_wait.html)
    pub fn conditionWaitV(self: *DatagramBased, _condition: glib.IOCondition, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *DatagramBasedInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.condition_wait.?;
        const ret = vFn(self, _condition, _timeout, _cancellable, _error);
        return ret;
    }
    /// vfunc [create_source](https://docs.gtk.org/gio/vfunc.DatagramBased.create_source.html)
    pub fn createSourceV(self: *DatagramBased, _condition: glib.IOCondition, _cancellable: ?*gio.Cancellable) *glib.Source {
        const class: *DatagramBasedInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_source.?;
        const ret = vFn(self, _condition, _cancellable);
        return ret;
    }
    /// vfunc [receive_messages](https://docs.gtk.org/gio/vfunc.DatagramBased.receive_messages.html)
    pub fn receiveMessagesV(self: *DatagramBased, _messages: [*]gio.InputMessage, _num_messages: u32, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i32 {
        const class: *DatagramBasedInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.receive_messages.?;
        const ret = vFn(self, _messages, _num_messages, _flags, _timeout, _cancellable, _error);
        return ret;
    }
    /// vfunc [send_messages](https://docs.gtk.org/gio/vfunc.DatagramBased.send_messages.html)
    pub fn sendMessagesV(self: *DatagramBased, _messages: [*]gio.OutputMessage, _num_messages: u32, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i32 {
        const class: *DatagramBasedInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.send_messages.?;
        const ret = vFn(self, _messages, _num_messages, _flags, _timeout, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_datagram_based_get_type" });
        return cFn();
    }
};
pub const DatagramBasedInterface = extern struct {
    g_iface: gobject.TypeInterface,
    receive_messages: ?*const fn (_datagram_based: *gio.DatagramBased, _messages: [*]gio.InputMessage, _num_messages: u32, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i32,
    send_messages: ?*const fn (_datagram_based: *gio.DatagramBased, _messages: [*]gio.OutputMessage, _num_messages: u32, _flags: i32, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i32,
    create_source: ?*const fn (_datagram_based: *gio.DatagramBased, _condition: glib.IOCondition, _cancellable: ?*gio.Cancellable) callconv(.c) *glib.Source,
    condition_check: ?*const fn (_datagram_based: *gio.DatagramBased, _condition: glib.IOCondition) callconv(.c) glib.IOCondition,
    condition_wait: ?*const fn (_datagram_based: *gio.DatagramBased, _condition: glib.IOCondition, _timeout: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
};
/// callback [DatagramBasedSourceFunc](https://docs.gtk.org/gio/callback.DatagramBasedSourceFunc.html)
pub const DatagramBasedSourceFunc = *const fn (_datagram_based: *gio.DatagramBased, _condition: glib.IOCondition, _data: ?*anyopaque) callconv(.c) bool;
/// Iface [DebugController](https://docs.gtk.org/gio/iface.DebugController.html)
/// - property [debug-enabled](https://docs.gtk.org/gio/property.DebugController.debug-enabled.html): (rw) `bool`
pub const DebugController = opaque {
    pub const Prerequisites = [_]type{gio.Initable};
    /// method [get_debug_enabled](https://docs.gtk.org/gio/method.DebugController.get_debug_enabled.html)
    pub fn getDebugEnabled(self: *DebugController) bool {
        const cFn = @extern(*const fn (*DebugController) callconv(.c) bool, .{ .name = "g_debug_controller_get_debug_enabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_debug_enabled](https://docs.gtk.org/gio/method.DebugController.set_debug_enabled.html)
    pub fn setDebugEnabled(self: *DebugController, _debug_enabled: bool) void {
        const cFn = @extern(*const fn (*DebugController, bool) callconv(.c) void, .{ .name = "g_debug_controller_set_debug_enabled" });
        const ret = cFn(self, _debug_enabled);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_debug_controller_get_type" });
        return cFn();
    }
};
/// Class [DebugControllerDBus](https://docs.gtk.org/gio/class.DebugControllerDBus.html)
/// - property [connection](https://docs.gtk.org/gio/property.DebugControllerDBus.connection.html): (r-) `gio.DBusConnection`
pub const DebugControllerDBus = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{ gio.DebugController, gio.Initable };
    pub const Parent = gobject.Object;
    pub const Class = gio.DebugControllerDBusClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DebugControllerDBus.new.html)
    pub fn new(_connection: *gio.DBusConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*DebugControllerDBus {
        const cFn = @extern(*const fn (*gio.DBusConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*DebugControllerDBus, .{ .name = "g_debug_controller_dbus_new" });
        const ret = cFn(_connection, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gio/method.DebugControllerDBus.stop.html)
    pub fn stop(self: *DebugControllerDBus) void {
        const cFn = @extern(*const fn (*DebugControllerDBus) callconv(.c) void, .{ .name = "g_debug_controller_dbus_stop" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [authorize](https://docs.gtk.org/gio/vfunc.DebugControllerDBus.authorize.html)
    pub fn authorizeV(self: *DebugControllerDBus, _invocation: *gio.DBusMethodInvocation) bool {
        const class: *DebugControllerDBusClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.authorize.?;
        const ret = vFn(self, _invocation);
        return ret;
    }
    /// signal [authorize](https://docs.gtk.org/gio/signal.DebugControllerDBus.authorize.html)
    pub fn connectAuthorize(self: *DebugControllerDBus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("authorize", handler, args, flags, &.{ bool, *DebugControllerDBus, *gio.DBusMethodInvocation });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_debug_controller_dbus_get_type" });
        return cFn();
    }
};
pub const DebugControllerDBusClass = extern struct {
    parent_class: gobject.ObjectClass,
    authorize: ?*const fn (_controller: *gio.DebugControllerDBus, _invocation: *gio.DBusMethodInvocation) callconv(.c) bool,
    padding: [12]?*anyopaque,
};
pub const DebugControllerInterface = extern struct {
    g_iface: gobject.TypeInterface,
};
/// Class [DesktopAppInfo](https://docs.gtk.org/gio/class.DesktopAppInfo.html)
/// - property [filename](https://docs.gtk.org/gio/property.DesktopAppInfo.filename.html): (r-) `[*:0]const u8`
pub const DesktopAppInfo = opaque {
    pub const Interfaces = [_]type{gio.AppInfo};
    pub const Parent = gobject.Object;
    pub const Class = gio.DesktopAppInfoClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.DesktopAppInfo.new.html)
    pub fn new(_desktop_id: [*:0]const u8) ?*DesktopAppInfo {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*DesktopAppInfo, .{ .name = "g_desktop_app_info_new" });
        const ret = cFn(_desktop_id);
        return ret;
    }
    /// ctor [new_from_filename](https://docs.gtk.org/gio/ctor.DesktopAppInfo.new_from_filename.html)
    pub fn newFromFilename(_filename: [*:0]const u8) ?*DesktopAppInfo {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*DesktopAppInfo, .{ .name = "g_desktop_app_info_new_from_filename" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_from_keyfile](https://docs.gtk.org/gio/ctor.DesktopAppInfo.new_from_keyfile.html)
    pub fn newFromKeyfile(_key_file: *glib.KeyFile) ?*DesktopAppInfo {
        const cFn = @extern(*const fn (*glib.KeyFile) callconv(.c) ?*DesktopAppInfo, .{ .name = "g_desktop_app_info_new_from_keyfile" });
        const ret = cFn(_key_file);
        return ret;
    }
    /// type func [get_implementations](https://docs.gtk.org/gio/type_func.DesktopAppInfo.get_implementations.html)
    pub fn getImplementations(_interface: [*:0]const u8) ?*core.List {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_desktop_app_info_get_implementations" });
        const ret = cFn(_interface);
        return ret;
    }
    /// type func [search](https://docs.gtk.org/gio/type_func.DesktopAppInfo.search.html)
    pub fn search(_search_string: [*:0]const u8) [*:null]?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:null]?[*:0]const u8, .{ .name = "g_desktop_app_info_search" });
        const ret = cFn(_search_string);
        return ret;
    }
    /// Deprecated:
    /// type func [set_desktop_env](https://docs.gtk.org/gio/type_func.DesktopAppInfo.set_desktop_env.html)
    pub const setDesktopEnv = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDesktopEnv(_desktop_env: [*:0]const u8) void {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_desktop_app_info_set_desktop_env" });
            const ret = cFn(_desktop_env);
            return ret;
        }
    }.setDesktopEnv;
    /// method [get_action_name](https://docs.gtk.org/gio/method.DesktopAppInfo.get_action_name.html)
    pub fn getActionName(self: *DesktopAppInfo, _action_name: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_desktop_app_info_get_action_name" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [get_boolean](https://docs.gtk.org/gio/method.DesktopAppInfo.get_boolean.html)
    pub fn getBoolean(self: *DesktopAppInfo, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "g_desktop_app_info_get_boolean" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_categories](https://docs.gtk.org/gio/method.DesktopAppInfo.get_categories.html)
    pub fn getCategories(self: *DesktopAppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_categories" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_filename](https://docs.gtk.org/gio/method.DesktopAppInfo.get_filename.html)
    pub fn getFilename(self: *DesktopAppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_filename" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_generic_name](https://docs.gtk.org/gio/method.DesktopAppInfo.get_generic_name.html)
    pub fn getGenericName(self: *DesktopAppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_generic_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_hidden](https://docs.gtk.org/gio/method.DesktopAppInfo.get_is_hidden.html)
    pub fn getIsHidden(self: *DesktopAppInfo) bool {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) bool, .{ .name = "g_desktop_app_info_get_is_hidden" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_keywords](https://docs.gtk.org/gio/method.DesktopAppInfo.get_keywords.html)
    pub fn getKeywords(self: *DesktopAppInfo) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_desktop_app_info_get_keywords" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_locale_string](https://docs.gtk.org/gio/method.DesktopAppInfo.get_locale_string.html)
    pub fn getLocaleString(self: *DesktopAppInfo, _key: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_locale_string" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_nodisplay](https://docs.gtk.org/gio/method.DesktopAppInfo.get_nodisplay.html)
    pub fn getNodisplay(self: *DesktopAppInfo) bool {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) bool, .{ .name = "g_desktop_app_info_get_nodisplay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_in](https://docs.gtk.org/gio/method.DesktopAppInfo.get_show_in.html)
    pub fn getShowIn(self: *DesktopAppInfo, _desktop_env: ?[*:0]const u8) bool {
        const cFn = @extern(*const fn (*DesktopAppInfo, ?[*:0]const u8) callconv(.c) bool, .{ .name = "g_desktop_app_info_get_show_in" });
        const ret = cFn(self, _desktop_env);
        return ret;
    }
    /// method [get_startup_wm_class](https://docs.gtk.org/gio/method.DesktopAppInfo.get_startup_wm_class.html)
    pub fn getStartupWmClass(self: *DesktopAppInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_startup_wm_class" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/gio/method.DesktopAppInfo.get_string.html)
    pub fn getString(self: *DesktopAppInfo, _key: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_desktop_app_info_get_string" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_string_list](https://docs.gtk.org/gio/method.DesktopAppInfo.get_string_list.html)
    pub fn getStringList(self: *DesktopAppInfo, _key: [*:0]const u8) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_desktop_app_info_get_string_list" });
        const ret = cFn(self, _key, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [has_key](https://docs.gtk.org/gio/method.DesktopAppInfo.has_key.html)
    pub fn hasKey(self: *DesktopAppInfo, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "g_desktop_app_info_has_key" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [launch_action](https://docs.gtk.org/gio/method.DesktopAppInfo.launch_action.html)
    pub fn launchAction(self: *DesktopAppInfo, _action_name: [*:0]const u8, _launch_context: ?*gio.AppLaunchContext) void {
        const cFn = @extern(*const fn (*DesktopAppInfo, [*:0]const u8, ?*gio.AppLaunchContext) callconv(.c) void, .{ .name = "g_desktop_app_info_launch_action" });
        const ret = cFn(self, _action_name, _launch_context);
        return ret;
    }
    /// method [launch_uris_as_manager](https://docs.gtk.org/gio/method.DesktopAppInfo.launch_uris_as_manager.html)
    pub fn launchUrisAsManager(self: *DesktopAppInfo, _uris: *core.List, _launch_context: ?*gio.AppLaunchContext, _spawn_flags: glib.SpawnFlags, user_setup: anytype, user_setup_args: anytype, pid_callback: anytype, pid_callback_args: anytype, _error: *?*core.Error) error{GError}!bool {
        var closure_user_setup = core.zig_closure(user_setup, user_setup_args, &.{void});
        closure_user_setup.setOnce();
        const _user_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_user_setup.c_closure());
        const _user_setup_data: ?*anyopaque = @ptrCast(closure_user_setup.c_data());
        var closure_pid_callback = core.zig_closure(pid_callback, pid_callback_args, &.{ void, *gio.DesktopAppInfo, i32 });
        defer closure_pid_callback.deinit();
        const _pid_callback: ?gio.DesktopAppLaunchCallback = @ptrCast(closure_pid_callback.c_closure());
        const _pid_callback_data: ?*anyopaque = @ptrCast(closure_pid_callback.c_data());
        const cFn = @extern(*const fn (*DesktopAppInfo, *core.List, ?*gio.AppLaunchContext, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?gio.DesktopAppLaunchCallback, ?*anyopaque, *?*core.Error) callconv(.c) bool, .{ .name = "g_desktop_app_info_launch_uris_as_manager" });
        const ret = cFn(self, _uris, _launch_context, _spawn_flags, _user_setup, @ptrCast(_user_setup_data), _pid_callback, @ptrCast(_pid_callback_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [launch_uris_as_manager_with_fds](https://docs.gtk.org/gio/method.DesktopAppInfo.launch_uris_as_manager_with_fds.html)
    pub fn launchUrisAsManagerWithFds(self: *DesktopAppInfo, _uris: *core.List, _launch_context: ?*gio.AppLaunchContext, _spawn_flags: glib.SpawnFlags, user_setup: anytype, user_setup_args: anytype, pid_callback: anytype, pid_callback_args: anytype, _stdin_fd: i32, _stdout_fd: i32, _stderr_fd: i32, _error: *?*core.Error) error{GError}!bool {
        var closure_user_setup = core.zig_closure(user_setup, user_setup_args, &.{void});
        closure_user_setup.setOnce();
        const _user_setup: ?glib.SpawnChildSetupFunc = @ptrCast(closure_user_setup.c_closure());
        const _user_setup_data: ?*anyopaque = @ptrCast(closure_user_setup.c_data());
        var closure_pid_callback = core.zig_closure(pid_callback, pid_callback_args, &.{ void, *gio.DesktopAppInfo, i32 });
        defer closure_pid_callback.deinit();
        const _pid_callback: ?gio.DesktopAppLaunchCallback = @ptrCast(closure_pid_callback.c_closure());
        const _pid_callback_data: ?*anyopaque = @ptrCast(closure_pid_callback.c_data());
        const cFn = @extern(*const fn (*DesktopAppInfo, *core.List, ?*gio.AppLaunchContext, glib.SpawnFlags, ?glib.SpawnChildSetupFunc, ?*anyopaque, ?gio.DesktopAppLaunchCallback, ?*anyopaque, i32, i32, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_desktop_app_info_launch_uris_as_manager_with_fds" });
        const ret = cFn(self, _uris, _launch_context, _spawn_flags, _user_setup, @ptrCast(_user_setup_data), _pid_callback, @ptrCast(_pid_callback_data), _stdin_fd, _stdout_fd, _stderr_fd, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [list_actions](https://docs.gtk.org/gio/method.DesktopAppInfo.list_actions.html)
    pub fn listActions(self: *DesktopAppInfo) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*DesktopAppInfo) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_desktop_app_info_list_actions" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_desktop_app_info_get_type" });
        return cFn();
    }
};
pub const DesktopAppInfoClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Deprecated:
/// Iface [DesktopAppInfoLookup](https://docs.gtk.org/gio/iface.DesktopAppInfoLookup.html)
pub const DesktopAppInfoLookup = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [get_default_for_uri_scheme](https://docs.gtk.org/gio/method.DesktopAppInfoLookup.get_default_for_uri_scheme.html)
    pub const getDefaultForUriScheme = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDefaultForUriScheme(self: *DesktopAppInfoLookup, _uri_scheme: [*:0]const u8) ?*gio.AppInfo {
            const cFn = @extern(*const fn (*DesktopAppInfoLookup, [*:0]const u8) callconv(.c) ?*gio.AppInfo, .{ .name = "g_desktop_app_info_lookup_get_default_for_uri_scheme" });
            const ret = cFn(self, _uri_scheme);
            return ret;
        }
    }.getDefaultForUriScheme;
    /// vfunc [get_default_for_uri_scheme](https://docs.gtk.org/gio/vfunc.DesktopAppInfoLookup.get_default_for_uri_scheme.html)
    pub fn getDefaultForUriSchemeV(self: *DesktopAppInfoLookup, _uri_scheme: [*:0]const u8) ?*gio.AppInfo {
        const class: *DesktopAppInfoLookupIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_default_for_uri_scheme.?;
        const ret = vFn(self, _uri_scheme);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_desktop_app_info_lookup_get_type" });
        return cFn();
    }
};
/// Struct [DesktopAppInfoLookupIface](https://docs.gtk.org/gio/struct.DesktopAppInfoLookupIface.html)
pub const DesktopAppInfoLookupIface = extern struct {
    g_iface: gobject.TypeInterface,
    get_default_for_uri_scheme: ?*const fn (_lookup: *gio.DesktopAppInfoLookup, _uri_scheme: [*:0]const u8) callconv(.c) ?*gio.AppInfo,
};
/// callback [DesktopAppLaunchCallback](https://docs.gtk.org/gio/callback.DesktopAppLaunchCallback.html)
pub const DesktopAppLaunchCallback = *const fn (_appinfo: *gio.DesktopAppInfo, _pid: i32, _user_data: ?*anyopaque) callconv(.c) void;
/// Iface [Drive](https://docs.gtk.org/gio/iface.Drive.html)
pub const Drive = opaque {
    /// method [can_eject](https://docs.gtk.org/gio/method.Drive.can_eject.html)
    pub fn canEject(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_can_eject" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_poll_for_media](https://docs.gtk.org/gio/method.Drive.can_poll_for_media.html)
    pub fn canPollForMedia(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_can_poll_for_media" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_start](https://docs.gtk.org/gio/method.Drive.can_start.html)
    pub fn canStart(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_can_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_start_degraded](https://docs.gtk.org/gio/method.Drive.can_start_degraded.html)
    pub fn canStartDegraded(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_can_start_degraded" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_stop](https://docs.gtk.org/gio/method.Drive.can_stop.html)
    pub fn canStop(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_can_stop" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [eject](https://docs.gtk.org/gio/method.Drive.eject.html)
    pub const eject = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn eject(self: *Drive, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*Drive, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_drive_eject" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.eject;
    /// Deprecated:
    /// method [eject_finish](https://docs.gtk.org/gio/method.Drive.eject_finish.html)
    pub const ejectFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ejectFinish(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*Drive, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_drive_eject_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.ejectFinish;
    /// method [eject_with_operation](https://docs.gtk.org/gio/method.Drive.eject_with_operation.html)
    pub fn ejectWithOperation(self: *Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drive, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_drive_eject_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [eject_with_operation_finish](https://docs.gtk.org/gio/method.Drive.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinish(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Drive, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_drive_eject_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [enumerate_identifiers](https://docs.gtk.org/gio/method.Drive.enumerate_identifiers.html)
    pub fn enumerateIdentifiers(self: *Drive) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Drive) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_drive_enumerate_identifiers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.Drive.get_icon.html)
    pub fn getIcon(self: *Drive) *gio.Icon {
        const cFn = @extern(*const fn (*Drive) callconv(.c) *gio.Icon, .{ .name = "g_drive_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_identifier](https://docs.gtk.org/gio/method.Drive.get_identifier.html)
    pub fn getIdentifier(self: *Drive, _kind: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Drive, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_drive_get_identifier" });
        const ret = cFn(self, _kind);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.Drive.get_name.html)
    pub fn getName(self: *Drive) [*:0]u8 {
        const cFn = @extern(*const fn (*Drive) callconv(.c) [*:0]u8, .{ .name = "g_drive_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sort_key](https://docs.gtk.org/gio/method.Drive.get_sort_key.html)
    pub fn getSortKey(self: *Drive) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Drive) callconv(.c) ?[*:0]u8, .{ .name = "g_drive_get_sort_key" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_stop_type](https://docs.gtk.org/gio/method.Drive.get_start_stop_type.html)
    pub fn getStartStopType(self: *Drive) gio.DriveStartStopType {
        const cFn = @extern(*const fn (*Drive) callconv(.c) gio.DriveStartStopType, .{ .name = "g_drive_get_start_stop_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_symbolic_icon](https://docs.gtk.org/gio/method.Drive.get_symbolic_icon.html)
    pub fn getSymbolicIcon(self: *Drive) *gio.Icon {
        const cFn = @extern(*const fn (*Drive) callconv(.c) *gio.Icon, .{ .name = "g_drive_get_symbolic_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_volumes](https://docs.gtk.org/gio/method.Drive.get_volumes.html)
    pub fn getVolumes(self: *Drive) ?*core.List {
        const cFn = @extern(*const fn (*Drive) callconv(.c) ?*core.List, .{ .name = "g_drive_get_volumes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_media](https://docs.gtk.org/gio/method.Drive.has_media.html)
    pub fn hasMedia(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_has_media" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_volumes](https://docs.gtk.org/gio/method.Drive.has_volumes.html)
    pub fn hasVolumes(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_has_volumes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_media_check_automatic](https://docs.gtk.org/gio/method.Drive.is_media_check_automatic.html)
    pub fn isMediaCheckAutomatic(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_is_media_check_automatic" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_media_removable](https://docs.gtk.org/gio/method.Drive.is_media_removable.html)
    pub fn isMediaRemovable(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_is_media_removable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_removable](https://docs.gtk.org/gio/method.Drive.is_removable.html)
    pub fn isRemovable(self: *Drive) bool {
        const cFn = @extern(*const fn (*Drive) callconv(.c) bool, .{ .name = "g_drive_is_removable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [poll_for_media](https://docs.gtk.org/gio/method.Drive.poll_for_media.html)
    pub fn pollForMedia(self: *Drive, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drive, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_drive_poll_for_media" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [poll_for_media_finish](https://docs.gtk.org/gio/method.Drive.poll_for_media_finish.html)
    pub fn pollForMediaFinish(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Drive, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_drive_poll_for_media_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [start](https://docs.gtk.org/gio/method.Drive.start.html)
    pub fn start(self: *Drive, _flags: gio.DriveStartFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drive, gio.DriveStartFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_drive_start" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [start_finish](https://docs.gtk.org/gio/method.Drive.start_finish.html)
    pub fn startFinish(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Drive, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_drive_start_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gio/method.Drive.stop.html)
    pub fn stop(self: *Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drive, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_drive_stop" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [stop_finish](https://docs.gtk.org/gio/method.Drive.stop_finish.html)
    pub fn stopFinish(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Drive, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_drive_stop_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_eject](https://docs.gtk.org/gio/vfunc.Drive.can_eject.html)
    pub fn canEjectV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_eject.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_poll_for_media](https://docs.gtk.org/gio/vfunc.Drive.can_poll_for_media.html)
    pub fn canPollForMediaV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_poll_for_media.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_start](https://docs.gtk.org/gio/vfunc.Drive.can_start.html)
    pub fn canStartV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_start.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_start_degraded](https://docs.gtk.org/gio/vfunc.Drive.can_start_degraded.html)
    pub fn canStartDegradedV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_start_degraded.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_stop](https://docs.gtk.org/gio/vfunc.Drive.can_stop.html)
    pub fn canStopV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_stop.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.Drive.changed.html)
    pub fn changedV(self: *Drive) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [disconnected](https://docs.gtk.org/gio/vfunc.Drive.disconnected.html)
    pub fn disconnectedV(self: *Drive) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.disconnected.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [eject](https://docs.gtk.org/gio/vfunc.Drive.eject.html)
    pub fn ejectV(self: *Drive, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_button](https://docs.gtk.org/gio/vfunc.Drive.eject_button.html)
    pub fn ejectButtonV(self: *Drive) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_button.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [eject_finish](https://docs.gtk.org/gio/vfunc.Drive.eject_finish.html)
    pub fn ejectFinishV(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [eject_with_operation](https://docs.gtk.org/gio/vfunc.Drive.eject_with_operation.html)
    pub fn ejectWithOperationV(self: *Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_with_operation_finish](https://docs.gtk.org/gio/vfunc.Drive.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinishV(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [enumerate_identifiers](https://docs.gtk.org/gio/vfunc.Drive.enumerate_identifiers.html)
    pub fn enumerateIdentifiersV(self: *Drive) [*:null]?[*:0]const u8 {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate_identifiers.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_icon](https://docs.gtk.org/gio/vfunc.Drive.get_icon.html)
    pub fn getIconV(self: *Drive) *gio.Icon {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_identifier](https://docs.gtk.org/gio/vfunc.Drive.get_identifier.html)
    pub fn getIdentifierV(self: *Drive, _kind: [*:0]const u8) ?[*:0]u8 {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_identifier.?;
        const ret = vFn(self, _kind);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/gio/vfunc.Drive.get_name.html)
    pub fn getNameV(self: *Drive) [*:0]u8 {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_sort_key](https://docs.gtk.org/gio/vfunc.Drive.get_sort_key.html)
    pub fn getSortKeyV(self: *Drive) ?[*:0]u8 {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_sort_key.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_start_stop_type](https://docs.gtk.org/gio/vfunc.Drive.get_start_stop_type.html)
    pub fn getStartStopTypeV(self: *Drive) gio.DriveStartStopType {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_start_stop_type.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_symbolic_icon](https://docs.gtk.org/gio/vfunc.Drive.get_symbolic_icon.html)
    pub fn getSymbolicIconV(self: *Drive) *gio.Icon {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_symbolic_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_volumes](https://docs.gtk.org/gio/vfunc.Drive.get_volumes.html)
    pub fn getVolumesV(self: *Drive) ?*core.List {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_volumes.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [has_media](https://docs.gtk.org/gio/vfunc.Drive.has_media.html)
    pub fn hasMediaV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.has_media.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [has_volumes](https://docs.gtk.org/gio/vfunc.Drive.has_volumes.html)
    pub fn hasVolumesV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.has_volumes.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_media_check_automatic](https://docs.gtk.org/gio/vfunc.Drive.is_media_check_automatic.html)
    pub fn isMediaCheckAutomaticV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_media_check_automatic.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_media_removable](https://docs.gtk.org/gio/vfunc.Drive.is_media_removable.html)
    pub fn isMediaRemovableV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_media_removable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_removable](https://docs.gtk.org/gio/vfunc.Drive.is_removable.html)
    pub fn isRemovableV(self: *Drive) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_removable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [poll_for_media](https://docs.gtk.org/gio/vfunc.Drive.poll_for_media.html)
    pub fn pollForMediaV(self: *Drive, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.poll_for_media.?;
        const ret = vFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [poll_for_media_finish](https://docs.gtk.org/gio/vfunc.Drive.poll_for_media_finish.html)
    pub fn pollForMediaFinishV(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.poll_for_media_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [start](https://docs.gtk.org/gio/vfunc.Drive.start.html)
    pub fn startV(self: *Drive, _flags: gio.DriveStartFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [start_finish](https://docs.gtk.org/gio/vfunc.Drive.start_finish.html)
    pub fn startFinishV(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [stop](https://docs.gtk.org/gio/vfunc.Drive.stop.html)
    pub fn stopV(self: *Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.stop.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [stop_button](https://docs.gtk.org/gio/vfunc.Drive.stop_button.html)
    pub fn stopButtonV(self: *Drive) void {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.stop_button.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [stop_finish](https://docs.gtk.org/gio/vfunc.Drive.stop_finish.html)
    pub fn stopFinishV(self: *Drive, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DriveIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.stop_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.Drive.changed.html)
    pub fn connectChanged(self: *Drive, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Drive });
    }
    /// signal [disconnected](https://docs.gtk.org/gio/signal.Drive.disconnected.html)
    pub fn connectDisconnected(self: *Drive, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("disconnected", handler, args, flags, &.{ void, *Drive });
    }
    /// signal [eject-button](https://docs.gtk.org/gio/signal.Drive.eject-button.html)
    pub fn connectEjectButton(self: *Drive, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("eject-button", handler, args, flags, &.{ void, *Drive });
    }
    /// signal [stop-button](https://docs.gtk.org/gio/signal.Drive.stop-button.html)
    pub fn connectStopButton(self: *Drive, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("stop-button", handler, args, flags, &.{ void, *Drive });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_drive_get_type" });
        return cFn();
    }
};
/// Struct [DriveIface](https://docs.gtk.org/gio/struct.DriveIface.html)
pub const DriveIface = extern struct {
    g_iface: gobject.TypeInterface,
    changed: ?*const fn (_drive: *gio.Drive) callconv(.c) void,
    disconnected: ?*const fn (_drive: *gio.Drive) callconv(.c) void,
    eject_button: ?*const fn (_drive: *gio.Drive) callconv(.c) void,
    get_name: ?*const fn (_drive: *gio.Drive) callconv(.c) [*:0]u8,
    get_icon: ?*const fn (_drive: *gio.Drive) callconv(.c) *gio.Icon,
    has_volumes: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    get_volumes: ?*const fn (_drive: *gio.Drive) callconv(.c) ?*core.List,
    is_media_removable: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    has_media: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    is_media_check_automatic: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    can_eject: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    can_poll_for_media: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    eject: ?*const fn (_drive: *gio.Drive, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_finish: ?*const fn (_drive: *gio.Drive, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    poll_for_media: ?*const fn (_drive: *gio.Drive, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    poll_for_media_finish: ?*const fn (_drive: *gio.Drive, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_identifier: ?*const fn (_drive: *gio.Drive, _kind: [*:0]const u8) callconv(.c) ?[*:0]u8,
    enumerate_identifiers: ?*const fn (_drive: *gio.Drive) callconv(.c) [*:null]?[*:0]const u8,
    get_start_stop_type: ?*const fn (_drive: *gio.Drive) callconv(.c) gio.DriveStartStopType,
    can_start: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    can_start_degraded: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    start: ?*const fn (_drive: *gio.Drive, _flags: gio.DriveStartFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    start_finish: ?*const fn (_drive: *gio.Drive, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    can_stop: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
    stop: ?*const fn (_drive: *gio.Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    stop_finish: ?*const fn (_drive: *gio.Drive, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    stop_button: ?*const fn (_drive: *gio.Drive) callconv(.c) void,
    eject_with_operation: ?*const fn (_drive: *gio.Drive, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_with_operation_finish: ?*const fn (_drive: *gio.Drive, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_sort_key: ?*const fn (_drive: *gio.Drive) callconv(.c) ?[*:0]u8,
    get_symbolic_icon: ?*const fn (_drive: *gio.Drive) callconv(.c) *gio.Icon,
    is_removable: ?*const fn (_drive: *gio.Drive) callconv(.c) bool,
};
/// Flags [DriveStartFlags](https://docs.gtk.org/gio/flags.DriveStartFlags.html)
pub const DriveStartFlags = packed struct(u32) {
    _: u32 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_drive_start_flags_get_type" });
        return cFn();
    }
};
/// Enum [DriveStartStopType](https://docs.gtk.org/gio/enum.DriveStartStopType.html)
pub const DriveStartStopType = enum(u32) {
    unknown = 0,
    shutdown = 1,
    network = 2,
    multidisk = 3,
    password = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_drive_start_stop_type_get_type" });
        return cFn();
    }
};
/// Iface [DtlsClientConnection](https://docs.gtk.org/gio/iface.DtlsClientConnection.html)
/// - property [accepted-cas](https://docs.gtk.org/gio/property.DtlsClientConnection.accepted-cas.html): (r-) `*core.List`
/// - property [server-identity](https://docs.gtk.org/gio/property.DtlsClientConnection.server-identity.html): (rw) `gio.SocketConnectable`
/// - property [validation-flags](https://docs.gtk.org/gio/property.DtlsClientConnection.validation-flags.html): (rw) `gio.TlsCertificateFlags`
pub const DtlsClientConnection = opaque {
    pub const Prerequisites = [_]type{ gio.DatagramBased, gio.DtlsConnection };
    /// type func [new](https://docs.gtk.org/gio/type_func.DtlsClientConnection.new.html)
    pub fn new(_base_socket: *gio.DatagramBased, _server_identity: ?*gio.SocketConnectable, _error: *?*core.Error) error{GError}!*gio.DtlsClientConnection {
        const cFn = @extern(*const fn (*gio.DatagramBased, ?*gio.SocketConnectable, *?*core.Error) callconv(.c) *gio.DtlsClientConnection, .{ .name = "g_dtls_client_connection_new" });
        const ret = cFn(_base_socket, _server_identity, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_accepted_cas](https://docs.gtk.org/gio/method.DtlsClientConnection.get_accepted_cas.html)
    pub fn getAcceptedCas(self: *DtlsClientConnection) ?*core.List {
        const cFn = @extern(*const fn (*DtlsClientConnection) callconv(.c) ?*core.List, .{ .name = "g_dtls_client_connection_get_accepted_cas" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_server_identity](https://docs.gtk.org/gio/method.DtlsClientConnection.get_server_identity.html)
    pub fn getServerIdentity(self: *DtlsClientConnection) *gio.SocketConnectable {
        const cFn = @extern(*const fn (*DtlsClientConnection) callconv(.c) *gio.SocketConnectable, .{ .name = "g_dtls_client_connection_get_server_identity" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_validation_flags](https://docs.gtk.org/gio/method.DtlsClientConnection.get_validation_flags.html)
    pub const getValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getValidationFlags(self: *DtlsClientConnection) gio.TlsCertificateFlags {
            const cFn = @extern(*const fn (*DtlsClientConnection) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_dtls_client_connection_get_validation_flags" });
            const ret = cFn(self);
            return ret;
        }
    }.getValidationFlags;
    /// method [set_server_identity](https://docs.gtk.org/gio/method.DtlsClientConnection.set_server_identity.html)
    pub fn setServerIdentity(self: *DtlsClientConnection, _identity: *gio.SocketConnectable) void {
        const cFn = @extern(*const fn (*DtlsClientConnection, *gio.SocketConnectable) callconv(.c) void, .{ .name = "g_dtls_client_connection_set_server_identity" });
        const ret = cFn(self, _identity);
        return ret;
    }
    /// Deprecated:
    /// method [set_validation_flags](https://docs.gtk.org/gio/method.DtlsClientConnection.set_validation_flags.html)
    pub const setValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setValidationFlags(self: *DtlsClientConnection, _flags: gio.TlsCertificateFlags) void {
            const cFn = @extern(*const fn (*DtlsClientConnection, gio.TlsCertificateFlags) callconv(.c) void, .{ .name = "g_dtls_client_connection_set_validation_flags" });
            const ret = cFn(self, _flags);
            return ret;
        }
    }.setValidationFlags;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dtls_client_connection_get_type" });
        return cFn();
    }
};
pub const DtlsClientConnectionInterface = extern struct {
    g_iface: gobject.TypeInterface,
};
/// Iface [DtlsConnection](https://docs.gtk.org/gio/iface.DtlsConnection.html)
/// - property [advertised-protocols](https://docs.gtk.org/gio/property.DtlsConnection.advertised-protocols.html): (rw) `[*:null]?[*:0]const u8`
/// - property [base-socket](https://docs.gtk.org/gio/property.DtlsConnection.base-socket.html): (r-) `gio.DatagramBased`
/// - property [certificate](https://docs.gtk.org/gio/property.DtlsConnection.certificate.html): (rw) `gio.TlsCertificate`
/// - property [ciphersuite-name](https://docs.gtk.org/gio/property.DtlsConnection.ciphersuite-name.html): (r-) `[*:0]const u8`
/// - property [database](https://docs.gtk.org/gio/property.DtlsConnection.database.html): (rw) `gio.TlsDatabase`
/// - property [interaction](https://docs.gtk.org/gio/property.DtlsConnection.interaction.html): (rw) `gio.TlsInteraction`
/// - property [negotiated-protocol](https://docs.gtk.org/gio/property.DtlsConnection.negotiated-protocol.html): (r-) `[*:0]const u8`
/// - property [peer-certificate](https://docs.gtk.org/gio/property.DtlsConnection.peer-certificate.html): (r-) `gio.TlsCertificate`
/// - property [peer-certificate-errors](https://docs.gtk.org/gio/property.DtlsConnection.peer-certificate-errors.html): (r-) `gio.TlsCertificateFlags`
/// - property [protocol-version](https://docs.gtk.org/gio/property.DtlsConnection.protocol-version.html): (r-) `gio.TlsProtocolVersion`
/// - property [rehandshake-mode](https://docs.gtk.org/gio/property.DtlsConnection.rehandshake-mode.html): (rw) `gio.TlsRehandshakeMode`
/// - property [require-close-notify](https://docs.gtk.org/gio/property.DtlsConnection.require-close-notify.html): (rw) `bool`
pub const DtlsConnection = opaque {
    pub const Prerequisites = [_]type{gio.DatagramBased};
    /// method [close](https://docs.gtk.org/gio/method.DtlsConnection.close.html)
    pub fn close(self: *DtlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_close" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_async](https://docs.gtk.org/gio/method.DtlsConnection.close_async.html)
    pub fn closeAsync(self: *DtlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DtlsConnection, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dtls_connection_close_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.DtlsConnection.close_finish.html)
    pub fn closeFinish(self: *DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_close_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [emit_accept_certificate](https://docs.gtk.org/gio/method.DtlsConnection.emit_accept_certificate.html)
    pub fn emitAcceptCertificate(self: *DtlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) bool {
        const cFn = @extern(*const fn (*DtlsConnection, *gio.TlsCertificate, gio.TlsCertificateFlags) callconv(.c) bool, .{ .name = "g_dtls_connection_emit_accept_certificate" });
        const ret = cFn(self, _peer_cert, _errors);
        return ret;
    }
    /// method [get_certificate](https://docs.gtk.org/gio/method.DtlsConnection.get_certificate.html)
    pub fn getCertificate(self: *DtlsConnection) ?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_dtls_connection_get_certificate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_channel_binding_data](https://docs.gtk.org/gio/method.DtlsConnection.get_channel_binding_data.html)
    pub fn getChannelBindingData(self: *DtlsConnection, _type: gio.TlsChannelBindingType, _error: *?*core.Error) error{GError}!?*core.ByteArray {
        var data_out: *core.ByteArray = undefined;
        const _data = &data_out;
        const cFn = @extern(*const fn (*DtlsConnection, gio.TlsChannelBindingType, ?*core.ByteArray, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_get_channel_binding_data" });
        const ret = cFn(self, _type, _data, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return data_out;
    }
    /// method [get_ciphersuite_name](https://docs.gtk.org/gio/method.DtlsConnection.get_ciphersuite_name.html)
    pub fn getCiphersuiteName(self: *DtlsConnection) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?[*:0]u8, .{ .name = "g_dtls_connection_get_ciphersuite_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_database](https://docs.gtk.org/gio/method.DtlsConnection.get_database.html)
    pub fn getDatabase(self: *DtlsConnection) ?*gio.TlsDatabase {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?*gio.TlsDatabase, .{ .name = "g_dtls_connection_get_database" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interaction](https://docs.gtk.org/gio/method.DtlsConnection.get_interaction.html)
    pub fn getInteraction(self: *DtlsConnection) ?*gio.TlsInteraction {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?*gio.TlsInteraction, .{ .name = "g_dtls_connection_get_interaction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_negotiated_protocol](https://docs.gtk.org/gio/method.DtlsConnection.get_negotiated_protocol.html)
    pub fn getNegotiatedProtocol(self: *DtlsConnection) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?[*:0]u8, .{ .name = "g_dtls_connection_get_negotiated_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_peer_certificate](https://docs.gtk.org/gio/method.DtlsConnection.get_peer_certificate.html)
    pub fn getPeerCertificate(self: *DtlsConnection) ?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_dtls_connection_get_peer_certificate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_peer_certificate_errors](https://docs.gtk.org/gio/method.DtlsConnection.get_peer_certificate_errors.html)
    pub fn getPeerCertificateErrors(self: *DtlsConnection) gio.TlsCertificateFlags {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_dtls_connection_get_peer_certificate_errors" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_protocol_version](https://docs.gtk.org/gio/method.DtlsConnection.get_protocol_version.html)
    pub fn getProtocolVersion(self: *DtlsConnection) gio.TlsProtocolVersion {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) gio.TlsProtocolVersion, .{ .name = "g_dtls_connection_get_protocol_version" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_rehandshake_mode](https://docs.gtk.org/gio/method.DtlsConnection.get_rehandshake_mode.html)
    pub const getRehandshakeMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRehandshakeMode(self: *DtlsConnection) gio.TlsRehandshakeMode {
            const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) gio.TlsRehandshakeMode, .{ .name = "g_dtls_connection_get_rehandshake_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getRehandshakeMode;
    /// method [get_require_close_notify](https://docs.gtk.org/gio/method.DtlsConnection.get_require_close_notify.html)
    pub fn getRequireCloseNotify(self: *DtlsConnection) bool {
        const cFn = @extern(*const fn (*DtlsConnection) callconv(.c) bool, .{ .name = "g_dtls_connection_get_require_close_notify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [handshake](https://docs.gtk.org/gio/method.DtlsConnection.handshake.html)
    pub fn handshake(self: *DtlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_handshake" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [handshake_async](https://docs.gtk.org/gio/method.DtlsConnection.handshake_async.html)
    pub fn handshakeAsync(self: *DtlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DtlsConnection, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dtls_connection_handshake_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [handshake_finish](https://docs.gtk.org/gio/method.DtlsConnection.handshake_finish.html)
    pub fn handshakeFinish(self: *DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_handshake_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_advertised_protocols](https://docs.gtk.org/gio/method.DtlsConnection.set_advertised_protocols.html)
    pub fn setAdvertisedProtocols(self: *DtlsConnection, _protocols: ?[*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DtlsConnection, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_dtls_connection_set_advertised_protocols" });
        const ret = cFn(self, _protocols);
        return ret;
    }
    /// method [set_certificate](https://docs.gtk.org/gio/method.DtlsConnection.set_certificate.html)
    pub fn setCertificate(self: *DtlsConnection, _certificate: *gio.TlsCertificate) void {
        const cFn = @extern(*const fn (*DtlsConnection, *gio.TlsCertificate) callconv(.c) void, .{ .name = "g_dtls_connection_set_certificate" });
        const ret = cFn(self, _certificate);
        return ret;
    }
    /// method [set_database](https://docs.gtk.org/gio/method.DtlsConnection.set_database.html)
    pub fn setDatabase(self: *DtlsConnection, _database: ?*gio.TlsDatabase) void {
        const cFn = @extern(*const fn (*DtlsConnection, ?*gio.TlsDatabase) callconv(.c) void, .{ .name = "g_dtls_connection_set_database" });
        const ret = cFn(self, _database);
        return ret;
    }
    /// method [set_interaction](https://docs.gtk.org/gio/method.DtlsConnection.set_interaction.html)
    pub fn setInteraction(self: *DtlsConnection, _interaction: ?*gio.TlsInteraction) void {
        const cFn = @extern(*const fn (*DtlsConnection, ?*gio.TlsInteraction) callconv(.c) void, .{ .name = "g_dtls_connection_set_interaction" });
        const ret = cFn(self, _interaction);
        return ret;
    }
    /// Deprecated:
    /// method [set_rehandshake_mode](https://docs.gtk.org/gio/method.DtlsConnection.set_rehandshake_mode.html)
    pub const setRehandshakeMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRehandshakeMode(self: *DtlsConnection, _mode: gio.TlsRehandshakeMode) void {
            const cFn = @extern(*const fn (*DtlsConnection, gio.TlsRehandshakeMode) callconv(.c) void, .{ .name = "g_dtls_connection_set_rehandshake_mode" });
            const ret = cFn(self, _mode);
            return ret;
        }
    }.setRehandshakeMode;
    /// method [set_require_close_notify](https://docs.gtk.org/gio/method.DtlsConnection.set_require_close_notify.html)
    pub fn setRequireCloseNotify(self: *DtlsConnection, _require_close_notify: bool) void {
        const cFn = @extern(*const fn (*DtlsConnection, bool) callconv(.c) void, .{ .name = "g_dtls_connection_set_require_close_notify" });
        const ret = cFn(self, _require_close_notify);
        return ret;
    }
    /// method [shutdown](https://docs.gtk.org/gio/method.DtlsConnection.shutdown.html)
    pub fn shutdown(self: *DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, bool, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_shutdown" });
        const ret = cFn(self, _shutdown_read, _shutdown_write, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [shutdown_async](https://docs.gtk.org/gio/method.DtlsConnection.shutdown_async.html)
    pub fn shutdownAsync(self: *DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*DtlsConnection, bool, bool, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dtls_connection_shutdown_async" });
        const ret = cFn(self, _shutdown_read, _shutdown_write, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [shutdown_finish](https://docs.gtk.org/gio/method.DtlsConnection.shutdown_finish.html)
    pub fn shutdownFinish(self: *DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*DtlsConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_dtls_connection_shutdown_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [accept_certificate](https://docs.gtk.org/gio/vfunc.DtlsConnection.accept_certificate.html)
    pub fn acceptCertificateV(self: *DtlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.accept_certificate.?;
        const ret = vFn(self, _peer_cert, _errors);
        return ret;
    }
    /// vfunc [get_binding_data](https://docs.gtk.org/gio/vfunc.DtlsConnection.get_binding_data.html)
    pub fn getBindingDataV(self: *DtlsConnection, _type: gio.TlsChannelBindingType, _data: *core.ByteArray, _error: *?*core.Error) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_binding_data.?;
        const ret = vFn(self, _type, _data, _error);
        return ret;
    }
    /// vfunc [get_negotiated_protocol](https://docs.gtk.org/gio/vfunc.DtlsConnection.get_negotiated_protocol.html)
    pub fn getNegotiatedProtocolV(self: *DtlsConnection) ?[*:0]u8 {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_negotiated_protocol.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [handshake](https://docs.gtk.org/gio/vfunc.DtlsConnection.handshake.html)
    pub fn handshakeV(self: *DtlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [handshake_async](https://docs.gtk.org/gio/vfunc.DtlsConnection.handshake_async.html)
    pub fn handshakeAsyncV(self: *DtlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [handshake_finish](https://docs.gtk.org/gio/vfunc.DtlsConnection.handshake_finish.html)
    pub fn handshakeFinishV(self: *DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [set_advertised_protocols](https://docs.gtk.org/gio/vfunc.DtlsConnection.set_advertised_protocols.html)
    pub fn setAdvertisedProtocolsV(self: *DtlsConnection, _protocols: ?[*:null]?[*:0]const u8) void {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_advertised_protocols.?;
        const ret = vFn(self, _protocols);
        return ret;
    }
    /// vfunc [shutdown](https://docs.gtk.org/gio/vfunc.DtlsConnection.shutdown.html)
    pub fn shutdownV(self: *DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.shutdown.?;
        const ret = vFn(self, _shutdown_read, _shutdown_write, _cancellable, _error);
        return ret;
    }
    /// vfunc [shutdown_async](https://docs.gtk.org/gio/vfunc.DtlsConnection.shutdown_async.html)
    pub fn shutdownAsyncV(self: *DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.shutdown_async.?;
        const ret = vFn(self, _shutdown_read, _shutdown_write, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [shutdown_finish](https://docs.gtk.org/gio/vfunc.DtlsConnection.shutdown_finish.html)
    pub fn shutdownFinishV(self: *DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *DtlsConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.shutdown_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// signal [accept-certificate](https://docs.gtk.org/gio/signal.DtlsConnection.accept-certificate.html)
    pub fn connectAcceptCertificate(self: *DtlsConnection, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accept-certificate", handler, args, flags, &.{ bool, *DtlsConnection, *gio.TlsCertificate, gio.TlsCertificateFlags });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dtls_connection_get_type" });
        return cFn();
    }
};
pub const DtlsConnectionInterface = extern struct {
    g_iface: gobject.TypeInterface,
    accept_certificate: ?*const fn (_connection: *gio.DtlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) callconv(.c) bool,
    handshake: ?*const fn (_conn: *gio.DtlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    handshake_async: ?*const fn (_conn: *gio.DtlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    handshake_finish: ?*const fn (_conn: *gio.DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    shutdown: ?*const fn (_conn: *gio.DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    shutdown_async: ?*const fn (_conn: *gio.DtlsConnection, _shutdown_read: bool, _shutdown_write: bool, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    shutdown_finish: ?*const fn (_conn: *gio.DtlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    set_advertised_protocols: ?*const fn (_conn: *gio.DtlsConnection, _protocols: ?[*:null]?[*:0]const u8) callconv(.c) void,
    get_negotiated_protocol: ?*const fn (_conn: *gio.DtlsConnection) callconv(.c) ?[*:0]u8,
    get_binding_data: ?*const fn (_conn: *gio.DtlsConnection, _type: gio.TlsChannelBindingType, _data: *core.ByteArray, _error: *?*core.Error) callconv(.c) bool,
};
/// Iface [DtlsServerConnection](https://docs.gtk.org/gio/iface.DtlsServerConnection.html)
/// - property [authentication-mode](https://docs.gtk.org/gio/property.DtlsServerConnection.authentication-mode.html): (rw) `gio.TlsAuthenticationMode`
pub const DtlsServerConnection = opaque {
    pub const Prerequisites = [_]type{ gio.DatagramBased, gio.DtlsConnection };
    /// type func [new](https://docs.gtk.org/gio/type_func.DtlsServerConnection.new.html)
    pub fn new(_base_socket: *gio.DatagramBased, _certificate: ?*gio.TlsCertificate, _error: *?*core.Error) error{GError}!*gio.DtlsServerConnection {
        const cFn = @extern(*const fn (*gio.DatagramBased, ?*gio.TlsCertificate, *?*core.Error) callconv(.c) *gio.DtlsServerConnection, .{ .name = "g_dtls_server_connection_new" });
        const ret = cFn(_base_socket, _certificate, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dtls_server_connection_get_type" });
        return cFn();
    }
};
pub const DtlsServerConnectionInterface = extern struct {
    g_iface: gobject.TypeInterface,
};
/// Class [Emblem](https://docs.gtk.org/gio/class.Emblem.html)
/// - property [icon](https://docs.gtk.org/gio/property.Emblem.icon.html): (r-) `gobject.Object`
/// - property [origin](https://docs.gtk.org/gio/property.Emblem.origin.html): (r-) `gio.EmblemOrigin`
pub const Emblem = opaque {
    pub const Interfaces = [_]type{gio.Icon};
    pub const Parent = gobject.Object;
    pub const Class = gio.EmblemClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Emblem.new.html)
    pub fn new(_icon: *gio.Icon) *Emblem {
        const cFn = @extern(*const fn (*gio.Icon) callconv(.c) *Emblem, .{ .name = "g_emblem_new" });
        const ret = cFn(_icon);
        return ret;
    }
    /// ctor [new_with_origin](https://docs.gtk.org/gio/ctor.Emblem.new_with_origin.html)
    pub fn newWithOrigin(_icon: *gio.Icon, _origin: gio.EmblemOrigin) *Emblem {
        const cFn = @extern(*const fn (*gio.Icon, gio.EmblemOrigin) callconv(.c) *Emblem, .{ .name = "g_emblem_new_with_origin" });
        const ret = cFn(_icon, _origin);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.Emblem.get_icon.html)
    pub fn getIcon(self: *Emblem) *gio.Icon {
        const cFn = @extern(*const fn (*Emblem) callconv(.c) *gio.Icon, .{ .name = "g_emblem_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_origin](https://docs.gtk.org/gio/method.Emblem.get_origin.html)
    pub fn getOrigin(self: *Emblem) gio.EmblemOrigin {
        const cFn = @extern(*const fn (*Emblem) callconv(.c) gio.EmblemOrigin, .{ .name = "g_emblem_get_origin" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_emblem_get_type" });
        return cFn();
    }
};
pub const EmblemClass = opaque {};
/// Enum [EmblemOrigin](https://docs.gtk.org/gio/enum.EmblemOrigin.html)
pub const EmblemOrigin = enum(u32) {
    unknown = 0,
    device = 1,
    livemetadata = 2,
    tag = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_emblem_origin_get_type" });
        return cFn();
    }
};
/// Class [EmblemedIcon](https://docs.gtk.org/gio/class.EmblemedIcon.html)
/// - property [gicon](https://docs.gtk.org/gio/property.EmblemedIcon.gicon.html): (r-) `gio.Icon`
pub const EmblemedIcon = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.EmblemedIconPrivate,
    pub const Interfaces = [_]type{gio.Icon};
    pub const Parent = gobject.Object;
    pub const Class = gio.EmblemedIconClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.EmblemedIcon.new.html)
    pub fn new(_icon: *gio.Icon, _emblem: ?*gio.Emblem) *EmblemedIcon {
        const cFn = @extern(*const fn (*gio.Icon, ?*gio.Emblem) callconv(.c) *EmblemedIcon, .{ .name = "g_emblemed_icon_new" });
        const ret = cFn(_icon, _emblem);
        return ret;
    }
    /// method [add_emblem](https://docs.gtk.org/gio/method.EmblemedIcon.add_emblem.html)
    pub fn addEmblem(self: *EmblemedIcon, _emblem: *gio.Emblem) void {
        const cFn = @extern(*const fn (*EmblemedIcon, *gio.Emblem) callconv(.c) void, .{ .name = "g_emblemed_icon_add_emblem" });
        const ret = cFn(self, _emblem);
        return ret;
    }
    /// method [clear_emblems](https://docs.gtk.org/gio/method.EmblemedIcon.clear_emblems.html)
    pub fn clearEmblems(self: *EmblemedIcon) void {
        const cFn = @extern(*const fn (*EmblemedIcon) callconv(.c) void, .{ .name = "g_emblemed_icon_clear_emblems" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_emblems](https://docs.gtk.org/gio/method.EmblemedIcon.get_emblems.html)
    pub fn getEmblems(self: *EmblemedIcon) ?*core.List {
        const cFn = @extern(*const fn (*EmblemedIcon) callconv(.c) ?*core.List, .{ .name = "g_emblemed_icon_get_emblems" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.EmblemedIcon.get_icon.html)
    pub fn getIcon(self: *EmblemedIcon) *gio.Icon {
        const cFn = @extern(*const fn (*EmblemedIcon) callconv(.c) *gio.Icon, .{ .name = "g_emblemed_icon_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_emblemed_icon_get_type" });
        return cFn();
    }
};
pub const EmblemedIconClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const EmblemedIconPrivate = opaque {};
/// const [FILE_ATTRIBUTE_ACCESS_CAN_DELETE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_DELETE.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";
/// const [FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";
/// const [FILE_ATTRIBUTE_ACCESS_CAN_READ](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_READ.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";
/// const [FILE_ATTRIBUTE_ACCESS_CAN_RENAME](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_RENAME.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";
/// const [FILE_ATTRIBUTE_ACCESS_CAN_TRASH](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_TRASH.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";
/// const [FILE_ATTRIBUTE_ACCESS_CAN_WRITE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ACCESS_CAN_WRITE.html)
pub const FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";
/// const [FILE_ATTRIBUTE_DOS_IS_ARCHIVE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_DOS_IS_ARCHIVE.html)
pub const FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";
/// const [FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT.html)
pub const FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT = "dos::is-mountpoint";
/// const [FILE_ATTRIBUTE_DOS_IS_SYSTEM](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_DOS_IS_SYSTEM.html)
pub const FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";
/// const [FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG.html)
pub const FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG = "dos::reparse-point-tag";
/// const [FILE_ATTRIBUTE_ETAG_VALUE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ETAG_VALUE.html)
pub const FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";
/// const [FILE_ATTRIBUTE_FILESYSTEM_FREE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_FREE.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";
/// const [FILE_ATTRIBUTE_FILESYSTEM_READONLY](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_READONLY.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";
/// const [FILE_ATTRIBUTE_FILESYSTEM_REMOTE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_REMOTE.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote";
/// const [FILE_ATTRIBUTE_FILESYSTEM_SIZE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_SIZE.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";
/// const [FILE_ATTRIBUTE_FILESYSTEM_TYPE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_TYPE.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";
/// const [FILE_ATTRIBUTE_FILESYSTEM_USED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_USED.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used";
/// const [FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW.html)
pub const FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";
/// const [FILE_ATTRIBUTE_GVFS_BACKEND](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_GVFS_BACKEND.html)
pub const FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";
/// const [FILE_ATTRIBUTE_ID_FILE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ID_FILE.html)
pub const FILE_ATTRIBUTE_ID_FILE = "id::file";
/// const [FILE_ATTRIBUTE_ID_FILESYSTEM](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_ID_FILESYSTEM.html)
pub const FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_START](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_START.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop";
/// const [FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";
/// const [FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";
/// const [FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic";
/// const [FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type";
/// const [FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";
/// const [FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE.html)
pub const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file";
/// const [FILE_ATTRIBUTE_OWNER_GROUP](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_OWNER_GROUP.html)
pub const FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";
/// const [FILE_ATTRIBUTE_OWNER_USER](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_OWNER_USER.html)
pub const FILE_ATTRIBUTE_OWNER_USER = "owner::user";
/// const [FILE_ATTRIBUTE_OWNER_USER_REAL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_OWNER_USER_REAL.html)
pub const FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";
/// const [FILE_ATTRIBUTE_PREVIEW_ICON](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_PREVIEW_ICON.html)
pub const FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon";
/// const [FILE_ATTRIBUTE_RECENT_MODIFIED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_RECENT_MODIFIED.html)
pub const FILE_ATTRIBUTE_RECENT_MODIFIED = "recent::modified";
/// const [FILE_ATTRIBUTE_SELINUX_CONTEXT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_SELINUX_CONTEXT.html)
pub const FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";
/// const [FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE.html)
pub const FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size";
/// const [FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.html)
pub const FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";
/// const [FILE_ATTRIBUTE_STANDARD_COPY_NAME](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_COPY_NAME.html)
pub const FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";
/// const [FILE_ATTRIBUTE_STANDARD_DESCRIPTION](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_DESCRIPTION.html)
pub const FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";
/// const [FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.html)
pub const FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";
/// const [FILE_ATTRIBUTE_STANDARD_EDIT_NAME](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_EDIT_NAME.html)
pub const FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";
/// const [FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE.html)
pub const FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";
/// const [FILE_ATTRIBUTE_STANDARD_ICON](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_ICON.html)
pub const FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";
/// const [FILE_ATTRIBUTE_STANDARD_IS_BACKUP](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_IS_BACKUP.html)
pub const FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";
/// const [FILE_ATTRIBUTE_STANDARD_IS_HIDDEN](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.html)
pub const FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";
/// const [FILE_ATTRIBUTE_STANDARD_IS_SYMLINK](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.html)
pub const FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";
/// const [FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL.html)
pub const FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";
/// const [FILE_ATTRIBUTE_STANDARD_IS_VOLATILE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_IS_VOLATILE.html)
pub const FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile";
/// const [FILE_ATTRIBUTE_STANDARD_NAME](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_NAME.html)
pub const FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";
/// const [FILE_ATTRIBUTE_STANDARD_SIZE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_SIZE.html)
pub const FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";
/// const [FILE_ATTRIBUTE_STANDARD_SORT_ORDER](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_SORT_ORDER.html)
pub const FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";
/// const [FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.html)
pub const FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon";
/// const [FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET.html)
pub const FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";
/// const [FILE_ATTRIBUTE_STANDARD_TARGET_URI](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_TARGET_URI.html)
pub const FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";
/// const [FILE_ATTRIBUTE_STANDARD_TYPE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_STANDARD_TYPE.html)
pub const FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";
/// const [FILE_ATTRIBUTE_THUMBNAILING_FAILED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAILING_FAILED.html)
pub const FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";
/// const [FILE_ATTRIBUTE_THUMBNAILING_FAILED_LARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAILING_FAILED_LARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAILING_FAILED_LARGE = "thumbnail::failed-large";
/// const [FILE_ATTRIBUTE_THUMBNAILING_FAILED_NORMAL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAILING_FAILED_NORMAL.html)
pub const FILE_ATTRIBUTE_THUMBNAILING_FAILED_NORMAL = "thumbnail::failed-normal";
/// const [FILE_ATTRIBUTE_THUMBNAILING_FAILED_XLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAILING_FAILED_XLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAILING_FAILED_XLARGE = "thumbnail::failed-xlarge";
/// const [FILE_ATTRIBUTE_THUMBNAILING_FAILED_XXLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAILING_FAILED_XXLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAILING_FAILED_XXLARGE = "thumbnail::failed-xxlarge";
/// const [FILE_ATTRIBUTE_THUMBNAIL_IS_VALID](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_IS_VALID.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid";
/// const [FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_LARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_LARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_LARGE = "thumbnail::is-valid-large";
/// const [FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_NORMAL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_NORMAL.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_NORMAL = "thumbnail::is-valid-normal";
/// const [FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XLARGE = "thumbnail::is-valid-xlarge";
/// const [FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XXLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XXLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_IS_VALID_XXLARGE = "thumbnail::is-valid-xxlarge";
/// const [FILE_ATTRIBUTE_THUMBNAIL_PATH](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_PATH.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";
/// const [FILE_ATTRIBUTE_THUMBNAIL_PATH_LARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_PATH_LARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_PATH_LARGE = "thumbnail::path-large";
/// const [FILE_ATTRIBUTE_THUMBNAIL_PATH_NORMAL](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_PATH_NORMAL.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_PATH_NORMAL = "thumbnail::path-normal";
/// const [FILE_ATTRIBUTE_THUMBNAIL_PATH_XLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_PATH_XLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_PATH_XLARGE = "thumbnail::path-xlarge";
/// const [FILE_ATTRIBUTE_THUMBNAIL_PATH_XXLARGE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_THUMBNAIL_PATH_XXLARGE.html)
pub const FILE_ATTRIBUTE_THUMBNAIL_PATH_XXLARGE = "thumbnail::path-xxlarge";
/// const [FILE_ATTRIBUTE_TIME_ACCESS](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_ACCESS.html)
pub const FILE_ATTRIBUTE_TIME_ACCESS = "time::access";
/// const [FILE_ATTRIBUTE_TIME_ACCESS_NSEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_ACCESS_NSEC.html)
pub const FILE_ATTRIBUTE_TIME_ACCESS_NSEC = "time::access-nsec";
/// const [FILE_ATTRIBUTE_TIME_ACCESS_USEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_ACCESS_USEC.html)
pub const FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";
/// const [FILE_ATTRIBUTE_TIME_CHANGED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CHANGED.html)
pub const FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";
/// const [FILE_ATTRIBUTE_TIME_CHANGED_NSEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CHANGED_NSEC.html)
pub const FILE_ATTRIBUTE_TIME_CHANGED_NSEC = "time::changed-nsec";
/// const [FILE_ATTRIBUTE_TIME_CHANGED_USEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CHANGED_USEC.html)
pub const FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";
/// const [FILE_ATTRIBUTE_TIME_CREATED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CREATED.html)
pub const FILE_ATTRIBUTE_TIME_CREATED = "time::created";
/// const [FILE_ATTRIBUTE_TIME_CREATED_NSEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CREATED_NSEC.html)
pub const FILE_ATTRIBUTE_TIME_CREATED_NSEC = "time::created-nsec";
/// const [FILE_ATTRIBUTE_TIME_CREATED_USEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_CREATED_USEC.html)
pub const FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";
/// const [FILE_ATTRIBUTE_TIME_MODIFIED](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_MODIFIED.html)
pub const FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";
/// const [FILE_ATTRIBUTE_TIME_MODIFIED_NSEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_MODIFIED_NSEC.html)
pub const FILE_ATTRIBUTE_TIME_MODIFIED_NSEC = "time::modified-nsec";
/// const [FILE_ATTRIBUTE_TIME_MODIFIED_USEC](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TIME_MODIFIED_USEC.html)
pub const FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";
/// const [FILE_ATTRIBUTE_TRASH_DELETION_DATE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TRASH_DELETION_DATE.html)
pub const FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date";
/// const [FILE_ATTRIBUTE_TRASH_ITEM_COUNT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TRASH_ITEM_COUNT.html)
pub const FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";
/// const [FILE_ATTRIBUTE_TRASH_ORIG_PATH](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_TRASH_ORIG_PATH.html)
pub const FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path";
/// const [FILE_ATTRIBUTE_UNIX_BLOCKS](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_BLOCKS.html)
pub const FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";
/// const [FILE_ATTRIBUTE_UNIX_BLOCK_SIZE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_BLOCK_SIZE.html)
pub const FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";
/// const [FILE_ATTRIBUTE_UNIX_DEVICE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_DEVICE.html)
pub const FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";
/// const [FILE_ATTRIBUTE_UNIX_GID](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_GID.html)
pub const FILE_ATTRIBUTE_UNIX_GID = "unix::gid";
/// const [FILE_ATTRIBUTE_UNIX_INODE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_INODE.html)
pub const FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";
/// const [FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT.html)
pub const FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";
/// const [FILE_ATTRIBUTE_UNIX_MODE](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_MODE.html)
pub const FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";
/// const [FILE_ATTRIBUTE_UNIX_NLINK](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_NLINK.html)
pub const FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";
/// const [FILE_ATTRIBUTE_UNIX_RDEV](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_RDEV.html)
pub const FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";
/// const [FILE_ATTRIBUTE_UNIX_UID](https://docs.gtk.org/gio/const.FILE_ATTRIBUTE_UNIX_UID.html)
pub const FILE_ATTRIBUTE_UNIX_UID = "unix::uid";
/// Iface [File](https://docs.gtk.org/gio/iface.File.html)
pub const File = opaque {
    /// type func [new_build_filenamev](https://docs.gtk.org/gio/type_func.File.new_build_filenamev.html)
    pub fn newBuildFilenamev(_args: [*:null]?[*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_build_filenamev" });
        const ret = cFn(_args);
        return ret;
    }
    /// type func [new_for_commandline_arg](https://docs.gtk.org/gio/type_func.File.new_for_commandline_arg.html)
    pub fn newForCommandlineArg(_arg: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_commandline_arg" });
        const ret = cFn(_arg);
        return ret;
    }
    /// type func [new_for_commandline_arg_and_cwd](https://docs.gtk.org/gio/type_func.File.new_for_commandline_arg_and_cwd.html)
    pub fn newForCommandlineArgAndCwd(_arg: [*:0]const u8, _cwd: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_commandline_arg_and_cwd" });
        const ret = cFn(_arg, _cwd);
        return ret;
    }
    /// type func [new_for_path](https://docs.gtk.org/gio/type_func.File.new_for_path.html)
    pub fn newForPath(_path: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_path" });
        const ret = cFn(_path);
        return ret;
    }
    /// type func [new_for_uri](https://docs.gtk.org/gio/type_func.File.new_for_uri.html)
    pub fn newForUri(_uri: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_uri" });
        const ret = cFn(_uri);
        return ret;
    }
    /// type func [new_tmp](https://docs.gtk.org/gio/type_func.File.new_tmp.html)
    pub fn newTmp(_tmpl: ?[*:0]const u8, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.File,
        iostream: *gio.FileIOStream,
    } {
        var iostream_out: *gio.FileIOStream = undefined;
        const _iostream = &iostream_out;
        const cFn = @extern(*const fn (?[*:0]const u8, **gio.FileIOStream, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp" });
        const ret = cFn(_tmpl, _iostream, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .iostream = iostream_out };
    }
    /// type func [new_tmp_async](https://docs.gtk.org/gio/type_func.File.new_tmp_async.html)
    pub fn newTmpAsync(_tmpl: ?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_new_tmp_async" });
        const ret = cFn(_tmpl, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_tmp_dir_async](https://docs.gtk.org/gio/type_func.File.new_tmp_dir_async.html)
    pub fn newTmpDirAsync(_tmpl: ?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_new_tmp_dir_async" });
        const ret = cFn(_tmpl, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// type func [new_tmp_dir_finish](https://docs.gtk.org/gio/type_func.File.new_tmp_dir_finish.html)
    pub fn newTmpDirFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.File {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp_dir_finish" });
        const ret = cFn(_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [new_tmp_finish](https://docs.gtk.org/gio/type_func.File.new_tmp_finish.html)
    pub fn newTmpFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.File,
        iostream: *gio.FileIOStream,
    } {
        var iostream_out: *gio.FileIOStream = undefined;
        const _iostream = &iostream_out;
        const cFn = @extern(*const fn (*gio.AsyncResult, **gio.FileIOStream, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp_finish" });
        const ret = cFn(_result, _iostream, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .iostream = iostream_out };
    }
    /// type func [parse_name](https://docs.gtk.org/gio/type_func.File.parse_name.html)
    pub fn parseName(_parse_name: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_parse_name" });
        const ret = cFn(_parse_name);
        return ret;
    }
    /// method [append_to](https://docs.gtk.org/gio/method.File.append_to.html)
    pub fn appendTo(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_append_to" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [append_to_async](https://docs.gtk.org/gio/method.File.append_to_async.html)
    pub fn appendToAsync(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_append_to_async" });
        const ret = cFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [append_to_finish](https://docs.gtk.org/gio/method.File.append_to_finish.html)
    pub fn appendToFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_append_to_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [build_attribute_list_for_copy](https://docs.gtk.org/gio/method.File.build_attribute_list_for_copy.html)
    pub fn buildAttributeListForCopy(self: *File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*File, gio.FileCopyFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_file_build_attribute_list_for_copy" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gio/method.File.copy.html)
    pub fn copy(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, progress_callback: anytype, progress_callback_args: anytype, _error: *?*core.Error) error{GError}!bool {
        var closure_progress_callback = core.zig_closure(progress_callback, progress_callback_args, &.{ void, i64, i64 });
        defer closure_progress_callback.deinit();
        const _progress_callback: ?gio.FileProgressCallback = @ptrCast(closure_progress_callback.c_closure());
        const _progress_callback_data: ?*anyopaque = @ptrCast(closure_progress_callback.c_data());
        const cFn = @extern(*const fn (*File, *gio.File, gio.FileCopyFlags, ?*gio.Cancellable, ?gio.FileProgressCallback, ?*anyopaque, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_copy" });
        const ret = cFn(self, _destination, _flags, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy_async](https://docs.gtk.org/gio/method.File.copy_async.html)
    pub fn copyAsync(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, progress_callback: anytype, progress_callback_args: anytype, callback: anytype, callback_args: anytype) void {
        var closure_progress_callback = core.zig_closure(progress_callback, progress_callback_args, &.{ void, i64, i64 });
        const _progress_callback: ?gio.FileProgressCallback = @ptrCast(closure_progress_callback.c_closure());
        const _progress_callback_data: ?*anyopaque = @ptrCast(closure_progress_callback.c_data());
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, *gio.File, gio.FileCopyFlags, i32, ?*gio.Cancellable, ?gio.FileProgressCallback, ?*anyopaque, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_copy_async" });
        const ret = cFn(self, _destination, _flags, _io_priority, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [copy_attributes](https://docs.gtk.org/gio/method.File.copy_attributes.html)
    pub fn copyAttributes(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.File, gio.FileCopyFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_copy_attributes" });
        const ret = cFn(self, _destination, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy_finish](https://docs.gtk.org/gio/method.File.copy_finish.html)
    pub fn copyFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_copy_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create](https://docs.gtk.org/gio/method.File.create.html)
    pub fn create(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_create" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create_async](https://docs.gtk.org/gio/method.File.create_async.html)
    pub fn createAsync(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_create_async" });
        const ret = cFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [create_finish](https://docs.gtk.org/gio/method.File.create_finish.html)
    pub fn createFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_create_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create_readwrite](https://docs.gtk.org/gio/method.File.create_readwrite.html)
    pub fn createReadwrite(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_create_readwrite" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create_readwrite_async](https://docs.gtk.org/gio/method.File.create_readwrite_async.html)
    pub fn createReadwriteAsync(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.FileCreateFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_create_readwrite_async" });
        const ret = cFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [create_readwrite_finish](https://docs.gtk.org/gio/method.File.create_readwrite_finish.html)
    pub fn createReadwriteFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_create_readwrite_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [delete](https://docs.gtk.org/gio/method.File.delete.html)
    pub fn delete(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_delete" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [delete_async](https://docs.gtk.org/gio/method.File.delete_async.html)
    pub fn deleteAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_delete_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [delete_finish](https://docs.gtk.org/gio/method.File.delete_finish.html)
    pub fn deleteFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_delete_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [dup](https://docs.gtk.org/gio/method.File.dup.html)
    pub fn dup(self: *File) *gio.File {
        const cFn = @extern(*const fn (*File) callconv(.c) *gio.File, .{ .name = "g_file_dup" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [eject_mountable](https://docs.gtk.org/gio/method.File.eject_mountable.html)
    pub const ejectMountable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ejectMountable(self: *File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*File, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_eject_mountable" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.ejectMountable;
    /// Deprecated:
    /// method [eject_mountable_finish](https://docs.gtk.org/gio/method.File.eject_mountable_finish.html)
    pub const ejectMountableFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ejectMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_eject_mountable_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.ejectMountableFinish;
    /// method [eject_mountable_with_operation](https://docs.gtk.org/gio/method.File.eject_mountable_with_operation.html)
    pub fn ejectMountableWithOperation(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_eject_mountable_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [eject_mountable_with_operation_finish](https://docs.gtk.org/gio/method.File.eject_mountable_with_operation_finish.html)
    pub fn ejectMountableWithOperationFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_eject_mountable_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [enumerate_children](https://docs.gtk.org/gio/method.File.enumerate_children.html)
    pub fn enumerateChildren(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileEnumerator {
        const cFn = @extern(*const fn (*File, [*:0]const u8, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileEnumerator, .{ .name = "g_file_enumerate_children" });
        const ret = cFn(self, _attributes, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [enumerate_children_async](https://docs.gtk.org/gio/method.File.enumerate_children_async.html)
    pub fn enumerateChildrenAsync(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*:0]const u8, gio.FileQueryInfoFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_enumerate_children_async" });
        const ret = cFn(self, _attributes, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [enumerate_children_finish](https://docs.gtk.org/gio/method.File.enumerate_children_finish.html)
    pub fn enumerateChildrenFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileEnumerator {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileEnumerator, .{ .name = "g_file_enumerate_children_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gio/method.File.equal.html)
    pub fn equal(self: *File, _file2: *gio.File) bool {
        const cFn = @extern(*const fn (*File, *gio.File) callconv(.c) bool, .{ .name = "g_file_equal" });
        const ret = cFn(self, _file2);
        return ret;
    }
    /// method [find_enclosing_mount](https://docs.gtk.org/gio/method.File.find_enclosing_mount.html)
    pub fn findEnclosingMount(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.Mount {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.Mount, .{ .name = "g_file_find_enclosing_mount" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [find_enclosing_mount_async](https://docs.gtk.org/gio/method.File.find_enclosing_mount_async.html)
    pub fn findEnclosingMountAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_find_enclosing_mount_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [find_enclosing_mount_finish](https://docs.gtk.org/gio/method.File.find_enclosing_mount_finish.html)
    pub fn findEnclosingMountFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.Mount {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.Mount, .{ .name = "g_file_find_enclosing_mount_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_basename](https://docs.gtk.org/gio/method.File.get_basename.html)
    pub fn getBasename(self: *File) ?[*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) ?[*:0]u8, .{ .name = "g_file_get_basename" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gio/method.File.get_child.html)
    pub fn getChild(self: *File, _name: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*File, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_get_child" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_child_for_display_name](https://docs.gtk.org/gio/method.File.get_child_for_display_name.html)
    pub fn getChildForDisplayName(self: *File, _display_name: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.File {
        const cFn = @extern(*const fn (*File, [*:0]const u8, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_get_child_for_display_name" });
        const ret = cFn(self, _display_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gio/method.File.get_parent.html)
    pub fn getParent(self: *File) ?*gio.File {
        const cFn = @extern(*const fn (*File) callconv(.c) ?*gio.File, .{ .name = "g_file_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parse_name](https://docs.gtk.org/gio/method.File.get_parse_name.html)
    pub fn getParseName(self: *File) [*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) [*:0]u8, .{ .name = "g_file_get_parse_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_path](https://docs.gtk.org/gio/method.File.get_path.html)
    pub fn getPath(self: *File) ?[*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) ?[*:0]u8, .{ .name = "g_file_get_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_relative_path](https://docs.gtk.org/gio/method.File.get_relative_path.html)
    pub fn getRelativePath(self: *File, _descendant: *gio.File) ?[*:0]u8 {
        const cFn = @extern(*const fn (*File, *gio.File) callconv(.c) ?[*:0]u8, .{ .name = "g_file_get_relative_path" });
        const ret = cFn(self, _descendant);
        return ret;
    }
    /// method [get_uri](https://docs.gtk.org/gio/method.File.get_uri.html)
    pub fn getUri(self: *File) [*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) [*:0]u8, .{ .name = "g_file_get_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uri_scheme](https://docs.gtk.org/gio/method.File.get_uri_scheme.html)
    pub fn getUriScheme(self: *File) ?[*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) ?[*:0]u8, .{ .name = "g_file_get_uri_scheme" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_parent](https://docs.gtk.org/gio/method.File.has_parent.html)
    pub fn hasParent(self: *File, _parent: ?*gio.File) bool {
        const cFn = @extern(*const fn (*File, ?*gio.File) callconv(.c) bool, .{ .name = "g_file_has_parent" });
        const ret = cFn(self, _parent);
        return ret;
    }
    /// method [has_prefix](https://docs.gtk.org/gio/method.File.has_prefix.html)
    pub fn hasPrefix(self: *File, _prefix: *gio.File) bool {
        const cFn = @extern(*const fn (*File, *gio.File) callconv(.c) bool, .{ .name = "g_file_has_prefix" });
        const ret = cFn(self, _prefix);
        return ret;
    }
    /// method [has_uri_scheme](https://docs.gtk.org/gio/method.File.has_uri_scheme.html)
    pub fn hasUriScheme(self: *File, _uri_scheme: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_has_uri_scheme" });
        const ret = cFn(self, _uri_scheme);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/gio/method.File.hash.html)
    pub fn hash(self: *File) u32 {
        const cFn = @extern(*const fn (*File) callconv(.c) u32, .{ .name = "g_file_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_native](https://docs.gtk.org/gio/method.File.is_native.html)
    pub fn isNative(self: *File) bool {
        const cFn = @extern(*const fn (*File) callconv(.c) bool, .{ .name = "g_file_is_native" });
        const ret = cFn(self);
        return ret;
    }
    /// method [load_bytes](https://docs.gtk.org/gio/method.File.load_bytes.html)
    pub fn loadBytes(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Bytes,
        etag_out: ?[*:0]u8,
    } {
        var etag_out_out: ?[*:0]u8 = undefined;
        const _etag_out = &etag_out_out;
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, ?*?[*:0]u8, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_file_load_bytes" });
        const ret = cFn(self, _cancellable, _etag_out, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .etag_out = etag_out_out };
    }
    /// method [load_bytes_async](https://docs.gtk.org/gio/method.File.load_bytes_async.html)
    pub fn loadBytesAsync(self: *File, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_load_bytes_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [load_bytes_finish](https://docs.gtk.org/gio/method.File.load_bytes_finish.html)
    pub fn loadBytesFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Bytes,
        etag_out: ?[*:0]u8,
    } {
        var etag_out_out: ?[*:0]u8 = undefined;
        const _etag_out = &etag_out_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, ?*?[*:0]u8, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_file_load_bytes_finish" });
        const ret = cFn(self, _result, _etag_out, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .etag_out = etag_out_out };
    }
    /// method [load_contents](https://docs.gtk.org/gio/method.File.load_contents.html)
    pub fn loadContents(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        contents: []u8,
        etag_out: ?[*:0]u8,
    } {
        var contents_out: [*]u8 = undefined;
        const _contents = &contents_out;
        var length_out: u64 = undefined;
        const _length = &length_out;
        var etag_out_out: ?[*:0]u8 = undefined;
        const _etag_out = &etag_out_out;
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *[*]u8, ?*u64, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_load_contents" });
        const ret = cFn(self, _cancellable, _contents, _length, _etag_out, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .contents = contents_out[0..@intCast(length_out)], .etag_out = etag_out_out };
    }
    /// method [load_contents_async](https://docs.gtk.org/gio/method.File.load_contents_async.html)
    pub fn loadContentsAsync(self: *File, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_load_contents_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [load_contents_finish](https://docs.gtk.org/gio/method.File.load_contents_finish.html)
    pub fn loadContentsFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        contents: []u8,
        etag_out: ?[*:0]u8,
    } {
        var contents_out: [*]u8 = undefined;
        const _contents = &contents_out;
        var length_out: u64 = undefined;
        const _length = &length_out;
        var etag_out_out: ?[*:0]u8 = undefined;
        const _etag_out = &etag_out_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *[*]u8, ?*u64, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_load_contents_finish" });
        const ret = cFn(self, _res, _contents, _length, _etag_out, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .contents = contents_out[0..@intCast(length_out)], .etag_out = etag_out_out };
    }
    /// method [load_partial_contents_finish](https://docs.gtk.org/gio/method.File.load_partial_contents_finish.html)
    pub fn loadPartialContentsFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        contents: []u8,
        etag_out: ?[*:0]u8,
    } {
        var contents_out: [*]u8 = undefined;
        const _contents = &contents_out;
        var length_out: u64 = undefined;
        const _length = &length_out;
        var etag_out_out: ?[*:0]u8 = undefined;
        const _etag_out = &etag_out_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *[*]u8, ?*u64, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_load_partial_contents_finish" });
        const ret = cFn(self, _res, _contents, _length, _etag_out, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .contents = contents_out[0..@intCast(length_out)], .etag_out = etag_out_out };
    }
    /// method [make_directory](https://docs.gtk.org/gio/method.File.make_directory.html)
    pub fn makeDirectory(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_make_directory" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [make_directory_async](https://docs.gtk.org/gio/method.File.make_directory_async.html)
    pub fn makeDirectoryAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_make_directory_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [make_directory_finish](https://docs.gtk.org/gio/method.File.make_directory_finish.html)
    pub fn makeDirectoryFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_make_directory_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [make_directory_with_parents](https://docs.gtk.org/gio/method.File.make_directory_with_parents.html)
    pub fn makeDirectoryWithParents(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_make_directory_with_parents" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [make_symbolic_link](https://docs.gtk.org/gio/method.File.make_symbolic_link.html)
    pub fn makeSymbolicLink(self: *File, _symlink_value: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_make_symbolic_link" });
        const ret = cFn(self, _symlink_value, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [make_symbolic_link_async](https://docs.gtk.org/gio/method.File.make_symbolic_link_async.html)
    pub fn makeSymbolicLinkAsync(self: *File, _symlink_value: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_make_symbolic_link_async" });
        const ret = cFn(self, _symlink_value, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [make_symbolic_link_finish](https://docs.gtk.org/gio/method.File.make_symbolic_link_finish.html)
    pub fn makeSymbolicLinkFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_make_symbolic_link_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [measure_disk_usage](https://docs.gtk.org/gio/method.File.measure_disk_usage.html)
    pub fn measureDiskUsage(self: *File, _flags: gio.FileMeasureFlags, _cancellable: ?*gio.Cancellable, progress_callback: anytype, progress_callback_args: anytype, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        disk_usage: u64,
        num_dirs: u64,
        num_files: u64,
    } {
        var closure_progress_callback = core.zig_closure(progress_callback, progress_callback_args, &.{ void, bool, u64, u64, u64 });
        defer closure_progress_callback.deinit();
        const _progress_callback: ?gio.FileMeasureProgressCallback = @ptrCast(closure_progress_callback.c_closure());
        const _progress_data: ?*anyopaque = @ptrCast(closure_progress_callback.c_data());
        var disk_usage_out: u64 = undefined;
        const _disk_usage = &disk_usage_out;
        var num_dirs_out: u64 = undefined;
        const _num_dirs = &num_dirs_out;
        var num_files_out: u64 = undefined;
        const _num_files = &num_files_out;
        const cFn = @extern(*const fn (*File, gio.FileMeasureFlags, ?*gio.Cancellable, ?gio.FileMeasureProgressCallback, ?*anyopaque, ?*u64, ?*u64, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_measure_disk_usage" });
        const ret = cFn(self, _flags, _cancellable, _progress_callback, @ptrCast(_progress_data), _disk_usage, _num_dirs, _num_files, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .disk_usage = disk_usage_out, .num_dirs = num_dirs_out, .num_files = num_files_out };
    }
    /// method [measure_disk_usage_finish](https://docs.gtk.org/gio/method.File.measure_disk_usage_finish.html)
    pub fn measureDiskUsageFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        disk_usage: u64,
        num_dirs: u64,
        num_files: u64,
    } {
        var disk_usage_out: u64 = undefined;
        const _disk_usage = &disk_usage_out;
        var num_dirs_out: u64 = undefined;
        const _num_dirs = &num_dirs_out;
        var num_files_out: u64 = undefined;
        const _num_files = &num_files_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, ?*u64, ?*u64, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_measure_disk_usage_finish" });
        const ret = cFn(self, _result, _disk_usage, _num_dirs, _num_files, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .disk_usage = disk_usage_out, .num_dirs = num_dirs_out, .num_files = num_files_out };
    }
    /// method [monitor](https://docs.gtk.org/gio/method.File.monitor.html)
    pub fn monitor(self: *File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileMonitor {
        const cFn = @extern(*const fn (*File, gio.FileMonitorFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileMonitor, .{ .name = "g_file_monitor" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [monitor_directory](https://docs.gtk.org/gio/method.File.monitor_directory.html)
    pub fn monitorDirectory(self: *File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileMonitor {
        const cFn = @extern(*const fn (*File, gio.FileMonitorFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileMonitor, .{ .name = "g_file_monitor_directory" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [monitor_file](https://docs.gtk.org/gio/method.File.monitor_file.html)
    pub fn monitorFile(self: *File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileMonitor {
        const cFn = @extern(*const fn (*File, gio.FileMonitorFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileMonitor, .{ .name = "g_file_monitor_file" });
        const ret = cFn(self, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [mount_enclosing_volume](https://docs.gtk.org/gio/method.File.mount_enclosing_volume.html)
    pub fn mountEnclosingVolume(self: *File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.MountMountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_mount_enclosing_volume" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [mount_enclosing_volume_finish](https://docs.gtk.org/gio/method.File.mount_enclosing_volume_finish.html)
    pub fn mountEnclosingVolumeFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_mount_enclosing_volume_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [mount_mountable](https://docs.gtk.org/gio/method.File.mount_mountable.html)
    pub fn mountMountable(self: *File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.MountMountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_mount_mountable" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [mount_mountable_finish](https://docs.gtk.org/gio/method.File.mount_mountable_finish.html)
    pub fn mountMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.File {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_mount_mountable_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [move](https://docs.gtk.org/gio/method.File.move.html)
    pub fn move(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, progress_callback: anytype, progress_callback_args: anytype, _error: *?*core.Error) error{GError}!bool {
        var closure_progress_callback = core.zig_closure(progress_callback, progress_callback_args, &.{ void, i64, i64 });
        defer closure_progress_callback.deinit();
        const _progress_callback: ?gio.FileProgressCallback = @ptrCast(closure_progress_callback.c_closure());
        const _progress_callback_data: ?*anyopaque = @ptrCast(closure_progress_callback.c_data());
        const cFn = @extern(*const fn (*File, *gio.File, gio.FileCopyFlags, ?*gio.Cancellable, ?gio.FileProgressCallback, ?*anyopaque, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_move" });
        const ret = cFn(self, _destination, _flags, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [move_async](https://docs.gtk.org/gio/method.File.move_async.html)
    pub fn moveAsync(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, progress_callback: anytype, progress_callback_args: anytype, callback: anytype, callback_args: anytype) void {
        var closure_progress_callback = core.zig_closure(progress_callback, progress_callback_args, &.{ void, i64, i64 });
        defer closure_progress_callback.deinit();
        const _progress_callback: ?gio.FileProgressCallback = @ptrCast(closure_progress_callback.c_closure());
        const _progress_callback_data: ?*anyopaque = @ptrCast(closure_progress_callback.c_data());
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, *gio.File, gio.FileCopyFlags, i32, ?*gio.Cancellable, ?gio.FileProgressCallback, ?*anyopaque, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_move_async" });
        const ret = cFn(self, _destination, _flags, _io_priority, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [move_finish](https://docs.gtk.org/gio/method.File.move_finish.html)
    pub fn moveFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_move_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [open_readwrite](https://docs.gtk.org/gio/method.File.open_readwrite.html)
    pub fn openReadwrite(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_open_readwrite" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [open_readwrite_async](https://docs.gtk.org/gio/method.File.open_readwrite_async.html)
    pub fn openReadwriteAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_open_readwrite_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [open_readwrite_finish](https://docs.gtk.org/gio/method.File.open_readwrite_finish.html)
    pub fn openReadwriteFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_open_readwrite_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [peek_path](https://docs.gtk.org/gio/method.File.peek_path.html)
    pub fn peekPath(self: *File) ?[*:0]u8 {
        const cFn = @extern(*const fn (*File) callconv(.c) ?[*:0]u8, .{ .name = "g_file_peek_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [poll_mountable](https://docs.gtk.org/gio/method.File.poll_mountable.html)
    pub fn pollMountable(self: *File, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_poll_mountable" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [poll_mountable_finish](https://docs.gtk.org/gio/method.File.poll_mountable_finish.html)
    pub fn pollMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_poll_mountable_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_default_handler](https://docs.gtk.org/gio/method.File.query_default_handler.html)
    pub fn queryDefaultHandler(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.AppInfo {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_file_query_default_handler" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_default_handler_async](https://docs.gtk.org/gio/method.File.query_default_handler_async.html)
    pub fn queryDefaultHandlerAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_query_default_handler_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_default_handler_finish](https://docs.gtk.org/gio/method.File.query_default_handler_finish.html)
    pub fn queryDefaultHandlerFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.AppInfo {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_file_query_default_handler_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_exists](https://docs.gtk.org/gio/method.File.query_exists.html)
    pub fn queryExists(self: *File, _cancellable: ?*gio.Cancellable) bool {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable) callconv(.c) bool, .{ .name = "g_file_query_exists" });
        const ret = cFn(self, _cancellable);
        return ret;
    }
    /// method [query_file_type](https://docs.gtk.org/gio/method.File.query_file_type.html)
    pub fn queryFileType(self: *File, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable) gio.FileType {
        const cFn = @extern(*const fn (*File, gio.FileQueryInfoFlags, ?*gio.Cancellable) callconv(.c) gio.FileType, .{ .name = "g_file_query_file_type" });
        const ret = cFn(self, _flags, _cancellable);
        return ret;
    }
    /// method [query_filesystem_info](https://docs.gtk.org/gio/method.File.query_filesystem_info.html)
    pub fn queryFilesystemInfo(self: *File, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*File, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_query_filesystem_info" });
        const ret = cFn(self, _attributes, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_filesystem_info_async](https://docs.gtk.org/gio/method.File.query_filesystem_info_async.html)
    pub fn queryFilesystemInfoAsync(self: *File, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_query_filesystem_info_async" });
        const ret = cFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_filesystem_info_finish](https://docs.gtk.org/gio/method.File.query_filesystem_info_finish.html)
    pub fn queryFilesystemInfoFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_query_filesystem_info_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_info](https://docs.gtk.org/gio/method.File.query_info.html)
    pub fn queryInfo(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*File, [*:0]const u8, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_query_info" });
        const ret = cFn(self, _attributes, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_info_async](https://docs.gtk.org/gio/method.File.query_info_async.html)
    pub fn queryInfoAsync(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*:0]const u8, gio.FileQueryInfoFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_query_info_async" });
        const ret = cFn(self, _attributes, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_info_finish](https://docs.gtk.org/gio/method.File.query_info_finish.html)
    pub fn queryInfoFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_query_info_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_settable_attributes](https://docs.gtk.org/gio/method.File.query_settable_attributes.html)
    pub fn querySettableAttributes(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileAttributeInfoList {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileAttributeInfoList, .{ .name = "g_file_query_settable_attributes" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_writable_namespaces](https://docs.gtk.org/gio/method.File.query_writable_namespaces.html)
    pub fn queryWritableNamespaces(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileAttributeInfoList {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileAttributeInfoList, .{ .name = "g_file_query_writable_namespaces" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read](https://docs.gtk.org/gio/method.File.read.html)
    pub fn read(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInputStream {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInputStream, .{ .name = "g_file_read" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_async](https://docs.gtk.org/gio/method.File.read_async.html)
    pub fn readAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_read_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_finish](https://docs.gtk.org/gio/method.File.read_finish.html)
    pub fn readFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInputStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInputStream, .{ .name = "g_file_read_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace](https://docs.gtk.org/gio/method.File.replace.html)
    pub fn replace(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, ?[*:0]const u8, bool, gio.FileCreateFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_replace" });
        const ret = cFn(self, _etag, _make_backup, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace_async](https://docs.gtk.org/gio/method.File.replace_async.html)
    pub fn replaceAsync(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, ?[*:0]const u8, bool, gio.FileCreateFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_replace_async" });
        const ret = cFn(self, _etag, _make_backup, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [replace_contents](https://docs.gtk.org/gio/method.File.replace_contents.html)
    pub fn replaceContents(self: *File, _contentss: []u8, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        new_etag: ?[*:0]u8,
    } {
        const _contents = _contentss.ptr;
        const _length: u64 = @intCast(_contentss.len);
        var new_etag_out: ?[*:0]u8 = undefined;
        const _new_etag = &new_etag_out;
        const cFn = @extern(*const fn (*File, [*]u8, u64, ?[*:0]const u8, bool, gio.FileCreateFlags, ?*?[*:0]u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_replace_contents" });
        const ret = cFn(self, _contents, _length, _etag, _make_backup, _flags, _new_etag, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .new_etag = new_etag_out };
    }
    /// method [replace_contents_async](https://docs.gtk.org/gio/method.File.replace_contents_async.html)
    pub fn replaceContentsAsync(self: *File, _contentss: []u8, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _contents = _contentss.ptr;
        const _length: u64 = @intCast(_contentss.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*]u8, u64, ?[*:0]const u8, bool, gio.FileCreateFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_replace_contents_async" });
        const ret = cFn(self, _contents, _length, _etag, _make_backup, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [replace_contents_bytes_async](https://docs.gtk.org/gio/method.File.replace_contents_bytes_async.html)
    pub fn replaceContentsBytesAsync(self: *File, _contents: *glib.Bytes, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, *glib.Bytes, ?[*:0]const u8, bool, gio.FileCreateFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_replace_contents_bytes_async" });
        const ret = cFn(self, _contents, _etag, _make_backup, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [replace_contents_finish](https://docs.gtk.org/gio/method.File.replace_contents_finish.html)
    pub fn replaceContentsFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        new_etag: ?[*:0]u8,
    } {
        var new_etag_out: ?[*:0]u8 = undefined;
        const _new_etag = &new_etag_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_replace_contents_finish" });
        const ret = cFn(self, _res, _new_etag, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .new_etag = new_etag_out };
    }
    /// method [replace_finish](https://docs.gtk.org/gio/method.File.replace_finish.html)
    pub fn replaceFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileOutputStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileOutputStream, .{ .name = "g_file_replace_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace_readwrite](https://docs.gtk.org/gio/method.File.replace_readwrite.html)
    pub fn replaceReadwrite(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, ?[*:0]const u8, bool, gio.FileCreateFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_replace_readwrite" });
        const ret = cFn(self, _etag, _make_backup, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [replace_readwrite_async](https://docs.gtk.org/gio/method.File.replace_readwrite_async.html)
    pub fn replaceReadwriteAsync(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, ?[*:0]const u8, bool, gio.FileCreateFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_replace_readwrite_async" });
        const ret = cFn(self, _etag, _make_backup, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [replace_readwrite_finish](https://docs.gtk.org/gio/method.File.replace_readwrite_finish.html)
    pub fn replaceReadwriteFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileIOStream {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileIOStream, .{ .name = "g_file_replace_readwrite_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [resolve_relative_path](https://docs.gtk.org/gio/method.File.resolve_relative_path.html)
    pub fn resolveRelativePath(self: *File, _relative_path: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*File, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_resolve_relative_path" });
        const ret = cFn(self, _relative_path);
        return ret;
    }
    /// method [set_attribute](https://docs.gtk.org/gio/method.File.set_attribute.html)
    pub fn setAttribute(self: *File, _attribute: [*:0]const u8, _type: gio.FileAttributeType, _value_p: ?*anyopaque, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, gio.FileAttributeType, ?*anyopaque, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute" });
        const ret = cFn(self, _attribute, _type, @ptrCast(_value_p), _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_byte_string](https://docs.gtk.org/gio/method.File.set_attribute_byte_string.html)
    pub fn setAttributeByteString(self: *File, _attribute: [*:0]const u8, _value: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, [*:0]const u8, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_byte_string" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_int32](https://docs.gtk.org/gio/method.File.set_attribute_int32.html)
    pub fn setAttributeInt32(self: *File, _attribute: [*:0]const u8, _value: i32, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, i32, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_int32" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_int64](https://docs.gtk.org/gio/method.File.set_attribute_int64.html)
    pub fn setAttributeInt64(self: *File, _attribute: [*:0]const u8, _value: i64, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, i64, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_int64" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_string](https://docs.gtk.org/gio/method.File.set_attribute_string.html)
    pub fn setAttributeString(self: *File, _attribute: [*:0]const u8, _value: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, [*:0]const u8, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_string" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_uint32](https://docs.gtk.org/gio/method.File.set_attribute_uint32.html)
    pub fn setAttributeUint32(self: *File, _attribute: [*:0]const u8, _value: u32, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, u32, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_uint32" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attribute_uint64](https://docs.gtk.org/gio/method.File.set_attribute_uint64.html)
    pub fn setAttributeUint64(self: *File, _attribute: [*:0]const u8, _value: u64, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, [*:0]const u8, u64, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attribute_uint64" });
        const ret = cFn(self, _attribute, _value, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_attributes_async](https://docs.gtk.org/gio/method.File.set_attributes_async.html)
    pub fn setAttributesAsync(self: *File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, *gio.FileInfo, gio.FileQueryInfoFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_set_attributes_async" });
        const ret = cFn(self, _info, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [set_attributes_finish](https://docs.gtk.org/gio/method.File.set_attributes_finish.html)
    pub fn setAttributesFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        info: *gio.FileInfo,
    } {
        var info_out: *gio.FileInfo = undefined;
        const _info = &info_out;
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, **gio.FileInfo, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attributes_finish" });
        const ret = cFn(self, _result, _info, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .info = info_out };
    }
    /// method [set_attributes_from_info](https://docs.gtk.org/gio/method.File.set_attributes_from_info.html)
    pub fn setAttributesFromInfo(self: *File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.FileInfo, gio.FileQueryInfoFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_set_attributes_from_info" });
        const ret = cFn(self, _info, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_display_name](https://docs.gtk.org/gio/method.File.set_display_name.html)
    pub fn setDisplayName(self: *File, _display_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.File {
        const cFn = @extern(*const fn (*File, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_set_display_name" });
        const ret = cFn(self, _display_name, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_display_name_async](https://docs.gtk.org/gio/method.File.set_display_name_async.html)
    pub fn setDisplayNameAsync(self: *File, _display_name: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_set_display_name_async" });
        const ret = cFn(self, _display_name, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [set_display_name_finish](https://docs.gtk.org/gio/method.File.set_display_name_finish.html)
    pub fn setDisplayNameFinish(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.File {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_set_display_name_finish" });
        const ret = cFn(self, _res, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [start_mountable](https://docs.gtk.org/gio/method.File.start_mountable.html)
    pub fn startMountable(self: *File, _flags: gio.DriveStartFlags, _start_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.DriveStartFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_start_mountable" });
        const ret = cFn(self, _flags, _start_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [start_mountable_finish](https://docs.gtk.org/gio/method.File.start_mountable_finish.html)
    pub fn startMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_start_mountable_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [stop_mountable](https://docs.gtk.org/gio/method.File.stop_mountable.html)
    pub fn stopMountable(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_stop_mountable" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [stop_mountable_finish](https://docs.gtk.org/gio/method.File.stop_mountable_finish.html)
    pub fn stopMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_stop_mountable_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [supports_thread_contexts](https://docs.gtk.org/gio/method.File.supports_thread_contexts.html)
    pub fn supportsThreadContexts(self: *File) bool {
        const cFn = @extern(*const fn (*File) callconv(.c) bool, .{ .name = "g_file_supports_thread_contexts" });
        const ret = cFn(self);
        return ret;
    }
    /// method [trash](https://docs.gtk.org/gio/method.File.trash.html)
    pub fn trash(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_trash" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [trash_async](https://docs.gtk.org/gio/method.File.trash_async.html)
    pub fn trashAsync(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_trash_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [trash_finish](https://docs.gtk.org/gio/method.File.trash_finish.html)
    pub fn trashFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_trash_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [unmount_mountable](https://docs.gtk.org/gio/method.File.unmount_mountable.html)
    pub const unmountMountable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unmountMountable(self: *File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*File, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_unmount_mountable" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.unmountMountable;
    /// Deprecated:
    /// method [unmount_mountable_finish](https://docs.gtk.org/gio/method.File.unmount_mountable_finish.html)
    pub const unmountMountableFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unmountMountableFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_unmount_mountable_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.unmountMountableFinish;
    /// method [unmount_mountable_with_operation](https://docs.gtk.org/gio/method.File.unmount_mountable_with_operation.html)
    pub fn unmountMountableWithOperation(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*File, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_unmount_mountable_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [unmount_mountable_with_operation_finish](https://docs.gtk.org/gio/method.File.unmount_mountable_with_operation_finish.html)
    pub fn unmountMountableWithOperationFinish(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*File, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_unmount_mountable_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [append_to](https://docs.gtk.org/gio/vfunc.File.append_to.html)
    pub fn appendToV(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.append_to.?;
        const ret = vFn(self, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [append_to_async](https://docs.gtk.org/gio/vfunc.File.append_to_async.html)
    pub fn appendToAsyncV(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.append_to_async.?;
        const ret = vFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [append_to_finish](https://docs.gtk.org/gio/vfunc.File.append_to_finish.html)
    pub fn appendToFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.append_to_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [copy](https://docs.gtk.org/gio/vfunc.File.copy.html)
    pub fn copyV(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy.?;
        const ret = vFn(self, _destination, _flags, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _error);
        return ret;
    }
    /// vfunc [copy_async](https://docs.gtk.org/gio/vfunc.File.copy_async.html)
    pub fn copyAsyncV(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy_async.?;
        const ret = vFn(self, _destination, _flags, _io_priority, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [copy_finish](https://docs.gtk.org/gio/vfunc.File.copy_finish.html)
    pub fn copyFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [create](https://docs.gtk.org/gio/vfunc.File.create.html)
    pub fn createV(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create.?;
        const ret = vFn(self, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [create_async](https://docs.gtk.org/gio/vfunc.File.create_async.html)
    pub fn createAsyncV(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_async.?;
        const ret = vFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [create_finish](https://docs.gtk.org/gio/vfunc.File.create_finish.html)
    pub fn createFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [create_readwrite](https://docs.gtk.org/gio/vfunc.File.create_readwrite.html)
    pub fn createReadwriteV(self: *File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_readwrite.?;
        const ret = vFn(self, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [create_readwrite_async](https://docs.gtk.org/gio/vfunc.File.create_readwrite_async.html)
    pub fn createReadwriteAsyncV(self: *File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_readwrite_async.?;
        const ret = vFn(self, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [create_readwrite_finish](https://docs.gtk.org/gio/vfunc.File.create_readwrite_finish.html)
    pub fn createReadwriteFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_readwrite_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [delete_file](https://docs.gtk.org/gio/vfunc.File.delete_file.html)
    pub fn deleteFileV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_file.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [delete_file_async](https://docs.gtk.org/gio/vfunc.File.delete_file_async.html)
    pub fn deleteFileAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_file_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [delete_file_finish](https://docs.gtk.org/gio/vfunc.File.delete_file_finish.html)
    pub fn deleteFileFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_file_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [dup](https://docs.gtk.org/gio/vfunc.File.dup.html)
    pub fn dupV(self: *File) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dup.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [eject_mountable](https://docs.gtk.org/gio/vfunc.File.eject_mountable.html)
    pub fn ejectMountableV(self: *File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_mountable.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_mountable_finish](https://docs.gtk.org/gio/vfunc.File.eject_mountable_finish.html)
    pub fn ejectMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [eject_mountable_with_operation](https://docs.gtk.org/gio/vfunc.File.eject_mountable_with_operation.html)
    pub fn ejectMountableWithOperationV(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_mountable_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_mountable_with_operation_finish](https://docs.gtk.org/gio/vfunc.File.eject_mountable_with_operation_finish.html)
    pub fn ejectMountableWithOperationFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_mountable_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [enumerate_children](https://docs.gtk.org/gio/vfunc.File.enumerate_children.html)
    pub fn enumerateChildrenV(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileEnumerator {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate_children.?;
        const ret = vFn(self, _attributes, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [enumerate_children_async](https://docs.gtk.org/gio/vfunc.File.enumerate_children_async.html)
    pub fn enumerateChildrenAsyncV(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate_children_async.?;
        const ret = vFn(self, _attributes, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [enumerate_children_finish](https://docs.gtk.org/gio/vfunc.File.enumerate_children_finish.html)
    pub fn enumerateChildrenFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileEnumerator {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate_children_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [equal](https://docs.gtk.org/gio/vfunc.File.equal.html)
    pub fn equalV(self: *File, _file2: *gio.File) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.equal.?;
        const ret = vFn(self, _file2);
        return ret;
    }
    /// vfunc [find_enclosing_mount](https://docs.gtk.org/gio/vfunc.File.find_enclosing_mount.html)
    pub fn findEnclosingMountV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.Mount {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.find_enclosing_mount.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [find_enclosing_mount_async](https://docs.gtk.org/gio/vfunc.File.find_enclosing_mount_async.html)
    pub fn findEnclosingMountAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.find_enclosing_mount_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [find_enclosing_mount_finish](https://docs.gtk.org/gio/vfunc.File.find_enclosing_mount_finish.html)
    pub fn findEnclosingMountFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.Mount {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.find_enclosing_mount_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [get_basename](https://docs.gtk.org/gio/vfunc.File.get_basename.html)
    pub fn getBasenameV(self: *File) ?[*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_basename.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_child_for_display_name](https://docs.gtk.org/gio/vfunc.File.get_child_for_display_name.html)
    pub fn getChildForDisplayNameV(self: *File, _display_name: [*:0]const u8, _error: *?*core.Error) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_child_for_display_name.?;
        const ret = vFn(self, _display_name, _error);
        return ret;
    }
    /// vfunc [get_parent](https://docs.gtk.org/gio/vfunc.File.get_parent.html)
    pub fn getParentV(self: *File) ?*gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_parent.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_parse_name](https://docs.gtk.org/gio/vfunc.File.get_parse_name.html)
    pub fn getParseNameV(self: *File) [*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_parse_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_path](https://docs.gtk.org/gio/vfunc.File.get_path.html)
    pub fn getPathV(self: *File) ?[*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_path.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_relative_path](https://docs.gtk.org/gio/vfunc.File.get_relative_path.html)
    pub fn getRelativePathV(self: *File, _descendant: *gio.File) ?[*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_relative_path.?;
        const ret = vFn(self, _descendant);
        return ret;
    }
    /// vfunc [get_uri](https://docs.gtk.org/gio/vfunc.File.get_uri.html)
    pub fn getUriV(self: *File) [*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_uri.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_uri_scheme](https://docs.gtk.org/gio/vfunc.File.get_uri_scheme.html)
    pub fn getUriSchemeV(self: *File) ?[*:0]u8 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_uri_scheme.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [has_uri_scheme](https://docs.gtk.org/gio/vfunc.File.has_uri_scheme.html)
    pub fn hasUriSchemeV(self: *File, _uri_scheme: [*:0]const u8) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.has_uri_scheme.?;
        const ret = vFn(self, _uri_scheme);
        return ret;
    }
    /// vfunc [hash](https://docs.gtk.org/gio/vfunc.File.hash.html)
    pub fn hashV(self: *File) u32 {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.hash.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_native](https://docs.gtk.org/gio/vfunc.File.is_native.html)
    pub fn isNativeV(self: *File) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_native.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [make_directory](https://docs.gtk.org/gio/vfunc.File.make_directory.html)
    pub fn makeDirectoryV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_directory.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [make_directory_async](https://docs.gtk.org/gio/vfunc.File.make_directory_async.html)
    pub fn makeDirectoryAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_directory_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [make_directory_finish](https://docs.gtk.org/gio/vfunc.File.make_directory_finish.html)
    pub fn makeDirectoryFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_directory_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [make_symbolic_link](https://docs.gtk.org/gio/vfunc.File.make_symbolic_link.html)
    pub fn makeSymbolicLinkV(self: *File, _symlink_value: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_symbolic_link.?;
        const ret = vFn(self, _symlink_value, _cancellable, _error);
        return ret;
    }
    /// vfunc [make_symbolic_link_async](https://docs.gtk.org/gio/vfunc.File.make_symbolic_link_async.html)
    pub fn makeSymbolicLinkAsyncV(self: *File, _symlink_value: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_symbolic_link_async.?;
        const ret = vFn(self, _symlink_value, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [make_symbolic_link_finish](https://docs.gtk.org/gio/vfunc.File.make_symbolic_link_finish.html)
    pub fn makeSymbolicLinkFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.make_symbolic_link_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [measure_disk_usage](https://docs.gtk.org/gio/vfunc.File.measure_disk_usage.html)
    pub fn measureDiskUsageV(self: *File, _flags: gio.FileMeasureFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileMeasureProgressCallback, _progress_data: ?*anyopaque, _disk_usage: ?*u64, _num_dirs: ?*u64, _num_files: ?*u64, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.measure_disk_usage.?;
        const ret = vFn(self, _flags, _cancellable, _progress_callback, @ptrCast(_progress_data), _disk_usage, _num_dirs, _num_files, _error);
        return ret;
    }
    /// vfunc [measure_disk_usage_finish](https://docs.gtk.org/gio/vfunc.File.measure_disk_usage_finish.html)
    pub fn measureDiskUsageFinishV(self: *File, _result: *gio.AsyncResult, _disk_usage: ?*u64, _num_dirs: ?*u64, _num_files: ?*u64, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.measure_disk_usage_finish.?;
        const ret = vFn(self, _result, _disk_usage, _num_dirs, _num_files, _error);
        return ret;
    }
    /// vfunc [monitor_dir](https://docs.gtk.org/gio/vfunc.File.monitor_dir.html)
    pub fn monitorDirV(self: *File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileMonitor {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.monitor_dir.?;
        const ret = vFn(self, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [monitor_file](https://docs.gtk.org/gio/vfunc.File.monitor_file.html)
    pub fn monitorFileV(self: *File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileMonitor {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.monitor_file.?;
        const ret = vFn(self, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [mount_enclosing_volume](https://docs.gtk.org/gio/vfunc.File.mount_enclosing_volume.html)
    pub fn mountEnclosingVolumeV(self: *File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_enclosing_volume.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [mount_enclosing_volume_finish](https://docs.gtk.org/gio/vfunc.File.mount_enclosing_volume_finish.html)
    pub fn mountEnclosingVolumeFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_enclosing_volume_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [mount_mountable](https://docs.gtk.org/gio/vfunc.File.mount_mountable.html)
    pub fn mountMountableV(self: *File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_mountable.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [mount_mountable_finish](https://docs.gtk.org/gio/vfunc.File.mount_mountable_finish.html)
    pub fn mountMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [move](https://docs.gtk.org/gio/vfunc.File.move.html)
    pub fn moveV(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move.?;
        const ret = vFn(self, _destination, _flags, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _error);
        return ret;
    }
    /// vfunc [move_async](https://docs.gtk.org/gio/vfunc.File.move_async.html)
    pub fn moveAsyncV(self: *File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_async.?;
        const ret = vFn(self, _destination, _flags, _io_priority, _cancellable, _progress_callback, @ptrCast(_progress_callback_data), _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [move_finish](https://docs.gtk.org/gio/vfunc.File.move_finish.html)
    pub fn moveFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [open_readwrite](https://docs.gtk.org/gio/vfunc.File.open_readwrite.html)
    pub fn openReadwriteV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.open_readwrite.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [open_readwrite_async](https://docs.gtk.org/gio/vfunc.File.open_readwrite_async.html)
    pub fn openReadwriteAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.open_readwrite_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [open_readwrite_finish](https://docs.gtk.org/gio/vfunc.File.open_readwrite_finish.html)
    pub fn openReadwriteFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.open_readwrite_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [poll_mountable](https://docs.gtk.org/gio/vfunc.File.poll_mountable.html)
    pub fn pollMountableV(self: *File, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.poll_mountable.?;
        const ret = vFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [poll_mountable_finish](https://docs.gtk.org/gio/vfunc.File.poll_mountable_finish.html)
    pub fn pollMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.poll_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [prefix_matches](https://docs.gtk.org/gio/vfunc.File.prefix_matches.html)
    pub fn prefixMatchesV(self: *File, _file: *gio.File) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.prefix_matches.?;
        const ret = vFn(self, _file);
        return ret;
    }
    /// vfunc [query_filesystem_info](https://docs.gtk.org/gio/vfunc.File.query_filesystem_info.html)
    pub fn queryFilesystemInfoV(self: *File, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_filesystem_info.?;
        const ret = vFn(self, _attributes, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_filesystem_info_async](https://docs.gtk.org/gio/vfunc.File.query_filesystem_info_async.html)
    pub fn queryFilesystemInfoAsyncV(self: *File, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_filesystem_info_async.?;
        const ret = vFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [query_filesystem_info_finish](https://docs.gtk.org/gio/vfunc.File.query_filesystem_info_finish.html)
    pub fn queryFilesystemInfoFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_filesystem_info_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [query_info](https://docs.gtk.org/gio/vfunc.File.query_info.html)
    pub fn queryInfoV(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info.?;
        const ret = vFn(self, _attributes, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_info_async](https://docs.gtk.org/gio/vfunc.File.query_info_async.html)
    pub fn queryInfoAsyncV(self: *File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_async.?;
        const ret = vFn(self, _attributes, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [query_info_finish](https://docs.gtk.org/gio/vfunc.File.query_info_finish.html)
    pub fn queryInfoFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [query_settable_attributes](https://docs.gtk.org/gio/vfunc.File.query_settable_attributes.html)
    pub fn querySettableAttributesV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileAttributeInfoList {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_settable_attributes.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_writable_namespaces](https://docs.gtk.org/gio/vfunc.File.query_writable_namespaces.html)
    pub fn queryWritableNamespacesV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileAttributeInfoList {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_writable_namespaces.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [read_async](https://docs.gtk.org/gio/vfunc.File.read_async.html)
    pub fn readAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [read_finish](https://docs.gtk.org/gio/vfunc.File.read_finish.html)
    pub fn readFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [read_fn](https://docs.gtk.org/gio/vfunc.File.read_fn.html)
    pub fn readFnV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_fn.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [replace](https://docs.gtk.org/gio/vfunc.File.replace.html)
    pub fn replaceV(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace.?;
        const ret = vFn(self, _etag, _make_backup, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [replace_async](https://docs.gtk.org/gio/vfunc.File.replace_async.html)
    pub fn replaceAsyncV(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace_async.?;
        const ret = vFn(self, _etag, _make_backup, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [replace_finish](https://docs.gtk.org/gio/vfunc.File.replace_finish.html)
    pub fn replaceFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileOutputStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [replace_readwrite](https://docs.gtk.org/gio/vfunc.File.replace_readwrite.html)
    pub fn replaceReadwriteV(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace_readwrite.?;
        const ret = vFn(self, _etag, _make_backup, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [replace_readwrite_async](https://docs.gtk.org/gio/vfunc.File.replace_readwrite_async.html)
    pub fn replaceReadwriteAsyncV(self: *File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace_readwrite_async.?;
        const ret = vFn(self, _etag, _make_backup, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [replace_readwrite_finish](https://docs.gtk.org/gio/vfunc.File.replace_readwrite_finish.html)
    pub fn replaceReadwriteFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.FileIOStream {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.replace_readwrite_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [resolve_relative_path](https://docs.gtk.org/gio/vfunc.File.resolve_relative_path.html)
    pub fn resolveRelativePathV(self: *File, _relative_path: [*:0]const u8) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.resolve_relative_path.?;
        const ret = vFn(self, _relative_path);
        return ret;
    }
    /// vfunc [set_attribute](https://docs.gtk.org/gio/vfunc.File.set_attribute.html)
    pub fn setAttributeV(self: *File, _attribute: [*:0]const u8, _type: gio.FileAttributeType, _value_p: ?*anyopaque, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_attribute.?;
        const ret = vFn(self, _attribute, _type, @ptrCast(_value_p), _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [set_attributes_async](https://docs.gtk.org/gio/vfunc.File.set_attributes_async.html)
    pub fn setAttributesAsyncV(self: *File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_attributes_async.?;
        const ret = vFn(self, _info, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [set_attributes_finish](https://docs.gtk.org/gio/vfunc.File.set_attributes_finish.html)
    pub fn setAttributesFinishV(self: *File, _result: *gio.AsyncResult, _info: **gio.FileInfo, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_attributes_finish.?;
        const ret = vFn(self, _result, _info, _error);
        return ret;
    }
    /// vfunc [set_attributes_from_info](https://docs.gtk.org/gio/vfunc.File.set_attributes_from_info.html)
    pub fn setAttributesFromInfoV(self: *File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_attributes_from_info.?;
        const ret = vFn(self, _info, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [set_display_name](https://docs.gtk.org/gio/vfunc.File.set_display_name.html)
    pub fn setDisplayNameV(self: *File, _display_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_display_name.?;
        const ret = vFn(self, _display_name, _cancellable, _error);
        return ret;
    }
    /// vfunc [set_display_name_async](https://docs.gtk.org/gio/vfunc.File.set_display_name_async.html)
    pub fn setDisplayNameAsyncV(self: *File, _display_name: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_display_name_async.?;
        const ret = vFn(self, _display_name, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [set_display_name_finish](https://docs.gtk.org/gio/vfunc.File.set_display_name_finish.html)
    pub fn setDisplayNameFinishV(self: *File, _res: *gio.AsyncResult, _error: *?*core.Error) *gio.File {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_display_name_finish.?;
        const ret = vFn(self, _res, _error);
        return ret;
    }
    /// vfunc [start_mountable](https://docs.gtk.org/gio/vfunc.File.start_mountable.html)
    pub fn startMountableV(self: *File, _flags: gio.DriveStartFlags, _start_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_mountable.?;
        const ret = vFn(self, _flags, _start_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [start_mountable_finish](https://docs.gtk.org/gio/vfunc.File.start_mountable_finish.html)
    pub fn startMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [stop_mountable](https://docs.gtk.org/gio/vfunc.File.stop_mountable.html)
    pub fn stopMountableV(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.stop_mountable.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [stop_mountable_finish](https://docs.gtk.org/gio/vfunc.File.stop_mountable_finish.html)
    pub fn stopMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.stop_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [trash](https://docs.gtk.org/gio/vfunc.File.trash.html)
    pub fn trashV(self: *File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.trash.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [trash_async](https://docs.gtk.org/gio/vfunc.File.trash_async.html)
    pub fn trashAsyncV(self: *File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.trash_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [trash_finish](https://docs.gtk.org/gio/vfunc.File.trash_finish.html)
    pub fn trashFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.trash_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [unmount_mountable](https://docs.gtk.org/gio/vfunc.File.unmount_mountable.html)
    pub fn unmountMountableV(self: *File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_mountable.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [unmount_mountable_finish](https://docs.gtk.org/gio/vfunc.File.unmount_mountable_finish.html)
    pub fn unmountMountableFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_mountable_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [unmount_mountable_with_operation](https://docs.gtk.org/gio/vfunc.File.unmount_mountable_with_operation.html)
    pub fn unmountMountableWithOperationV(self: *File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_mountable_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [unmount_mountable_with_operation_finish](https://docs.gtk.org/gio/vfunc.File.unmount_mountable_with_operation_finish.html)
    pub fn unmountMountableWithOperationFinishV(self: *File, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_mountable_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_get_type" });
        return cFn();
    }
};
/// Struct [FileAttributeInfo](https://docs.gtk.org/gio/struct.FileAttributeInfo.html)
pub const FileAttributeInfo = extern struct {
    name: ?[*:0]const u8,
    type: gio.FileAttributeType,
    flags: gio.FileAttributeInfoFlags,
};
/// Flags [FileAttributeInfoFlags](https://docs.gtk.org/gio/flags.FileAttributeInfoFlags.html)
pub const FileAttributeInfoFlags = packed struct(u32) {
    copy_with_file: bool = false,
    copy_when_moved: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_attribute_info_flags_get_type" });
        return cFn();
    }
};
/// Struct [FileAttributeInfoList](https://docs.gtk.org/gio/struct.FileAttributeInfoList.html)
pub const FileAttributeInfoList = extern struct {
    infos: ?*gio.FileAttributeInfo,
    n_infos: i32,
    /// ctor [new](https://docs.gtk.org/gio/ctor.FileAttributeInfoList.new.html)
    pub fn new() *FileAttributeInfoList {
        const cFn = @extern(*const fn () callconv(.c) *FileAttributeInfoList, .{ .name = "g_file_attribute_info_list_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add](https://docs.gtk.org/gio/method.FileAttributeInfoList.add.html)
    pub fn add(self: *FileAttributeInfoList, _name: [*:0]const u8, _type: gio.FileAttributeType, _flags: gio.FileAttributeInfoFlags) void {
        const cFn = @extern(*const fn (*FileAttributeInfoList, [*:0]const u8, gio.FileAttributeType, gio.FileAttributeInfoFlags) callconv(.c) void, .{ .name = "g_file_attribute_info_list_add" });
        const ret = cFn(self, _name, _type, _flags);
        return ret;
    }
    /// method [dup](https://docs.gtk.org/gio/method.FileAttributeInfoList.dup.html)
    pub fn dup(self: *FileAttributeInfoList) *gio.FileAttributeInfoList {
        const cFn = @extern(*const fn (*FileAttributeInfoList) callconv(.c) *gio.FileAttributeInfoList, .{ .name = "g_file_attribute_info_list_dup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/gio/method.FileAttributeInfoList.lookup.html)
    pub fn lookup(self: *FileAttributeInfoList, _name: [*:0]const u8) *gio.FileAttributeInfo {
        const cFn = @extern(*const fn (*FileAttributeInfoList, [*:0]const u8) callconv(.c) *gio.FileAttributeInfo, .{ .name = "g_file_attribute_info_list_lookup" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.FileAttributeInfoList.ref.html)
    pub fn ref(self: *FileAttributeInfoList) *gio.FileAttributeInfoList {
        const cFn = @extern(*const fn (*FileAttributeInfoList) callconv(.c) *gio.FileAttributeInfoList, .{ .name = "g_file_attribute_info_list_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.FileAttributeInfoList.unref.html)
    pub fn unref(self: *FileAttributeInfoList) void {
        const cFn = @extern(*const fn (*FileAttributeInfoList) callconv(.c) void, .{ .name = "g_file_attribute_info_list_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_attribute_info_list_get_type" });
        return cFn();
    }
};
/// Struct [FileAttributeMatcher](https://docs.gtk.org/gio/struct.FileAttributeMatcher.html)
pub const FileAttributeMatcher = opaque {
    /// ctor [new](https://docs.gtk.org/gio/ctor.FileAttributeMatcher.new.html)
    pub fn new(_attributes: [*:0]const u8) *FileAttributeMatcher {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *FileAttributeMatcher, .{ .name = "g_file_attribute_matcher_new" });
        const ret = cFn(_attributes);
        return ret;
    }
    /// method [enumerate_namespace](https://docs.gtk.org/gio/method.FileAttributeMatcher.enumerate_namespace.html)
    pub fn enumerateNamespace(self: *FileAttributeMatcher, _ns: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileAttributeMatcher, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_attribute_matcher_enumerate_namespace" });
        const ret = cFn(self, _ns);
        return ret;
    }
    /// method [enumerate_next](https://docs.gtk.org/gio/method.FileAttributeMatcher.enumerate_next.html)
    pub fn enumerateNext(self: *FileAttributeMatcher) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileAttributeMatcher) callconv(.c) ?[*:0]u8, .{ .name = "g_file_attribute_matcher_enumerate_next" });
        const ret = cFn(self);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/gio/method.FileAttributeMatcher.matches.html)
    pub fn matches(self: *FileAttributeMatcher, _attribute: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileAttributeMatcher, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_attribute_matcher_matches" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [matches_only](https://docs.gtk.org/gio/method.FileAttributeMatcher.matches_only.html)
    pub fn matchesOnly(self: *FileAttributeMatcher, _attribute: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileAttributeMatcher, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_attribute_matcher_matches_only" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.FileAttributeMatcher.ref.html)
    pub fn ref(self: *FileAttributeMatcher) *gio.FileAttributeMatcher {
        const cFn = @extern(*const fn (*FileAttributeMatcher) callconv(.c) *gio.FileAttributeMatcher, .{ .name = "g_file_attribute_matcher_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [subtract](https://docs.gtk.org/gio/method.FileAttributeMatcher.subtract.html)
    pub fn subtract(self: *FileAttributeMatcher, _subtract: ?*gio.FileAttributeMatcher) ?*gio.FileAttributeMatcher {
        const cFn = @extern(*const fn (*FileAttributeMatcher, ?*gio.FileAttributeMatcher) callconv(.c) ?*gio.FileAttributeMatcher, .{ .name = "g_file_attribute_matcher_subtract" });
        const ret = cFn(self, _subtract);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.FileAttributeMatcher.to_string.html)
    pub fn toString(self: *FileAttributeMatcher) [*:0]u8 {
        const cFn = @extern(*const fn (*FileAttributeMatcher) callconv(.c) [*:0]u8, .{ .name = "g_file_attribute_matcher_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.FileAttributeMatcher.unref.html)
    pub fn unref(self: *FileAttributeMatcher) void {
        const cFn = @extern(*const fn (*FileAttributeMatcher) callconv(.c) void, .{ .name = "g_file_attribute_matcher_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_attribute_matcher_get_type" });
        return cFn();
    }
};
/// Enum [FileAttributeStatus](https://docs.gtk.org/gio/enum.FileAttributeStatus.html)
pub const FileAttributeStatus = enum(u32) {
    unset = 0,
    set = 1,
    error_setting = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_attribute_status_get_type" });
        return cFn();
    }
};
/// Enum [FileAttributeType](https://docs.gtk.org/gio/enum.FileAttributeType.html)
pub const FileAttributeType = enum(u32) {
    invalid = 0,
    string = 1,
    byte_string = 2,
    boolean = 3,
    uint32 = 4,
    int32 = 5,
    uint64 = 6,
    int64 = 7,
    object = 8,
    stringv = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_attribute_type_get_type" });
        return cFn();
    }
};
/// Flags [FileCopyFlags](https://docs.gtk.org/gio/flags.FileCopyFlags.html)
pub const FileCopyFlags = packed struct(u32) {
    overwrite: bool = false,
    backup: bool = false,
    nofollow_symlinks: bool = false,
    all_metadata: bool = false,
    no_fallback_for_move: bool = false,
    target_default_perms: bool = false,
    target_default_modified_time: bool = false,
    _: u25 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_copy_flags_get_type" });
        return cFn();
    }
};
/// Flags [FileCreateFlags](https://docs.gtk.org/gio/flags.FileCreateFlags.html)
pub const FileCreateFlags = packed struct(u32) {
    private: bool = false,
    replace_destination: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_create_flags_get_type" });
        return cFn();
    }
};
/// Iface [FileDescriptorBased](https://docs.gtk.org/gio/iface.FileDescriptorBased.html)
pub const FileDescriptorBased = opaque {
    /// method [get_fd](https://docs.gtk.org/gio/method.FileDescriptorBased.get_fd.html)
    pub fn getFd(self: *FileDescriptorBased) i32 {
        const cFn = @extern(*const fn (*FileDescriptorBased) callconv(.c) i32, .{ .name = "g_file_descriptor_based_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_fd](https://docs.gtk.org/gio/vfunc.FileDescriptorBased.get_fd.html)
    pub fn getFdV(self: *FileDescriptorBased) i32 {
        const class: *FileDescriptorBasedIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_fd.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_descriptor_based_get_type" });
        return cFn();
    }
};
/// Struct [FileDescriptorBasedIface](https://docs.gtk.org/gio/struct.FileDescriptorBasedIface.html)
pub const FileDescriptorBasedIface = extern struct {
    g_iface: gobject.TypeInterface,
    get_fd: ?*const fn (_fd_based: *gio.FileDescriptorBased) callconv(.c) i32,
};
/// Class [FileEnumerator](https://docs.gtk.org/gio/class.FileEnumerator.html)
/// - property [container](https://docs.gtk.org/gio/property.FileEnumerator.container.html): (--) `gio.File`
pub const FileEnumerator = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.FileEnumeratorPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.FileEnumeratorClass;
    /// method [close](https://docs.gtk.org/gio/method.FileEnumerator.close.html)
    pub fn close(self: *FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*FileEnumerator, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_enumerator_close" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_async](https://docs.gtk.org/gio/method.FileEnumerator.close_async.html)
    pub fn closeAsync(self: *FileEnumerator, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileEnumerator, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_enumerator_close_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.FileEnumerator.close_finish.html)
    pub fn closeFinish(self: *FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*FileEnumerator, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_enumerator_close_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gio/method.FileEnumerator.get_child.html)
    pub fn getChild(self: *FileEnumerator, _info: *gio.FileInfo) *gio.File {
        const cFn = @extern(*const fn (*FileEnumerator, *gio.FileInfo) callconv(.c) *gio.File, .{ .name = "g_file_enumerator_get_child" });
        const ret = cFn(self, _info);
        return ret;
    }
    /// method [get_container](https://docs.gtk.org/gio/method.FileEnumerator.get_container.html)
    pub fn getContainer(self: *FileEnumerator) *gio.File {
        const cFn = @extern(*const fn (*FileEnumerator) callconv(.c) *gio.File, .{ .name = "g_file_enumerator_get_container" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_pending](https://docs.gtk.org/gio/method.FileEnumerator.has_pending.html)
    pub fn hasPending(self: *FileEnumerator) bool {
        const cFn = @extern(*const fn (*FileEnumerator) callconv(.c) bool, .{ .name = "g_file_enumerator_has_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.FileEnumerator.is_closed.html)
    pub fn isClosed(self: *FileEnumerator) bool {
        const cFn = @extern(*const fn (*FileEnumerator) callconv(.c) bool, .{ .name = "g_file_enumerator_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [iterate](https://docs.gtk.org/gio/method.FileEnumerator.iterate.html)
    pub fn iterate(self: *FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        out_info: *gio.FileInfo,
        out_child: *gio.File,
    } {
        var out_info_out: *gio.FileInfo = undefined;
        const _out_info = &out_info_out;
        var out_child_out: *gio.File = undefined;
        const _out_child = &out_child_out;
        const cFn = @extern(*const fn (*FileEnumerator, ?**gio.FileInfo, ?**gio.File, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_file_enumerator_iterate" });
        const ret = cFn(self, _out_info, _out_child, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_info = out_info_out, .out_child = out_child_out };
    }
    /// method [next_file](https://docs.gtk.org/gio/method.FileEnumerator.next_file.html)
    pub fn nextFile(self: *FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*gio.FileInfo {
        const cFn = @extern(*const fn (*FileEnumerator, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*gio.FileInfo, .{ .name = "g_file_enumerator_next_file" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [next_files_async](https://docs.gtk.org/gio/method.FileEnumerator.next_files_async.html)
    pub fn nextFilesAsync(self: *FileEnumerator, _num_files: i32, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileEnumerator, i32, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_enumerator_next_files_async" });
        const ret = cFn(self, _num_files, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [next_files_finish](https://docs.gtk.org/gio/method.FileEnumerator.next_files_finish.html)
    pub fn nextFilesFinish(self: *FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*FileEnumerator, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_file_enumerator_next_files_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_pending](https://docs.gtk.org/gio/method.FileEnumerator.set_pending.html)
    pub fn setPending(self: *FileEnumerator, _pending: bool) void {
        const cFn = @extern(*const fn (*FileEnumerator, bool) callconv(.c) void, .{ .name = "g_file_enumerator_set_pending" });
        const ret = cFn(self, _pending);
        return ret;
    }
    /// vfunc [close_async](https://docs.gtk.org/gio/vfunc.FileEnumerator.close_async.html)
    pub fn closeAsyncV(self: *FileEnumerator, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [close_finish](https://docs.gtk.org/gio/vfunc.FileEnumerator.close_finish.html)
    pub fn closeFinishV(self: *FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [close_fn](https://docs.gtk.org/gio/vfunc.FileEnumerator.close_fn.html)
    pub fn closeFnV(self: *FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_fn.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [next_file](https://docs.gtk.org/gio/vfunc.FileEnumerator.next_file.html)
    pub fn nextFileV(self: *FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*gio.FileInfo {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next_file.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [next_files_async](https://docs.gtk.org/gio/vfunc.FileEnumerator.next_files_async.html)
    pub fn nextFilesAsyncV(self: *FileEnumerator, _num_files: i32, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next_files_async.?;
        const ret = vFn(self, _num_files, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [next_files_finish](https://docs.gtk.org/gio/vfunc.FileEnumerator.next_files_finish.html)
    pub fn nextFilesFinishV(self: *FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *FileEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next_files_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_enumerator_get_type" });
        return cFn();
    }
};
pub const FileEnumeratorClass = extern struct {
    parent_class: gobject.ObjectClass,
    next_file: ?*const fn (_enumerator: *gio.FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*gio.FileInfo,
    close_fn: ?*const fn (_enumerator: *gio.FileEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    next_files_async: ?*const fn (_enumerator: *gio.FileEnumerator, _num_files: i32, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    next_files_finish: ?*const fn (_enumerator: *gio.FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    close_async: ?*const fn (_enumerator: *gio.FileEnumerator, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    close_finish: ?*const fn (_enumerator: *gio.FileEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
};
pub const FileEnumeratorPrivate = opaque {};
/// Class [FileIOStream](https://docs.gtk.org/gio/class.FileIOStream.html)
pub const FileIOStream = extern struct {
    parent_instance: gio.IOStream,
    priv: ?*gio.FileIOStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.IOStream;
    pub const Class = gio.FileIOStreamClass;
    /// method [get_etag](https://docs.gtk.org/gio/method.FileIOStream.get_etag.html)
    pub fn getEtag(self: *FileIOStream) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileIOStream) callconv(.c) ?[*:0]u8, .{ .name = "g_file_io_stream_get_etag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [query_info](https://docs.gtk.org/gio/method.FileIOStream.query_info.html)
    pub fn queryInfo(self: *FileIOStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileIOStream, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_io_stream_query_info" });
        const ret = cFn(self, _attributes, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_info_async](https://docs.gtk.org/gio/method.FileIOStream.query_info_async.html)
    pub fn queryInfoAsync(self: *FileIOStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileIOStream, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_io_stream_query_info_async" });
        const ret = cFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_info_finish](https://docs.gtk.org/gio/method.FileIOStream.query_info_finish.html)
    pub fn queryInfoFinish(self: *FileIOStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileIOStream, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_io_stream_query_info_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_seek](https://docs.gtk.org/gio/vfunc.FileIOStream.can_seek.html)
    pub fn canSeekV(self: *FileIOStream) bool {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_seek.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_truncate](https://docs.gtk.org/gio/vfunc.FileIOStream.can_truncate.html)
    pub fn canTruncateV(self: *FileIOStream) bool {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_truncate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_etag](https://docs.gtk.org/gio/vfunc.FileIOStream.get_etag.html)
    pub fn getEtagV(self: *FileIOStream) ?[*:0]u8 {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_etag.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [query_info](https://docs.gtk.org/gio/vfunc.FileIOStream.query_info.html)
    pub fn queryInfoV(self: *FileIOStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info.?;
        const ret = vFn(self, _attributes, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_info_async](https://docs.gtk.org/gio/vfunc.FileIOStream.query_info_async.html)
    pub fn queryInfoAsyncV(self: *FileIOStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_async.?;
        const ret = vFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [query_info_finish](https://docs.gtk.org/gio/vfunc.FileIOStream.query_info_finish.html)
    pub fn queryInfoFinishV(self: *FileIOStream, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [seek](https://docs.gtk.org/gio/vfunc.FileIOStream.seek.html)
    pub fn seekV(self: *FileIOStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.seek.?;
        const ret = vFn(self, _offset, _type, _cancellable, _error);
        return ret;
    }
    /// vfunc [tell](https://docs.gtk.org/gio/vfunc.FileIOStream.tell.html)
    pub fn tellV(self: *FileIOStream) i64 {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.tell.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [truncate_fn](https://docs.gtk.org/gio/vfunc.FileIOStream.truncate_fn.html)
    pub fn truncateFnV(self: *FileIOStream, _size: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileIOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.truncate_fn.?;
        const ret = vFn(self, _size, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_io_stream_get_type" });
        return cFn();
    }
};
pub const FileIOStreamClass = extern struct {
    parent_class: gio.IOStreamClass,
    tell: ?*const fn (_stream: *gio.FileIOStream) callconv(.c) i64,
    can_seek: ?*const fn (_stream: *gio.FileIOStream) callconv(.c) bool,
    seek: ?*const fn (_stream: *gio.FileIOStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    can_truncate: ?*const fn (_stream: *gio.FileIOStream) callconv(.c) bool,
    truncate_fn: ?*const fn (_stream: *gio.FileIOStream, _size: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    query_info: ?*const fn (_stream: *gio.FileIOStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_info_async: ?*const fn (_stream: *gio.FileIOStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    query_info_finish: ?*const fn (_stream: *gio.FileIOStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    get_etag: ?*const fn (_stream: *gio.FileIOStream) callconv(.c) ?[*:0]u8,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const FileIOStreamPrivate = opaque {};
/// Class [FileIcon](https://docs.gtk.org/gio/class.FileIcon.html)
/// - property [file](https://docs.gtk.org/gio/property.FileIcon.file.html): (r-) `gio.File`
pub const FileIcon = opaque {
    pub const Interfaces = [_]type{ gio.Icon, gio.LoadableIcon };
    pub const Parent = gobject.Object;
    pub const Class = gio.FileIconClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.FileIcon.new.html)
    pub fn new(_file: *gio.File) *FileIcon {
        const cFn = @extern(*const fn (*gio.File) callconv(.c) *FileIcon, .{ .name = "g_file_icon_new" });
        const ret = cFn(_file);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gio/method.FileIcon.get_file.html)
    pub fn getFile(self: *FileIcon) *gio.File {
        const cFn = @extern(*const fn (*FileIcon) callconv(.c) *gio.File, .{ .name = "g_file_icon_get_file" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_icon_get_type" });
        return cFn();
    }
};
pub const FileIconClass = opaque {};
/// Struct [FileIface](https://docs.gtk.org/gio/struct.FileIface.html)
pub const FileIface = extern struct {
    g_iface: gobject.TypeInterface,
    dup: ?*const fn (_file: *gio.File) callconv(.c) *gio.File,
    hash: ?*const fn (_file: *gio.File) callconv(.c) u32,
    equal: ?*const fn (_file1: *gio.File, _file2: *gio.File) callconv(.c) bool,
    is_native: ?*const fn (_file: *gio.File) callconv(.c) bool,
    has_uri_scheme: ?*const fn (_file: *gio.File, _uri_scheme: [*:0]const u8) callconv(.c) bool,
    get_uri_scheme: ?*const fn (_file: *gio.File) callconv(.c) ?[*:0]u8,
    get_basename: ?*const fn (_file: *gio.File) callconv(.c) ?[*:0]u8,
    get_path: ?*const fn (_file: *gio.File) callconv(.c) ?[*:0]u8,
    get_uri: ?*const fn (_file: *gio.File) callconv(.c) [*:0]u8,
    get_parse_name: ?*const fn (_file: *gio.File) callconv(.c) [*:0]u8,
    get_parent: ?*const fn (_file: *gio.File) callconv(.c) ?*gio.File,
    prefix_matches: ?*const fn (_prefix: *gio.File, _file: *gio.File) callconv(.c) bool,
    get_relative_path: ?*const fn (_parent: *gio.File, _descendant: *gio.File) callconv(.c) ?[*:0]u8,
    resolve_relative_path: ?*const fn (_file: *gio.File, _relative_path: [*:0]const u8) callconv(.c) *gio.File,
    get_child_for_display_name: ?*const fn (_file: *gio.File, _display_name: [*:0]const u8, _error: *?*core.Error) callconv(.c) *gio.File,
    enumerate_children: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileEnumerator,
    enumerate_children_async: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    enumerate_children_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileEnumerator,
    query_info: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_info_async: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    query_info_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_filesystem_info: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_filesystem_info_async: ?*const fn (_file: *gio.File, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    query_filesystem_info_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    find_enclosing_mount: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.Mount,
    find_enclosing_mount_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    find_enclosing_mount_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.Mount,
    set_display_name: ?*const fn (_file: *gio.File, _display_name: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.File,
    set_display_name_async: ?*const fn (_file: *gio.File, _display_name: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    set_display_name_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.File,
    query_settable_attributes: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileAttributeInfoList,
    _query_settable_attributes_async: ?*anyopaque,
    _query_settable_attributes_finish: ?*anyopaque,
    query_writable_namespaces: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileAttributeInfoList,
    _query_writable_namespaces_async: ?*anyopaque,
    _query_writable_namespaces_finish: ?*anyopaque,
    set_attribute: ?*const fn (_file: *gio.File, _attribute: [*:0]const u8, _type: gio.FileAttributeType, _value_p: ?*anyopaque, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    set_attributes_from_info: ?*const fn (_file: *gio.File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    set_attributes_async: ?*const fn (_file: *gio.File, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    set_attributes_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _info: **gio.FileInfo, _error: *?*core.Error) callconv(.c) bool,
    read_fn: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInputStream,
    read_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    read_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInputStream,
    append_to: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    append_to_async: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    append_to_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    create: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    create_async: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    create_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    replace: ?*const fn (_file: *gio.File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    replace_async: ?*const fn (_file: *gio.File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    replace_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileOutputStream,
    delete_file: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    delete_file_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    delete_file_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    trash: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    trash_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    trash_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    make_directory: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    make_directory_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    make_directory_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    make_symbolic_link: ?*const fn (_file: *gio.File, _symlink_value: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    make_symbolic_link_async: ?*const fn (_file: *gio.File, _symlink_value: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    make_symbolic_link_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    copy: ?*const fn (_source: *gio.File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool,
    copy_async: ?*const fn (_source: *gio.File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    copy_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    move: ?*const fn (_source: *gio.File, _destination: *gio.File, _flags: gio.FileCopyFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) bool,
    move_async: ?*const fn (_source: *gio.File, _destination: *gio.File, _flags: gio.FileCopyFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileProgressCallback, _progress_callback_data: ?*anyopaque, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    move_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    mount_mountable: ?*const fn (_file: *gio.File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    mount_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.File,
    unmount_mountable: ?*const fn (_file: *gio.File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    unmount_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    eject_mountable: ?*const fn (_file: *gio.File, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    mount_enclosing_volume: ?*const fn (_location: *gio.File, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    mount_enclosing_volume_finish: ?*const fn (_location: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    monitor_dir: ?*const fn (_file: *gio.File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileMonitor,
    monitor_file: ?*const fn (_file: *gio.File, _flags: gio.FileMonitorFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileMonitor,
    open_readwrite: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    open_readwrite_async: ?*const fn (_file: *gio.File, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    open_readwrite_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    create_readwrite: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    create_readwrite_async: ?*const fn (_file: *gio.File, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    create_readwrite_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    replace_readwrite: ?*const fn (_file: *gio.File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    replace_readwrite_async: ?*const fn (_file: *gio.File, _etag: ?[*:0]const u8, _make_backup: bool, _flags: gio.FileCreateFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    replace_readwrite_finish: ?*const fn (_file: *gio.File, _res: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileIOStream,
    start_mountable: ?*const fn (_file: *gio.File, _flags: gio.DriveStartFlags, _start_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    start_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    stop_mountable: ?*const fn (_file: *gio.File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    stop_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    supports_thread_contexts: bool,
    unmount_mountable_with_operation: ?*const fn (_file: *gio.File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    unmount_mountable_with_operation_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    eject_mountable_with_operation: ?*const fn (_file: *gio.File, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_mountable_with_operation_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    poll_mountable: ?*const fn (_file: *gio.File, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    poll_mountable_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    measure_disk_usage: ?*const fn (_file: *gio.File, _flags: gio.FileMeasureFlags, _cancellable: ?*gio.Cancellable, _progress_callback: ?gio.FileMeasureProgressCallback, _progress_data: ?*anyopaque, _disk_usage: ?*u64, _num_dirs: ?*u64, _num_files: ?*u64, _error: *?*core.Error) callconv(.c) bool,
    measure_disk_usage_async: ?*anyopaque,
    measure_disk_usage_finish: ?*const fn (_file: *gio.File, _result: *gio.AsyncResult, _disk_usage: ?*u64, _num_dirs: ?*u64, _num_files: ?*u64, _error: *?*core.Error) callconv(.c) bool,
};
/// Class [FileInfo](https://docs.gtk.org/gio/class.FileInfo.html)
pub const FileInfo = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gio.FileInfoClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.FileInfo.new.html)
    pub fn new() *FileInfo {
        const cFn = @extern(*const fn () callconv(.c) *FileInfo, .{ .name = "g_file_info_new" });
        const ret = cFn();
        return ret;
    }
    /// method [clear_status](https://docs.gtk.org/gio/method.FileInfo.clear_status.html)
    pub fn clearStatus(self: *FileInfo) void {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) void, .{ .name = "g_file_info_clear_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy_into](https://docs.gtk.org/gio/method.FileInfo.copy_into.html)
    pub fn copyInto(self: *FileInfo, _dest_info: *gio.FileInfo) void {
        const cFn = @extern(*const fn (*FileInfo, *gio.FileInfo) callconv(.c) void, .{ .name = "g_file_info_copy_into" });
        const ret = cFn(self, _dest_info);
        return ret;
    }
    /// method [dup](https://docs.gtk.org/gio/method.FileInfo.dup.html)
    pub fn dup(self: *FileInfo) *gio.FileInfo {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) *gio.FileInfo, .{ .name = "g_file_info_dup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_access_date_time](https://docs.gtk.org/gio/method.FileInfo.get_access_date_time.html)
    pub fn getAccessDateTime(self: *FileInfo) ?*glib.DateTime {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*glib.DateTime, .{ .name = "g_file_info_get_access_date_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_attribute_as_string](https://docs.gtk.org/gio/method.FileInfo.get_attribute_as_string.html)
    pub fn getAttributeAsString(self: *FileInfo, _attribute: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_attribute_as_string" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_boolean](https://docs.gtk.org/gio/method.FileInfo.get_attribute_boolean.html)
    pub fn getAttributeBoolean(self: *FileInfo, _attribute: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_info_get_attribute_boolean" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_byte_string](https://docs.gtk.org/gio/method.FileInfo.get_attribute_byte_string.html)
    pub fn getAttributeByteString(self: *FileInfo, _attribute: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_attribute_byte_string" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_data](https://docs.gtk.org/gio/method.FileInfo.get_attribute_data.html)
    pub fn getAttributeData(self: *FileInfo, _attribute: [*:0]const u8) ?struct {
        type: gio.FileAttributeType,
        value_pp: *anyopaque,
        status: gio.FileAttributeStatus,
    } {
        var type_out: gio.FileAttributeType = undefined;
        const _type = &type_out;
        var value_pp_out: *anyopaque = undefined;
        const _value_pp = &value_pp_out;
        var status_out: gio.FileAttributeStatus = undefined;
        const _status = &status_out;
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, ?*gio.FileAttributeType, ?*anyopaque, ?*gio.FileAttributeStatus) callconv(.c) bool, .{ .name = "g_file_info_get_attribute_data" });
        const ret = cFn(self, _attribute, _type, @ptrCast(_value_pp), _status);
        if (!ret) return null;
        return .{ .type = type_out, .value_pp = value_pp_out, .status = status_out };
    }
    /// method [get_attribute_file_path](https://docs.gtk.org/gio/method.FileInfo.get_attribute_file_path.html)
    pub fn getAttributeFilePath(self: *FileInfo, _attribute: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_attribute_file_path" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_int32](https://docs.gtk.org/gio/method.FileInfo.get_attribute_int32.html)
    pub fn getAttributeInt32(self: *FileInfo, _attribute: [*:0]const u8) i32 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) i32, .{ .name = "g_file_info_get_attribute_int32" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_int64](https://docs.gtk.org/gio/method.FileInfo.get_attribute_int64.html)
    pub fn getAttributeInt64(self: *FileInfo, _attribute: [*:0]const u8) i64 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) i64, .{ .name = "g_file_info_get_attribute_int64" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_object](https://docs.gtk.org/gio/method.FileInfo.get_attribute_object.html)
    pub fn getAttributeObject(self: *FileInfo, _attribute: [*:0]const u8) ?*gobject.Object {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?*gobject.Object, .{ .name = "g_file_info_get_attribute_object" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_status](https://docs.gtk.org/gio/method.FileInfo.get_attribute_status.html)
    pub fn getAttributeStatus(self: *FileInfo, _attribute: [*:0]const u8) gio.FileAttributeStatus {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) gio.FileAttributeStatus, .{ .name = "g_file_info_get_attribute_status" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_string](https://docs.gtk.org/gio/method.FileInfo.get_attribute_string.html)
    pub fn getAttributeString(self: *FileInfo, _attribute: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_attribute_string" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_stringv](https://docs.gtk.org/gio/method.FileInfo.get_attribute_stringv.html)
    pub fn getAttributeStringv(self: *FileInfo, _attribute: [*:0]const u8) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "g_file_info_get_attribute_stringv" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_type](https://docs.gtk.org/gio/method.FileInfo.get_attribute_type.html)
    pub fn getAttributeType(self: *FileInfo, _attribute: [*:0]const u8) gio.FileAttributeType {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) gio.FileAttributeType, .{ .name = "g_file_info_get_attribute_type" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_uint32](https://docs.gtk.org/gio/method.FileInfo.get_attribute_uint32.html)
    pub fn getAttributeUint32(self: *FileInfo, _attribute: [*:0]const u8) u32 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) u32, .{ .name = "g_file_info_get_attribute_uint32" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_attribute_uint64](https://docs.gtk.org/gio/method.FileInfo.get_attribute_uint64.html)
    pub fn getAttributeUint64(self: *FileInfo, _attribute: [*:0]const u8) u64 {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) u64, .{ .name = "g_file_info_get_attribute_uint64" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [get_content_type](https://docs.gtk.org/gio/method.FileInfo.get_content_type.html)
    pub fn getContentType(self: *FileInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_content_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_creation_date_time](https://docs.gtk.org/gio/method.FileInfo.get_creation_date_time.html)
    pub fn getCreationDateTime(self: *FileInfo) ?*glib.DateTime {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*glib.DateTime, .{ .name = "g_file_info_get_creation_date_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_deletion_date](https://docs.gtk.org/gio/method.FileInfo.get_deletion_date.html)
    pub fn getDeletionDate(self: *FileInfo) ?*glib.DateTime {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*glib.DateTime, .{ .name = "g_file_info_get_deletion_date" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display_name](https://docs.gtk.org/gio/method.FileInfo.get_display_name.html)
    pub fn getDisplayName(self: *FileInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) [*:0]u8, .{ .name = "g_file_info_get_display_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_edit_name](https://docs.gtk.org/gio/method.FileInfo.get_edit_name.html)
    pub fn getEditName(self: *FileInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) [*:0]u8, .{ .name = "g_file_info_get_edit_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_etag](https://docs.gtk.org/gio/method.FileInfo.get_etag.html)
    pub fn getEtag(self: *FileInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_etag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file_type](https://docs.gtk.org/gio/method.FileInfo.get_file_type.html)
    pub fn getFileType(self: *FileInfo) gio.FileType {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) gio.FileType, .{ .name = "g_file_info_get_file_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.FileInfo.get_icon.html)
    pub fn getIcon(self: *FileInfo) ?*gio.Icon {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*gio.Icon, .{ .name = "g_file_info_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_backup](https://docs.gtk.org/gio/method.FileInfo.get_is_backup.html)
    pub fn getIsBackup(self: *FileInfo) bool {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) bool, .{ .name = "g_file_info_get_is_backup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_hidden](https://docs.gtk.org/gio/method.FileInfo.get_is_hidden.html)
    pub fn getIsHidden(self: *FileInfo) bool {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) bool, .{ .name = "g_file_info_get_is_hidden" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_symlink](https://docs.gtk.org/gio/method.FileInfo.get_is_symlink.html)
    pub fn getIsSymlink(self: *FileInfo) bool {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) bool, .{ .name = "g_file_info_get_is_symlink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modification_date_time](https://docs.gtk.org/gio/method.FileInfo.get_modification_date_time.html)
    pub fn getModificationDateTime(self: *FileInfo) ?*glib.DateTime {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*glib.DateTime, .{ .name = "g_file_info_get_modification_date_time" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_modification_time](https://docs.gtk.org/gio/method.FileInfo.get_modification_time.html)
    pub const getModificationTime = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModificationTime(self: *FileInfo, _result: *glib.TimeVal) void {
            const cFn = @extern(*const fn (*FileInfo, *glib.TimeVal) callconv(.c) void, .{ .name = "g_file_info_get_modification_time" });
            const ret = cFn(self, _result);
            return ret;
        }
    }.getModificationTime;
    /// method [get_name](https://docs.gtk.org/gio/method.FileInfo.get_name.html)
    pub fn getName(self: *FileInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) [*:0]u8, .{ .name = "g_file_info_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gio/method.FileInfo.get_size.html)
    pub fn getSize(self: *FileInfo) i64 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) i64, .{ .name = "g_file_info_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sort_order](https://docs.gtk.org/gio/method.FileInfo.get_sort_order.html)
    pub fn getSortOrder(self: *FileInfo) i32 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) i32, .{ .name = "g_file_info_get_sort_order" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_symbolic_icon](https://docs.gtk.org/gio/method.FileInfo.get_symbolic_icon.html)
    pub fn getSymbolicIcon(self: *FileInfo) ?*gio.Icon {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?*gio.Icon, .{ .name = "g_file_info_get_symbolic_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_symlink_target](https://docs.gtk.org/gio/method.FileInfo.get_symlink_target.html)
    pub fn getSymlinkTarget(self: *FileInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) ?[*:0]u8, .{ .name = "g_file_info_get_symlink_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_attribute](https://docs.gtk.org/gio/method.FileInfo.has_attribute.html)
    pub fn hasAttribute(self: *FileInfo, _attribute: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_info_has_attribute" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [has_namespace](https://docs.gtk.org/gio/method.FileInfo.has_namespace.html)
    pub fn hasNamespace(self: *FileInfo, _name_space: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "g_file_info_has_namespace" });
        const ret = cFn(self, _name_space);
        return ret;
    }
    /// method [list_attributes](https://docs.gtk.org/gio/method.FileInfo.list_attributes.html)
    pub fn listAttributes(self: *FileInfo, _name_space: ?[*:0]const u8) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*FileInfo, ?[*:0]const u8) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "g_file_info_list_attributes" });
        const ret = cFn(self, _name_space);
        return ret;
    }
    /// method [remove_attribute](https://docs.gtk.org/gio/method.FileInfo.remove_attribute.html)
    pub fn removeAttribute(self: *FileInfo, _attribute: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_remove_attribute" });
        const ret = cFn(self, _attribute);
        return ret;
    }
    /// method [set_access_date_time](https://docs.gtk.org/gio/method.FileInfo.set_access_date_time.html)
    pub fn setAccessDateTime(self: *FileInfo, _atime: *glib.DateTime) void {
        const cFn = @extern(*const fn (*FileInfo, *glib.DateTime) callconv(.c) void, .{ .name = "g_file_info_set_access_date_time" });
        const ret = cFn(self, _atime);
        return ret;
    }
    /// method [set_attribute](https://docs.gtk.org/gio/method.FileInfo.set_attribute.html)
    pub fn setAttribute(self: *FileInfo, _attribute: [*:0]const u8, _type: gio.FileAttributeType, _value_p: *anyopaque) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, gio.FileAttributeType, *anyopaque) callconv(.c) void, .{ .name = "g_file_info_set_attribute" });
        const ret = cFn(self, _attribute, _type, @ptrCast(_value_p));
        return ret;
    }
    /// method [set_attribute_boolean](https://docs.gtk.org/gio/method.FileInfo.set_attribute_boolean.html)
    pub fn setAttributeBoolean(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: bool) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_file_info_set_attribute_boolean" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_byte_string](https://docs.gtk.org/gio/method.FileInfo.set_attribute_byte_string.html)
    pub fn setAttributeByteString(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_attribute_byte_string" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_file_path](https://docs.gtk.org/gio/method.FileInfo.set_attribute_file_path.html)
    pub fn setAttributeFilePath(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_attribute_file_path" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_int32](https://docs.gtk.org/gio/method.FileInfo.set_attribute_int32.html)
    pub fn setAttributeInt32(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: i32) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, i32) callconv(.c) void, .{ .name = "g_file_info_set_attribute_int32" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_int64](https://docs.gtk.org/gio/method.FileInfo.set_attribute_int64.html)
    pub fn setAttributeInt64(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: i64) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, i64) callconv(.c) void, .{ .name = "g_file_info_set_attribute_int64" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_mask](https://docs.gtk.org/gio/method.FileInfo.set_attribute_mask.html)
    pub fn setAttributeMask(self: *FileInfo, _mask: *gio.FileAttributeMatcher) void {
        const cFn = @extern(*const fn (*FileInfo, *gio.FileAttributeMatcher) callconv(.c) void, .{ .name = "g_file_info_set_attribute_mask" });
        const ret = cFn(self, _mask);
        return ret;
    }
    /// method [set_attribute_object](https://docs.gtk.org/gio/method.FileInfo.set_attribute_object.html)
    pub fn setAttributeObject(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: *gobject.Object) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, *gobject.Object) callconv(.c) void, .{ .name = "g_file_info_set_attribute_object" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_status](https://docs.gtk.org/gio/method.FileInfo.set_attribute_status.html)
    pub fn setAttributeStatus(self: *FileInfo, _attribute: [*:0]const u8, _status: gio.FileAttributeStatus) bool {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, gio.FileAttributeStatus) callconv(.c) bool, .{ .name = "g_file_info_set_attribute_status" });
        const ret = cFn(self, _attribute, _status);
        return ret;
    }
    /// method [set_attribute_string](https://docs.gtk.org/gio/method.FileInfo.set_attribute_string.html)
    pub fn setAttributeString(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_attribute_string" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_stringv](https://docs.gtk.org/gio/method.FileInfo.set_attribute_stringv.html)
    pub fn setAttributeStringv(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_attribute_stringv" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_uint32](https://docs.gtk.org/gio/method.FileInfo.set_attribute_uint32.html)
    pub fn setAttributeUint32(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: u32) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, u32) callconv(.c) void, .{ .name = "g_file_info_set_attribute_uint32" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_attribute_uint64](https://docs.gtk.org/gio/method.FileInfo.set_attribute_uint64.html)
    pub fn setAttributeUint64(self: *FileInfo, _attribute: [*:0]const u8, _attr_value: u64) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8, u64) callconv(.c) void, .{ .name = "g_file_info_set_attribute_uint64" });
        const ret = cFn(self, _attribute, _attr_value);
        return ret;
    }
    /// method [set_content_type](https://docs.gtk.org/gio/method.FileInfo.set_content_type.html)
    pub fn setContentType(self: *FileInfo, _content_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_content_type" });
        const ret = cFn(self, _content_type);
        return ret;
    }
    /// method [set_creation_date_time](https://docs.gtk.org/gio/method.FileInfo.set_creation_date_time.html)
    pub fn setCreationDateTime(self: *FileInfo, _creation_time: *glib.DateTime) void {
        const cFn = @extern(*const fn (*FileInfo, *glib.DateTime) callconv(.c) void, .{ .name = "g_file_info_set_creation_date_time" });
        const ret = cFn(self, _creation_time);
        return ret;
    }
    /// method [set_display_name](https://docs.gtk.org/gio/method.FileInfo.set_display_name.html)
    pub fn setDisplayName(self: *FileInfo, _display_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_display_name" });
        const ret = cFn(self, _display_name);
        return ret;
    }
    /// method [set_edit_name](https://docs.gtk.org/gio/method.FileInfo.set_edit_name.html)
    pub fn setEditName(self: *FileInfo, _edit_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_edit_name" });
        const ret = cFn(self, _edit_name);
        return ret;
    }
    /// method [set_file_type](https://docs.gtk.org/gio/method.FileInfo.set_file_type.html)
    pub fn setFileType(self: *FileInfo, _type: gio.FileType) void {
        const cFn = @extern(*const fn (*FileInfo, gio.FileType) callconv(.c) void, .{ .name = "g_file_info_set_file_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gio/method.FileInfo.set_icon.html)
    pub fn setIcon(self: *FileInfo, _icon: *gio.Icon) void {
        const cFn = @extern(*const fn (*FileInfo, *gio.Icon) callconv(.c) void, .{ .name = "g_file_info_set_icon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_is_hidden](https://docs.gtk.org/gio/method.FileInfo.set_is_hidden.html)
    pub fn setIsHidden(self: *FileInfo, _is_hidden: bool) void {
        const cFn = @extern(*const fn (*FileInfo, bool) callconv(.c) void, .{ .name = "g_file_info_set_is_hidden" });
        const ret = cFn(self, _is_hidden);
        return ret;
    }
    /// method [set_is_symlink](https://docs.gtk.org/gio/method.FileInfo.set_is_symlink.html)
    pub fn setIsSymlink(self: *FileInfo, _is_symlink: bool) void {
        const cFn = @extern(*const fn (*FileInfo, bool) callconv(.c) void, .{ .name = "g_file_info_set_is_symlink" });
        const ret = cFn(self, _is_symlink);
        return ret;
    }
    /// method [set_modification_date_time](https://docs.gtk.org/gio/method.FileInfo.set_modification_date_time.html)
    pub fn setModificationDateTime(self: *FileInfo, _mtime: *glib.DateTime) void {
        const cFn = @extern(*const fn (*FileInfo, *glib.DateTime) callconv(.c) void, .{ .name = "g_file_info_set_modification_date_time" });
        const ret = cFn(self, _mtime);
        return ret;
    }
    /// Deprecated:
    /// method [set_modification_time](https://docs.gtk.org/gio/method.FileInfo.set_modification_time.html)
    pub const setModificationTime = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModificationTime(self: *FileInfo, _mtime: *glib.TimeVal) void {
            const cFn = @extern(*const fn (*FileInfo, *glib.TimeVal) callconv(.c) void, .{ .name = "g_file_info_set_modification_time" });
            const ret = cFn(self, _mtime);
            return ret;
        }
    }.setModificationTime;
    /// method [set_name](https://docs.gtk.org/gio/method.FileInfo.set_name.html)
    pub fn setName(self: *FileInfo, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/gio/method.FileInfo.set_size.html)
    pub fn setSize(self: *FileInfo, _size: i64) void {
        const cFn = @extern(*const fn (*FileInfo, i64) callconv(.c) void, .{ .name = "g_file_info_set_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_sort_order](https://docs.gtk.org/gio/method.FileInfo.set_sort_order.html)
    pub fn setSortOrder(self: *FileInfo, _sort_order: i32) void {
        const cFn = @extern(*const fn (*FileInfo, i32) callconv(.c) void, .{ .name = "g_file_info_set_sort_order" });
        const ret = cFn(self, _sort_order);
        return ret;
    }
    /// method [set_symbolic_icon](https://docs.gtk.org/gio/method.FileInfo.set_symbolic_icon.html)
    pub fn setSymbolicIcon(self: *FileInfo, _icon: *gio.Icon) void {
        const cFn = @extern(*const fn (*FileInfo, *gio.Icon) callconv(.c) void, .{ .name = "g_file_info_set_symbolic_icon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_symlink_target](https://docs.gtk.org/gio/method.FileInfo.set_symlink_target.html)
    pub fn setSymlinkTarget(self: *FileInfo, _symlink_target: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileInfo, [*:0]const u8) callconv(.c) void, .{ .name = "g_file_info_set_symlink_target" });
        const ret = cFn(self, _symlink_target);
        return ret;
    }
    /// method [unset_attribute_mask](https://docs.gtk.org/gio/method.FileInfo.unset_attribute_mask.html)
    pub fn unsetAttributeMask(self: *FileInfo) void {
        const cFn = @extern(*const fn (*FileInfo) callconv(.c) void, .{ .name = "g_file_info_unset_attribute_mask" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_info_get_type" });
        return cFn();
    }
};
pub const FileInfoClass = opaque {};
/// Class [FileInputStream](https://docs.gtk.org/gio/class.FileInputStream.html)
pub const FileInputStream = extern struct {
    parent_instance: gio.InputStream,
    priv: ?*gio.FileInputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.InputStream;
    pub const Class = gio.FileInputStreamClass;
    /// method [query_info](https://docs.gtk.org/gio/method.FileInputStream.query_info.html)
    pub fn queryInfo(self: *FileInputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileInputStream, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_input_stream_query_info" });
        const ret = cFn(self, _attributes, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_info_async](https://docs.gtk.org/gio/method.FileInputStream.query_info_async.html)
    pub fn queryInfoAsync(self: *FileInputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileInputStream, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_input_stream_query_info_async" });
        const ret = cFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_info_finish](https://docs.gtk.org/gio/method.FileInputStream.query_info_finish.html)
    pub fn queryInfoFinish(self: *FileInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileInputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_input_stream_query_info_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_seek](https://docs.gtk.org/gio/vfunc.FileInputStream.can_seek.html)
    pub fn canSeekV(self: *FileInputStream) bool {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_seek.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [query_info](https://docs.gtk.org/gio/vfunc.FileInputStream.query_info.html)
    pub fn queryInfoV(self: *FileInputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info.?;
        const ret = vFn(self, _attributes, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_info_async](https://docs.gtk.org/gio/vfunc.FileInputStream.query_info_async.html)
    pub fn queryInfoAsyncV(self: *FileInputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_async.?;
        const ret = vFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [query_info_finish](https://docs.gtk.org/gio/vfunc.FileInputStream.query_info_finish.html)
    pub fn queryInfoFinishV(self: *FileInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [seek](https://docs.gtk.org/gio/vfunc.FileInputStream.seek.html)
    pub fn seekV(self: *FileInputStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.seek.?;
        const ret = vFn(self, _offset, _type, _cancellable, _error);
        return ret;
    }
    /// vfunc [tell](https://docs.gtk.org/gio/vfunc.FileInputStream.tell.html)
    pub fn tellV(self: *FileInputStream) i64 {
        const class: *FileInputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.tell.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_input_stream_get_type" });
        return cFn();
    }
};
pub const FileInputStreamClass = extern struct {
    parent_class: gio.InputStreamClass,
    tell: ?*const fn (_stream: *gio.FileInputStream) callconv(.c) i64,
    can_seek: ?*const fn (_stream: *gio.FileInputStream) callconv(.c) bool,
    seek: ?*const fn (_stream: *gio.FileInputStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    query_info: ?*const fn (_stream: *gio.FileInputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_info_async: ?*const fn (_stream: *gio.FileInputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    query_info_finish: ?*const fn (_stream: *gio.FileInputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const FileInputStreamPrivate = opaque {};
/// Flags [FileMeasureFlags](https://docs.gtk.org/gio/flags.FileMeasureFlags.html)
pub const FileMeasureFlags = packed struct(u32) {
    _0: u1 = 0,
    report_any_error: bool = false,
    apparent_size: bool = false,
    no_xdev: bool = false,
    _: u28 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_measure_flags_get_type" });
        return cFn();
    }
};
/// callback [FileMeasureProgressCallback](https://docs.gtk.org/gio/callback.FileMeasureProgressCallback.html)
pub const FileMeasureProgressCallback = *const fn (_reporting: bool, _current_size: u64, _num_dirs: u64, _num_files: u64, _data: ?*anyopaque) callconv(.c) void;
/// Class [FileMonitor](https://docs.gtk.org/gio/class.FileMonitor.html)
/// - property [cancelled](https://docs.gtk.org/gio/property.FileMonitor.cancelled.html): (r-) `bool`
/// - property [rate-limit](https://docs.gtk.org/gio/property.FileMonitor.rate-limit.html): (rw) `i32`
pub const FileMonitor = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.FileMonitorPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.FileMonitorClass;
    /// method [cancel](https://docs.gtk.org/gio/method.FileMonitor.cancel.html)
    pub fn cancel(self: *FileMonitor) bool {
        const cFn = @extern(*const fn (*FileMonitor) callconv(.c) bool, .{ .name = "g_file_monitor_cancel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [emit_event](https://docs.gtk.org/gio/method.FileMonitor.emit_event.html)
    pub fn emitEvent(self: *FileMonitor, _child: *gio.File, _other_file: *gio.File, _event_type: gio.FileMonitorEvent) void {
        const cFn = @extern(*const fn (*FileMonitor, *gio.File, *gio.File, gio.FileMonitorEvent) callconv(.c) void, .{ .name = "g_file_monitor_emit_event" });
        const ret = cFn(self, _child, _other_file, _event_type);
        return ret;
    }
    /// method [is_cancelled](https://docs.gtk.org/gio/method.FileMonitor.is_cancelled.html)
    pub fn isCancelled(self: *FileMonitor) bool {
        const cFn = @extern(*const fn (*FileMonitor) callconv(.c) bool, .{ .name = "g_file_monitor_is_cancelled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_rate_limit](https://docs.gtk.org/gio/method.FileMonitor.set_rate_limit.html)
    pub fn setRateLimit(self: *FileMonitor, _limit_msecs: i32) void {
        const cFn = @extern(*const fn (*FileMonitor, i32) callconv(.c) void, .{ .name = "g_file_monitor_set_rate_limit" });
        const ret = cFn(self, _limit_msecs);
        return ret;
    }
    /// vfunc [cancel](https://docs.gtk.org/gio/vfunc.FileMonitor.cancel.html)
    pub fn cancelV(self: *FileMonitor) bool {
        const class: *FileMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.cancel.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.FileMonitor.changed.html)
    pub fn changedV(self: *FileMonitor, _file: *gio.File, _other_file: *gio.File, _event_type: gio.FileMonitorEvent) void {
        const class: *FileMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self, _file, _other_file, _event_type);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.FileMonitor.changed.html)
    pub fn connectChanged(self: *FileMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *FileMonitor, *gio.File, *gio.File, gio.FileMonitorEvent });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_monitor_get_type" });
        return cFn();
    }
};
pub const FileMonitorClass = extern struct {
    parent_class: gobject.ObjectClass,
    changed: ?*const fn (_monitor: *gio.FileMonitor, _file: *gio.File, _other_file: *gio.File, _event_type: gio.FileMonitorEvent) callconv(.c) void,
    cancel: ?*const fn (_monitor: *gio.FileMonitor) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
/// Enum [FileMonitorEvent](https://docs.gtk.org/gio/enum.FileMonitorEvent.html)
pub const FileMonitorEvent = enum(u32) {
    changed = 0,
    changes_done_hint = 1,
    deleted = 2,
    created = 3,
    attribute_changed = 4,
    pre_unmount = 5,
    unmounted = 6,
    moved = 7,
    renamed = 8,
    moved_in = 9,
    moved_out = 10,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_monitor_event_get_type" });
        return cFn();
    }
};
/// Flags [FileMonitorFlags](https://docs.gtk.org/gio/flags.FileMonitorFlags.html)
pub const FileMonitorFlags = packed struct(u32) {
    watch_mounts: bool = false,
    send_moved: bool = false,
    watch_hard_links: bool = false,
    watch_moves: bool = false,
    _: u28 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_monitor_flags_get_type" });
        return cFn();
    }
};
pub const FileMonitorPrivate = opaque {};
/// Class [FileOutputStream](https://docs.gtk.org/gio/class.FileOutputStream.html)
pub const FileOutputStream = extern struct {
    parent_instance: gio.OutputStream,
    priv: ?*gio.FileOutputStreamPrivate,
    pub const Interfaces = [_]type{gio.Seekable};
    pub const Parent = gio.OutputStream;
    pub const Class = gio.FileOutputStreamClass;
    /// method [get_etag](https://docs.gtk.org/gio/method.FileOutputStream.get_etag.html)
    pub fn getEtag(self: *FileOutputStream) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileOutputStream) callconv(.c) ?[*:0]u8, .{ .name = "g_file_output_stream_get_etag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [query_info](https://docs.gtk.org/gio/method.FileOutputStream.query_info.html)
    pub fn queryInfo(self: *FileOutputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileOutputStream, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_output_stream_query_info" });
        const ret = cFn(self, _attributes, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [query_info_async](https://docs.gtk.org/gio/method.FileOutputStream.query_info_async.html)
    pub fn queryInfoAsync(self: *FileOutputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileOutputStream, [*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_output_stream_query_info_async" });
        const ret = cFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [query_info_finish](https://docs.gtk.org/gio/method.FileOutputStream.query_info_finish.html)
    pub fn queryInfoFinish(self: *FileOutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.FileInfo {
        const cFn = @extern(*const fn (*FileOutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.FileInfo, .{ .name = "g_file_output_stream_query_info_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_seek](https://docs.gtk.org/gio/vfunc.FileOutputStream.can_seek.html)
    pub fn canSeekV(self: *FileOutputStream) bool {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_seek.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_truncate](https://docs.gtk.org/gio/vfunc.FileOutputStream.can_truncate.html)
    pub fn canTruncateV(self: *FileOutputStream) bool {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_truncate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_etag](https://docs.gtk.org/gio/vfunc.FileOutputStream.get_etag.html)
    pub fn getEtagV(self: *FileOutputStream) ?[*:0]u8 {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_etag.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [query_info](https://docs.gtk.org/gio/vfunc.FileOutputStream.query_info.html)
    pub fn queryInfoV(self: *FileOutputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info.?;
        const ret = vFn(self, _attributes, _cancellable, _error);
        return ret;
    }
    /// vfunc [query_info_async](https://docs.gtk.org/gio/vfunc.FileOutputStream.query_info_async.html)
    pub fn queryInfoAsyncV(self: *FileOutputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_async.?;
        const ret = vFn(self, _attributes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [query_info_finish](https://docs.gtk.org/gio/vfunc.FileOutputStream.query_info_finish.html)
    pub fn queryInfoFinishV(self: *FileOutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.FileInfo {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_info_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [seek](https://docs.gtk.org/gio/vfunc.FileOutputStream.seek.html)
    pub fn seekV(self: *FileOutputStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.seek.?;
        const ret = vFn(self, _offset, _type, _cancellable, _error);
        return ret;
    }
    /// vfunc [tell](https://docs.gtk.org/gio/vfunc.FileOutputStream.tell.html)
    pub fn tellV(self: *FileOutputStream) i64 {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.tell.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [truncate_fn](https://docs.gtk.org/gio/vfunc.FileOutputStream.truncate_fn.html)
    pub fn truncateFnV(self: *FileOutputStream, _size: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *FileOutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.truncate_fn.?;
        const ret = vFn(self, _size, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_output_stream_get_type" });
        return cFn();
    }
};
pub const FileOutputStreamClass = extern struct {
    parent_class: gio.OutputStreamClass,
    tell: ?*const fn (_stream: *gio.FileOutputStream) callconv(.c) i64,
    can_seek: ?*const fn (_stream: *gio.FileOutputStream) callconv(.c) bool,
    seek: ?*const fn (_stream: *gio.FileOutputStream, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    can_truncate: ?*const fn (_stream: *gio.FileOutputStream) callconv(.c) bool,
    truncate_fn: ?*const fn (_stream: *gio.FileOutputStream, _size: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    query_info: ?*const fn (_stream: *gio.FileOutputStream, _attributes: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    query_info_async: ?*const fn (_stream: *gio.FileOutputStream, _attributes: [*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    query_info_finish: ?*const fn (_stream: *gio.FileOutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.FileInfo,
    get_etag: ?*const fn (_stream: *gio.FileOutputStream) callconv(.c) ?[*:0]u8,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const FileOutputStreamPrivate = opaque {};
/// callback [FileProgressCallback](https://docs.gtk.org/gio/callback.FileProgressCallback.html)
pub const FileProgressCallback = *const fn (_current_num_bytes: i64, _total_num_bytes: i64, _data: ?*anyopaque) callconv(.c) void;
/// Flags [FileQueryInfoFlags](https://docs.gtk.org/gio/flags.FileQueryInfoFlags.html)
pub const FileQueryInfoFlags = packed struct(u32) {
    nofollow_symlinks: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_query_info_flags_get_type" });
        return cFn();
    }
};
/// callback [FileReadMoreCallback](https://docs.gtk.org/gio/callback.FileReadMoreCallback.html)
pub const FileReadMoreCallback = *const fn (_file_contents: [*:0]const u8, _file_size: i64, _callback_data: ?*anyopaque) callconv(.c) bool;
/// Enum [FileType](https://docs.gtk.org/gio/enum.FileType.html)
pub const FileType = enum(u32) {
    unknown = 0,
    regular = 1,
    directory = 2,
    symbolic_link = 3,
    special = 4,
    shortcut = 5,
    mountable = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_file_type_get_type" });
        return cFn();
    }
};
/// Class [FilenameCompleter](https://docs.gtk.org/gio/class.FilenameCompleter.html)
pub const FilenameCompleter = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gio.FilenameCompleterClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.FilenameCompleter.new.html)
    pub fn new() *FilenameCompleter {
        const cFn = @extern(*const fn () callconv(.c) *FilenameCompleter, .{ .name = "g_filename_completer_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_completion_suffix](https://docs.gtk.org/gio/method.FilenameCompleter.get_completion_suffix.html)
    pub fn getCompletionSuffix(self: *FilenameCompleter, _initial_text: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FilenameCompleter, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_filename_completer_get_completion_suffix" });
        const ret = cFn(self, _initial_text);
        return ret;
    }
    /// method [get_completions](https://docs.gtk.org/gio/method.FilenameCompleter.get_completions.html)
    pub fn getCompletions(self: *FilenameCompleter, _initial_text: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*FilenameCompleter, [*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_filename_completer_get_completions" });
        const ret = cFn(self, _initial_text);
        return ret;
    }
    /// method [set_dirs_only](https://docs.gtk.org/gio/method.FilenameCompleter.set_dirs_only.html)
    pub fn setDirsOnly(self: *FilenameCompleter, _dirs_only: bool) void {
        const cFn = @extern(*const fn (*FilenameCompleter, bool) callconv(.c) void, .{ .name = "g_filename_completer_set_dirs_only" });
        const ret = cFn(self, _dirs_only);
        return ret;
    }
    /// vfunc [got_completion_data](https://docs.gtk.org/gio/vfunc.FilenameCompleter.got_completion_data.html)
    pub fn gotCompletionDataV(self: *FilenameCompleter) void {
        const class: *FilenameCompleterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.got_completion_data.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [got-completion-data](https://docs.gtk.org/gio/signal.FilenameCompleter.got-completion-data.html)
    pub fn connectGotCompletionData(self: *FilenameCompleter, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("got-completion-data", handler, args, flags, &.{ void, *FilenameCompleter });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_filename_completer_get_type" });
        return cFn();
    }
};
pub const FilenameCompleterClass = extern struct {
    parent_class: gobject.ObjectClass,
    got_completion_data: ?*const fn (_filename_completer: *gio.FilenameCompleter) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
};
/// Enum [FilesystemPreviewType](https://docs.gtk.org/gio/enum.FilesystemPreviewType.html)
pub const FilesystemPreviewType = enum(u32) {
    if_always = 0,
    if_local = 1,
    never = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_filesystem_preview_type_get_type" });
        return cFn();
    }
};
/// Class [FilterInputStream](https://docs.gtk.org/gio/class.FilterInputStream.html)
/// - property [base-stream](https://docs.gtk.org/gio/property.FilterInputStream.base-stream.html): (r-) `gio.InputStream`
/// - property [close-base-stream](https://docs.gtk.org/gio/property.FilterInputStream.close-base-stream.html): (rw) `bool`
pub const FilterInputStream = extern struct {
    parent_instance: gio.InputStream,
    base_stream: ?*gio.InputStream,
    pub const Parent = gio.InputStream;
    pub const Class = gio.FilterInputStreamClass;
    /// method [get_base_stream](https://docs.gtk.org/gio/method.FilterInputStream.get_base_stream.html)
    pub fn getBaseStream(self: *FilterInputStream) *gio.InputStream {
        const cFn = @extern(*const fn (*FilterInputStream) callconv(.c) *gio.InputStream, .{ .name = "g_filter_input_stream_get_base_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_close_base_stream](https://docs.gtk.org/gio/method.FilterInputStream.get_close_base_stream.html)
    pub fn getCloseBaseStream(self: *FilterInputStream) bool {
        const cFn = @extern(*const fn (*FilterInputStream) callconv(.c) bool, .{ .name = "g_filter_input_stream_get_close_base_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_close_base_stream](https://docs.gtk.org/gio/method.FilterInputStream.set_close_base_stream.html)
    pub fn setCloseBaseStream(self: *FilterInputStream, _close_base: bool) void {
        const cFn = @extern(*const fn (*FilterInputStream, bool) callconv(.c) void, .{ .name = "g_filter_input_stream_set_close_base_stream" });
        const ret = cFn(self, _close_base);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_filter_input_stream_get_type" });
        return cFn();
    }
};
pub const FilterInputStreamClass = extern struct {
    parent_class: gio.InputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
};
/// Class [FilterOutputStream](https://docs.gtk.org/gio/class.FilterOutputStream.html)
/// - property [base-stream](https://docs.gtk.org/gio/property.FilterOutputStream.base-stream.html): (r-) `gio.OutputStream`
/// - property [close-base-stream](https://docs.gtk.org/gio/property.FilterOutputStream.close-base-stream.html): (r-) `bool`
pub const FilterOutputStream = extern struct {
    parent_instance: gio.OutputStream,
    base_stream: ?*gio.OutputStream,
    pub const Parent = gio.OutputStream;
    pub const Class = gio.FilterOutputStreamClass;
    /// method [get_base_stream](https://docs.gtk.org/gio/method.FilterOutputStream.get_base_stream.html)
    pub fn getBaseStream(self: *FilterOutputStream) *gio.OutputStream {
        const cFn = @extern(*const fn (*FilterOutputStream) callconv(.c) *gio.OutputStream, .{ .name = "g_filter_output_stream_get_base_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_close_base_stream](https://docs.gtk.org/gio/method.FilterOutputStream.get_close_base_stream.html)
    pub fn getCloseBaseStream(self: *FilterOutputStream) bool {
        const cFn = @extern(*const fn (*FilterOutputStream) callconv(.c) bool, .{ .name = "g_filter_output_stream_get_close_base_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_close_base_stream](https://docs.gtk.org/gio/method.FilterOutputStream.set_close_base_stream.html)
    pub fn setCloseBaseStream(self: *FilterOutputStream, _close_base: bool) void {
        const cFn = @extern(*const fn (*FilterOutputStream, bool) callconv(.c) void, .{ .name = "g_filter_output_stream_set_close_base_stream" });
        const ret = cFn(self, _close_base);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_filter_output_stream_get_type" });
        return cFn();
    }
};
pub const FilterOutputStreamClass = extern struct {
    parent_class: gio.OutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
};
/// Enum [IOErrorEnum](https://docs.gtk.org/gio/enum.IOErrorEnum.html)
pub const IOErrorEnum = enum(u32) {
    failed = 0,
    not_found = 1,
    exists = 2,
    is_directory = 3,
    not_directory = 4,
    not_empty = 5,
    not_regular_file = 6,
    not_symbolic_link = 7,
    not_mountable_file = 8,
    filename_too_long = 9,
    invalid_filename = 10,
    too_many_links = 11,
    no_space = 12,
    invalid_argument = 13,
    permission_denied = 14,
    not_supported = 15,
    not_mounted = 16,
    already_mounted = 17,
    closed = 18,
    cancelled = 19,
    pending = 20,
    read_only = 21,
    cant_create_backup = 22,
    wrong_etag = 23,
    timed_out = 24,
    would_recurse = 25,
    busy = 26,
    would_block = 27,
    host_not_found = 28,
    would_merge = 29,
    failed_handled = 30,
    too_many_open_files = 31,
    not_initialized = 32,
    address_in_use = 33,
    partial_input = 34,
    invalid_data = 35,
    dbus_error = 36,
    host_unreachable = 37,
    network_unreachable = 38,
    connection_refused = 39,
    proxy_failed = 40,
    proxy_auth_failed = 41,
    proxy_need_auth = 42,
    proxy_not_allowed = 43,
    broken_pipe = 44,
    not_connected = 45,
    message_too_large = 46,
    no_such_device = 47,
    destination_unset = 48,
    pub const connection_closed: @This() = @enumFromInt(44);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_error_enum_get_type" });
        return cFn();
    }
};
/// Struct [IOExtension](https://docs.gtk.org/gio/struct.IOExtension.html)
pub const IOExtension = opaque {
    /// method [get_name](https://docs.gtk.org/gio/method.IOExtension.get_name.html)
    pub fn getName(self: *IOExtension) [*:0]u8 {
        const cFn = @extern(*const fn (*IOExtension) callconv(.c) [*:0]u8, .{ .name = "g_io_extension_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gio/method.IOExtension.get_priority.html)
    pub fn getPriority(self: *IOExtension) i32 {
        const cFn = @extern(*const fn (*IOExtension) callconv(.c) i32, .{ .name = "g_io_extension_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_type](https://docs.gtk.org/gio/method.IOExtension.get_type.html)
    pub fn getType(self: *IOExtension) core.Type {
        const cFn = @extern(*const fn (*IOExtension) callconv(.c) core.Type, .{ .name = "g_io_extension_get_type" });
        const ret = cFn(self);
        return ret;
    }
};
/// Struct [IOExtensionPoint](https://docs.gtk.org/gio/struct.IOExtensionPoint.html)
pub const IOExtensionPoint = opaque {
    /// method [get_extension_by_name](https://docs.gtk.org/gio/method.IOExtensionPoint.get_extension_by_name.html)
    pub fn getExtensionByName(self: *IOExtensionPoint, _name: [*:0]const u8) *gio.IOExtension {
        const cFn = @extern(*const fn (*IOExtensionPoint, [*:0]const u8) callconv(.c) *gio.IOExtension, .{ .name = "g_io_extension_point_get_extension_by_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_extensions](https://docs.gtk.org/gio/method.IOExtensionPoint.get_extensions.html)
    pub fn getExtensions(self: *IOExtensionPoint) ?*core.List {
        const cFn = @extern(*const fn (*IOExtensionPoint) callconv(.c) ?*core.List, .{ .name = "g_io_extension_point_get_extensions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_required_type](https://docs.gtk.org/gio/method.IOExtensionPoint.get_required_type.html)
    pub fn getRequiredType(self: *IOExtensionPoint) core.Type {
        const cFn = @extern(*const fn (*IOExtensionPoint) callconv(.c) core.Type, .{ .name = "g_io_extension_point_get_required_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_required_type](https://docs.gtk.org/gio/method.IOExtensionPoint.set_required_type.html)
    pub fn setRequiredType(self: *IOExtensionPoint, _type: core.Type) void {
        const cFn = @extern(*const fn (*IOExtensionPoint, core.Type) callconv(.c) void, .{ .name = "g_io_extension_point_set_required_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// type func [implement](https://docs.gtk.org/gio/type_func.IOExtensionPoint.implement.html)
    pub fn implement(_extension_point_name: [*:0]const u8, _type: core.Type, _extension_name: [*:0]const u8, _priority: i32) *gio.IOExtension {
        const cFn = @extern(*const fn ([*:0]const u8, core.Type, [*:0]const u8, i32) callconv(.c) *gio.IOExtension, .{ .name = "g_io_extension_point_implement" });
        const ret = cFn(_extension_point_name, _type, _extension_name, _priority);
        return ret;
    }
    /// type func [lookup](https://docs.gtk.org/gio/type_func.IOExtensionPoint.lookup.html)
    pub fn lookup(_name: [*:0]const u8) *gio.IOExtensionPoint {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.IOExtensionPoint, .{ .name = "g_io_extension_point_lookup" });
        const ret = cFn(_name);
        return ret;
    }
    /// type func [register](https://docs.gtk.org/gio/type_func.IOExtensionPoint.register.html)
    pub fn register(_name: [*:0]const u8) *gio.IOExtensionPoint {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.IOExtensionPoint, .{ .name = "g_io_extension_point_register" });
        const ret = cFn(_name);
        return ret;
    }
};
/// Class [IOModule](https://docs.gtk.org/gio/class.IOModule.html)
pub const IOModule = opaque {
    pub const Interfaces = [_]type{gobject.TypePlugin};
    pub const Parent = gobject.TypeModule;
    pub const Class = gio.IOModuleClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.IOModule.new.html)
    pub fn new(_filename: [*:0]const u8) *IOModule {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *IOModule, .{ .name = "g_io_module_new" });
        const ret = cFn(_filename);
        return ret;
    }
    /// type func [query](https://docs.gtk.org/gio/type_func.IOModule.query.html)
    pub fn query() [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_io_module_query" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_module_get_type" });
        return cFn();
    }
};
pub const IOModuleClass = opaque {};
/// Struct [IOModuleScope](https://docs.gtk.org/gio/struct.IOModuleScope.html)
pub const IOModuleScope = opaque {
    /// method [block](https://docs.gtk.org/gio/method.IOModuleScope.block.html)
    pub fn block(self: *IOModuleScope, _basename: [*:0]const u8) void {
        const cFn = @extern(*const fn (*IOModuleScope, [*:0]const u8) callconv(.c) void, .{ .name = "g_io_module_scope_block" });
        const ret = cFn(self, _basename);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gio/method.IOModuleScope.free.html)
    pub fn free(self: *IOModuleScope) void {
        const cFn = @extern(*const fn (*IOModuleScope) callconv(.c) void, .{ .name = "g_io_module_scope_free" });
        const ret = cFn(self);
        return ret;
    }
};
/// Enum [IOModuleScopeFlags](https://docs.gtk.org/gio/enum.IOModuleScopeFlags.html)
pub const IOModuleScopeFlags = enum(u32) {
    none = 0,
    block_duplicates = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_module_scope_flags_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Struct [IOSchedulerJob](https://docs.gtk.org/gio/struct.IOSchedulerJob.html)
pub const IOSchedulerJob = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [send_to_mainloop](https://docs.gtk.org/gio/method.IOSchedulerJob.send_to_mainloop.html)
    pub const sendToMainloop = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn sendToMainloop(self: *IOSchedulerJob, func: anytype, func_args: anytype) bool {
            var closure_func = core.zig_closure(func, func_args, &.{bool});
            const _func: glib.SourceFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*IOSchedulerJob, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) bool, .{ .name = "g_io_scheduler_job_send_to_mainloop" });
            const ret = cFn(self, _func, @ptrCast(_user_data), _notify);
            return ret;
        }
    }.sendToMainloop;
    /// Deprecated:
    /// method [send_to_mainloop_async](https://docs.gtk.org/gio/method.IOSchedulerJob.send_to_mainloop_async.html)
    pub const sendToMainloopAsync = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn sendToMainloopAsync(self: *IOSchedulerJob, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{bool});
            const _func: glib.SourceFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*IOSchedulerJob, glib.SourceFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_io_scheduler_job_send_to_mainloop_async" });
            const ret = cFn(self, _func, @ptrCast(_user_data), _notify);
            return ret;
        }
    }.sendToMainloopAsync;
};
/// Deprecated:
/// callback [IOSchedulerJobFunc](https://docs.gtk.org/gio/callback.IOSchedulerJobFunc.html)
pub const IOSchedulerJobFunc = if (config.disable_deprecated) core.Deprecated else *const fn (_job: *gio.IOSchedulerJob, _cancellable: ?*gio.Cancellable, _data: ?*anyopaque) callconv(.c) bool;
/// Class [IOStream](https://docs.gtk.org/gio/class.IOStream.html)
/// - property [closed](https://docs.gtk.org/gio/property.IOStream.closed.html): (r-) `bool`
/// - property [input-stream](https://docs.gtk.org/gio/property.IOStream.input-stream.html): (r-) `gio.InputStream`
/// - property [output-stream](https://docs.gtk.org/gio/property.IOStream.output-stream.html): (r-) `gio.OutputStream`
pub const IOStream = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.IOStreamPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.IOStreamClass;
    /// type func [splice_finish](https://docs.gtk.org/gio/type_func.IOStream.splice_finish.html)
    pub fn spliceFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_io_stream_splice_finish" });
        const ret = cFn(_result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [clear_pending](https://docs.gtk.org/gio/method.IOStream.clear_pending.html)
    pub fn clearPending(self: *IOStream) void {
        const cFn = @extern(*const fn (*IOStream) callconv(.c) void, .{ .name = "g_io_stream_clear_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.IOStream.close.html)
    pub fn close(self: *IOStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*IOStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_io_stream_close" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_async](https://docs.gtk.org/gio/method.IOStream.close_async.html)
    pub fn closeAsync(self: *IOStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*IOStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_io_stream_close_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.IOStream.close_finish.html)
    pub fn closeFinish(self: *IOStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*IOStream, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_io_stream_close_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_input_stream](https://docs.gtk.org/gio/method.IOStream.get_input_stream.html)
    pub fn getInputStream(self: *IOStream) *gio.InputStream {
        const cFn = @extern(*const fn (*IOStream) callconv(.c) *gio.InputStream, .{ .name = "g_io_stream_get_input_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_output_stream](https://docs.gtk.org/gio/method.IOStream.get_output_stream.html)
    pub fn getOutputStream(self: *IOStream) *gio.OutputStream {
        const cFn = @extern(*const fn (*IOStream) callconv(.c) *gio.OutputStream, .{ .name = "g_io_stream_get_output_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_pending](https://docs.gtk.org/gio/method.IOStream.has_pending.html)
    pub fn hasPending(self: *IOStream) bool {
        const cFn = @extern(*const fn (*IOStream) callconv(.c) bool, .{ .name = "g_io_stream_has_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.IOStream.is_closed.html)
    pub fn isClosed(self: *IOStream) bool {
        const cFn = @extern(*const fn (*IOStream) callconv(.c) bool, .{ .name = "g_io_stream_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_pending](https://docs.gtk.org/gio/method.IOStream.set_pending.html)
    pub fn setPending(self: *IOStream, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*IOStream, *?*core.Error) callconv(.c) bool, .{ .name = "g_io_stream_set_pending" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [splice_async](https://docs.gtk.org/gio/method.IOStream.splice_async.html)
    pub fn spliceAsync(self: *IOStream, _stream2: *gio.IOStream, _flags: gio.IOStreamSpliceFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*IOStream, *gio.IOStream, gio.IOStreamSpliceFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_io_stream_splice_async" });
        const ret = cFn(self, _stream2, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [close_async](https://docs.gtk.org/gio/vfunc.IOStream.close_async.html)
    pub fn closeAsyncV(self: *IOStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *IOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [close_finish](https://docs.gtk.org/gio/vfunc.IOStream.close_finish.html)
    pub fn closeFinishV(self: *IOStream, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *IOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [close_fn](https://docs.gtk.org/gio/vfunc.IOStream.close_fn.html)
    pub fn closeFnV(self: *IOStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *IOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_fn.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [get_input_stream](https://docs.gtk.org/gio/vfunc.IOStream.get_input_stream.html)
    pub fn getInputStreamV(self: *IOStream) *gio.InputStream {
        const class: *IOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_input_stream.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_output_stream](https://docs.gtk.org/gio/vfunc.IOStream.get_output_stream.html)
    pub fn getOutputStreamV(self: *IOStream) *gio.OutputStream {
        const class: *IOStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_output_stream.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_stream_get_type" });
        return cFn();
    }
};
/// Struct [IOStreamAdapter](https://docs.gtk.org/gio/struct.IOStreamAdapter.html)
pub const IOStreamAdapter = opaque {};
pub const IOStreamClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_input_stream: ?*const fn (_stream: *gio.IOStream) callconv(.c) *gio.InputStream,
    get_output_stream: ?*const fn (_stream: *gio.IOStream) callconv(.c) *gio.OutputStream,
    close_fn: ?*const fn (_stream: *gio.IOStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    close_async: ?*const fn (_stream: *gio.IOStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    close_finish: ?*const fn (_stream: *gio.IOStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
    _g_reserved8: ?*anyopaque,
    _g_reserved9: ?*anyopaque,
    _g_reserved10: ?*anyopaque,
};
pub const IOStreamPrivate = opaque {};
/// Flags [IOStreamSpliceFlags](https://docs.gtk.org/gio/flags.IOStreamSpliceFlags.html)
pub const IOStreamSpliceFlags = packed struct(u32) {
    close_stream1: bool = false,
    close_stream2: bool = false,
    wait_for_both: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_stream_splice_flags_get_type" });
        return cFn();
    }
};
/// Iface [Icon](https://docs.gtk.org/gio/iface.Icon.html)
pub const Icon = opaque {
    /// type func [deserialize](https://docs.gtk.org/gio/type_func.Icon.deserialize.html)
    pub fn deserialize(_value: *glib.Variant) ?*gio.Icon {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) ?*gio.Icon, .{ .name = "g_icon_deserialize" });
        const ret = cFn(_value);
        return ret;
    }
    /// type func [new_for_string](https://docs.gtk.org/gio/type_func.Icon.new_for_string.html)
    pub fn newForString(_str: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.Icon {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.Icon, .{ .name = "g_icon_new_for_string" });
        const ret = cFn(_str, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gio/method.Icon.equal.html)
    pub fn equal(self: *Icon, _icon2: ?*gio.Icon) bool {
        const cFn = @extern(*const fn (*Icon, ?*gio.Icon) callconv(.c) bool, .{ .name = "g_icon_equal" });
        const ret = cFn(self, _icon2);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/gio/method.Icon.hash.html)
    pub fn hash(self: *Icon) u32 {
        const cFn = @extern(*const fn (*Icon) callconv(.c) u32, .{ .name = "g_icon_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [serialize](https://docs.gtk.org/gio/method.Icon.serialize.html)
    pub fn serialize(self: *Icon) ?*glib.Variant {
        const cFn = @extern(*const fn (*Icon) callconv(.c) ?*glib.Variant, .{ .name = "g_icon_serialize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.Icon.to_string.html)
    pub fn toString(self: *Icon) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Icon) callconv(.c) ?[*:0]u8, .{ .name = "g_icon_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [equal](https://docs.gtk.org/gio/vfunc.Icon.equal.html)
    pub fn equalV(self: *Icon, _icon2: ?*gio.Icon) bool {
        const class: *IconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.equal.?;
        const ret = vFn(self, _icon2);
        return ret;
    }
    /// vfunc [hash](https://docs.gtk.org/gio/vfunc.Icon.hash.html)
    pub fn hashV(self: *Icon) u32 {
        const class: *IconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.hash.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [serialize](https://docs.gtk.org/gio/vfunc.Icon.serialize.html)
    pub fn serializeV(self: *Icon) ?*glib.Variant {
        const class: *IconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.serialize.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [to_tokens](https://docs.gtk.org/gio/vfunc.Icon.to_tokens.html)
    pub fn toTokensV(self: *Icon, _tokens: *core.PtrArray, _out_version: *i32) bool {
        const class: *IconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.to_tokens.?;
        const ret = vFn(self, _tokens, _out_version);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_icon_get_type" });
        return cFn();
    }
};
/// Struct [IconIface](https://docs.gtk.org/gio/struct.IconIface.html)
pub const IconIface = extern struct {
    g_iface: gobject.TypeInterface,
    hash: ?*const fn (_icon: *gio.Icon) callconv(.c) u32,
    equal: ?*const fn (_icon1: ?*gio.Icon, _icon2: ?*gio.Icon) callconv(.c) bool,
    to_tokens: ?*const fn (_icon: *gio.Icon, _tokens: *core.PtrArray, _out_version: *i32) callconv(.c) bool,
    from_tokens: ?*anyopaque,
    serialize: ?*const fn (_icon: *gio.Icon) callconv(.c) ?*glib.Variant,
};
/// Class [InetAddress](https://docs.gtk.org/gio/class.InetAddress.html)
/// - property [bytes](https://docs.gtk.org/gio/property.InetAddress.bytes.html): (r-) `*anyopaque`
/// - property [family](https://docs.gtk.org/gio/property.InetAddress.family.html): (r-) `gio.SocketFamily`
/// - property [is-any](https://docs.gtk.org/gio/property.InetAddress.is-any.html): (r-) `bool`
/// - property [is-link-local](https://docs.gtk.org/gio/property.InetAddress.is-link-local.html): (r-) `bool`
/// - property [is-loopback](https://docs.gtk.org/gio/property.InetAddress.is-loopback.html): (r-) `bool`
/// - property [is-mc-global](https://docs.gtk.org/gio/property.InetAddress.is-mc-global.html): (r-) `bool`
/// - property [is-mc-link-local](https://docs.gtk.org/gio/property.InetAddress.is-mc-link-local.html): (r-) `bool`
/// - property [is-mc-node-local](https://docs.gtk.org/gio/property.InetAddress.is-mc-node-local.html): (r-) `bool`
/// - property [is-mc-org-local](https://docs.gtk.org/gio/property.InetAddress.is-mc-org-local.html): (r-) `bool`
/// - property [is-mc-site-local](https://docs.gtk.org/gio/property.InetAddress.is-mc-site-local.html): (r-) `bool`
/// - property [is-multicast](https://docs.gtk.org/gio/property.InetAddress.is-multicast.html): (r-) `bool`
/// - property [is-site-local](https://docs.gtk.org/gio/property.InetAddress.is-site-local.html): (r-) `bool`
pub const InetAddress = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.InetAddressPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.InetAddressClass;
    /// ctor [new_any](https://docs.gtk.org/gio/ctor.InetAddress.new_any.html)
    pub fn newAny(_family: gio.SocketFamily) *InetAddress {
        const cFn = @extern(*const fn (gio.SocketFamily) callconv(.c) *InetAddress, .{ .name = "g_inet_address_new_any" });
        const ret = cFn(_family);
        return ret;
    }
    /// ctor [new_from_bytes](https://docs.gtk.org/gio/ctor.InetAddress.new_from_bytes.html)
    pub fn newFromBytes(_bytes: [*]u8, _family: gio.SocketFamily) *InetAddress {
        const cFn = @extern(*const fn ([*]u8, gio.SocketFamily) callconv(.c) *InetAddress, .{ .name = "g_inet_address_new_from_bytes" });
        const ret = cFn(_bytes, _family);
        return ret;
    }
    /// ctor [new_from_string](https://docs.gtk.org/gio/ctor.InetAddress.new_from_string.html)
    pub fn newFromString(_string: [*:0]const u8) ?*InetAddress {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*InetAddress, .{ .name = "g_inet_address_new_from_string" });
        const ret = cFn(_string);
        return ret;
    }
    /// ctor [new_loopback](https://docs.gtk.org/gio/ctor.InetAddress.new_loopback.html)
    pub fn newLoopback(_family: gio.SocketFamily) *InetAddress {
        const cFn = @extern(*const fn (gio.SocketFamily) callconv(.c) *InetAddress, .{ .name = "g_inet_address_new_loopback" });
        const ret = cFn(_family);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gio/method.InetAddress.equal.html)
    pub fn equal(self: *InetAddress, _other_address: *gio.InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress, *gio.InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_equal" });
        const ret = cFn(self, _other_address);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/gio/method.InetAddress.get_family.html)
    pub fn getFamily(self: *InetAddress) gio.SocketFamily {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) gio.SocketFamily, .{ .name = "g_inet_address_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_any](https://docs.gtk.org/gio/method.InetAddress.get_is_any.html)
    pub fn getIsAny(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_any" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_link_local](https://docs.gtk.org/gio/method.InetAddress.get_is_link_local.html)
    pub fn getIsLinkLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_link_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_loopback](https://docs.gtk.org/gio/method.InetAddress.get_is_loopback.html)
    pub fn getIsLoopback(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_loopback" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_mc_global](https://docs.gtk.org/gio/method.InetAddress.get_is_mc_global.html)
    pub fn getIsMcGlobal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_mc_global" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_mc_link_local](https://docs.gtk.org/gio/method.InetAddress.get_is_mc_link_local.html)
    pub fn getIsMcLinkLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_mc_link_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_mc_node_local](https://docs.gtk.org/gio/method.InetAddress.get_is_mc_node_local.html)
    pub fn getIsMcNodeLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_mc_node_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_mc_org_local](https://docs.gtk.org/gio/method.InetAddress.get_is_mc_org_local.html)
    pub fn getIsMcOrgLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_mc_org_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_mc_site_local](https://docs.gtk.org/gio/method.InetAddress.get_is_mc_site_local.html)
    pub fn getIsMcSiteLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_mc_site_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_multicast](https://docs.gtk.org/gio/method.InetAddress.get_is_multicast.html)
    pub fn getIsMulticast(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_multicast" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_site_local](https://docs.gtk.org/gio/method.InetAddress.get_is_site_local.html)
    pub fn getIsSiteLocal(self: *InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_get_is_site_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_native_size](https://docs.gtk.org/gio/method.InetAddress.get_native_size.html)
    pub fn getNativeSize(self: *InetAddress) u64 {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) u64, .{ .name = "g_inet_address_get_native_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.InetAddress.to_string.html)
    pub fn toString(self: *InetAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*InetAddress) callconv(.c) [*:0]u8, .{ .name = "g_inet_address_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [to_string](https://docs.gtk.org/gio/vfunc.InetAddress.to_string.html)
    pub fn toStringV(self: *InetAddress) [*:0]u8 {
        const class: *InetAddressClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.to_string.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_inet_address_get_type" });
        return cFn();
    }
};
pub const InetAddressClass = extern struct {
    parent_class: gobject.ObjectClass,
    to_string: ?*const fn (_address: *gio.InetAddress) callconv(.c) [*:0]u8,
    to_bytes: ?*const fn (_address: *gio.InetAddress) callconv(.c) *u8,
};
/// Class [InetAddressMask](https://docs.gtk.org/gio/class.InetAddressMask.html)
/// - property [address](https://docs.gtk.org/gio/property.InetAddressMask.address.html): (rw) `gio.InetAddress`
/// - property [family](https://docs.gtk.org/gio/property.InetAddressMask.family.html): (r-) `gio.SocketFamily`
/// - property [length](https://docs.gtk.org/gio/property.InetAddressMask.length.html): (rw) `u32`
pub const InetAddressMask = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.InetAddressMaskPrivate,
    pub const Interfaces = [_]type{gio.Initable};
    pub const Parent = gobject.Object;
    pub const Class = gio.InetAddressMaskClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.InetAddressMask.new.html)
    pub fn new(_addr: *gio.InetAddress, _length: u32, _error: *?*core.Error) error{GError}!*InetAddressMask {
        const cFn = @extern(*const fn (*gio.InetAddress, u32, *?*core.Error) callconv(.c) *InetAddressMask, .{ .name = "g_inet_address_mask_new" });
        const ret = cFn(_addr, _length, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_string](https://docs.gtk.org/gio/ctor.InetAddressMask.new_from_string.html)
    pub fn newFromString(_mask_string: [*:0]const u8, _error: *?*core.Error) error{GError}!*InetAddressMask {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *InetAddressMask, .{ .name = "g_inet_address_mask_new_from_string" });
        const ret = cFn(_mask_string, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gio/method.InetAddressMask.equal.html)
    pub fn equal(self: *InetAddressMask, _mask2: *gio.InetAddressMask) bool {
        const cFn = @extern(*const fn (*InetAddressMask, *gio.InetAddressMask) callconv(.c) bool, .{ .name = "g_inet_address_mask_equal" });
        const ret = cFn(self, _mask2);
        return ret;
    }
    /// method [get_address](https://docs.gtk.org/gio/method.InetAddressMask.get_address.html)
    pub fn getAddress(self: *InetAddressMask) *gio.InetAddress {
        const cFn = @extern(*const fn (*InetAddressMask) callconv(.c) *gio.InetAddress, .{ .name = "g_inet_address_mask_get_address" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/gio/method.InetAddressMask.get_family.html)
    pub fn getFamily(self: *InetAddressMask) gio.SocketFamily {
        const cFn = @extern(*const fn (*InetAddressMask) callconv(.c) gio.SocketFamily, .{ .name = "g_inet_address_mask_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/gio/method.InetAddressMask.get_length.html)
    pub fn getLength(self: *InetAddressMask) u32 {
        const cFn = @extern(*const fn (*InetAddressMask) callconv(.c) u32, .{ .name = "g_inet_address_mask_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/gio/method.InetAddressMask.matches.html)
    pub fn matches(self: *InetAddressMask, _address: *gio.InetAddress) bool {
        const cFn = @extern(*const fn (*InetAddressMask, *gio.InetAddress) callconv(.c) bool, .{ .name = "g_inet_address_mask_matches" });
        const ret = cFn(self, _address);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.InetAddressMask.to_string.html)
    pub fn toString(self: *InetAddressMask) [*:0]u8 {
        const cFn = @extern(*const fn (*InetAddressMask) callconv(.c) [*:0]u8, .{ .name = "g_inet_address_mask_to_string" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_inet_address_mask_get_type" });
        return cFn();
    }
};
pub const InetAddressMaskClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const InetAddressMaskPrivate = opaque {};
pub const InetAddressPrivate = opaque {};
/// Class [InetSocketAddress](https://docs.gtk.org/gio/class.InetSocketAddress.html)
/// - property [address](https://docs.gtk.org/gio/property.InetSocketAddress.address.html): (r-) `gio.InetAddress`
/// - property [flowinfo](https://docs.gtk.org/gio/property.InetSocketAddress.flowinfo.html): (r-) `u32`
/// - property [port](https://docs.gtk.org/gio/property.InetSocketAddress.port.html): (r-) `u32`
/// - property [scope-id](https://docs.gtk.org/gio/property.InetSocketAddress.scope-id.html): (r-) `u32`
pub const InetSocketAddress = extern struct {
    parent_instance: gio.SocketAddress,
    priv: ?*gio.InetSocketAddressPrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gio.SocketAddress;
    pub const Class = gio.InetSocketAddressClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.InetSocketAddress.new.html)
    pub fn new(_address: *gio.InetAddress, _port: u16) *InetSocketAddress {
        const cFn = @extern(*const fn (*gio.InetAddress, u16) callconv(.c) *InetSocketAddress, .{ .name = "g_inet_socket_address_new" });
        const ret = cFn(_address, _port);
        return ret;
    }
    /// ctor [new_from_string](https://docs.gtk.org/gio/ctor.InetSocketAddress.new_from_string.html)
    pub fn newFromString(_address: [*:0]const u8, _port: u32) ?*InetSocketAddress {
        const cFn = @extern(*const fn ([*:0]const u8, u32) callconv(.c) ?*InetSocketAddress, .{ .name = "g_inet_socket_address_new_from_string" });
        const ret = cFn(_address, _port);
        return ret;
    }
    /// method [get_address](https://docs.gtk.org/gio/method.InetSocketAddress.get_address.html)
    pub fn getAddress(self: *InetSocketAddress) *gio.InetAddress {
        const cFn = @extern(*const fn (*InetSocketAddress) callconv(.c) *gio.InetAddress, .{ .name = "g_inet_socket_address_get_address" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flowinfo](https://docs.gtk.org/gio/method.InetSocketAddress.get_flowinfo.html)
    pub fn getFlowinfo(self: *InetSocketAddress) u32 {
        const cFn = @extern(*const fn (*InetSocketAddress) callconv(.c) u32, .{ .name = "g_inet_socket_address_get_flowinfo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_port](https://docs.gtk.org/gio/method.InetSocketAddress.get_port.html)
    pub fn getPort(self: *InetSocketAddress) u16 {
        const cFn = @extern(*const fn (*InetSocketAddress) callconv(.c) u16, .{ .name = "g_inet_socket_address_get_port" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scope_id](https://docs.gtk.org/gio/method.InetSocketAddress.get_scope_id.html)
    pub fn getScopeId(self: *InetSocketAddress) u32 {
        const cFn = @extern(*const fn (*InetSocketAddress) callconv(.c) u32, .{ .name = "g_inet_socket_address_get_scope_id" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_inet_socket_address_get_type" });
        return cFn();
    }
};
pub const InetSocketAddressClass = extern struct {
    parent_class: gio.SocketAddressClass,
};
pub const InetSocketAddressPrivate = opaque {};
/// Iface [Initable](https://docs.gtk.org/gio/iface.Initable.html)
pub const Initable = opaque {
    /// Deprecated:
    /// type func [newv](https://docs.gtk.org/gio/type_func.Initable.newv.html)
    pub const newv = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newv(_object_type: core.Type, _parameterss: []gobject.Parameter, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gobject.Object {
            const _n_parameters: u32 = @intCast(_parameterss.len);
            const _parameters = _parameterss.ptr;
            const cFn = @extern(*const fn (core.Type, u32, [*]gobject.Parameter, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gobject.Object, .{ .name = "g_initable_newv" });
            const ret = cFn(_object_type, _n_parameters, _parameters, _cancellable, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.newv;
    /// method [init](https://docs.gtk.org/gio/method.Initable.init.html)
    pub fn init(self: *Initable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Initable, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_initable_init" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [init](https://docs.gtk.org/gio/vfunc.Initable.init.html)
    pub fn initV(self: *Initable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *InitableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.init.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_initable_get_type" });
        return cFn();
    }
};
/// Struct [InitableIface](https://docs.gtk.org/gio/struct.InitableIface.html)
pub const InitableIface = extern struct {
    g_iface: gobject.TypeInterface,
    init: ?*const fn (_initable: *gio.Initable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
};
/// Struct [InputMessage](https://docs.gtk.org/gio/struct.InputMessage.html)
pub const InputMessage = extern struct {
    address: ?*gio.SocketAddress,
    vectors: ?[*]gio.InputVector,
    num_vectors: u32,
    bytes_received: u64,
    flags: i32,
    control_messages: ?[*]*gio.SocketControlMessage,
    num_control_messages: ?*u32,
};
/// Class [InputStream](https://docs.gtk.org/gio/class.InputStream.html)
pub const InputStream = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.InputStreamPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.InputStreamClass;
    /// method [clear_pending](https://docs.gtk.org/gio/method.InputStream.clear_pending.html)
    pub fn clearPending(self: *InputStream) void {
        const cFn = @extern(*const fn (*InputStream) callconv(.c) void, .{ .name = "g_input_stream_clear_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.InputStream.close.html)
    pub fn close(self: *InputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*InputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_input_stream_close" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_async](https://docs.gtk.org/gio/method.InputStream.close_async.html)
    pub fn closeAsync(self: *InputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*InputStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_input_stream_close_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.InputStream.close_finish.html)
    pub fn closeFinish(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*InputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_input_stream_close_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_pending](https://docs.gtk.org/gio/method.InputStream.has_pending.html)
    pub fn hasPending(self: *InputStream) bool {
        const cFn = @extern(*const fn (*InputStream) callconv(.c) bool, .{ .name = "g_input_stream_has_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.InputStream.is_closed.html)
    pub fn isClosed(self: *InputStream) bool {
        const cFn = @extern(*const fn (*InputStream) callconv(.c) bool, .{ .name = "g_input_stream_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read](https://docs.gtk.org/gio/method.InputStream.read.html)
    pub fn read(self: *InputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*InputStream, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_input_stream_read" });
        const ret = cFn(self, _buffer, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_all](https://docs.gtk.org/gio/method.InputStream.read_all.html)
    pub fn readAll(self: *InputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_read: u64,
    } {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var bytes_read_out: u64 = undefined;
        const _bytes_read = &bytes_read_out;
        const cFn = @extern(*const fn (*InputStream, [*]u8, u64, *u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_input_stream_read_all" });
        const ret = cFn(self, _buffer, _count, _bytes_read, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_read = bytes_read_out };
    }
    /// method [read_all_async](https://docs.gtk.org/gio/method.InputStream.read_all_async.html)
    pub fn readAllAsync(self: *InputStream, _buffers: []u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*InputStream, [*]u8, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_input_stream_read_all_async" });
        const ret = cFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_all_finish](https://docs.gtk.org/gio/method.InputStream.read_all_finish.html)
    pub fn readAllFinish(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_read: u64,
    } {
        var bytes_read_out: u64 = undefined;
        const _bytes_read = &bytes_read_out;
        const cFn = @extern(*const fn (*InputStream, *gio.AsyncResult, *u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_input_stream_read_all_finish" });
        const ret = cFn(self, _result, _bytes_read, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_read = bytes_read_out };
    }
    /// method [read_async](https://docs.gtk.org/gio/method.InputStream.read_async.html)
    pub fn readAsync(self: *InputStream, _buffers: []u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*InputStream, [*]u8, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_input_stream_read_async" });
        const ret = cFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_bytes](https://docs.gtk.org/gio/method.InputStream.read_bytes.html)
    pub fn readBytes(self: *InputStream, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*glib.Bytes {
        const cFn = @extern(*const fn (*InputStream, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_input_stream_read_bytes" });
        const ret = cFn(self, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_bytes_async](https://docs.gtk.org/gio/method.InputStream.read_bytes_async.html)
    pub fn readBytesAsync(self: *InputStream, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*InputStream, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_input_stream_read_bytes_async" });
        const ret = cFn(self, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_bytes_finish](https://docs.gtk.org/gio/method.InputStream.read_bytes_finish.html)
    pub fn readBytesFinish(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*glib.Bytes {
        const cFn = @extern(*const fn (*InputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_input_stream_read_bytes_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_finish](https://docs.gtk.org/gio/method.InputStream.read_finish.html)
    pub fn readFinish(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*InputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_input_stream_read_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_pending](https://docs.gtk.org/gio/method.InputStream.set_pending.html)
    pub fn setPending(self: *InputStream, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*InputStream, *?*core.Error) callconv(.c) bool, .{ .name = "g_input_stream_set_pending" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [skip](https://docs.gtk.org/gio/method.InputStream.skip.html)
    pub fn skip(self: *InputStream, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*InputStream, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_input_stream_skip" });
        const ret = cFn(self, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [skip_async](https://docs.gtk.org/gio/method.InputStream.skip_async.html)
    pub fn skipAsync(self: *InputStream, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*InputStream, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_input_stream_skip_async" });
        const ret = cFn(self, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [skip_finish](https://docs.gtk.org/gio/method.InputStream.skip_finish.html)
    pub fn skipFinish(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*InputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_input_stream_skip_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [close_async](https://docs.gtk.org/gio/vfunc.InputStream.close_async.html)
    pub fn closeAsyncV(self: *InputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [close_finish](https://docs.gtk.org/gio/vfunc.InputStream.close_finish.html)
    pub fn closeFinishV(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [close_fn](https://docs.gtk.org/gio/vfunc.InputStream.close_fn.html)
    pub fn closeFnV(self: *InputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_fn.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [read_async](https://docs.gtk.org/gio/vfunc.InputStream.read_async.html)
    pub fn readAsyncV(self: *InputStream, _buffer: ?[*]u8, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_async.?;
        const ret = vFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [read_finish](https://docs.gtk.org/gio/vfunc.InputStream.read_finish.html)
    pub fn readFinishV(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) i64 {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [read_fn](https://docs.gtk.org/gio/vfunc.InputStream.read_fn.html)
    pub fn readFnV(self: *InputStream, _buffer: ?*anyopaque, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i64 {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_fn.?;
        const ret = vFn(self, @ptrCast(_buffer), _count, _cancellable, _error);
        return ret;
    }
    /// vfunc [skip](https://docs.gtk.org/gio/vfunc.InputStream.skip.html)
    pub fn skipV(self: *InputStream, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i64 {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.skip.?;
        const ret = vFn(self, _count, _cancellable, _error);
        return ret;
    }
    /// vfunc [skip_async](https://docs.gtk.org/gio/vfunc.InputStream.skip_async.html)
    pub fn skipAsyncV(self: *InputStream, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.skip_async.?;
        const ret = vFn(self, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [skip_finish](https://docs.gtk.org/gio/vfunc.InputStream.skip_finish.html)
    pub fn skipFinishV(self: *InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) i64 {
        const class: *InputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.skip_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_input_stream_get_type" });
        return cFn();
    }
};
pub const InputStreamClass = extern struct {
    parent_class: gobject.ObjectClass,
    read_fn: ?*const fn (_stream: *gio.InputStream, _buffer: ?*anyopaque, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i64,
    skip: ?*const fn (_stream: *gio.InputStream, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i64,
    close_fn: ?*const fn (_stream: *gio.InputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    read_async: ?*const fn (_stream: *gio.InputStream, _buffer: ?[*]u8, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    read_finish: ?*const fn (_stream: *gio.InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) i64,
    skip_async: ?*const fn (_stream: *gio.InputStream, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    skip_finish: ?*const fn (_stream: *gio.InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) i64,
    close_async: ?*const fn (_stream: *gio.InputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    close_finish: ?*const fn (_stream: *gio.InputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const InputStreamPrivate = opaque {};
/// Struct [InputVector](https://docs.gtk.org/gio/struct.InputVector.html)
pub const InputVector = extern struct {
    buffer: ?*anyopaque,
    size: u64,
};
/// Iface [ListModel](https://docs.gtk.org/gio/iface.ListModel.html)
pub const ListModel = opaque {
    /// method [get_item_type](https://docs.gtk.org/gio/method.ListModel.get_item_type.html)
    pub fn getItemType(self: *ListModel) core.Type {
        const cFn = @extern(*const fn (*ListModel) callconv(.c) core.Type, .{ .name = "g_list_model_get_item_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_items](https://docs.gtk.org/gio/method.ListModel.get_n_items.html)
    pub fn getNItems(self: *ListModel) u32 {
        const cFn = @extern(*const fn (*ListModel) callconv(.c) u32, .{ .name = "g_list_model_get_n_items" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gio/method.ListModel.get_item.html)
    pub fn getItem(self: *ListModel, _position: u32) ?*gobject.Object {
        const cFn = @extern(*const fn (*ListModel, u32) callconv(.c) ?*gobject.Object, .{ .name = "g_list_model_get_object" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [items_changed](https://docs.gtk.org/gio/method.ListModel.items_changed.html)
    pub fn itemsChanged(self: *ListModel, _position: u32, _removed: u32, _added: u32) void {
        const cFn = @extern(*const fn (*ListModel, u32, u32, u32) callconv(.c) void, .{ .name = "g_list_model_items_changed" });
        const ret = cFn(self, _position, _removed, _added);
        return ret;
    }
    /// vfunc [get_item](https://docs.gtk.org/gio/vfunc.ListModel.get_item.html)
    pub fn getItemV(self: *ListModel, _position: u32) ?*gobject.Object {
        const class: *ListModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item.?;
        const ret = vFn(self, _position);
        return ret;
    }
    /// vfunc [get_item_type](https://docs.gtk.org/gio/vfunc.ListModel.get_item_type.html)
    pub fn getItemTypeV(self: *ListModel) core.Type {
        const class: *ListModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item_type.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_n_items](https://docs.gtk.org/gio/vfunc.ListModel.get_n_items.html)
    pub fn getNItemsV(self: *ListModel) u32 {
        const class: *ListModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_n_items.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [items-changed](https://docs.gtk.org/gio/signal.ListModel.items-changed.html)
    pub fn connectItemsChanged(self: *ListModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("items-changed", handler, args, flags, &.{ void, *ListModel, u32, u32, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_list_model_get_type" });
        return cFn();
    }
};
pub const ListModelInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_item_type: ?*const fn (_list: *gio.ListModel) callconv(.c) core.Type,
    get_n_items: ?*const fn (_list: *gio.ListModel) callconv(.c) u32,
    get_item: ?*const fn (_list: *gio.ListModel, _position: u32) callconv(.c) ?*gobject.Object,
};
/// Class [ListStore](https://docs.gtk.org/gio/class.ListStore.html)
/// - property [item-type](https://docs.gtk.org/gio/property.ListStore.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/gio/property.ListStore.n-items.html): (r-) `u32`
pub const ListStore = opaque {
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = gio.ListStoreClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ListStore.new.html)
    pub fn new(_item_type: core.Type) *ListStore {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *ListStore, .{ .name = "g_list_store_new" });
        const ret = cFn(_item_type);
        return ret;
    }
    /// method [append](https://docs.gtk.org/gio/method.ListStore.append.html)
    pub fn append(self: *ListStore, _item: *gobject.Object) void {
        const cFn = @extern(*const fn (*ListStore, *gobject.Object) callconv(.c) void, .{ .name = "g_list_store_append" });
        const ret = cFn(self, _item);
        return ret;
    }
    /// method [find](https://docs.gtk.org/gio/method.ListStore.find.html)
    pub fn find(self: *ListStore, _item: *gobject.Object) struct {
        ret: bool,
        position: u32,
    } {
        var position_out: u32 = undefined;
        const _position = &position_out;
        const cFn = @extern(*const fn (*ListStore, *gobject.Object, ?*u32) callconv(.c) bool, .{ .name = "g_list_store_find" });
        const ret = cFn(self, _item, _position);
        return .{ .ret = ret, .position = position_out };
    }
    /// method [find_with_equal_func](https://docs.gtk.org/gio/method.ListStore.find_with_equal_func.html)
    pub fn findWithEqualFunc(self: *ListStore, _item: ?*gobject.Object, _equal_func: glib.EqualFunc) struct {
        ret: bool,
        position: u32,
    } {
        var position_out: u32 = undefined;
        const _position = &position_out;
        const cFn = @extern(*const fn (*ListStore, ?*gobject.Object, glib.EqualFunc, ?*u32) callconv(.c) bool, .{ .name = "g_list_store_find_with_equal_func" });
        const ret = cFn(self, _item, _equal_func, _position);
        return .{ .ret = ret, .position = position_out };
    }
    /// method [find_with_equal_func_full](https://docs.gtk.org/gio/method.ListStore.find_with_equal_func_full.html)
    pub fn findWithEqualFuncFull(self: *ListStore, _item: ?*gobject.Object, equal_func: anytype, equal_func_args: anytype) struct {
        ret: bool,
        position: u32,
    } {
        var closure_equal_func = core.zig_closure(equal_func, equal_func_args, &.{ bool, ?*anyopaque, ?*anyopaque });
        defer closure_equal_func.deinit();
        const _equal_func: glib.EqualFuncFull = @ptrCast(closure_equal_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_equal_func.c_data());
        var position_out: u32 = undefined;
        const _position = &position_out;
        const cFn = @extern(*const fn (*ListStore, ?*gobject.Object, glib.EqualFuncFull, ?*anyopaque, ?*u32) callconv(.c) bool, .{ .name = "g_list_store_find_with_equal_func_full" });
        const ret = cFn(self, _item, _equal_func, @ptrCast(_user_data), _position);
        return .{ .ret = ret, .position = position_out };
    }
    /// method [insert](https://docs.gtk.org/gio/method.ListStore.insert.html)
    pub fn insert(self: *ListStore, _position: u32, _item: *gobject.Object) void {
        const cFn = @extern(*const fn (*ListStore, u32, *gobject.Object) callconv(.c) void, .{ .name = "g_list_store_insert" });
        const ret = cFn(self, _position, _item);
        return ret;
    }
    /// method [insert_sorted](https://docs.gtk.org/gio/method.ListStore.insert_sorted.html)
    pub fn insertSorted(self: *ListStore, _item: *gobject.Object, compare_func: anytype, compare_func_args: anytype) u32 {
        var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_compare_func.deinit();
        const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
        const cFn = @extern(*const fn (*ListStore, *gobject.Object, glib.CompareDataFunc, ?*anyopaque) callconv(.c) u32, .{ .name = "g_list_store_insert_sorted" });
        const ret = cFn(self, _item, _compare_func, @ptrCast(_user_data));
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gio/method.ListStore.remove.html)
    pub fn remove(self: *ListStore, _position: u32) void {
        const cFn = @extern(*const fn (*ListStore, u32) callconv(.c) void, .{ .name = "g_list_store_remove" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/gio/method.ListStore.remove_all.html)
    pub fn removeAll(self: *ListStore) void {
        const cFn = @extern(*const fn (*ListStore) callconv(.c) void, .{ .name = "g_list_store_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [sort](https://docs.gtk.org/gio/method.ListStore.sort.html)
    pub fn sort(self: *ListStore, compare_func: anytype, compare_func_args: anytype) void {
        var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        defer closure_compare_func.deinit();
        const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
        const cFn = @extern(*const fn (*ListStore, glib.CompareDataFunc, ?*anyopaque) callconv(.c) void, .{ .name = "g_list_store_sort" });
        const ret = cFn(self, _compare_func, @ptrCast(_user_data));
        return ret;
    }
    /// method [splice](https://docs.gtk.org/gio/method.ListStore.splice.html)
    pub fn splice(self: *ListStore, _position: u32, _n_removals: u32, _additionss: []*gobject.Object) void {
        const _additions = _additionss.ptr;
        const _n_additions: u32 = @intCast(_additionss.len);
        const cFn = @extern(*const fn (*ListStore, u32, u32, [*]*gobject.Object, u32) callconv(.c) void, .{ .name = "g_list_store_splice" });
        const ret = cFn(self, _position, _n_removals, _additions, _n_additions);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_list_store_get_type" });
        return cFn();
    }
};
pub const ListStoreClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Iface [LoadableIcon](https://docs.gtk.org/gio/iface.LoadableIcon.html)
pub const LoadableIcon = opaque {
    pub const Prerequisites = [_]type{gio.Icon};
    /// method [load](https://docs.gtk.org/gio/method.LoadableIcon.load.html)
    pub fn load(self: *LoadableIcon, _size: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.InputStream,
        type: [*:0]u8,
    } {
        var type_out: [*:0]u8 = undefined;
        const _type = &type_out;
        const cFn = @extern(*const fn (*LoadableIcon, i32, ?*[*:0]u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.InputStream, .{ .name = "g_loadable_icon_load" });
        const ret = cFn(self, _size, _type, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .type = type_out };
    }
    /// method [load_async](https://docs.gtk.org/gio/method.LoadableIcon.load_async.html)
    pub fn loadAsync(self: *LoadableIcon, _size: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*LoadableIcon, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_loadable_icon_load_async" });
        const ret = cFn(self, _size, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [load_finish](https://docs.gtk.org/gio/method.LoadableIcon.load_finish.html)
    pub fn loadFinish(self: *LoadableIcon, _res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.InputStream,
        type: [*:0]u8,
    } {
        var type_out: [*:0]u8 = undefined;
        const _type = &type_out;
        const cFn = @extern(*const fn (*LoadableIcon, *gio.AsyncResult, ?*[*:0]u8, *?*core.Error) callconv(.c) *gio.InputStream, .{ .name = "g_loadable_icon_load_finish" });
        const ret = cFn(self, _res, _type, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .type = type_out };
    }
    /// vfunc [load](https://docs.gtk.org/gio/vfunc.LoadableIcon.load.html)
    pub fn loadV(self: *LoadableIcon, _size: i32, _type: ?*[*:0]u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.InputStream {
        const class: *LoadableIconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load.?;
        const ret = vFn(self, _size, _type, _cancellable, _error);
        return ret;
    }
    /// vfunc [load_async](https://docs.gtk.org/gio/vfunc.LoadableIcon.load_async.html)
    pub fn loadAsyncV(self: *LoadableIcon, _size: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *LoadableIconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load_async.?;
        const ret = vFn(self, _size, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [load_finish](https://docs.gtk.org/gio/vfunc.LoadableIcon.load_finish.html)
    pub fn loadFinishV(self: *LoadableIcon, _res: *gio.AsyncResult, _type: ?*[*:0]u8, _error: *?*core.Error) *gio.InputStream {
        const class: *LoadableIconIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load_finish.?;
        const ret = vFn(self, _res, _type, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_loadable_icon_get_type" });
        return cFn();
    }
};
/// Struct [LoadableIconIface](https://docs.gtk.org/gio/struct.LoadableIconIface.html)
pub const LoadableIconIface = extern struct {
    g_iface: gobject.TypeInterface,
    load: ?*const fn (_icon: *gio.LoadableIcon, _size: i32, _type: ?*[*:0]u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.InputStream,
    load_async: ?*const fn (_icon: *gio.LoadableIcon, _size: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    load_finish: ?*const fn (_icon: *gio.LoadableIcon, _res: *gio.AsyncResult, _type: ?*[*:0]u8, _error: *?*core.Error) callconv(.c) *gio.InputStream,
};
/// const [MEMORY_MONITOR_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.MEMORY_MONITOR_EXTENSION_POINT_NAME.html)
pub const MEMORY_MONITOR_EXTENSION_POINT_NAME = "gio-memory-monitor";
/// const [MENU_ATTRIBUTE_ACTION](https://docs.gtk.org/gio/const.MENU_ATTRIBUTE_ACTION.html)
pub const MENU_ATTRIBUTE_ACTION = "action";
/// const [MENU_ATTRIBUTE_ACTION_NAMESPACE](https://docs.gtk.org/gio/const.MENU_ATTRIBUTE_ACTION_NAMESPACE.html)
pub const MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace";
/// const [MENU_ATTRIBUTE_ICON](https://docs.gtk.org/gio/const.MENU_ATTRIBUTE_ICON.html)
pub const MENU_ATTRIBUTE_ICON = "icon";
/// const [MENU_ATTRIBUTE_LABEL](https://docs.gtk.org/gio/const.MENU_ATTRIBUTE_LABEL.html)
pub const MENU_ATTRIBUTE_LABEL = "label";
/// const [MENU_ATTRIBUTE_TARGET](https://docs.gtk.org/gio/const.MENU_ATTRIBUTE_TARGET.html)
pub const MENU_ATTRIBUTE_TARGET = "target";
/// const [MENU_EXPORTER_MAX_SECTION_SIZE](https://docs.gtk.org/gio/const.MENU_EXPORTER_MAX_SECTION_SIZE.html)
pub const MENU_EXPORTER_MAX_SECTION_SIZE = 1000;
/// const [MENU_LINK_SECTION](https://docs.gtk.org/gio/const.MENU_LINK_SECTION.html)
pub const MENU_LINK_SECTION = "section";
/// const [MENU_LINK_SUBMENU](https://docs.gtk.org/gio/const.MENU_LINK_SUBMENU.html)
pub const MENU_LINK_SUBMENU = "submenu";
/// Class [MemoryInputStream](https://docs.gtk.org/gio/class.MemoryInputStream.html)
pub const MemoryInputStream = extern struct {
    parent_instance: gio.InputStream,
    priv: ?*gio.MemoryInputStreamPrivate,
    pub const Interfaces = [_]type{ gio.PollableInputStream, gio.Seekable };
    pub const Parent = gio.InputStream;
    pub const Class = gio.MemoryInputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.MemoryInputStream.new.html)
    pub fn new() *MemoryInputStream {
        const cFn = @extern(*const fn () callconv(.c) *MemoryInputStream, .{ .name = "g_memory_input_stream_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_bytes](https://docs.gtk.org/gio/ctor.MemoryInputStream.new_from_bytes.html)
    pub fn newFromBytes(_bytes: *glib.Bytes) *MemoryInputStream {
        const cFn = @extern(*const fn (*glib.Bytes) callconv(.c) *MemoryInputStream, .{ .name = "g_memory_input_stream_new_from_bytes" });
        const ret = cFn(_bytes);
        return ret;
    }
    /// ctor [new_from_data](https://docs.gtk.org/gio/ctor.MemoryInputStream.new_from_data.html)
    pub fn newFromData(_datas: []u8, _destroy: ?glib.DestroyNotify) *MemoryInputStream {
        const _data = _datas.ptr;
        const _len: i64 = @intCast(_datas.len);
        const cFn = @extern(*const fn ([*]u8, i64, ?glib.DestroyNotify) callconv(.c) *MemoryInputStream, .{ .name = "g_memory_input_stream_new_from_data" });
        const ret = cFn(_data, _len, _destroy);
        return ret;
    }
    /// method [add_bytes](https://docs.gtk.org/gio/method.MemoryInputStream.add_bytes.html)
    pub fn addBytes(self: *MemoryInputStream, _bytes: *glib.Bytes) void {
        const cFn = @extern(*const fn (*MemoryInputStream, *glib.Bytes) callconv(.c) void, .{ .name = "g_memory_input_stream_add_bytes" });
        const ret = cFn(self, _bytes);
        return ret;
    }
    /// method [add_data](https://docs.gtk.org/gio/method.MemoryInputStream.add_data.html)
    pub fn addData(self: *MemoryInputStream, _datas: []u8, _destroy: ?glib.DestroyNotify) void {
        const _data = _datas.ptr;
        const _len: i64 = @intCast(_datas.len);
        const cFn = @extern(*const fn (*MemoryInputStream, [*]u8, i64, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_memory_input_stream_add_data" });
        const ret = cFn(self, _data, _len, _destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_memory_input_stream_get_type" });
        return cFn();
    }
};
pub const MemoryInputStreamClass = extern struct {
    parent_class: gio.InputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const MemoryInputStreamPrivate = opaque {};
/// Iface [MemoryMonitor](https://docs.gtk.org/gio/iface.MemoryMonitor.html)
pub const MemoryMonitor = opaque {
    pub const Prerequisites = [_]type{gio.Initable};
    /// type func [dup_default](https://docs.gtk.org/gio/type_func.MemoryMonitor.dup_default.html)
    pub fn dupDefault() *gio.MemoryMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.MemoryMonitor, .{ .name = "g_memory_monitor_dup_default" });
        const ret = cFn();
        return ret;
    }
    /// vfunc [low_memory_warning](https://docs.gtk.org/gio/vfunc.MemoryMonitor.low_memory_warning.html)
    pub fn lowMemoryWarningV(self: *MemoryMonitor, _level: gio.MemoryMonitorWarningLevel) void {
        const class: *MemoryMonitorInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.low_memory_warning.?;
        const ret = vFn(self, _level);
        return ret;
    }
    /// signal [low-memory-warning](https://docs.gtk.org/gio/signal.MemoryMonitor.low-memory-warning.html)
    pub fn connectLowMemoryWarning(self: *MemoryMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("low-memory-warning", handler, args, flags, &.{ void, *MemoryMonitor, gio.MemoryMonitorWarningLevel });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_memory_monitor_get_type" });
        return cFn();
    }
};
pub const MemoryMonitorInterface = extern struct {
    g_iface: gobject.TypeInterface,
    low_memory_warning: ?*const fn (_monitor: *gio.MemoryMonitor, _level: gio.MemoryMonitorWarningLevel) callconv(.c) void,
};
/// Enum [MemoryMonitorWarningLevel](https://docs.gtk.org/gio/enum.MemoryMonitorWarningLevel.html)
pub const MemoryMonitorWarningLevel = enum(u32) {
    low = 50,
    medium = 100,
    critical = 255,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_memory_monitor_warning_level_get_type" });
        return cFn();
    }
};
/// Class [MemoryOutputStream](https://docs.gtk.org/gio/class.MemoryOutputStream.html)
/// - property [data](https://docs.gtk.org/gio/property.MemoryOutputStream.data.html): (r-) `*anyopaque`
/// - property [data-size](https://docs.gtk.org/gio/property.MemoryOutputStream.data-size.html): (r-) `u64`
/// - property [size](https://docs.gtk.org/gio/property.MemoryOutputStream.size.html): (r-) `u64`
pub const MemoryOutputStream = extern struct {
    parent_instance: gio.OutputStream,
    priv: ?*gio.MemoryOutputStreamPrivate,
    pub const Interfaces = [_]type{ gio.PollableOutputStream, gio.Seekable };
    pub const Parent = gio.OutputStream;
    pub const Class = gio.MemoryOutputStreamClass;
    /// ctor [new_resizable](https://docs.gtk.org/gio/ctor.MemoryOutputStream.new_resizable.html)
    pub fn newResizable() *MemoryOutputStream {
        const cFn = @extern(*const fn () callconv(.c) *MemoryOutputStream, .{ .name = "g_memory_output_stream_new_resizable" });
        const ret = cFn();
        return ret;
    }
    /// method [get_data](https://docs.gtk.org/gio/method.MemoryOutputStream.get_data.html)
    pub fn getData(self: *MemoryOutputStream) ?*anyopaque {
        const cFn = @extern(*const fn (*MemoryOutputStream) callconv(.c) ?*anyopaque, .{ .name = "g_memory_output_stream_get_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_data_size](https://docs.gtk.org/gio/method.MemoryOutputStream.get_data_size.html)
    pub fn getDataSize(self: *MemoryOutputStream) u64 {
        const cFn = @extern(*const fn (*MemoryOutputStream) callconv(.c) u64, .{ .name = "g_memory_output_stream_get_data_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gio/method.MemoryOutputStream.get_size.html)
    pub fn getSize(self: *MemoryOutputStream) u64 {
        const cFn = @extern(*const fn (*MemoryOutputStream) callconv(.c) u64, .{ .name = "g_memory_output_stream_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [steal_as_bytes](https://docs.gtk.org/gio/method.MemoryOutputStream.steal_as_bytes.html)
    pub fn stealAsBytes(self: *MemoryOutputStream) *glib.Bytes {
        const cFn = @extern(*const fn (*MemoryOutputStream) callconv(.c) *glib.Bytes, .{ .name = "g_memory_output_stream_steal_as_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [steal_data](https://docs.gtk.org/gio/method.MemoryOutputStream.steal_data.html)
    pub fn stealData(self: *MemoryOutputStream) ?*anyopaque {
        const cFn = @extern(*const fn (*MemoryOutputStream) callconv(.c) ?*anyopaque, .{ .name = "g_memory_output_stream_steal_data" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_memory_output_stream_get_type" });
        return cFn();
    }
};
pub const MemoryOutputStreamClass = extern struct {
    parent_class: gio.OutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const MemoryOutputStreamPrivate = opaque {};
/// Class [Menu](https://docs.gtk.org/gio/class.Menu.html)
pub const Menu = opaque {
    pub const Parent = gio.MenuModel;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Menu.new.html)
    pub fn new() *Menu {
        const cFn = @extern(*const fn () callconv(.c) *Menu, .{ .name = "g_menu_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append](https://docs.gtk.org/gio/method.Menu.append.html)
    pub fn append(self: *Menu, _label: ?[*:0]const u8, _detailed_action: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_menu_append" });
        const ret = cFn(self, _label, _detailed_action);
        return ret;
    }
    /// method [append_item](https://docs.gtk.org/gio/method.Menu.append_item.html)
    pub fn appendItem(self: *Menu, _item: *gio.MenuItem) void {
        const cFn = @extern(*const fn (*Menu, *gio.MenuItem) callconv(.c) void, .{ .name = "g_menu_append_item" });
        const ret = cFn(self, _item);
        return ret;
    }
    /// method [append_section](https://docs.gtk.org/gio/method.Menu.append_section.html)
    pub fn appendSection(self: *Menu, _label: ?[*:0]const u8, _section: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_append_section" });
        const ret = cFn(self, _label, _section);
        return ret;
    }
    /// method [append_submenu](https://docs.gtk.org/gio/method.Menu.append_submenu.html)
    pub fn appendSubmenu(self: *Menu, _label: ?[*:0]const u8, _submenu: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_append_submenu" });
        const ret = cFn(self, _label, _submenu);
        return ret;
    }
    /// method [freeze](https://docs.gtk.org/gio/method.Menu.freeze.html)
    pub fn freeze(self: *Menu) void {
        const cFn = @extern(*const fn (*Menu) callconv(.c) void, .{ .name = "g_menu_freeze" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/gio/method.Menu.insert.html)
    pub fn insert(self: *Menu, _position: i32, _label: ?[*:0]const u8, _detailed_action: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Menu, i32, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_menu_insert" });
        const ret = cFn(self, _position, _label, _detailed_action);
        return ret;
    }
    /// method [insert_item](https://docs.gtk.org/gio/method.Menu.insert_item.html)
    pub fn insertItem(self: *Menu, _position: i32, _item: *gio.MenuItem) void {
        const cFn = @extern(*const fn (*Menu, i32, *gio.MenuItem) callconv(.c) void, .{ .name = "g_menu_insert_item" });
        const ret = cFn(self, _position, _item);
        return ret;
    }
    /// method [insert_section](https://docs.gtk.org/gio/method.Menu.insert_section.html)
    pub fn insertSection(self: *Menu, _position: i32, _label: ?[*:0]const u8, _section: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, i32, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_insert_section" });
        const ret = cFn(self, _position, _label, _section);
        return ret;
    }
    /// method [insert_submenu](https://docs.gtk.org/gio/method.Menu.insert_submenu.html)
    pub fn insertSubmenu(self: *Menu, _position: i32, _label: ?[*:0]const u8, _submenu: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, i32, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_insert_submenu" });
        const ret = cFn(self, _position, _label, _submenu);
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/gio/method.Menu.prepend.html)
    pub fn prepend(self: *Menu, _label: ?[*:0]const u8, _detailed_action: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_menu_prepend" });
        const ret = cFn(self, _label, _detailed_action);
        return ret;
    }
    /// method [prepend_item](https://docs.gtk.org/gio/method.Menu.prepend_item.html)
    pub fn prependItem(self: *Menu, _item: *gio.MenuItem) void {
        const cFn = @extern(*const fn (*Menu, *gio.MenuItem) callconv(.c) void, .{ .name = "g_menu_prepend_item" });
        const ret = cFn(self, _item);
        return ret;
    }
    /// method [prepend_section](https://docs.gtk.org/gio/method.Menu.prepend_section.html)
    pub fn prependSection(self: *Menu, _label: ?[*:0]const u8, _section: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_prepend_section" });
        const ret = cFn(self, _label, _section);
        return ret;
    }
    /// method [prepend_submenu](https://docs.gtk.org/gio/method.Menu.prepend_submenu.html)
    pub fn prependSubmenu(self: *Menu, _label: ?[*:0]const u8, _submenu: *gio.MenuModel) void {
        const cFn = @extern(*const fn (*Menu, ?[*:0]const u8, *gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_prepend_submenu" });
        const ret = cFn(self, _label, _submenu);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gio/method.Menu.remove.html)
    pub fn remove(self: *Menu, _position: i32) void {
        const cFn = @extern(*const fn (*Menu, i32) callconv(.c) void, .{ .name = "g_menu_remove" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/gio/method.Menu.remove_all.html)
    pub fn removeAll(self: *Menu) void {
        const cFn = @extern(*const fn (*Menu) callconv(.c) void, .{ .name = "g_menu_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_menu_get_type" });
        return cFn();
    }
};
/// Class [MenuAttributeIter](https://docs.gtk.org/gio/class.MenuAttributeIter.html)
pub const MenuAttributeIter = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.MenuAttributeIterPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.MenuAttributeIterClass;
    /// method [get_name](https://docs.gtk.org/gio/method.MenuAttributeIter.get_name.html)
    pub fn getName(self: *MenuAttributeIter) [*:0]u8 {
        const cFn = @extern(*const fn (*MenuAttributeIter) callconv(.c) [*:0]u8, .{ .name = "g_menu_attribute_iter_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_next](https://docs.gtk.org/gio/method.MenuAttributeIter.get_next.html)
    pub fn getNext(self: *MenuAttributeIter) ?struct {
        out_name: [*:0]u8,
        value: *glib.Variant,
    } {
        var out_name_out: [*:0]u8 = undefined;
        const _out_name = &out_name_out;
        var value_out: *glib.Variant = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*MenuAttributeIter, ?*[*:0]u8, ?**glib.Variant) callconv(.c) bool, .{ .name = "g_menu_attribute_iter_get_next" });
        const ret = cFn(self, _out_name, _value);
        if (!ret) return null;
        return .{ .out_name = out_name_out, .value = value_out };
    }
    /// method [get_value](https://docs.gtk.org/gio/method.MenuAttributeIter.get_value.html)
    pub fn getValue(self: *MenuAttributeIter) *glib.Variant {
        const cFn = @extern(*const fn (*MenuAttributeIter) callconv(.c) *glib.Variant, .{ .name = "g_menu_attribute_iter_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/gio/method.MenuAttributeIter.next.html)
    pub fn next(self: *MenuAttributeIter) bool {
        const cFn = @extern(*const fn (*MenuAttributeIter) callconv(.c) bool, .{ .name = "g_menu_attribute_iter_next" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_next](https://docs.gtk.org/gio/vfunc.MenuAttributeIter.get_next.html)
    pub fn getNextV(self: *MenuAttributeIter, _out_name: ?*[*:0]u8, _value: ?**glib.Variant) bool {
        const class: *MenuAttributeIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_next.?;
        const ret = vFn(self, _out_name, _value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_menu_attribute_iter_get_type" });
        return cFn();
    }
};
pub const MenuAttributeIterClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_next: ?*const fn (_iter: *gio.MenuAttributeIter, _out_name: ?*[*:0]u8, _value: ?**glib.Variant) callconv(.c) bool,
};
pub const MenuAttributeIterPrivate = opaque {};
/// Class [MenuItem](https://docs.gtk.org/gio/class.MenuItem.html)
pub const MenuItem = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.MenuItem.new.html)
    pub fn new(_label: ?[*:0]const u8, _detailed_action: ?[*:0]const u8) *MenuItem {
        const cFn = @extern(*const fn (?[*:0]const u8, ?[*:0]const u8) callconv(.c) *MenuItem, .{ .name = "g_menu_item_new" });
        const ret = cFn(_label, _detailed_action);
        return ret;
    }
    /// ctor [new_from_model](https://docs.gtk.org/gio/ctor.MenuItem.new_from_model.html)
    pub fn newFromModel(_model: *gio.MenuModel, _item_index: i32) *MenuItem {
        const cFn = @extern(*const fn (*gio.MenuModel, i32) callconv(.c) *MenuItem, .{ .name = "g_menu_item_new_from_model" });
        const ret = cFn(_model, _item_index);
        return ret;
    }
    /// ctor [new_section](https://docs.gtk.org/gio/ctor.MenuItem.new_section.html)
    pub fn newSection(_label: ?[*:0]const u8, _section: *gio.MenuModel) *MenuItem {
        const cFn = @extern(*const fn (?[*:0]const u8, *gio.MenuModel) callconv(.c) *MenuItem, .{ .name = "g_menu_item_new_section" });
        const ret = cFn(_label, _section);
        return ret;
    }
    /// ctor [new_submenu](https://docs.gtk.org/gio/ctor.MenuItem.new_submenu.html)
    pub fn newSubmenu(_label: ?[*:0]const u8, _submenu: *gio.MenuModel) *MenuItem {
        const cFn = @extern(*const fn (?[*:0]const u8, *gio.MenuModel) callconv(.c) *MenuItem, .{ .name = "g_menu_item_new_submenu" });
        const ret = cFn(_label, _submenu);
        return ret;
    }
    /// method [get_attribute_value](https://docs.gtk.org/gio/method.MenuItem.get_attribute_value.html)
    pub fn getAttributeValue(self: *MenuItem, _attribute: [*:0]const u8, _expected_type: ?*glib.VariantType) ?*glib.Variant {
        const cFn = @extern(*const fn (*MenuItem, [*:0]const u8, ?*glib.VariantType) callconv(.c) ?*glib.Variant, .{ .name = "g_menu_item_get_attribute_value" });
        const ret = cFn(self, _attribute, _expected_type);
        return ret;
    }
    /// method [get_link](https://docs.gtk.org/gio/method.MenuItem.get_link.html)
    pub fn getLink(self: *MenuItem, _link: [*:0]const u8) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*MenuItem, [*:0]const u8) callconv(.c) ?*gio.MenuModel, .{ .name = "g_menu_item_get_link" });
        const ret = cFn(self, _link);
        return ret;
    }
    /// method [set_action_and_target_value](https://docs.gtk.org/gio/method.MenuItem.set_action_and_target_value.html)
    pub fn setActionAndTargetValue(self: *MenuItem, _action: ?[*:0]const u8, _target_value: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*MenuItem, ?[*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_menu_item_set_action_and_target_value" });
        const ret = cFn(self, _action, _target_value);
        return ret;
    }
    /// method [set_attribute_value](https://docs.gtk.org/gio/method.MenuItem.set_attribute_value.html)
    pub fn setAttributeValue(self: *MenuItem, _attribute: [*:0]const u8, _value: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*MenuItem, [*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_menu_item_set_attribute_value" });
        const ret = cFn(self, _attribute, _value);
        return ret;
    }
    /// method [set_detailed_action](https://docs.gtk.org/gio/method.MenuItem.set_detailed_action.html)
    pub fn setDetailedAction(self: *MenuItem, _detailed_action: [*:0]const u8) void {
        const cFn = @extern(*const fn (*MenuItem, [*:0]const u8) callconv(.c) void, .{ .name = "g_menu_item_set_detailed_action" });
        const ret = cFn(self, _detailed_action);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gio/method.MenuItem.set_icon.html)
    pub fn setIcon(self: *MenuItem, _icon: *gio.Icon) void {
        const cFn = @extern(*const fn (*MenuItem, *gio.Icon) callconv(.c) void, .{ .name = "g_menu_item_set_icon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gio/method.MenuItem.set_label.html)
    pub fn setLabel(self: *MenuItem, _label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MenuItem, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_menu_item_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_link](https://docs.gtk.org/gio/method.MenuItem.set_link.html)
    pub fn setLink(self: *MenuItem, _link: [*:0]const u8, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*MenuItem, [*:0]const u8, ?*gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_item_set_link" });
        const ret = cFn(self, _link, _model);
        return ret;
    }
    /// method [set_section](https://docs.gtk.org/gio/method.MenuItem.set_section.html)
    pub fn setSection(self: *MenuItem, _section: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*MenuItem, ?*gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_item_set_section" });
        const ret = cFn(self, _section);
        return ret;
    }
    /// method [set_submenu](https://docs.gtk.org/gio/method.MenuItem.set_submenu.html)
    pub fn setSubmenu(self: *MenuItem, _submenu: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*MenuItem, ?*gio.MenuModel) callconv(.c) void, .{ .name = "g_menu_item_set_submenu" });
        const ret = cFn(self, _submenu);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_menu_item_get_type" });
        return cFn();
    }
};
/// Class [MenuLinkIter](https://docs.gtk.org/gio/class.MenuLinkIter.html)
pub const MenuLinkIter = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.MenuLinkIterPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.MenuLinkIterClass;
    /// method [get_name](https://docs.gtk.org/gio/method.MenuLinkIter.get_name.html)
    pub fn getName(self: *MenuLinkIter) [*:0]u8 {
        const cFn = @extern(*const fn (*MenuLinkIter) callconv(.c) [*:0]u8, .{ .name = "g_menu_link_iter_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_next](https://docs.gtk.org/gio/method.MenuLinkIter.get_next.html)
    pub fn getNext(self: *MenuLinkIter) ?struct {
        out_link: [*:0]u8,
        value: *gio.MenuModel,
    } {
        var out_link_out: [*:0]u8 = undefined;
        const _out_link = &out_link_out;
        var value_out: *gio.MenuModel = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*MenuLinkIter, ?*[*:0]u8, ?**gio.MenuModel) callconv(.c) bool, .{ .name = "g_menu_link_iter_get_next" });
        const ret = cFn(self, _out_link, _value);
        if (!ret) return null;
        return .{ .out_link = out_link_out, .value = value_out };
    }
    /// method [get_value](https://docs.gtk.org/gio/method.MenuLinkIter.get_value.html)
    pub fn getValue(self: *MenuLinkIter) *gio.MenuModel {
        const cFn = @extern(*const fn (*MenuLinkIter) callconv(.c) *gio.MenuModel, .{ .name = "g_menu_link_iter_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/gio/method.MenuLinkIter.next.html)
    pub fn next(self: *MenuLinkIter) bool {
        const cFn = @extern(*const fn (*MenuLinkIter) callconv(.c) bool, .{ .name = "g_menu_link_iter_next" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_next](https://docs.gtk.org/gio/vfunc.MenuLinkIter.get_next.html)
    pub fn getNextV(self: *MenuLinkIter, _out_link: ?*[*:0]u8, _value: ?**gio.MenuModel) bool {
        const class: *MenuLinkIterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_next.?;
        const ret = vFn(self, _out_link, _value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_menu_link_iter_get_type" });
        return cFn();
    }
};
pub const MenuLinkIterClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_next: ?*const fn (_iter: *gio.MenuLinkIter, _out_link: ?*[*:0]u8, _value: ?**gio.MenuModel) callconv(.c) bool,
};
pub const MenuLinkIterPrivate = opaque {};
/// Class [MenuModel](https://docs.gtk.org/gio/class.MenuModel.html)
pub const MenuModel = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.MenuModelPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.MenuModelClass;
    /// method [get_item_attribute_value](https://docs.gtk.org/gio/method.MenuModel.get_item_attribute_value.html)
    pub fn getItemAttributeValue(self: *MenuModel, _item_index: i32, _attribute: [*:0]const u8, _expected_type: ?*glib.VariantType) ?*glib.Variant {
        const cFn = @extern(*const fn (*MenuModel, i32, [*:0]const u8, ?*glib.VariantType) callconv(.c) ?*glib.Variant, .{ .name = "g_menu_model_get_item_attribute_value" });
        const ret = cFn(self, _item_index, _attribute, _expected_type);
        return ret;
    }
    /// method [get_item_link](https://docs.gtk.org/gio/method.MenuModel.get_item_link.html)
    pub fn getItemLink(self: *MenuModel, _item_index: i32, _link: [*:0]const u8) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*MenuModel, i32, [*:0]const u8) callconv(.c) ?*gio.MenuModel, .{ .name = "g_menu_model_get_item_link" });
        const ret = cFn(self, _item_index, _link);
        return ret;
    }
    /// method [get_n_items](https://docs.gtk.org/gio/method.MenuModel.get_n_items.html)
    pub fn getNItems(self: *MenuModel) i32 {
        const cFn = @extern(*const fn (*MenuModel) callconv(.c) i32, .{ .name = "g_menu_model_get_n_items" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_mutable](https://docs.gtk.org/gio/method.MenuModel.is_mutable.html)
    pub fn isMutable(self: *MenuModel) bool {
        const cFn = @extern(*const fn (*MenuModel) callconv(.c) bool, .{ .name = "g_menu_model_is_mutable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [items_changed](https://docs.gtk.org/gio/method.MenuModel.items_changed.html)
    pub fn itemsChanged(self: *MenuModel, _position: i32, _removed: i32, _added: i32) void {
        const cFn = @extern(*const fn (*MenuModel, i32, i32, i32) callconv(.c) void, .{ .name = "g_menu_model_items_changed" });
        const ret = cFn(self, _position, _removed, _added);
        return ret;
    }
    /// method [iterate_item_attributes](https://docs.gtk.org/gio/method.MenuModel.iterate_item_attributes.html)
    pub fn iterateItemAttributes(self: *MenuModel, _item_index: i32) *gio.MenuAttributeIter {
        const cFn = @extern(*const fn (*MenuModel, i32) callconv(.c) *gio.MenuAttributeIter, .{ .name = "g_menu_model_iterate_item_attributes" });
        const ret = cFn(self, _item_index);
        return ret;
    }
    /// method [iterate_item_links](https://docs.gtk.org/gio/method.MenuModel.iterate_item_links.html)
    pub fn iterateItemLinks(self: *MenuModel, _item_index: i32) *gio.MenuLinkIter {
        const cFn = @extern(*const fn (*MenuModel, i32) callconv(.c) *gio.MenuLinkIter, .{ .name = "g_menu_model_iterate_item_links" });
        const ret = cFn(self, _item_index);
        return ret;
    }
    /// vfunc [get_item_attribute_value](https://docs.gtk.org/gio/vfunc.MenuModel.get_item_attribute_value.html)
    pub fn getItemAttributeValueV(self: *MenuModel, _item_index: i32, _attribute: [*:0]const u8, _expected_type: ?*glib.VariantType) ?*glib.Variant {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item_attribute_value.?;
        const ret = vFn(self, _item_index, _attribute, _expected_type);
        return ret;
    }
    /// vfunc [get_item_attributes](https://docs.gtk.org/gio/vfunc.MenuModel.get_item_attributes.html)
    pub fn getItemAttributesV(self: *MenuModel, _item_index: i32, _attributes: **core.HashTable) void {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item_attributes.?;
        const ret = vFn(self, _item_index, _attributes);
        return ret;
    }
    /// vfunc [get_item_link](https://docs.gtk.org/gio/vfunc.MenuModel.get_item_link.html)
    pub fn getItemLinkV(self: *MenuModel, _item_index: i32, _link: [*:0]const u8) ?*gio.MenuModel {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item_link.?;
        const ret = vFn(self, _item_index, _link);
        return ret;
    }
    /// vfunc [get_item_links](https://docs.gtk.org/gio/vfunc.MenuModel.get_item_links.html)
    pub fn getItemLinksV(self: *MenuModel, _item_index: i32, _links: **core.HashTable) void {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_item_links.?;
        const ret = vFn(self, _item_index, _links);
        return ret;
    }
    /// vfunc [get_n_items](https://docs.gtk.org/gio/vfunc.MenuModel.get_n_items.html)
    pub fn getNItemsV(self: *MenuModel) i32 {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_n_items.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_mutable](https://docs.gtk.org/gio/vfunc.MenuModel.is_mutable.html)
    pub fn isMutableV(self: *MenuModel) bool {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_mutable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [iterate_item_attributes](https://docs.gtk.org/gio/vfunc.MenuModel.iterate_item_attributes.html)
    pub fn iterateItemAttributesV(self: *MenuModel, _item_index: i32) *gio.MenuAttributeIter {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iterate_item_attributes.?;
        const ret = vFn(self, _item_index);
        return ret;
    }
    /// vfunc [iterate_item_links](https://docs.gtk.org/gio/vfunc.MenuModel.iterate_item_links.html)
    pub fn iterateItemLinksV(self: *MenuModel, _item_index: i32) *gio.MenuLinkIter {
        const class: *MenuModelClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iterate_item_links.?;
        const ret = vFn(self, _item_index);
        return ret;
    }
    /// signal [items-changed](https://docs.gtk.org/gio/signal.MenuModel.items-changed.html)
    pub fn connectItemsChanged(self: *MenuModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("items-changed", handler, args, flags, &.{ void, *MenuModel, i32, i32, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_menu_model_get_type" });
        return cFn();
    }
};
pub const MenuModelClass = extern struct {
    parent_class: gobject.ObjectClass,
    is_mutable: ?*const fn (_model: *gio.MenuModel) callconv(.c) bool,
    get_n_items: ?*const fn (_model: *gio.MenuModel) callconv(.c) i32,
    get_item_attributes: ?*const fn (_model: *gio.MenuModel, _item_index: i32, _attributes: **core.HashTable) callconv(.c) void,
    iterate_item_attributes: ?*const fn (_model: *gio.MenuModel, _item_index: i32) callconv(.c) *gio.MenuAttributeIter,
    get_item_attribute_value: ?*const fn (_model: *gio.MenuModel, _item_index: i32, _attribute: [*:0]const u8, _expected_type: ?*glib.VariantType) callconv(.c) ?*glib.Variant,
    get_item_links: ?*const fn (_model: *gio.MenuModel, _item_index: i32, _links: **core.HashTable) callconv(.c) void,
    iterate_item_links: ?*const fn (_model: *gio.MenuModel, _item_index: i32) callconv(.c) *gio.MenuLinkIter,
    get_item_link: ?*const fn (_model: *gio.MenuModel, _item_index: i32, _link: [*:0]const u8) callconv(.c) ?*gio.MenuModel,
};
pub const MenuModelPrivate = opaque {};
/// Iface [Mount](https://docs.gtk.org/gio/iface.Mount.html)
pub const Mount = opaque {
    /// method [can_eject](https://docs.gtk.org/gio/method.Mount.can_eject.html)
    pub fn canEject(self: *Mount) bool {
        const cFn = @extern(*const fn (*Mount) callconv(.c) bool, .{ .name = "g_mount_can_eject" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_unmount](https://docs.gtk.org/gio/method.Mount.can_unmount.html)
    pub fn canUnmount(self: *Mount) bool {
        const cFn = @extern(*const fn (*Mount) callconv(.c) bool, .{ .name = "g_mount_can_unmount" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [eject](https://docs.gtk.org/gio/method.Mount.eject.html)
    pub const eject = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn eject(self: *Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*Mount, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_eject" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.eject;
    /// Deprecated:
    /// method [eject_finish](https://docs.gtk.org/gio/method.Mount.eject_finish.html)
    pub const ejectFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ejectFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_mount_eject_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.ejectFinish;
    /// method [eject_with_operation](https://docs.gtk.org/gio/method.Mount.eject_with_operation.html)
    pub fn ejectWithOperation(self: *Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Mount, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_eject_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [eject_with_operation_finish](https://docs.gtk.org/gio/method.Mount.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_mount_eject_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_default_location](https://docs.gtk.org/gio/method.Mount.get_default_location.html)
    pub fn getDefaultLocation(self: *Mount) *gio.File {
        const cFn = @extern(*const fn (*Mount) callconv(.c) *gio.File, .{ .name = "g_mount_get_default_location" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drive](https://docs.gtk.org/gio/method.Mount.get_drive.html)
    pub fn getDrive(self: *Mount) ?*gio.Drive {
        const cFn = @extern(*const fn (*Mount) callconv(.c) ?*gio.Drive, .{ .name = "g_mount_get_drive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.Mount.get_icon.html)
    pub fn getIcon(self: *Mount) *gio.Icon {
        const cFn = @extern(*const fn (*Mount) callconv(.c) *gio.Icon, .{ .name = "g_mount_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.Mount.get_name.html)
    pub fn getName(self: *Mount) [*:0]u8 {
        const cFn = @extern(*const fn (*Mount) callconv(.c) [*:0]u8, .{ .name = "g_mount_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_root](https://docs.gtk.org/gio/method.Mount.get_root.html)
    pub fn getRoot(self: *Mount) *gio.File {
        const cFn = @extern(*const fn (*Mount) callconv(.c) *gio.File, .{ .name = "g_mount_get_root" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sort_key](https://docs.gtk.org/gio/method.Mount.get_sort_key.html)
    pub fn getSortKey(self: *Mount) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Mount) callconv(.c) ?[*:0]u8, .{ .name = "g_mount_get_sort_key" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_symbolic_icon](https://docs.gtk.org/gio/method.Mount.get_symbolic_icon.html)
    pub fn getSymbolicIcon(self: *Mount) *gio.Icon {
        const cFn = @extern(*const fn (*Mount) callconv(.c) *gio.Icon, .{ .name = "g_mount_get_symbolic_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uuid](https://docs.gtk.org/gio/method.Mount.get_uuid.html)
    pub fn getUuid(self: *Mount) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Mount) callconv(.c) ?[*:0]u8, .{ .name = "g_mount_get_uuid" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_volume](https://docs.gtk.org/gio/method.Mount.get_volume.html)
    pub fn getVolume(self: *Mount) ?*gio.Volume {
        const cFn = @extern(*const fn (*Mount) callconv(.c) ?*gio.Volume, .{ .name = "g_mount_get_volume" });
        const ret = cFn(self);
        return ret;
    }
    /// method [guess_content_type](https://docs.gtk.org/gio/method.Mount.guess_content_type.html)
    pub fn guessContentType(self: *Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Mount, bool, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_guess_content_type" });
        const ret = cFn(self, _force_rescan, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [guess_content_type_finish](https://docs.gtk.org/gio/method.Mount.guess_content_type_finish.html)
    pub fn guessContentTypeFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_mount_guess_content_type_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [guess_content_type_sync](https://docs.gtk.org/gio/method.Mount.guess_content_type_sync.html)
    pub fn guessContentTypeSync(self: *Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Mount, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_mount_guess_content_type_sync" });
        const ret = cFn(self, _force_rescan, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [is_shadowed](https://docs.gtk.org/gio/method.Mount.is_shadowed.html)
    pub fn isShadowed(self: *Mount) bool {
        const cFn = @extern(*const fn (*Mount) callconv(.c) bool, .{ .name = "g_mount_is_shadowed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remount](https://docs.gtk.org/gio/method.Mount.remount.html)
    pub fn remount(self: *Mount, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Mount, gio.MountMountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_remount" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [remount_finish](https://docs.gtk.org/gio/method.Mount.remount_finish.html)
    pub fn remountFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_mount_remount_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [shadow](https://docs.gtk.org/gio/method.Mount.shadow.html)
    pub fn shadow(self: *Mount) void {
        const cFn = @extern(*const fn (*Mount) callconv(.c) void, .{ .name = "g_mount_shadow" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [unmount](https://docs.gtk.org/gio/method.Mount.unmount.html)
    pub const unmount = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unmount(self: *Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*Mount, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_unmount" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.unmount;
    /// Deprecated:
    /// method [unmount_finish](https://docs.gtk.org/gio/method.Mount.unmount_finish.html)
    pub const unmountFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unmountFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_mount_unmount_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.unmountFinish;
    /// method [unmount_with_operation](https://docs.gtk.org/gio/method.Mount.unmount_with_operation.html)
    pub fn unmountWithOperation(self: *Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Mount, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_mount_unmount_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [unmount_with_operation_finish](https://docs.gtk.org/gio/method.Mount.unmount_with_operation_finish.html)
    pub fn unmountWithOperationFinish(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Mount, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_mount_unmount_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [unshadow](https://docs.gtk.org/gio/method.Mount.unshadow.html)
    pub fn unshadow(self: *Mount) void {
        const cFn = @extern(*const fn (*Mount) callconv(.c) void, .{ .name = "g_mount_unshadow" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [can_eject](https://docs.gtk.org/gio/vfunc.Mount.can_eject.html)
    pub fn canEjectV(self: *Mount) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_eject.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_unmount](https://docs.gtk.org/gio/vfunc.Mount.can_unmount.html)
    pub fn canUnmountV(self: *Mount) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_unmount.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.Mount.changed.html)
    pub fn changedV(self: *Mount) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [eject](https://docs.gtk.org/gio/vfunc.Mount.eject.html)
    pub fn ejectV(self: *Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_finish](https://docs.gtk.org/gio/vfunc.Mount.eject_finish.html)
    pub fn ejectFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [eject_with_operation](https://docs.gtk.org/gio/vfunc.Mount.eject_with_operation.html)
    pub fn ejectWithOperationV(self: *Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_with_operation_finish](https://docs.gtk.org/gio/vfunc.Mount.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [get_default_location](https://docs.gtk.org/gio/vfunc.Mount.get_default_location.html)
    pub fn getDefaultLocationV(self: *Mount) *gio.File {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_default_location.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_drive](https://docs.gtk.org/gio/vfunc.Mount.get_drive.html)
    pub fn getDriveV(self: *Mount) ?*gio.Drive {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_drive.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_icon](https://docs.gtk.org/gio/vfunc.Mount.get_icon.html)
    pub fn getIconV(self: *Mount) *gio.Icon {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/gio/vfunc.Mount.get_name.html)
    pub fn getNameV(self: *Mount) [*:0]u8 {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_root](https://docs.gtk.org/gio/vfunc.Mount.get_root.html)
    pub fn getRootV(self: *Mount) *gio.File {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_root.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_sort_key](https://docs.gtk.org/gio/vfunc.Mount.get_sort_key.html)
    pub fn getSortKeyV(self: *Mount) ?[*:0]u8 {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_sort_key.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_symbolic_icon](https://docs.gtk.org/gio/vfunc.Mount.get_symbolic_icon.html)
    pub fn getSymbolicIconV(self: *Mount) *gio.Icon {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_symbolic_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_uuid](https://docs.gtk.org/gio/vfunc.Mount.get_uuid.html)
    pub fn getUuidV(self: *Mount) ?[*:0]u8 {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_uuid.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_volume](https://docs.gtk.org/gio/vfunc.Mount.get_volume.html)
    pub fn getVolumeV(self: *Mount) ?*gio.Volume {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_volume.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [guess_content_type](https://docs.gtk.org/gio/vfunc.Mount.guess_content_type.html)
    pub fn guessContentTypeV(self: *Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.guess_content_type.?;
        const ret = vFn(self, _force_rescan, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [guess_content_type_finish](https://docs.gtk.org/gio/vfunc.Mount.guess_content_type_finish.html)
    pub fn guessContentTypeFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) [*:null]?[*:0]const u8 {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.guess_content_type_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [guess_content_type_sync](https://docs.gtk.org/gio/vfunc.Mount.guess_content_type_sync.html)
    pub fn guessContentTypeSyncV(self: *Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) [*:null]?[*:0]const u8 {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.guess_content_type_sync.?;
        const ret = vFn(self, _force_rescan, _cancellable, _error);
        return ret;
    }
    /// vfunc [pre_unmount](https://docs.gtk.org/gio/vfunc.Mount.pre_unmount.html)
    pub fn preUnmountV(self: *Mount) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.pre_unmount.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [remount](https://docs.gtk.org/gio/vfunc.Mount.remount.html)
    pub fn remountV(self: *Mount, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remount.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [remount_finish](https://docs.gtk.org/gio/vfunc.Mount.remount_finish.html)
    pub fn remountFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remount_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [unmount](https://docs.gtk.org/gio/vfunc.Mount.unmount.html)
    pub fn unmountV(self: *Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [unmount_finish](https://docs.gtk.org/gio/vfunc.Mount.unmount_finish.html)
    pub fn unmountFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [unmount_with_operation](https://docs.gtk.org/gio/vfunc.Mount.unmount_with_operation.html)
    pub fn unmountWithOperationV(self: *Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [unmount_with_operation_finish](https://docs.gtk.org/gio/vfunc.Mount.unmount_with_operation_finish.html)
    pub fn unmountWithOperationFinishV(self: *Mount, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmount_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [unmounted](https://docs.gtk.org/gio/vfunc.Mount.unmounted.html)
    pub fn unmountedV(self: *Mount) void {
        const class: *MountIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmounted.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.Mount.changed.html)
    pub fn connectChanged(self: *Mount, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Mount });
    }
    /// signal [pre-unmount](https://docs.gtk.org/gio/signal.Mount.pre-unmount.html)
    pub fn connectPreUnmount(self: *Mount, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("pre-unmount", handler, args, flags, &.{ void, *Mount });
    }
    /// signal [unmounted](https://docs.gtk.org/gio/signal.Mount.unmounted.html)
    pub fn connectUnmounted(self: *Mount, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unmounted", handler, args, flags, &.{ void, *Mount });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mount_get_type" });
        return cFn();
    }
};
/// Struct [MountIface](https://docs.gtk.org/gio/struct.MountIface.html)
pub const MountIface = extern struct {
    g_iface: gobject.TypeInterface,
    changed: ?*const fn (_mount: *gio.Mount) callconv(.c) void,
    unmounted: ?*const fn (_mount: *gio.Mount) callconv(.c) void,
    get_root: ?*const fn (_mount: *gio.Mount) callconv(.c) *gio.File,
    get_name: ?*const fn (_mount: *gio.Mount) callconv(.c) [*:0]u8,
    get_icon: ?*const fn (_mount: *gio.Mount) callconv(.c) *gio.Icon,
    get_uuid: ?*const fn (_mount: *gio.Mount) callconv(.c) ?[*:0]u8,
    get_volume: ?*const fn (_mount: *gio.Mount) callconv(.c) ?*gio.Volume,
    get_drive: ?*const fn (_mount: *gio.Mount) callconv(.c) ?*gio.Drive,
    can_unmount: ?*const fn (_mount: *gio.Mount) callconv(.c) bool,
    can_eject: ?*const fn (_mount: *gio.Mount) callconv(.c) bool,
    unmount: ?*const fn (_mount: *gio.Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    unmount_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    eject: ?*const fn (_mount: *gio.Mount, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    remount: ?*const fn (_mount: *gio.Mount, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    remount_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    guess_content_type: ?*const fn (_mount: *gio.Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    guess_content_type_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) [*:null]?[*:0]const u8,
    guess_content_type_sync: ?*const fn (_mount: *gio.Mount, _force_rescan: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) [*:null]?[*:0]const u8,
    pre_unmount: ?*const fn (_mount: *gio.Mount) callconv(.c) void,
    unmount_with_operation: ?*const fn (_mount: *gio.Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    unmount_with_operation_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    eject_with_operation: ?*const fn (_mount: *gio.Mount, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_with_operation_finish: ?*const fn (_mount: *gio.Mount, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_default_location: ?*const fn (_mount: *gio.Mount) callconv(.c) *gio.File,
    get_sort_key: ?*const fn (_mount: *gio.Mount) callconv(.c) ?[*:0]u8,
    get_symbolic_icon: ?*const fn (_mount: *gio.Mount) callconv(.c) *gio.Icon,
};
/// Flags [MountMountFlags](https://docs.gtk.org/gio/flags.MountMountFlags.html)
pub const MountMountFlags = packed struct(u32) {
    _: u32 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mount_mount_flags_get_type" });
        return cFn();
    }
};
/// Class [MountOperation](https://docs.gtk.org/gio/class.MountOperation.html)
/// - property [anonymous](https://docs.gtk.org/gio/property.MountOperation.anonymous.html): (rw) `bool`
/// - property [choice](https://docs.gtk.org/gio/property.MountOperation.choice.html): (rw) `i32`
/// - property [domain](https://docs.gtk.org/gio/property.MountOperation.domain.html): (rw) `[*:0]const u8`
/// - property [is-tcrypt-hidden-volume](https://docs.gtk.org/gio/property.MountOperation.is-tcrypt-hidden-volume.html): (rw) `bool`
/// - property [is-tcrypt-system-volume](https://docs.gtk.org/gio/property.MountOperation.is-tcrypt-system-volume.html): (rw) `bool`
/// - property [password](https://docs.gtk.org/gio/property.MountOperation.password.html): (rw) `[*:0]const u8`
/// - property [password-save](https://docs.gtk.org/gio/property.MountOperation.password-save.html): (rw) `gio.PasswordSave`
/// - property [pim](https://docs.gtk.org/gio/property.MountOperation.pim.html): (rw) `u32`
/// - property [username](https://docs.gtk.org/gio/property.MountOperation.username.html): (rw) `[*:0]const u8`
pub const MountOperation = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.MountOperationPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.MountOperationClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.MountOperation.new.html)
    pub fn new() *MountOperation {
        const cFn = @extern(*const fn () callconv(.c) *MountOperation, .{ .name = "g_mount_operation_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_anonymous](https://docs.gtk.org/gio/method.MountOperation.get_anonymous.html)
    pub fn getAnonymous(self: *MountOperation) bool {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) bool, .{ .name = "g_mount_operation_get_anonymous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_choice](https://docs.gtk.org/gio/method.MountOperation.get_choice.html)
    pub fn getChoice(self: *MountOperation) i32 {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) i32, .{ .name = "g_mount_operation_get_choice" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_domain](https://docs.gtk.org/gio/method.MountOperation.get_domain.html)
    pub fn getDomain(self: *MountOperation) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) ?[*:0]u8, .{ .name = "g_mount_operation_get_domain" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_tcrypt_hidden_volume](https://docs.gtk.org/gio/method.MountOperation.get_is_tcrypt_hidden_volume.html)
    pub fn getIsTcryptHiddenVolume(self: *MountOperation) bool {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) bool, .{ .name = "g_mount_operation_get_is_tcrypt_hidden_volume" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_is_tcrypt_system_volume](https://docs.gtk.org/gio/method.MountOperation.get_is_tcrypt_system_volume.html)
    pub fn getIsTcryptSystemVolume(self: *MountOperation) bool {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) bool, .{ .name = "g_mount_operation_get_is_tcrypt_system_volume" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_password](https://docs.gtk.org/gio/method.MountOperation.get_password.html)
    pub fn getPassword(self: *MountOperation) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) ?[*:0]u8, .{ .name = "g_mount_operation_get_password" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_password_save](https://docs.gtk.org/gio/method.MountOperation.get_password_save.html)
    pub fn getPasswordSave(self: *MountOperation) gio.PasswordSave {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) gio.PasswordSave, .{ .name = "g_mount_operation_get_password_save" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pim](https://docs.gtk.org/gio/method.MountOperation.get_pim.html)
    pub fn getPim(self: *MountOperation) u32 {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) u32, .{ .name = "g_mount_operation_get_pim" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_username](https://docs.gtk.org/gio/method.MountOperation.get_username.html)
    pub fn getUsername(self: *MountOperation) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) ?[*:0]u8, .{ .name = "g_mount_operation_get_username" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reply](https://docs.gtk.org/gio/method.MountOperation.reply.html)
    pub fn reply(self: *MountOperation, _result: gio.MountOperationResult) void {
        const cFn = @extern(*const fn (*MountOperation, gio.MountOperationResult) callconv(.c) void, .{ .name = "g_mount_operation_reply" });
        const ret = cFn(self, _result);
        return ret;
    }
    /// method [set_anonymous](https://docs.gtk.org/gio/method.MountOperation.set_anonymous.html)
    pub fn setAnonymous(self: *MountOperation, _anonymous: bool) void {
        const cFn = @extern(*const fn (*MountOperation, bool) callconv(.c) void, .{ .name = "g_mount_operation_set_anonymous" });
        const ret = cFn(self, _anonymous);
        return ret;
    }
    /// method [set_choice](https://docs.gtk.org/gio/method.MountOperation.set_choice.html)
    pub fn setChoice(self: *MountOperation, _choice: i32) void {
        const cFn = @extern(*const fn (*MountOperation, i32) callconv(.c) void, .{ .name = "g_mount_operation_set_choice" });
        const ret = cFn(self, _choice);
        return ret;
    }
    /// method [set_domain](https://docs.gtk.org/gio/method.MountOperation.set_domain.html)
    pub fn setDomain(self: *MountOperation, _domain: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MountOperation, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_mount_operation_set_domain" });
        const ret = cFn(self, _domain);
        return ret;
    }
    /// method [set_is_tcrypt_hidden_volume](https://docs.gtk.org/gio/method.MountOperation.set_is_tcrypt_hidden_volume.html)
    pub fn setIsTcryptHiddenVolume(self: *MountOperation, _hidden_volume: bool) void {
        const cFn = @extern(*const fn (*MountOperation, bool) callconv(.c) void, .{ .name = "g_mount_operation_set_is_tcrypt_hidden_volume" });
        const ret = cFn(self, _hidden_volume);
        return ret;
    }
    /// method [set_is_tcrypt_system_volume](https://docs.gtk.org/gio/method.MountOperation.set_is_tcrypt_system_volume.html)
    pub fn setIsTcryptSystemVolume(self: *MountOperation, _system_volume: bool) void {
        const cFn = @extern(*const fn (*MountOperation, bool) callconv(.c) void, .{ .name = "g_mount_operation_set_is_tcrypt_system_volume" });
        const ret = cFn(self, _system_volume);
        return ret;
    }
    /// method [set_password](https://docs.gtk.org/gio/method.MountOperation.set_password.html)
    pub fn setPassword(self: *MountOperation, _password: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MountOperation, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_mount_operation_set_password" });
        const ret = cFn(self, _password);
        return ret;
    }
    /// method [set_password_save](https://docs.gtk.org/gio/method.MountOperation.set_password_save.html)
    pub fn setPasswordSave(self: *MountOperation, _save: gio.PasswordSave) void {
        const cFn = @extern(*const fn (*MountOperation, gio.PasswordSave) callconv(.c) void, .{ .name = "g_mount_operation_set_password_save" });
        const ret = cFn(self, _save);
        return ret;
    }
    /// method [set_pim](https://docs.gtk.org/gio/method.MountOperation.set_pim.html)
    pub fn setPim(self: *MountOperation, _pim: u32) void {
        const cFn = @extern(*const fn (*MountOperation, u32) callconv(.c) void, .{ .name = "g_mount_operation_set_pim" });
        const ret = cFn(self, _pim);
        return ret;
    }
    /// method [set_username](https://docs.gtk.org/gio/method.MountOperation.set_username.html)
    pub fn setUsername(self: *MountOperation, _username: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MountOperation, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_mount_operation_set_username" });
        const ret = cFn(self, _username);
        return ret;
    }
    /// vfunc [aborted](https://docs.gtk.org/gio/vfunc.MountOperation.aborted.html)
    pub fn abortedV(self: *MountOperation) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.aborted.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [ask_password](https://docs.gtk.org/gio/vfunc.MountOperation.ask_password.html)
    pub fn askPasswordV(self: *MountOperation, _message: [*:0]const u8, _default_user: [*:0]const u8, _default_domain: [*:0]const u8, _flags: gio.AskPasswordFlags) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ask_password.?;
        const ret = vFn(self, _message, _default_user, _default_domain, _flags);
        return ret;
    }
    /// vfunc [ask_question](https://docs.gtk.org/gio/vfunc.MountOperation.ask_question.html)
    pub fn askQuestionV(self: *MountOperation, _message: [*:0]const u8, _choices: [*:null]?[*:0]const u8) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ask_question.?;
        const ret = vFn(self, _message, _choices);
        return ret;
    }
    /// vfunc [reply](https://docs.gtk.org/gio/vfunc.MountOperation.reply.html)
    pub fn replyV(self: *MountOperation, _result: gio.MountOperationResult) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reply.?;
        const ret = vFn(self, _result);
        return ret;
    }
    /// vfunc [show_processes](https://docs.gtk.org/gio/vfunc.MountOperation.show_processes.html)
    pub fn showProcessesV(self: *MountOperation, _message: [*:0]const u8, _processes: *core.Array, _choices: [*:null]?[*:0]const u8) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.show_processes.?;
        const ret = vFn(self, _message, _processes, _choices);
        return ret;
    }
    /// vfunc [show_unmount_progress](https://docs.gtk.org/gio/vfunc.MountOperation.show_unmount_progress.html)
    pub fn showUnmountProgressV(self: *MountOperation, _message: [*:0]const u8, _time_left: i64, _bytes_left: i64) void {
        const class: *MountOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.show_unmount_progress.?;
        const ret = vFn(self, _message, _time_left, _bytes_left);
        return ret;
    }
    /// signal [aborted](https://docs.gtk.org/gio/signal.MountOperation.aborted.html)
    pub fn connectAborted(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("aborted", handler, args, flags, &.{ void, *MountOperation });
    }
    /// signal [ask-password](https://docs.gtk.org/gio/signal.MountOperation.ask-password.html)
    pub fn connectAskPassword(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("ask-password", handler, args, flags, &.{ void, *MountOperation, [*:0]const u8, [*:0]const u8, [*:0]const u8, gio.AskPasswordFlags });
    }
    /// signal [ask-question](https://docs.gtk.org/gio/signal.MountOperation.ask-question.html)
    pub fn connectAskQuestion(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("ask-question", handler, args, flags, &.{ void, *MountOperation, [*:0]const u8, [*:null]?[*:0]const u8 });
    }
    /// signal [reply](https://docs.gtk.org/gio/signal.MountOperation.reply.html)
    pub fn connectReply(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("reply", handler, args, flags, &.{ void, *MountOperation, gio.MountOperationResult });
    }
    /// signal [show-processes](https://docs.gtk.org/gio/signal.MountOperation.show-processes.html)
    pub fn connectShowProcesses(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("show-processes", handler, args, flags, &.{ void, *MountOperation, [*:0]const u8, *core.Array, [*:null]?[*:0]const u8 });
    }
    /// signal [show-unmount-progress](https://docs.gtk.org/gio/signal.MountOperation.show-unmount-progress.html)
    pub fn connectShowUnmountProgress(self: *MountOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("show-unmount-progress", handler, args, flags, &.{ void, *MountOperation, [*:0]const u8, i64, i64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mount_operation_get_type" });
        return cFn();
    }
};
pub const MountOperationClass = extern struct {
    parent_class: gobject.ObjectClass,
    ask_password: ?*const fn (_op: *gio.MountOperation, _message: [*:0]const u8, _default_user: [*:0]const u8, _default_domain: [*:0]const u8, _flags: gio.AskPasswordFlags) callconv(.c) void,
    ask_question: ?*const fn (_op: *gio.MountOperation, _message: [*:0]const u8, _choices: [*:null]?[*:0]const u8) callconv(.c) void,
    reply: ?*const fn (_op: *gio.MountOperation, _result: gio.MountOperationResult) callconv(.c) void,
    aborted: ?*const fn (_op: *gio.MountOperation) callconv(.c) void,
    show_processes: ?*const fn (_op: *gio.MountOperation, _message: [*:0]const u8, _processes: *core.Array, _choices: [*:null]?[*:0]const u8) callconv(.c) void,
    show_unmount_progress: ?*const fn (_op: *gio.MountOperation, _message: [*:0]const u8, _time_left: i64, _bytes_left: i64) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
    _g_reserved8: ?*anyopaque,
    _g_reserved9: ?*anyopaque,
};
pub const MountOperationPrivate = opaque {};
/// Enum [MountOperationResult](https://docs.gtk.org/gio/enum.MountOperationResult.html)
pub const MountOperationResult = enum(u32) {
    handled = 0,
    aborted = 1,
    unhandled = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mount_operation_result_get_type" });
        return cFn();
    }
};
/// Flags [MountUnmountFlags](https://docs.gtk.org/gio/flags.MountUnmountFlags.html)
pub const MountUnmountFlags = packed struct(u32) {
    force: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mount_unmount_flags_get_type" });
        return cFn();
    }
};
/// const [NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME.html)
pub const NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";
/// const [NETWORK_MONITOR_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.NETWORK_MONITOR_EXTENSION_POINT_NAME.html)
pub const NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor";
/// Class [NativeSocketAddress](https://docs.gtk.org/gio/class.NativeSocketAddress.html)
pub const NativeSocketAddress = extern struct {
    parent_instance: gio.SocketAddress,
    priv: ?*gio.NativeSocketAddressPrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gio.SocketAddress;
    pub const Class = gio.NativeSocketAddressClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.NativeSocketAddress.new.html)
    pub fn new(_native: ?*anyopaque, _len: u64) *NativeSocketAddress {
        const cFn = @extern(*const fn (?*anyopaque, u64) callconv(.c) *NativeSocketAddress, .{ .name = "g_native_socket_address_new" });
        const ret = cFn(@ptrCast(_native), _len);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_native_socket_address_get_type" });
        return cFn();
    }
};
pub const NativeSocketAddressClass = extern struct {
    parent_class: gio.SocketAddressClass,
};
pub const NativeSocketAddressPrivate = opaque {};
/// Class [NativeVolumeMonitor](https://docs.gtk.org/gio/class.NativeVolumeMonitor.html)
pub const NativeVolumeMonitor = extern struct {
    parent_instance: gio.VolumeMonitor,
    pub const Parent = gio.VolumeMonitor;
    pub const Class = gio.NativeVolumeMonitorClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_native_volume_monitor_get_type" });
        return cFn();
    }
};
pub const NativeVolumeMonitorClass = extern struct {
    parent_class: gio.VolumeMonitorClass,
    get_mount_for_mount_path: ?*anyopaque,
};
/// Class [NetworkAddress](https://docs.gtk.org/gio/class.NetworkAddress.html)
/// - property [hostname](https://docs.gtk.org/gio/property.NetworkAddress.hostname.html): (r-) `[*:0]const u8`
/// - property [port](https://docs.gtk.org/gio/property.NetworkAddress.port.html): (r-) `u32`
/// - property [scheme](https://docs.gtk.org/gio/property.NetworkAddress.scheme.html): (r-) `[*:0]const u8`
pub const NetworkAddress = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.NetworkAddressPrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gobject.Object;
    pub const Class = gio.NetworkAddressClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.NetworkAddress.new.html)
    pub fn new(_hostname: [*:0]const u8, _port: u16) *NetworkAddress {
        const cFn = @extern(*const fn ([*:0]const u8, u16) callconv(.c) *NetworkAddress, .{ .name = "g_network_address_new" });
        const ret = cFn(_hostname, _port);
        return ret;
    }
    /// ctor [new_loopback](https://docs.gtk.org/gio/ctor.NetworkAddress.new_loopback.html)
    pub fn newLoopback(_port: u16) *NetworkAddress {
        const cFn = @extern(*const fn (u16) callconv(.c) *NetworkAddress, .{ .name = "g_network_address_new_loopback" });
        const ret = cFn(_port);
        return ret;
    }
    /// type func [parse](https://docs.gtk.org/gio/type_func.NetworkAddress.parse.html)
    pub fn parse(_host_and_port: [*:0]const u8, _default_port: u16, _error: *?*core.Error) error{GError}!*gio.NetworkAddress {
        const cFn = @extern(*const fn ([*:0]const u8, u16, *?*core.Error) callconv(.c) *gio.NetworkAddress, .{ .name = "g_network_address_parse" });
        const ret = cFn(_host_and_port, _default_port, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [parse_uri](https://docs.gtk.org/gio/type_func.NetworkAddress.parse_uri.html)
    pub fn parseUri(_uri: [*:0]const u8, _default_port: u16, _error: *?*core.Error) error{GError}!*gio.NetworkAddress {
        const cFn = @extern(*const fn ([*:0]const u8, u16, *?*core.Error) callconv(.c) *gio.NetworkAddress, .{ .name = "g_network_address_parse_uri" });
        const ret = cFn(_uri, _default_port, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_hostname](https://docs.gtk.org/gio/method.NetworkAddress.get_hostname.html)
    pub fn getHostname(self: *NetworkAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*NetworkAddress) callconv(.c) [*:0]u8, .{ .name = "g_network_address_get_hostname" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_port](https://docs.gtk.org/gio/method.NetworkAddress.get_port.html)
    pub fn getPort(self: *NetworkAddress) u16 {
        const cFn = @extern(*const fn (*NetworkAddress) callconv(.c) u16, .{ .name = "g_network_address_get_port" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scheme](https://docs.gtk.org/gio/method.NetworkAddress.get_scheme.html)
    pub fn getScheme(self: *NetworkAddress) ?[*:0]u8 {
        const cFn = @extern(*const fn (*NetworkAddress) callconv(.c) ?[*:0]u8, .{ .name = "g_network_address_get_scheme" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_network_address_get_type" });
        return cFn();
    }
};
pub const NetworkAddressClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const NetworkAddressPrivate = opaque {};
/// Enum [NetworkConnectivity](https://docs.gtk.org/gio/enum.NetworkConnectivity.html)
pub const NetworkConnectivity = enum(u32) {
    local = 1,
    limited = 2,
    portal = 3,
    full = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_network_connectivity_get_type" });
        return cFn();
    }
};
/// Iface [NetworkMonitor](https://docs.gtk.org/gio/iface.NetworkMonitor.html)
/// - property [connectivity](https://docs.gtk.org/gio/property.NetworkMonitor.connectivity.html): (r-) `gio.NetworkConnectivity`
/// - property [network-available](https://docs.gtk.org/gio/property.NetworkMonitor.network-available.html): (r-) `bool`
/// - property [network-metered](https://docs.gtk.org/gio/property.NetworkMonitor.network-metered.html): (r-) `bool`
pub const NetworkMonitor = opaque {
    pub const Prerequisites = [_]type{gio.Initable};
    /// type func [get_default](https://docs.gtk.org/gio/type_func.NetworkMonitor.get_default.html)
    pub fn getDefault() *gio.NetworkMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.NetworkMonitor, .{ .name = "g_network_monitor_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [can_reach](https://docs.gtk.org/gio/method.NetworkMonitor.can_reach.html)
    pub fn canReach(self: *NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*NetworkMonitor, *gio.SocketConnectable, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_network_monitor_can_reach" });
        const ret = cFn(self, _connectable, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [can_reach_async](https://docs.gtk.org/gio/method.NetworkMonitor.can_reach_async.html)
    pub fn canReachAsync(self: *NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*NetworkMonitor, *gio.SocketConnectable, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_network_monitor_can_reach_async" });
        const ret = cFn(self, _connectable, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [can_reach_finish](https://docs.gtk.org/gio/method.NetworkMonitor.can_reach_finish.html)
    pub fn canReachFinish(self: *NetworkMonitor, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*NetworkMonitor, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_network_monitor_can_reach_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_connectivity](https://docs.gtk.org/gio/method.NetworkMonitor.get_connectivity.html)
    pub fn getConnectivity(self: *NetworkMonitor) gio.NetworkConnectivity {
        const cFn = @extern(*const fn (*NetworkMonitor) callconv(.c) gio.NetworkConnectivity, .{ .name = "g_network_monitor_get_connectivity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_network_available](https://docs.gtk.org/gio/method.NetworkMonitor.get_network_available.html)
    pub fn getNetworkAvailable(self: *NetworkMonitor) bool {
        const cFn = @extern(*const fn (*NetworkMonitor) callconv(.c) bool, .{ .name = "g_network_monitor_get_network_available" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_network_metered](https://docs.gtk.org/gio/method.NetworkMonitor.get_network_metered.html)
    pub fn getNetworkMetered(self: *NetworkMonitor) bool {
        const cFn = @extern(*const fn (*NetworkMonitor) callconv(.c) bool, .{ .name = "g_network_monitor_get_network_metered" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [can_reach](https://docs.gtk.org/gio/vfunc.NetworkMonitor.can_reach.html)
    pub fn canReachV(self: *NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *NetworkMonitorInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_reach.?;
        const ret = vFn(self, _connectable, _cancellable, _error);
        return ret;
    }
    /// vfunc [can_reach_async](https://docs.gtk.org/gio/vfunc.NetworkMonitor.can_reach_async.html)
    pub fn canReachAsyncV(self: *NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *NetworkMonitorInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_reach_async.?;
        const ret = vFn(self, _connectable, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [can_reach_finish](https://docs.gtk.org/gio/vfunc.NetworkMonitor.can_reach_finish.html)
    pub fn canReachFinishV(self: *NetworkMonitor, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *NetworkMonitorInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_reach_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [network_changed](https://docs.gtk.org/gio/vfunc.NetworkMonitor.network_changed.html)
    pub fn networkChangedV(self: *NetworkMonitor, _network_available: bool) void {
        const class: *NetworkMonitorInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.network_changed.?;
        const ret = vFn(self, _network_available);
        return ret;
    }
    /// signal [network-changed](https://docs.gtk.org/gio/signal.NetworkMonitor.network-changed.html)
    pub fn connectNetworkChanged(self: *NetworkMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("network-changed", handler, args, flags, &.{ void, *NetworkMonitor, bool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_network_monitor_get_type" });
        return cFn();
    }
};
pub const NetworkMonitorInterface = extern struct {
    g_iface: gobject.TypeInterface,
    network_changed: ?*const fn (_monitor: *gio.NetworkMonitor, _network_available: bool) callconv(.c) void,
    can_reach: ?*const fn (_monitor: *gio.NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    can_reach_async: ?*const fn (_monitor: *gio.NetworkMonitor, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    can_reach_finish: ?*const fn (_monitor: *gio.NetworkMonitor, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
};
/// Class [NetworkService](https://docs.gtk.org/gio/class.NetworkService.html)
/// - property [domain](https://docs.gtk.org/gio/property.NetworkService.domain.html): (r-) `[*:0]const u8`
/// - property [protocol](https://docs.gtk.org/gio/property.NetworkService.protocol.html): (r-) `[*:0]const u8`
/// - property [scheme](https://docs.gtk.org/gio/property.NetworkService.scheme.html): (rw) `[*:0]const u8`
/// - property [service](https://docs.gtk.org/gio/property.NetworkService.service.html): (r-) `[*:0]const u8`
pub const NetworkService = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.NetworkServicePrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gobject.Object;
    pub const Class = gio.NetworkServiceClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.NetworkService.new.html)
    pub fn new(_service: [*:0]const u8, _protocol: [*:0]const u8, _domain: [*:0]const u8) *NetworkService {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, [*:0]const u8) callconv(.c) *NetworkService, .{ .name = "g_network_service_new" });
        const ret = cFn(_service, _protocol, _domain);
        return ret;
    }
    /// method [get_domain](https://docs.gtk.org/gio/method.NetworkService.get_domain.html)
    pub fn getDomain(self: *NetworkService) [*:0]u8 {
        const cFn = @extern(*const fn (*NetworkService) callconv(.c) [*:0]u8, .{ .name = "g_network_service_get_domain" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_protocol](https://docs.gtk.org/gio/method.NetworkService.get_protocol.html)
    pub fn getProtocol(self: *NetworkService) [*:0]u8 {
        const cFn = @extern(*const fn (*NetworkService) callconv(.c) [*:0]u8, .{ .name = "g_network_service_get_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scheme](https://docs.gtk.org/gio/method.NetworkService.get_scheme.html)
    pub fn getScheme(self: *NetworkService) [*:0]u8 {
        const cFn = @extern(*const fn (*NetworkService) callconv(.c) [*:0]u8, .{ .name = "g_network_service_get_scheme" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_service](https://docs.gtk.org/gio/method.NetworkService.get_service.html)
    pub fn getService(self: *NetworkService) [*:0]u8 {
        const cFn = @extern(*const fn (*NetworkService) callconv(.c) [*:0]u8, .{ .name = "g_network_service_get_service" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_scheme](https://docs.gtk.org/gio/method.NetworkService.set_scheme.html)
    pub fn setScheme(self: *NetworkService, _scheme: [*:0]const u8) void {
        const cFn = @extern(*const fn (*NetworkService, [*:0]const u8) callconv(.c) void, .{ .name = "g_network_service_set_scheme" });
        const ret = cFn(self, _scheme);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_network_service_get_type" });
        return cFn();
    }
};
pub const NetworkServiceClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const NetworkServicePrivate = opaque {};
/// Class [Notification](https://docs.gtk.org/gio/class.Notification.html)
pub const Notification = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Notification.new.html)
    pub fn new(_title: [*:0]const u8) *Notification {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Notification, .{ .name = "g_notification_new" });
        const ret = cFn(_title);
        return ret;
    }
    /// method [add_button](https://docs.gtk.org/gio/method.Notification.add_button.html)
    pub fn addButton(self: *Notification, _label: [*:0]const u8, _detailed_action: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Notification, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_notification_add_button" });
        const ret = cFn(self, _label, _detailed_action);
        return ret;
    }
    /// method [add_button_with_target](https://docs.gtk.org/gio/method.Notification.add_button_with_target.html)
    pub fn addButtonWithTarget(self: *Notification, _label: [*:0]const u8, _action: [*:0]const u8, _target: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Notification, [*:0]const u8, [*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_notification_add_button_with_target_value" });
        const ret = cFn(self, _label, _action, _target);
        return ret;
    }
    /// method [set_body](https://docs.gtk.org/gio/method.Notification.set_body.html)
    pub fn setBody(self: *Notification, _body: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Notification, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_notification_set_body" });
        const ret = cFn(self, _body);
        return ret;
    }
    /// method [set_category](https://docs.gtk.org/gio/method.Notification.set_category.html)
    pub fn setCategory(self: *Notification, _category: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Notification, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_notification_set_category" });
        const ret = cFn(self, _category);
        return ret;
    }
    /// method [set_default_action](https://docs.gtk.org/gio/method.Notification.set_default_action.html)
    pub fn setDefaultAction(self: *Notification, _detailed_action: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Notification, [*:0]const u8) callconv(.c) void, .{ .name = "g_notification_set_default_action" });
        const ret = cFn(self, _detailed_action);
        return ret;
    }
    /// method [set_default_action_and_target](https://docs.gtk.org/gio/method.Notification.set_default_action_and_target.html)
    pub fn setDefaultActionAndTarget(self: *Notification, _action: [*:0]const u8, _target: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Notification, [*:0]const u8, ?*glib.Variant) callconv(.c) void, .{ .name = "g_notification_set_default_action_and_target_value" });
        const ret = cFn(self, _action, _target);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gio/method.Notification.set_icon.html)
    pub fn setIcon(self: *Notification, _icon: *gio.Icon) void {
        const cFn = @extern(*const fn (*Notification, *gio.Icon) callconv(.c) void, .{ .name = "g_notification_set_icon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_priority](https://docs.gtk.org/gio/method.Notification.set_priority.html)
    pub fn setPriority(self: *Notification, _priority: gio.NotificationPriority) void {
        const cFn = @extern(*const fn (*Notification, gio.NotificationPriority) callconv(.c) void, .{ .name = "g_notification_set_priority" });
        const ret = cFn(self, _priority);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gio/method.Notification.set_title.html)
    pub fn setTitle(self: *Notification, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Notification, [*:0]const u8) callconv(.c) void, .{ .name = "g_notification_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// Deprecated:
    /// method [set_urgent](https://docs.gtk.org/gio/method.Notification.set_urgent.html)
    pub const setUrgent = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUrgent(self: *Notification, _urgent: bool) void {
            const cFn = @extern(*const fn (*Notification, bool) callconv(.c) void, .{ .name = "g_notification_set_urgent" });
            const ret = cFn(self, _urgent);
            return ret;
        }
    }.setUrgent;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_notification_get_type" });
        return cFn();
    }
};
/// Enum [NotificationPriority](https://docs.gtk.org/gio/enum.NotificationPriority.html)
pub const NotificationPriority = enum(u32) {
    normal = 0,
    low = 1,
    high = 2,
    urgent = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_notification_priority_get_type" });
        return cFn();
    }
};
/// Struct [OutputMessage](https://docs.gtk.org/gio/struct.OutputMessage.html)
pub const OutputMessage = extern struct {
    address: ?*gio.SocketAddress,
    vectors: ?*gio.OutputVector,
    num_vectors: u32,
    bytes_sent: u32,
    control_messages: ?[*]*gio.SocketControlMessage,
    num_control_messages: u32,
};
/// Class [OutputStream](https://docs.gtk.org/gio/class.OutputStream.html)
pub const OutputStream = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.OutputStreamPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.OutputStreamClass;
    /// method [clear_pending](https://docs.gtk.org/gio/method.OutputStream.clear_pending.html)
    pub fn clearPending(self: *OutputStream) void {
        const cFn = @extern(*const fn (*OutputStream) callconv(.c) void, .{ .name = "g_output_stream_clear_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.OutputStream.close.html)
    pub fn close(self: *OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OutputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_close" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close_async](https://docs.gtk.org/gio/method.OutputStream.close_async.html)
    pub fn closeAsync(self: *OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_close_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [close_finish](https://docs.gtk.org/gio/method.OutputStream.close_finish.html)
    pub fn closeFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_close_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [flush](https://docs.gtk.org/gio/method.OutputStream.flush.html)
    pub fn flush(self: *OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OutputStream, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_flush" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [flush_async](https://docs.gtk.org/gio/method.OutputStream.flush_async.html)
    pub fn flushAsync(self: *OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_flush_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [flush_finish](https://docs.gtk.org/gio/method.OutputStream.flush_finish.html)
    pub fn flushFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_flush_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [has_pending](https://docs.gtk.org/gio/method.OutputStream.has_pending.html)
    pub fn hasPending(self: *OutputStream) bool {
        const cFn = @extern(*const fn (*OutputStream) callconv(.c) bool, .{ .name = "g_output_stream_has_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.OutputStream.is_closed.html)
    pub fn isClosed(self: *OutputStream) bool {
        const cFn = @extern(*const fn (*OutputStream) callconv(.c) bool, .{ .name = "g_output_stream_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closing](https://docs.gtk.org/gio/method.OutputStream.is_closing.html)
    pub fn isClosing(self: *OutputStream) bool {
        const cFn = @extern(*const fn (*OutputStream) callconv(.c) bool, .{ .name = "g_output_stream_is_closing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_pending](https://docs.gtk.org/gio/method.OutputStream.set_pending.html)
    pub fn setPending(self: *OutputStream, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*OutputStream, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_set_pending" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [splice](https://docs.gtk.org/gio/method.OutputStream.splice.html)
    pub fn splice(self: *OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*OutputStream, *gio.InputStream, gio.OutputStreamSpliceFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_splice" });
        const ret = cFn(self, _source, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [splice_async](https://docs.gtk.org/gio/method.OutputStream.splice_async.html)
    pub fn spliceAsync(self: *OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, *gio.InputStream, gio.OutputStreamSpliceFlags, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_splice_async" });
        const ret = cFn(self, _source, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [splice_finish](https://docs.gtk.org/gio/method.OutputStream.splice_finish.html)
    pub fn spliceFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_splice_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [write](https://docs.gtk.org/gio/method.OutputStream.write.html)
    pub fn write(self: *OutputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*OutputStream, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_write" });
        const ret = cFn(self, _buffer, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [write_all](https://docs.gtk.org/gio/method.OutputStream.write_all.html)
    pub fn writeAll(self: *OutputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, [*]u8, u64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_write_all" });
        const ret = cFn(self, _buffer, _count, _bytes_written, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [write_all_async](https://docs.gtk.org/gio/method.OutputStream.write_all_async.html)
    pub fn writeAllAsync(self: *OutputStream, _buffers: []u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, [*]u8, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_write_all_async" });
        const ret = cFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [write_all_finish](https://docs.gtk.org/gio/method.OutputStream.write_all_finish.html)
    pub fn writeAllFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_write_all_finish" });
        const ret = cFn(self, _result, _bytes_written, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [write_async](https://docs.gtk.org/gio/method.OutputStream.write_async.html)
    pub fn writeAsync(self: *OutputStream, _buffers: []u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, [*]u8, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_write_async" });
        const ret = cFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [write_bytes](https://docs.gtk.org/gio/method.OutputStream.write_bytes.html)
    pub fn writeBytes(self: *OutputStream, _bytes: *glib.Bytes, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*OutputStream, *glib.Bytes, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_write_bytes" });
        const ret = cFn(self, _bytes, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [write_bytes_async](https://docs.gtk.org/gio/method.OutputStream.write_bytes_async.html)
    pub fn writeBytesAsync(self: *OutputStream, _bytes: *glib.Bytes, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, *glib.Bytes, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_write_bytes_async" });
        const ret = cFn(self, _bytes, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [write_bytes_finish](https://docs.gtk.org/gio/method.OutputStream.write_bytes_finish.html)
    pub fn writeBytesFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_write_bytes_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [write_finish](https://docs.gtk.org/gio/method.OutputStream.write_finish.html)
    pub fn writeFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, *?*core.Error) callconv(.c) i64, .{ .name = "g_output_stream_write_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [writev](https://docs.gtk.org/gio/method.OutputStream.writev.html)
    pub fn writev(self: *OutputStream, _vectorss: []gio.OutputVector, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        const _vectors = _vectorss.ptr;
        const _n_vectors: u64 = @intCast(_vectorss.len);
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, [*]gio.OutputVector, u64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_writev" });
        const ret = cFn(self, _vectors, _n_vectors, _bytes_written, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [writev_all](https://docs.gtk.org/gio/method.OutputStream.writev_all.html)
    pub fn writevAll(self: *OutputStream, _vectorss: []gio.OutputVector, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        const _vectors = _vectorss.ptr;
        const _n_vectors: u64 = @intCast(_vectorss.len);
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, [*]gio.OutputVector, u64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_writev_all" });
        const ret = cFn(self, _vectors, _n_vectors, _bytes_written, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [writev_all_async](https://docs.gtk.org/gio/method.OutputStream.writev_all_async.html)
    pub fn writevAllAsync(self: *OutputStream, _vectorss: []gio.OutputVector, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _vectors = _vectorss.ptr;
        const _n_vectors: u64 = @intCast(_vectorss.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, [*]gio.OutputVector, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_writev_all_async" });
        const ret = cFn(self, _vectors, _n_vectors, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [writev_all_finish](https://docs.gtk.org/gio/method.OutputStream.writev_all_finish.html)
    pub fn writevAllFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_writev_all_finish" });
        const ret = cFn(self, _result, _bytes_written, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [writev_async](https://docs.gtk.org/gio/method.OutputStream.writev_async.html)
    pub fn writevAsync(self: *OutputStream, _vectorss: []gio.OutputVector, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        const _vectors = _vectorss.ptr;
        const _n_vectors: u64 = @intCast(_vectorss.len);
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*OutputStream, [*]gio.OutputVector, u64, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_output_stream_writev_async" });
        const ret = cFn(self, _vectors, _n_vectors, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [writev_finish](https://docs.gtk.org/gio/method.OutputStream.writev_finish.html)
    pub fn writevFinish(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        bytes_written: u64,
    } {
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*OutputStream, *gio.AsyncResult, ?*u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_output_stream_writev_finish" });
        const ret = cFn(self, _result, _bytes_written, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// vfunc [close_async](https://docs.gtk.org/gio/vfunc.OutputStream.close_async.html)
    pub fn closeAsyncV(self: *OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [close_finish](https://docs.gtk.org/gio/vfunc.OutputStream.close_finish.html)
    pub fn closeFinishV(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [close_fn](https://docs.gtk.org/gio/vfunc.OutputStream.close_fn.html)
    pub fn closeFnV(self: *OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_fn.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [flush](https://docs.gtk.org/gio/vfunc.OutputStream.flush.html)
    pub fn flushV(self: *OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.flush.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [flush_async](https://docs.gtk.org/gio/vfunc.OutputStream.flush_async.html)
    pub fn flushAsyncV(self: *OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.flush_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [flush_finish](https://docs.gtk.org/gio/vfunc.OutputStream.flush_finish.html)
    pub fn flushFinishV(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.flush_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [splice](https://docs.gtk.org/gio/vfunc.OutputStream.splice.html)
    pub fn spliceV(self: *OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i64 {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.splice.?;
        const ret = vFn(self, _source, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [splice_async](https://docs.gtk.org/gio/vfunc.OutputStream.splice_async.html)
    pub fn spliceAsyncV(self: *OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.splice_async.?;
        const ret = vFn(self, _source, _flags, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [splice_finish](https://docs.gtk.org/gio/vfunc.OutputStream.splice_finish.html)
    pub fn spliceFinishV(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) i64 {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.splice_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [write_async](https://docs.gtk.org/gio/vfunc.OutputStream.write_async.html)
    pub fn writeAsyncV(self: *OutputStream, _buffer: ?[*]u8, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_async.?;
        const ret = vFn(self, _buffer, _count, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [write_finish](https://docs.gtk.org/gio/vfunc.OutputStream.write_finish.html)
    pub fn writeFinishV(self: *OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) i64 {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [write_fn](https://docs.gtk.org/gio/vfunc.OutputStream.write_fn.html)
    pub fn writeFnV(self: *OutputStream, _buffer: ?[*]u8, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) i64 {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_fn.?;
        const ret = vFn(self, _buffer, _count, _cancellable, _error);
        return ret;
    }
    /// vfunc [writev_async](https://docs.gtk.org/gio/vfunc.OutputStream.writev_async.html)
    pub fn writevAsyncV(self: *OutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writev_async.?;
        const ret = vFn(self, _vectors, _n_vectors, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [writev_finish](https://docs.gtk.org/gio/vfunc.OutputStream.writev_finish.html)
    pub fn writevFinishV(self: *OutputStream, _result: *gio.AsyncResult, _bytes_written: ?*u64, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writev_finish.?;
        const ret = vFn(self, _result, _bytes_written, _error);
        return ret;
    }
    /// vfunc [writev_fn](https://docs.gtk.org/gio/vfunc.OutputStream.writev_fn.html)
    pub fn writevFnV(self: *OutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _bytes_written: ?*u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *OutputStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writev_fn.?;
        const ret = vFn(self, _vectors, _n_vectors, _bytes_written, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_output_stream_get_type" });
        return cFn();
    }
};
pub const OutputStreamClass = extern struct {
    parent_class: gobject.ObjectClass,
    write_fn: ?*const fn (_stream: *gio.OutputStream, _buffer: ?[*]u8, _count: u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i64,
    splice: ?*const fn (_stream: *gio.OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) i64,
    flush: ?*const fn (_stream: *gio.OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    close_fn: ?*const fn (_stream: *gio.OutputStream, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    write_async: ?*const fn (_stream: *gio.OutputStream, _buffer: ?[*]u8, _count: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    write_finish: ?*const fn (_stream: *gio.OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) i64,
    splice_async: ?*const fn (_stream: *gio.OutputStream, _source: *gio.InputStream, _flags: gio.OutputStreamSpliceFlags, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    splice_finish: ?*const fn (_stream: *gio.OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) i64,
    flush_async: ?*const fn (_stream: *gio.OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    flush_finish: ?*const fn (_stream: *gio.OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    close_async: ?*const fn (_stream: *gio.OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    close_finish: ?*const fn (_stream: *gio.OutputStream, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    writev_fn: ?*const fn (_stream: *gio.OutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _bytes_written: ?*u64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    writev_async: ?*const fn (_stream: *gio.OutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    writev_finish: ?*const fn (_stream: *gio.OutputStream, _result: *gio.AsyncResult, _bytes_written: ?*u64, _error: *?*core.Error) callconv(.c) bool,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
    _g_reserved8: ?*anyopaque,
};
pub const OutputStreamPrivate = opaque {};
/// Flags [OutputStreamSpliceFlags](https://docs.gtk.org/gio/flags.OutputStreamSpliceFlags.html)
pub const OutputStreamSpliceFlags = packed struct(u32) {
    close_source: bool = false,
    close_target: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_output_stream_splice_flags_get_type" });
        return cFn();
    }
};
/// Struct [OutputVector](https://docs.gtk.org/gio/struct.OutputVector.html)
pub const OutputVector = extern struct {
    buffer: ?*anyopaque,
    size: u64,
};
/// const [POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME.html)
pub const POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME = "gio-power-profile-monitor";
/// const [PROXY_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.PROXY_EXTENSION_POINT_NAME.html)
pub const PROXY_EXTENSION_POINT_NAME = "gio-proxy";
/// const [PROXY_RESOLVER_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.PROXY_RESOLVER_EXTENSION_POINT_NAME.html)
pub const PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver";
/// Enum [PasswordSave](https://docs.gtk.org/gio/enum.PasswordSave.html)
pub const PasswordSave = enum(u32) {
    never = 0,
    for_session = 1,
    permanently = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_password_save_get_type" });
        return cFn();
    }
};
/// Class [Permission](https://docs.gtk.org/gio/class.Permission.html)
/// - property [allowed](https://docs.gtk.org/gio/property.Permission.allowed.html): (r-) `bool`
/// - property [can-acquire](https://docs.gtk.org/gio/property.Permission.can-acquire.html): (r-) `bool`
/// - property [can-release](https://docs.gtk.org/gio/property.Permission.can-release.html): (r-) `bool`
pub const Permission = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.PermissionPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.PermissionClass;
    /// method [acquire](https://docs.gtk.org/gio/method.Permission.acquire.html)
    pub fn acquire(self: *Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Permission, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_permission_acquire" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [acquire_async](https://docs.gtk.org/gio/method.Permission.acquire_async.html)
    pub fn acquireAsync(self: *Permission, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Permission, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_permission_acquire_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [acquire_finish](https://docs.gtk.org/gio/method.Permission.acquire_finish.html)
    pub fn acquireFinish(self: *Permission, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Permission, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_permission_acquire_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_allowed](https://docs.gtk.org/gio/method.Permission.get_allowed.html)
    pub fn getAllowed(self: *Permission) bool {
        const cFn = @extern(*const fn (*Permission) callconv(.c) bool, .{ .name = "g_permission_get_allowed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_acquire](https://docs.gtk.org/gio/method.Permission.get_can_acquire.html)
    pub fn getCanAcquire(self: *Permission) bool {
        const cFn = @extern(*const fn (*Permission) callconv(.c) bool, .{ .name = "g_permission_get_can_acquire" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_release](https://docs.gtk.org/gio/method.Permission.get_can_release.html)
    pub fn getCanRelease(self: *Permission) bool {
        const cFn = @extern(*const fn (*Permission) callconv(.c) bool, .{ .name = "g_permission_get_can_release" });
        const ret = cFn(self);
        return ret;
    }
    /// method [impl_update](https://docs.gtk.org/gio/method.Permission.impl_update.html)
    pub fn implUpdate(self: *Permission, _allowed: bool, _can_acquire: bool, _can_release: bool) void {
        const cFn = @extern(*const fn (*Permission, bool, bool, bool) callconv(.c) void, .{ .name = "g_permission_impl_update" });
        const ret = cFn(self, _allowed, _can_acquire, _can_release);
        return ret;
    }
    /// method [release](https://docs.gtk.org/gio/method.Permission.release.html)
    pub fn release(self: *Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Permission, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_permission_release" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [release_async](https://docs.gtk.org/gio/method.Permission.release_async.html)
    pub fn releaseAsync(self: *Permission, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Permission, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_permission_release_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [release_finish](https://docs.gtk.org/gio/method.Permission.release_finish.html)
    pub fn releaseFinish(self: *Permission, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Permission, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_permission_release_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [acquire](https://docs.gtk.org/gio/vfunc.Permission.acquire.html)
    pub fn acquireV(self: *Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.acquire.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [acquire_async](https://docs.gtk.org/gio/vfunc.Permission.acquire_async.html)
    pub fn acquireAsyncV(self: *Permission, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.acquire_async.?;
        const ret = vFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [acquire_finish](https://docs.gtk.org/gio/vfunc.Permission.acquire_finish.html)
    pub fn acquireFinishV(self: *Permission, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.acquire_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [release](https://docs.gtk.org/gio/vfunc.Permission.release.html)
    pub fn releaseV(self: *Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.release.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [release_async](https://docs.gtk.org/gio/vfunc.Permission.release_async.html)
    pub fn releaseAsyncV(self: *Permission, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.release_async.?;
        const ret = vFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [release_finish](https://docs.gtk.org/gio/vfunc.Permission.release_finish.html)
    pub fn releaseFinishV(self: *Permission, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *PermissionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.release_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_permission_get_type" });
        return cFn();
    }
};
pub const PermissionClass = extern struct {
    parent_class: gobject.ObjectClass,
    acquire: ?*const fn (_permission: *gio.Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    acquire_async: ?*const fn (_permission: *gio.Permission, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    acquire_finish: ?*const fn (_permission: *gio.Permission, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    release: ?*const fn (_permission: *gio.Permission, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    release_async: ?*const fn (_permission: *gio.Permission, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    release_finish: ?*const fn (_permission: *gio.Permission, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    reserved: [16]?*anyopaque,
};
pub const PermissionPrivate = opaque {};
/// Iface [PollableInputStream](https://docs.gtk.org/gio/iface.PollableInputStream.html)
pub const PollableInputStream = opaque {
    pub const Prerequisites = [_]type{gio.InputStream};
    /// method [can_poll](https://docs.gtk.org/gio/method.PollableInputStream.can_poll.html)
    pub fn canPoll(self: *PollableInputStream) bool {
        const cFn = @extern(*const fn (*PollableInputStream) callconv(.c) bool, .{ .name = "g_pollable_input_stream_can_poll" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_source](https://docs.gtk.org/gio/method.PollableInputStream.create_source.html)
    pub fn createSource(self: *PollableInputStream, _cancellable: ?*gio.Cancellable) *glib.Source {
        const cFn = @extern(*const fn (*PollableInputStream, ?*gio.Cancellable) callconv(.c) *glib.Source, .{ .name = "g_pollable_input_stream_create_source" });
        const ret = cFn(self, _cancellable);
        return ret;
    }
    /// method [is_readable](https://docs.gtk.org/gio/method.PollableInputStream.is_readable.html)
    pub fn isReadable(self: *PollableInputStream) bool {
        const cFn = @extern(*const fn (*PollableInputStream) callconv(.c) bool, .{ .name = "g_pollable_input_stream_is_readable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_nonblocking](https://docs.gtk.org/gio/method.PollableInputStream.read_nonblocking.html)
    pub fn readNonblocking(self: *PollableInputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*PollableInputStream, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_pollable_input_stream_read_nonblocking" });
        const ret = cFn(self, _buffer, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_poll](https://docs.gtk.org/gio/vfunc.PollableInputStream.can_poll.html)
    pub fn canPollV(self: *PollableInputStream) bool {
        const class: *PollableInputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_poll.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [create_source](https://docs.gtk.org/gio/vfunc.PollableInputStream.create_source.html)
    pub fn createSourceV(self: *PollableInputStream, _cancellable: ?*gio.Cancellable) *glib.Source {
        const class: *PollableInputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_source.?;
        const ret = vFn(self, _cancellable);
        return ret;
    }
    /// vfunc [is_readable](https://docs.gtk.org/gio/vfunc.PollableInputStream.is_readable.html)
    pub fn isReadableV(self: *PollableInputStream) bool {
        const class: *PollableInputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_readable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [read_nonblocking](https://docs.gtk.org/gio/vfunc.PollableInputStream.read_nonblocking.html)
    pub fn readNonblockingV(self: *PollableInputStream, _buffer: ?[*]u8, _count: u64, _error: *?*core.Error) i64 {
        const class: *PollableInputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_nonblocking.?;
        const ret = vFn(self, _buffer, _count, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pollable_input_stream_get_type" });
        return cFn();
    }
};
pub const PollableInputStreamInterface = extern struct {
    g_iface: gobject.TypeInterface,
    can_poll: ?*const fn (_stream: *gio.PollableInputStream) callconv(.c) bool,
    is_readable: ?*const fn (_stream: *gio.PollableInputStream) callconv(.c) bool,
    create_source: ?*const fn (_stream: *gio.PollableInputStream, _cancellable: ?*gio.Cancellable) callconv(.c) *glib.Source,
    read_nonblocking: ?*const fn (_stream: *gio.PollableInputStream, _buffer: ?[*]u8, _count: u64, _error: *?*core.Error) callconv(.c) i64,
};
/// Iface [PollableOutputStream](https://docs.gtk.org/gio/iface.PollableOutputStream.html)
pub const PollableOutputStream = opaque {
    pub const Prerequisites = [_]type{gio.OutputStream};
    /// method [can_poll](https://docs.gtk.org/gio/method.PollableOutputStream.can_poll.html)
    pub fn canPoll(self: *PollableOutputStream) bool {
        const cFn = @extern(*const fn (*PollableOutputStream) callconv(.c) bool, .{ .name = "g_pollable_output_stream_can_poll" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_source](https://docs.gtk.org/gio/method.PollableOutputStream.create_source.html)
    pub fn createSource(self: *PollableOutputStream, _cancellable: ?*gio.Cancellable) *glib.Source {
        const cFn = @extern(*const fn (*PollableOutputStream, ?*gio.Cancellable) callconv(.c) *glib.Source, .{ .name = "g_pollable_output_stream_create_source" });
        const ret = cFn(self, _cancellable);
        return ret;
    }
    /// method [is_writable](https://docs.gtk.org/gio/method.PollableOutputStream.is_writable.html)
    pub fn isWritable(self: *PollableOutputStream) bool {
        const cFn = @extern(*const fn (*PollableOutputStream) callconv(.c) bool, .{ .name = "g_pollable_output_stream_is_writable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [write_nonblocking](https://docs.gtk.org/gio/method.PollableOutputStream.write_nonblocking.html)
    pub fn writeNonblocking(self: *PollableOutputStream, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _count: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*PollableOutputStream, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_pollable_output_stream_write_nonblocking" });
        const ret = cFn(self, _buffer, _count, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [writev_nonblocking](https://docs.gtk.org/gio/method.PollableOutputStream.writev_nonblocking.html)
    pub fn writevNonblocking(self: *PollableOutputStream, _vectorss: []gio.OutputVector, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: gio.PollableReturn,
        bytes_written: u64,
    } {
        const _vectors = _vectorss.ptr;
        const _n_vectors: u64 = @intCast(_vectorss.len);
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*PollableOutputStream, [*]gio.OutputVector, u64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.PollableReturn, .{ .name = "g_pollable_output_stream_writev_nonblocking" });
        const ret = cFn(self, _vectors, _n_vectors, _bytes_written, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// vfunc [can_poll](https://docs.gtk.org/gio/vfunc.PollableOutputStream.can_poll.html)
    pub fn canPollV(self: *PollableOutputStream) bool {
        const class: *PollableOutputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_poll.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [create_source](https://docs.gtk.org/gio/vfunc.PollableOutputStream.create_source.html)
    pub fn createSourceV(self: *PollableOutputStream, _cancellable: ?*gio.Cancellable) *glib.Source {
        const class: *PollableOutputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_source.?;
        const ret = vFn(self, _cancellable);
        return ret;
    }
    /// vfunc [is_writable](https://docs.gtk.org/gio/vfunc.PollableOutputStream.is_writable.html)
    pub fn isWritableV(self: *PollableOutputStream) bool {
        const class: *PollableOutputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_writable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [write_nonblocking](https://docs.gtk.org/gio/vfunc.PollableOutputStream.write_nonblocking.html)
    pub fn writeNonblockingV(self: *PollableOutputStream, _buffer: ?[*]u8, _count: u64, _error: *?*core.Error) i64 {
        const class: *PollableOutputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_nonblocking.?;
        const ret = vFn(self, _buffer, _count, _error);
        return ret;
    }
    /// vfunc [writev_nonblocking](https://docs.gtk.org/gio/vfunc.PollableOutputStream.writev_nonblocking.html)
    pub fn writevNonblockingV(self: *PollableOutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _bytes_written: ?*u64, _error: *?*core.Error) gio.PollableReturn {
        const class: *PollableOutputStreamInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writev_nonblocking.?;
        const ret = vFn(self, _vectors, _n_vectors, _bytes_written, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pollable_output_stream_get_type" });
        return cFn();
    }
};
pub const PollableOutputStreamInterface = extern struct {
    g_iface: gobject.TypeInterface,
    can_poll: ?*const fn (_stream: *gio.PollableOutputStream) callconv(.c) bool,
    is_writable: ?*const fn (_stream: *gio.PollableOutputStream) callconv(.c) bool,
    create_source: ?*const fn (_stream: *gio.PollableOutputStream, _cancellable: ?*gio.Cancellable) callconv(.c) *glib.Source,
    write_nonblocking: ?*const fn (_stream: *gio.PollableOutputStream, _buffer: ?[*]u8, _count: u64, _error: *?*core.Error) callconv(.c) i64,
    writev_nonblocking: ?*const fn (_stream: *gio.PollableOutputStream, _vectors: [*]gio.OutputVector, _n_vectors: u64, _bytes_written: ?*u64, _error: *?*core.Error) callconv(.c) gio.PollableReturn,
};
/// Enum [PollableReturn](https://docs.gtk.org/gio/enum.PollableReturn.html)
pub const PollableReturn = enum(i32) {
    failed = 0,
    ok = 1,
    would_block = -27,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pollable_return_get_type" });
        return cFn();
    }
};
/// callback [PollableSourceFunc](https://docs.gtk.org/gio/callback.PollableSourceFunc.html)
pub const PollableSourceFunc = *const fn (_pollable_stream: *gobject.Object, _data: ?*anyopaque) callconv(.c) bool;
/// Iface [PowerProfileMonitor](https://docs.gtk.org/gio/iface.PowerProfileMonitor.html)
/// - property [power-saver-enabled](https://docs.gtk.org/gio/property.PowerProfileMonitor.power-saver-enabled.html): (r-) `bool`
pub const PowerProfileMonitor = opaque {
    pub const Prerequisites = [_]type{gio.Initable};
    /// type func [dup_default](https://docs.gtk.org/gio/type_func.PowerProfileMonitor.dup_default.html)
    pub fn dupDefault() *gio.PowerProfileMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.PowerProfileMonitor, .{ .name = "g_power_profile_monitor_dup_default" });
        const ret = cFn();
        return ret;
    }
    /// method [get_power_saver_enabled](https://docs.gtk.org/gio/method.PowerProfileMonitor.get_power_saver_enabled.html)
    pub fn getPowerSaverEnabled(self: *PowerProfileMonitor) bool {
        const cFn = @extern(*const fn (*PowerProfileMonitor) callconv(.c) bool, .{ .name = "g_power_profile_monitor_get_power_saver_enabled" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_power_profile_monitor_get_type" });
        return cFn();
    }
};
pub const PowerProfileMonitorInterface = extern struct {
    g_iface: gobject.TypeInterface,
};
/// Class [PropertyAction](https://docs.gtk.org/gio/class.PropertyAction.html)
/// - property [enabled](https://docs.gtk.org/gio/property.PropertyAction.enabled.html): (r-) `bool`
/// - property [invert-boolean](https://docs.gtk.org/gio/property.PropertyAction.invert-boolean.html): (r-) `bool`
/// - property [name](https://docs.gtk.org/gio/property.PropertyAction.name.html): (r-) `[*:0]const u8`
/// - property [object](https://docs.gtk.org/gio/property.PropertyAction.object.html): (--) `gobject.Object`
/// - property [parameter-type](https://docs.gtk.org/gio/property.PropertyAction.parameter-type.html): (r-) `glib.VariantType`
/// - property [property-name](https://docs.gtk.org/gio/property.PropertyAction.property-name.html): (--) `[*:0]const u8`
/// - property [state](https://docs.gtk.org/gio/property.PropertyAction.state.html): (r-) `glib.Variant`
/// - property [state-type](https://docs.gtk.org/gio/property.PropertyAction.state-type.html): (r-) `glib.VariantType`
pub const PropertyAction = opaque {
    pub const Interfaces = [_]type{gio.Action};
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.PropertyAction.new.html)
    pub fn new(_name: [*:0]const u8, _object: *gobject.Object, _property_name: [*:0]const u8) *PropertyAction {
        const cFn = @extern(*const fn ([*:0]const u8, *gobject.Object, [*:0]const u8) callconv(.c) *PropertyAction, .{ .name = "g_property_action_new" });
        const ret = cFn(_name, _object, _property_name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_property_action_get_type" });
        return cFn();
    }
};
/// Iface [Proxy](https://docs.gtk.org/gio/iface.Proxy.html)
pub const Proxy = opaque {
    /// type func [get_default_for_protocol](https://docs.gtk.org/gio/type_func.Proxy.get_default_for_protocol.html)
    pub fn getDefaultForProtocol(_protocol: [*:0]const u8) ?*gio.Proxy {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gio.Proxy, .{ .name = "g_proxy_get_default_for_protocol" });
        const ret = cFn(_protocol);
        return ret;
    }
    /// method [connect](https://docs.gtk.org/gio/method.Proxy.connect.html)
    pub fn connect(self: *Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.IOStream {
        const cFn = @extern(*const fn (*Proxy, *gio.IOStream, *gio.ProxyAddress, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.IOStream, .{ .name = "g_proxy_connect" });
        const ret = cFn(self, _connection, _proxy_address, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_async](https://docs.gtk.org/gio/method.Proxy.connect_async.html)
    pub fn connectAsync(self: *Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Proxy, *gio.IOStream, *gio.ProxyAddress, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_proxy_connect_async" });
        const ret = cFn(self, _connection, _proxy_address, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_finish](https://docs.gtk.org/gio/method.Proxy.connect_finish.html)
    pub fn connectFinish(self: *Proxy, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.IOStream {
        const cFn = @extern(*const fn (*Proxy, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.IOStream, .{ .name = "g_proxy_connect_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [supports_hostname](https://docs.gtk.org/gio/method.Proxy.supports_hostname.html)
    pub fn supportsHostname(self: *Proxy) bool {
        const cFn = @extern(*const fn (*Proxy) callconv(.c) bool, .{ .name = "g_proxy_supports_hostname" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [connect](https://docs.gtk.org/gio/vfunc.Proxy.connect.html)
    pub fn connectV(self: *Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.IOStream {
        const class: *ProxyInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.connect.?;
        const ret = vFn(self, _connection, _proxy_address, _cancellable, _error);
        return ret;
    }
    /// vfunc [connect_async](https://docs.gtk.org/gio/vfunc.Proxy.connect_async.html)
    pub fn connectAsyncV(self: *Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ProxyInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.connect_async.?;
        const ret = vFn(self, _connection, _proxy_address, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [connect_finish](https://docs.gtk.org/gio/vfunc.Proxy.connect_finish.html)
    pub fn connectFinishV(self: *Proxy, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.IOStream {
        const class: *ProxyInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.connect_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [supports_hostname](https://docs.gtk.org/gio/vfunc.Proxy.supports_hostname.html)
    pub fn supportsHostnameV(self: *Proxy) bool {
        const class: *ProxyInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.supports_hostname.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_proxy_get_type" });
        return cFn();
    }
};
/// Class [ProxyAddress](https://docs.gtk.org/gio/class.ProxyAddress.html)
/// - property [destination-hostname](https://docs.gtk.org/gio/property.ProxyAddress.destination-hostname.html): (r-) `[*:0]const u8`
/// - property [destination-port](https://docs.gtk.org/gio/property.ProxyAddress.destination-port.html): (r-) `u32`
/// - property [destination-protocol](https://docs.gtk.org/gio/property.ProxyAddress.destination-protocol.html): (r-) `[*:0]const u8`
/// - property [password](https://docs.gtk.org/gio/property.ProxyAddress.password.html): (r-) `[*:0]const u8`
/// - property [protocol](https://docs.gtk.org/gio/property.ProxyAddress.protocol.html): (r-) `[*:0]const u8`
/// - property [uri](https://docs.gtk.org/gio/property.ProxyAddress.uri.html): (r-) `[*:0]const u8`
/// - property [username](https://docs.gtk.org/gio/property.ProxyAddress.username.html): (r-) `[*:0]const u8`
pub const ProxyAddress = extern struct {
    parent_instance: gio.InetSocketAddress,
    priv: ?*gio.ProxyAddressPrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gio.InetSocketAddress;
    pub const Class = gio.ProxyAddressClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ProxyAddress.new.html)
    pub fn new(_inetaddr: *gio.InetAddress, _port: u16, _protocol: [*:0]const u8, _dest_hostname: [*:0]const u8, _dest_port: u16, _username: ?[*:0]const u8, _password: ?[*:0]const u8) *ProxyAddress {
        const cFn = @extern(*const fn (*gio.InetAddress, u16, [*:0]const u8, [*:0]const u8, u16, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *ProxyAddress, .{ .name = "g_proxy_address_new" });
        const ret = cFn(_inetaddr, _port, _protocol, _dest_hostname, _dest_port, _username, _password);
        return ret;
    }
    /// method [get_destination_hostname](https://docs.gtk.org/gio/method.ProxyAddress.get_destination_hostname.html)
    pub fn getDestinationHostname(self: *ProxyAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) [*:0]u8, .{ .name = "g_proxy_address_get_destination_hostname" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_destination_port](https://docs.gtk.org/gio/method.ProxyAddress.get_destination_port.html)
    pub fn getDestinationPort(self: *ProxyAddress) u16 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) u16, .{ .name = "g_proxy_address_get_destination_port" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_destination_protocol](https://docs.gtk.org/gio/method.ProxyAddress.get_destination_protocol.html)
    pub fn getDestinationProtocol(self: *ProxyAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) [*:0]u8, .{ .name = "g_proxy_address_get_destination_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_password](https://docs.gtk.org/gio/method.ProxyAddress.get_password.html)
    pub fn getPassword(self: *ProxyAddress) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) ?[*:0]u8, .{ .name = "g_proxy_address_get_password" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_protocol](https://docs.gtk.org/gio/method.ProxyAddress.get_protocol.html)
    pub fn getProtocol(self: *ProxyAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) [*:0]u8, .{ .name = "g_proxy_address_get_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uri](https://docs.gtk.org/gio/method.ProxyAddress.get_uri.html)
    pub fn getUri(self: *ProxyAddress) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) ?[*:0]u8, .{ .name = "g_proxy_address_get_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_username](https://docs.gtk.org/gio/method.ProxyAddress.get_username.html)
    pub fn getUsername(self: *ProxyAddress) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ProxyAddress) callconv(.c) ?[*:0]u8, .{ .name = "g_proxy_address_get_username" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_proxy_address_get_type" });
        return cFn();
    }
};
pub const ProxyAddressClass = extern struct {
    parent_class: gio.InetSocketAddressClass,
};
/// Class [ProxyAddressEnumerator](https://docs.gtk.org/gio/class.ProxyAddressEnumerator.html)
/// - property [connectable](https://docs.gtk.org/gio/property.ProxyAddressEnumerator.connectable.html): (r-) `gio.SocketConnectable`
/// - property [default-port](https://docs.gtk.org/gio/property.ProxyAddressEnumerator.default-port.html): (r-) `u32`
/// - property [proxy-resolver](https://docs.gtk.org/gio/property.ProxyAddressEnumerator.proxy-resolver.html): (rw) `gio.ProxyResolver`
/// - property [uri](https://docs.gtk.org/gio/property.ProxyAddressEnumerator.uri.html): (r-) `[*:0]const u8`
pub const ProxyAddressEnumerator = extern struct {
    parent_instance: gio.SocketAddressEnumerator,
    priv: ?*gio.ProxyAddressEnumeratorPrivate,
    pub const Parent = gio.SocketAddressEnumerator;
    pub const Class = gio.ProxyAddressEnumeratorClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_proxy_address_enumerator_get_type" });
        return cFn();
    }
};
pub const ProxyAddressEnumeratorClass = extern struct {
    parent_class: gio.SocketAddressEnumeratorClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
};
pub const ProxyAddressEnumeratorPrivate = opaque {};
pub const ProxyAddressPrivate = opaque {};
pub const ProxyInterface = extern struct {
    g_iface: gobject.TypeInterface,
    connect: ?*const fn (_proxy: *gio.Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.IOStream,
    connect_async: ?*const fn (_proxy: *gio.Proxy, _connection: *gio.IOStream, _proxy_address: *gio.ProxyAddress, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    connect_finish: ?*const fn (_proxy: *gio.Proxy, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.IOStream,
    supports_hostname: ?*const fn (_proxy: *gio.Proxy) callconv(.c) bool,
};
/// Iface [ProxyResolver](https://docs.gtk.org/gio/iface.ProxyResolver.html)
pub const ProxyResolver = opaque {
    /// type func [get_default](https://docs.gtk.org/gio/type_func.ProxyResolver.get_default.html)
    pub fn getDefault() *gio.ProxyResolver {
        const cFn = @extern(*const fn () callconv(.c) *gio.ProxyResolver, .{ .name = "g_proxy_resolver_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [is_supported](https://docs.gtk.org/gio/method.ProxyResolver.is_supported.html)
    pub fn isSupported(self: *ProxyResolver) bool {
        const cFn = @extern(*const fn (*ProxyResolver) callconv(.c) bool, .{ .name = "g_proxy_resolver_is_supported" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/gio/method.ProxyResolver.lookup.html)
    pub fn lookup(self: *ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*ProxyResolver, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_proxy_resolver_lookup" });
        const ret = cFn(self, _uri, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_async](https://docs.gtk.org/gio/method.ProxyResolver.lookup_async.html)
    pub fn lookupAsync(self: *ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*ProxyResolver, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_proxy_resolver_lookup_async" });
        const ret = cFn(self, _uri, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_finish](https://docs.gtk.org/gio/method.ProxyResolver.lookup_finish.html)
    pub fn lookupFinish(self: *ProxyResolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*ProxyResolver, *gio.AsyncResult, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_proxy_resolver_lookup_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [is_supported](https://docs.gtk.org/gio/vfunc.ProxyResolver.is_supported.html)
    pub fn isSupportedV(self: *ProxyResolver) bool {
        const class: *ProxyResolverInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_supported.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [lookup](https://docs.gtk.org/gio/vfunc.ProxyResolver.lookup.html)
    pub fn lookupV(self: *ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) [*:null]?[*:0]const u8 {
        const class: *ProxyResolverInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup.?;
        const ret = vFn(self, _uri, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_async](https://docs.gtk.org/gio/vfunc.ProxyResolver.lookup_async.html)
    pub fn lookupAsyncV(self: *ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ProxyResolverInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_async.?;
        const ret = vFn(self, _uri, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_finish](https://docs.gtk.org/gio/vfunc.ProxyResolver.lookup_finish.html)
    pub fn lookupFinishV(self: *ProxyResolver, _result: *gio.AsyncResult, _error: *?*core.Error) [*:null]?[*:0]const u8 {
        const class: *ProxyResolverInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_proxy_resolver_get_type" });
        return cFn();
    }
};
pub const ProxyResolverInterface = extern struct {
    g_iface: gobject.TypeInterface,
    is_supported: ?*const fn (_resolver: *gio.ProxyResolver) callconv(.c) bool,
    lookup: ?*const fn (_resolver: *gio.ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) [*:null]?[*:0]const u8,
    lookup_async: ?*const fn (_resolver: *gio.ProxyResolver, _uri: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_finish: ?*const fn (_resolver: *gio.ProxyResolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) [*:null]?[*:0]const u8,
};
/// callback [ReallocFunc](https://docs.gtk.org/gio/callback.ReallocFunc.html)
pub const ReallocFunc = *const fn (_data: ?*anyopaque, _size: u64) callconv(.c) ?*anyopaque;
/// Iface [RemoteActionGroup](https://docs.gtk.org/gio/iface.RemoteActionGroup.html)
pub const RemoteActionGroup = opaque {
    pub const Prerequisites = [_]type{gio.ActionGroup};
    /// method [activate_action_full](https://docs.gtk.org/gio/method.RemoteActionGroup.activate_action_full.html)
    pub fn activateActionFull(self: *RemoteActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant, _platform_data: *glib.Variant) void {
        const cFn = @extern(*const fn (*RemoteActionGroup, [*:0]const u8, ?*glib.Variant, *glib.Variant) callconv(.c) void, .{ .name = "g_remote_action_group_activate_action_full" });
        const ret = cFn(self, _action_name, _parameter, _platform_data);
        return ret;
    }
    /// method [change_action_state_full](https://docs.gtk.org/gio/method.RemoteActionGroup.change_action_state_full.html)
    pub fn changeActionStateFull(self: *RemoteActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant, _platform_data: *glib.Variant) void {
        const cFn = @extern(*const fn (*RemoteActionGroup, [*:0]const u8, *glib.Variant, *glib.Variant) callconv(.c) void, .{ .name = "g_remote_action_group_change_action_state_full" });
        const ret = cFn(self, _action_name, _value, _platform_data);
        return ret;
    }
    /// vfunc [activate_action_full](https://docs.gtk.org/gio/vfunc.RemoteActionGroup.activate_action_full.html)
    pub fn activateActionFullV(self: *RemoteActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant, _platform_data: *glib.Variant) void {
        const class: *RemoteActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_action_full.?;
        const ret = vFn(self, _action_name, _parameter, _platform_data);
        return ret;
    }
    /// vfunc [change_action_state_full](https://docs.gtk.org/gio/vfunc.RemoteActionGroup.change_action_state_full.html)
    pub fn changeActionStateFullV(self: *RemoteActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant, _platform_data: *glib.Variant) void {
        const class: *RemoteActionGroupInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.change_action_state_full.?;
        const ret = vFn(self, _action_name, _value, _platform_data);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_remote_action_group_get_type" });
        return cFn();
    }
};
pub const RemoteActionGroupInterface = extern struct {
    g_iface: gobject.TypeInterface,
    activate_action_full: ?*const fn (_remote: *gio.RemoteActionGroup, _action_name: [*:0]const u8, _parameter: ?*glib.Variant, _platform_data: *glib.Variant) callconv(.c) void,
    change_action_state_full: ?*const fn (_remote: *gio.RemoteActionGroup, _action_name: [*:0]const u8, _value: *glib.Variant, _platform_data: *glib.Variant) callconv(.c) void,
};
/// Class [Resolver](https://docs.gtk.org/gio/class.Resolver.html)
/// - property [timeout](https://docs.gtk.org/gio/property.Resolver.timeout.html): (rw) `u32`
pub const Resolver = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.ResolverPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.ResolverClass;
    /// type func [get_default](https://docs.gtk.org/gio/type_func.Resolver.get_default.html)
    pub fn getDefault() *gio.Resolver {
        const cFn = @extern(*const fn () callconv(.c) *gio.Resolver, .{ .name = "g_resolver_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [get_timeout](https://docs.gtk.org/gio/method.Resolver.get_timeout.html)
    pub fn getTimeout(self: *Resolver) u32 {
        const cFn = @extern(*const fn (*Resolver) callconv(.c) u32, .{ .name = "g_resolver_get_timeout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lookup_by_address](https://docs.gtk.org/gio/method.Resolver.lookup_by_address.html)
    pub fn lookupByAddress(self: *Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*Resolver, *gio.InetAddress, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_resolver_lookup_by_address" });
        const ret = cFn(self, _address, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_by_address_async](https://docs.gtk.org/gio/method.Resolver.lookup_by_address_async.html)
    pub fn lookupByAddressAsync(self: *Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Resolver, *gio.InetAddress, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_resolver_lookup_by_address_async" });
        const ret = cFn(self, _address, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_by_address_finish](https://docs.gtk.org/gio/method.Resolver.lookup_by_address_finish.html)
    pub fn lookupByAddressFinish(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}![*:0]u8 {
        const cFn = @extern(*const fn (*Resolver, *gio.AsyncResult, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_resolver_lookup_by_address_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_by_name](https://docs.gtk.org/gio/method.Resolver.lookup_by_name.html)
    pub fn lookupByName(self: *Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_by_name" });
        const ret = cFn(self, _hostname, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_by_name_async](https://docs.gtk.org/gio/method.Resolver.lookup_by_name_async.html)
    pub fn lookupByNameAsync(self: *Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_resolver_lookup_by_name_async" });
        const ret = cFn(self, _hostname, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_by_name_finish](https://docs.gtk.org/gio/method.Resolver.lookup_by_name_finish.html)
    pub fn lookupByNameFinish(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_by_name_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_by_name_with_flags](https://docs.gtk.org/gio/method.Resolver.lookup_by_name_with_flags.html)
    pub fn lookupByNameWithFlags(self: *Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, gio.ResolverNameLookupFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_by_name_with_flags" });
        const ret = cFn(self, _hostname, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_by_name_with_flags_async](https://docs.gtk.org/gio/method.Resolver.lookup_by_name_with_flags_async.html)
    pub fn lookupByNameWithFlagsAsync(self: *Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, gio.ResolverNameLookupFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_resolver_lookup_by_name_with_flags_async" });
        const ret = cFn(self, _hostname, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_by_name_with_flags_finish](https://docs.gtk.org/gio/method.Resolver.lookup_by_name_with_flags_finish.html)
    pub fn lookupByNameWithFlagsFinish(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_by_name_with_flags_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_records](https://docs.gtk.org/gio/method.Resolver.lookup_records.html)
    pub fn lookupRecords(self: *Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, gio.ResolverRecordType, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_records" });
        const ret = cFn(self, _rrname, _record_type, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_records_async](https://docs.gtk.org/gio/method.Resolver.lookup_records_async.html)
    pub fn lookupRecordsAsync(self: *Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, gio.ResolverRecordType, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_resolver_lookup_records_async" });
        const ret = cFn(self, _rrname, _record_type, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_records_finish](https://docs.gtk.org/gio/method.Resolver.lookup_records_finish.html)
    pub fn lookupRecordsFinish(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_records_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_service](https://docs.gtk.org/gio/method.Resolver.lookup_service.html)
    pub fn lookupService(self: *Resolver, _service: [*:0]const u8, _protocol: [*:0]const u8, _domain: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_service" });
        const ret = cFn(self, _service, _protocol, _domain, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_service_async](https://docs.gtk.org/gio/method.Resolver.lookup_service_async.html)
    pub fn lookupServiceAsync(self: *Resolver, _service: [*:0]const u8, _protocol: [*:0]const u8, _domain: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Resolver, [*:0]const u8, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_resolver_lookup_service_async" });
        const ret = cFn(self, _service, _protocol, _domain, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_service_finish](https://docs.gtk.org/gio/method.Resolver.lookup_service_finish.html)
    pub fn lookupServiceFinish(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*Resolver, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_resolver_lookup_service_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_default](https://docs.gtk.org/gio/method.Resolver.set_default.html)
    pub fn setDefault(self: *Resolver) void {
        const cFn = @extern(*const fn (*Resolver) callconv(.c) void, .{ .name = "g_resolver_set_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_timeout](https://docs.gtk.org/gio/method.Resolver.set_timeout.html)
    pub fn setTimeout(self: *Resolver, _timeout_ms: u32) void {
        const cFn = @extern(*const fn (*Resolver, u32) callconv(.c) void, .{ .name = "g_resolver_set_timeout" });
        const ret = cFn(self, _timeout_ms);
        return ret;
    }
    /// vfunc [lookup_by_address](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_address.html)
    pub fn lookupByAddressV(self: *Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) [*:0]u8 {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_address.?;
        const ret = vFn(self, _address, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_by_address_async](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_address_async.html)
    pub fn lookupByAddressAsyncV(self: *Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_address_async.?;
        const ret = vFn(self, _address, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_by_address_finish](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_address_finish.html)
    pub fn lookupByAddressFinishV(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) [*:0]u8 {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_address_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_by_name](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name.html)
    pub fn lookupByNameV(self: *Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name.?;
        const ret = vFn(self, _hostname, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_by_name_async](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name_async.html)
    pub fn lookupByNameAsyncV(self: *Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name_async.?;
        const ret = vFn(self, _hostname, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_by_name_finish](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name_finish.html)
    pub fn lookupByNameFinishV(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_by_name_with_flags](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name_with_flags.html)
    pub fn lookupByNameWithFlagsV(self: *Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name_with_flags.?;
        const ret = vFn(self, _hostname, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_by_name_with_flags_async](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name_with_flags_async.html)
    pub fn lookupByNameWithFlagsAsyncV(self: *Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name_with_flags_async.?;
        const ret = vFn(self, _hostname, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_by_name_with_flags_finish](https://docs.gtk.org/gio/vfunc.Resolver.lookup_by_name_with_flags_finish.html)
    pub fn lookupByNameWithFlagsFinishV(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_by_name_with_flags_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_records](https://docs.gtk.org/gio/vfunc.Resolver.lookup_records.html)
    pub fn lookupRecordsV(self: *Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_records.?;
        const ret = vFn(self, _rrname, _record_type, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_records_async](https://docs.gtk.org/gio/vfunc.Resolver.lookup_records_async.html)
    pub fn lookupRecordsAsyncV(self: *Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_records_async.?;
        const ret = vFn(self, _rrname, _record_type, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_records_finish](https://docs.gtk.org/gio/vfunc.Resolver.lookup_records_finish.html)
    pub fn lookupRecordsFinishV(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_records_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_service_async](https://docs.gtk.org/gio/vfunc.Resolver.lookup_service_async.html)
    pub fn lookupServiceAsyncV(self: *Resolver, _rrname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_service_async.?;
        const ret = vFn(self, _rrname, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_service_finish](https://docs.gtk.org/gio/vfunc.Resolver.lookup_service_finish.html)
    pub fn lookupServiceFinishV(self: *Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_service_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [reload](https://docs.gtk.org/gio/vfunc.Resolver.reload.html)
    pub fn reloadV(self: *Resolver) void {
        const class: *ResolverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reload.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [reload](https://docs.gtk.org/gio/signal.Resolver.reload.html)
    pub fn connectReload(self: *Resolver, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("reload", handler, args, flags, &.{ void, *Resolver });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resolver_get_type" });
        return cFn();
    }
};
pub const ResolverClass = extern struct {
    parent_class: gobject.ObjectClass,
    reload: ?*const fn (_resolver: *gio.Resolver) callconv(.c) void,
    lookup_by_name: ?*const fn (_resolver: *gio.Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_by_name_async: ?*const fn (_resolver: *gio.Resolver, _hostname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_by_name_finish: ?*const fn (_resolver: *gio.Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_by_address: ?*const fn (_resolver: *gio.Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) [*:0]u8,
    lookup_by_address_async: ?*const fn (_resolver: *gio.Resolver, _address: *gio.InetAddress, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_by_address_finish: ?*const fn (_resolver: *gio.Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) [*:0]u8,
    lookup_service: ?*anyopaque,
    lookup_service_async: ?*const fn (_resolver: *gio.Resolver, _rrname: [*:0]const u8, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_service_finish: ?*const fn (_resolver: *gio.Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_records: ?*const fn (_resolver: *gio.Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_records_async: ?*const fn (_resolver: *gio.Resolver, _rrname: [*:0]const u8, _record_type: gio.ResolverRecordType, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_records_finish: ?*const fn (_resolver: *gio.Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_by_name_with_flags_async: ?*const fn (_resolver: *gio.Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_by_name_with_flags_finish: ?*const fn (_resolver: *gio.Resolver, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_by_name_with_flags: ?*const fn (_resolver: *gio.Resolver, _hostname: [*:0]const u8, _flags: gio.ResolverNameLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*core.List,
};
/// Error [ResolverError](https://docs.gtk.org/gio/error.ResolverError.html)
pub const ResolverError = enum(u32) {
    not_found = 0,
    temporary_failure = 1,
    internal = 2,

    /// type func [quark](https://docs.gtk.org/gio/type_func.ResolverError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_resolver_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resolver_error_get_type" });
        return cFn();
    }
};
/// Flags [ResolverNameLookupFlags](https://docs.gtk.org/gio/flags.ResolverNameLookupFlags.html)
pub const ResolverNameLookupFlags = packed struct(u32) {
    ipv4_only: bool = false,
    ipv6_only: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resolver_name_lookup_flags_get_type" });
        return cFn();
    }
};
pub const ResolverPrivate = opaque {};
/// Enum [ResolverRecordType](https://docs.gtk.org/gio/enum.ResolverRecordType.html)
pub const ResolverRecordType = enum(u32) {
    srv = 1,
    mx = 2,
    txt = 3,
    soa = 4,
    ns = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resolver_record_type_get_type" });
        return cFn();
    }
};
/// Struct [Resource](https://docs.gtk.org/gio/struct.Resource.html)
pub const Resource = opaque {
    /// ctor [new_from_data](https://docs.gtk.org/gio/ctor.Resource.new_from_data.html)
    pub fn newFromData(_data: *glib.Bytes, _error: *?*core.Error) error{GError}!*Resource {
        const cFn = @extern(*const fn (*glib.Bytes, *?*core.Error) callconv(.c) *Resource, .{ .name = "g_resource_new_from_data" });
        const ret = cFn(_data, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [_register](https://docs.gtk.org/gio/method.Resource._register.html)
    pub fn Register(self: *Resource) void {
        const cFn = @extern(*const fn (*Resource) callconv(.c) void, .{ .name = "g_resources_register" });
        const ret = cFn(self);
        return ret;
    }
    /// method [_unregister](https://docs.gtk.org/gio/method.Resource._unregister.html)
    pub fn Unregister(self: *Resource) void {
        const cFn = @extern(*const fn (*Resource) callconv(.c) void, .{ .name = "g_resources_unregister" });
        const ret = cFn(self);
        return ret;
    }
    /// method [enumerate_children](https://docs.gtk.org/gio/method.Resource.enumerate_children.html)
    pub fn enumerateChildren(self: *Resource, _path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Resource, [*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_resource_enumerate_children" });
        const ret = cFn(self, _path, _lookup_flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_info](https://docs.gtk.org/gio/method.Resource.get_info.html)
    pub fn getInfo(self: *Resource, _path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!?struct {
        size: u64,
        flags: u32,
    } {
        var size_out: u64 = undefined;
        const _size = &size_out;
        var flags_out: u32 = undefined;
        const _flags = &flags_out;
        const cFn = @extern(*const fn (*Resource, [*:0]const u8, gio.ResourceLookupFlags, ?*u64, ?*u32, *?*core.Error) callconv(.c) bool, .{ .name = "g_resource_get_info" });
        const ret = cFn(self, _path, _lookup_flags, _size, _flags, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return .{ .size = size_out, .flags = flags_out };
    }
    /// method [lookup_data](https://docs.gtk.org/gio/method.Resource.lookup_data.html)
    pub fn lookupData(self: *Resource, _path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!*glib.Bytes {
        const cFn = @extern(*const fn (*Resource, [*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_resource_lookup_data" });
        const ret = cFn(self, _path, _lookup_flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [open_stream](https://docs.gtk.org/gio/method.Resource.open_stream.html)
    pub fn openStream(self: *Resource, _path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!*gio.InputStream {
        const cFn = @extern(*const fn (*Resource, [*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) *gio.InputStream, .{ .name = "g_resource_open_stream" });
        const ret = cFn(self, _path, _lookup_flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.Resource.ref.html)
    pub fn ref(self: *Resource) *gio.Resource {
        const cFn = @extern(*const fn (*Resource) callconv(.c) *gio.Resource, .{ .name = "g_resource_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.Resource.unref.html)
    pub fn unref(self: *Resource) void {
        const cFn = @extern(*const fn (*Resource) callconv(.c) void, .{ .name = "g_resource_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [load](https://docs.gtk.org/gio/type_func.Resource.load.html)
    pub fn load(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.Resource {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.Resource, .{ .name = "g_resource_load" });
        const ret = cFn(_filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resource_get_type" });
        return cFn();
    }
};
/// Error [ResourceError](https://docs.gtk.org/gio/error.ResourceError.html)
pub const ResourceError = enum(u32) {
    not_found = 0,
    internal = 1,

    /// type func [quark](https://docs.gtk.org/gio/type_func.ResourceError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_resource_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resource_error_get_type" });
        return cFn();
    }
};
/// Flags [ResourceFlags](https://docs.gtk.org/gio/flags.ResourceFlags.html)
pub const ResourceFlags = packed struct(u32) {
    compressed: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resource_flags_get_type" });
        return cFn();
    }
};
/// Flags [ResourceLookupFlags](https://docs.gtk.org/gio/flags.ResourceLookupFlags.html)
pub const ResourceLookupFlags = packed struct(u32) {
    _: u32 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_resource_lookup_flags_get_type" });
        return cFn();
    }
};
/// const [SETTINGS_BACKEND_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.SETTINGS_BACKEND_EXTENSION_POINT_NAME.html)
pub const SETTINGS_BACKEND_EXTENSION_POINT_NAME = "gsettings-backend";
/// Iface [Seekable](https://docs.gtk.org/gio/iface.Seekable.html)
pub const Seekable = opaque {
    /// method [can_seek](https://docs.gtk.org/gio/method.Seekable.can_seek.html)
    pub fn canSeek(self: *Seekable) bool {
        const cFn = @extern(*const fn (*Seekable) callconv(.c) bool, .{ .name = "g_seekable_can_seek" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_truncate](https://docs.gtk.org/gio/method.Seekable.can_truncate.html)
    pub fn canTruncate(self: *Seekable) bool {
        const cFn = @extern(*const fn (*Seekable) callconv(.c) bool, .{ .name = "g_seekable_can_truncate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [seek](https://docs.gtk.org/gio/method.Seekable.seek.html)
    pub fn seek(self: *Seekable, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Seekable, i64, glib.SeekType, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_seekable_seek" });
        const ret = cFn(self, _offset, _type, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [tell](https://docs.gtk.org/gio/method.Seekable.tell.html)
    pub fn tell(self: *Seekable) i64 {
        const cFn = @extern(*const fn (*Seekable) callconv(.c) i64, .{ .name = "g_seekable_tell" });
        const ret = cFn(self);
        return ret;
    }
    /// method [truncate](https://docs.gtk.org/gio/method.Seekable.truncate.html)
    pub fn truncate(self: *Seekable, _offset: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Seekable, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_seekable_truncate" });
        const ret = cFn(self, _offset, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [can_seek](https://docs.gtk.org/gio/vfunc.Seekable.can_seek.html)
    pub fn canSeekV(self: *Seekable) bool {
        const class: *SeekableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_seek.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_truncate](https://docs.gtk.org/gio/vfunc.Seekable.can_truncate.html)
    pub fn canTruncateV(self: *Seekable) bool {
        const class: *SeekableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_truncate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [seek](https://docs.gtk.org/gio/vfunc.Seekable.seek.html)
    pub fn seekV(self: *Seekable, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *SeekableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.seek.?;
        const ret = vFn(self, _offset, _type, _cancellable, _error);
        return ret;
    }
    /// vfunc [tell](https://docs.gtk.org/gio/vfunc.Seekable.tell.html)
    pub fn tellV(self: *Seekable) i64 {
        const class: *SeekableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.tell.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [truncate_fn](https://docs.gtk.org/gio/vfunc.Seekable.truncate_fn.html)
    pub fn truncateFnV(self: *Seekable, _offset: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *SeekableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.truncate_fn.?;
        const ret = vFn(self, _offset, _cancellable, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_seekable_get_type" });
        return cFn();
    }
};
/// Struct [SeekableIface](https://docs.gtk.org/gio/struct.SeekableIface.html)
pub const SeekableIface = extern struct {
    g_iface: gobject.TypeInterface,
    tell: ?*const fn (_seekable: *gio.Seekable) callconv(.c) i64,
    can_seek: ?*const fn (_seekable: *gio.Seekable) callconv(.c) bool,
    seek: ?*const fn (_seekable: *gio.Seekable, _offset: i64, _type: glib.SeekType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    can_truncate: ?*const fn (_seekable: *gio.Seekable) callconv(.c) bool,
    truncate_fn: ?*const fn (_seekable: *gio.Seekable, _offset: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
};
/// Class [Settings](https://docs.gtk.org/gio/class.Settings.html)
/// - property [backend](https://docs.gtk.org/gio/property.Settings.backend.html): (r-) `gio.SettingsBackend`
/// - property [delay-apply](https://docs.gtk.org/gio/property.Settings.delay-apply.html): (r-) `bool`
/// - property [has-unapplied](https://docs.gtk.org/gio/property.Settings.has-unapplied.html): (r-) `bool`
/// - property [path](https://docs.gtk.org/gio/property.Settings.path.html): (r-) `[*:0]const u8`
/// - property [schema](https://docs.gtk.org/gio/property.Settings.schema.html): (r-) `[*:0]const u8`
/// - property [schema-id](https://docs.gtk.org/gio/property.Settings.schema-id.html): (r-) `[*:0]const u8`
/// - property [settings-schema](https://docs.gtk.org/gio/property.Settings.settings-schema.html): (r-) `gio.SettingsSchema`
pub const Settings = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SettingsPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.SettingsClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Settings.new.html)
    pub fn new(_schema_id: [*:0]const u8) *Settings {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Settings, .{ .name = "g_settings_new" });
        const ret = cFn(_schema_id);
        return ret;
    }
    /// ctor [new_full](https://docs.gtk.org/gio/ctor.Settings.new_full.html)
    pub fn newFull(_schema: *gio.SettingsSchema, _backend: ?*gio.SettingsBackend, _path: ?[*:0]const u8) *Settings {
        const cFn = @extern(*const fn (*gio.SettingsSchema, ?*gio.SettingsBackend, ?[*:0]const u8) callconv(.c) *Settings, .{ .name = "g_settings_new_full" });
        const ret = cFn(_schema, _backend, _path);
        return ret;
    }
    /// ctor [new_with_backend](https://docs.gtk.org/gio/ctor.Settings.new_with_backend.html)
    pub fn newWithBackend(_schema_id: [*:0]const u8, _backend: *gio.SettingsBackend) *Settings {
        const cFn = @extern(*const fn ([*:0]const u8, *gio.SettingsBackend) callconv(.c) *Settings, .{ .name = "g_settings_new_with_backend" });
        const ret = cFn(_schema_id, _backend);
        return ret;
    }
    /// ctor [new_with_backend_and_path](https://docs.gtk.org/gio/ctor.Settings.new_with_backend_and_path.html)
    pub fn newWithBackendAndPath(_schema_id: [*:0]const u8, _backend: *gio.SettingsBackend, _path: [*:0]const u8) *Settings {
        const cFn = @extern(*const fn ([*:0]const u8, *gio.SettingsBackend, [*:0]const u8) callconv(.c) *Settings, .{ .name = "g_settings_new_with_backend_and_path" });
        const ret = cFn(_schema_id, _backend, _path);
        return ret;
    }
    /// ctor [new_with_path](https://docs.gtk.org/gio/ctor.Settings.new_with_path.html)
    pub fn newWithPath(_schema_id: [*:0]const u8, _path: [*:0]const u8) *Settings {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) *Settings, .{ .name = "g_settings_new_with_path" });
        const ret = cFn(_schema_id, _path);
        return ret;
    }
    /// Deprecated:
    /// type func [list_relocatable_schemas](https://docs.gtk.org/gio/type_func.Settings.list_relocatable_schemas.html)
    pub const listRelocatableSchemas = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn listRelocatableSchemas() [*:null]?[*:0]const u8 {
            const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_list_relocatable_schemas" });
            const ret = cFn();
            return ret;
        }
    }.listRelocatableSchemas;
    /// Deprecated:
    /// type func [list_schemas](https://docs.gtk.org/gio/type_func.Settings.list_schemas.html)
    pub const listSchemas = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn listSchemas() [*:null]?[*:0]const u8 {
            const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_list_schemas" });
            const ret = cFn();
            return ret;
        }
    }.listSchemas;
    /// type func [sync](https://docs.gtk.org/gio/type_func.Settings.sync.html)
    pub fn sync() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_settings_sync" });
        const ret = cFn();
        return ret;
    }
    /// type func [unbind](https://docs.gtk.org/gio/type_func.Settings.unbind.html)
    pub fn unbind(_object: *gobject.Object, _property: [*:0]const u8) void {
        const cFn = @extern(*const fn (*gobject.Object, [*:0]const u8) callconv(.c) void, .{ .name = "g_settings_unbind" });
        const ret = cFn(_object, _property);
        return ret;
    }
    /// method [apply](https://docs.gtk.org/gio/method.Settings.apply.html)
    pub fn apply(self: *Settings) void {
        const cFn = @extern(*const fn (*Settings) callconv(.c) void, .{ .name = "g_settings_apply" });
        const ret = cFn(self);
        return ret;
    }
    /// method [bind](https://docs.gtk.org/gio/method.Settings.bind.html)
    pub fn bind(self: *Settings, _key: [*:0]const u8, _object: *gobject.Object, _property: [*:0]const u8, _flags: gio.SettingsBindFlags) void {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, *gobject.Object, [*:0]const u8, gio.SettingsBindFlags) callconv(.c) void, .{ .name = "g_settings_bind" });
        const ret = cFn(self, _key, _object, _property, _flags);
        return ret;
    }
    /// method [bind_writable](https://docs.gtk.org/gio/method.Settings.bind_writable.html)
    pub fn bindWritable(self: *Settings, _key: [*:0]const u8, _object: *gobject.Object, _property: [*:0]const u8, _inverted: bool) void {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, *gobject.Object, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_settings_bind_writable" });
        const ret = cFn(self, _key, _object, _property, _inverted);
        return ret;
    }
    /// method [create_action](https://docs.gtk.org/gio/method.Settings.create_action.html)
    pub fn createAction(self: *Settings, _key: [*:0]const u8) *gio.Action {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) *gio.Action, .{ .name = "g_settings_create_action" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [delay](https://docs.gtk.org/gio/method.Settings.delay.html)
    pub fn delay(self: *Settings) void {
        const cFn = @extern(*const fn (*Settings) callconv(.c) void, .{ .name = "g_settings_delay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_boolean](https://docs.gtk.org/gio/method.Settings.get_boolean.html)
    pub fn getBoolean(self: *Settings, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) bool, .{ .name = "g_settings_get_boolean" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gio/method.Settings.get_child.html)
    pub fn getChild(self: *Settings, _name: [*:0]const u8) *gio.Settings {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) *gio.Settings, .{ .name = "g_settings_get_child" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_default_value](https://docs.gtk.org/gio/method.Settings.get_default_value.html)
    pub fn getDefaultValue(self: *Settings, _key: [*:0]const u8) ?*glib.Variant {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) ?*glib.Variant, .{ .name = "g_settings_get_default_value" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_double](https://docs.gtk.org/gio/method.Settings.get_double.html)
    pub fn getDouble(self: *Settings, _key: [*:0]const u8) f64 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) f64, .{ .name = "g_settings_get_double" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_enum](https://docs.gtk.org/gio/method.Settings.get_enum.html)
    pub fn getEnum(self: *Settings, _key: [*:0]const u8) i32 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) i32, .{ .name = "g_settings_get_enum" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.Settings.get_flags.html)
    pub fn getFlags(self: *Settings, _key: [*:0]const u8) u32 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) u32, .{ .name = "g_settings_get_flags" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_has_unapplied](https://docs.gtk.org/gio/method.Settings.get_has_unapplied.html)
    pub fn getHasUnapplied(self: *Settings) bool {
        const cFn = @extern(*const fn (*Settings) callconv(.c) bool, .{ .name = "g_settings_get_has_unapplied" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int](https://docs.gtk.org/gio/method.Settings.get_int.html)
    pub fn getInt(self: *Settings, _key: [*:0]const u8) i32 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) i32, .{ .name = "g_settings_get_int" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_int64](https://docs.gtk.org/gio/method.Settings.get_int64.html)
    pub fn getInt64(self: *Settings, _key: [*:0]const u8) i64 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) i64, .{ .name = "g_settings_get_int64" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_mapped](https://docs.gtk.org/gio/method.Settings.get_mapped.html)
    pub fn getMapped(self: *Settings, _key: [*:0]const u8, mapping: anytype, mapping_args: anytype) ?*anyopaque {
        var closure_mapping = core.zig_closure(mapping, mapping_args, &.{ bool, *glib.Variant, *anyopaque });
        defer closure_mapping.deinit();
        const _mapping: gio.SettingsGetMapping = @ptrCast(closure_mapping.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_mapping.c_data());
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, gio.SettingsGetMapping, ?*anyopaque) callconv(.c) ?*anyopaque, .{ .name = "g_settings_get_mapped" });
        const ret = cFn(self, _key, _mapping, @ptrCast(_user_data));
        return ret;
    }
    /// Deprecated:
    /// method [get_range](https://docs.gtk.org/gio/method.Settings.get_range.html)
    pub const getRange = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRange(self: *Settings, _key: [*:0]const u8) *glib.Variant {
            const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) *glib.Variant, .{ .name = "g_settings_get_range" });
            const ret = cFn(self, _key);
            return ret;
        }
    }.getRange;
    /// method [get_string](https://docs.gtk.org/gio/method.Settings.get_string.html)
    pub fn getString(self: *Settings, _key: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_settings_get_string" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_strv](https://docs.gtk.org/gio/method.Settings.get_strv.html)
    pub fn getStrv(self: *Settings, _key: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_get_strv" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_uint](https://docs.gtk.org/gio/method.Settings.get_uint.html)
    pub fn getUint(self: *Settings, _key: [*:0]const u8) u32 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) u32, .{ .name = "g_settings_get_uint" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_uint64](https://docs.gtk.org/gio/method.Settings.get_uint64.html)
    pub fn getUint64(self: *Settings, _key: [*:0]const u8) u64 {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) u64, .{ .name = "g_settings_get_uint64" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_user_value](https://docs.gtk.org/gio/method.Settings.get_user_value.html)
    pub fn getUserValue(self: *Settings, _key: [*:0]const u8) ?*glib.Variant {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) ?*glib.Variant, .{ .name = "g_settings_get_user_value" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gio/method.Settings.get_value.html)
    pub fn getValue(self: *Settings, _key: [*:0]const u8) *glib.Variant {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) *glib.Variant, .{ .name = "g_settings_get_value" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [is_writable](https://docs.gtk.org/gio/method.Settings.is_writable.html)
    pub fn isWritable(self: *Settings, _name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) bool, .{ .name = "g_settings_is_writable" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [list_children](https://docs.gtk.org/gio/method.Settings.list_children.html)
    pub fn listChildren(self: *Settings) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Settings) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_list_children" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [list_keys](https://docs.gtk.org/gio/method.Settings.list_keys.html)
    pub const listKeys = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn listKeys(self: *Settings) [*:null]?[*:0]const u8 {
            const cFn = @extern(*const fn (*Settings) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_list_keys" });
            const ret = cFn(self);
            return ret;
        }
    }.listKeys;
    /// Deprecated:
    /// method [range_check](https://docs.gtk.org/gio/method.Settings.range_check.html)
    pub const rangeCheck = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rangeCheck(self: *Settings, _key: [*:0]const u8, _value: *glib.Variant) bool {
            const cFn = @extern(*const fn (*Settings, [*:0]const u8, *glib.Variant) callconv(.c) bool, .{ .name = "g_settings_range_check" });
            const ret = cFn(self, _key, _value);
            return ret;
        }
    }.rangeCheck;
    /// method [reset](https://docs.gtk.org/gio/method.Settings.reset.html)
    pub fn reset(self: *Settings, _key: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) void, .{ .name = "g_settings_reset" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [revert](https://docs.gtk.org/gio/method.Settings.revert.html)
    pub fn revert(self: *Settings) void {
        const cFn = @extern(*const fn (*Settings) callconv(.c) void, .{ .name = "g_settings_revert" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_boolean](https://docs.gtk.org/gio/method.Settings.set_boolean.html)
    pub fn setBoolean(self: *Settings, _key: [*:0]const u8, _value: bool) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, bool) callconv(.c) bool, .{ .name = "g_settings_set_boolean" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_double](https://docs.gtk.org/gio/method.Settings.set_double.html)
    pub fn setDouble(self: *Settings, _key: [*:0]const u8, _value: f64) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, f64) callconv(.c) bool, .{ .name = "g_settings_set_double" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_enum](https://docs.gtk.org/gio/method.Settings.set_enum.html)
    pub fn setEnum(self: *Settings, _key: [*:0]const u8, _value: i32) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, i32) callconv(.c) bool, .{ .name = "g_settings_set_enum" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.Settings.set_flags.html)
    pub fn setFlags(self: *Settings, _key: [*:0]const u8, _value: u32) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, u32) callconv(.c) bool, .{ .name = "g_settings_set_flags" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_int](https://docs.gtk.org/gio/method.Settings.set_int.html)
    pub fn setInt(self: *Settings, _key: [*:0]const u8, _value: i32) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, i32) callconv(.c) bool, .{ .name = "g_settings_set_int" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_int64](https://docs.gtk.org/gio/method.Settings.set_int64.html)
    pub fn setInt64(self: *Settings, _key: [*:0]const u8, _value: i64) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, i64) callconv(.c) bool, .{ .name = "g_settings_set_int64" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_string](https://docs.gtk.org/gio/method.Settings.set_string.html)
    pub fn setString(self: *Settings, _key: [*:0]const u8, _value: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_settings_set_string" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_strv](https://docs.gtk.org/gio/method.Settings.set_strv.html)
    pub fn setStrv(self: *Settings, _key: [*:0]const u8, _value: ?[*:null]?[*:0]const u8) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, ?[*:null]?[*:0]const u8) callconv(.c) bool, .{ .name = "g_settings_set_strv" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_uint](https://docs.gtk.org/gio/method.Settings.set_uint.html)
    pub fn setUint(self: *Settings, _key: [*:0]const u8, _value: u32) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, u32) callconv(.c) bool, .{ .name = "g_settings_set_uint" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_uint64](https://docs.gtk.org/gio/method.Settings.set_uint64.html)
    pub fn setUint64(self: *Settings, _key: [*:0]const u8, _value: u64) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, u64) callconv(.c) bool, .{ .name = "g_settings_set_uint64" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gio/method.Settings.set_value.html)
    pub fn setValue(self: *Settings, _key: [*:0]const u8, _value: *glib.Variant) bool {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8, *glib.Variant) callconv(.c) bool, .{ .name = "g_settings_set_value" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// vfunc [change_event](https://docs.gtk.org/gio/vfunc.Settings.change_event.html)
    pub fn changeEventV(self: *Settings, _keys: *u32, _n_keys: i32) bool {
        const class: *SettingsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.change_event.?;
        const ret = vFn(self, _keys, _n_keys);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.Settings.changed.html)
    pub fn changedV(self: *Settings, _key: [*:0]const u8) void {
        const class: *SettingsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self, _key);
        return ret;
    }
    /// vfunc [writable_change_event](https://docs.gtk.org/gio/vfunc.Settings.writable_change_event.html)
    pub fn writableChangeEventV(self: *Settings, _key: u32) bool {
        const class: *SettingsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writable_change_event.?;
        const ret = vFn(self, _key);
        return ret;
    }
    /// vfunc [writable_changed](https://docs.gtk.org/gio/vfunc.Settings.writable_changed.html)
    pub fn writableChangedV(self: *Settings, _key: [*:0]const u8) void {
        const class: *SettingsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.writable_changed.?;
        const ret = vFn(self, _key);
        return ret;
    }
    /// signal [change-event](https://docs.gtk.org/gio/signal.Settings.change-event.html)
    pub fn connectChangeEvent(self: *Settings, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-event", handler, args, flags, &.{ bool, *Settings, ?[*]u32, i32 });
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.Settings.changed.html)
    pub fn connectChanged(self: *Settings, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Settings, [*:0]const u8 });
    }
    /// signal [writable-change-event](https://docs.gtk.org/gio/signal.Settings.writable-change-event.html)
    pub fn connectWritableChangeEvent(self: *Settings, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("writable-change-event", handler, args, flags, &.{ bool, *Settings, u32 });
    }
    /// signal [writable-changed](https://docs.gtk.org/gio/signal.Settings.writable-changed.html)
    pub fn connectWritableChanged(self: *Settings, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("writable-changed", handler, args, flags, &.{ void, *Settings, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_get_type" });
        return cFn();
    }
};
/// Class [SettingsBackend](https://docs.gtk.org/gio/class.SettingsBackend.html)
pub const SettingsBackend = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SettingsBackendPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.SettingsBackendClass;
    /// type func [flatten_tree](https://docs.gtk.org/gio/type_func.SettingsBackend.flatten_tree.html)
    pub fn flattenTree(_tree: *glib.Tree) struct {
        ret: void,
        path: [*:0]u8,
        keys: [*:null]?[*:0]const u8,
        values: [*:null]?*glib.Variant,
    } {
        var path_out: [*:0]u8 = undefined;
        const _path = &path_out;
        var keys_out: [*:null]?[*:0]const u8 = undefined;
        const _keys = &keys_out;
        var values_out: [*:null]?*glib.Variant = undefined;
        const _values = &values_out;
        const cFn = @extern(*const fn (*glib.Tree, *[*:0]u8, *[*:null]?[*:0]const u8, ?*[*:null]?*glib.Variant) callconv(.c) void, .{ .name = "g_settings_backend_flatten_tree" });
        const ret = cFn(_tree, _path, _keys, _values);
        return .{ .ret = ret, .path = path_out, .keys = keys_out, .values = values_out };
    }
    /// type func [get_default](https://docs.gtk.org/gio/type_func.SettingsBackend.get_default.html)
    pub fn getDefault() *gio.SettingsBackend {
        const cFn = @extern(*const fn () callconv(.c) *gio.SettingsBackend, .{ .name = "g_settings_backend_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [changed](https://docs.gtk.org/gio/method.SettingsBackend.changed.html)
    pub fn changed(self: *SettingsBackend, _key: [*:0]const u8, _origin_tag: ?*anyopaque) void {
        const cFn = @extern(*const fn (*SettingsBackend, [*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_settings_backend_changed" });
        const ret = cFn(self, _key, @ptrCast(_origin_tag));
        return ret;
    }
    /// method [changed_tree](https://docs.gtk.org/gio/method.SettingsBackend.changed_tree.html)
    pub fn changedTree(self: *SettingsBackend, _tree: *glib.Tree, _origin_tag: ?*anyopaque) void {
        const cFn = @extern(*const fn (*SettingsBackend, *glib.Tree, ?*anyopaque) callconv(.c) void, .{ .name = "g_settings_backend_changed_tree" });
        const ret = cFn(self, _tree, @ptrCast(_origin_tag));
        return ret;
    }
    /// method [keys_changed](https://docs.gtk.org/gio/method.SettingsBackend.keys_changed.html)
    pub fn keysChanged(self: *SettingsBackend, _path: [*:0]const u8, _items: [*:null]?[*:0]const u8, _origin_tag: ?*anyopaque) void {
        const cFn = @extern(*const fn (*SettingsBackend, [*:0]const u8, [*:null]?[*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_settings_backend_keys_changed" });
        const ret = cFn(self, _path, _items, @ptrCast(_origin_tag));
        return ret;
    }
    /// method [path_changed](https://docs.gtk.org/gio/method.SettingsBackend.path_changed.html)
    pub fn pathChanged(self: *SettingsBackend, _path: [*:0]const u8, _origin_tag: ?*anyopaque) void {
        const cFn = @extern(*const fn (*SettingsBackend, [*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_settings_backend_path_changed" });
        const ret = cFn(self, _path, @ptrCast(_origin_tag));
        return ret;
    }
    /// method [path_writable_changed](https://docs.gtk.org/gio/method.SettingsBackend.path_writable_changed.html)
    pub fn pathWritableChanged(self: *SettingsBackend, _path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SettingsBackend, [*:0]const u8) callconv(.c) void, .{ .name = "g_settings_backend_path_writable_changed" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [writable_changed](https://docs.gtk.org/gio/method.SettingsBackend.writable_changed.html)
    pub fn writableChanged(self: *SettingsBackend, _key: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SettingsBackend, [*:0]const u8) callconv(.c) void, .{ .name = "g_settings_backend_writable_changed" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// vfunc [get_writable](https://docs.gtk.org/gio/vfunc.SettingsBackend.get_writable.html)
    pub fn getWritableV(self: *SettingsBackend, _key: [*:0]const u8) bool {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_writable.?;
        const ret = vFn(self, _key);
        return ret;
    }
    /// vfunc [read](https://docs.gtk.org/gio/vfunc.SettingsBackend.read.html)
    pub fn readV(self: *SettingsBackend, _key: [*:0]const u8, _expected_type: *glib.VariantType, _default_value: bool) *glib.Variant {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read.?;
        const ret = vFn(self, _key, _expected_type, _default_value);
        return ret;
    }
    /// vfunc [read_user_value](https://docs.gtk.org/gio/vfunc.SettingsBackend.read_user_value.html)
    pub fn readUserValueV(self: *SettingsBackend, _key: [*:0]const u8, _expected_type: *glib.VariantType) *glib.Variant {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.read_user_value.?;
        const ret = vFn(self, _key, _expected_type);
        return ret;
    }
    /// vfunc [reset](https://docs.gtk.org/gio/vfunc.SettingsBackend.reset.html)
    pub fn resetV(self: *SettingsBackend, _key: [*:0]const u8, _origin_tag: ?*anyopaque) void {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reset.?;
        const ret = vFn(self, _key, @ptrCast(_origin_tag));
        return ret;
    }
    /// vfunc [subscribe](https://docs.gtk.org/gio/vfunc.SettingsBackend.subscribe.html)
    pub fn subscribeV(self: *SettingsBackend, _name: [*:0]const u8) void {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.subscribe.?;
        const ret = vFn(self, _name);
        return ret;
    }
    /// vfunc [sync](https://docs.gtk.org/gio/vfunc.SettingsBackend.sync.html)
    pub fn syncV(self: *SettingsBackend) void {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.sync.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unsubscribe](https://docs.gtk.org/gio/vfunc.SettingsBackend.unsubscribe.html)
    pub fn unsubscribeV(self: *SettingsBackend, _name: [*:0]const u8) void {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unsubscribe.?;
        const ret = vFn(self, _name);
        return ret;
    }
    /// vfunc [write](https://docs.gtk.org/gio/vfunc.SettingsBackend.write.html)
    pub fn writeV(self: *SettingsBackend, _key: [*:0]const u8, _value: *glib.Variant, _origin_tag: ?*anyopaque) bool {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write.?;
        const ret = vFn(self, _key, _value, @ptrCast(_origin_tag));
        return ret;
    }
    /// vfunc [write_tree](https://docs.gtk.org/gio/vfunc.SettingsBackend.write_tree.html)
    pub fn writeTreeV(self: *SettingsBackend, _tree: *glib.Tree, _origin_tag: ?*anyopaque) bool {
        const class: *SettingsBackendClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_tree.?;
        const ret = vFn(self, _tree, @ptrCast(_origin_tag));
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_backend_get_type" });
        return cFn();
    }
};
pub const SettingsBackendClass = extern struct {
    parent_class: gobject.ObjectClass,
    read: ?*const fn (_backend: *gio.SettingsBackend, _key: [*:0]const u8, _expected_type: *glib.VariantType, _default_value: bool) callconv(.c) *glib.Variant,
    get_writable: ?*const fn (_backend: *gio.SettingsBackend, _key: [*:0]const u8) callconv(.c) bool,
    write: ?*const fn (_backend: *gio.SettingsBackend, _key: [*:0]const u8, _value: *glib.Variant, _origin_tag: ?*anyopaque) callconv(.c) bool,
    write_tree: ?*const fn (_backend: *gio.SettingsBackend, _tree: *glib.Tree, _origin_tag: ?*anyopaque) callconv(.c) bool,
    reset: ?*const fn (_backend: *gio.SettingsBackend, _key: [*:0]const u8, _origin_tag: ?*anyopaque) callconv(.c) void,
    subscribe: ?*const fn (_backend: *gio.SettingsBackend, _name: [*:0]const u8) callconv(.c) void,
    unsubscribe: ?*const fn (_backend: *gio.SettingsBackend, _name: [*:0]const u8) callconv(.c) void,
    sync: ?*const fn (_backend: *gio.SettingsBackend) callconv(.c) void,
    get_permission: ?*anyopaque,
    read_user_value: ?*const fn (_backend: *gio.SettingsBackend, _key: [*:0]const u8, _expected_type: *glib.VariantType) callconv(.c) *glib.Variant,
    padding: [23]?*anyopaque,
};
pub const SettingsBackendPrivate = opaque {};
/// Flags [SettingsBindFlags](https://docs.gtk.org/gio/flags.SettingsBindFlags.html)
pub const SettingsBindFlags = packed struct(u32) {
    get: bool = false,
    set: bool = false,
    no_sensitivity: bool = false,
    get_no_changes: bool = false,
    invert_boolean: bool = false,
    _: u27 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_bind_flags_get_type" });
        return cFn();
    }
};
/// callback [SettingsBindGetMapping](https://docs.gtk.org/gio/callback.SettingsBindGetMapping.html)
pub const SettingsBindGetMapping = *const fn (_value: *gobject.Value, _variant: *glib.Variant, _user_data: ?*anyopaque) callconv(.c) bool;
/// callback [SettingsBindSetMapping](https://docs.gtk.org/gio/callback.SettingsBindSetMapping.html)
pub const SettingsBindSetMapping = *const fn (_value: *gobject.Value, _expected_type: *glib.VariantType, _user_data: ?*anyopaque) callconv(.c) *glib.Variant;
pub const SettingsClass = extern struct {
    parent_class: gobject.ObjectClass,
    writable_changed: ?*const fn (_settings: *gio.Settings, _key: [*:0]const u8) callconv(.c) void,
    changed: ?*const fn (_settings: *gio.Settings, _key: [*:0]const u8) callconv(.c) void,
    writable_change_event: ?*const fn (_settings: *gio.Settings, _key: u32) callconv(.c) bool,
    change_event: ?*const fn (_settings: *gio.Settings, _keys: *u32, _n_keys: i32) callconv(.c) bool,
    padding: [20]?*anyopaque,
};
/// callback [SettingsGetMapping](https://docs.gtk.org/gio/callback.SettingsGetMapping.html)
pub const SettingsGetMapping = *const fn (_value: *glib.Variant, _result: *anyopaque, _user_data: ?*anyopaque) callconv(.c) bool;
pub const SettingsPrivate = opaque {};
/// Struct [SettingsSchema](https://docs.gtk.org/gio/struct.SettingsSchema.html)
pub const SettingsSchema = opaque {
    /// method [get_id](https://docs.gtk.org/gio/method.SettingsSchema.get_id.html)
    pub fn getId(self: *SettingsSchema) [*:0]u8 {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) [*:0]u8, .{ .name = "g_settings_schema_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_key](https://docs.gtk.org/gio/method.SettingsSchema.get_key.html)
    pub fn getKey(self: *SettingsSchema, _name: [*:0]const u8) *gio.SettingsSchemaKey {
        const cFn = @extern(*const fn (*SettingsSchema, [*:0]const u8) callconv(.c) *gio.SettingsSchemaKey, .{ .name = "g_settings_schema_get_key" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_path](https://docs.gtk.org/gio/method.SettingsSchema.get_path.html)
    pub fn getPath(self: *SettingsSchema) ?[*:0]u8 {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) ?[*:0]u8, .{ .name = "g_settings_schema_get_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_key](https://docs.gtk.org/gio/method.SettingsSchema.has_key.html)
    pub fn hasKey(self: *SettingsSchema, _name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*SettingsSchema, [*:0]const u8) callconv(.c) bool, .{ .name = "g_settings_schema_has_key" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [list_children](https://docs.gtk.org/gio/method.SettingsSchema.list_children.html)
    pub fn listChildren(self: *SettingsSchema) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_schema_list_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_keys](https://docs.gtk.org/gio/method.SettingsSchema.list_keys.html)
    pub fn listKeys(self: *SettingsSchema) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_settings_schema_list_keys" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.SettingsSchema.ref.html)
    pub fn ref(self: *SettingsSchema) *gio.SettingsSchema {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) *gio.SettingsSchema, .{ .name = "g_settings_schema_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.SettingsSchema.unref.html)
    pub fn unref(self: *SettingsSchema) void {
        const cFn = @extern(*const fn (*SettingsSchema) callconv(.c) void, .{ .name = "g_settings_schema_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_schema_get_type" });
        return cFn();
    }
};
/// Struct [SettingsSchemaKey](https://docs.gtk.org/gio/struct.SettingsSchemaKey.html)
pub const SettingsSchemaKey = opaque {
    /// method [get_default_value](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_default_value.html)
    pub fn getDefaultValue(self: *SettingsSchemaKey) *glib.Variant {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) *glib.Variant, .{ .name = "g_settings_schema_key_get_default_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_description.html)
    pub fn getDescription(self: *SettingsSchemaKey) ?[*:0]u8 {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) ?[*:0]u8, .{ .name = "g_settings_schema_key_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_name.html)
    pub fn getName(self: *SettingsSchemaKey) [*:0]u8 {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) [*:0]u8, .{ .name = "g_settings_schema_key_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_range](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_range.html)
    pub fn getRange(self: *SettingsSchemaKey) *glib.Variant {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) *glib.Variant, .{ .name = "g_settings_schema_key_get_range" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_summary](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_summary.html)
    pub fn getSummary(self: *SettingsSchemaKey) ?[*:0]u8 {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) ?[*:0]u8, .{ .name = "g_settings_schema_key_get_summary" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value_type](https://docs.gtk.org/gio/method.SettingsSchemaKey.get_value_type.html)
    pub fn getValueType(self: *SettingsSchemaKey) *glib.VariantType {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) *glib.VariantType, .{ .name = "g_settings_schema_key_get_value_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [range_check](https://docs.gtk.org/gio/method.SettingsSchemaKey.range_check.html)
    pub fn rangeCheck(self: *SettingsSchemaKey, _value: *glib.Variant) bool {
        const cFn = @extern(*const fn (*SettingsSchemaKey, *glib.Variant) callconv(.c) bool, .{ .name = "g_settings_schema_key_range_check" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.SettingsSchemaKey.ref.html)
    pub fn ref(self: *SettingsSchemaKey) *gio.SettingsSchemaKey {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) *gio.SettingsSchemaKey, .{ .name = "g_settings_schema_key_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.SettingsSchemaKey.unref.html)
    pub fn unref(self: *SettingsSchemaKey) void {
        const cFn = @extern(*const fn (*SettingsSchemaKey) callconv(.c) void, .{ .name = "g_settings_schema_key_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_schema_key_get_type" });
        return cFn();
    }
};
/// Struct [SettingsSchemaSource](https://docs.gtk.org/gio/struct.SettingsSchemaSource.html)
pub const SettingsSchemaSource = opaque {
    /// ctor [new_from_directory](https://docs.gtk.org/gio/ctor.SettingsSchemaSource.new_from_directory.html)
    pub fn newFromDirectory(_directory: [*:0]const u8, _parent: ?*gio.SettingsSchemaSource, _trusted: bool, _error: *?*core.Error) error{GError}!*SettingsSchemaSource {
        const cFn = @extern(*const fn ([*:0]const u8, ?*gio.SettingsSchemaSource, bool, *?*core.Error) callconv(.c) *SettingsSchemaSource, .{ .name = "g_settings_schema_source_new_from_directory" });
        const ret = cFn(_directory, _parent, _trusted, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [list_schemas](https://docs.gtk.org/gio/method.SettingsSchemaSource.list_schemas.html)
    pub fn listSchemas(self: *SettingsSchemaSource, _recursive: bool) struct {
        ret: void,
        non_relocatable: [*:null]?[*:0]const u8,
        relocatable: [*:null]?[*:0]const u8,
    } {
        var non_relocatable_out: [*:null]?[*:0]const u8 = undefined;
        const _non_relocatable = &non_relocatable_out;
        var relocatable_out: [*:null]?[*:0]const u8 = undefined;
        const _relocatable = &relocatable_out;
        const cFn = @extern(*const fn (*SettingsSchemaSource, bool, *[*:null]?[*:0]const u8, *[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_settings_schema_source_list_schemas" });
        const ret = cFn(self, _recursive, _non_relocatable, _relocatable);
        return .{ .ret = ret, .non_relocatable = non_relocatable_out, .relocatable = relocatable_out };
    }
    /// method [lookup](https://docs.gtk.org/gio/method.SettingsSchemaSource.lookup.html)
    pub fn lookup(self: *SettingsSchemaSource, _schema_id: [*:0]const u8, _recursive: bool) ?*gio.SettingsSchema {
        const cFn = @extern(*const fn (*SettingsSchemaSource, [*:0]const u8, bool) callconv(.c) ?*gio.SettingsSchema, .{ .name = "g_settings_schema_source_lookup" });
        const ret = cFn(self, _schema_id, _recursive);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gio/method.SettingsSchemaSource.ref.html)
    pub fn ref(self: *SettingsSchemaSource) *gio.SettingsSchemaSource {
        const cFn = @extern(*const fn (*SettingsSchemaSource) callconv(.c) *gio.SettingsSchemaSource, .{ .name = "g_settings_schema_source_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gio/method.SettingsSchemaSource.unref.html)
    pub fn unref(self: *SettingsSchemaSource) void {
        const cFn = @extern(*const fn (*SettingsSchemaSource) callconv(.c) void, .{ .name = "g_settings_schema_source_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [get_default](https://docs.gtk.org/gio/type_func.SettingsSchemaSource.get_default.html)
    pub fn getDefault() ?*gio.SettingsSchemaSource {
        const cFn = @extern(*const fn () callconv(.c) ?*gio.SettingsSchemaSource, .{ .name = "g_settings_schema_source_get_default" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_settings_schema_source_get_type" });
        return cFn();
    }
};
/// Class [SimpleAction](https://docs.gtk.org/gio/class.SimpleAction.html)
/// - property [enabled](https://docs.gtk.org/gio/property.SimpleAction.enabled.html): (rw) `bool`
/// - property [name](https://docs.gtk.org/gio/property.SimpleAction.name.html): (r-) `[*:0]const u8`
/// - property [parameter-type](https://docs.gtk.org/gio/property.SimpleAction.parameter-type.html): (r-) `glib.VariantType`
/// - property [state](https://docs.gtk.org/gio/property.SimpleAction.state.html): (rw) `glib.Variant`
/// - property [state-type](https://docs.gtk.org/gio/property.SimpleAction.state-type.html): (r-) `glib.VariantType`
pub const SimpleAction = opaque {
    pub const Interfaces = [_]type{gio.Action};
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SimpleAction.new.html)
    pub fn new(_name: [*:0]const u8, _parameter_type: ?*glib.VariantType) *SimpleAction {
        const cFn = @extern(*const fn ([*:0]const u8, ?*glib.VariantType) callconv(.c) *SimpleAction, .{ .name = "g_simple_action_new" });
        const ret = cFn(_name, _parameter_type);
        return ret;
    }
    /// ctor [new_stateful](https://docs.gtk.org/gio/ctor.SimpleAction.new_stateful.html)
    pub fn newStateful(_name: [*:0]const u8, _parameter_type: ?*glib.VariantType, _state: *glib.Variant) *SimpleAction {
        const cFn = @extern(*const fn ([*:0]const u8, ?*glib.VariantType, *glib.Variant) callconv(.c) *SimpleAction, .{ .name = "g_simple_action_new_stateful" });
        const ret = cFn(_name, _parameter_type, _state);
        return ret;
    }
    /// method [set_enabled](https://docs.gtk.org/gio/method.SimpleAction.set_enabled.html)
    pub fn setEnabled(self: *SimpleAction, _enabled: bool) void {
        const cFn = @extern(*const fn (*SimpleAction, bool) callconv(.c) void, .{ .name = "g_simple_action_set_enabled" });
        const ret = cFn(self, _enabled);
        return ret;
    }
    /// method [set_state](https://docs.gtk.org/gio/method.SimpleAction.set_state.html)
    pub fn setState(self: *SimpleAction, _value: *glib.Variant) void {
        const cFn = @extern(*const fn (*SimpleAction, *glib.Variant) callconv(.c) void, .{ .name = "g_simple_action_set_state" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_state_hint](https://docs.gtk.org/gio/method.SimpleAction.set_state_hint.html)
    pub fn setStateHint(self: *SimpleAction, _state_hint: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*SimpleAction, ?*glib.Variant) callconv(.c) void, .{ .name = "g_simple_action_set_state_hint" });
        const ret = cFn(self, _state_hint);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gio/signal.SimpleAction.activate.html)
    pub fn connectActivate(self: *SimpleAction, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *SimpleAction, *glib.Variant });
    }
    /// signal [change-state](https://docs.gtk.org/gio/signal.SimpleAction.change-state.html)
    pub fn connectChangeState(self: *SimpleAction, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-state", handler, args, flags, &.{ void, *SimpleAction, *glib.Variant });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_action_get_type" });
        return cFn();
    }
};
/// Class [SimpleActionGroup](https://docs.gtk.org/gio/class.SimpleActionGroup.html)
pub const SimpleActionGroup = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SimpleActionGroupPrivate,
    pub const Interfaces = [_]type{ gio.ActionGroup, gio.ActionMap };
    pub const Parent = gobject.Object;
    pub const Class = gio.SimpleActionGroupClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SimpleActionGroup.new.html)
    pub fn new() *SimpleActionGroup {
        const cFn = @extern(*const fn () callconv(.c) *SimpleActionGroup, .{ .name = "g_simple_action_group_new" });
        const ret = cFn();
        return ret;
    }
    /// Deprecated:
    /// method [add_entries](https://docs.gtk.org/gio/method.SimpleActionGroup.add_entries.html)
    pub const addEntries = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addEntries(self: *SimpleActionGroup, _entriess: []gio.ActionEntry, _user_data: ?*anyopaque) void {
            const _entries = _entriess.ptr;
            const _n_entries: i32 = @intCast(_entriess.len);
            const cFn = @extern(*const fn (*SimpleActionGroup, [*]gio.ActionEntry, i32, ?*anyopaque) callconv(.c) void, .{ .name = "g_simple_action_group_add_entries" });
            const ret = cFn(self, _entries, _n_entries, @ptrCast(_user_data));
            return ret;
        }
    }.addEntries;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/gio/method.SimpleActionGroup.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *SimpleActionGroup, _action: *gio.Action) void {
            const cFn = @extern(*const fn (*SimpleActionGroup, *gio.Action) callconv(.c) void, .{ .name = "g_simple_action_group_insert" });
            const ret = cFn(self, _action);
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [lookup](https://docs.gtk.org/gio/method.SimpleActionGroup.lookup.html)
    pub const lookup = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn lookup(self: *SimpleActionGroup, _action_name: [*:0]const u8) *gio.Action {
            const cFn = @extern(*const fn (*SimpleActionGroup, [*:0]const u8) callconv(.c) *gio.Action, .{ .name = "g_simple_action_group_lookup" });
            const ret = cFn(self, _action_name);
            return ret;
        }
    }.lookup;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gio/method.SimpleActionGroup.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *SimpleActionGroup, _action_name: [*:0]const u8) void {
            const cFn = @extern(*const fn (*SimpleActionGroup, [*:0]const u8) callconv(.c) void, .{ .name = "g_simple_action_group_remove" });
            const ret = cFn(self, _action_name);
            return ret;
        }
    }.remove;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_action_group_get_type" });
        return cFn();
    }
};
pub const SimpleActionGroupClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [12]?*anyopaque,
};
pub const SimpleActionGroupPrivate = opaque {};
/// Class [SimpleAsyncResult](https://docs.gtk.org/gio/class.SimpleAsyncResult.html)
pub const SimpleAsyncResult = opaque {
    pub const Interfaces = [_]type{gio.AsyncResult};
    pub const Parent = gobject.Object;
    pub const Class = gio.SimpleAsyncResultClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gio/ctor.SimpleAsyncResult.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_source_object: ?*gobject.Object, callback: anytype, callback_args: anytype, _source_tag: ?*anyopaque) *SimpleAsyncResult {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (?*gobject.Object, ?gio.AsyncReadyCallback, ?*anyopaque, ?*anyopaque) callconv(.c) *SimpleAsyncResult, .{ .name = "g_simple_async_result_new" });
            const ret = cFn(_source_object, _callback, @ptrCast(_user_data), @ptrCast(_source_tag));
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_from_error](https://docs.gtk.org/gio/ctor.SimpleAsyncResult.new_from_error.html)
    pub const newFromError = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromError(_source_object: ?*gobject.Object, callback: anytype, callback_args: anytype, _error: *core.Error) *SimpleAsyncResult {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (?*gobject.Object, ?gio.AsyncReadyCallback, ?*anyopaque, *core.Error) callconv(.c) *SimpleAsyncResult, .{ .name = "g_simple_async_result_new_from_error" });
            const ret = cFn(_source_object, _callback, @ptrCast(_user_data), _error);
            return ret;
        }
    }.newFromError;
    /// Deprecated:
    /// type func [is_valid](https://docs.gtk.org/gio/type_func.SimpleAsyncResult.is_valid.html)
    pub const isValid = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isValid(_result: *gio.AsyncResult, _source: ?*gobject.Object, _source_tag: ?*anyopaque) bool {
            const cFn = @extern(*const fn (*gio.AsyncResult, ?*gobject.Object, ?*anyopaque) callconv(.c) bool, .{ .name = "g_simple_async_result_is_valid" });
            const ret = cFn(_result, _source, @ptrCast(_source_tag));
            return ret;
        }
    }.isValid;
    /// Deprecated:
    /// method [complete](https://docs.gtk.org/gio/method.SimpleAsyncResult.complete.html)
    pub const complete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn complete(self: *SimpleAsyncResult) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult) callconv(.c) void, .{ .name = "g_simple_async_result_complete" });
            const ret = cFn(self);
            return ret;
        }
    }.complete;
    /// Deprecated:
    /// method [complete_in_idle](https://docs.gtk.org/gio/method.SimpleAsyncResult.complete_in_idle.html)
    pub const completeInIdle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn completeInIdle(self: *SimpleAsyncResult) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult) callconv(.c) void, .{ .name = "g_simple_async_result_complete_in_idle" });
            const ret = cFn(self);
            return ret;
        }
    }.completeInIdle;
    /// Deprecated:
    /// method [get_op_res_gboolean](https://docs.gtk.org/gio/method.SimpleAsyncResult.get_op_res_gboolean.html)
    pub const getOpResGboolean = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getOpResGboolean(self: *SimpleAsyncResult) bool {
            const cFn = @extern(*const fn (*SimpleAsyncResult) callconv(.c) bool, .{ .name = "g_simple_async_result_get_op_res_gboolean" });
            const ret = cFn(self);
            return ret;
        }
    }.getOpResGboolean;
    /// Deprecated:
    /// method [get_op_res_gssize](https://docs.gtk.org/gio/method.SimpleAsyncResult.get_op_res_gssize.html)
    pub const getOpResGssize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getOpResGssize(self: *SimpleAsyncResult) i64 {
            const cFn = @extern(*const fn (*SimpleAsyncResult) callconv(.c) i64, .{ .name = "g_simple_async_result_get_op_res_gssize" });
            const ret = cFn(self);
            return ret;
        }
    }.getOpResGssize;
    /// Deprecated:
    /// method [propagate_error](https://docs.gtk.org/gio/method.SimpleAsyncResult.propagate_error.html)
    pub const propagateError = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn propagateError(self: *SimpleAsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*SimpleAsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_simple_async_result_propagate_error" });
            const ret = cFn(self, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.propagateError;
    /// Deprecated:
    /// method [set_check_cancellable](https://docs.gtk.org/gio/method.SimpleAsyncResult.set_check_cancellable.html)
    pub const setCheckCancellable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCheckCancellable(self: *SimpleAsyncResult, _check_cancellable: ?*gio.Cancellable) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult, ?*gio.Cancellable) callconv(.c) void, .{ .name = "g_simple_async_result_set_check_cancellable" });
            const ret = cFn(self, _check_cancellable);
            return ret;
        }
    }.setCheckCancellable;
    /// Deprecated:
    /// method [set_from_error](https://docs.gtk.org/gio/method.SimpleAsyncResult.set_from_error.html)
    pub const setFromError = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFromError(self: *SimpleAsyncResult, _error: *core.Error) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult, *core.Error) callconv(.c) void, .{ .name = "g_simple_async_result_set_from_error" });
            const ret = cFn(self, _error);
            return ret;
        }
    }.setFromError;
    /// Deprecated:
    /// method [set_handle_cancellation](https://docs.gtk.org/gio/method.SimpleAsyncResult.set_handle_cancellation.html)
    pub const setHandleCancellation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHandleCancellation(self: *SimpleAsyncResult, _handle_cancellation: bool) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult, bool) callconv(.c) void, .{ .name = "g_simple_async_result_set_handle_cancellation" });
            const ret = cFn(self, _handle_cancellation);
            return ret;
        }
    }.setHandleCancellation;
    /// Deprecated:
    /// method [set_op_res_gboolean](https://docs.gtk.org/gio/method.SimpleAsyncResult.set_op_res_gboolean.html)
    pub const setOpResGboolean = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setOpResGboolean(self: *SimpleAsyncResult, _op_res: bool) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult, bool) callconv(.c) void, .{ .name = "g_simple_async_result_set_op_res_gboolean" });
            const ret = cFn(self, _op_res);
            return ret;
        }
    }.setOpResGboolean;
    /// Deprecated:
    /// method [set_op_res_gssize](https://docs.gtk.org/gio/method.SimpleAsyncResult.set_op_res_gssize.html)
    pub const setOpResGssize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setOpResGssize(self: *SimpleAsyncResult, _op_res: i64) void {
            const cFn = @extern(*const fn (*SimpleAsyncResult, i64) callconv(.c) void, .{ .name = "g_simple_async_result_set_op_res_gssize" });
            const ret = cFn(self, _op_res);
            return ret;
        }
    }.setOpResGssize;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_async_result_get_type" });
        return cFn();
    }
};
pub const SimpleAsyncResultClass = opaque {};
/// callback [SimpleAsyncThreadFunc](https://docs.gtk.org/gio/callback.SimpleAsyncThreadFunc.html)
pub const SimpleAsyncThreadFunc = *const fn (_res: *gio.SimpleAsyncResult, _object: *gobject.Object, _cancellable: ?*gio.Cancellable) callconv(.c) void;
/// Class [SimpleIOStream](https://docs.gtk.org/gio/class.SimpleIOStream.html)
/// - property [input-stream](https://docs.gtk.org/gio/property.SimpleIOStream.input-stream.html): (r-) `gio.InputStream`
/// - property [output-stream](https://docs.gtk.org/gio/property.SimpleIOStream.output-stream.html): (r-) `gio.OutputStream`
pub const SimpleIOStream = opaque {
    pub const Parent = gio.IOStream;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SimpleIOStream.new.html)
    pub fn new(_input_stream: *gio.InputStream, _output_stream: *gio.OutputStream) *SimpleIOStream {
        const cFn = @extern(*const fn (*gio.InputStream, *gio.OutputStream) callconv(.c) *SimpleIOStream, .{ .name = "g_simple_io_stream_new" });
        const ret = cFn(_input_stream, _output_stream);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_io_stream_get_type" });
        return cFn();
    }
};
/// Class [SimplePermission](https://docs.gtk.org/gio/class.SimplePermission.html)
pub const SimplePermission = opaque {
    pub const Parent = gio.Permission;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SimplePermission.new.html)
    pub fn new(_allowed: bool) *SimplePermission {
        const cFn = @extern(*const fn (bool) callconv(.c) *SimplePermission, .{ .name = "g_simple_permission_new" });
        const ret = cFn(_allowed);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_permission_get_type" });
        return cFn();
    }
};
/// Class [SimpleProxyResolver](https://docs.gtk.org/gio/class.SimpleProxyResolver.html)
/// - property [default-proxy](https://docs.gtk.org/gio/property.SimpleProxyResolver.default-proxy.html): (rw) `[*:0]const u8`
/// - property [ignore-hosts](https://docs.gtk.org/gio/property.SimpleProxyResolver.ignore-hosts.html): (rw) `[*:null]?[*:0]const u8`
pub const SimpleProxyResolver = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SimpleProxyResolverPrivate,
    pub const Interfaces = [_]type{gio.ProxyResolver};
    pub const Parent = gobject.Object;
    pub const Class = gio.SimpleProxyResolverClass;
    /// type func [new](https://docs.gtk.org/gio/type_func.SimpleProxyResolver.new.html)
    pub fn new(_default_proxy: ?[*:0]const u8, _ignore_hosts: ?[*:null]?[*:0]const u8) *gio.ProxyResolver {
        const cFn = @extern(*const fn (?[*:0]const u8, ?[*:null]?[*:0]const u8) callconv(.c) *gio.ProxyResolver, .{ .name = "g_simple_proxy_resolver_new" });
        const ret = cFn(_default_proxy, _ignore_hosts);
        return ret;
    }
    /// method [set_default_proxy](https://docs.gtk.org/gio/method.SimpleProxyResolver.set_default_proxy.html)
    pub fn setDefaultProxy(self: *SimpleProxyResolver, _default_proxy: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SimpleProxyResolver, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_simple_proxy_resolver_set_default_proxy" });
        const ret = cFn(self, _default_proxy);
        return ret;
    }
    /// method [set_ignore_hosts](https://docs.gtk.org/gio/method.SimpleProxyResolver.set_ignore_hosts.html)
    pub fn setIgnoreHosts(self: *SimpleProxyResolver, _ignore_hosts: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SimpleProxyResolver, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_simple_proxy_resolver_set_ignore_hosts" });
        const ret = cFn(self, _ignore_hosts);
        return ret;
    }
    /// method [set_uri_proxy](https://docs.gtk.org/gio/method.SimpleProxyResolver.set_uri_proxy.html)
    pub fn setUriProxy(self: *SimpleProxyResolver, _uri_scheme: [*:0]const u8, _proxy: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SimpleProxyResolver, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "g_simple_proxy_resolver_set_uri_proxy" });
        const ret = cFn(self, _uri_scheme, _proxy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_simple_proxy_resolver_get_type" });
        return cFn();
    }
};
pub const SimpleProxyResolverClass = extern struct {
    parent_class: gobject.ObjectClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const SimpleProxyResolverPrivate = opaque {};
/// Class [Socket](https://docs.gtk.org/gio/class.Socket.html)
/// - property [blocking](https://docs.gtk.org/gio/property.Socket.blocking.html): (rw) `bool`
/// - property [broadcast](https://docs.gtk.org/gio/property.Socket.broadcast.html): (rw) `bool`
/// - property [family](https://docs.gtk.org/gio/property.Socket.family.html): (r-) `gio.SocketFamily`
/// - property [fd](https://docs.gtk.org/gio/property.Socket.fd.html): (r-) `i32`
/// - property [keepalive](https://docs.gtk.org/gio/property.Socket.keepalive.html): (rw) `bool`
/// - property [listen-backlog](https://docs.gtk.org/gio/property.Socket.listen-backlog.html): (rw) `i32`
/// - property [local-address](https://docs.gtk.org/gio/property.Socket.local-address.html): (r-) `gio.SocketAddress`
/// - property [multicast-loopback](https://docs.gtk.org/gio/property.Socket.multicast-loopback.html): (rw) `bool`
/// - property [multicast-ttl](https://docs.gtk.org/gio/property.Socket.multicast-ttl.html): (rw) `u32`
/// - property [protocol](https://docs.gtk.org/gio/property.Socket.protocol.html): (r-) `gio.SocketProtocol`
/// - property [remote-address](https://docs.gtk.org/gio/property.Socket.remote-address.html): (r-) `gio.SocketAddress`
/// - property [timeout](https://docs.gtk.org/gio/property.Socket.timeout.html): (rw) `u32`
/// - property [ttl](https://docs.gtk.org/gio/property.Socket.ttl.html): (rw) `u32`
/// - property [type](https://docs.gtk.org/gio/property.Socket.type.html): (r-) `gio.SocketType`
pub const Socket = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SocketPrivate,
    pub const Interfaces = [_]type{ gio.DatagramBased, gio.Initable };
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Socket.new.html)
    pub fn new(_family: gio.SocketFamily, _type: gio.SocketType, _protocol: gio.SocketProtocol, _error: *?*core.Error) error{GError}!*Socket {
        const cFn = @extern(*const fn (gio.SocketFamily, gio.SocketType, gio.SocketProtocol, *?*core.Error) callconv(.c) *Socket, .{ .name = "g_socket_new" });
        const ret = cFn(_family, _type, _protocol, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_fd](https://docs.gtk.org/gio/ctor.Socket.new_from_fd.html)
    pub fn newFromFd(_fd: i32, _error: *?*core.Error) error{GError}!*Socket {
        const cFn = @extern(*const fn (i32, *?*core.Error) callconv(.c) *Socket, .{ .name = "g_socket_new_from_fd" });
        const ret = cFn(_fd, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [accept](https://docs.gtk.org/gio/method.Socket.accept.html)
    pub fn accept(self: *Socket, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.Socket {
        const cFn = @extern(*const fn (*Socket, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.Socket, .{ .name = "g_socket_accept" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [bind](https://docs.gtk.org/gio/method.Socket.bind.html)
    pub fn bind(self: *Socket, _address: *gio.SocketAddress, _allow_reuse: bool, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.SocketAddress, bool, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_bind" });
        const ret = cFn(self, _address, _allow_reuse, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [check_connect_result](https://docs.gtk.org/gio/method.Socket.check_connect_result.html)
    pub fn checkConnectResult(self: *Socket, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_check_connect_result" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.Socket.close.html)
    pub fn close(self: *Socket, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_close" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [condition_check](https://docs.gtk.org/gio/method.Socket.condition_check.html)
    pub fn conditionCheck(self: *Socket, _condition: glib.IOCondition) glib.IOCondition {
        const cFn = @extern(*const fn (*Socket, glib.IOCondition) callconv(.c) glib.IOCondition, .{ .name = "g_socket_condition_check" });
        const ret = cFn(self, _condition);
        return ret;
    }
    /// method [condition_timed_wait](https://docs.gtk.org/gio/method.Socket.condition_timed_wait.html)
    pub fn conditionTimedWait(self: *Socket, _condition: glib.IOCondition, _timeout_us: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, glib.IOCondition, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_condition_timed_wait" });
        const ret = cFn(self, _condition, _timeout_us, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [condition_wait](https://docs.gtk.org/gio/method.Socket.condition_wait.html)
    pub fn conditionWait(self: *Socket, _condition: glib.IOCondition, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, glib.IOCondition, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_condition_wait" });
        const ret = cFn(self, _condition, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect](https://docs.gtk.org/gio/method.Socket.connect.html)
    pub fn connect(self: *Socket, _address: *gio.SocketAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.SocketAddress, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_connect" });
        const ret = cFn(self, _address, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connection_factory_create_connection](https://docs.gtk.org/gio/method.Socket.connection_factory_create_connection.html)
    pub fn connectionFactoryCreateConnection(self: *Socket) *gio.SocketConnection {
        const cFn = @extern(*const fn (*Socket) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_connection_factory_create_connection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_available_bytes](https://docs.gtk.org/gio/method.Socket.get_available_bytes.html)
    pub fn getAvailableBytes(self: *Socket) i64 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) i64, .{ .name = "g_socket_get_available_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_blocking](https://docs.gtk.org/gio/method.Socket.get_blocking.html)
    pub fn getBlocking(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_get_blocking" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_broadcast](https://docs.gtk.org/gio/method.Socket.get_broadcast.html)
    pub fn getBroadcast(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_get_broadcast" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_credentials](https://docs.gtk.org/gio/method.Socket.get_credentials.html)
    pub fn getCredentials(self: *Socket, _error: *?*core.Error) error{GError}!*gio.Credentials {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) *gio.Credentials, .{ .name = "g_socket_get_credentials" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/gio/method.Socket.get_family.html)
    pub fn getFamily(self: *Socket) gio.SocketFamily {
        const cFn = @extern(*const fn (*Socket) callconv(.c) gio.SocketFamily, .{ .name = "g_socket_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fd](https://docs.gtk.org/gio/method.Socket.get_fd.html)
    pub fn getFd(self: *Socket) i32 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) i32, .{ .name = "g_socket_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_keepalive](https://docs.gtk.org/gio/method.Socket.get_keepalive.html)
    pub fn getKeepalive(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_get_keepalive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_listen_backlog](https://docs.gtk.org/gio/method.Socket.get_listen_backlog.html)
    pub fn getListenBacklog(self: *Socket) i32 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) i32, .{ .name = "g_socket_get_listen_backlog" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_local_address](https://docs.gtk.org/gio/method.Socket.get_local_address.html)
    pub fn getLocalAddress(self: *Socket, _error: *?*core.Error) error{GError}!*gio.SocketAddress {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) *gio.SocketAddress, .{ .name = "g_socket_get_local_address" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_multicast_loopback](https://docs.gtk.org/gio/method.Socket.get_multicast_loopback.html)
    pub fn getMulticastLoopback(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_get_multicast_loopback" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_multicast_ttl](https://docs.gtk.org/gio/method.Socket.get_multicast_ttl.html)
    pub fn getMulticastTtl(self: *Socket) u32 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) u32, .{ .name = "g_socket_get_multicast_ttl" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_option](https://docs.gtk.org/gio/method.Socket.get_option.html)
    pub fn getOption(self: *Socket, _level: i32, _optname: i32, _error: *?*core.Error) error{GError}!?i32 {
        var value_out: i32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*Socket, i32, i32, *i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_get_option" });
        const ret = cFn(self, _level, _optname, _value, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return value_out;
    }
    /// method [get_protocol](https://docs.gtk.org/gio/method.Socket.get_protocol.html)
    pub fn getProtocol(self: *Socket) gio.SocketProtocol {
        const cFn = @extern(*const fn (*Socket) callconv(.c) gio.SocketProtocol, .{ .name = "g_socket_get_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_remote_address](https://docs.gtk.org/gio/method.Socket.get_remote_address.html)
    pub fn getRemoteAddress(self: *Socket, _error: *?*core.Error) error{GError}!*gio.SocketAddress {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) *gio.SocketAddress, .{ .name = "g_socket_get_remote_address" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_socket_type](https://docs.gtk.org/gio/method.Socket.get_socket_type.html)
    pub fn getSocketType(self: *Socket) gio.SocketType {
        const cFn = @extern(*const fn (*Socket) callconv(.c) gio.SocketType, .{ .name = "g_socket_get_socket_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_timeout](https://docs.gtk.org/gio/method.Socket.get_timeout.html)
    pub fn getTimeout(self: *Socket) u32 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) u32, .{ .name = "g_socket_get_timeout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ttl](https://docs.gtk.org/gio/method.Socket.get_ttl.html)
    pub fn getTtl(self: *Socket) u32 {
        const cFn = @extern(*const fn (*Socket) callconv(.c) u32, .{ .name = "g_socket_get_ttl" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_closed](https://docs.gtk.org/gio/method.Socket.is_closed.html)
    pub fn isClosed(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_connected](https://docs.gtk.org/gio/method.Socket.is_connected.html)
    pub fn isConnected(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_is_connected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [join_multicast_group](https://docs.gtk.org/gio/method.Socket.join_multicast_group.html)
    pub fn joinMulticastGroup(self: *Socket, _group: *gio.InetAddress, _source_specific: bool, _iface: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.InetAddress, bool, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_join_multicast_group" });
        const ret = cFn(self, _group, _source_specific, _iface, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [join_multicast_group_ssm](https://docs.gtk.org/gio/method.Socket.join_multicast_group_ssm.html)
    pub fn joinMulticastGroupSsm(self: *Socket, _group: *gio.InetAddress, _source_specific: ?*gio.InetAddress, _iface: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.InetAddress, ?*gio.InetAddress, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_join_multicast_group_ssm" });
        const ret = cFn(self, _group, _source_specific, _iface, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [leave_multicast_group](https://docs.gtk.org/gio/method.Socket.leave_multicast_group.html)
    pub fn leaveMulticastGroup(self: *Socket, _group: *gio.InetAddress, _source_specific: bool, _iface: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.InetAddress, bool, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_leave_multicast_group" });
        const ret = cFn(self, _group, _source_specific, _iface, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [leave_multicast_group_ssm](https://docs.gtk.org/gio/method.Socket.leave_multicast_group_ssm.html)
    pub fn leaveMulticastGroupSsm(self: *Socket, _group: *gio.InetAddress, _source_specific: ?*gio.InetAddress, _iface: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *gio.InetAddress, ?*gio.InetAddress, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_leave_multicast_group_ssm" });
        const ret = cFn(self, _group, _source_specific, _iface, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [listen](https://docs.gtk.org/gio/method.Socket.listen.html)
    pub fn listen(self: *Socket, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_listen" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive](https://docs.gtk.org/gio/method.Socket.receive.html)
    pub fn receive(self: *Socket, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Socket, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_receive" });
        const ret = cFn(self, _buffer, _size, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive_bytes](https://docs.gtk.org/gio/method.Socket.receive_bytes.html)
    pub fn receiveBytes(self: *Socket, _size: u64, _timeout_us: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*glib.Bytes {
        const cFn = @extern(*const fn (*Socket, u64, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_socket_receive_bytes" });
        const ret = cFn(self, _size, _timeout_us, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive_bytes_from](https://docs.gtk.org/gio/method.Socket.receive_bytes_from.html)
    pub fn receiveBytesFrom(self: *Socket, _size: u64, _timeout_us: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *glib.Bytes,
        address: *gio.SocketAddress,
    } {
        var address_out: *gio.SocketAddress = undefined;
        const _address = &address_out;
        const cFn = @extern(*const fn (*Socket, ?**gio.SocketAddress, u64, i64, ?*gio.Cancellable, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_socket_receive_bytes_from" });
        const ret = cFn(self, _address, _size, _timeout_us, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .address = address_out };
    }
    /// method [receive_from](https://docs.gtk.org/gio/method.Socket.receive_from.html)
    pub fn receiveFrom(self: *Socket, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: i64,
        address: *gio.SocketAddress,
    } {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        var address_out: *gio.SocketAddress = undefined;
        const _address = &address_out;
        const cFn = @extern(*const fn (*Socket, ?**gio.SocketAddress, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_receive_from" });
        const ret = cFn(self, _address, _buffer, _size, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .address = address_out };
    }
    /// method [receive_message](https://docs.gtk.org/gio/method.Socket.receive_message.html)
    pub fn receiveMessage(self: *Socket, _vectorss: []gio.InputVector, _flags: *i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: i64,
        address: *gio.SocketAddress,
        messages: ?[]*gio.SocketControlMessage,
    } {
        const _vectors = _vectorss.ptr;
        const _num_vectors: i32 = @intCast(_vectorss.len);
        var address_out: *gio.SocketAddress = undefined;
        const _address = &address_out;
        var messages_out: ?[*]*gio.SocketControlMessage = undefined;
        const _messages = &messages_out;
        var num_messages_out: i32 = undefined;
        const _num_messages = &num_messages_out;
        const cFn = @extern(*const fn (*Socket, ?**gio.SocketAddress, [*]gio.InputVector, i32, ?*?[*]*gio.SocketControlMessage, *i32, *i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_receive_message" });
        const ret = cFn(self, _address, _vectors, _num_vectors, _messages, _num_messages, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .address = address_out, .messages = messages_out[0..@intCast(num_messages_out)] };
    }
    /// method [receive_messages](https://docs.gtk.org/gio/method.Socket.receive_messages.html)
    pub fn receiveMessages(self: *Socket, _messagess: []gio.InputMessage, _flags: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const _messages = _messagess.ptr;
        const _num_messages: u32 = @intCast(_messagess.len);
        const cFn = @extern(*const fn (*Socket, [*]gio.InputMessage, u32, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_socket_receive_messages" });
        const ret = cFn(self, _messages, _num_messages, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive_with_blocking](https://docs.gtk.org/gio/method.Socket.receive_with_blocking.html)
    pub fn receiveWithBlocking(self: *Socket, _buffers: []u8, _blocking: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Socket, [*]u8, u64, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_receive_with_blocking" });
        const ret = cFn(self, _buffer, _size, _blocking, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send](https://docs.gtk.org/gio/method.Socket.send.html)
    pub fn send(self: *Socket, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Socket, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_send" });
        const ret = cFn(self, _buffer, _size, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_message](https://docs.gtk.org/gio/method.Socket.send_message.html)
    pub fn sendMessage(self: *Socket, _address: ?*gio.SocketAddress, _vectorss: []gio.OutputVector, _messagess: []*gio.SocketControlMessage, _flags: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _vectors = _vectorss.ptr;
        const _num_vectors: i32 = @intCast(_vectorss.len);
        const _messages = _messagess.ptr;
        const _num_messages: i32 = @intCast(_messagess.len);
        const cFn = @extern(*const fn (*Socket, ?*gio.SocketAddress, [*]gio.OutputVector, i32, ?[*]*gio.SocketControlMessage, i32, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_send_message" });
        const ret = cFn(self, _address, _vectors, _num_vectors, _messages, _num_messages, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_message_with_timeout](https://docs.gtk.org/gio/method.Socket.send_message_with_timeout.html)
    pub fn sendMessageWithTimeout(self: *Socket, _address: ?*gio.SocketAddress, _vectorss: []gio.OutputVector, _messagess: []*gio.SocketControlMessage, _flags: i32, _timeout_us: i64, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: gio.PollableReturn,
        bytes_written: u64,
    } {
        const _vectors = _vectorss.ptr;
        const _num_vectors: i32 = @intCast(_vectorss.len);
        const _messages = _messagess.ptr;
        const _num_messages: i32 = @intCast(_messagess.len);
        var bytes_written_out: u64 = undefined;
        const _bytes_written = &bytes_written_out;
        const cFn = @extern(*const fn (*Socket, ?*gio.SocketAddress, [*]gio.OutputVector, i32, ?[*]*gio.SocketControlMessage, i32, i32, i64, ?*u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.PollableReturn, .{ .name = "g_socket_send_message_with_timeout" });
        const ret = cFn(self, _address, _vectors, _num_vectors, _messages, _num_messages, _flags, _timeout_us, _bytes_written, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .bytes_written = bytes_written_out };
    }
    /// method [send_messages](https://docs.gtk.org/gio/method.Socket.send_messages.html)
    pub fn sendMessages(self: *Socket, _messagess: []gio.OutputMessage, _flags: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const _messages = _messagess.ptr;
        const _num_messages: u32 = @intCast(_messagess.len);
        const cFn = @extern(*const fn (*Socket, [*]gio.OutputMessage, u32, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_socket_send_messages" });
        const ret = cFn(self, _messages, _num_messages, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_to](https://docs.gtk.org/gio/method.Socket.send_to.html)
    pub fn sendTo(self: *Socket, _address: ?*gio.SocketAddress, _buffers: []u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Socket, ?*gio.SocketAddress, [*]u8, u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_send_to" });
        const ret = cFn(self, _address, _buffer, _size, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_with_blocking](https://docs.gtk.org/gio/method.Socket.send_with_blocking.html)
    pub fn sendWithBlocking(self: *Socket, _buffers: []u8, _blocking: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
        const _buffer = _buffers.ptr;
        const _size: u64 = @intCast(_buffers.len);
        const cFn = @extern(*const fn (*Socket, [*]u8, u64, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_socket_send_with_blocking" });
        const ret = cFn(self, _buffer, _size, _blocking, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_blocking](https://docs.gtk.org/gio/method.Socket.set_blocking.html)
    pub fn setBlocking(self: *Socket, _blocking: bool) void {
        const cFn = @extern(*const fn (*Socket, bool) callconv(.c) void, .{ .name = "g_socket_set_blocking" });
        const ret = cFn(self, _blocking);
        return ret;
    }
    /// method [set_broadcast](https://docs.gtk.org/gio/method.Socket.set_broadcast.html)
    pub fn setBroadcast(self: *Socket, _broadcast: bool) void {
        const cFn = @extern(*const fn (*Socket, bool) callconv(.c) void, .{ .name = "g_socket_set_broadcast" });
        const ret = cFn(self, _broadcast);
        return ret;
    }
    /// method [set_keepalive](https://docs.gtk.org/gio/method.Socket.set_keepalive.html)
    pub fn setKeepalive(self: *Socket, _keepalive: bool) void {
        const cFn = @extern(*const fn (*Socket, bool) callconv(.c) void, .{ .name = "g_socket_set_keepalive" });
        const ret = cFn(self, _keepalive);
        return ret;
    }
    /// method [set_listen_backlog](https://docs.gtk.org/gio/method.Socket.set_listen_backlog.html)
    pub fn setListenBacklog(self: *Socket, _backlog: i32) void {
        const cFn = @extern(*const fn (*Socket, i32) callconv(.c) void, .{ .name = "g_socket_set_listen_backlog" });
        const ret = cFn(self, _backlog);
        return ret;
    }
    /// method [set_multicast_loopback](https://docs.gtk.org/gio/method.Socket.set_multicast_loopback.html)
    pub fn setMulticastLoopback(self: *Socket, _loopback: bool) void {
        const cFn = @extern(*const fn (*Socket, bool) callconv(.c) void, .{ .name = "g_socket_set_multicast_loopback" });
        const ret = cFn(self, _loopback);
        return ret;
    }
    /// method [set_multicast_ttl](https://docs.gtk.org/gio/method.Socket.set_multicast_ttl.html)
    pub fn setMulticastTtl(self: *Socket, _ttl: u32) void {
        const cFn = @extern(*const fn (*Socket, u32) callconv(.c) void, .{ .name = "g_socket_set_multicast_ttl" });
        const ret = cFn(self, _ttl);
        return ret;
    }
    /// method [set_option](https://docs.gtk.org/gio/method.Socket.set_option.html)
    pub fn setOption(self: *Socket, _level: i32, _optname: i32, _value: i32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, i32, i32, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_set_option" });
        const ret = cFn(self, _level, _optname, _value, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_timeout](https://docs.gtk.org/gio/method.Socket.set_timeout.html)
    pub fn setTimeout(self: *Socket, _timeout: u32) void {
        const cFn = @extern(*const fn (*Socket, u32) callconv(.c) void, .{ .name = "g_socket_set_timeout" });
        const ret = cFn(self, _timeout);
        return ret;
    }
    /// method [set_ttl](https://docs.gtk.org/gio/method.Socket.set_ttl.html)
    pub fn setTtl(self: *Socket, _ttl: u32) void {
        const cFn = @extern(*const fn (*Socket, u32) callconv(.c) void, .{ .name = "g_socket_set_ttl" });
        const ret = cFn(self, _ttl);
        return ret;
    }
    /// method [shutdown](https://docs.gtk.org/gio/method.Socket.shutdown.html)
    pub fn shutdown(self: *Socket, _shutdown_read: bool, _shutdown_write: bool, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Socket, bool, bool, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_shutdown" });
        const ret = cFn(self, _shutdown_read, _shutdown_write, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [speaks_ipv4](https://docs.gtk.org/gio/method.Socket.speaks_ipv4.html)
    pub fn speaksIpv4(self: *Socket) bool {
        const cFn = @extern(*const fn (*Socket) callconv(.c) bool, .{ .name = "g_socket_speaks_ipv4" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_get_type" });
        return cFn();
    }
};
/// Class [SocketAddress](https://docs.gtk.org/gio/class.SocketAddress.html)
/// - property [family](https://docs.gtk.org/gio/property.SocketAddress.family.html): (r-) `gio.SocketFamily`
pub const SocketAddress = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketAddressClass;
    /// ctor [new_from_native](https://docs.gtk.org/gio/ctor.SocketAddress.new_from_native.html)
    pub fn newFromNative(_native: *anyopaque, _len: u64) *SocketAddress {
        const cFn = @extern(*const fn (*anyopaque, u64) callconv(.c) *SocketAddress, .{ .name = "g_socket_address_new_from_native" });
        const ret = cFn(@ptrCast(_native), _len);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/gio/method.SocketAddress.get_family.html)
    pub fn getFamily(self: *SocketAddress) gio.SocketFamily {
        const cFn = @extern(*const fn (*SocketAddress) callconv(.c) gio.SocketFamily, .{ .name = "g_socket_address_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_native_size](https://docs.gtk.org/gio/method.SocketAddress.get_native_size.html)
    pub fn getNativeSize(self: *SocketAddress) i64 {
        const cFn = @extern(*const fn (*SocketAddress) callconv(.c) i64, .{ .name = "g_socket_address_get_native_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_native](https://docs.gtk.org/gio/method.SocketAddress.to_native.html)
    pub fn toNative(self: *SocketAddress, _dest: ?*anyopaque, _destlen: u64, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*SocketAddress, ?*anyopaque, u64, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_address_to_native" });
        const ret = cFn(self, @ptrCast(_dest), _destlen, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [get_family](https://docs.gtk.org/gio/vfunc.SocketAddress.get_family.html)
    pub fn getFamilyV(self: *SocketAddress) gio.SocketFamily {
        const class: *SocketAddressClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_family.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_native_size](https://docs.gtk.org/gio/vfunc.SocketAddress.get_native_size.html)
    pub fn getNativeSizeV(self: *SocketAddress) i64 {
        const class: *SocketAddressClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_native_size.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [to_native](https://docs.gtk.org/gio/vfunc.SocketAddress.to_native.html)
    pub fn toNativeV(self: *SocketAddress, _dest: ?*anyopaque, _destlen: u64, _error: *?*core.Error) bool {
        const class: *SocketAddressClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.to_native.?;
        const ret = vFn(self, @ptrCast(_dest), _destlen, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_address_get_type" });
        return cFn();
    }
};
pub const SocketAddressClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_family: ?*const fn (_address: *gio.SocketAddress) callconv(.c) gio.SocketFamily,
    get_native_size: ?*const fn (_address: *gio.SocketAddress) callconv(.c) i64,
    to_native: ?*const fn (_address: *gio.SocketAddress, _dest: ?*anyopaque, _destlen: u64, _error: *?*core.Error) callconv(.c) bool,
};
/// Class [SocketAddressEnumerator](https://docs.gtk.org/gio/class.SocketAddressEnumerator.html)
pub const SocketAddressEnumerator = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketAddressEnumeratorClass;
    /// method [next](https://docs.gtk.org/gio/method.SocketAddressEnumerator.next.html)
    pub fn next(self: *SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*gio.SocketAddress {
        const cFn = @extern(*const fn (*SocketAddressEnumerator, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*gio.SocketAddress, .{ .name = "g_socket_address_enumerator_next" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [next_async](https://docs.gtk.org/gio/method.SocketAddressEnumerator.next_async.html)
    pub fn nextAsync(self: *SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketAddressEnumerator, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_address_enumerator_next_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [next_finish](https://docs.gtk.org/gio/method.SocketAddressEnumerator.next_finish.html)
    pub fn nextFinish(self: *SocketAddressEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.SocketAddress {
        const cFn = @extern(*const fn (*SocketAddressEnumerator, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.SocketAddress, .{ .name = "g_socket_address_enumerator_next_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [next](https://docs.gtk.org/gio/vfunc.SocketAddressEnumerator.next.html)
    pub fn nextV(self: *SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*gio.SocketAddress {
        const class: *SocketAddressEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [next_async](https://docs.gtk.org/gio/vfunc.SocketAddressEnumerator.next_async.html)
    pub fn nextAsyncV(self: *SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *SocketAddressEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next_async.?;
        const ret = vFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [next_finish](https://docs.gtk.org/gio/vfunc.SocketAddressEnumerator.next_finish.html)
    pub fn nextFinishV(self: *SocketAddressEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) ?*gio.SocketAddress {
        const class: *SocketAddressEnumeratorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.next_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_address_enumerator_get_type" });
        return cFn();
    }
};
pub const SocketAddressEnumeratorClass = extern struct {
    parent_class: gobject.ObjectClass,
    next: ?*const fn (_enumerator: *gio.SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*gio.SocketAddress,
    next_async: ?*const fn (_enumerator: *gio.SocketAddressEnumerator, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    next_finish: ?*const fn (_enumerator: *gio.SocketAddressEnumerator, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*gio.SocketAddress,
};
pub const SocketClass = extern struct {
    parent_class: gobject.ObjectClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
    _g_reserved7: ?*anyopaque,
    _g_reserved8: ?*anyopaque,
    _g_reserved9: ?*anyopaque,
    _g_reserved10: ?*anyopaque,
};
/// Class [SocketClient](https://docs.gtk.org/gio/class.SocketClient.html)
/// - property [enable-proxy](https://docs.gtk.org/gio/property.SocketClient.enable-proxy.html): (rw) `bool`
/// - property [family](https://docs.gtk.org/gio/property.SocketClient.family.html): (rw) `gio.SocketFamily`
/// - property [local-address](https://docs.gtk.org/gio/property.SocketClient.local-address.html): (rw) `gio.SocketAddress`
/// - property [protocol](https://docs.gtk.org/gio/property.SocketClient.protocol.html): (rw) `gio.SocketProtocol`
/// - property [proxy-resolver](https://docs.gtk.org/gio/property.SocketClient.proxy-resolver.html): (rw) `gio.ProxyResolver`
/// - property [timeout](https://docs.gtk.org/gio/property.SocketClient.timeout.html): (rw) `u32`
/// - property [tls](https://docs.gtk.org/gio/property.SocketClient.tls.html): (rw) `bool`
/// - property [tls-validation-flags](https://docs.gtk.org/gio/property.SocketClient.tls-validation-flags.html): (rw) `gio.TlsCertificateFlags`
/// - property [type](https://docs.gtk.org/gio/property.SocketClient.type.html): (rw) `gio.SocketType`
pub const SocketClient = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SocketClientPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketClientClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SocketClient.new.html)
    pub fn new() *SocketClient {
        const cFn = @extern(*const fn () callconv(.c) *SocketClient, .{ .name = "g_socket_client_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_application_proxy](https://docs.gtk.org/gio/method.SocketClient.add_application_proxy.html)
    pub fn addApplicationProxy(self: *SocketClient, _protocol: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8) callconv(.c) void, .{ .name = "g_socket_client_add_application_proxy" });
        const ret = cFn(self, _protocol);
        return ret;
    }
    /// method [connect](https://docs.gtk.org/gio/method.SocketClient.connect.html)
    pub fn connect(self: *SocketClient, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, *gio.SocketConnectable, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect" });
        const ret = cFn(self, _connectable, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_async](https://docs.gtk.org/gio/method.SocketClient.connect_async.html)
    pub fn connectAsync(self: *SocketClient, _connectable: *gio.SocketConnectable, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketClient, *gio.SocketConnectable, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_client_connect_async" });
        const ret = cFn(self, _connectable, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_finish](https://docs.gtk.org/gio/method.SocketClient.connect_finish.html)
    pub fn connectFinish(self: *SocketClient, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_host](https://docs.gtk.org/gio/method.SocketClient.connect_to_host.html)
    pub fn connectToHost(self: *SocketClient, _host_and_port: [*:0]const u8, _default_port: u16, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, u16, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_host" });
        const ret = cFn(self, _host_and_port, _default_port, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_host_async](https://docs.gtk.org/gio/method.SocketClient.connect_to_host_async.html)
    pub fn connectToHostAsync(self: *SocketClient, _host_and_port: [*:0]const u8, _default_port: u16, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, u16, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_client_connect_to_host_async" });
        const ret = cFn(self, _host_and_port, _default_port, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_to_host_finish](https://docs.gtk.org/gio/method.SocketClient.connect_to_host_finish.html)
    pub fn connectToHostFinish(self: *SocketClient, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_host_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_service](https://docs.gtk.org/gio/method.SocketClient.connect_to_service.html)
    pub fn connectToService(self: *SocketClient, _domain: [*:0]const u8, _service: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_service" });
        const ret = cFn(self, _domain, _service, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_service_async](https://docs.gtk.org/gio/method.SocketClient.connect_to_service_async.html)
    pub fn connectToServiceAsync(self: *SocketClient, _domain: [*:0]const u8, _service: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, [*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_client_connect_to_service_async" });
        const ret = cFn(self, _domain, _service, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_to_service_finish](https://docs.gtk.org/gio/method.SocketClient.connect_to_service_finish.html)
    pub fn connectToServiceFinish(self: *SocketClient, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_service_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_uri](https://docs.gtk.org/gio/method.SocketClient.connect_to_uri.html)
    pub fn connectToUri(self: *SocketClient, _uri: [*:0]const u8, _default_port: u16, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, u16, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_uri" });
        const ret = cFn(self, _uri, _default_port, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_to_uri_async](https://docs.gtk.org/gio/method.SocketClient.connect_to_uri_async.html)
    pub fn connectToUriAsync(self: *SocketClient, _uri: [*:0]const u8, _default_port: u16, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketClient, [*:0]const u8, u16, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_client_connect_to_uri_async" });
        const ret = cFn(self, _uri, _default_port, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_to_uri_finish](https://docs.gtk.org/gio/method.SocketClient.connect_to_uri_finish.html)
    pub fn connectToUriFinish(self: *SocketClient, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.SocketConnection {
        const cFn = @extern(*const fn (*SocketClient, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_client_connect_to_uri_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_enable_proxy](https://docs.gtk.org/gio/method.SocketClient.get_enable_proxy.html)
    pub fn getEnableProxy(self: *SocketClient) bool {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) bool, .{ .name = "g_socket_client_get_enable_proxy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/gio/method.SocketClient.get_family.html)
    pub fn getFamily(self: *SocketClient) gio.SocketFamily {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) gio.SocketFamily, .{ .name = "g_socket_client_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_local_address](https://docs.gtk.org/gio/method.SocketClient.get_local_address.html)
    pub fn getLocalAddress(self: *SocketClient) ?*gio.SocketAddress {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) ?*gio.SocketAddress, .{ .name = "g_socket_client_get_local_address" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_protocol](https://docs.gtk.org/gio/method.SocketClient.get_protocol.html)
    pub fn getProtocol(self: *SocketClient) gio.SocketProtocol {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) gio.SocketProtocol, .{ .name = "g_socket_client_get_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_proxy_resolver](https://docs.gtk.org/gio/method.SocketClient.get_proxy_resolver.html)
    pub fn getProxyResolver(self: *SocketClient) *gio.ProxyResolver {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) *gio.ProxyResolver, .{ .name = "g_socket_client_get_proxy_resolver" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_socket_type](https://docs.gtk.org/gio/method.SocketClient.get_socket_type.html)
    pub fn getSocketType(self: *SocketClient) gio.SocketType {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) gio.SocketType, .{ .name = "g_socket_client_get_socket_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_timeout](https://docs.gtk.org/gio/method.SocketClient.get_timeout.html)
    pub fn getTimeout(self: *SocketClient) u32 {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) u32, .{ .name = "g_socket_client_get_timeout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tls](https://docs.gtk.org/gio/method.SocketClient.get_tls.html)
    pub fn getTls(self: *SocketClient) bool {
        const cFn = @extern(*const fn (*SocketClient) callconv(.c) bool, .{ .name = "g_socket_client_get_tls" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_tls_validation_flags](https://docs.gtk.org/gio/method.SocketClient.get_tls_validation_flags.html)
    pub const getTlsValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTlsValidationFlags(self: *SocketClient) gio.TlsCertificateFlags {
            const cFn = @extern(*const fn (*SocketClient) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_socket_client_get_tls_validation_flags" });
            const ret = cFn(self);
            return ret;
        }
    }.getTlsValidationFlags;
    /// method [set_enable_proxy](https://docs.gtk.org/gio/method.SocketClient.set_enable_proxy.html)
    pub fn setEnableProxy(self: *SocketClient, _enable: bool) void {
        const cFn = @extern(*const fn (*SocketClient, bool) callconv(.c) void, .{ .name = "g_socket_client_set_enable_proxy" });
        const ret = cFn(self, _enable);
        return ret;
    }
    /// method [set_family](https://docs.gtk.org/gio/method.SocketClient.set_family.html)
    pub fn setFamily(self: *SocketClient, _family: gio.SocketFamily) void {
        const cFn = @extern(*const fn (*SocketClient, gio.SocketFamily) callconv(.c) void, .{ .name = "g_socket_client_set_family" });
        const ret = cFn(self, _family);
        return ret;
    }
    /// method [set_local_address](https://docs.gtk.org/gio/method.SocketClient.set_local_address.html)
    pub fn setLocalAddress(self: *SocketClient, _address: ?*gio.SocketAddress) void {
        const cFn = @extern(*const fn (*SocketClient, ?*gio.SocketAddress) callconv(.c) void, .{ .name = "g_socket_client_set_local_address" });
        const ret = cFn(self, _address);
        return ret;
    }
    /// method [set_protocol](https://docs.gtk.org/gio/method.SocketClient.set_protocol.html)
    pub fn setProtocol(self: *SocketClient, _protocol: gio.SocketProtocol) void {
        const cFn = @extern(*const fn (*SocketClient, gio.SocketProtocol) callconv(.c) void, .{ .name = "g_socket_client_set_protocol" });
        const ret = cFn(self, _protocol);
        return ret;
    }
    /// method [set_proxy_resolver](https://docs.gtk.org/gio/method.SocketClient.set_proxy_resolver.html)
    pub fn setProxyResolver(self: *SocketClient, _proxy_resolver: ?*gio.ProxyResolver) void {
        const cFn = @extern(*const fn (*SocketClient, ?*gio.ProxyResolver) callconv(.c) void, .{ .name = "g_socket_client_set_proxy_resolver" });
        const ret = cFn(self, _proxy_resolver);
        return ret;
    }
    /// method [set_socket_type](https://docs.gtk.org/gio/method.SocketClient.set_socket_type.html)
    pub fn setSocketType(self: *SocketClient, _type: gio.SocketType) void {
        const cFn = @extern(*const fn (*SocketClient, gio.SocketType) callconv(.c) void, .{ .name = "g_socket_client_set_socket_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [set_timeout](https://docs.gtk.org/gio/method.SocketClient.set_timeout.html)
    pub fn setTimeout(self: *SocketClient, _timeout: u32) void {
        const cFn = @extern(*const fn (*SocketClient, u32) callconv(.c) void, .{ .name = "g_socket_client_set_timeout" });
        const ret = cFn(self, _timeout);
        return ret;
    }
    /// method [set_tls](https://docs.gtk.org/gio/method.SocketClient.set_tls.html)
    pub fn setTls(self: *SocketClient, _tls: bool) void {
        const cFn = @extern(*const fn (*SocketClient, bool) callconv(.c) void, .{ .name = "g_socket_client_set_tls" });
        const ret = cFn(self, _tls);
        return ret;
    }
    /// Deprecated:
    /// method [set_tls_validation_flags](https://docs.gtk.org/gio/method.SocketClient.set_tls_validation_flags.html)
    pub const setTlsValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTlsValidationFlags(self: *SocketClient, _flags: gio.TlsCertificateFlags) void {
            const cFn = @extern(*const fn (*SocketClient, gio.TlsCertificateFlags) callconv(.c) void, .{ .name = "g_socket_client_set_tls_validation_flags" });
            const ret = cFn(self, _flags);
            return ret;
        }
    }.setTlsValidationFlags;
    /// vfunc [event](https://docs.gtk.org/gio/vfunc.SocketClient.event.html)
    pub fn eventV(self: *SocketClient, _event: gio.SocketClientEvent, _connectable: *gio.SocketConnectable, _connection: *gio.IOStream) void {
        const class: *SocketClientClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.event.?;
        const ret = vFn(self, _event, _connectable, _connection);
        return ret;
    }
    /// signal [event](https://docs.gtk.org/gio/signal.SocketClient.event.html)
    pub fn connectEvent(self: *SocketClient, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("event", handler, args, flags, &.{ void, *SocketClient, gio.SocketClientEvent, *gio.SocketConnectable, *gio.IOStream });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_client_get_type" });
        return cFn();
    }
};
pub const SocketClientClass = extern struct {
    parent_class: gobject.ObjectClass,
    event: ?*const fn (_client: *gio.SocketClient, _event: gio.SocketClientEvent, _connectable: *gio.SocketConnectable, _connection: *gio.IOStream) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
};
/// Enum [SocketClientEvent](https://docs.gtk.org/gio/enum.SocketClientEvent.html)
pub const SocketClientEvent = enum(u32) {
    resolving = 0,
    resolved = 1,
    connecting = 2,
    connected = 3,
    proxy_negotiating = 4,
    proxy_negotiated = 5,
    tls_handshaking = 6,
    tls_handshaked = 7,
    complete = 8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_client_event_get_type" });
        return cFn();
    }
};
pub const SocketClientPrivate = opaque {};
/// Iface [SocketConnectable](https://docs.gtk.org/gio/iface.SocketConnectable.html)
pub const SocketConnectable = opaque {
    /// method [enumerate](https://docs.gtk.org/gio/method.SocketConnectable.enumerate.html)
    pub fn enumerate(self: *SocketConnectable) *gio.SocketAddressEnumerator {
        const cFn = @extern(*const fn (*SocketConnectable) callconv(.c) *gio.SocketAddressEnumerator, .{ .name = "g_socket_connectable_enumerate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [proxy_enumerate](https://docs.gtk.org/gio/method.SocketConnectable.proxy_enumerate.html)
    pub fn proxyEnumerate(self: *SocketConnectable) *gio.SocketAddressEnumerator {
        const cFn = @extern(*const fn (*SocketConnectable) callconv(.c) *gio.SocketAddressEnumerator, .{ .name = "g_socket_connectable_proxy_enumerate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gio/method.SocketConnectable.to_string.html)
    pub fn toString(self: *SocketConnectable) [*:0]u8 {
        const cFn = @extern(*const fn (*SocketConnectable) callconv(.c) [*:0]u8, .{ .name = "g_socket_connectable_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [enumerate](https://docs.gtk.org/gio/vfunc.SocketConnectable.enumerate.html)
    pub fn enumerateV(self: *SocketConnectable) *gio.SocketAddressEnumerator {
        const class: *SocketConnectableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [proxy_enumerate](https://docs.gtk.org/gio/vfunc.SocketConnectable.proxy_enumerate.html)
    pub fn proxyEnumerateV(self: *SocketConnectable) *gio.SocketAddressEnumerator {
        const class: *SocketConnectableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.proxy_enumerate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [to_string](https://docs.gtk.org/gio/vfunc.SocketConnectable.to_string.html)
    pub fn toStringV(self: *SocketConnectable) [*:0]u8 {
        const class: *SocketConnectableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.to_string.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_connectable_get_type" });
        return cFn();
    }
};
/// Struct [SocketConnectableIface](https://docs.gtk.org/gio/struct.SocketConnectableIface.html)
pub const SocketConnectableIface = extern struct {
    g_iface: gobject.TypeInterface,
    enumerate: ?*const fn (_connectable: *gio.SocketConnectable) callconv(.c) *gio.SocketAddressEnumerator,
    proxy_enumerate: ?*const fn (_connectable: *gio.SocketConnectable) callconv(.c) *gio.SocketAddressEnumerator,
    to_string: ?*const fn (_connectable: *gio.SocketConnectable) callconv(.c) [*:0]u8,
};
/// Class [SocketConnection](https://docs.gtk.org/gio/class.SocketConnection.html)
/// - property [socket](https://docs.gtk.org/gio/property.SocketConnection.socket.html): (r-) `gio.Socket`
pub const SocketConnection = extern struct {
    parent_instance: gio.IOStream,
    priv: ?*gio.SocketConnectionPrivate,
    pub const Parent = gio.IOStream;
    pub const Class = gio.SocketConnectionClass;
    /// type func [factory_lookup_type](https://docs.gtk.org/gio/type_func.SocketConnection.factory_lookup_type.html)
    pub fn factoryLookupType(_family: gio.SocketFamily, _type: gio.SocketType, _protocol_id: i32) core.Type {
        const cFn = @extern(*const fn (gio.SocketFamily, gio.SocketType, i32) callconv(.c) core.Type, .{ .name = "g_socket_connection_factory_lookup_type" });
        const ret = cFn(_family, _type, _protocol_id);
        return ret;
    }
    /// type func [factory_register_type](https://docs.gtk.org/gio/type_func.SocketConnection.factory_register_type.html)
    pub fn factoryRegisterType(_g_type: core.Type, _family: gio.SocketFamily, _type: gio.SocketType, _protocol: i32) void {
        const cFn = @extern(*const fn (core.Type, gio.SocketFamily, gio.SocketType, i32) callconv(.c) void, .{ .name = "g_socket_connection_factory_register_type" });
        const ret = cFn(_g_type, _family, _type, _protocol);
        return ret;
    }
    /// method [connect](https://docs.gtk.org/gio/method.SocketConnection.connect.html)
    pub fn connect(self: *SocketConnection, _address: *gio.SocketAddress, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*SocketConnection, *gio.SocketAddress, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_connection_connect" });
        const ret = cFn(self, _address, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [connect_async](https://docs.gtk.org/gio/method.SocketConnection.connect_async.html)
    pub fn connectAsync(self: *SocketConnection, _address: *gio.SocketAddress, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketConnection, *gio.SocketAddress, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_connection_connect_async" });
        const ret = cFn(self, _address, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [connect_finish](https://docs.gtk.org/gio/method.SocketConnection.connect_finish.html)
    pub fn connectFinish(self: *SocketConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*SocketConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_connection_connect_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_local_address](https://docs.gtk.org/gio/method.SocketConnection.get_local_address.html)
    pub fn getLocalAddress(self: *SocketConnection, _error: *?*core.Error) error{GError}!*gio.SocketAddress {
        const cFn = @extern(*const fn (*SocketConnection, *?*core.Error) callconv(.c) *gio.SocketAddress, .{ .name = "g_socket_connection_get_local_address" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_remote_address](https://docs.gtk.org/gio/method.SocketConnection.get_remote_address.html)
    pub fn getRemoteAddress(self: *SocketConnection, _error: *?*core.Error) error{GError}!*gio.SocketAddress {
        const cFn = @extern(*const fn (*SocketConnection, *?*core.Error) callconv(.c) *gio.SocketAddress, .{ .name = "g_socket_connection_get_remote_address" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_socket](https://docs.gtk.org/gio/method.SocketConnection.get_socket.html)
    pub fn getSocket(self: *SocketConnection) *gio.Socket {
        const cFn = @extern(*const fn (*SocketConnection) callconv(.c) *gio.Socket, .{ .name = "g_socket_connection_get_socket" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_connected](https://docs.gtk.org/gio/method.SocketConnection.is_connected.html)
    pub fn isConnected(self: *SocketConnection) bool {
        const cFn = @extern(*const fn (*SocketConnection) callconv(.c) bool, .{ .name = "g_socket_connection_is_connected" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_connection_get_type" });
        return cFn();
    }
};
pub const SocketConnectionClass = extern struct {
    parent_class: gio.IOStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
};
pub const SocketConnectionPrivate = opaque {};
/// Class [SocketControlMessage](https://docs.gtk.org/gio/class.SocketControlMessage.html)
pub const SocketControlMessage = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SocketControlMessagePrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketControlMessageClass;
    /// type func [deserialize](https://docs.gtk.org/gio/type_func.SocketControlMessage.deserialize.html)
    pub fn deserialize(_level: i32, _type: i32, _datas: []u8) ?*gio.SocketControlMessage {
        const _size: u64 = @intCast(_datas.len);
        const _data = _datas.ptr;
        const cFn = @extern(*const fn (i32, i32, u64, [*]u8) callconv(.c) ?*gio.SocketControlMessage, .{ .name = "g_socket_control_message_deserialize" });
        const ret = cFn(_level, _type, _size, _data);
        return ret;
    }
    /// method [get_level](https://docs.gtk.org/gio/method.SocketControlMessage.get_level.html)
    pub fn getLevel(self: *SocketControlMessage) i32 {
        const cFn = @extern(*const fn (*SocketControlMessage) callconv(.c) i32, .{ .name = "g_socket_control_message_get_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_msg_type](https://docs.gtk.org/gio/method.SocketControlMessage.get_msg_type.html)
    pub fn getMsgType(self: *SocketControlMessage) i32 {
        const cFn = @extern(*const fn (*SocketControlMessage) callconv(.c) i32, .{ .name = "g_socket_control_message_get_msg_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gio/method.SocketControlMessage.get_size.html)
    pub fn getSize(self: *SocketControlMessage) u64 {
        const cFn = @extern(*const fn (*SocketControlMessage) callconv(.c) u64, .{ .name = "g_socket_control_message_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [serialize](https://docs.gtk.org/gio/method.SocketControlMessage.serialize.html)
    pub fn serialize(self: *SocketControlMessage, _data: *anyopaque) void {
        const cFn = @extern(*const fn (*SocketControlMessage, *anyopaque) callconv(.c) void, .{ .name = "g_socket_control_message_serialize" });
        const ret = cFn(self, @ptrCast(_data));
        return ret;
    }
    /// vfunc [get_level](https://docs.gtk.org/gio/vfunc.SocketControlMessage.get_level.html)
    pub fn getLevelV(self: *SocketControlMessage) i32 {
        const class: *SocketControlMessageClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_level.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_size](https://docs.gtk.org/gio/vfunc.SocketControlMessage.get_size.html)
    pub fn getSizeV(self: *SocketControlMessage) u64 {
        const class: *SocketControlMessageClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_size.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_type](https://docs.gtk.org/gio/vfunc.SocketControlMessage.get_type.html)
    pub fn getTypeV(self: *SocketControlMessage) i32 {
        const class: *SocketControlMessageClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_type.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [serialize](https://docs.gtk.org/gio/vfunc.SocketControlMessage.serialize.html)
    pub fn serializeV(self: *SocketControlMessage, _data: *anyopaque) void {
        const class: *SocketControlMessageClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.serialize.?;
        const ret = vFn(self, @ptrCast(_data));
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_control_message_get_type" });
        return cFn();
    }
};
pub const SocketControlMessageClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_size: ?*const fn (_message: *gio.SocketControlMessage) callconv(.c) u64,
    get_level: ?*const fn (_message: *gio.SocketControlMessage) callconv(.c) i32,
    get_type: ?*const fn (_message: *gio.SocketControlMessage) callconv(.c) i32,
    serialize: ?*const fn (_message: *gio.SocketControlMessage, _data: *anyopaque) callconv(.c) void,
    deserialize: ?*anyopaque,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const SocketControlMessagePrivate = opaque {};
/// Enum [SocketFamily](https://docs.gtk.org/gio/enum.SocketFamily.html)
pub const SocketFamily = enum(u32) {
    invalid = 0,
    unix = 1,
    ipv4 = 2,
    ipv6 = 10,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_family_get_type" });
        return cFn();
    }
};
/// Class [SocketListener](https://docs.gtk.org/gio/class.SocketListener.html)
/// - property [listen-backlog](https://docs.gtk.org/gio/property.SocketListener.listen-backlog.html): (rw) `i32`
pub const SocketListener = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.SocketListenerPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.SocketListenerClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SocketListener.new.html)
    pub fn new() *SocketListener {
        const cFn = @extern(*const fn () callconv(.c) *SocketListener, .{ .name = "g_socket_listener_new" });
        const ret = cFn();
        return ret;
    }
    /// method [accept](https://docs.gtk.org/gio/method.SocketListener.accept.html)
    pub fn accept(self: *SocketListener, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.SocketConnection,
        source_object: ?*gobject.Object,
    } {
        var source_object_out: ?*gobject.Object = undefined;
        const _source_object = &source_object_out;
        const cFn = @extern(*const fn (*SocketListener, ?*?*gobject.Object, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_listener_accept" });
        const ret = cFn(self, _source_object, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .source_object = source_object_out };
    }
    /// method [accept_async](https://docs.gtk.org/gio/method.SocketListener.accept_async.html)
    pub fn acceptAsync(self: *SocketListener, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketListener, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_listener_accept_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [accept_finish](https://docs.gtk.org/gio/method.SocketListener.accept_finish.html)
    pub fn acceptFinish(self: *SocketListener, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.SocketConnection,
        source_object: ?*gobject.Object,
    } {
        var source_object_out: ?*gobject.Object = undefined;
        const _source_object = &source_object_out;
        const cFn = @extern(*const fn (*SocketListener, *gio.AsyncResult, ?*?*gobject.Object, *?*core.Error) callconv(.c) *gio.SocketConnection, .{ .name = "g_socket_listener_accept_finish" });
        const ret = cFn(self, _result, _source_object, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .source_object = source_object_out };
    }
    /// method [accept_socket](https://docs.gtk.org/gio/method.SocketListener.accept_socket.html)
    pub fn acceptSocket(self: *SocketListener, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.Socket,
        source_object: ?*gobject.Object,
    } {
        var source_object_out: ?*gobject.Object = undefined;
        const _source_object = &source_object_out;
        const cFn = @extern(*const fn (*SocketListener, ?*?*gobject.Object, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.Socket, .{ .name = "g_socket_listener_accept_socket" });
        const ret = cFn(self, _source_object, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .source_object = source_object_out };
    }
    /// method [accept_socket_async](https://docs.gtk.org/gio/method.SocketListener.accept_socket_async.html)
    pub fn acceptSocketAsync(self: *SocketListener, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*SocketListener, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_socket_listener_accept_socket_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [accept_socket_finish](https://docs.gtk.org/gio/method.SocketListener.accept_socket_finish.html)
    pub fn acceptSocketFinish(self: *SocketListener, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: *gio.Socket,
        source_object: ?*gobject.Object,
    } {
        var source_object_out: ?*gobject.Object = undefined;
        const _source_object = &source_object_out;
        const cFn = @extern(*const fn (*SocketListener, *gio.AsyncResult, ?*?*gobject.Object, *?*core.Error) callconv(.c) *gio.Socket, .{ .name = "g_socket_listener_accept_socket_finish" });
        const ret = cFn(self, _result, _source_object, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .source_object = source_object_out };
    }
    /// method [add_address](https://docs.gtk.org/gio/method.SocketListener.add_address.html)
    pub fn addAddress(self: *SocketListener, _address: *gio.SocketAddress, _type: gio.SocketType, _protocol: gio.SocketProtocol, _source_object: ?*gobject.Object, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        effective_address: *gio.SocketAddress,
    } {
        var effective_address_out: *gio.SocketAddress = undefined;
        const _effective_address = &effective_address_out;
        const cFn = @extern(*const fn (*SocketListener, *gio.SocketAddress, gio.SocketType, gio.SocketProtocol, ?*gobject.Object, ?**gio.SocketAddress, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_listener_add_address" });
        const ret = cFn(self, _address, _type, _protocol, _source_object, _effective_address, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .effective_address = effective_address_out };
    }
    /// method [add_any_inet_port](https://docs.gtk.org/gio/method.SocketListener.add_any_inet_port.html)
    pub fn addAnyInetPort(self: *SocketListener, _source_object: ?*gobject.Object, _error: *?*core.Error) error{GError}!u16 {
        const cFn = @extern(*const fn (*SocketListener, ?*gobject.Object, *?*core.Error) callconv(.c) u16, .{ .name = "g_socket_listener_add_any_inet_port" });
        const ret = cFn(self, _source_object, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_inet_port](https://docs.gtk.org/gio/method.SocketListener.add_inet_port.html)
    pub fn addInetPort(self: *SocketListener, _port: u16, _source_object: ?*gobject.Object, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*SocketListener, u16, ?*gobject.Object, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_listener_add_inet_port" });
        const ret = cFn(self, _port, _source_object, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_socket](https://docs.gtk.org/gio/method.SocketListener.add_socket.html)
    pub fn addSocket(self: *SocketListener, _socket: *gio.Socket, _source_object: ?*gobject.Object, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*SocketListener, *gio.Socket, ?*gobject.Object, *?*core.Error) callconv(.c) bool, .{ .name = "g_socket_listener_add_socket" });
        const ret = cFn(self, _socket, _source_object, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.SocketListener.close.html)
    pub fn close(self: *SocketListener) void {
        const cFn = @extern(*const fn (*SocketListener) callconv(.c) void, .{ .name = "g_socket_listener_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_backlog](https://docs.gtk.org/gio/method.SocketListener.set_backlog.html)
    pub fn setBacklog(self: *SocketListener, _listen_backlog: i32) void {
        const cFn = @extern(*const fn (*SocketListener, i32) callconv(.c) void, .{ .name = "g_socket_listener_set_backlog" });
        const ret = cFn(self, _listen_backlog);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.SocketListener.changed.html)
    pub fn changedV(self: *SocketListener) void {
        const class: *SocketListenerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [event](https://docs.gtk.org/gio/vfunc.SocketListener.event.html)
    pub fn eventV(self: *SocketListener, _event: gio.SocketListenerEvent, _socket: *gio.Socket) void {
        const class: *SocketListenerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.event.?;
        const ret = vFn(self, _event, _socket);
        return ret;
    }
    /// signal [event](https://docs.gtk.org/gio/signal.SocketListener.event.html)
    pub fn connectEvent(self: *SocketListener, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("event", handler, args, flags, &.{ void, *SocketListener, gio.SocketListenerEvent, *gio.Socket });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_listener_get_type" });
        return cFn();
    }
};
pub const SocketListenerClass = extern struct {
    parent_class: gobject.ObjectClass,
    changed: ?*const fn (_listener: *gio.SocketListener) callconv(.c) void,
    event: ?*const fn (_listener: *gio.SocketListener, _event: gio.SocketListenerEvent, _socket: *gio.Socket) callconv(.c) void,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
};
/// Enum [SocketListenerEvent](https://docs.gtk.org/gio/enum.SocketListenerEvent.html)
pub const SocketListenerEvent = enum(u32) {
    binding = 0,
    bound = 1,
    listening = 2,
    listened = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_listener_event_get_type" });
        return cFn();
    }
};
pub const SocketListenerPrivate = opaque {};
/// Flags [SocketMsgFlags](https://docs.gtk.org/gio/flags.SocketMsgFlags.html)
pub const SocketMsgFlags = packed struct(u32) {
    oob: bool = false,
    peek: bool = false,
    dontroute: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_msg_flags_get_type" });
        return cFn();
    }
};
pub const SocketPrivate = opaque {};
/// Enum [SocketProtocol](https://docs.gtk.org/gio/enum.SocketProtocol.html)
pub const SocketProtocol = enum(i32) {
    unknown = -1,
    default = 0,
    tcp = 6,
    udp = 17,
    sctp = 132,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_protocol_get_type" });
        return cFn();
    }
};
/// Class [SocketService](https://docs.gtk.org/gio/class.SocketService.html)
/// - property [active](https://docs.gtk.org/gio/property.SocketService.active.html): (rw) `bool`
pub const SocketService = extern struct {
    parent_instance: gio.SocketListener,
    priv: ?*gio.SocketServicePrivate,
    pub const Parent = gio.SocketListener;
    pub const Class = gio.SocketServiceClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SocketService.new.html)
    pub fn new() *SocketService {
        const cFn = @extern(*const fn () callconv(.c) *SocketService, .{ .name = "g_socket_service_new" });
        const ret = cFn();
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gio/method.SocketService.is_active.html)
    pub fn isActive(self: *SocketService) bool {
        const cFn = @extern(*const fn (*SocketService) callconv(.c) bool, .{ .name = "g_socket_service_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [start](https://docs.gtk.org/gio/method.SocketService.start.html)
    pub fn start(self: *SocketService) void {
        const cFn = @extern(*const fn (*SocketService) callconv(.c) void, .{ .name = "g_socket_service_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gio/method.SocketService.stop.html)
    pub fn stop(self: *SocketService) void {
        const cFn = @extern(*const fn (*SocketService) callconv(.c) void, .{ .name = "g_socket_service_stop" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [incoming](https://docs.gtk.org/gio/vfunc.SocketService.incoming.html)
    pub fn incomingV(self: *SocketService, _connection: *gio.SocketConnection, _source_object: *gobject.Object) bool {
        const class: *SocketServiceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.incoming.?;
        const ret = vFn(self, _connection, _source_object);
        return ret;
    }
    /// signal [incoming](https://docs.gtk.org/gio/signal.SocketService.incoming.html)
    pub fn connectIncoming(self: *SocketService, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("incoming", handler, args, flags, &.{ bool, *SocketService, *gio.SocketConnection, *gobject.Object });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_service_get_type" });
        return cFn();
    }
};
pub const SocketServiceClass = extern struct {
    parent_class: gio.SocketListenerClass,
    incoming: ?*const fn (_service: *gio.SocketService, _connection: *gio.SocketConnection, _source_object: *gobject.Object) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
};
pub const SocketServicePrivate = opaque {};
/// callback [SocketSourceFunc](https://docs.gtk.org/gio/callback.SocketSourceFunc.html)
pub const SocketSourceFunc = *const fn (_socket: *gio.Socket, _condition: glib.IOCondition, _data: ?*anyopaque) callconv(.c) bool;
/// Enum [SocketType](https://docs.gtk.org/gio/enum.SocketType.html)
pub const SocketType = enum(u32) {
    invalid = 0,
    stream = 1,
    datagram = 2,
    seqpacket = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_socket_type_get_type" });
        return cFn();
    }
};
/// Struct [SrvTarget](https://docs.gtk.org/gio/struct.SrvTarget.html)
pub const SrvTarget = opaque {
    /// ctor [new](https://docs.gtk.org/gio/ctor.SrvTarget.new.html)
    pub fn new(_hostname: [*:0]const u8, _port: u16, _priority: u16, _weight: u16) *SrvTarget {
        const cFn = @extern(*const fn ([*:0]const u8, u16, u16, u16) callconv(.c) *SrvTarget, .{ .name = "g_srv_target_new" });
        const ret = cFn(_hostname, _port, _priority, _weight);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gio/method.SrvTarget.copy.html)
    pub fn copy(self: *SrvTarget) *gio.SrvTarget {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) *gio.SrvTarget, .{ .name = "g_srv_target_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gio/method.SrvTarget.free.html)
    pub fn free(self: *SrvTarget) void {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) void, .{ .name = "g_srv_target_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hostname](https://docs.gtk.org/gio/method.SrvTarget.get_hostname.html)
    pub fn getHostname(self: *SrvTarget) [*:0]u8 {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) [*:0]u8, .{ .name = "g_srv_target_get_hostname" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_port](https://docs.gtk.org/gio/method.SrvTarget.get_port.html)
    pub fn getPort(self: *SrvTarget) u16 {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) u16, .{ .name = "g_srv_target_get_port" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gio/method.SrvTarget.get_priority.html)
    pub fn getPriority(self: *SrvTarget) u16 {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) u16, .{ .name = "g_srv_target_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_weight](https://docs.gtk.org/gio/method.SrvTarget.get_weight.html)
    pub fn getWeight(self: *SrvTarget) u16 {
        const cFn = @extern(*const fn (*SrvTarget) callconv(.c) u16, .{ .name = "g_srv_target_get_weight" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_srv_target_get_type" });
        return cFn();
    }
};
/// Struct [StaticResource](https://docs.gtk.org/gio/struct.StaticResource.html)
pub const StaticResource = extern struct {
    data: ?*u8,
    data_len: u64,
    resource: ?*gio.Resource,
    next: ?*gio.StaticResource,
    padding: ?*anyopaque,
    /// method [fini](https://docs.gtk.org/gio/method.StaticResource.fini.html)
    pub fn fini(self: *StaticResource) void {
        const cFn = @extern(*const fn (*StaticResource) callconv(.c) void, .{ .name = "g_static_resource_fini" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resource](https://docs.gtk.org/gio/method.StaticResource.get_resource.html)
    pub fn getResource(self: *StaticResource) *gio.Resource {
        const cFn = @extern(*const fn (*StaticResource) callconv(.c) *gio.Resource, .{ .name = "g_static_resource_get_resource" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/gio/method.StaticResource.init.html)
    pub fn init(self: *StaticResource) void {
        const cFn = @extern(*const fn (*StaticResource) callconv(.c) void, .{ .name = "g_static_resource_init" });
        const ret = cFn(self);
        return ret;
    }
};
/// Class [Subprocess](https://docs.gtk.org/gio/class.Subprocess.html)
/// - property [argv](https://docs.gtk.org/gio/property.Subprocess.argv.html): (--) `[*:null]?[*:0]const u8`
/// - property [flags](https://docs.gtk.org/gio/property.Subprocess.flags.html): (--) `gio.SubprocessFlags`
pub const Subprocess = opaque {
    pub const Interfaces = [_]type{gio.Initable};
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Subprocess.new.html)
    pub fn new(_argv: [*:null]?[*:0]const u8, _flags: gio.SubprocessFlags, _error: *?*core.Error) error{GError}!*Subprocess {
        const cFn = @extern(*const fn ([*:null]?[*:0]const u8, gio.SubprocessFlags, *?*core.Error) callconv(.c) *Subprocess, .{ .name = "g_subprocess_newv" });
        const ret = cFn(_argv, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [communicate](https://docs.gtk.org/gio/method.Subprocess.communicate.html)
    pub fn communicate(self: *Subprocess, _stdin_buf: ?*glib.Bytes, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        stdout_buf: ?*glib.Bytes,
        stderr_buf: ?*glib.Bytes,
    } {
        var stdout_buf_out: ?*glib.Bytes = undefined;
        const _stdout_buf = &stdout_buf_out;
        var stderr_buf_out: ?*glib.Bytes = undefined;
        const _stderr_buf = &stderr_buf_out;
        const cFn = @extern(*const fn (*Subprocess, ?*glib.Bytes, ?*gio.Cancellable, ?*?*glib.Bytes, ?*?*glib.Bytes, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_communicate" });
        const ret = cFn(self, _stdin_buf, _cancellable, _stdout_buf, _stderr_buf, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .stdout_buf = stdout_buf_out, .stderr_buf = stderr_buf_out };
    }
    /// method [communicate_async](https://docs.gtk.org/gio/method.Subprocess.communicate_async.html)
    pub fn communicateAsync(self: *Subprocess, _stdin_buf: ?*glib.Bytes, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Subprocess, ?*glib.Bytes, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_subprocess_communicate_async" });
        const ret = cFn(self, _stdin_buf, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [communicate_finish](https://docs.gtk.org/gio/method.Subprocess.communicate_finish.html)
    pub fn communicateFinish(self: *Subprocess, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        stdout_buf: ?*glib.Bytes,
        stderr_buf: ?*glib.Bytes,
    } {
        var stdout_buf_out: ?*glib.Bytes = undefined;
        const _stdout_buf = &stdout_buf_out;
        var stderr_buf_out: ?*glib.Bytes = undefined;
        const _stderr_buf = &stderr_buf_out;
        const cFn = @extern(*const fn (*Subprocess, *gio.AsyncResult, ?*?*glib.Bytes, ?*?*glib.Bytes, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_communicate_finish" });
        const ret = cFn(self, _result, _stdout_buf, _stderr_buf, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .stdout_buf = stdout_buf_out, .stderr_buf = stderr_buf_out };
    }
    /// method [communicate_utf8](https://docs.gtk.org/gio/method.Subprocess.communicate_utf8.html)
    pub fn communicateUtf8(self: *Subprocess, _stdin_buf: ?[*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        stdout_buf: ?[*:0]u8,
        stderr_buf: ?[*:0]u8,
    } {
        var stdout_buf_out: ?[*:0]u8 = undefined;
        const _stdout_buf = &stdout_buf_out;
        var stderr_buf_out: ?[*:0]u8 = undefined;
        const _stderr_buf = &stderr_buf_out;
        const cFn = @extern(*const fn (*Subprocess, ?[*:0]const u8, ?*gio.Cancellable, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_communicate_utf8" });
        const ret = cFn(self, _stdin_buf, _cancellable, _stdout_buf, _stderr_buf, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .stdout_buf = stdout_buf_out, .stderr_buf = stderr_buf_out };
    }
    /// method [communicate_utf8_async](https://docs.gtk.org/gio/method.Subprocess.communicate_utf8_async.html)
    pub fn communicateUtf8Async(self: *Subprocess, _stdin_buf: ?[*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Subprocess, ?[*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_subprocess_communicate_utf8_async" });
        const ret = cFn(self, _stdin_buf, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [communicate_utf8_finish](https://docs.gtk.org/gio/method.Subprocess.communicate_utf8_finish.html)
    pub fn communicateUtf8Finish(self: *Subprocess, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        stdout_buf: ?[*:0]u8,
        stderr_buf: ?[*:0]u8,
    } {
        var stdout_buf_out: ?[*:0]u8 = undefined;
        const _stdout_buf = &stdout_buf_out;
        var stderr_buf_out: ?[*:0]u8 = undefined;
        const _stderr_buf = &stderr_buf_out;
        const cFn = @extern(*const fn (*Subprocess, *gio.AsyncResult, ?*?[*:0]u8, ?*?[*:0]u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_communicate_utf8_finish" });
        const ret = cFn(self, _result, _stdout_buf, _stderr_buf, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .stdout_buf = stdout_buf_out, .stderr_buf = stderr_buf_out };
    }
    /// method [force_exit](https://docs.gtk.org/gio/method.Subprocess.force_exit.html)
    pub fn forceExit(self: *Subprocess) void {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) void, .{ .name = "g_subprocess_force_exit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_exit_status](https://docs.gtk.org/gio/method.Subprocess.get_exit_status.html)
    pub fn getExitStatus(self: *Subprocess) i32 {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) i32, .{ .name = "g_subprocess_get_exit_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_identifier](https://docs.gtk.org/gio/method.Subprocess.get_identifier.html)
    pub fn getIdentifier(self: *Subprocess) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) ?[*:0]u8, .{ .name = "g_subprocess_get_identifier" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_if_exited](https://docs.gtk.org/gio/method.Subprocess.get_if_exited.html)
    pub fn getIfExited(self: *Subprocess) bool {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) bool, .{ .name = "g_subprocess_get_if_exited" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_if_signaled](https://docs.gtk.org/gio/method.Subprocess.get_if_signaled.html)
    pub fn getIfSignaled(self: *Subprocess) bool {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) bool, .{ .name = "g_subprocess_get_if_signaled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_status](https://docs.gtk.org/gio/method.Subprocess.get_status.html)
    pub fn getStatus(self: *Subprocess) i32 {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) i32, .{ .name = "g_subprocess_get_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stderr_pipe](https://docs.gtk.org/gio/method.Subprocess.get_stderr_pipe.html)
    pub fn getStderrPipe(self: *Subprocess) ?*gio.InputStream {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) ?*gio.InputStream, .{ .name = "g_subprocess_get_stderr_pipe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stdin_pipe](https://docs.gtk.org/gio/method.Subprocess.get_stdin_pipe.html)
    pub fn getStdinPipe(self: *Subprocess) ?*gio.OutputStream {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) ?*gio.OutputStream, .{ .name = "g_subprocess_get_stdin_pipe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stdout_pipe](https://docs.gtk.org/gio/method.Subprocess.get_stdout_pipe.html)
    pub fn getStdoutPipe(self: *Subprocess) ?*gio.InputStream {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) ?*gio.InputStream, .{ .name = "g_subprocess_get_stdout_pipe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_successful](https://docs.gtk.org/gio/method.Subprocess.get_successful.html)
    pub fn getSuccessful(self: *Subprocess) bool {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) bool, .{ .name = "g_subprocess_get_successful" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_term_sig](https://docs.gtk.org/gio/method.Subprocess.get_term_sig.html)
    pub fn getTermSig(self: *Subprocess) i32 {
        const cFn = @extern(*const fn (*Subprocess) callconv(.c) i32, .{ .name = "g_subprocess_get_term_sig" });
        const ret = cFn(self);
        return ret;
    }
    /// method [send_signal](https://docs.gtk.org/gio/method.Subprocess.send_signal.html)
    pub fn sendSignal(self: *Subprocess, _signal_num: i32) void {
        const cFn = @extern(*const fn (*Subprocess, i32) callconv(.c) void, .{ .name = "g_subprocess_send_signal" });
        const ret = cFn(self, _signal_num);
        return ret;
    }
    /// method [wait](https://docs.gtk.org/gio/method.Subprocess.wait.html)
    pub fn wait(self: *Subprocess, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Subprocess, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_wait" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [wait_async](https://docs.gtk.org/gio/method.Subprocess.wait_async.html)
    pub fn waitAsync(self: *Subprocess, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Subprocess, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_subprocess_wait_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [wait_check](https://docs.gtk.org/gio/method.Subprocess.wait_check.html)
    pub fn waitCheck(self: *Subprocess, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Subprocess, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_wait_check" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [wait_check_async](https://docs.gtk.org/gio/method.Subprocess.wait_check_async.html)
    pub fn waitCheckAsync(self: *Subprocess, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Subprocess, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_subprocess_wait_check_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [wait_check_finish](https://docs.gtk.org/gio/method.Subprocess.wait_check_finish.html)
    pub fn waitCheckFinish(self: *Subprocess, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Subprocess, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_wait_check_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [wait_finish](https://docs.gtk.org/gio/method.Subprocess.wait_finish.html)
    pub fn waitFinish(self: *Subprocess, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Subprocess, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_subprocess_wait_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_subprocess_get_type" });
        return cFn();
    }
};
/// Flags [SubprocessFlags](https://docs.gtk.org/gio/flags.SubprocessFlags.html)
pub const SubprocessFlags = packed struct(u32) {
    stdin_pipe: bool = false,
    stdin_inherit: bool = false,
    stdout_pipe: bool = false,
    stdout_silence: bool = false,
    stderr_pipe: bool = false,
    stderr_silence: bool = false,
    stderr_merge: bool = false,
    inherit_fds: bool = false,
    search_path_from_envp: bool = false,
    _: u23 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_subprocess_flags_get_type" });
        return cFn();
    }
};
/// Class [SubprocessLauncher](https://docs.gtk.org/gio/class.SubprocessLauncher.html)
/// - property [flags](https://docs.gtk.org/gio/property.SubprocessLauncher.flags.html): (--) `gio.SubprocessFlags`
pub const SubprocessLauncher = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.SubprocessLauncher.new.html)
    pub fn new(_flags: gio.SubprocessFlags) *SubprocessLauncher {
        const cFn = @extern(*const fn (gio.SubprocessFlags) callconv(.c) *SubprocessLauncher, .{ .name = "g_subprocess_launcher_new" });
        const ret = cFn(_flags);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gio/method.SubprocessLauncher.close.html)
    pub fn close(self: *SubprocessLauncher) void {
        const cFn = @extern(*const fn (*SubprocessLauncher) callconv(.c) void, .{ .name = "g_subprocess_launcher_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [getenv](https://docs.gtk.org/gio/method.SubprocessLauncher.getenv.html)
    pub fn getenv(self: *SubprocessLauncher, _variable: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_subprocess_launcher_getenv" });
        const ret = cFn(self, _variable);
        return ret;
    }
    /// method [set_cwd](https://docs.gtk.org/gio/method.SubprocessLauncher.set_cwd.html)
    pub fn setCwd(self: *SubprocessLauncher, _cwd: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_cwd" });
        const ret = cFn(self, _cwd);
        return ret;
    }
    /// method [set_environ](https://docs.gtk.org/gio/method.SubprocessLauncher.set_environ.html)
    pub fn setEnviron(self: *SubprocessLauncher, _env: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_environ" });
        const ret = cFn(self, _env);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.SubprocessLauncher.set_flags.html)
    pub fn setFlags(self: *SubprocessLauncher, _flags: gio.SubprocessFlags) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, gio.SubprocessFlags) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_stderr_file_path](https://docs.gtk.org/gio/method.SubprocessLauncher.set_stderr_file_path.html)
    pub fn setStderrFilePath(self: *SubprocessLauncher, _path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_stderr_file_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [set_stdin_file_path](https://docs.gtk.org/gio/method.SubprocessLauncher.set_stdin_file_path.html)
    pub fn setStdinFilePath(self: *SubprocessLauncher, _path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_stdin_file_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [set_stdout_file_path](https://docs.gtk.org/gio/method.SubprocessLauncher.set_stdout_file_path.html)
    pub fn setStdoutFilePath(self: *SubprocessLauncher, _path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_set_stdout_file_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [setenv](https://docs.gtk.org/gio/method.SubprocessLauncher.setenv.html)
    pub fn setenv(self: *SubprocessLauncher, _variable: [*:0]const u8, _value: [*:0]const u8, _overwrite: bool) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:0]const u8, [*:0]const u8, bool) callconv(.c) void, .{ .name = "g_subprocess_launcher_setenv" });
        const ret = cFn(self, _variable, _value, _overwrite);
        return ret;
    }
    /// method [spawnv](https://docs.gtk.org/gio/method.SubprocessLauncher.spawnv.html)
    pub fn spawnv(self: *SubprocessLauncher, _argv: [*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!*gio.Subprocess {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:null]?[*:0]const u8, *?*core.Error) callconv(.c) *gio.Subprocess, .{ .name = "g_subprocess_launcher_spawnv" });
        const ret = cFn(self, _argv, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [take_fd](https://docs.gtk.org/gio/method.SubprocessLauncher.take_fd.html)
    pub fn takeFd(self: *SubprocessLauncher, _source_fd: i32, _target_fd: i32) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, i32, i32) callconv(.c) void, .{ .name = "g_subprocess_launcher_take_fd" });
        const ret = cFn(self, _source_fd, _target_fd);
        return ret;
    }
    /// method [take_stderr_fd](https://docs.gtk.org/gio/method.SubprocessLauncher.take_stderr_fd.html)
    pub fn takeStderrFd(self: *SubprocessLauncher, _fd: i32) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, i32) callconv(.c) void, .{ .name = "g_subprocess_launcher_take_stderr_fd" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [take_stdin_fd](https://docs.gtk.org/gio/method.SubprocessLauncher.take_stdin_fd.html)
    pub fn takeStdinFd(self: *SubprocessLauncher, _fd: i32) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, i32) callconv(.c) void, .{ .name = "g_subprocess_launcher_take_stdin_fd" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [take_stdout_fd](https://docs.gtk.org/gio/method.SubprocessLauncher.take_stdout_fd.html)
    pub fn takeStdoutFd(self: *SubprocessLauncher, _fd: i32) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, i32) callconv(.c) void, .{ .name = "g_subprocess_launcher_take_stdout_fd" });
        const ret = cFn(self, _fd);
        return ret;
    }
    /// method [unsetenv](https://docs.gtk.org/gio/method.SubprocessLauncher.unsetenv.html)
    pub fn unsetenv(self: *SubprocessLauncher, _variable: [*:0]const u8) void {
        const cFn = @extern(*const fn (*SubprocessLauncher, [*:0]const u8) callconv(.c) void, .{ .name = "g_subprocess_launcher_unsetenv" });
        const ret = cFn(self, _variable);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_subprocess_launcher_get_type" });
        return cFn();
    }
};
/// const [TLS_BACKEND_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.TLS_BACKEND_EXTENSION_POINT_NAME.html)
pub const TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend";
/// const [TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT](https://docs.gtk.org/gio/const.TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT.html)
pub const TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2";
/// const [TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER](https://docs.gtk.org/gio/const.TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER.html)
pub const TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1";
/// Class [Task](https://docs.gtk.org/gio/class.Task.html)
/// - property [completed](https://docs.gtk.org/gio/property.Task.completed.html): (r-) `bool`
pub const Task = opaque {
    pub const Interfaces = [_]type{gio.AsyncResult};
    pub const Parent = gobject.Object;
    pub const Class = gio.TaskClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.Task.new.html)
    pub fn new(_source_object: ?*gobject.Object, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) *Task {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _callback_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?*gobject.Object, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) *Task, .{ .name = "g_task_new" });
        const ret = cFn(_source_object, _cancellable, _callback, @ptrCast(_callback_data));
        return ret;
    }
    /// type func [is_valid](https://docs.gtk.org/gio/type_func.Task.is_valid.html)
    pub fn isValid(_result: *gio.AsyncResult, _source_object: ?*gobject.Object) bool {
        const cFn = @extern(*const fn (*gio.AsyncResult, ?*gobject.Object) callconv(.c) bool, .{ .name = "g_task_is_valid" });
        const ret = cFn(_result, _source_object);
        return ret;
    }
    /// type func [report_error](https://docs.gtk.org/gio/type_func.Task.report_error.html)
    pub fn reportError(_source_object: ?*gobject.Object, callback: anytype, callback_args: anytype, _source_tag: ?*anyopaque, _error: *core.Error) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _callback_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?*gobject.Object, ?gio.AsyncReadyCallback, ?*anyopaque, ?*anyopaque, *core.Error) callconv(.c) void, .{ .name = "g_task_report_error" });
        const ret = cFn(_source_object, _callback, @ptrCast(_callback_data), @ptrCast(_source_tag), _error);
        return ret;
    }
    /// method [get_cancellable](https://docs.gtk.org/gio/method.Task.get_cancellable.html)
    pub fn getCancellable(self: *Task) ?*gio.Cancellable {
        const cFn = @extern(*const fn (*Task) callconv(.c) ?*gio.Cancellable, .{ .name = "g_task_get_cancellable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_check_cancellable](https://docs.gtk.org/gio/method.Task.get_check_cancellable.html)
    pub fn getCheckCancellable(self: *Task) bool {
        const cFn = @extern(*const fn (*Task) callconv(.c) bool, .{ .name = "g_task_get_check_cancellable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_completed](https://docs.gtk.org/gio/method.Task.get_completed.html)
    pub fn getCompleted(self: *Task) bool {
        const cFn = @extern(*const fn (*Task) callconv(.c) bool, .{ .name = "g_task_get_completed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/gio/method.Task.get_context.html)
    pub fn getContext(self: *Task) *glib.MainContext {
        const cFn = @extern(*const fn (*Task) callconv(.c) *glib.MainContext, .{ .name = "g_task_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.Task.get_name.html)
    pub fn getName(self: *Task) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Task) callconv(.c) ?[*:0]u8, .{ .name = "g_task_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gio/method.Task.get_priority.html)
    pub fn getPriority(self: *Task) i32 {
        const cFn = @extern(*const fn (*Task) callconv(.c) i32, .{ .name = "g_task_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_return_on_cancel](https://docs.gtk.org/gio/method.Task.get_return_on_cancel.html)
    pub fn getReturnOnCancel(self: *Task) bool {
        const cFn = @extern(*const fn (*Task) callconv(.c) bool, .{ .name = "g_task_get_return_on_cancel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_source_object](https://docs.gtk.org/gio/method.Task.get_source_object.html)
    pub fn getSourceObject(self: *Task) ?*gobject.Object {
        const cFn = @extern(*const fn (*Task) callconv(.c) ?*gobject.Object, .{ .name = "g_task_get_source_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_source_tag](https://docs.gtk.org/gio/method.Task.get_source_tag.html)
    pub fn getSourceTag(self: *Task) ?*anyopaque {
        const cFn = @extern(*const fn (*Task) callconv(.c) ?*anyopaque, .{ .name = "g_task_get_source_tag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_task_data](https://docs.gtk.org/gio/method.Task.get_task_data.html)
    pub fn getTaskData(self: *Task) ?*anyopaque {
        const cFn = @extern(*const fn (*Task) callconv(.c) ?*anyopaque, .{ .name = "g_task_get_task_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [had_error](https://docs.gtk.org/gio/method.Task.had_error.html)
    pub fn hadError(self: *Task) bool {
        const cFn = @extern(*const fn (*Task) callconv(.c) bool, .{ .name = "g_task_had_error" });
        const ret = cFn(self);
        return ret;
    }
    /// method [propagate_boolean](https://docs.gtk.org/gio/method.Task.propagate_boolean.html)
    pub fn propagateBoolean(self: *Task, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Task, *?*core.Error) callconv(.c) bool, .{ .name = "g_task_propagate_boolean" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [propagate_int](https://docs.gtk.org/gio/method.Task.propagate_int.html)
    pub fn propagateInt(self: *Task, _error: *?*core.Error) error{GError}!i64 {
        const cFn = @extern(*const fn (*Task, *?*core.Error) callconv(.c) i64, .{ .name = "g_task_propagate_int" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [propagate_pointer](https://docs.gtk.org/gio/method.Task.propagate_pointer.html)
    pub fn propagatePointer(self: *Task, _error: *?*core.Error) error{GError}!?*anyopaque {
        const cFn = @extern(*const fn (*Task, *?*core.Error) callconv(.c) ?*anyopaque, .{ .name = "g_task_propagate_pointer" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [propagate_value](https://docs.gtk.org/gio/method.Task.propagate_value.html)
    pub fn propagateValue(self: *Task, _value: *gobject.Value, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Task, *gobject.Value, *?*core.Error) callconv(.c) bool, .{ .name = "g_task_propagate_value" });
        const ret = cFn(self, _value, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [return_boolean](https://docs.gtk.org/gio/method.Task.return_boolean.html)
    pub fn returnBoolean(self: *Task, _result: bool) void {
        const cFn = @extern(*const fn (*Task, bool) callconv(.c) void, .{ .name = "g_task_return_boolean" });
        const ret = cFn(self, _result);
        return ret;
    }
    /// method [return_error](https://docs.gtk.org/gio/method.Task.return_error.html)
    pub fn returnError(self: *Task, _error: *core.Error) void {
        const cFn = @extern(*const fn (*Task, *core.Error) callconv(.c) void, .{ .name = "g_task_return_error" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [return_error_if_cancelled](https://docs.gtk.org/gio/method.Task.return_error_if_cancelled.html)
    pub fn returnErrorIfCancelled(self: *Task) bool {
        const cFn = @extern(*const fn (*Task) callconv(.c) bool, .{ .name = "g_task_return_error_if_cancelled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [return_int](https://docs.gtk.org/gio/method.Task.return_int.html)
    pub fn returnInt(self: *Task, _result: i64) void {
        const cFn = @extern(*const fn (*Task, i64) callconv(.c) void, .{ .name = "g_task_return_int" });
        const ret = cFn(self, _result);
        return ret;
    }
    /// method [return_new_error_literal](https://docs.gtk.org/gio/method.Task.return_new_error_literal.html)
    pub fn returnNewErrorLiteral(self: *Task, _domain: u32, _code: i32, _message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Task, u32, i32, [*:0]const u8) callconv(.c) void, .{ .name = "g_task_return_new_error_literal" });
        const ret = cFn(self, _domain, _code, _message);
        return ret;
    }
    /// method [return_pointer](https://docs.gtk.org/gio/method.Task.return_pointer.html)
    pub fn returnPointer(self: *Task, _result: ?*anyopaque, _result_destroy: ?glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*Task, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_task_return_pointer" });
        const ret = cFn(self, @ptrCast(_result), _result_destroy);
        return ret;
    }
    /// method [return_value](https://docs.gtk.org/gio/method.Task.return_value.html)
    pub fn returnValue(self: *Task, _result: ?*gobject.Value) void {
        const cFn = @extern(*const fn (*Task, ?*gobject.Value) callconv(.c) void, .{ .name = "g_task_return_value" });
        const ret = cFn(self, _result);
        return ret;
    }
    /// method [run_in_thread](https://docs.gtk.org/gio/method.Task.run_in_thread.html)
    pub fn runInThread(self: *Task, _task_func: gio.TaskThreadFunc) void {
        const cFn = @extern(*const fn (*Task, gio.TaskThreadFunc) callconv(.c) void, .{ .name = "g_task_run_in_thread" });
        const ret = cFn(self, _task_func);
        return ret;
    }
    /// method [run_in_thread_sync](https://docs.gtk.org/gio/method.Task.run_in_thread_sync.html)
    pub fn runInThreadSync(self: *Task, _task_func: gio.TaskThreadFunc) void {
        const cFn = @extern(*const fn (*Task, gio.TaskThreadFunc) callconv(.c) void, .{ .name = "g_task_run_in_thread_sync" });
        const ret = cFn(self, _task_func);
        return ret;
    }
    /// method [set_check_cancellable](https://docs.gtk.org/gio/method.Task.set_check_cancellable.html)
    pub fn setCheckCancellable(self: *Task, _check_cancellable: bool) void {
        const cFn = @extern(*const fn (*Task, bool) callconv(.c) void, .{ .name = "g_task_set_check_cancellable" });
        const ret = cFn(self, _check_cancellable);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gio/method.Task.set_name.html)
    pub fn setName(self: *Task, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Task, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_task_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_priority](https://docs.gtk.org/gio/method.Task.set_priority.html)
    pub fn setPriority(self: *Task, _priority: i32) void {
        const cFn = @extern(*const fn (*Task, i32) callconv(.c) void, .{ .name = "g_task_set_priority" });
        const ret = cFn(self, _priority);
        return ret;
    }
    /// method [set_return_on_cancel](https://docs.gtk.org/gio/method.Task.set_return_on_cancel.html)
    pub fn setReturnOnCancel(self: *Task, _return_on_cancel: bool) bool {
        const cFn = @extern(*const fn (*Task, bool) callconv(.c) bool, .{ .name = "g_task_set_return_on_cancel" });
        const ret = cFn(self, _return_on_cancel);
        return ret;
    }
    /// method [set_source_tag](https://docs.gtk.org/gio/method.Task.set_source_tag.html)
    pub fn setSourceTag(self: *Task, _source_tag: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Task, ?*anyopaque) callconv(.c) void, .{ .name = "g_task_set_source_tag" });
        const ret = cFn(self, @ptrCast(_source_tag));
        return ret;
    }
    /// method [set_static_name](https://docs.gtk.org/gio/method.Task.set_static_name.html)
    pub fn setStaticName(self: *Task, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Task, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_task_set_static_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_task_data](https://docs.gtk.org/gio/method.Task.set_task_data.html)
    pub fn setTaskData(self: *Task, _task_data: ?*anyopaque, _task_data_destroy: ?glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*Task, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_task_set_task_data" });
        const ret = cFn(self, @ptrCast(_task_data), _task_data_destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_task_get_type" });
        return cFn();
    }
};
pub const TaskClass = opaque {};
/// callback [TaskThreadFunc](https://docs.gtk.org/gio/callback.TaskThreadFunc.html)
pub const TaskThreadFunc = *const fn (_task: *gio.Task, _source_object: *gobject.Object, _task_data: ?*anyopaque, _cancellable: ?*gio.Cancellable) callconv(.c) void;
/// Class [TcpConnection](https://docs.gtk.org/gio/class.TcpConnection.html)
/// - property [graceful-disconnect](https://docs.gtk.org/gio/property.TcpConnection.graceful-disconnect.html): (rw) `bool`
pub const TcpConnection = extern struct {
    parent_instance: gio.SocketConnection,
    priv: ?*gio.TcpConnectionPrivate,
    pub const Parent = gio.SocketConnection;
    pub const Class = gio.TcpConnectionClass;
    /// method [get_graceful_disconnect](https://docs.gtk.org/gio/method.TcpConnection.get_graceful_disconnect.html)
    pub fn getGracefulDisconnect(self: *TcpConnection) bool {
        const cFn = @extern(*const fn (*TcpConnection) callconv(.c) bool, .{ .name = "g_tcp_connection_get_graceful_disconnect" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_graceful_disconnect](https://docs.gtk.org/gio/method.TcpConnection.set_graceful_disconnect.html)
    pub fn setGracefulDisconnect(self: *TcpConnection, _graceful_disconnect: bool) void {
        const cFn = @extern(*const fn (*TcpConnection, bool) callconv(.c) void, .{ .name = "g_tcp_connection_set_graceful_disconnect" });
        const ret = cFn(self, _graceful_disconnect);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tcp_connection_get_type" });
        return cFn();
    }
};
pub const TcpConnectionClass = extern struct {
    parent_class: gio.SocketConnectionClass,
};
pub const TcpConnectionPrivate = opaque {};
/// Class [TcpWrapperConnection](https://docs.gtk.org/gio/class.TcpWrapperConnection.html)
/// - property [base-io-stream](https://docs.gtk.org/gio/property.TcpWrapperConnection.base-io-stream.html): (r-) `gio.IOStream`
pub const TcpWrapperConnection = extern struct {
    parent_instance: gio.TcpConnection,
    priv: ?*gio.TcpWrapperConnectionPrivate,
    pub const Parent = gio.TcpConnection;
    pub const Class = gio.TcpWrapperConnectionClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.TcpWrapperConnection.new.html)
    pub fn new(_base_io_stream: *gio.IOStream, _socket: *gio.Socket) *TcpWrapperConnection {
        const cFn = @extern(*const fn (*gio.IOStream, *gio.Socket) callconv(.c) *TcpWrapperConnection, .{ .name = "g_tcp_wrapper_connection_new" });
        const ret = cFn(_base_io_stream, _socket);
        return ret;
    }
    /// method [get_base_io_stream](https://docs.gtk.org/gio/method.TcpWrapperConnection.get_base_io_stream.html)
    pub fn getBaseIoStream(self: *TcpWrapperConnection) *gio.IOStream {
        const cFn = @extern(*const fn (*TcpWrapperConnection) callconv(.c) *gio.IOStream, .{ .name = "g_tcp_wrapper_connection_get_base_io_stream" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tcp_wrapper_connection_get_type" });
        return cFn();
    }
};
pub const TcpWrapperConnectionClass = extern struct {
    parent_class: gio.TcpConnectionClass,
};
pub const TcpWrapperConnectionPrivate = opaque {};
/// Class [TestDBus](https://docs.gtk.org/gio/class.TestDBus.html)
/// - property [flags](https://docs.gtk.org/gio/property.TestDBus.flags.html): (r-) `gio.TestDBusFlags`
pub const TestDBus = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gio/ctor.TestDBus.new.html)
    pub fn new(_flags: gio.TestDBusFlags) *TestDBus {
        const cFn = @extern(*const fn (gio.TestDBusFlags) callconv(.c) *TestDBus, .{ .name = "g_test_dbus_new" });
        const ret = cFn(_flags);
        return ret;
    }
    /// type func [unset](https://docs.gtk.org/gio/type_func.TestDBus.unset.html)
    pub fn unset() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_test_dbus_unset" });
        const ret = cFn();
        return ret;
    }
    /// method [add_service_dir](https://docs.gtk.org/gio/method.TestDBus.add_service_dir.html)
    pub fn addServiceDir(self: *TestDBus, _path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*TestDBus, [*:0]const u8) callconv(.c) void, .{ .name = "g_test_dbus_add_service_dir" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [down](https://docs.gtk.org/gio/method.TestDBus.down.html)
    pub fn down(self: *TestDBus) void {
        const cFn = @extern(*const fn (*TestDBus) callconv(.c) void, .{ .name = "g_test_dbus_down" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bus_address](https://docs.gtk.org/gio/method.TestDBus.get_bus_address.html)
    pub fn getBusAddress(self: *TestDBus) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TestDBus) callconv(.c) ?[*:0]u8, .{ .name = "g_test_dbus_get_bus_address" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.TestDBus.get_flags.html)
    pub fn getFlags(self: *TestDBus) gio.TestDBusFlags {
        const cFn = @extern(*const fn (*TestDBus) callconv(.c) gio.TestDBusFlags, .{ .name = "g_test_dbus_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gio/method.TestDBus.stop.html)
    pub fn stop(self: *TestDBus) void {
        const cFn = @extern(*const fn (*TestDBus) callconv(.c) void, .{ .name = "g_test_dbus_stop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [up](https://docs.gtk.org/gio/method.TestDBus.up.html)
    pub fn up(self: *TestDBus) void {
        const cFn = @extern(*const fn (*TestDBus) callconv(.c) void, .{ .name = "g_test_dbus_up" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_test_dbus_get_type" });
        return cFn();
    }
};
/// Flags [TestDBusFlags](https://docs.gtk.org/gio/flags.TestDBusFlags.html)
pub const TestDBusFlags = packed struct(u32) {
    _: u32 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_test_dbus_flags_get_type" });
        return cFn();
    }
};
/// Class [ThemedIcon](https://docs.gtk.org/gio/class.ThemedIcon.html)
/// - property [name](https://docs.gtk.org/gio/property.ThemedIcon.name.html): (--) `[*:0]const u8`
/// - property [names](https://docs.gtk.org/gio/property.ThemedIcon.names.html): (r-) `[*:null]?[*:0]const u8`
/// - property [use-default-fallbacks](https://docs.gtk.org/gio/property.ThemedIcon.use-default-fallbacks.html): (r-) `bool`
pub const ThemedIcon = opaque {
    pub const Interfaces = [_]type{gio.Icon};
    pub const Parent = gobject.Object;
    pub const Class = gio.ThemedIconClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ThemedIcon.new.html)
    pub fn new(_iconname: [*:0]const u8) *ThemedIcon {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *ThemedIcon, .{ .name = "g_themed_icon_new" });
        const ret = cFn(_iconname);
        return ret;
    }
    /// ctor [new_from_names](https://docs.gtk.org/gio/ctor.ThemedIcon.new_from_names.html)
    pub fn newFromNames(_iconnamess: [][*:0]const u8) *ThemedIcon {
        const _iconnames = _iconnamess.ptr;
        const _len: i32 = @intCast(_iconnamess.len);
        const cFn = @extern(*const fn ([*][*:0]const u8, i32) callconv(.c) *ThemedIcon, .{ .name = "g_themed_icon_new_from_names" });
        const ret = cFn(_iconnames, _len);
        return ret;
    }
    /// ctor [new_with_default_fallbacks](https://docs.gtk.org/gio/ctor.ThemedIcon.new_with_default_fallbacks.html)
    pub fn newWithDefaultFallbacks(_iconname: [*:0]const u8) *ThemedIcon {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *ThemedIcon, .{ .name = "g_themed_icon_new_with_default_fallbacks" });
        const ret = cFn(_iconname);
        return ret;
    }
    /// method [append_name](https://docs.gtk.org/gio/method.ThemedIcon.append_name.html)
    pub fn appendName(self: *ThemedIcon, _iconname: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ThemedIcon, [*:0]const u8) callconv(.c) void, .{ .name = "g_themed_icon_append_name" });
        const ret = cFn(self, _iconname);
        return ret;
    }
    /// method [get_names](https://docs.gtk.org/gio/method.ThemedIcon.get_names.html)
    pub fn getNames(self: *ThemedIcon) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*ThemedIcon) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_themed_icon_get_names" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prepend_name](https://docs.gtk.org/gio/method.ThemedIcon.prepend_name.html)
    pub fn prependName(self: *ThemedIcon, _iconname: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ThemedIcon, [*:0]const u8) callconv(.c) void, .{ .name = "g_themed_icon_prepend_name" });
        const ret = cFn(self, _iconname);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_themed_icon_get_type" });
        return cFn();
    }
};
pub const ThemedIconClass = opaque {};
/// Class [ThreadedResolver](https://docs.gtk.org/gio/class.ThreadedResolver.html)
pub const ThreadedResolver = opaque {
    pub const Parent = gio.Resolver;
    pub const Class = gio.ThreadedResolverClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_threaded_resolver_get_type" });
        return cFn();
    }
};
pub const ThreadedResolverClass = extern struct {
    parent_class: gio.ResolverClass,
};
/// Class [ThreadedSocketService](https://docs.gtk.org/gio/class.ThreadedSocketService.html)
/// - property [max-threads](https://docs.gtk.org/gio/property.ThreadedSocketService.max-threads.html): (r-) `i32`
pub const ThreadedSocketService = extern struct {
    parent_instance: gio.SocketService,
    priv: ?*gio.ThreadedSocketServicePrivate,
    pub const Parent = gio.SocketService;
    pub const Class = gio.ThreadedSocketServiceClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ThreadedSocketService.new.html)
    pub fn new(_max_threads: i32) *ThreadedSocketService {
        const cFn = @extern(*const fn (i32) callconv(.c) *ThreadedSocketService, .{ .name = "g_threaded_socket_service_new" });
        const ret = cFn(_max_threads);
        return ret;
    }
    /// vfunc [run](https://docs.gtk.org/gio/vfunc.ThreadedSocketService.run.html)
    pub fn runV(self: *ThreadedSocketService, _connection: *gio.SocketConnection, _source_object: *gobject.Object) bool {
        const class: *ThreadedSocketServiceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.run.?;
        const ret = vFn(self, _connection, _source_object);
        return ret;
    }
    /// signal [run](https://docs.gtk.org/gio/signal.ThreadedSocketService.run.html)
    pub fn connectRun(self: *ThreadedSocketService, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("run", handler, args, flags, &.{ bool, *ThreadedSocketService, *gio.SocketConnection, *gobject.Object });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_threaded_socket_service_get_type" });
        return cFn();
    }
};
pub const ThreadedSocketServiceClass = extern struct {
    parent_class: gio.SocketServiceClass,
    run: ?*const fn (_service: *gio.ThreadedSocketService, _connection: *gio.SocketConnection, _source_object: *gobject.Object) callconv(.c) bool,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const ThreadedSocketServicePrivate = opaque {};
/// Enum [TlsAuthenticationMode](https://docs.gtk.org/gio/enum.TlsAuthenticationMode.html)
pub const TlsAuthenticationMode = enum(u32) {
    none = 0,
    requested = 1,
    required = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_authentication_mode_get_type" });
        return cFn();
    }
};
/// Iface [TlsBackend](https://docs.gtk.org/gio/iface.TlsBackend.html)
pub const TlsBackend = opaque {
    /// type func [get_default](https://docs.gtk.org/gio/type_func.TlsBackend.get_default.html)
    pub fn getDefault() *gio.TlsBackend {
        const cFn = @extern(*const fn () callconv(.c) *gio.TlsBackend, .{ .name = "g_tls_backend_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [get_certificate_type](https://docs.gtk.org/gio/method.TlsBackend.get_certificate_type.html)
    pub fn getCertificateType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_certificate_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_client_connection_type](https://docs.gtk.org/gio/method.TlsBackend.get_client_connection_type.html)
    pub fn getClientConnectionType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_client_connection_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_database](https://docs.gtk.org/gio/method.TlsBackend.get_default_database.html)
    pub fn getDefaultDatabase(self: *TlsBackend) *gio.TlsDatabase {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) *gio.TlsDatabase, .{ .name = "g_tls_backend_get_default_database" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dtls_client_connection_type](https://docs.gtk.org/gio/method.TlsBackend.get_dtls_client_connection_type.html)
    pub fn getDtlsClientConnectionType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_dtls_client_connection_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dtls_server_connection_type](https://docs.gtk.org/gio/method.TlsBackend.get_dtls_server_connection_type.html)
    pub fn getDtlsServerConnectionType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_dtls_server_connection_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file_database_type](https://docs.gtk.org/gio/method.TlsBackend.get_file_database_type.html)
    pub fn getFileDatabaseType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_file_database_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_server_connection_type](https://docs.gtk.org/gio/method.TlsBackend.get_server_connection_type.html)
    pub fn getServerConnectionType(self: *TlsBackend) core.Type {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) core.Type, .{ .name = "g_tls_backend_get_server_connection_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_default_database](https://docs.gtk.org/gio/method.TlsBackend.set_default_database.html)
    pub fn setDefaultDatabase(self: *TlsBackend, _database: ?*gio.TlsDatabase) void {
        const cFn = @extern(*const fn (*TlsBackend, ?*gio.TlsDatabase) callconv(.c) void, .{ .name = "g_tls_backend_set_default_database" });
        const ret = cFn(self, _database);
        return ret;
    }
    /// method [supports_dtls](https://docs.gtk.org/gio/method.TlsBackend.supports_dtls.html)
    pub fn supportsDtls(self: *TlsBackend) bool {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) bool, .{ .name = "g_tls_backend_supports_dtls" });
        const ret = cFn(self);
        return ret;
    }
    /// method [supports_tls](https://docs.gtk.org/gio/method.TlsBackend.supports_tls.html)
    pub fn supportsTls(self: *TlsBackend) bool {
        const cFn = @extern(*const fn (*TlsBackend) callconv(.c) bool, .{ .name = "g_tls_backend_supports_tls" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_default_database](https://docs.gtk.org/gio/vfunc.TlsBackend.get_default_database.html)
    pub fn getDefaultDatabaseV(self: *TlsBackend) *gio.TlsDatabase {
        const class: *TlsBackendInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_default_database.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [supports_dtls](https://docs.gtk.org/gio/vfunc.TlsBackend.supports_dtls.html)
    pub fn supportsDtlsV(self: *TlsBackend) bool {
        const class: *TlsBackendInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.supports_dtls.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [supports_tls](https://docs.gtk.org/gio/vfunc.TlsBackend.supports_tls.html)
    pub fn supportsTlsV(self: *TlsBackend) bool {
        const class: *TlsBackendInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.supports_tls.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_backend_get_type" });
        return cFn();
    }
};
pub const TlsBackendInterface = extern struct {
    g_iface: gobject.TypeInterface,
    supports_tls: ?*const fn (_backend: *gio.TlsBackend) callconv(.c) bool,
    get_certificate_type: ?*const fn () callconv(.c) core.Type,
    get_client_connection_type: ?*const fn () callconv(.c) core.Type,
    get_server_connection_type: ?*const fn () callconv(.c) core.Type,
    get_file_database_type: ?*const fn () callconv(.c) core.Type,
    get_default_database: ?*const fn (_backend: *gio.TlsBackend) callconv(.c) *gio.TlsDatabase,
    supports_dtls: ?*const fn (_backend: *gio.TlsBackend) callconv(.c) bool,
    get_dtls_client_connection_type: ?*const fn () callconv(.c) core.Type,
    get_dtls_server_connection_type: ?*const fn () callconv(.c) core.Type,
};
/// Class [TlsCertificate](https://docs.gtk.org/gio/class.TlsCertificate.html)
/// - property [certificate](https://docs.gtk.org/gio/property.TlsCertificate.certificate.html): (r-) `*core.ByteArray`
/// - property [certificate-pem](https://docs.gtk.org/gio/property.TlsCertificate.certificate-pem.html): (r-) `[*:0]const u8`
/// - property [dns-names](https://docs.gtk.org/gio/property.TlsCertificate.dns-names.html): (r-) `*core.PtrArray`
/// - property [ip-addresses](https://docs.gtk.org/gio/property.TlsCertificate.ip-addresses.html): (r-) `*core.PtrArray`
/// - property [issuer](https://docs.gtk.org/gio/property.TlsCertificate.issuer.html): (r-) `gio.TlsCertificate`
/// - property [issuer-name](https://docs.gtk.org/gio/property.TlsCertificate.issuer-name.html): (r-) `[*:0]const u8`
/// - property [not-valid-after](https://docs.gtk.org/gio/property.TlsCertificate.not-valid-after.html): (r-) `glib.DateTime`
/// - property [not-valid-before](https://docs.gtk.org/gio/property.TlsCertificate.not-valid-before.html): (r-) `glib.DateTime`
/// - property [password](https://docs.gtk.org/gio/property.TlsCertificate.password.html): (--) `[*:0]const u8`
/// - property [pkcs11-uri](https://docs.gtk.org/gio/property.TlsCertificate.pkcs11-uri.html): (r-) `[*:0]const u8`
/// - property [pkcs12-data](https://docs.gtk.org/gio/property.TlsCertificate.pkcs12-data.html): (--) `*core.ByteArray`
/// - property [private-key](https://docs.gtk.org/gio/property.TlsCertificate.private-key.html): (r-) `*core.ByteArray`
/// - property [private-key-pem](https://docs.gtk.org/gio/property.TlsCertificate.private-key-pem.html): (r-) `[*:0]const u8`
/// - property [private-key-pkcs11-uri](https://docs.gtk.org/gio/property.TlsCertificate.private-key-pkcs11-uri.html): (r-) `[*:0]const u8`
/// - property [subject-name](https://docs.gtk.org/gio/property.TlsCertificate.subject-name.html): (r-) `[*:0]const u8`
pub const TlsCertificate = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.TlsCertificatePrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.TlsCertificateClass;
    /// ctor [new_from_file](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_file.html)
    pub fn newFromFile(_file: [*:0]const u8, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_file" });
        const ret = cFn(_file, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_file_with_password](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_file_with_password.html)
    pub fn newFromFileWithPassword(_file: [*:0]const u8, _password: [*:0]const u8, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_file_with_password" });
        const ret = cFn(_file, _password, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_files](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_files.html)
    pub fn newFromFiles(_cert_file: [*:0]const u8, _key_file: [*:0]const u8, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_files" });
        const ret = cFn(_cert_file, _key_file, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_pem](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_pem.html)
    pub fn newFromPem(_data: [*:0]const u8, _length: i64, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const cFn = @extern(*const fn ([*:0]const u8, i64, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_pem" });
        const ret = cFn(_data, _length, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_pkcs11_uris](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_pkcs11_uris.html)
    pub fn newFromPkcs11Uris(_pkcs11_uri: [*:0]const u8, _private_key_pkcs11_uri: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_pkcs11_uris" });
        const ret = cFn(_pkcs11_uri, _private_key_pkcs11_uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_pkcs12](https://docs.gtk.org/gio/ctor.TlsCertificate.new_from_pkcs12.html)
    pub fn newFromPkcs12(_datas: []u8, _password: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*TlsCertificate {
        const _data = _datas.ptr;
        const _length: u64 = @intCast(_datas.len);
        const cFn = @extern(*const fn ([*]u8, u64, ?[*:0]const u8, *?*core.Error) callconv(.c) *TlsCertificate, .{ .name = "g_tls_certificate_new_from_pkcs12" });
        const ret = cFn(_data, _length, _password, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// type func [list_new_from_file](https://docs.gtk.org/gio/type_func.TlsCertificate.list_new_from_file.html)
    pub fn listNewFromFile(_file: [*:0]const u8, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_tls_certificate_list_new_from_file" });
        const ret = cFn(_file, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_dns_names](https://docs.gtk.org/gio/method.TlsCertificate.get_dns_names.html)
    pub fn getDnsNames(self: *TlsCertificate) ?*core.PtrArray {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?*core.PtrArray, .{ .name = "g_tls_certificate_get_dns_names" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ip_addresses](https://docs.gtk.org/gio/method.TlsCertificate.get_ip_addresses.html)
    pub fn getIpAddresses(self: *TlsCertificate) ?*core.PtrArray {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?*core.PtrArray, .{ .name = "g_tls_certificate_get_ip_addresses" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_issuer](https://docs.gtk.org/gio/method.TlsCertificate.get_issuer.html)
    pub fn getIssuer(self: *TlsCertificate) ?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_tls_certificate_get_issuer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_issuer_name](https://docs.gtk.org/gio/method.TlsCertificate.get_issuer_name.html)
    pub fn getIssuerName(self: *TlsCertificate) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?[*:0]u8, .{ .name = "g_tls_certificate_get_issuer_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_not_valid_after](https://docs.gtk.org/gio/method.TlsCertificate.get_not_valid_after.html)
    pub fn getNotValidAfter(self: *TlsCertificate) ?*glib.DateTime {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?*glib.DateTime, .{ .name = "g_tls_certificate_get_not_valid_after" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_not_valid_before](https://docs.gtk.org/gio/method.TlsCertificate.get_not_valid_before.html)
    pub fn getNotValidBefore(self: *TlsCertificate) ?*glib.DateTime {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?*glib.DateTime, .{ .name = "g_tls_certificate_get_not_valid_before" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_subject_name](https://docs.gtk.org/gio/method.TlsCertificate.get_subject_name.html)
    pub fn getSubjectName(self: *TlsCertificate) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TlsCertificate) callconv(.c) ?[*:0]u8, .{ .name = "g_tls_certificate_get_subject_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_same](https://docs.gtk.org/gio/method.TlsCertificate.is_same.html)
    pub fn isSame(self: *TlsCertificate, _cert_two: *gio.TlsCertificate) bool {
        const cFn = @extern(*const fn (*TlsCertificate, *gio.TlsCertificate) callconv(.c) bool, .{ .name = "g_tls_certificate_is_same" });
        const ret = cFn(self, _cert_two);
        return ret;
    }
    /// method [verify](https://docs.gtk.org/gio/method.TlsCertificate.verify.html)
    pub fn verify(self: *TlsCertificate, _identity: ?*gio.SocketConnectable, _trusted_ca: ?*gio.TlsCertificate) gio.TlsCertificateFlags {
        const cFn = @extern(*const fn (*TlsCertificate, ?*gio.SocketConnectable, ?*gio.TlsCertificate) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_tls_certificate_verify" });
        const ret = cFn(self, _identity, _trusted_ca);
        return ret;
    }
    /// vfunc [verify](https://docs.gtk.org/gio/vfunc.TlsCertificate.verify.html)
    pub fn verifyV(self: *TlsCertificate, _identity: ?*gio.SocketConnectable, _trusted_ca: ?*gio.TlsCertificate) gio.TlsCertificateFlags {
        const class: *TlsCertificateClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.verify.?;
        const ret = vFn(self, _identity, _trusted_ca);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_certificate_get_type" });
        return cFn();
    }
};
pub const TlsCertificateClass = extern struct {
    parent_class: gobject.ObjectClass,
    verify: ?*const fn (_cert: *gio.TlsCertificate, _identity: ?*gio.SocketConnectable, _trusted_ca: ?*gio.TlsCertificate) callconv(.c) gio.TlsCertificateFlags,
    padding: [8]?*anyopaque,
};
/// Flags [TlsCertificateFlags](https://docs.gtk.org/gio/flags.TlsCertificateFlags.html)
pub const TlsCertificateFlags = packed struct(u32) {
    unknown_ca: bool = false,
    bad_identity: bool = false,
    not_activated: bool = false,
    expired: bool = false,
    revoked: bool = false,
    insecure: bool = false,
    generic_error: bool = false,
    _: u25 = 0,
    pub const validate_all: @This() = @bitCast(@as(u32, 127));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_certificate_flags_get_type" });
        return cFn();
    }
};
pub const TlsCertificatePrivate = opaque {};
/// Enum [TlsCertificateRequestFlags](https://docs.gtk.org/gio/enum.TlsCertificateRequestFlags.html)
pub const TlsCertificateRequestFlags = enum(u32) {
    none = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_certificate_request_flags_get_type" });
        return cFn();
    }
};
/// Error [TlsChannelBindingError](https://docs.gtk.org/gio/error.TlsChannelBindingError.html)
pub const TlsChannelBindingError = enum(u32) {
    not_implemented = 0,
    invalid_state = 1,
    not_available = 2,
    not_supported = 3,
    general_error = 4,

    /// type func [quark](https://docs.gtk.org/gio/type_func.TlsChannelBindingError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_tls_channel_binding_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_channel_binding_error_get_type" });
        return cFn();
    }
};
/// Enum [TlsChannelBindingType](https://docs.gtk.org/gio/enum.TlsChannelBindingType.html)
pub const TlsChannelBindingType = enum(u32) {
    unique = 0,
    server_end_point = 1,
    exporter = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_channel_binding_type_get_type" });
        return cFn();
    }
};
/// Iface [TlsClientConnection](https://docs.gtk.org/gio/iface.TlsClientConnection.html)
/// - property [accepted-cas](https://docs.gtk.org/gio/property.TlsClientConnection.accepted-cas.html): (r-) `*core.List`
/// - property [server-identity](https://docs.gtk.org/gio/property.TlsClientConnection.server-identity.html): (rw) `gio.SocketConnectable`
/// - property [use-ssl3](https://docs.gtk.org/gio/property.TlsClientConnection.use-ssl3.html): (rw) `bool`
/// - property [validation-flags](https://docs.gtk.org/gio/property.TlsClientConnection.validation-flags.html): (rw) `gio.TlsCertificateFlags`
pub const TlsClientConnection = opaque {
    pub const Prerequisites = [_]type{gio.TlsConnection};
    /// type func [new](https://docs.gtk.org/gio/type_func.TlsClientConnection.new.html)
    pub fn new(_base_io_stream: *gio.IOStream, _server_identity: ?*gio.SocketConnectable, _error: *?*core.Error) error{GError}!*gio.TlsClientConnection {
        const cFn = @extern(*const fn (*gio.IOStream, ?*gio.SocketConnectable, *?*core.Error) callconv(.c) *gio.TlsClientConnection, .{ .name = "g_tls_client_connection_new" });
        const ret = cFn(_base_io_stream, _server_identity, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy_session_state](https://docs.gtk.org/gio/method.TlsClientConnection.copy_session_state.html)
    pub fn copySessionState(self: *TlsClientConnection, _source: *gio.TlsClientConnection) void {
        const cFn = @extern(*const fn (*TlsClientConnection, *gio.TlsClientConnection) callconv(.c) void, .{ .name = "g_tls_client_connection_copy_session_state" });
        const ret = cFn(self, _source);
        return ret;
    }
    /// method [get_accepted_cas](https://docs.gtk.org/gio/method.TlsClientConnection.get_accepted_cas.html)
    pub fn getAcceptedCas(self: *TlsClientConnection) ?*core.List {
        const cFn = @extern(*const fn (*TlsClientConnection) callconv(.c) ?*core.List, .{ .name = "g_tls_client_connection_get_accepted_cas" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_server_identity](https://docs.gtk.org/gio/method.TlsClientConnection.get_server_identity.html)
    pub fn getServerIdentity(self: *TlsClientConnection) ?*gio.SocketConnectable {
        const cFn = @extern(*const fn (*TlsClientConnection) callconv(.c) ?*gio.SocketConnectable, .{ .name = "g_tls_client_connection_get_server_identity" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_use_ssl3](https://docs.gtk.org/gio/method.TlsClientConnection.get_use_ssl3.html)
    pub const getUseSsl3 = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseSsl3(self: *TlsClientConnection) bool {
            const cFn = @extern(*const fn (*TlsClientConnection) callconv(.c) bool, .{ .name = "g_tls_client_connection_get_use_ssl3" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseSsl3;
    /// Deprecated:
    /// method [get_validation_flags](https://docs.gtk.org/gio/method.TlsClientConnection.get_validation_flags.html)
    pub const getValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getValidationFlags(self: *TlsClientConnection) gio.TlsCertificateFlags {
            const cFn = @extern(*const fn (*TlsClientConnection) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_tls_client_connection_get_validation_flags" });
            const ret = cFn(self);
            return ret;
        }
    }.getValidationFlags;
    /// method [set_server_identity](https://docs.gtk.org/gio/method.TlsClientConnection.set_server_identity.html)
    pub fn setServerIdentity(self: *TlsClientConnection, _identity: *gio.SocketConnectable) void {
        const cFn = @extern(*const fn (*TlsClientConnection, *gio.SocketConnectable) callconv(.c) void, .{ .name = "g_tls_client_connection_set_server_identity" });
        const ret = cFn(self, _identity);
        return ret;
    }
    /// Deprecated:
    /// method [set_use_ssl3](https://docs.gtk.org/gio/method.TlsClientConnection.set_use_ssl3.html)
    pub const setUseSsl3 = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseSsl3(self: *TlsClientConnection, _use_ssl3: bool) void {
            const cFn = @extern(*const fn (*TlsClientConnection, bool) callconv(.c) void, .{ .name = "g_tls_client_connection_set_use_ssl3" });
            const ret = cFn(self, _use_ssl3);
            return ret;
        }
    }.setUseSsl3;
    /// Deprecated:
    /// method [set_validation_flags](https://docs.gtk.org/gio/method.TlsClientConnection.set_validation_flags.html)
    pub const setValidationFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setValidationFlags(self: *TlsClientConnection, _flags: gio.TlsCertificateFlags) void {
            const cFn = @extern(*const fn (*TlsClientConnection, gio.TlsCertificateFlags) callconv(.c) void, .{ .name = "g_tls_client_connection_set_validation_flags" });
            const ret = cFn(self, _flags);
            return ret;
        }
    }.setValidationFlags;
    /// vfunc [copy_session_state](https://docs.gtk.org/gio/vfunc.TlsClientConnection.copy_session_state.html)
    pub fn copySessionStateV(self: *TlsClientConnection, _source: *gio.TlsClientConnection) void {
        const class: *TlsClientConnectionInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy_session_state.?;
        const ret = vFn(self, _source);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_client_connection_get_type" });
        return cFn();
    }
};
pub const TlsClientConnectionInterface = extern struct {
    g_iface: gobject.TypeInterface,
    copy_session_state: ?*const fn (_conn: *gio.TlsClientConnection, _source: *gio.TlsClientConnection) callconv(.c) void,
};
/// Class [TlsConnection](https://docs.gtk.org/gio/class.TlsConnection.html)
/// - property [advertised-protocols](https://docs.gtk.org/gio/property.TlsConnection.advertised-protocols.html): (rw) `[*:null]?[*:0]const u8`
/// - property [base-io-stream](https://docs.gtk.org/gio/property.TlsConnection.base-io-stream.html): (r-) `gio.IOStream`
/// - property [certificate](https://docs.gtk.org/gio/property.TlsConnection.certificate.html): (rw) `gio.TlsCertificate`
/// - property [ciphersuite-name](https://docs.gtk.org/gio/property.TlsConnection.ciphersuite-name.html): (r-) `[*:0]const u8`
/// - property [database](https://docs.gtk.org/gio/property.TlsConnection.database.html): (rw) `gio.TlsDatabase`
/// - property [interaction](https://docs.gtk.org/gio/property.TlsConnection.interaction.html): (rw) `gio.TlsInteraction`
/// - property [negotiated-protocol](https://docs.gtk.org/gio/property.TlsConnection.negotiated-protocol.html): (r-) `[*:0]const u8`
/// - property [peer-certificate](https://docs.gtk.org/gio/property.TlsConnection.peer-certificate.html): (r-) `gio.TlsCertificate`
/// - property [peer-certificate-errors](https://docs.gtk.org/gio/property.TlsConnection.peer-certificate-errors.html): (r-) `gio.TlsCertificateFlags`
/// - property [protocol-version](https://docs.gtk.org/gio/property.TlsConnection.protocol-version.html): (r-) `gio.TlsProtocolVersion`
/// - property [rehandshake-mode](https://docs.gtk.org/gio/property.TlsConnection.rehandshake-mode.html): (rw) `gio.TlsRehandshakeMode`
/// - property [require-close-notify](https://docs.gtk.org/gio/property.TlsConnection.require-close-notify.html): (rw) `bool`
/// - property [use-system-certdb](https://docs.gtk.org/gio/property.TlsConnection.use-system-certdb.html): (rw) `bool`
pub const TlsConnection = extern struct {
    parent_instance: gio.IOStream,
    priv: ?*gio.TlsConnectionPrivate,
    pub const Parent = gio.IOStream;
    pub const Class = gio.TlsConnectionClass;
    /// method [emit_accept_certificate](https://docs.gtk.org/gio/method.TlsConnection.emit_accept_certificate.html)
    pub fn emitAcceptCertificate(self: *TlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) bool {
        const cFn = @extern(*const fn (*TlsConnection, *gio.TlsCertificate, gio.TlsCertificateFlags) callconv(.c) bool, .{ .name = "g_tls_connection_emit_accept_certificate" });
        const ret = cFn(self, _peer_cert, _errors);
        return ret;
    }
    /// method [get_certificate](https://docs.gtk.org/gio/method.TlsConnection.get_certificate.html)
    pub fn getCertificate(self: *TlsConnection) ?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_tls_connection_get_certificate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_channel_binding_data](https://docs.gtk.org/gio/method.TlsConnection.get_channel_binding_data.html)
    pub fn getChannelBindingData(self: *TlsConnection, _type: gio.TlsChannelBindingType, _error: *?*core.Error) error{GError}!?*core.ByteArray {
        var data_out: *core.ByteArray = undefined;
        const _data = &data_out;
        const cFn = @extern(*const fn (*TlsConnection, gio.TlsChannelBindingType, ?*core.ByteArray, *?*core.Error) callconv(.c) bool, .{ .name = "g_tls_connection_get_channel_binding_data" });
        const ret = cFn(self, _type, _data, _error);
        if (_error.* != null) return error.GError;
        if (!ret) return null;
        return data_out;
    }
    /// method [get_ciphersuite_name](https://docs.gtk.org/gio/method.TlsConnection.get_ciphersuite_name.html)
    pub fn getCiphersuiteName(self: *TlsConnection) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?[*:0]u8, .{ .name = "g_tls_connection_get_ciphersuite_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_database](https://docs.gtk.org/gio/method.TlsConnection.get_database.html)
    pub fn getDatabase(self: *TlsConnection) ?*gio.TlsDatabase {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?*gio.TlsDatabase, .{ .name = "g_tls_connection_get_database" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interaction](https://docs.gtk.org/gio/method.TlsConnection.get_interaction.html)
    pub fn getInteraction(self: *TlsConnection) ?*gio.TlsInteraction {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?*gio.TlsInteraction, .{ .name = "g_tls_connection_get_interaction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_negotiated_protocol](https://docs.gtk.org/gio/method.TlsConnection.get_negotiated_protocol.html)
    pub fn getNegotiatedProtocol(self: *TlsConnection) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?[*:0]u8, .{ .name = "g_tls_connection_get_negotiated_protocol" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_peer_certificate](https://docs.gtk.org/gio/method.TlsConnection.get_peer_certificate.html)
    pub fn getPeerCertificate(self: *TlsConnection) ?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_tls_connection_get_peer_certificate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_peer_certificate_errors](https://docs.gtk.org/gio/method.TlsConnection.get_peer_certificate_errors.html)
    pub fn getPeerCertificateErrors(self: *TlsConnection) gio.TlsCertificateFlags {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_tls_connection_get_peer_certificate_errors" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_protocol_version](https://docs.gtk.org/gio/method.TlsConnection.get_protocol_version.html)
    pub fn getProtocolVersion(self: *TlsConnection) gio.TlsProtocolVersion {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) gio.TlsProtocolVersion, .{ .name = "g_tls_connection_get_protocol_version" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_rehandshake_mode](https://docs.gtk.org/gio/method.TlsConnection.get_rehandshake_mode.html)
    pub const getRehandshakeMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRehandshakeMode(self: *TlsConnection) gio.TlsRehandshakeMode {
            const cFn = @extern(*const fn (*TlsConnection) callconv(.c) gio.TlsRehandshakeMode, .{ .name = "g_tls_connection_get_rehandshake_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getRehandshakeMode;
    /// method [get_require_close_notify](https://docs.gtk.org/gio/method.TlsConnection.get_require_close_notify.html)
    pub fn getRequireCloseNotify(self: *TlsConnection) bool {
        const cFn = @extern(*const fn (*TlsConnection) callconv(.c) bool, .{ .name = "g_tls_connection_get_require_close_notify" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_use_system_certdb](https://docs.gtk.org/gio/method.TlsConnection.get_use_system_certdb.html)
    pub const getUseSystemCertdb = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseSystemCertdb(self: *TlsConnection) bool {
            const cFn = @extern(*const fn (*TlsConnection) callconv(.c) bool, .{ .name = "g_tls_connection_get_use_system_certdb" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseSystemCertdb;
    /// method [handshake](https://docs.gtk.org/gio/method.TlsConnection.handshake.html)
    pub fn handshake(self: *TlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*TlsConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_tls_connection_handshake" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [handshake_async](https://docs.gtk.org/gio/method.TlsConnection.handshake_async.html)
    pub fn handshakeAsync(self: *TlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsConnection, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_connection_handshake_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [handshake_finish](https://docs.gtk.org/gio/method.TlsConnection.handshake_finish.html)
    pub fn handshakeFinish(self: *TlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*TlsConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_tls_connection_handshake_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_advertised_protocols](https://docs.gtk.org/gio/method.TlsConnection.set_advertised_protocols.html)
    pub fn setAdvertisedProtocols(self: *TlsConnection, _protocols: ?[*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*TlsConnection, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_tls_connection_set_advertised_protocols" });
        const ret = cFn(self, _protocols);
        return ret;
    }
    /// method [set_certificate](https://docs.gtk.org/gio/method.TlsConnection.set_certificate.html)
    pub fn setCertificate(self: *TlsConnection, _certificate: *gio.TlsCertificate) void {
        const cFn = @extern(*const fn (*TlsConnection, *gio.TlsCertificate) callconv(.c) void, .{ .name = "g_tls_connection_set_certificate" });
        const ret = cFn(self, _certificate);
        return ret;
    }
    /// method [set_database](https://docs.gtk.org/gio/method.TlsConnection.set_database.html)
    pub fn setDatabase(self: *TlsConnection, _database: ?*gio.TlsDatabase) void {
        const cFn = @extern(*const fn (*TlsConnection, ?*gio.TlsDatabase) callconv(.c) void, .{ .name = "g_tls_connection_set_database" });
        const ret = cFn(self, _database);
        return ret;
    }
    /// method [set_interaction](https://docs.gtk.org/gio/method.TlsConnection.set_interaction.html)
    pub fn setInteraction(self: *TlsConnection, _interaction: ?*gio.TlsInteraction) void {
        const cFn = @extern(*const fn (*TlsConnection, ?*gio.TlsInteraction) callconv(.c) void, .{ .name = "g_tls_connection_set_interaction" });
        const ret = cFn(self, _interaction);
        return ret;
    }
    /// Deprecated:
    /// method [set_rehandshake_mode](https://docs.gtk.org/gio/method.TlsConnection.set_rehandshake_mode.html)
    pub const setRehandshakeMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRehandshakeMode(self: *TlsConnection, _mode: gio.TlsRehandshakeMode) void {
            const cFn = @extern(*const fn (*TlsConnection, gio.TlsRehandshakeMode) callconv(.c) void, .{ .name = "g_tls_connection_set_rehandshake_mode" });
            const ret = cFn(self, _mode);
            return ret;
        }
    }.setRehandshakeMode;
    /// method [set_require_close_notify](https://docs.gtk.org/gio/method.TlsConnection.set_require_close_notify.html)
    pub fn setRequireCloseNotify(self: *TlsConnection, _require_close_notify: bool) void {
        const cFn = @extern(*const fn (*TlsConnection, bool) callconv(.c) void, .{ .name = "g_tls_connection_set_require_close_notify" });
        const ret = cFn(self, _require_close_notify);
        return ret;
    }
    /// Deprecated:
    /// method [set_use_system_certdb](https://docs.gtk.org/gio/method.TlsConnection.set_use_system_certdb.html)
    pub const setUseSystemCertdb = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseSystemCertdb(self: *TlsConnection, _use_system_certdb: bool) void {
            const cFn = @extern(*const fn (*TlsConnection, bool) callconv(.c) void, .{ .name = "g_tls_connection_set_use_system_certdb" });
            const ret = cFn(self, _use_system_certdb);
            return ret;
        }
    }.setUseSystemCertdb;
    /// vfunc [accept_certificate](https://docs.gtk.org/gio/vfunc.TlsConnection.accept_certificate.html)
    pub fn acceptCertificateV(self: *TlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) bool {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.accept_certificate.?;
        const ret = vFn(self, _peer_cert, _errors);
        return ret;
    }
    /// vfunc [get_binding_data](https://docs.gtk.org/gio/vfunc.TlsConnection.get_binding_data.html)
    pub fn getBindingDataV(self: *TlsConnection, _type: gio.TlsChannelBindingType, _data: *core.ByteArray, _error: *?*core.Error) bool {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_binding_data.?;
        const ret = vFn(self, _type, _data, _error);
        return ret;
    }
    /// vfunc [get_negotiated_protocol](https://docs.gtk.org/gio/vfunc.TlsConnection.get_negotiated_protocol.html)
    pub fn getNegotiatedProtocolV(self: *TlsConnection) ?[*:0]u8 {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_negotiated_protocol.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [handshake](https://docs.gtk.org/gio/vfunc.TlsConnection.handshake.html)
    pub fn handshakeV(self: *TlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake.?;
        const ret = vFn(self, _cancellable, _error);
        return ret;
    }
    /// vfunc [handshake_async](https://docs.gtk.org/gio/vfunc.TlsConnection.handshake_async.html)
    pub fn handshakeAsyncV(self: *TlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake_async.?;
        const ret = vFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [handshake_finish](https://docs.gtk.org/gio/vfunc.TlsConnection.handshake_finish.html)
    pub fn handshakeFinishV(self: *TlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *TlsConnectionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.handshake_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// signal [accept-certificate](https://docs.gtk.org/gio/signal.TlsConnection.accept-certificate.html)
    pub fn connectAcceptCertificate(self: *TlsConnection, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accept-certificate", handler, args, flags, &.{ bool, *TlsConnection, *gio.TlsCertificate, gio.TlsCertificateFlags });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_connection_get_type" });
        return cFn();
    }
};
pub const TlsConnectionClass = extern struct {
    parent_class: gio.IOStreamClass,
    accept_certificate: ?*const fn (_connection: *gio.TlsConnection, _peer_cert: *gio.TlsCertificate, _errors: gio.TlsCertificateFlags) callconv(.c) bool,
    handshake: ?*const fn (_conn: *gio.TlsConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    handshake_async: ?*const fn (_conn: *gio.TlsConnection, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    handshake_finish: ?*const fn (_conn: *gio.TlsConnection, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_binding_data: ?*const fn (_conn: *gio.TlsConnection, _type: gio.TlsChannelBindingType, _data: *core.ByteArray, _error: *?*core.Error) callconv(.c) bool,
    get_negotiated_protocol: ?*const fn (_conn: *gio.TlsConnection) callconv(.c) ?[*:0]u8,
    padding: [6]?*anyopaque,
};
pub const TlsConnectionPrivate = opaque {};
/// Class [TlsDatabase](https://docs.gtk.org/gio/class.TlsDatabase.html)
pub const TlsDatabase = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.TlsDatabasePrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.TlsDatabaseClass;
    /// method [create_certificate_handle](https://docs.gtk.org/gio/method.TlsDatabase.create_certificate_handle.html)
    pub fn createCertificateHandle(self: *TlsDatabase, _certificate: *gio.TlsCertificate) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.TlsCertificate) callconv(.c) ?[*:0]u8, .{ .name = "g_tls_database_create_certificate_handle" });
        const ret = cFn(self, _certificate);
        return ret;
    }
    /// method [lookup_certificate_for_handle](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_for_handle.html)
    pub fn lookupCertificateForHandle(self: *TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsDatabase, [*:0]const u8, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*gio.TlsCertificate, .{ .name = "g_tls_database_lookup_certificate_for_handle" });
        const ret = cFn(self, _handle, _interaction, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_certificate_for_handle_async](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_for_handle_async.html)
    pub fn lookupCertificateForHandleAsync(self: *TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsDatabase, [*:0]const u8, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_database_lookup_certificate_for_handle_async" });
        const ret = cFn(self, _handle, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_certificate_for_handle_finish](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_for_handle_finish.html)
    pub fn lookupCertificateForHandleFinish(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.TlsCertificate, .{ .name = "g_tls_database_lookup_certificate_for_handle_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_certificate_issuer](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_issuer.html)
    pub fn lookupCertificateIssuer(self: *TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.TlsCertificate, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.TlsCertificate, .{ .name = "g_tls_database_lookup_certificate_issuer" });
        const ret = cFn(self, _certificate, _interaction, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_certificate_issuer_async](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_issuer_async.html)
    pub fn lookupCertificateIssuerAsync(self: *TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsDatabase, *gio.TlsCertificate, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_database_lookup_certificate_issuer_async" });
        const ret = cFn(self, _certificate, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_certificate_issuer_finish](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificate_issuer_finish.html)
    pub fn lookupCertificateIssuerFinish(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.TlsCertificate {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.TlsCertificate, .{ .name = "g_tls_database_lookup_certificate_issuer_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_certificates_issued_by](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificates_issued_by.html)
    pub fn lookupCertificatesIssuedBy(self: *TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*TlsDatabase, *core.ByteArray, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_tls_database_lookup_certificates_issued_by" });
        const ret = cFn(self, _issuer_raw_dn, _interaction, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [lookup_certificates_issued_by_async](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificates_issued_by_async.html)
    pub fn lookupCertificatesIssuedByAsync(self: *TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsDatabase, *core.ByteArray, ?*gio.TlsInteraction, gio.TlsDatabaseLookupFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_database_lookup_certificates_issued_by_async" });
        const ret = cFn(self, _issuer_raw_dn, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [lookup_certificates_issued_by_finish](https://docs.gtk.org/gio/method.TlsDatabase.lookup_certificates_issued_by_finish.html)
    pub fn lookupCertificatesIssuedByFinish(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*core.List {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "g_tls_database_lookup_certificates_issued_by_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [verify_chain](https://docs.gtk.org/gio/method.TlsDatabase.verify_chain.html)
    pub fn verifyChain(self: *TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!gio.TlsCertificateFlags {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.TlsCertificate, [*:0]const u8, ?*gio.SocketConnectable, ?*gio.TlsInteraction, gio.TlsDatabaseVerifyFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_tls_database_verify_chain" });
        const ret = cFn(self, _chain, _purpose, _identity, _interaction, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [verify_chain_async](https://docs.gtk.org/gio/method.TlsDatabase.verify_chain_async.html)
    pub fn verifyChainAsync(self: *TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsDatabase, *gio.TlsCertificate, [*:0]const u8, ?*gio.SocketConnectable, ?*gio.TlsInteraction, gio.TlsDatabaseVerifyFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_database_verify_chain_async" });
        const ret = cFn(self, _chain, _purpose, _identity, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [verify_chain_finish](https://docs.gtk.org/gio/method.TlsDatabase.verify_chain_finish.html)
    pub fn verifyChainFinish(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!gio.TlsCertificateFlags {
        const cFn = @extern(*const fn (*TlsDatabase, *gio.AsyncResult, *?*core.Error) callconv(.c) gio.TlsCertificateFlags, .{ .name = "g_tls_database_verify_chain_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [create_certificate_handle](https://docs.gtk.org/gio/vfunc.TlsDatabase.create_certificate_handle.html)
    pub fn createCertificateHandleV(self: *TlsDatabase, _certificate: *gio.TlsCertificate) ?[*:0]u8 {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_certificate_handle.?;
        const ret = vFn(self, _certificate);
        return ret;
    }
    /// vfunc [lookup_certificate_for_handle](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_for_handle.html)
    pub fn lookupCertificateForHandleV(self: *TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*gio.TlsCertificate {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_for_handle.?;
        const ret = vFn(self, _handle, _interaction, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_certificate_for_handle_async](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_for_handle_async.html)
    pub fn lookupCertificateForHandleAsyncV(self: *TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_for_handle_async.?;
        const ret = vFn(self, _handle, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_certificate_for_handle_finish](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_for_handle_finish.html)
    pub fn lookupCertificateForHandleFinishV(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.TlsCertificate {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_for_handle_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_certificate_issuer](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_issuer.html)
    pub fn lookupCertificateIssuerV(self: *TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) *gio.TlsCertificate {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_issuer.?;
        const ret = vFn(self, _certificate, _interaction, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_certificate_issuer_async](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_issuer_async.html)
    pub fn lookupCertificateIssuerAsyncV(self: *TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_issuer_async.?;
        const ret = vFn(self, _certificate, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_certificate_issuer_finish](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificate_issuer_finish.html)
    pub fn lookupCertificateIssuerFinishV(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) *gio.TlsCertificate {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificate_issuer_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [lookup_certificates_issued_by](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificates_issued_by.html)
    pub fn lookupCertificatesIssuedByV(self: *TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) ?*core.List {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificates_issued_by.?;
        const ret = vFn(self, _issuer_raw_dn, _interaction, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [lookup_certificates_issued_by_async](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificates_issued_by_async.html)
    pub fn lookupCertificatesIssuedByAsyncV(self: *TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificates_issued_by_async.?;
        const ret = vFn(self, _issuer_raw_dn, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [lookup_certificates_issued_by_finish](https://docs.gtk.org/gio/vfunc.TlsDatabase.lookup_certificates_issued_by_finish.html)
    pub fn lookupCertificatesIssuedByFinishV(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) ?*core.List {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.lookup_certificates_issued_by_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [verify_chain](https://docs.gtk.org/gio/vfunc.TlsDatabase.verify_chain.html)
    pub fn verifyChainV(self: *TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) gio.TlsCertificateFlags {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.verify_chain.?;
        const ret = vFn(self, _chain, _purpose, _identity, _interaction, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [verify_chain_async](https://docs.gtk.org/gio/vfunc.TlsDatabase.verify_chain_async.html)
    pub fn verifyChainAsyncV(self: *TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.verify_chain_async.?;
        const ret = vFn(self, _chain, _purpose, _identity, _interaction, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [verify_chain_finish](https://docs.gtk.org/gio/vfunc.TlsDatabase.verify_chain_finish.html)
    pub fn verifyChainFinishV(self: *TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) gio.TlsCertificateFlags {
        const class: *TlsDatabaseClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.verify_chain_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_database_get_type" });
        return cFn();
    }
};
pub const TlsDatabaseClass = extern struct {
    parent_class: gobject.ObjectClass,
    verify_chain: ?*const fn (_self: *gio.TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) gio.TlsCertificateFlags,
    verify_chain_async: ?*const fn (_self: *gio.TlsDatabase, _chain: *gio.TlsCertificate, _purpose: [*:0]const u8, _identity: ?*gio.SocketConnectable, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseVerifyFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    verify_chain_finish: ?*const fn (_self: *gio.TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) gio.TlsCertificateFlags,
    create_certificate_handle: ?*const fn (_self: *gio.TlsDatabase, _certificate: *gio.TlsCertificate) callconv(.c) ?[*:0]u8,
    lookup_certificate_for_handle: ?*const fn (_self: *gio.TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*gio.TlsCertificate,
    lookup_certificate_for_handle_async: ?*const fn (_self: *gio.TlsDatabase, _handle: [*:0]const u8, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_certificate_for_handle_finish: ?*const fn (_self: *gio.TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.TlsCertificate,
    lookup_certificate_issuer: ?*const fn (_self: *gio.TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) *gio.TlsCertificate,
    lookup_certificate_issuer_async: ?*const fn (_self: *gio.TlsDatabase, _certificate: *gio.TlsCertificate, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_certificate_issuer_finish: ?*const fn (_self: *gio.TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) *gio.TlsCertificate,
    lookup_certificates_issued_by: ?*const fn (_self: *gio.TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) ?*core.List,
    lookup_certificates_issued_by_async: ?*const fn (_self: *gio.TlsDatabase, _issuer_raw_dn: *core.ByteArray, _interaction: ?*gio.TlsInteraction, _flags: gio.TlsDatabaseLookupFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    lookup_certificates_issued_by_finish: ?*const fn (_self: *gio.TlsDatabase, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) ?*core.List,
    padding: [16]?*anyopaque,
};
/// Enum [TlsDatabaseLookupFlags](https://docs.gtk.org/gio/enum.TlsDatabaseLookupFlags.html)
pub const TlsDatabaseLookupFlags = enum(u32) {
    none = 0,
    keypair = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_database_lookup_flags_get_type" });
        return cFn();
    }
};
pub const TlsDatabasePrivate = opaque {};
/// Flags [TlsDatabaseVerifyFlags](https://docs.gtk.org/gio/flags.TlsDatabaseVerifyFlags.html)
pub const TlsDatabaseVerifyFlags = packed struct(u32) {
    _: u32 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_database_verify_flags_get_type" });
        return cFn();
    }
};
/// Error [TlsError](https://docs.gtk.org/gio/error.TlsError.html)
pub const TlsError = enum(u32) {
    unavailable = 0,
    misc = 1,
    bad_certificate = 2,
    not_tls = 3,
    handshake = 4,
    certificate_required = 5,
    eof = 6,
    inappropriate_fallback = 7,
    bad_certificate_password = 8,

    /// type func [quark](https://docs.gtk.org/gio/type_func.TlsError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_tls_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_error_get_type" });
        return cFn();
    }
};
/// Iface [TlsFileDatabase](https://docs.gtk.org/gio/iface.TlsFileDatabase.html)
/// - property [anchors](https://docs.gtk.org/gio/property.TlsFileDatabase.anchors.html): (rw) `[*:0]const u8`
pub const TlsFileDatabase = opaque {
    pub const Prerequisites = [_]type{gio.TlsDatabase};
    /// type func [new](https://docs.gtk.org/gio/type_func.TlsFileDatabase.new.html)
    pub fn new(_anchors: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.TlsFileDatabase {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.TlsFileDatabase, .{ .name = "g_tls_file_database_new" });
        const ret = cFn(_anchors, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_file_database_get_type" });
        return cFn();
    }
};
pub const TlsFileDatabaseInterface = extern struct {
    g_iface: gobject.TypeInterface,
    padding: [8]?*anyopaque,
};
/// Class [TlsInteraction](https://docs.gtk.org/gio/class.TlsInteraction.html)
pub const TlsInteraction = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.TlsInteractionPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.TlsInteractionClass;
    /// method [ask_password](https://docs.gtk.org/gio/method.TlsInteraction.ask_password.html)
    pub fn askPassword(self: *TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsPassword, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_ask_password" });
        const ret = cFn(self, _password, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [ask_password_async](https://docs.gtk.org/gio/method.TlsInteraction.ask_password_async.html)
    pub fn askPasswordAsync(self: *TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsPassword, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_interaction_ask_password_async" });
        const ret = cFn(self, _password, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [ask_password_finish](https://docs.gtk.org/gio/method.TlsInteraction.ask_password_finish.html)
    pub fn askPasswordFinish(self: *TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.AsyncResult, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_ask_password_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [invoke_ask_password](https://docs.gtk.org/gio/method.TlsInteraction.invoke_ask_password.html)
    pub fn invokeAskPassword(self: *TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsPassword, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_invoke_ask_password" });
        const ret = cFn(self, _password, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [invoke_request_certificate](https://docs.gtk.org/gio/method.TlsInteraction.invoke_request_certificate.html)
    pub fn invokeRequestCertificate(self: *TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsConnection, gio.TlsCertificateRequestFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_invoke_request_certificate" });
        const ret = cFn(self, _connection, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [request_certificate](https://docs.gtk.org/gio/method.TlsInteraction.request_certificate.html)
    pub fn requestCertificate(self: *TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsConnection, gio.TlsCertificateRequestFlags, ?*gio.Cancellable, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_request_certificate" });
        const ret = cFn(self, _connection, _flags, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [request_certificate_async](https://docs.gtk.org/gio/method.TlsInteraction.request_certificate_async.html)
    pub fn requestCertificateAsync(self: *TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*TlsInteraction, *gio.TlsConnection, gio.TlsCertificateRequestFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_tls_interaction_request_certificate_async" });
        const ret = cFn(self, _connection, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [request_certificate_finish](https://docs.gtk.org/gio/method.TlsInteraction.request_certificate_finish.html)
    pub fn requestCertificateFinish(self: *TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!gio.TlsInteractionResult {
        const cFn = @extern(*const fn (*TlsInteraction, *gio.AsyncResult, *?*core.Error) callconv(.c) gio.TlsInteractionResult, .{ .name = "g_tls_interaction_request_certificate_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [ask_password](https://docs.gtk.org/gio/vfunc.TlsInteraction.ask_password.html)
    pub fn askPasswordV(self: *TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) gio.TlsInteractionResult {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ask_password.?;
        const ret = vFn(self, _password, _cancellable, _error);
        return ret;
    }
    /// vfunc [ask_password_async](https://docs.gtk.org/gio/vfunc.TlsInteraction.ask_password_async.html)
    pub fn askPasswordAsyncV(self: *TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ask_password_async.?;
        const ret = vFn(self, _password, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [ask_password_finish](https://docs.gtk.org/gio/vfunc.TlsInteraction.ask_password_finish.html)
    pub fn askPasswordFinishV(self: *TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) gio.TlsInteractionResult {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ask_password_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [request_certificate](https://docs.gtk.org/gio/vfunc.TlsInteraction.request_certificate.html)
    pub fn requestCertificateV(self: *TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) gio.TlsInteractionResult {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.request_certificate.?;
        const ret = vFn(self, _connection, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [request_certificate_async](https://docs.gtk.org/gio/vfunc.TlsInteraction.request_certificate_async.html)
    pub fn requestCertificateAsyncV(self: *TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.request_certificate_async.?;
        const ret = vFn(self, _connection, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [request_certificate_finish](https://docs.gtk.org/gio/vfunc.TlsInteraction.request_certificate_finish.html)
    pub fn requestCertificateFinishV(self: *TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) gio.TlsInteractionResult {
        const class: *TlsInteractionClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.request_certificate_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_interaction_get_type" });
        return cFn();
    }
};
pub const TlsInteractionClass = extern struct {
    parent_class: gobject.ObjectClass,
    ask_password: ?*const fn (_interaction: *gio.TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) gio.TlsInteractionResult,
    ask_password_async: ?*const fn (_interaction: *gio.TlsInteraction, _password: *gio.TlsPassword, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    ask_password_finish: ?*const fn (_interaction: *gio.TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) gio.TlsInteractionResult,
    request_certificate: ?*const fn (_interaction: *gio.TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) gio.TlsInteractionResult,
    request_certificate_async: ?*const fn (_interaction: *gio.TlsInteraction, _connection: *gio.TlsConnection, _flags: gio.TlsCertificateRequestFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    request_certificate_finish: ?*const fn (_interaction: *gio.TlsInteraction, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) gio.TlsInteractionResult,
    padding: [21]?*anyopaque,
};
pub const TlsInteractionPrivate = opaque {};
/// Enum [TlsInteractionResult](https://docs.gtk.org/gio/enum.TlsInteractionResult.html)
pub const TlsInteractionResult = enum(u32) {
    unhandled = 0,
    handled = 1,
    failed = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_interaction_result_get_type" });
        return cFn();
    }
};
/// Class [TlsPassword](https://docs.gtk.org/gio/class.TlsPassword.html)
/// - property [description](https://docs.gtk.org/gio/property.TlsPassword.description.html): (rw) `[*:0]const u8`
/// - property [flags](https://docs.gtk.org/gio/property.TlsPassword.flags.html): (rw) `gio.TlsPasswordFlags`
/// - property [warning](https://docs.gtk.org/gio/property.TlsPassword.warning.html): (rw) `[*:0]const u8`
pub const TlsPassword = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.TlsPasswordPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.TlsPasswordClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.TlsPassword.new.html)
    pub fn new(_flags: gio.TlsPasswordFlags, _description: [*:0]const u8) *TlsPassword {
        const cFn = @extern(*const fn (gio.TlsPasswordFlags, [*:0]const u8) callconv(.c) *TlsPassword, .{ .name = "g_tls_password_new" });
        const ret = cFn(_flags, _description);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gio/method.TlsPassword.get_description.html)
    pub fn getDescription(self: *TlsPassword) [*:0]u8 {
        const cFn = @extern(*const fn (*TlsPassword) callconv(.c) [*:0]u8, .{ .name = "g_tls_password_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gio/method.TlsPassword.get_flags.html)
    pub fn getFlags(self: *TlsPassword) gio.TlsPasswordFlags {
        const cFn = @extern(*const fn (*TlsPassword) callconv(.c) gio.TlsPasswordFlags, .{ .name = "g_tls_password_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gio/method.TlsPassword.get_value.html)
    pub fn getValue(self: *TlsPassword, _length: ?*u64) [*]u8 {
        const cFn = @extern(*const fn (*TlsPassword, ?*u64) callconv(.c) [*]u8, .{ .name = "g_tls_password_get_value" });
        const ret = cFn(self, _length);
        return ret;
    }
    /// method [get_warning](https://docs.gtk.org/gio/method.TlsPassword.get_warning.html)
    pub fn getWarning(self: *TlsPassword) [*:0]u8 {
        const cFn = @extern(*const fn (*TlsPassword) callconv(.c) [*:0]u8, .{ .name = "g_tls_password_get_warning" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_description](https://docs.gtk.org/gio/method.TlsPassword.set_description.html)
    pub fn setDescription(self: *TlsPassword, _description: [*:0]const u8) void {
        const cFn = @extern(*const fn (*TlsPassword, [*:0]const u8) callconv(.c) void, .{ .name = "g_tls_password_set_description" });
        const ret = cFn(self, _description);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gio/method.TlsPassword.set_flags.html)
    pub fn setFlags(self: *TlsPassword, _flags: gio.TlsPasswordFlags) void {
        const cFn = @extern(*const fn (*TlsPassword, gio.TlsPasswordFlags) callconv(.c) void, .{ .name = "g_tls_password_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gio/method.TlsPassword.set_value.html)
    pub fn setValue(self: *TlsPassword, _values: []u8) void {
        const _value = _values.ptr;
        const _length: i64 = @intCast(_values.len);
        const cFn = @extern(*const fn (*TlsPassword, [*]u8, i64) callconv(.c) void, .{ .name = "g_tls_password_set_value" });
        const ret = cFn(self, _value, _length);
        return ret;
    }
    /// method [set_value_full](https://docs.gtk.org/gio/method.TlsPassword.set_value_full.html)
    pub fn setValueFull(self: *TlsPassword, _values: []u8, _destroy: ?glib.DestroyNotify) void {
        const _value = _values.ptr;
        const _length: i64 = @intCast(_values.len);
        const cFn = @extern(*const fn (*TlsPassword, [*]u8, i64, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "g_tls_password_set_value_full" });
        const ret = cFn(self, _value, _length, _destroy);
        return ret;
    }
    /// method [set_warning](https://docs.gtk.org/gio/method.TlsPassword.set_warning.html)
    pub fn setWarning(self: *TlsPassword, _warning: [*:0]const u8) void {
        const cFn = @extern(*const fn (*TlsPassword, [*:0]const u8) callconv(.c) void, .{ .name = "g_tls_password_set_warning" });
        const ret = cFn(self, _warning);
        return ret;
    }
    /// vfunc [get_default_warning](https://docs.gtk.org/gio/vfunc.TlsPassword.get_default_warning.html)
    pub fn getDefaultWarningV(self: *TlsPassword) [*:0]u8 {
        const class: *TlsPasswordClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_default_warning.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_value](https://docs.gtk.org/gio/vfunc.TlsPassword.get_value.html)
    pub fn getValueV(self: *TlsPassword, _length: ?*u64) [*]u8 {
        const class: *TlsPasswordClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_value.?;
        const ret = vFn(self, _length);
        return ret;
    }
    /// vfunc [set_value](https://docs.gtk.org/gio/vfunc.TlsPassword.set_value.html)
    pub fn setValueV(self: *TlsPassword, _value: [*]u8, _length: i64, _destroy: ?glib.DestroyNotify) void {
        const class: *TlsPasswordClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_value.?;
        const ret = vFn(self, _value, _length, _destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_password_get_type" });
        return cFn();
    }
};
pub const TlsPasswordClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_value: ?*const fn (_password: *gio.TlsPassword, _length: ?*u64) callconv(.c) [*]u8,
    set_value: ?*const fn (_password: *gio.TlsPassword, _value: [*]u8, _length: i64, _destroy: ?glib.DestroyNotify) callconv(.c) void,
    get_default_warning: ?*const fn (_password: *gio.TlsPassword) callconv(.c) [*:0]u8,
    padding: [4]?*anyopaque,
};
/// Flags [TlsPasswordFlags](https://docs.gtk.org/gio/flags.TlsPasswordFlags.html)
pub const TlsPasswordFlags = packed struct(u32) {
    _0: u1 = 0,
    retry: bool = false,
    many_tries: bool = false,
    final_try: bool = false,
    pkcs11_user: bool = false,
    pkcs11_security_officer: bool = false,
    pkcs11_context_specific: bool = false,
    _: u25 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_password_flags_get_type" });
        return cFn();
    }
};
pub const TlsPasswordPrivate = opaque {};
/// Enum [TlsProtocolVersion](https://docs.gtk.org/gio/enum.TlsProtocolVersion.html)
pub const TlsProtocolVersion = enum(u32) {
    unknown = 0,
    ssl_3_0 = 1,
    tls_1_0 = 2,
    tls_1_1 = 3,
    tls_1_2 = 4,
    tls_1_3 = 5,
    dtls_1_0 = 201,
    dtls_1_2 = 202,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_protocol_version_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Enum [TlsRehandshakeMode](https://docs.gtk.org/gio/enum.TlsRehandshakeMode.html)
pub const TlsRehandshakeMode = if (config.disable_deprecated) core.Deprecated else enum(u32) {
    never = 0,
    safely = 1,
    unsafely = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_rehandshake_mode_get_type" });
        return cFn();
    }
};
/// Iface [TlsServerConnection](https://docs.gtk.org/gio/iface.TlsServerConnection.html)
/// - property [authentication-mode](https://docs.gtk.org/gio/property.TlsServerConnection.authentication-mode.html): (rw) `gio.TlsAuthenticationMode`
pub const TlsServerConnection = opaque {
    pub const Prerequisites = [_]type{gio.TlsConnection};
    /// type func [new](https://docs.gtk.org/gio/type_func.TlsServerConnection.new.html)
    pub fn new(_base_io_stream: *gio.IOStream, _certificate: ?*gio.TlsCertificate, _error: *?*core.Error) error{GError}!*gio.TlsServerConnection {
        const cFn = @extern(*const fn (*gio.IOStream, ?*gio.TlsCertificate, *?*core.Error) callconv(.c) *gio.TlsServerConnection, .{ .name = "g_tls_server_connection_new" });
        const ret = cFn(_base_io_stream, _certificate, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tls_server_connection_get_type" });
        return cFn();
    }
};
pub const TlsServerConnectionInterface = extern struct {
    g_iface: gobject.TypeInterface,
};
/// Class [UnixConnection](https://docs.gtk.org/gio/class.UnixConnection.html)
pub const UnixConnection = extern struct {
    parent_instance: gio.SocketConnection,
    priv: ?*gio.UnixConnectionPrivate,
    pub const Parent = gio.SocketConnection;
    pub const Class = gio.UnixConnectionClass;
    /// method [receive_credentials](https://docs.gtk.org/gio/method.UnixConnection.receive_credentials.html)
    pub fn receiveCredentials(self: *UnixConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.Credentials {
        const cFn = @extern(*const fn (*UnixConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.Credentials, .{ .name = "g_unix_connection_receive_credentials" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive_credentials_async](https://docs.gtk.org/gio/method.UnixConnection.receive_credentials_async.html)
    pub fn receiveCredentialsAsync(self: *UnixConnection, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*UnixConnection, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_unix_connection_receive_credentials_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [receive_credentials_finish](https://docs.gtk.org/gio/method.UnixConnection.receive_credentials_finish.html)
    pub fn receiveCredentialsFinish(self: *UnixConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.Credentials {
        const cFn = @extern(*const fn (*UnixConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) *gio.Credentials, .{ .name = "g_unix_connection_receive_credentials_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [receive_fd](https://docs.gtk.org/gio/method.UnixConnection.receive_fd.html)
    pub fn receiveFd(self: *UnixConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*UnixConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) i32, .{ .name = "g_unix_connection_receive_fd" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_credentials](https://docs.gtk.org/gio/method.UnixConnection.send_credentials.html)
    pub fn sendCredentials(self: *UnixConnection, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*UnixConnection, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_connection_send_credentials" });
        const ret = cFn(self, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_credentials_async](https://docs.gtk.org/gio/method.UnixConnection.send_credentials_async.html)
    pub fn sendCredentialsAsync(self: *UnixConnection, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*UnixConnection, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_unix_connection_send_credentials_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [send_credentials_finish](https://docs.gtk.org/gio/method.UnixConnection.send_credentials_finish.html)
    pub fn sendCredentialsFinish(self: *UnixConnection, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*UnixConnection, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_connection_send_credentials_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [send_fd](https://docs.gtk.org/gio/method.UnixConnection.send_fd.html)
    pub fn sendFd(self: *UnixConnection, _fd: i32, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*UnixConnection, i32, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_connection_send_fd" });
        const ret = cFn(self, _fd, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_connection_get_type" });
        return cFn();
    }
};
pub const UnixConnectionClass = extern struct {
    parent_class: gio.SocketConnectionClass,
};
pub const UnixConnectionPrivate = opaque {};
/// Class [UnixCredentialsMessage](https://docs.gtk.org/gio/class.UnixCredentialsMessage.html)
/// - property [credentials](https://docs.gtk.org/gio/property.UnixCredentialsMessage.credentials.html): (r-) `gio.Credentials`
pub const UnixCredentialsMessage = extern struct {
    parent_instance: gio.SocketControlMessage,
    priv: ?*gio.UnixCredentialsMessagePrivate,
    pub const Parent = gio.SocketControlMessage;
    pub const Class = gio.UnixCredentialsMessageClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixCredentialsMessage.new.html)
    pub fn new() *UnixCredentialsMessage {
        const cFn = @extern(*const fn () callconv(.c) *UnixCredentialsMessage, .{ .name = "g_unix_credentials_message_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_credentials](https://docs.gtk.org/gio/ctor.UnixCredentialsMessage.new_with_credentials.html)
    pub fn newWithCredentials(_credentials: *gio.Credentials) *UnixCredentialsMessage {
        const cFn = @extern(*const fn (*gio.Credentials) callconv(.c) *UnixCredentialsMessage, .{ .name = "g_unix_credentials_message_new_with_credentials" });
        const ret = cFn(_credentials);
        return ret;
    }
    /// type func [is_supported](https://docs.gtk.org/gio/type_func.UnixCredentialsMessage.is_supported.html)
    pub fn isSupported() bool {
        const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_unix_credentials_message_is_supported" });
        const ret = cFn();
        return ret;
    }
    /// method [get_credentials](https://docs.gtk.org/gio/method.UnixCredentialsMessage.get_credentials.html)
    pub fn getCredentials(self: *UnixCredentialsMessage) *gio.Credentials {
        const cFn = @extern(*const fn (*UnixCredentialsMessage) callconv(.c) *gio.Credentials, .{ .name = "g_unix_credentials_message_get_credentials" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_credentials_message_get_type" });
        return cFn();
    }
};
pub const UnixCredentialsMessageClass = extern struct {
    parent_class: gio.SocketControlMessageClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
};
pub const UnixCredentialsMessagePrivate = opaque {};
/// Class [UnixFDList](https://docs.gtk.org/gio/class.UnixFDList.html)
pub const UnixFDList = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gio.UnixFDListPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gio.UnixFDListClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixFDList.new.html)
    pub fn new() *UnixFDList {
        const cFn = @extern(*const fn () callconv(.c) *UnixFDList, .{ .name = "g_unix_fd_list_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_array](https://docs.gtk.org/gio/ctor.UnixFDList.new_from_array.html)
    pub fn newFromArray(_fdss: []i32) *UnixFDList {
        const _fds = _fdss.ptr;
        const _n_fds: i32 = @intCast(_fdss.len);
        const cFn = @extern(*const fn ([*]i32, i32) callconv(.c) *UnixFDList, .{ .name = "g_unix_fd_list_new_from_array" });
        const ret = cFn(_fds, _n_fds);
        return ret;
    }
    /// method [append](https://docs.gtk.org/gio/method.UnixFDList.append.html)
    pub fn append(self: *UnixFDList, _fd: i32, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*UnixFDList, i32, *?*core.Error) callconv(.c) i32, .{ .name = "g_unix_fd_list_append" });
        const ret = cFn(self, _fd, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get](https://docs.gtk.org/gio/method.UnixFDList.get.html)
    pub fn get(self: *UnixFDList, _index_: i32, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*UnixFDList, i32, *?*core.Error) callconv(.c) i32, .{ .name = "g_unix_fd_list_get" });
        const ret = cFn(self, _index_, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/gio/method.UnixFDList.get_length.html)
    pub fn getLength(self: *UnixFDList) i32 {
        const cFn = @extern(*const fn (*UnixFDList) callconv(.c) i32, .{ .name = "g_unix_fd_list_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [peek_fds](https://docs.gtk.org/gio/method.UnixFDList.peek_fds.html)
    pub fn peekFds(self: *UnixFDList) struct {
        ret: [*]i32,
        length: i32,
    } {
        var length_out: i32 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*UnixFDList, ?*i32) callconv(.c) [*]i32, .{ .name = "g_unix_fd_list_peek_fds" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [steal_fds](https://docs.gtk.org/gio/method.UnixFDList.steal_fds.html)
    pub fn stealFds(self: *UnixFDList) struct {
        ret: [*]i32,
        length: i32,
    } {
        var length_out: i32 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*UnixFDList, ?*i32) callconv(.c) [*]i32, .{ .name = "g_unix_fd_list_steal_fds" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_fd_list_get_type" });
        return cFn();
    }
};
pub const UnixFDListClass = extern struct {
    parent_class: gobject.ObjectClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const UnixFDListPrivate = opaque {};
/// Class [UnixFDMessage](https://docs.gtk.org/gio/class.UnixFDMessage.html)
/// - property [fd-list](https://docs.gtk.org/gio/property.UnixFDMessage.fd-list.html): (r-) `gio.UnixFDList`
pub const UnixFDMessage = extern struct {
    parent_instance: gio.SocketControlMessage,
    priv: ?*gio.UnixFDMessagePrivate,
    pub const Parent = gio.SocketControlMessage;
    pub const Class = gio.UnixFDMessageClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixFDMessage.new.html)
    pub fn new() *UnixFDMessage {
        const cFn = @extern(*const fn () callconv(.c) *UnixFDMessage, .{ .name = "g_unix_fd_message_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_fd_list](https://docs.gtk.org/gio/ctor.UnixFDMessage.new_with_fd_list.html)
    pub fn newWithFdList(_fd_list: *gio.UnixFDList) *UnixFDMessage {
        const cFn = @extern(*const fn (*gio.UnixFDList) callconv(.c) *UnixFDMessage, .{ .name = "g_unix_fd_message_new_with_fd_list" });
        const ret = cFn(_fd_list);
        return ret;
    }
    /// method [append_fd](https://docs.gtk.org/gio/method.UnixFDMessage.append_fd.html)
    pub fn appendFd(self: *UnixFDMessage, _fd: i32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*UnixFDMessage, i32, *?*core.Error) callconv(.c) bool, .{ .name = "g_unix_fd_message_append_fd" });
        const ret = cFn(self, _fd, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_fd_list](https://docs.gtk.org/gio/method.UnixFDMessage.get_fd_list.html)
    pub fn getFdList(self: *UnixFDMessage) *gio.UnixFDList {
        const cFn = @extern(*const fn (*UnixFDMessage) callconv(.c) *gio.UnixFDList, .{ .name = "g_unix_fd_message_get_fd_list" });
        const ret = cFn(self);
        return ret;
    }
    /// method [steal_fds](https://docs.gtk.org/gio/method.UnixFDMessage.steal_fds.html)
    pub fn stealFds(self: *UnixFDMessage) struct {
        ret: [*]i32,
        length: i32,
    } {
        var length_out: i32 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*UnixFDMessage, ?*i32) callconv(.c) [*]i32, .{ .name = "g_unix_fd_message_steal_fds" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_fd_message_get_type" });
        return cFn();
    }
};
pub const UnixFDMessageClass = extern struct {
    parent_class: gio.SocketControlMessageClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
};
pub const UnixFDMessagePrivate = opaque {};
/// Class [UnixInputStream](https://docs.gtk.org/gio/class.UnixInputStream.html)
/// - property [close-fd](https://docs.gtk.org/gio/property.UnixInputStream.close-fd.html): (rw) `bool`
/// - property [fd](https://docs.gtk.org/gio/property.UnixInputStream.fd.html): (r-) `i32`
pub const UnixInputStream = extern struct {
    parent_instance: gio.InputStream,
    priv: ?*gio.UnixInputStreamPrivate,
    pub const Interfaces = [_]type{ gio.FileDescriptorBased, gio.PollableInputStream };
    pub const Parent = gio.InputStream;
    pub const Class = gio.UnixInputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixInputStream.new.html)
    pub fn new(_fd: i32, _close_fd: bool) *UnixInputStream {
        const cFn = @extern(*const fn (i32, bool) callconv(.c) *UnixInputStream, .{ .name = "g_unix_input_stream_new" });
        const ret = cFn(_fd, _close_fd);
        return ret;
    }
    /// method [get_close_fd](https://docs.gtk.org/gio/method.UnixInputStream.get_close_fd.html)
    pub fn getCloseFd(self: *UnixInputStream) bool {
        const cFn = @extern(*const fn (*UnixInputStream) callconv(.c) bool, .{ .name = "g_unix_input_stream_get_close_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fd](https://docs.gtk.org/gio/method.UnixInputStream.get_fd.html)
    pub fn getFd(self: *UnixInputStream) i32 {
        const cFn = @extern(*const fn (*UnixInputStream) callconv(.c) i32, .{ .name = "g_unix_input_stream_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_close_fd](https://docs.gtk.org/gio/method.UnixInputStream.set_close_fd.html)
    pub fn setCloseFd(self: *UnixInputStream, _close_fd: bool) void {
        const cFn = @extern(*const fn (*UnixInputStream, bool) callconv(.c) void, .{ .name = "g_unix_input_stream_set_close_fd" });
        const ret = cFn(self, _close_fd);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_input_stream_get_type" });
        return cFn();
    }
};
pub const UnixInputStreamClass = extern struct {
    parent_class: gio.InputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const UnixInputStreamPrivate = opaque {};
/// Struct [UnixMountEntry](https://docs.gtk.org/gio/struct.UnixMountEntry.html)
pub const UnixMountEntry = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_mount_entry_get_type" });
        return cFn();
    }
};
/// Class [UnixMountMonitor](https://docs.gtk.org/gio/class.UnixMountMonitor.html)
pub const UnixMountMonitor = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gio.UnixMountMonitorClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixMountMonitor.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *UnixMountMonitor {
            const cFn = @extern(*const fn () callconv(.c) *UnixMountMonitor, .{ .name = "g_unix_mount_monitor_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// type func [get](https://docs.gtk.org/gio/type_func.UnixMountMonitor.get.html)
    pub fn get() *gio.UnixMountMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.UnixMountMonitor, .{ .name = "g_unix_mount_monitor_get" });
        const ret = cFn();
        return ret;
    }
    /// Deprecated:
    /// method [set_rate_limit](https://docs.gtk.org/gio/method.UnixMountMonitor.set_rate_limit.html)
    pub const setRateLimit = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRateLimit(self: *UnixMountMonitor, _limit_msec: i32) void {
            const cFn = @extern(*const fn (*UnixMountMonitor, i32) callconv(.c) void, .{ .name = "g_unix_mount_monitor_set_rate_limit" });
            const ret = cFn(self, _limit_msec);
            return ret;
        }
    }.setRateLimit;
    /// signal [mountpoints-changed](https://docs.gtk.org/gio/signal.UnixMountMonitor.mountpoints-changed.html)
    pub fn connectMountpointsChanged(self: *UnixMountMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mountpoints-changed", handler, args, flags, &.{ void, *UnixMountMonitor });
    }
    /// signal [mounts-changed](https://docs.gtk.org/gio/signal.UnixMountMonitor.mounts-changed.html)
    pub fn connectMountsChanged(self: *UnixMountMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mounts-changed", handler, args, flags, &.{ void, *UnixMountMonitor });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_mount_monitor_get_type" });
        return cFn();
    }
};
pub const UnixMountMonitorClass = opaque {};
/// Struct [UnixMountPoint](https://docs.gtk.org/gio/struct.UnixMountPoint.html)
pub const UnixMountPoint = opaque {
    /// method [compare](https://docs.gtk.org/gio/method.UnixMountPoint.compare.html)
    pub fn compare(self: *UnixMountPoint, _mount2: *gio.UnixMountPoint) i32 {
        const cFn = @extern(*const fn (*UnixMountPoint, *gio.UnixMountPoint) callconv(.c) i32, .{ .name = "g_unix_mount_point_compare" });
        const ret = cFn(self, _mount2);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gio/method.UnixMountPoint.copy.html)
    pub fn copy(self: *UnixMountPoint) *gio.UnixMountPoint {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) *gio.UnixMountPoint, .{ .name = "g_unix_mount_point_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gio/method.UnixMountPoint.free.html)
    pub fn free(self: *UnixMountPoint) void {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) void, .{ .name = "g_unix_mount_point_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device_path](https://docs.gtk.org/gio/method.UnixMountPoint.get_device_path.html)
    pub fn getDevicePath(self: *UnixMountPoint) [*:0]u8 {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_point_get_device_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fs_type](https://docs.gtk.org/gio/method.UnixMountPoint.get_fs_type.html)
    pub fn getFsType(self: *UnixMountPoint) [*:0]u8 {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_point_get_fs_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mount_path](https://docs.gtk.org/gio/method.UnixMountPoint.get_mount_path.html)
    pub fn getMountPath(self: *UnixMountPoint) [*:0]u8 {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_point_get_mount_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_options](https://docs.gtk.org/gio/method.UnixMountPoint.get_options.html)
    pub fn getOptions(self: *UnixMountPoint) ?[*:0]u8 {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) ?[*:0]u8, .{ .name = "g_unix_mount_point_get_options" });
        const ret = cFn(self);
        return ret;
    }
    /// method [guess_can_eject](https://docs.gtk.org/gio/method.UnixMountPoint.guess_can_eject.html)
    pub fn guessCanEject(self: *UnixMountPoint) bool {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) bool, .{ .name = "g_unix_mount_point_guess_can_eject" });
        const ret = cFn(self);
        return ret;
    }
    /// method [guess_icon](https://docs.gtk.org/gio/method.UnixMountPoint.guess_icon.html)
    pub fn guessIcon(self: *UnixMountPoint) *gio.Icon {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) *gio.Icon, .{ .name = "g_unix_mount_point_guess_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [guess_name](https://docs.gtk.org/gio/method.UnixMountPoint.guess_name.html)
    pub fn guessName(self: *UnixMountPoint) [*:0]u8 {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_point_guess_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [guess_symbolic_icon](https://docs.gtk.org/gio/method.UnixMountPoint.guess_symbolic_icon.html)
    pub fn guessSymbolicIcon(self: *UnixMountPoint) *gio.Icon {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) *gio.Icon, .{ .name = "g_unix_mount_point_guess_symbolic_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_loopback](https://docs.gtk.org/gio/method.UnixMountPoint.is_loopback.html)
    pub fn isLoopback(self: *UnixMountPoint) bool {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) bool, .{ .name = "g_unix_mount_point_is_loopback" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_readonly](https://docs.gtk.org/gio/method.UnixMountPoint.is_readonly.html)
    pub fn isReadonly(self: *UnixMountPoint) bool {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) bool, .{ .name = "g_unix_mount_point_is_readonly" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_user_mountable](https://docs.gtk.org/gio/method.UnixMountPoint.is_user_mountable.html)
    pub fn isUserMountable(self: *UnixMountPoint) bool {
        const cFn = @extern(*const fn (*UnixMountPoint) callconv(.c) bool, .{ .name = "g_unix_mount_point_is_user_mountable" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [at](https://docs.gtk.org/gio/type_func.UnixMountPoint.at.html)
    pub fn at(_mount_path: [*:0]const u8) struct {
        ret: ?*gio.UnixMountPoint,
        time_read: u64,
    } {
        var time_read_out: u64 = undefined;
        const _time_read = &time_read_out;
        const cFn = @extern(*const fn ([*:0]const u8, ?*u64) callconv(.c) ?*gio.UnixMountPoint, .{ .name = "g_unix_mount_point_at" });
        const ret = cFn(_mount_path, _time_read);
        return .{ .ret = ret, .time_read = time_read_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_mount_point_get_type" });
        return cFn();
    }
};
/// Class [UnixOutputStream](https://docs.gtk.org/gio/class.UnixOutputStream.html)
/// - property [close-fd](https://docs.gtk.org/gio/property.UnixOutputStream.close-fd.html): (rw) `bool`
/// - property [fd](https://docs.gtk.org/gio/property.UnixOutputStream.fd.html): (r-) `i32`
pub const UnixOutputStream = extern struct {
    parent_instance: gio.OutputStream,
    priv: ?*gio.UnixOutputStreamPrivate,
    pub const Interfaces = [_]type{ gio.FileDescriptorBased, gio.PollableOutputStream };
    pub const Parent = gio.OutputStream;
    pub const Class = gio.UnixOutputStreamClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixOutputStream.new.html)
    pub fn new(_fd: i32, _close_fd: bool) *UnixOutputStream {
        const cFn = @extern(*const fn (i32, bool) callconv(.c) *UnixOutputStream, .{ .name = "g_unix_output_stream_new" });
        const ret = cFn(_fd, _close_fd);
        return ret;
    }
    /// method [get_close_fd](https://docs.gtk.org/gio/method.UnixOutputStream.get_close_fd.html)
    pub fn getCloseFd(self: *UnixOutputStream) bool {
        const cFn = @extern(*const fn (*UnixOutputStream) callconv(.c) bool, .{ .name = "g_unix_output_stream_get_close_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fd](https://docs.gtk.org/gio/method.UnixOutputStream.get_fd.html)
    pub fn getFd(self: *UnixOutputStream) i32 {
        const cFn = @extern(*const fn (*UnixOutputStream) callconv(.c) i32, .{ .name = "g_unix_output_stream_get_fd" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_close_fd](https://docs.gtk.org/gio/method.UnixOutputStream.set_close_fd.html)
    pub fn setCloseFd(self: *UnixOutputStream, _close_fd: bool) void {
        const cFn = @extern(*const fn (*UnixOutputStream, bool) callconv(.c) void, .{ .name = "g_unix_output_stream_set_close_fd" });
        const ret = cFn(self, _close_fd);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_output_stream_get_type" });
        return cFn();
    }
};
pub const UnixOutputStreamClass = extern struct {
    parent_class: gio.OutputStreamClass,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
};
pub const UnixOutputStreamPrivate = opaque {};
/// Class [UnixSocketAddress](https://docs.gtk.org/gio/class.UnixSocketAddress.html)
/// - property [abstract](https://docs.gtk.org/gio/property.UnixSocketAddress.abstract.html): (r-) `bool`
/// - property [address-type](https://docs.gtk.org/gio/property.UnixSocketAddress.address-type.html): (r-) `gio.UnixSocketAddressType`
/// - property [path](https://docs.gtk.org/gio/property.UnixSocketAddress.path.html): (r-) `[*:0]const u8`
/// - property [path-as-array](https://docs.gtk.org/gio/property.UnixSocketAddress.path-as-array.html): (r-) `*core.ByteArray`
pub const UnixSocketAddress = extern struct {
    parent_instance: gio.SocketAddress,
    priv: ?*gio.UnixSocketAddressPrivate,
    pub const Interfaces = [_]type{gio.SocketConnectable};
    pub const Parent = gio.SocketAddress;
    pub const Class = gio.UnixSocketAddressClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.UnixSocketAddress.new.html)
    pub fn new(_path: [*:0]const u8) *UnixSocketAddress {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *UnixSocketAddress, .{ .name = "g_unix_socket_address_new" });
        const ret = cFn(_path);
        return ret;
    }
    /// Deprecated:
    /// ctor [new_abstract](https://docs.gtk.org/gio/ctor.UnixSocketAddress.new_abstract.html)
    pub const newAbstract = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newAbstract(_paths: []i8) *UnixSocketAddress {
            const _path = _paths.ptr;
            const _path_len: i32 = @intCast(_paths.len);
            const cFn = @extern(*const fn ([*]i8, i32) callconv(.c) *UnixSocketAddress, .{ .name = "g_unix_socket_address_new_abstract" });
            const ret = cFn(_path, _path_len);
            return ret;
        }
    }.newAbstract;
    /// ctor [new_with_type](https://docs.gtk.org/gio/ctor.UnixSocketAddress.new_with_type.html)
    pub fn newWithType(_paths: []i8, _type: gio.UnixSocketAddressType) *UnixSocketAddress {
        const _path = _paths.ptr;
        const _path_len: i32 = @intCast(_paths.len);
        const cFn = @extern(*const fn ([*]i8, i32, gio.UnixSocketAddressType) callconv(.c) *UnixSocketAddress, .{ .name = "g_unix_socket_address_new_with_type" });
        const ret = cFn(_path, _path_len, _type);
        return ret;
    }
    /// type func [abstract_names_supported](https://docs.gtk.org/gio/type_func.UnixSocketAddress.abstract_names_supported.html)
    pub fn abstractNamesSupported() bool {
        const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "g_unix_socket_address_abstract_names_supported" });
        const ret = cFn();
        return ret;
    }
    /// method [get_address_type](https://docs.gtk.org/gio/method.UnixSocketAddress.get_address_type.html)
    pub fn getAddressType(self: *UnixSocketAddress) gio.UnixSocketAddressType {
        const cFn = @extern(*const fn (*UnixSocketAddress) callconv(.c) gio.UnixSocketAddressType, .{ .name = "g_unix_socket_address_get_address_type" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_is_abstract](https://docs.gtk.org/gio/method.UnixSocketAddress.get_is_abstract.html)
    pub const getIsAbstract = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIsAbstract(self: *UnixSocketAddress) bool {
            const cFn = @extern(*const fn (*UnixSocketAddress) callconv(.c) bool, .{ .name = "g_unix_socket_address_get_is_abstract" });
            const ret = cFn(self);
            return ret;
        }
    }.getIsAbstract;
    /// method [get_path](https://docs.gtk.org/gio/method.UnixSocketAddress.get_path.html)
    pub fn getPath(self: *UnixSocketAddress) [*:0]u8 {
        const cFn = @extern(*const fn (*UnixSocketAddress) callconv(.c) [*:0]u8, .{ .name = "g_unix_socket_address_get_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_path_len](https://docs.gtk.org/gio/method.UnixSocketAddress.get_path_len.html)
    pub fn getPathLen(self: *UnixSocketAddress) u64 {
        const cFn = @extern(*const fn (*UnixSocketAddress) callconv(.c) u64, .{ .name = "g_unix_socket_address_get_path_len" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_socket_address_get_type" });
        return cFn();
    }
};
pub const UnixSocketAddressClass = extern struct {
    parent_class: gio.SocketAddressClass,
};
pub const UnixSocketAddressPrivate = opaque {};
/// Enum [UnixSocketAddressType](https://docs.gtk.org/gio/enum.UnixSocketAddressType.html)
pub const UnixSocketAddressType = enum(u32) {
    invalid = 0,
    anonymous = 1,
    path = 2,
    abstract = 3,
    abstract_padded = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_unix_socket_address_type_get_type" });
        return cFn();
    }
};
/// const [VFS_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.VFS_EXTENSION_POINT_NAME.html)
pub const VFS_EXTENSION_POINT_NAME = "gio-vfs";
/// const [VOLUME_IDENTIFIER_KIND_CLASS](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_CLASS.html)
pub const VOLUME_IDENTIFIER_KIND_CLASS = "class";
/// Deprecated:
/// const [VOLUME_IDENTIFIER_KIND_HAL_UDI](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_HAL_UDI.html)
pub const VOLUME_IDENTIFIER_KIND_HAL_UDI = if (config.disable_deprecated) core.Deprecated else "hal-udi";
/// const [VOLUME_IDENTIFIER_KIND_LABEL](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_LABEL.html)
pub const VOLUME_IDENTIFIER_KIND_LABEL = "label";
/// const [VOLUME_IDENTIFIER_KIND_NFS_MOUNT](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_NFS_MOUNT.html)
pub const VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";
/// const [VOLUME_IDENTIFIER_KIND_UNIX_DEVICE](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_UNIX_DEVICE.html)
pub const VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";
/// const [VOLUME_IDENTIFIER_KIND_UUID](https://docs.gtk.org/gio/const.VOLUME_IDENTIFIER_KIND_UUID.html)
pub const VOLUME_IDENTIFIER_KIND_UUID = "uuid";
/// const [VOLUME_MONITOR_EXTENSION_POINT_NAME](https://docs.gtk.org/gio/const.VOLUME_MONITOR_EXTENSION_POINT_NAME.html)
pub const VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";
/// Class [Vfs](https://docs.gtk.org/gio/class.Vfs.html)
pub const Vfs = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gio.VfsClass;
    /// type func [get_default](https://docs.gtk.org/gio/type_func.Vfs.get_default.html)
    pub fn getDefault() *gio.Vfs {
        const cFn = @extern(*const fn () callconv(.c) *gio.Vfs, .{ .name = "g_vfs_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_local](https://docs.gtk.org/gio/type_func.Vfs.get_local.html)
    pub fn getLocal() *gio.Vfs {
        const cFn = @extern(*const fn () callconv(.c) *gio.Vfs, .{ .name = "g_vfs_get_local" });
        const ret = cFn();
        return ret;
    }
    /// method [get_file_for_path](https://docs.gtk.org/gio/method.Vfs.get_file_for_path.html)
    pub fn getFileForPath(self: *Vfs, _path: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*Vfs, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_vfs_get_file_for_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [get_file_for_uri](https://docs.gtk.org/gio/method.Vfs.get_file_for_uri.html)
    pub fn getFileForUri(self: *Vfs, _uri: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*Vfs, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_vfs_get_file_for_uri" });
        const ret = cFn(self, _uri);
        return ret;
    }
    /// method [get_supported_uri_schemes](https://docs.gtk.org/gio/method.Vfs.get_supported_uri_schemes.html)
    pub fn getSupportedUriSchemes(self: *Vfs) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Vfs) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_vfs_get_supported_uri_schemes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gio/method.Vfs.is_active.html)
    pub fn isActive(self: *Vfs) bool {
        const cFn = @extern(*const fn (*Vfs) callconv(.c) bool, .{ .name = "g_vfs_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse_name](https://docs.gtk.org/gio/method.Vfs.parse_name.html)
    pub fn parseName(self: *Vfs, _parse_name: [*:0]const u8) *gio.File {
        const cFn = @extern(*const fn (*Vfs, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_vfs_parse_name" });
        const ret = cFn(self, _parse_name);
        return ret;
    }
    /// method [register_uri_scheme](https://docs.gtk.org/gio/method.Vfs.register_uri_scheme.html)
    pub fn registerUriScheme(self: *Vfs, _scheme: [*:0]const u8, uri_func: anytype, uri_func_args: anytype, parse_name_func: anytype, parse_name_func_args: anytype) bool {
        var closure_uri_func = core.zig_closure(uri_func, uri_func_args, &.{ *gio.File, *gio.Vfs, [*:0]const u8 });
        const _uri_func: ?gio.VfsFileLookupFunc = @ptrCast(closure_uri_func.c_closure());
        const _uri_data: ?*anyopaque = @ptrCast(closure_uri_func.c_data());
        const _uri_destroy: ?glib.DestroyNotify = @ptrCast(closure_uri_func.c_destroy());
        var closure_parse_name_func = core.zig_closure(parse_name_func, parse_name_func_args, &.{ *gio.File, *gio.Vfs, [*:0]const u8 });
        const _parse_name_func: ?gio.VfsFileLookupFunc = @ptrCast(closure_parse_name_func.c_closure());
        const _parse_name_data: ?*anyopaque = @ptrCast(closure_parse_name_func.c_data());
        const _parse_name_destroy: ?glib.DestroyNotify = @ptrCast(closure_parse_name_func.c_destroy());
        const cFn = @extern(*const fn (*Vfs, [*:0]const u8, ?gio.VfsFileLookupFunc, ?*anyopaque, ?glib.DestroyNotify, ?gio.VfsFileLookupFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) bool, .{ .name = "g_vfs_register_uri_scheme" });
        const ret = cFn(self, _scheme, _uri_func, @ptrCast(_uri_data), _uri_destroy, _parse_name_func, @ptrCast(_parse_name_data), _parse_name_destroy);
        return ret;
    }
    /// method [unregister_uri_scheme](https://docs.gtk.org/gio/method.Vfs.unregister_uri_scheme.html)
    pub fn unregisterUriScheme(self: *Vfs, _scheme: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Vfs, [*:0]const u8) callconv(.c) bool, .{ .name = "g_vfs_unregister_uri_scheme" });
        const ret = cFn(self, _scheme);
        return ret;
    }
    /// vfunc [add_writable_namespaces](https://docs.gtk.org/gio/vfunc.Vfs.add_writable_namespaces.html)
    pub fn addWritableNamespacesV(self: *Vfs, _list: *gio.FileAttributeInfoList) void {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_writable_namespaces.?;
        const ret = vFn(self, _list);
        return ret;
    }
    /// vfunc [get_file_for_path](https://docs.gtk.org/gio/vfunc.Vfs.get_file_for_path.html)
    pub fn getFileForPathV(self: *Vfs, _path: [*:0]const u8) *gio.File {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_file_for_path.?;
        const ret = vFn(self, _path);
        return ret;
    }
    /// vfunc [get_file_for_uri](https://docs.gtk.org/gio/vfunc.Vfs.get_file_for_uri.html)
    pub fn getFileForUriV(self: *Vfs, _uri: [*:0]const u8) *gio.File {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_file_for_uri.?;
        const ret = vFn(self, _uri);
        return ret;
    }
    /// vfunc [get_supported_uri_schemes](https://docs.gtk.org/gio/vfunc.Vfs.get_supported_uri_schemes.html)
    pub fn getSupportedUriSchemesV(self: *Vfs) [*:null]?[*:0]const u8 {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_supported_uri_schemes.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_active](https://docs.gtk.org/gio/vfunc.Vfs.is_active.html)
    pub fn isActiveV(self: *Vfs) bool {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_active.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [local_file_add_info](https://docs.gtk.org/gio/vfunc.Vfs.local_file_add_info.html)
    pub fn localFileAddInfoV(self: *Vfs, _filename: [*:0]const u8, _device: u64, _attribute_matcher: *gio.FileAttributeMatcher, _info: *gio.FileInfo, _cancellable: ?*gio.Cancellable, _extra_data: ?*anyopaque, _free_extra_data: glib.DestroyNotify) void {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.local_file_add_info.?;
        const ret = vFn(self, _filename, _device, _attribute_matcher, _info, _cancellable, @ptrCast(_extra_data), _free_extra_data);
        return ret;
    }
    /// vfunc [local_file_moved](https://docs.gtk.org/gio/vfunc.Vfs.local_file_moved.html)
    pub fn localFileMovedV(self: *Vfs, _source: [*:0]const u8, _dest: [*:0]const u8) void {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.local_file_moved.?;
        const ret = vFn(self, _source, _dest);
        return ret;
    }
    /// vfunc [local_file_removed](https://docs.gtk.org/gio/vfunc.Vfs.local_file_removed.html)
    pub fn localFileRemovedV(self: *Vfs, _filename: [*:0]const u8) void {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.local_file_removed.?;
        const ret = vFn(self, _filename);
        return ret;
    }
    /// vfunc [local_file_set_attributes](https://docs.gtk.org/gio/vfunc.Vfs.local_file_set_attributes.html)
    pub fn localFileSetAttributesV(self: *Vfs, _filename: [*:0]const u8, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) bool {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.local_file_set_attributes.?;
        const ret = vFn(self, _filename, _info, _flags, _cancellable, _error);
        return ret;
    }
    /// vfunc [parse_name](https://docs.gtk.org/gio/vfunc.Vfs.parse_name.html)
    pub fn parseNameV(self: *Vfs, _parse_name: [*:0]const u8) *gio.File {
        const class: *VfsClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.parse_name.?;
        const ret = vFn(self, _parse_name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_vfs_get_type" });
        return cFn();
    }
};
pub const VfsClass = extern struct {
    parent_class: gobject.ObjectClass,
    is_active: ?*const fn (_vfs: *gio.Vfs) callconv(.c) bool,
    get_file_for_path: ?*const fn (_vfs: *gio.Vfs, _path: [*:0]const u8) callconv(.c) *gio.File,
    get_file_for_uri: ?*const fn (_vfs: *gio.Vfs, _uri: [*:0]const u8) callconv(.c) *gio.File,
    get_supported_uri_schemes: ?*const fn (_vfs: *gio.Vfs) callconv(.c) [*:null]?[*:0]const u8,
    parse_name: ?*const fn (_vfs: *gio.Vfs, _parse_name: [*:0]const u8) callconv(.c) *gio.File,
    local_file_add_info: ?*const fn (_vfs: *gio.Vfs, _filename: [*:0]const u8, _device: u64, _attribute_matcher: *gio.FileAttributeMatcher, _info: *gio.FileInfo, _cancellable: ?*gio.Cancellable, _extra_data: ?*anyopaque, _free_extra_data: glib.DestroyNotify) callconv(.c) void,
    add_writable_namespaces: ?*const fn (_vfs: *gio.Vfs, _list: *gio.FileAttributeInfoList) callconv(.c) void,
    local_file_set_attributes: ?*const fn (_vfs: *gio.Vfs, _filename: [*:0]const u8, _info: *gio.FileInfo, _flags: gio.FileQueryInfoFlags, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) callconv(.c) bool,
    local_file_removed: ?*const fn (_vfs: *gio.Vfs, _filename: [*:0]const u8) callconv(.c) void,
    local_file_moved: ?*const fn (_vfs: *gio.Vfs, _source: [*:0]const u8, _dest: [*:0]const u8) callconv(.c) void,
    deserialize_icon: ?*anyopaque,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
};
/// callback [VfsFileLookupFunc](https://docs.gtk.org/gio/callback.VfsFileLookupFunc.html)
pub const VfsFileLookupFunc = *const fn (_vfs: *gio.Vfs, _identifier: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) *gio.File;
/// Iface [Volume](https://docs.gtk.org/gio/iface.Volume.html)
pub const Volume = opaque {
    /// method [can_eject](https://docs.gtk.org/gio/method.Volume.can_eject.html)
    pub fn canEject(self: *Volume) bool {
        const cFn = @extern(*const fn (*Volume) callconv(.c) bool, .{ .name = "g_volume_can_eject" });
        const ret = cFn(self);
        return ret;
    }
    /// method [can_mount](https://docs.gtk.org/gio/method.Volume.can_mount.html)
    pub fn canMount(self: *Volume) bool {
        const cFn = @extern(*const fn (*Volume) callconv(.c) bool, .{ .name = "g_volume_can_mount" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [eject](https://docs.gtk.org/gio/method.Volume.eject.html)
    pub const eject = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn eject(self: *Volume, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
            closure_callback.setOnce();
            const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*Volume, gio.MountUnmountFlags, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_volume_eject" });
            const ret = cFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
            return ret;
        }
    }.eject;
    /// Deprecated:
    /// method [eject_finish](https://docs.gtk.org/gio/method.Volume.eject_finish.html)
    pub const ejectFinish = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ejectFinish(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*Volume, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_volume_eject_finish" });
            const ret = cFn(self, _result, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.ejectFinish;
    /// method [eject_with_operation](https://docs.gtk.org/gio/method.Volume.eject_with_operation.html)
    pub fn ejectWithOperation(self: *Volume, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Volume, gio.MountUnmountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_volume_eject_with_operation" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [eject_with_operation_finish](https://docs.gtk.org/gio/method.Volume.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinish(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Volume, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_volume_eject_with_operation_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [enumerate_identifiers](https://docs.gtk.org/gio/method.Volume.enumerate_identifiers.html)
    pub fn enumerateIdentifiers(self: *Volume) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Volume) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_volume_enumerate_identifiers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_activation_root](https://docs.gtk.org/gio/method.Volume.get_activation_root.html)
    pub fn getActivationRoot(self: *Volume) ?*gio.File {
        const cFn = @extern(*const fn (*Volume) callconv(.c) ?*gio.File, .{ .name = "g_volume_get_activation_root" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drive](https://docs.gtk.org/gio/method.Volume.get_drive.html)
    pub fn getDrive(self: *Volume) ?*gio.Drive {
        const cFn = @extern(*const fn (*Volume) callconv(.c) ?*gio.Drive, .{ .name = "g_volume_get_drive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon](https://docs.gtk.org/gio/method.Volume.get_icon.html)
    pub fn getIcon(self: *Volume) *gio.Icon {
        const cFn = @extern(*const fn (*Volume) callconv(.c) *gio.Icon, .{ .name = "g_volume_get_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_identifier](https://docs.gtk.org/gio/method.Volume.get_identifier.html)
    pub fn getIdentifier(self: *Volume, _kind: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Volume, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_volume_get_identifier" });
        const ret = cFn(self, _kind);
        return ret;
    }
    /// method [get_mount](https://docs.gtk.org/gio/method.Volume.get_mount.html)
    pub fn getMount(self: *Volume) ?*gio.Mount {
        const cFn = @extern(*const fn (*Volume) callconv(.c) ?*gio.Mount, .{ .name = "g_volume_get_mount" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gio/method.Volume.get_name.html)
    pub fn getName(self: *Volume) [*:0]u8 {
        const cFn = @extern(*const fn (*Volume) callconv(.c) [*:0]u8, .{ .name = "g_volume_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sort_key](https://docs.gtk.org/gio/method.Volume.get_sort_key.html)
    pub fn getSortKey(self: *Volume) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Volume) callconv(.c) ?[*:0]u8, .{ .name = "g_volume_get_sort_key" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_symbolic_icon](https://docs.gtk.org/gio/method.Volume.get_symbolic_icon.html)
    pub fn getSymbolicIcon(self: *Volume) *gio.Icon {
        const cFn = @extern(*const fn (*Volume) callconv(.c) *gio.Icon, .{ .name = "g_volume_get_symbolic_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uuid](https://docs.gtk.org/gio/method.Volume.get_uuid.html)
    pub fn getUuid(self: *Volume) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Volume) callconv(.c) ?[*:0]u8, .{ .name = "g_volume_get_uuid" });
        const ret = cFn(self);
        return ret;
    }
    /// method [mount](https://docs.gtk.org/gio/method.Volume.mount.html)
    pub fn mount(self: *Volume, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Volume, gio.MountMountFlags, ?*gio.MountOperation, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_volume_mount" });
        const ret = cFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [mount_finish](https://docs.gtk.org/gio/method.Volume.mount_finish.html)
    pub fn mountFinish(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Volume, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_volume_mount_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [should_automount](https://docs.gtk.org/gio/method.Volume.should_automount.html)
    pub fn shouldAutomount(self: *Volume) bool {
        const cFn = @extern(*const fn (*Volume) callconv(.c) bool, .{ .name = "g_volume_should_automount" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [can_eject](https://docs.gtk.org/gio/vfunc.Volume.can_eject.html)
    pub fn canEjectV(self: *Volume) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_eject.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [can_mount](https://docs.gtk.org/gio/vfunc.Volume.can_mount.html)
    pub fn canMountV(self: *Volume) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.can_mount.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gio/vfunc.Volume.changed.html)
    pub fn changedV(self: *Volume) void {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [eject](https://docs.gtk.org/gio/vfunc.Volume.eject.html)
    pub fn ejectV(self: *Volume, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject.?;
        const ret = vFn(self, _flags, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_finish](https://docs.gtk.org/gio/vfunc.Volume.eject_finish.html)
    pub fn ejectFinishV(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [eject_with_operation](https://docs.gtk.org/gio/vfunc.Volume.eject_with_operation.html)
    pub fn ejectWithOperationV(self: *Volume, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [eject_with_operation_finish](https://docs.gtk.org/gio/vfunc.Volume.eject_with_operation_finish.html)
    pub fn ejectWithOperationFinishV(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.eject_with_operation_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [enumerate_identifiers](https://docs.gtk.org/gio/vfunc.Volume.enumerate_identifiers.html)
    pub fn enumerateIdentifiersV(self: *Volume) [*:null]?[*:0]const u8 {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enumerate_identifiers.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_activation_root](https://docs.gtk.org/gio/vfunc.Volume.get_activation_root.html)
    pub fn getActivationRootV(self: *Volume) ?*gio.File {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_activation_root.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_drive](https://docs.gtk.org/gio/vfunc.Volume.get_drive.html)
    pub fn getDriveV(self: *Volume) ?*gio.Drive {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_drive.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_icon](https://docs.gtk.org/gio/vfunc.Volume.get_icon.html)
    pub fn getIconV(self: *Volume) *gio.Icon {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_identifier](https://docs.gtk.org/gio/vfunc.Volume.get_identifier.html)
    pub fn getIdentifierV(self: *Volume, _kind: [*:0]const u8) ?[*:0]u8 {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_identifier.?;
        const ret = vFn(self, _kind);
        return ret;
    }
    /// vfunc [get_mount](https://docs.gtk.org/gio/vfunc.Volume.get_mount.html)
    pub fn getMountV(self: *Volume) ?*gio.Mount {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_mount.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/gio/vfunc.Volume.get_name.html)
    pub fn getNameV(self: *Volume) [*:0]u8 {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_sort_key](https://docs.gtk.org/gio/vfunc.Volume.get_sort_key.html)
    pub fn getSortKeyV(self: *Volume) ?[*:0]u8 {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_sort_key.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_symbolic_icon](https://docs.gtk.org/gio/vfunc.Volume.get_symbolic_icon.html)
    pub fn getSymbolicIconV(self: *Volume) *gio.Icon {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_symbolic_icon.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_uuid](https://docs.gtk.org/gio/vfunc.Volume.get_uuid.html)
    pub fn getUuidV(self: *Volume) ?[*:0]u8 {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_uuid.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [mount_finish](https://docs.gtk.org/gio/vfunc.Volume.mount_finish.html)
    pub fn mountFinishV(self: *Volume, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// vfunc [mount_fn](https://docs.gtk.org/gio/vfunc.Volume.mount_fn.html)
    pub fn mountFnV(self: *Volume, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_fn.?;
        const ret = vFn(self, _flags, _mount_operation, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [removed](https://docs.gtk.org/gio/vfunc.Volume.removed.html)
    pub fn removedV(self: *Volume) void {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.removed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [should_automount](https://docs.gtk.org/gio/vfunc.Volume.should_automount.html)
    pub fn shouldAutomountV(self: *Volume) bool {
        const class: *VolumeIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.should_automount.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gio/signal.Volume.changed.html)
    pub fn connectChanged(self: *Volume, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Volume });
    }
    /// signal [removed](https://docs.gtk.org/gio/signal.Volume.removed.html)
    pub fn connectRemoved(self: *Volume, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("removed", handler, args, flags, &.{ void, *Volume });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_volume_get_type" });
        return cFn();
    }
};
/// Struct [VolumeIface](https://docs.gtk.org/gio/struct.VolumeIface.html)
pub const VolumeIface = extern struct {
    g_iface: gobject.TypeInterface,
    changed: ?*const fn (_volume: *gio.Volume) callconv(.c) void,
    removed: ?*const fn (_volume: *gio.Volume) callconv(.c) void,
    get_name: ?*const fn (_volume: *gio.Volume) callconv(.c) [*:0]u8,
    get_icon: ?*const fn (_volume: *gio.Volume) callconv(.c) *gio.Icon,
    get_uuid: ?*const fn (_volume: *gio.Volume) callconv(.c) ?[*:0]u8,
    get_drive: ?*const fn (_volume: *gio.Volume) callconv(.c) ?*gio.Drive,
    get_mount: ?*const fn (_volume: *gio.Volume) callconv(.c) ?*gio.Mount,
    can_mount: ?*const fn (_volume: *gio.Volume) callconv(.c) bool,
    can_eject: ?*const fn (_volume: *gio.Volume) callconv(.c) bool,
    mount_fn: ?*const fn (_volume: *gio.Volume, _flags: gio.MountMountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    mount_finish: ?*const fn (_volume: *gio.Volume, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    eject: ?*const fn (_volume: *gio.Volume, _flags: gio.MountUnmountFlags, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_finish: ?*const fn (_volume: *gio.Volume, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_identifier: ?*const fn (_volume: *gio.Volume, _kind: [*:0]const u8) callconv(.c) ?[*:0]u8,
    enumerate_identifiers: ?*const fn (_volume: *gio.Volume) callconv(.c) [*:null]?[*:0]const u8,
    should_automount: ?*const fn (_volume: *gio.Volume) callconv(.c) bool,
    get_activation_root: ?*const fn (_volume: *gio.Volume) callconv(.c) ?*gio.File,
    eject_with_operation: ?*const fn (_volume: *gio.Volume, _flags: gio.MountUnmountFlags, _mount_operation: ?*gio.MountOperation, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    eject_with_operation_finish: ?*const fn (_volume: *gio.Volume, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_sort_key: ?*const fn (_volume: *gio.Volume) callconv(.c) ?[*:0]u8,
    get_symbolic_icon: ?*const fn (_volume: *gio.Volume) callconv(.c) *gio.Icon,
};
/// Class [VolumeMonitor](https://docs.gtk.org/gio/class.VolumeMonitor.html)
pub const VolumeMonitor = extern struct {
    parent_instance: gobject.Object,
    priv: ?*anyopaque,
    pub const Parent = gobject.Object;
    pub const Class = gio.VolumeMonitorClass;
    /// Deprecated:
    /// type func [adopt_orphan_mount](https://docs.gtk.org/gio/type_func.VolumeMonitor.adopt_orphan_mount.html)
    pub const adoptOrphanMount = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn adoptOrphanMount(_mount: *gio.Mount) *gio.Volume {
            const cFn = @extern(*const fn (*gio.Mount) callconv(.c) *gio.Volume, .{ .name = "g_volume_monitor_adopt_orphan_mount" });
            const ret = cFn(_mount);
            return ret;
        }
    }.adoptOrphanMount;
    /// type func [get](https://docs.gtk.org/gio/type_func.VolumeMonitor.get.html)
    pub fn get() *gio.VolumeMonitor {
        const cFn = @extern(*const fn () callconv(.c) *gio.VolumeMonitor, .{ .name = "g_volume_monitor_get" });
        const ret = cFn();
        return ret;
    }
    /// method [get_connected_drives](https://docs.gtk.org/gio/method.VolumeMonitor.get_connected_drives.html)
    pub fn getConnectedDrives(self: *VolumeMonitor) ?*core.List {
        const cFn = @extern(*const fn (*VolumeMonitor) callconv(.c) ?*core.List, .{ .name = "g_volume_monitor_get_connected_drives" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mount_for_uuid](https://docs.gtk.org/gio/method.VolumeMonitor.get_mount_for_uuid.html)
    pub fn getMountForUuid(self: *VolumeMonitor, _uuid: [*:0]const u8) ?*gio.Mount {
        const cFn = @extern(*const fn (*VolumeMonitor, [*:0]const u8) callconv(.c) ?*gio.Mount, .{ .name = "g_volume_monitor_get_mount_for_uuid" });
        const ret = cFn(self, _uuid);
        return ret;
    }
    /// method [get_mounts](https://docs.gtk.org/gio/method.VolumeMonitor.get_mounts.html)
    pub fn getMounts(self: *VolumeMonitor) ?*core.List {
        const cFn = @extern(*const fn (*VolumeMonitor) callconv(.c) ?*core.List, .{ .name = "g_volume_monitor_get_mounts" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_volume_for_uuid](https://docs.gtk.org/gio/method.VolumeMonitor.get_volume_for_uuid.html)
    pub fn getVolumeForUuid(self: *VolumeMonitor, _uuid: [*:0]const u8) ?*gio.Volume {
        const cFn = @extern(*const fn (*VolumeMonitor, [*:0]const u8) callconv(.c) ?*gio.Volume, .{ .name = "g_volume_monitor_get_volume_for_uuid" });
        const ret = cFn(self, _uuid);
        return ret;
    }
    /// method [get_volumes](https://docs.gtk.org/gio/method.VolumeMonitor.get_volumes.html)
    pub fn getVolumes(self: *VolumeMonitor) ?*core.List {
        const cFn = @extern(*const fn (*VolumeMonitor) callconv(.c) ?*core.List, .{ .name = "g_volume_monitor_get_volumes" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [drive_changed](https://docs.gtk.org/gio/vfunc.VolumeMonitor.drive_changed.html)
    pub fn driveChangedV(self: *VolumeMonitor, _drive: *gio.Drive) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drive_changed.?;
        const ret = vFn(self, _drive);
        return ret;
    }
    /// vfunc [drive_connected](https://docs.gtk.org/gio/vfunc.VolumeMonitor.drive_connected.html)
    pub fn driveConnectedV(self: *VolumeMonitor, _drive: *gio.Drive) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drive_connected.?;
        const ret = vFn(self, _drive);
        return ret;
    }
    /// vfunc [drive_disconnected](https://docs.gtk.org/gio/vfunc.VolumeMonitor.drive_disconnected.html)
    pub fn driveDisconnectedV(self: *VolumeMonitor, _drive: *gio.Drive) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drive_disconnected.?;
        const ret = vFn(self, _drive);
        return ret;
    }
    /// vfunc [drive_eject_button](https://docs.gtk.org/gio/vfunc.VolumeMonitor.drive_eject_button.html)
    pub fn driveEjectButtonV(self: *VolumeMonitor, _drive: *gio.Drive) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drive_eject_button.?;
        const ret = vFn(self, _drive);
        return ret;
    }
    /// vfunc [drive_stop_button](https://docs.gtk.org/gio/vfunc.VolumeMonitor.drive_stop_button.html)
    pub fn driveStopButtonV(self: *VolumeMonitor, _drive: *gio.Drive) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drive_stop_button.?;
        const ret = vFn(self, _drive);
        return ret;
    }
    /// vfunc [get_connected_drives](https://docs.gtk.org/gio/vfunc.VolumeMonitor.get_connected_drives.html)
    pub fn getConnectedDrivesV(self: *VolumeMonitor) ?*core.List {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_connected_drives.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_mount_for_uuid](https://docs.gtk.org/gio/vfunc.VolumeMonitor.get_mount_for_uuid.html)
    pub fn getMountForUuidV(self: *VolumeMonitor, _uuid: [*:0]const u8) ?*gio.Mount {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_mount_for_uuid.?;
        const ret = vFn(self, _uuid);
        return ret;
    }
    /// vfunc [get_mounts](https://docs.gtk.org/gio/vfunc.VolumeMonitor.get_mounts.html)
    pub fn getMountsV(self: *VolumeMonitor) ?*core.List {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_mounts.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_volume_for_uuid](https://docs.gtk.org/gio/vfunc.VolumeMonitor.get_volume_for_uuid.html)
    pub fn getVolumeForUuidV(self: *VolumeMonitor, _uuid: [*:0]const u8) ?*gio.Volume {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_volume_for_uuid.?;
        const ret = vFn(self, _uuid);
        return ret;
    }
    /// vfunc [get_volumes](https://docs.gtk.org/gio/vfunc.VolumeMonitor.get_volumes.html)
    pub fn getVolumesV(self: *VolumeMonitor) ?*core.List {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_volumes.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [mount_added](https://docs.gtk.org/gio/vfunc.VolumeMonitor.mount_added.html)
    pub fn mountAddedV(self: *VolumeMonitor, _mount: *gio.Mount) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_added.?;
        const ret = vFn(self, _mount);
        return ret;
    }
    /// vfunc [mount_changed](https://docs.gtk.org/gio/vfunc.VolumeMonitor.mount_changed.html)
    pub fn mountChangedV(self: *VolumeMonitor, _mount: *gio.Mount) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_changed.?;
        const ret = vFn(self, _mount);
        return ret;
    }
    /// vfunc [mount_pre_unmount](https://docs.gtk.org/gio/vfunc.VolumeMonitor.mount_pre_unmount.html)
    pub fn mountPreUnmountV(self: *VolumeMonitor, _mount: *gio.Mount) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_pre_unmount.?;
        const ret = vFn(self, _mount);
        return ret;
    }
    /// vfunc [mount_removed](https://docs.gtk.org/gio/vfunc.VolumeMonitor.mount_removed.html)
    pub fn mountRemovedV(self: *VolumeMonitor, _mount: *gio.Mount) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mount_removed.?;
        const ret = vFn(self, _mount);
        return ret;
    }
    /// vfunc [volume_added](https://docs.gtk.org/gio/vfunc.VolumeMonitor.volume_added.html)
    pub fn volumeAddedV(self: *VolumeMonitor, _volume: *gio.Volume) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.volume_added.?;
        const ret = vFn(self, _volume);
        return ret;
    }
    /// vfunc [volume_changed](https://docs.gtk.org/gio/vfunc.VolumeMonitor.volume_changed.html)
    pub fn volumeChangedV(self: *VolumeMonitor, _volume: *gio.Volume) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.volume_changed.?;
        const ret = vFn(self, _volume);
        return ret;
    }
    /// vfunc [volume_removed](https://docs.gtk.org/gio/vfunc.VolumeMonitor.volume_removed.html)
    pub fn volumeRemovedV(self: *VolumeMonitor, _volume: *gio.Volume) void {
        const class: *VolumeMonitorClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.volume_removed.?;
        const ret = vFn(self, _volume);
        return ret;
    }
    /// signal [drive-changed](https://docs.gtk.org/gio/signal.VolumeMonitor.drive-changed.html)
    pub fn connectDriveChanged(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drive-changed", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Drive });
    }
    /// signal [drive-connected](https://docs.gtk.org/gio/signal.VolumeMonitor.drive-connected.html)
    pub fn connectDriveConnected(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drive-connected", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Drive });
    }
    /// signal [drive-disconnected](https://docs.gtk.org/gio/signal.VolumeMonitor.drive-disconnected.html)
    pub fn connectDriveDisconnected(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drive-disconnected", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Drive });
    }
    /// signal [drive-eject-button](https://docs.gtk.org/gio/signal.VolumeMonitor.drive-eject-button.html)
    pub fn connectDriveEjectButton(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drive-eject-button", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Drive });
    }
    /// signal [drive-stop-button](https://docs.gtk.org/gio/signal.VolumeMonitor.drive-stop-button.html)
    pub fn connectDriveStopButton(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drive-stop-button", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Drive });
    }
    /// signal [mount-added](https://docs.gtk.org/gio/signal.VolumeMonitor.mount-added.html)
    pub fn connectMountAdded(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mount-added", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Mount });
    }
    /// signal [mount-changed](https://docs.gtk.org/gio/signal.VolumeMonitor.mount-changed.html)
    pub fn connectMountChanged(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mount-changed", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Mount });
    }
    /// signal [mount-pre-unmount](https://docs.gtk.org/gio/signal.VolumeMonitor.mount-pre-unmount.html)
    pub fn connectMountPreUnmount(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mount-pre-unmount", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Mount });
    }
    /// signal [mount-removed](https://docs.gtk.org/gio/signal.VolumeMonitor.mount-removed.html)
    pub fn connectMountRemoved(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mount-removed", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Mount });
    }
    /// signal [volume-added](https://docs.gtk.org/gio/signal.VolumeMonitor.volume-added.html)
    pub fn connectVolumeAdded(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("volume-added", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Volume });
    }
    /// signal [volume-changed](https://docs.gtk.org/gio/signal.VolumeMonitor.volume-changed.html)
    pub fn connectVolumeChanged(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("volume-changed", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Volume });
    }
    /// signal [volume-removed](https://docs.gtk.org/gio/signal.VolumeMonitor.volume-removed.html)
    pub fn connectVolumeRemoved(self: *VolumeMonitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("volume-removed", handler, args, flags, &.{ void, *VolumeMonitor, *gio.Volume });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_volume_monitor_get_type" });
        return cFn();
    }
};
pub const VolumeMonitorClass = extern struct {
    parent_class: gobject.ObjectClass,
    volume_added: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _volume: *gio.Volume) callconv(.c) void,
    volume_removed: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _volume: *gio.Volume) callconv(.c) void,
    volume_changed: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _volume: *gio.Volume) callconv(.c) void,
    mount_added: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _mount: *gio.Mount) callconv(.c) void,
    mount_removed: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _mount: *gio.Mount) callconv(.c) void,
    mount_pre_unmount: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _mount: *gio.Mount) callconv(.c) void,
    mount_changed: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _mount: *gio.Mount) callconv(.c) void,
    drive_connected: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _drive: *gio.Drive) callconv(.c) void,
    drive_disconnected: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _drive: *gio.Drive) callconv(.c) void,
    drive_changed: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _drive: *gio.Drive) callconv(.c) void,
    is_supported: ?*const fn () callconv(.c) bool,
    get_connected_drives: ?*const fn (_volume_monitor: *gio.VolumeMonitor) callconv(.c) ?*core.List,
    get_volumes: ?*const fn (_volume_monitor: *gio.VolumeMonitor) callconv(.c) ?*core.List,
    get_mounts: ?*const fn (_volume_monitor: *gio.VolumeMonitor) callconv(.c) ?*core.List,
    get_volume_for_uuid: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _uuid: [*:0]const u8) callconv(.c) ?*gio.Volume,
    get_mount_for_uuid: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _uuid: [*:0]const u8) callconv(.c) ?*gio.Mount,
    adopt_orphan_mount: ?*anyopaque,
    drive_eject_button: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _drive: *gio.Drive) callconv(.c) void,
    drive_stop_button: ?*const fn (_volume_monitor: *gio.VolumeMonitor, _drive: *gio.Drive) callconv(.c) void,
    _g_reserved1: ?*anyopaque,
    _g_reserved2: ?*anyopaque,
    _g_reserved3: ?*anyopaque,
    _g_reserved4: ?*anyopaque,
    _g_reserved5: ?*anyopaque,
    _g_reserved6: ?*anyopaque,
};
/// Class [ZlibCompressor](https://docs.gtk.org/gio/class.ZlibCompressor.html)
/// - property [file-info](https://docs.gtk.org/gio/property.ZlibCompressor.file-info.html): (rw) `gio.FileInfo`
/// - property [format](https://docs.gtk.org/gio/property.ZlibCompressor.format.html): (r-) `gio.ZlibCompressorFormat`
/// - property [level](https://docs.gtk.org/gio/property.ZlibCompressor.level.html): (r-) `i32`
pub const ZlibCompressor = opaque {
    pub const Interfaces = [_]type{gio.Converter};
    pub const Parent = gobject.Object;
    pub const Class = gio.ZlibCompressorClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ZlibCompressor.new.html)
    pub fn new(_format: gio.ZlibCompressorFormat, _level: i32) *ZlibCompressor {
        const cFn = @extern(*const fn (gio.ZlibCompressorFormat, i32) callconv(.c) *ZlibCompressor, .{ .name = "g_zlib_compressor_new" });
        const ret = cFn(_format, _level);
        return ret;
    }
    /// method [get_file_info](https://docs.gtk.org/gio/method.ZlibCompressor.get_file_info.html)
    pub fn getFileInfo(self: *ZlibCompressor) ?*gio.FileInfo {
        const cFn = @extern(*const fn (*ZlibCompressor) callconv(.c) ?*gio.FileInfo, .{ .name = "g_zlib_compressor_get_file_info" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_file_info](https://docs.gtk.org/gio/method.ZlibCompressor.set_file_info.html)
    pub fn setFileInfo(self: *ZlibCompressor, _file_info: ?*gio.FileInfo) void {
        const cFn = @extern(*const fn (*ZlibCompressor, ?*gio.FileInfo) callconv(.c) void, .{ .name = "g_zlib_compressor_set_file_info" });
        const ret = cFn(self, _file_info);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_zlib_compressor_get_type" });
        return cFn();
    }
};
pub const ZlibCompressorClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [ZlibCompressorFormat](https://docs.gtk.org/gio/enum.ZlibCompressorFormat.html)
pub const ZlibCompressorFormat = enum(u32) {
    zlib = 0,
    gzip = 1,
    raw = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_zlib_compressor_format_get_type" });
        return cFn();
    }
};
/// Class [ZlibDecompressor](https://docs.gtk.org/gio/class.ZlibDecompressor.html)
/// - property [file-info](https://docs.gtk.org/gio/property.ZlibDecompressor.file-info.html): (r-) `gio.FileInfo`
/// - property [format](https://docs.gtk.org/gio/property.ZlibDecompressor.format.html): (r-) `gio.ZlibCompressorFormat`
pub const ZlibDecompressor = opaque {
    pub const Interfaces = [_]type{gio.Converter};
    pub const Parent = gobject.Object;
    pub const Class = gio.ZlibDecompressorClass;
    /// ctor [new](https://docs.gtk.org/gio/ctor.ZlibDecompressor.new.html)
    pub fn new(_format: gio.ZlibCompressorFormat) *ZlibDecompressor {
        const cFn = @extern(*const fn (gio.ZlibCompressorFormat) callconv(.c) *ZlibDecompressor, .{ .name = "g_zlib_decompressor_new" });
        const ret = cFn(_format);
        return ret;
    }
    /// method [get_file_info](https://docs.gtk.org/gio/method.ZlibDecompressor.get_file_info.html)
    pub fn getFileInfo(self: *ZlibDecompressor) ?*gio.FileInfo {
        const cFn = @extern(*const fn (*ZlibDecompressor) callconv(.c) ?*gio.FileInfo, .{ .name = "g_zlib_decompressor_get_file_info" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_zlib_decompressor_get_type" });
        return cFn();
    }
};
pub const ZlibDecompressorClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// func [action_name_is_valid](https://docs.gtk.org/gio/func.action_name_is_valid.html)
pub fn actionNameIsValid(_action_name: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_action_name_is_valid" });
    const ret = cFn(_action_name);
    return ret;
}
/// func [action_parse_detailed_name](https://docs.gtk.org/gio/func.action_parse_detailed_name.html)
pub fn actionParseDetailedName(_detailed_name: [*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    action_name: [*:0]u8,
    target_value: ?*glib.Variant,
} {
    var action_name_out: [*:0]u8 = undefined;
    const _action_name = &action_name_out;
    var target_value_out: ?*glib.Variant = undefined;
    const _target_value = &target_value_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*[*:0]u8, ?*?*glib.Variant, *?*core.Error) callconv(.c) bool, .{ .name = "g_action_parse_detailed_name" });
    const ret = cFn(_detailed_name, _action_name, _target_value, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .action_name = action_name_out, .target_value = target_value_out };
}
/// func [action_print_detailed_name](https://docs.gtk.org/gio/func.action_print_detailed_name.html)
pub fn actionPrintDetailedName(_action_name: [*:0]const u8, _target_value: ?*glib.Variant) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8, ?*glib.Variant) callconv(.c) [*:0]u8, .{ .name = "g_action_print_detailed_name" });
    const ret = cFn(_action_name, _target_value);
    return ret;
}
/// func [app_info_create_from_commandline](https://docs.gtk.org/gio/func.app_info_create_from_commandline.html)
pub fn appInfoCreateFromCommandline(_commandline: [*:0]const u8, _application_name: ?[*:0]const u8, _flags: gio.AppInfoCreateFlags, _error: *?*core.Error) error{GError}!*gio.AppInfo {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, gio.AppInfoCreateFlags, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_create_from_commandline" });
    const ret = cFn(_commandline, _application_name, _flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [app_info_get_all](https://docs.gtk.org/gio/func.app_info_get_all.html)
pub fn appInfoGetAll() ?*core.List {
    const cFn = @extern(*const fn () callconv(.c) ?*core.List, .{ .name = "g_app_info_get_all" });
    const ret = cFn();
    return ret;
}
/// func [app_info_get_all_for_type](https://docs.gtk.org/gio/func.app_info_get_all_for_type.html)
pub fn appInfoGetAllForType(_content_type: [*:0]const u8) ?*core.List {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_all_for_type" });
    const ret = cFn(_content_type);
    return ret;
}
/// func [app_info_get_default_for_type](https://docs.gtk.org/gio/func.app_info_get_default_for_type.html)
pub fn appInfoGetDefaultForType(_content_type: [*:0]const u8, _must_support_uris: bool) ?*gio.AppInfo {
    const cFn = @extern(*const fn ([*:0]const u8, bool) callconv(.c) ?*gio.AppInfo, .{ .name = "g_app_info_get_default_for_type" });
    const ret = cFn(_content_type, _must_support_uris);
    return ret;
}
/// func [app_info_get_default_for_type_async](https://docs.gtk.org/gio/func.app_info_get_default_for_type_async.html)
pub fn appInfoGetDefaultForTypeAsync(_content_type: [*:0]const u8, _must_support_uris: bool, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn ([*:0]const u8, bool, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_get_default_for_type_async" });
    const ret = cFn(_content_type, _must_support_uris, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [app_info_get_default_for_type_finish](https://docs.gtk.org/gio/func.app_info_get_default_for_type_finish.html)
pub fn appInfoGetDefaultForTypeFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.AppInfo {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_get_default_for_type_finish" });
    const ret = cFn(_result, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [app_info_get_default_for_uri_scheme](https://docs.gtk.org/gio/func.app_info_get_default_for_uri_scheme.html)
pub fn appInfoGetDefaultForUriScheme(_uri_scheme: [*:0]const u8) ?*gio.AppInfo {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gio.AppInfo, .{ .name = "g_app_info_get_default_for_uri_scheme" });
    const ret = cFn(_uri_scheme);
    return ret;
}
/// func [app_info_get_default_for_uri_scheme_async](https://docs.gtk.org/gio/func.app_info_get_default_for_uri_scheme_async.html)
pub fn appInfoGetDefaultForUriSchemeAsync(_uri_scheme: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn ([*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_get_default_for_uri_scheme_async" });
    const ret = cFn(_uri_scheme, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [app_info_get_default_for_uri_scheme_finish](https://docs.gtk.org/gio/func.app_info_get_default_for_uri_scheme_finish.html)
pub fn appInfoGetDefaultForUriSchemeFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.AppInfo {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.AppInfo, .{ .name = "g_app_info_get_default_for_uri_scheme_finish" });
    const ret = cFn(_result, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [app_info_get_fallback_for_type](https://docs.gtk.org/gio/func.app_info_get_fallback_for_type.html)
pub fn appInfoGetFallbackForType(_content_type: [*:0]const u8) ?*core.List {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_fallback_for_type" });
    const ret = cFn(_content_type);
    return ret;
}
/// func [app_info_get_recommended_for_type](https://docs.gtk.org/gio/func.app_info_get_recommended_for_type.html)
pub fn appInfoGetRecommendedForType(_content_type: [*:0]const u8) ?*core.List {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_app_info_get_recommended_for_type" });
    const ret = cFn(_content_type);
    return ret;
}
/// func [app_info_launch_default_for_uri](https://docs.gtk.org/gio/func.app_info_launch_default_for_uri.html)
pub fn appInfoLaunchDefaultForUri(_uri: [*:0]const u8, _context: ?*gio.AppLaunchContext, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn ([*:0]const u8, ?*gio.AppLaunchContext, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_default_for_uri" });
    const ret = cFn(_uri, _context, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [app_info_launch_default_for_uri_async](https://docs.gtk.org/gio/func.app_info_launch_default_for_uri_async.html)
pub fn appInfoLaunchDefaultForUriAsync(_uri: [*:0]const u8, _context: ?*gio.AppLaunchContext, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn ([*:0]const u8, ?*gio.AppLaunchContext, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_app_info_launch_default_for_uri_async" });
    const ret = cFn(_uri, _context, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [app_info_launch_default_for_uri_finish](https://docs.gtk.org/gio/func.app_info_launch_default_for_uri_finish.html)
pub fn appInfoLaunchDefaultForUriFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "g_app_info_launch_default_for_uri_finish" });
    const ret = cFn(_result, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [app_info_reset_type_associations](https://docs.gtk.org/gio/func.app_info_reset_type_associations.html)
pub fn appInfoResetTypeAssociations(_content_type: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_app_info_reset_type_associations" });
    const ret = cFn(_content_type);
    return ret;
}
/// Deprecated:
/// func [async_initable_newv_async](https://docs.gtk.org/gio/func.async_initable_newv_async.html)
pub const asyncInitableNewvAsync = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn asyncInitableNewvAsync(_object_type: core.Type, _n_parameters: u32, _parameters: *gobject.Parameter, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (core.Type, u32, *gobject.Parameter, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_async_initable_newv_async" });
        const ret = cFn(_object_type, _n_parameters, _parameters, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
}.asyncInitableNewvAsync;
/// func [bus_get](https://docs.gtk.org/gio/func.bus_get.html)
pub fn busGet(_bus_type: gio.BusType, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn (gio.BusType, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_bus_get" });
    const ret = cFn(_bus_type, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [bus_get_finish](https://docs.gtk.org/gio/func.bus_get_finish.html)
pub fn busGetFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.DBusConnection {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.DBusConnection, .{ .name = "g_bus_get_finish" });
    const ret = cFn(_res, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [bus_get_sync](https://docs.gtk.org/gio/func.bus_get_sync.html)
pub fn busGetSync(_bus_type: gio.BusType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gio.DBusConnection {
    const cFn = @extern(*const fn (gio.BusType, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.DBusConnection, .{ .name = "g_bus_get_sync" });
    const ret = cFn(_bus_type, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [bus_own_name_on_connection](https://docs.gtk.org/gio/func.bus_own_name_on_connection.html)
pub fn busOwnNameOnConnection(_connection: *gio.DBusConnection, _name: [*:0]const u8, _flags: gio.BusNameOwnerFlags, _name_acquired_closure: ?*gobject.Closure, _name_lost_closure: ?*gobject.Closure) u32 {
    const cFn = @extern(*const fn (*gio.DBusConnection, [*:0]const u8, gio.BusNameOwnerFlags, ?*gobject.Closure, ?*gobject.Closure) callconv(.c) u32, .{ .name = "g_bus_own_name_on_connection_with_closures" });
    const ret = cFn(_connection, _name, _flags, _name_acquired_closure, _name_lost_closure);
    return ret;
}
/// func [bus_own_name](https://docs.gtk.org/gio/func.bus_own_name.html)
pub fn busOwnName(_bus_type: gio.BusType, _name: [*:0]const u8, _flags: gio.BusNameOwnerFlags, _bus_acquired_closure: ?*gobject.Closure, _name_acquired_closure: ?*gobject.Closure, _name_lost_closure: ?*gobject.Closure) u32 {
    const cFn = @extern(*const fn (gio.BusType, [*:0]const u8, gio.BusNameOwnerFlags, ?*gobject.Closure, ?*gobject.Closure, ?*gobject.Closure) callconv(.c) u32, .{ .name = "g_bus_own_name_with_closures" });
    const ret = cFn(_bus_type, _name, _flags, _bus_acquired_closure, _name_acquired_closure, _name_lost_closure);
    return ret;
}
/// func [bus_unown_name](https://docs.gtk.org/gio/func.bus_unown_name.html)
pub fn busUnownName(_owner_id: u32) void {
    const cFn = @extern(*const fn (u32) callconv(.c) void, .{ .name = "g_bus_unown_name" });
    const ret = cFn(_owner_id);
    return ret;
}
/// func [bus_unwatch_name](https://docs.gtk.org/gio/func.bus_unwatch_name.html)
pub fn busUnwatchName(_watcher_id: u32) void {
    const cFn = @extern(*const fn (u32) callconv(.c) void, .{ .name = "g_bus_unwatch_name" });
    const ret = cFn(_watcher_id);
    return ret;
}
/// func [bus_watch_name_on_connection](https://docs.gtk.org/gio/func.bus_watch_name_on_connection.html)
pub fn busWatchNameOnConnection(_connection: *gio.DBusConnection, _name: [*:0]const u8, _flags: gio.BusNameWatcherFlags, _name_appeared_closure: ?*gobject.Closure, _name_vanished_closure: ?*gobject.Closure) u32 {
    const cFn = @extern(*const fn (*gio.DBusConnection, [*:0]const u8, gio.BusNameWatcherFlags, ?*gobject.Closure, ?*gobject.Closure) callconv(.c) u32, .{ .name = "g_bus_watch_name_on_connection_with_closures" });
    const ret = cFn(_connection, _name, _flags, _name_appeared_closure, _name_vanished_closure);
    return ret;
}
/// func [bus_watch_name](https://docs.gtk.org/gio/func.bus_watch_name.html)
pub fn busWatchName(_bus_type: gio.BusType, _name: [*:0]const u8, _flags: gio.BusNameWatcherFlags, _name_appeared_closure: ?*gobject.Closure, _name_vanished_closure: ?*gobject.Closure) u32 {
    const cFn = @extern(*const fn (gio.BusType, [*:0]const u8, gio.BusNameWatcherFlags, ?*gobject.Closure, ?*gobject.Closure) callconv(.c) u32, .{ .name = "g_bus_watch_name_with_closures" });
    const ret = cFn(_bus_type, _name, _flags, _name_appeared_closure, _name_vanished_closure);
    return ret;
}
/// func [content_type_can_be_executable](https://docs.gtk.org/gio/func.content_type_can_be_executable.html)
pub fn contentTypeCanBeExecutable(_type: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_content_type_can_be_executable" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_equals](https://docs.gtk.org/gio/func.content_type_equals.html)
pub fn contentTypeEquals(_type1: [*:0]const u8, _type2: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_content_type_equals" });
    const ret = cFn(_type1, _type2);
    return ret;
}
/// func [content_type_from_mime_type](https://docs.gtk.org/gio/func.content_type_from_mime_type.html)
pub fn contentTypeFromMimeType(_mime_type: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_content_type_from_mime_type" });
    const ret = cFn(_mime_type);
    return ret;
}
/// func [content_type_get_description](https://docs.gtk.org/gio/func.content_type_get_description.html)
pub fn contentTypeGetDescription(_type: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_content_type_get_description" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_get_generic_icon_name](https://docs.gtk.org/gio/func.content_type_get_generic_icon_name.html)
pub fn contentTypeGetGenericIconName(_type: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_content_type_get_generic_icon_name" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_get_icon](https://docs.gtk.org/gio/func.content_type_get_icon.html)
pub fn contentTypeGetIcon(_type: [*:0]const u8) *gio.Icon {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.Icon, .{ .name = "g_content_type_get_icon" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_get_mime_dirs](https://docs.gtk.org/gio/func.content_type_get_mime_dirs.html)
pub fn contentTypeGetMimeDirs() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_content_type_get_mime_dirs" });
    const ret = cFn();
    return ret;
}
/// func [content_type_get_mime_type](https://docs.gtk.org/gio/func.content_type_get_mime_type.html)
pub fn contentTypeGetMimeType(_type: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_content_type_get_mime_type" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_get_symbolic_icon](https://docs.gtk.org/gio/func.content_type_get_symbolic_icon.html)
pub fn contentTypeGetSymbolicIcon(_type: [*:0]const u8) *gio.Icon {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.Icon, .{ .name = "g_content_type_get_symbolic_icon" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_guess](https://docs.gtk.org/gio/func.content_type_guess.html)
pub fn contentTypeGuess(_filename: ?[*:0]const u8, _datas: []u8) struct {
    ret: [*:0]u8,
    result_uncertain: bool,
} {
    const _data = _datas.ptr;
    const _data_size: u64 = @intCast(_datas.len);
    var result_uncertain_out: bool = undefined;
    const _result_uncertain = &result_uncertain_out;
    const cFn = @extern(*const fn (?[*:0]const u8, ?[*]u8, u64, ?*bool) callconv(.c) [*:0]u8, .{ .name = "g_content_type_guess" });
    const ret = cFn(_filename, _data, _data_size, _result_uncertain);
    return .{ .ret = ret, .result_uncertain = result_uncertain_out };
}
/// func [content_type_guess_for_tree](https://docs.gtk.org/gio/func.content_type_guess_for_tree.html)
pub fn contentTypeGuessForTree(_root: *gio.File) [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn (*gio.File) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_content_type_guess_for_tree" });
    const ret = cFn(_root);
    return ret;
}
/// func [content_type_is_a](https://docs.gtk.org/gio/func.content_type_is_a.html)
pub fn contentTypeIsA(_type: [*:0]const u8, _supertype: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_content_type_is_a" });
    const ret = cFn(_type, _supertype);
    return ret;
}
/// func [content_type_is_mime_type](https://docs.gtk.org/gio/func.content_type_is_mime_type.html)
pub fn contentTypeIsMimeType(_type: [*:0]const u8, _mime_type: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) bool, .{ .name = "g_content_type_is_mime_type" });
    const ret = cFn(_type, _mime_type);
    return ret;
}
/// func [content_type_is_unknown](https://docs.gtk.org/gio/func.content_type_is_unknown.html)
pub fn contentTypeIsUnknown(_type: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_content_type_is_unknown" });
    const ret = cFn(_type);
    return ret;
}
/// func [content_type_set_mime_dirs](https://docs.gtk.org/gio/func.content_type_set_mime_dirs.html)
pub fn contentTypeSetMimeDirs(_dirs: ?[*:null]?[*:0]const u8) void {
    const cFn = @extern(*const fn (?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "g_content_type_set_mime_dirs" });
    const ret = cFn(_dirs);
    return ret;
}
/// func [content_types_get_registered](https://docs.gtk.org/gio/func.content_types_get_registered.html)
pub fn contentTypesGetRegistered() ?*core.List {
    const cFn = @extern(*const fn () callconv(.c) ?*core.List, .{ .name = "g_content_types_get_registered" });
    const ret = cFn();
    return ret;
}
/// func [dbus_address_escape_value](https://docs.gtk.org/gio/func.dbus_address_escape_value.html)
pub fn dbusAddressEscapeValue(_string: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_dbus_address_escape_value" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_address_get_for_bus_sync](https://docs.gtk.org/gio/func.dbus_address_get_for_bus_sync.html)
pub fn dbusAddressGetForBusSync(_bus_type: gio.BusType, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}![*:0]u8 {
    const cFn = @extern(*const fn (gio.BusType, ?*gio.Cancellable, *?*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_dbus_address_get_for_bus_sync" });
    const ret = cFn(_bus_type, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [dbus_address_get_stream](https://docs.gtk.org/gio/func.dbus_address_get_stream.html)
pub fn dbusAddressGetStream(_address: [*:0]const u8, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn ([*:0]const u8, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_dbus_address_get_stream" });
    const ret = cFn(_address, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [dbus_address_get_stream_finish](https://docs.gtk.org/gio/func.dbus_address_get_stream_finish.html)
pub fn dbusAddressGetStreamFinish(_res: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
    ret: *gio.IOStream,
    out_guid: ?[*:0]u8,
} {
    var out_guid_out: ?[*:0]u8 = undefined;
    const _out_guid = &out_guid_out;
    const cFn = @extern(*const fn (*gio.AsyncResult, ?*?[*:0]u8, *?*core.Error) callconv(.c) *gio.IOStream, .{ .name = "g_dbus_address_get_stream_finish" });
    const ret = cFn(_res, _out_guid, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .out_guid = out_guid_out };
}
/// func [dbus_address_get_stream_sync](https://docs.gtk.org/gio/func.dbus_address_get_stream_sync.html)
pub fn dbusAddressGetStreamSync(_address: [*:0]const u8, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
    ret: *gio.IOStream,
    out_guid: ?[*:0]u8,
} {
    var out_guid_out: ?[*:0]u8 = undefined;
    const _out_guid = &out_guid_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*?[*:0]u8, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gio.IOStream, .{ .name = "g_dbus_address_get_stream_sync" });
    const ret = cFn(_address, _out_guid, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .out_guid = out_guid_out };
}
/// func [dbus_annotation_info_lookup](https://docs.gtk.org/gio/func.dbus_annotation_info_lookup.html)
pub fn dbusAnnotationInfoLookup(_annotations: ?[*:null]?*gio.DBusAnnotationInfo, _name: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn (?[*:null]?*gio.DBusAnnotationInfo, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_annotation_info_lookup" });
    const ret = cFn(_annotations, _name);
    return ret;
}
/// func [dbus_error_encode_gerror](https://docs.gtk.org/gio/func.dbus_error_encode_gerror.html)
pub fn dbusErrorEncodeGerror(_error: *core.Error) [*:0]u8 {
    const cFn = @extern(*const fn (*core.Error) callconv(.c) [*:0]u8, .{ .name = "g_dbus_error_encode_gerror" });
    const ret = cFn(_error);
    return ret;
}
/// func [dbus_error_get_remote_error](https://docs.gtk.org/gio/func.dbus_error_get_remote_error.html)
pub fn dbusErrorGetRemoteError(_error: *core.Error) ?[*:0]u8 {
    const cFn = @extern(*const fn (*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_error_get_remote_error" });
    const ret = cFn(_error);
    return ret;
}
/// func [dbus_error_is_remote_error](https://docs.gtk.org/gio/func.dbus_error_is_remote_error.html)
pub fn dbusErrorIsRemoteError(_error: *core.Error) bool {
    const cFn = @extern(*const fn (*core.Error) callconv(.c) bool, .{ .name = "g_dbus_error_is_remote_error" });
    const ret = cFn(_error);
    return ret;
}
/// func [dbus_error_new_for_dbus_error](https://docs.gtk.org/gio/func.dbus_error_new_for_dbus_error.html)
pub fn dbusErrorNewForDbusError(_dbus_error_name: [*:0]const u8, _dbus_error_message: [*:0]const u8) *core.Error {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) *core.Error, .{ .name = "g_dbus_error_new_for_dbus_error" });
    const ret = cFn(_dbus_error_name, _dbus_error_message);
    return ret;
}
/// func [dbus_error_quark](https://docs.gtk.org/gio/func.dbus_error_quark.html)
pub fn dbusErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_dbus_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [dbus_error_register_error](https://docs.gtk.org/gio/func.dbus_error_register_error.html)
pub fn dbusErrorRegisterError(_error_domain: u32, _error_code: i32, _dbus_error_name: [*:0]const u8) bool {
    const cFn = @extern(*const fn (u32, i32, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_error_register_error" });
    const ret = cFn(_error_domain, _error_code, _dbus_error_name);
    return ret;
}
/// func [dbus_error_register_error_domain](https://docs.gtk.org/gio/func.dbus_error_register_error_domain.html)
pub fn dbusErrorRegisterErrorDomain(_error_domain_quark_name: [*:0]const u8, _quark_volatile: *u64, _entriess: []gio.DBusErrorEntry) void {
    const _entries = _entriess.ptr;
    const _num_entries: u32 = @intCast(_entriess.len);
    const cFn = @extern(*const fn ([*:0]const u8, *u64, [*]gio.DBusErrorEntry, u32) callconv(.c) void, .{ .name = "g_dbus_error_register_error_domain" });
    const ret = cFn(_error_domain_quark_name, _quark_volatile, _entries, _num_entries);
    return ret;
}
/// func [dbus_error_strip_remote_error](https://docs.gtk.org/gio/func.dbus_error_strip_remote_error.html)
pub fn dbusErrorStripRemoteError(_error: *core.Error) bool {
    const cFn = @extern(*const fn (*core.Error) callconv(.c) bool, .{ .name = "g_dbus_error_strip_remote_error" });
    const ret = cFn(_error);
    return ret;
}
/// func [dbus_error_unregister_error](https://docs.gtk.org/gio/func.dbus_error_unregister_error.html)
pub fn dbusErrorUnregisterError(_error_domain: u32, _error_code: i32, _dbus_error_name: [*:0]const u8) bool {
    const cFn = @extern(*const fn (u32, i32, [*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_error_unregister_error" });
    const ret = cFn(_error_domain, _error_code, _dbus_error_name);
    return ret;
}
/// func [dbus_escape_object_path](https://docs.gtk.org/gio/func.dbus_escape_object_path.html)
pub fn dbusEscapeObjectPath(_s: [*:0]const u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "g_dbus_escape_object_path" });
    const ret = cFn(_s);
    return ret;
}
/// func [dbus_escape_object_path_bytestring](https://docs.gtk.org/gio/func.dbus_escape_object_path_bytestring.html)
pub fn dbusEscapeObjectPathBytestring(_bytes: [*:0]u8) [*:0]u8 {
    const cFn = @extern(*const fn ([*:0]u8) callconv(.c) [*:0]u8, .{ .name = "g_dbus_escape_object_path_bytestring" });
    const ret = cFn(_bytes);
    return ret;
}
/// func [dbus_generate_guid](https://docs.gtk.org/gio/func.dbus_generate_guid.html)
pub fn dbusGenerateGuid() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "g_dbus_generate_guid" });
    const ret = cFn();
    return ret;
}
/// func [dbus_gvalue_to_gvariant](https://docs.gtk.org/gio/func.dbus_gvalue_to_gvariant.html)
pub fn dbusGvalueToGvariant(_gvalue: *gobject.Value, _type: *glib.VariantType) *glib.Variant {
    const cFn = @extern(*const fn (*gobject.Value, *glib.VariantType) callconv(.c) *glib.Variant, .{ .name = "g_dbus_gvalue_to_gvariant" });
    const ret = cFn(_gvalue, _type);
    return ret;
}
/// func [dbus_gvariant_to_gvalue](https://docs.gtk.org/gio/func.dbus_gvariant_to_gvalue.html)
pub fn dbusGvariantToGvalue(_value: *glib.Variant, _out_gvalue: *gobject.Value) void {
    const cFn = @extern(*const fn (*glib.Variant, *gobject.Value) callconv(.c) void, .{ .name = "g_dbus_gvariant_to_gvalue" });
    const ret = cFn(_value, _out_gvalue);
    return ret;
}
/// func [dbus_is_address](https://docs.gtk.org/gio/func.dbus_is_address.html)
pub fn dbusIsAddress(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_address" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_error_name](https://docs.gtk.org/gio/func.dbus_is_error_name.html)
pub fn dbusIsErrorName(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_error_name" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_guid](https://docs.gtk.org/gio/func.dbus_is_guid.html)
pub fn dbusIsGuid(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_guid" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_interface_name](https://docs.gtk.org/gio/func.dbus_is_interface_name.html)
pub fn dbusIsInterfaceName(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_interface_name" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_member_name](https://docs.gtk.org/gio/func.dbus_is_member_name.html)
pub fn dbusIsMemberName(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_member_name" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_name](https://docs.gtk.org/gio/func.dbus_is_name.html)
pub fn dbusIsName(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_name" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_is_supported_address](https://docs.gtk.org/gio/func.dbus_is_supported_address.html)
pub fn dbusIsSupportedAddress(_string: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "g_dbus_is_supported_address" });
    const ret = cFn(_string, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [dbus_is_unique_name](https://docs.gtk.org/gio/func.dbus_is_unique_name.html)
pub fn dbusIsUniqueName(_string: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_dbus_is_unique_name" });
    const ret = cFn(_string);
    return ret;
}
/// func [dbus_unescape_object_path](https://docs.gtk.org/gio/func.dbus_unescape_object_path.html)
pub fn dbusUnescapeObjectPath(_s: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "g_dbus_unescape_object_path" });
    const ret = cFn(_s);
    return ret;
}
/// func [dtls_client_connection_new](https://docs.gtk.org/gio/func.dtls_client_connection_new.html)
pub fn dtlsClientConnectionNew(_base_socket: *gio.DatagramBased, _server_identity: ?*gio.SocketConnectable, _error: *?*core.Error) error{GError}!*gio.DtlsClientConnection {
    const cFn = @extern(*const fn (*gio.DatagramBased, ?*gio.SocketConnectable, *?*core.Error) callconv(.c) *gio.DtlsClientConnection, .{ .name = "g_dtls_client_connection_new" });
    const ret = cFn(_base_socket, _server_identity, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [dtls_server_connection_new](https://docs.gtk.org/gio/func.dtls_server_connection_new.html)
pub fn dtlsServerConnectionNew(_base_socket: *gio.DatagramBased, _certificate: ?*gio.TlsCertificate, _error: *?*core.Error) error{GError}!*gio.DtlsServerConnection {
    const cFn = @extern(*const fn (*gio.DatagramBased, ?*gio.TlsCertificate, *?*core.Error) callconv(.c) *gio.DtlsServerConnection, .{ .name = "g_dtls_server_connection_new" });
    const ret = cFn(_base_socket, _certificate, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [file_new_build_filenamev](https://docs.gtk.org/gio/func.file_new_build_filenamev.html)
pub fn fileNewBuildFilenamev(_args: [*:null]?[*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_build_filenamev" });
    const ret = cFn(_args);
    return ret;
}
/// func [file_new_for_commandline_arg](https://docs.gtk.org/gio/func.file_new_for_commandline_arg.html)
pub fn fileNewForCommandlineArg(_arg: [*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_commandline_arg" });
    const ret = cFn(_arg);
    return ret;
}
/// func [file_new_for_commandline_arg_and_cwd](https://docs.gtk.org/gio/func.file_new_for_commandline_arg_and_cwd.html)
pub fn fileNewForCommandlineArgAndCwd(_arg: [*:0]const u8, _cwd: [*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_commandline_arg_and_cwd" });
    const ret = cFn(_arg, _cwd);
    return ret;
}
/// func [file_new_for_path](https://docs.gtk.org/gio/func.file_new_for_path.html)
pub fn fileNewForPath(_path: [*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_path" });
    const ret = cFn(_path);
    return ret;
}
/// func [file_new_for_uri](https://docs.gtk.org/gio/func.file_new_for_uri.html)
pub fn fileNewForUri(_uri: [*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_new_for_uri" });
    const ret = cFn(_uri);
    return ret;
}
/// func [file_new_tmp](https://docs.gtk.org/gio/func.file_new_tmp.html)
pub fn fileNewTmp(_tmpl: ?[*:0]const u8, _error: *?*core.Error) error{GError}!struct {
    ret: *gio.File,
    iostream: *gio.FileIOStream,
} {
    var iostream_out: *gio.FileIOStream = undefined;
    const _iostream = &iostream_out;
    const cFn = @extern(*const fn (?[*:0]const u8, **gio.FileIOStream, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp" });
    const ret = cFn(_tmpl, _iostream, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .iostream = iostream_out };
}
/// func [file_new_tmp_async](https://docs.gtk.org/gio/func.file_new_tmp_async.html)
pub fn fileNewTmpAsync(_tmpl: ?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn (?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_new_tmp_async" });
    const ret = cFn(_tmpl, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [file_new_tmp_dir_async](https://docs.gtk.org/gio/func.file_new_tmp_dir_async.html)
pub fn fileNewTmpDirAsync(_tmpl: ?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn (?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "g_file_new_tmp_dir_async" });
    const ret = cFn(_tmpl, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [file_new_tmp_dir_finish](https://docs.gtk.org/gio/func.file_new_tmp_dir_finish.html)
pub fn fileNewTmpDirFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gio.File {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp_dir_finish" });
    const ret = cFn(_result, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [file_new_tmp_finish](https://docs.gtk.org/gio/func.file_new_tmp_finish.html)
pub fn fileNewTmpFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
    ret: *gio.File,
    iostream: *gio.FileIOStream,
} {
    var iostream_out: *gio.FileIOStream = undefined;
    const _iostream = &iostream_out;
    const cFn = @extern(*const fn (*gio.AsyncResult, **gio.FileIOStream, *?*core.Error) callconv(.c) *gio.File, .{ .name = "g_file_new_tmp_finish" });
    const ret = cFn(_result, _iostream, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .iostream = iostream_out };
}
/// func [file_parse_name](https://docs.gtk.org/gio/func.file_parse_name.html)
pub fn fileParseName(_parse_name: [*:0]const u8) *gio.File {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.File, .{ .name = "g_file_parse_name" });
    const ret = cFn(_parse_name);
    return ret;
}
/// func [icon_deserialize](https://docs.gtk.org/gio/func.icon_deserialize.html)
pub fn iconDeserialize(_value: *glib.Variant) ?*gio.Icon {
    const cFn = @extern(*const fn (*glib.Variant) callconv(.c) ?*gio.Icon, .{ .name = "g_icon_deserialize" });
    const ret = cFn(_value);
    return ret;
}
/// func [icon_new_for_string](https://docs.gtk.org/gio/func.icon_new_for_string.html)
pub fn iconNewForString(_str: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.Icon {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.Icon, .{ .name = "g_icon_new_for_string" });
    const ret = cFn(_str, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// Deprecated:
/// func [initable_newv](https://docs.gtk.org/gio/func.initable_newv.html)
pub const initableNewv = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn initableNewv(_object_type: core.Type, _parameterss: []gobject.Parameter, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!*gobject.Object {
        const _n_parameters: u32 = @intCast(_parameterss.len);
        const _parameters = _parameterss.ptr;
        const cFn = @extern(*const fn (core.Type, u32, [*]gobject.Parameter, ?*gio.Cancellable, *?*core.Error) callconv(.c) *gobject.Object, .{ .name = "g_initable_newv" });
        const ret = cFn(_object_type, _n_parameters, _parameters, _cancellable, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
}.initableNewv;
/// func [io_error_from_errno](https://docs.gtk.org/gio/func.io_error_from_errno.html)
pub fn ioErrorFromErrno(_err_no: i32) gio.IOErrorEnum {
    const cFn = @extern(*const fn (i32) callconv(.c) gio.IOErrorEnum, .{ .name = "g_io_error_from_errno" });
    const ret = cFn(_err_no);
    return ret;
}
/// func [io_error_from_file_error](https://docs.gtk.org/gio/func.io_error_from_file_error.html)
pub fn ioErrorFromFileError(_file_error: glib.FileError) gio.IOErrorEnum {
    const cFn = @extern(*const fn (glib.FileError) callconv(.c) gio.IOErrorEnum, .{ .name = "g_io_error_from_file_error" });
    const ret = cFn(_file_error);
    return ret;
}
/// func [io_error_quark](https://docs.gtk.org/gio/func.io_error_quark.html)
pub fn ioErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_io_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [io_extension_point_implement](https://docs.gtk.org/gio/func.io_extension_point_implement.html)
pub fn ioExtensionPointImplement(_extension_point_name: [*:0]const u8, _type: core.Type, _extension_name: [*:0]const u8, _priority: i32) *gio.IOExtension {
    const cFn = @extern(*const fn ([*:0]const u8, core.Type, [*:0]const u8, i32) callconv(.c) *gio.IOExtension, .{ .name = "g_io_extension_point_implement" });
    const ret = cFn(_extension_point_name, _type, _extension_name, _priority);
    return ret;
}
/// func [io_extension_point_lookup](https://docs.gtk.org/gio/func.io_extension_point_lookup.html)
pub fn ioExtensionPointLookup(_name: [*:0]const u8) *gio.IOExtensionPoint {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.IOExtensionPoint, .{ .name = "g_io_extension_point_lookup" });
    const ret = cFn(_name);
    return ret;
}
/// func [io_extension_point_register](https://docs.gtk.org/gio/func.io_extension_point_register.html)
pub fn ioExtensionPointRegister(_name: [*:0]const u8) *gio.IOExtensionPoint {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *gio.IOExtensionPoint, .{ .name = "g_io_extension_point_register" });
    const ret = cFn(_name);
    return ret;
}
/// func [io_modules_load_all_in_directory](https://docs.gtk.org/gio/func.io_modules_load_all_in_directory.html)
pub fn ioModulesLoadAllInDirectory(_dirname: [*:0]const u8) ?*core.List {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*core.List, .{ .name = "g_io_modules_load_all_in_directory" });
    const ret = cFn(_dirname);
    return ret;
}
/// func [io_modules_load_all_in_directory_with_scope](https://docs.gtk.org/gio/func.io_modules_load_all_in_directory_with_scope.html)
pub fn ioModulesLoadAllInDirectoryWithScope(_dirname: [*:0]const u8, _scope: *gio.IOModuleScope) ?*core.List {
    const cFn = @extern(*const fn ([*:0]const u8, *gio.IOModuleScope) callconv(.c) ?*core.List, .{ .name = "g_io_modules_load_all_in_directory_with_scope" });
    const ret = cFn(_dirname, _scope);
    return ret;
}
/// func [io_modules_scan_all_in_directory](https://docs.gtk.org/gio/func.io_modules_scan_all_in_directory.html)
pub fn ioModulesScanAllInDirectory(_dirname: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "g_io_modules_scan_all_in_directory" });
    const ret = cFn(_dirname);
    return ret;
}
/// func [io_modules_scan_all_in_directory_with_scope](https://docs.gtk.org/gio/func.io_modules_scan_all_in_directory_with_scope.html)
pub fn ioModulesScanAllInDirectoryWithScope(_dirname: [*:0]const u8, _scope: *gio.IOModuleScope) void {
    const cFn = @extern(*const fn ([*:0]const u8, *gio.IOModuleScope) callconv(.c) void, .{ .name = "g_io_modules_scan_all_in_directory_with_scope" });
    const ret = cFn(_dirname, _scope);
    return ret;
}
/// Deprecated:
/// func [io_scheduler_cancel_all_jobs](https://docs.gtk.org/gio/func.io_scheduler_cancel_all_jobs.html)
pub const ioSchedulerCancelAllJobs = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn ioSchedulerCancelAllJobs() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_io_scheduler_cancel_all_jobs" });
        const ret = cFn();
        return ret;
    }
}.ioSchedulerCancelAllJobs;
/// Deprecated:
/// func [io_scheduler_push_job](https://docs.gtk.org/gio/func.io_scheduler_push_job.html)
pub const ioSchedulerPushJob = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn ioSchedulerPushJob(job_func: anytype, job_func_args: anytype, _io_priority: i32, _cancellable: ?*gio.Cancellable) void {
        var closure_job_func = core.zig_closure(job_func, job_func_args, &.{ bool, *gio.IOSchedulerJob, ?*gio.Cancellable });
        const _job_func: gio.IOSchedulerJobFunc = @ptrCast(closure_job_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_job_func.c_data());
        const _notify: ?glib.DestroyNotify = @ptrCast(closure_job_func.c_destroy());
        const cFn = @extern(*const fn (gio.IOSchedulerJobFunc, ?*anyopaque, ?glib.DestroyNotify, i32, ?*gio.Cancellable) callconv(.c) void, .{ .name = "g_io_scheduler_push_job" });
        const ret = cFn(_job_func, @ptrCast(_user_data), _notify, _io_priority, _cancellable);
        return ret;
    }
}.ioSchedulerPushJob;
/// func [keyfile_settings_backend_new](https://docs.gtk.org/gio/func.keyfile_settings_backend_new.html)
pub fn keyfileSettingsBackendNew(_filename: [*:0]const u8, _root_path: [*:0]const u8, _root_group: ?[*:0]const u8) *gio.SettingsBackend {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, ?[*:0]const u8) callconv(.c) *gio.SettingsBackend, .{ .name = "g_keyfile_settings_backend_new" });
    const ret = cFn(_filename, _root_path, _root_group);
    return ret;
}
/// func [memory_monitor_dup_default](https://docs.gtk.org/gio/func.memory_monitor_dup_default.html)
pub fn memoryMonitorDupDefault() *gio.MemoryMonitor {
    const cFn = @extern(*const fn () callconv(.c) *gio.MemoryMonitor, .{ .name = "g_memory_monitor_dup_default" });
    const ret = cFn();
    return ret;
}
/// func [memory_settings_backend_new](https://docs.gtk.org/gio/func.memory_settings_backend_new.html)
pub fn memorySettingsBackendNew() *gio.SettingsBackend {
    const cFn = @extern(*const fn () callconv(.c) *gio.SettingsBackend, .{ .name = "g_memory_settings_backend_new" });
    const ret = cFn();
    return ret;
}
/// func [network_monitor_get_default](https://docs.gtk.org/gio/func.network_monitor_get_default.html)
pub fn networkMonitorGetDefault() *gio.NetworkMonitor {
    const cFn = @extern(*const fn () callconv(.c) *gio.NetworkMonitor, .{ .name = "g_network_monitor_get_default" });
    const ret = cFn();
    return ret;
}
/// func [networking_init](https://docs.gtk.org/gio/func.networking_init.html)
pub fn networkingInit() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_networking_init" });
    const ret = cFn();
    return ret;
}
/// func [null_settings_backend_new](https://docs.gtk.org/gio/func.null_settings_backend_new.html)
pub fn nullSettingsBackendNew() *gio.SettingsBackend {
    const cFn = @extern(*const fn () callconv(.c) *gio.SettingsBackend, .{ .name = "g_null_settings_backend_new" });
    const ret = cFn();
    return ret;
}
/// func [pollable_source_new](https://docs.gtk.org/gio/func.pollable_source_new.html)
pub fn pollableSourceNew(_pollable_stream: *gobject.Object) *glib.Source {
    const cFn = @extern(*const fn (*gobject.Object) callconv(.c) *glib.Source, .{ .name = "g_pollable_source_new" });
    const ret = cFn(_pollable_stream);
    return ret;
}
/// func [pollable_source_new_full](https://docs.gtk.org/gio/func.pollable_source_new_full.html)
pub fn pollableSourceNewFull(_pollable_stream: *gobject.Object, _child_source: ?*glib.Source, _cancellable: ?*gio.Cancellable) *glib.Source {
    const cFn = @extern(*const fn (*gobject.Object, ?*glib.Source, ?*gio.Cancellable) callconv(.c) *glib.Source, .{ .name = "g_pollable_source_new_full" });
    const ret = cFn(_pollable_stream, _child_source, _cancellable);
    return ret;
}
/// func [pollable_stream_read](https://docs.gtk.org/gio/func.pollable_stream_read.html)
pub fn pollableStreamRead(_stream: *gio.InputStream, _buffers: []u8, _blocking: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
    const _buffer = _buffers.ptr;
    const _count: u64 = @intCast(_buffers.len);
    const cFn = @extern(*const fn (*gio.InputStream, [*]u8, u64, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_pollable_stream_read" });
    const ret = cFn(_stream, _buffer, _count, _blocking, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [pollable_stream_write](https://docs.gtk.org/gio/func.pollable_stream_write.html)
pub fn pollableStreamWrite(_stream: *gio.OutputStream, _buffers: []u8, _blocking: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!i64 {
    const _buffer = _buffers.ptr;
    const _count: u64 = @intCast(_buffers.len);
    const cFn = @extern(*const fn (*gio.OutputStream, [*]u8, u64, bool, ?*gio.Cancellable, *?*core.Error) callconv(.c) i64, .{ .name = "g_pollable_stream_write" });
    const ret = cFn(_stream, _buffer, _count, _blocking, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [pollable_stream_write_all](https://docs.gtk.org/gio/func.pollable_stream_write_all.html)
pub fn pollableStreamWriteAll(_stream: *gio.OutputStream, _buffers: []u8, _blocking: bool, _cancellable: ?*gio.Cancellable, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    bytes_written: u64,
} {
    const _buffer = _buffers.ptr;
    const _count: u64 = @intCast(_buffers.len);
    var bytes_written_out: u64 = undefined;
    const _bytes_written = &bytes_written_out;
    const cFn = @extern(*const fn (*gio.OutputStream, [*]u8, u64, bool, *u64, ?*gio.Cancellable, *?*core.Error) callconv(.c) bool, .{ .name = "g_pollable_stream_write_all" });
    const ret = cFn(_stream, _buffer, _count, _blocking, _bytes_written, _cancellable, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .bytes_written = bytes_written_out };
}
/// func [power_profile_monitor_dup_default](https://docs.gtk.org/gio/func.power_profile_monitor_dup_default.html)
pub fn powerProfileMonitorDupDefault() *gio.PowerProfileMonitor {
    const cFn = @extern(*const fn () callconv(.c) *gio.PowerProfileMonitor, .{ .name = "g_power_profile_monitor_dup_default" });
    const ret = cFn();
    return ret;
}
/// func [proxy_get_default_for_protocol](https://docs.gtk.org/gio/func.proxy_get_default_for_protocol.html)
pub fn proxyGetDefaultForProtocol(_protocol: [*:0]const u8) ?*gio.Proxy {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gio.Proxy, .{ .name = "g_proxy_get_default_for_protocol" });
    const ret = cFn(_protocol);
    return ret;
}
/// func [proxy_resolver_get_default](https://docs.gtk.org/gio/func.proxy_resolver_get_default.html)
pub fn proxyResolverGetDefault() *gio.ProxyResolver {
    const cFn = @extern(*const fn () callconv(.c) *gio.ProxyResolver, .{ .name = "g_proxy_resolver_get_default" });
    const ret = cFn();
    return ret;
}
/// func [resolver_error_quark](https://docs.gtk.org/gio/func.resolver_error_quark.html)
pub fn resolverErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_resolver_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [resource_error_quark](https://docs.gtk.org/gio/func.resource_error_quark.html)
pub fn resourceErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_resource_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [resource_load](https://docs.gtk.org/gio/func.resource_load.html)
pub fn resourceLoad(_filename: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.Resource {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.Resource, .{ .name = "g_resource_load" });
    const ret = cFn(_filename, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [resources_enumerate_children](https://docs.gtk.org/gio/func.resources_enumerate_children.html)
pub fn resourcesEnumerateChildren(_path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}![*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn ([*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "g_resources_enumerate_children" });
    const ret = cFn(_path, _lookup_flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [resources_get_info](https://docs.gtk.org/gio/func.resources_get_info.html)
pub fn resourcesGetInfo(_path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    size: u64,
    flags: u32,
} {
    var size_out: u64 = undefined;
    const _size = &size_out;
    var flags_out: u32 = undefined;
    const _flags = &flags_out;
    const cFn = @extern(*const fn ([*:0]const u8, gio.ResourceLookupFlags, ?*u64, ?*u32, *?*core.Error) callconv(.c) bool, .{ .name = "g_resources_get_info" });
    const ret = cFn(_path, _lookup_flags, _size, _flags, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .size = size_out, .flags = flags_out };
}
/// func [resources_lookup_data](https://docs.gtk.org/gio/func.resources_lookup_data.html)
pub fn resourcesLookupData(_path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!*glib.Bytes {
    const cFn = @extern(*const fn ([*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) *glib.Bytes, .{ .name = "g_resources_lookup_data" });
    const ret = cFn(_path, _lookup_flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [resources_open_stream](https://docs.gtk.org/gio/func.resources_open_stream.html)
pub fn resourcesOpenStream(_path: [*:0]const u8, _lookup_flags: gio.ResourceLookupFlags, _error: *?*core.Error) error{GError}!*gio.InputStream {
    const cFn = @extern(*const fn ([*:0]const u8, gio.ResourceLookupFlags, *?*core.Error) callconv(.c) *gio.InputStream, .{ .name = "g_resources_open_stream" });
    const ret = cFn(_path, _lookup_flags, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [resources_register](https://docs.gtk.org/gio/func.resources_register.html)
pub fn resourcesRegister(_resource: *gio.Resource) void {
    const cFn = @extern(*const fn (*gio.Resource) callconv(.c) void, .{ .name = "g_resources_register" });
    const ret = cFn(_resource);
    return ret;
}
/// func [resources_unregister](https://docs.gtk.org/gio/func.resources_unregister.html)
pub fn resourcesUnregister(_resource: *gio.Resource) void {
    const cFn = @extern(*const fn (*gio.Resource) callconv(.c) void, .{ .name = "g_resources_unregister" });
    const ret = cFn(_resource);
    return ret;
}
/// func [settings_schema_source_get_default](https://docs.gtk.org/gio/func.settings_schema_source_get_default.html)
pub fn settingsSchemaSourceGetDefault() ?*gio.SettingsSchemaSource {
    const cFn = @extern(*const fn () callconv(.c) ?*gio.SettingsSchemaSource, .{ .name = "g_settings_schema_source_get_default" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [simple_async_report_gerror_in_idle](https://docs.gtk.org/gio/func.simple_async_report_gerror_in_idle.html)
pub const simpleAsyncReportGerrorInIdle = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn simpleAsyncReportGerrorInIdle(_object: ?*gobject.Object, callback: anytype, callback_args: anytype, _error: *core.Error) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?*gobject.Object, ?gio.AsyncReadyCallback, ?*anyopaque, *core.Error) callconv(.c) void, .{ .name = "g_simple_async_report_gerror_in_idle" });
        const ret = cFn(_object, _callback, @ptrCast(_user_data), _error);
        return ret;
    }
}.simpleAsyncReportGerrorInIdle;
/// func [tls_backend_get_default](https://docs.gtk.org/gio/func.tls_backend_get_default.html)
pub fn tlsBackendGetDefault() *gio.TlsBackend {
    const cFn = @extern(*const fn () callconv(.c) *gio.TlsBackend, .{ .name = "g_tls_backend_get_default" });
    const ret = cFn();
    return ret;
}
/// func [tls_channel_binding_error_quark](https://docs.gtk.org/gio/func.tls_channel_binding_error_quark.html)
pub fn tlsChannelBindingErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_tls_channel_binding_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [tls_client_connection_new](https://docs.gtk.org/gio/func.tls_client_connection_new.html)
pub fn tlsClientConnectionNew(_base_io_stream: *gio.IOStream, _server_identity: ?*gio.SocketConnectable, _error: *?*core.Error) error{GError}!*gio.TlsClientConnection {
    const cFn = @extern(*const fn (*gio.IOStream, ?*gio.SocketConnectable, *?*core.Error) callconv(.c) *gio.TlsClientConnection, .{ .name = "g_tls_client_connection_new" });
    const ret = cFn(_base_io_stream, _server_identity, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [tls_error_quark](https://docs.gtk.org/gio/func.tls_error_quark.html)
pub fn tlsErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_tls_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [tls_file_database_new](https://docs.gtk.org/gio/func.tls_file_database_new.html)
pub fn tlsFileDatabaseNew(_anchors: [*:0]const u8, _error: *?*core.Error) error{GError}!*gio.TlsFileDatabase {
    const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *gio.TlsFileDatabase, .{ .name = "g_tls_file_database_new" });
    const ret = cFn(_anchors, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [tls_server_connection_new](https://docs.gtk.org/gio/func.tls_server_connection_new.html)
pub fn tlsServerConnectionNew(_base_io_stream: *gio.IOStream, _certificate: ?*gio.TlsCertificate, _error: *?*core.Error) error{GError}!*gio.TlsServerConnection {
    const cFn = @extern(*const fn (*gio.IOStream, ?*gio.TlsCertificate, *?*core.Error) callconv(.c) *gio.TlsServerConnection, .{ .name = "g_tls_server_connection_new" });
    const ret = cFn(_base_io_stream, _certificate, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [unix_is_mount_path_system_internal](https://docs.gtk.org/gio/func.unix_is_mount_path_system_internal.html)
pub fn unixIsMountPathSystemInternal(_mount_path: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_unix_is_mount_path_system_internal" });
    const ret = cFn(_mount_path);
    return ret;
}
/// func [unix_is_system_device_path](https://docs.gtk.org/gio/func.unix_is_system_device_path.html)
pub fn unixIsSystemDevicePath(_device_path: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_unix_is_system_device_path" });
    const ret = cFn(_device_path);
    return ret;
}
/// func [unix_is_system_fs_type](https://docs.gtk.org/gio/func.unix_is_system_fs_type.html)
pub fn unixIsSystemFsType(_fs_type: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_unix_is_system_fs_type" });
    const ret = cFn(_fs_type);
    return ret;
}
/// func [unix_mount_at](https://docs.gtk.org/gio/func.unix_mount_at.html)
pub fn unixMountAt(_mount_path: [*:0]const u8) struct {
    ret: ?*gio.UnixMountEntry,
    time_read: u64,
} {
    var time_read_out: u64 = undefined;
    const _time_read = &time_read_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*u64) callconv(.c) ?*gio.UnixMountEntry, .{ .name = "g_unix_mount_at" });
    const ret = cFn(_mount_path, _time_read);
    return .{ .ret = ret, .time_read = time_read_out };
}
/// func [unix_mount_compare](https://docs.gtk.org/gio/func.unix_mount_compare.html)
pub fn unixMountCompare(_mount1: *gio.UnixMountEntry, _mount2: *gio.UnixMountEntry) i32 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry, *gio.UnixMountEntry) callconv(.c) i32, .{ .name = "g_unix_mount_compare" });
    const ret = cFn(_mount1, _mount2);
    return ret;
}
/// func [unix_mount_copy](https://docs.gtk.org/gio/func.unix_mount_copy.html)
pub fn unixMountCopy(_mount_entry: *gio.UnixMountEntry) *gio.UnixMountEntry {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) *gio.UnixMountEntry, .{ .name = "g_unix_mount_copy" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_for](https://docs.gtk.org/gio/func.unix_mount_for.html)
pub fn unixMountFor(_file_path: [*:0]const u8) struct {
    ret: ?*gio.UnixMountEntry,
    time_read: u64,
} {
    var time_read_out: u64 = undefined;
    const _time_read = &time_read_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*u64) callconv(.c) ?*gio.UnixMountEntry, .{ .name = "g_unix_mount_for" });
    const ret = cFn(_file_path, _time_read);
    return .{ .ret = ret, .time_read = time_read_out };
}
/// func [unix_mount_free](https://docs.gtk.org/gio/func.unix_mount_free.html)
pub fn unixMountFree(_mount_entry: *gio.UnixMountEntry) void {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) void, .{ .name = "g_unix_mount_free" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_get_device_path](https://docs.gtk.org/gio/func.unix_mount_get_device_path.html)
pub fn unixMountGetDevicePath(_mount_entry: *gio.UnixMountEntry) [*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_get_device_path" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_get_fs_type](https://docs.gtk.org/gio/func.unix_mount_get_fs_type.html)
pub fn unixMountGetFsType(_mount_entry: *gio.UnixMountEntry) [*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_get_fs_type" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_get_mount_path](https://docs.gtk.org/gio/func.unix_mount_get_mount_path.html)
pub fn unixMountGetMountPath(_mount_entry: *gio.UnixMountEntry) [*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_get_mount_path" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_get_options](https://docs.gtk.org/gio/func.unix_mount_get_options.html)
pub fn unixMountGetOptions(_mount_entry: *gio.UnixMountEntry) ?[*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) ?[*:0]u8, .{ .name = "g_unix_mount_get_options" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_get_root_path](https://docs.gtk.org/gio/func.unix_mount_get_root_path.html)
pub fn unixMountGetRootPath(_mount_entry: *gio.UnixMountEntry) ?[*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) ?[*:0]u8, .{ .name = "g_unix_mount_get_root_path" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_guess_can_eject](https://docs.gtk.org/gio/func.unix_mount_guess_can_eject.html)
pub fn unixMountGuessCanEject(_mount_entry: *gio.UnixMountEntry) bool {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) bool, .{ .name = "g_unix_mount_guess_can_eject" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_guess_icon](https://docs.gtk.org/gio/func.unix_mount_guess_icon.html)
pub fn unixMountGuessIcon(_mount_entry: *gio.UnixMountEntry) *gio.Icon {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) *gio.Icon, .{ .name = "g_unix_mount_guess_icon" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_guess_name](https://docs.gtk.org/gio/func.unix_mount_guess_name.html)
pub fn unixMountGuessName(_mount_entry: *gio.UnixMountEntry) [*:0]u8 {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) [*:0]u8, .{ .name = "g_unix_mount_guess_name" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_guess_should_display](https://docs.gtk.org/gio/func.unix_mount_guess_should_display.html)
pub fn unixMountGuessShouldDisplay(_mount_entry: *gio.UnixMountEntry) bool {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) bool, .{ .name = "g_unix_mount_guess_should_display" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_guess_symbolic_icon](https://docs.gtk.org/gio/func.unix_mount_guess_symbolic_icon.html)
pub fn unixMountGuessSymbolicIcon(_mount_entry: *gio.UnixMountEntry) *gio.Icon {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) *gio.Icon, .{ .name = "g_unix_mount_guess_symbolic_icon" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_is_readonly](https://docs.gtk.org/gio/func.unix_mount_is_readonly.html)
pub fn unixMountIsReadonly(_mount_entry: *gio.UnixMountEntry) bool {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) bool, .{ .name = "g_unix_mount_is_readonly" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_is_system_internal](https://docs.gtk.org/gio/func.unix_mount_is_system_internal.html)
pub fn unixMountIsSystemInternal(_mount_entry: *gio.UnixMountEntry) bool {
    const cFn = @extern(*const fn (*gio.UnixMountEntry) callconv(.c) bool, .{ .name = "g_unix_mount_is_system_internal" });
    const ret = cFn(_mount_entry);
    return ret;
}
/// func [unix_mount_point_at](https://docs.gtk.org/gio/func.unix_mount_point_at.html)
pub fn unixMountPointAt(_mount_path: [*:0]const u8) struct {
    ret: ?*gio.UnixMountPoint,
    time_read: u64,
} {
    var time_read_out: u64 = undefined;
    const _time_read = &time_read_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*u64) callconv(.c) ?*gio.UnixMountPoint, .{ .name = "g_unix_mount_point_at" });
    const ret = cFn(_mount_path, _time_read);
    return .{ .ret = ret, .time_read = time_read_out };
}
/// func [unix_mount_points_changed_since](https://docs.gtk.org/gio/func.unix_mount_points_changed_since.html)
pub fn unixMountPointsChangedSince(_time: u64) bool {
    const cFn = @extern(*const fn (u64) callconv(.c) bool, .{ .name = "g_unix_mount_points_changed_since" });
    const ret = cFn(_time);
    return ret;
}
/// func [unix_mount_points_get](https://docs.gtk.org/gio/func.unix_mount_points_get.html)
pub fn unixMountPointsGet() struct {
    ret: ?*core.List,
    time_read: u64,
} {
    var time_read_out: u64 = undefined;
    const _time_read = &time_read_out;
    const cFn = @extern(*const fn (?*u64) callconv(.c) ?*core.List, .{ .name = "g_unix_mount_points_get" });
    const ret = cFn(_time_read);
    return .{ .ret = ret, .time_read = time_read_out };
}
/// func [unix_mounts_changed_since](https://docs.gtk.org/gio/func.unix_mounts_changed_since.html)
pub fn unixMountsChangedSince(_time: u64) bool {
    const cFn = @extern(*const fn (u64) callconv(.c) bool, .{ .name = "g_unix_mounts_changed_since" });
    const ret = cFn(_time);
    return ret;
}
/// func [unix_mounts_get](https://docs.gtk.org/gio/func.unix_mounts_get.html)
pub fn unixMountsGet() struct {
    ret: ?*core.List,
    time_read: u64,
} {
    var time_read_out: u64 = undefined;
    const _time_read = &time_read_out;
    const cFn = @extern(*const fn (?*u64) callconv(.c) ?*core.List, .{ .name = "g_unix_mounts_get" });
    const ret = cFn(_time_read);
    return .{ .ret = ret, .time_read = time_read_out };
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
