// This file is auto-generated by zig-gir-ffi
const pango = @This();
pub const gobject = @import("gobject");
pub const gio = @import("gio");
pub const cairo = @import("cairo");
pub const glib = @import("glib");
pub const harf_buzz = @import("harf_buzz");
pub const freetype2 = @import("freetype2");
pub const gmodule = @import("gmodule");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// const [ANALYSIS_FLAG_CENTERED_BASELINE](https://docs.gtk.org/Pango/const.ANALYSIS_FLAG_CENTERED_BASELINE.html)
pub const ANALYSIS_FLAG_CENTERED_BASELINE = 1;
/// const [ANALYSIS_FLAG_IS_ELLIPSIS](https://docs.gtk.org/Pango/const.ANALYSIS_FLAG_IS_ELLIPSIS.html)
pub const ANALYSIS_FLAG_IS_ELLIPSIS = 2;
/// const [ANALYSIS_FLAG_NEED_HYPHEN](https://docs.gtk.org/Pango/const.ANALYSIS_FLAG_NEED_HYPHEN.html)
pub const ANALYSIS_FLAG_NEED_HYPHEN = 4;
/// const [ATTR_INDEX_FROM_TEXT_BEGINNING](https://docs.gtk.org/Pango/const.ATTR_INDEX_FROM_TEXT_BEGINNING.html)
pub const ATTR_INDEX_FROM_TEXT_BEGINNING = 0;
/// const [ATTR_INDEX_TO_TEXT_END](https://docs.gtk.org/Pango/const.ATTR_INDEX_TO_TEXT_END.html)
pub const ATTR_INDEX_TO_TEXT_END = 4294967295;
/// Enum [Alignment](https://docs.gtk.org/Pango/enum.Alignment.html)
pub const Alignment = enum(u32) {
    left = 0,
    center = 1,
    right = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_alignment_get_type" });
        return cFn();
    }
};
/// Struct [Analysis](https://docs.gtk.org/Pango/struct.Analysis.html)
pub const Analysis = extern struct {
    shape_engine: ?*anyopaque,
    lang_engine: ?*anyopaque,
    font: ?*pango.Font,
    level: u8,
    gravity: u8,
    flags: u8,
    script: u8,
    language: ?*pango.Language,
    extra_attrs: ?*core.SList,
};
/// Struct [AttrClass](https://docs.gtk.org/Pango/struct.AttrClass.html)
pub const AttrClass = extern struct {
    type: pango.AttrType,
    copy: ?*const fn (_attr: *pango.Attribute) callconv(.c) *pango.Attribute,
    destroy: ?*const fn (_attr: *pango.Attribute) callconv(.c) void,
    equal: ?*const fn (_attr1: *pango.Attribute, _attr2: *pango.Attribute) callconv(.c) bool,
};
/// Struct [AttrColor](https://docs.gtk.org/Pango/struct.AttrColor.html)
pub const AttrColor = extern struct {
    attr: pango.Attribute,
    color: pango.Color,
};
/// callback [AttrDataCopyFunc](https://docs.gtk.org/Pango/callback.AttrDataCopyFunc.html)
pub const AttrDataCopyFunc = *const fn (_user_data: ?*anyopaque) callconv(.c) ?*anyopaque;
/// callback [AttrFilterFunc](https://docs.gtk.org/Pango/callback.AttrFilterFunc.html)
pub const AttrFilterFunc = *const fn (_attribute: *pango.Attribute, _user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [AttrFloat](https://docs.gtk.org/Pango/struct.AttrFloat.html)
pub const AttrFloat = extern struct {
    attr: pango.Attribute,
    value: f64,
};
/// Struct [AttrFontDesc](https://docs.gtk.org/Pango/struct.AttrFontDesc.html)
pub const AttrFontDesc = extern struct {
    attr: pango.Attribute,
    desc: ?*pango.FontDescription,
    /// type func [new](https://docs.gtk.org/Pango/type_func.AttrFontDesc.new.html)
    pub fn new(_desc: *pango.FontDescription) *pango.Attribute {
        const cFn = @extern(*const fn (*pango.FontDescription) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_font_desc_new" });
        const ret = cFn(_desc);
        return ret;
    }
};
/// Struct [AttrFontFeatures](https://docs.gtk.org/Pango/struct.AttrFontFeatures.html)
pub const AttrFontFeatures = extern struct {
    attr: pango.Attribute,
    features: ?[*:0]const u8,
    /// type func [new](https://docs.gtk.org/Pango/type_func.AttrFontFeatures.new.html)
    pub fn new(_features: [*:0]const u8) *pango.Attribute {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_font_features_new" });
        const ret = cFn(_features);
        return ret;
    }
};
/// Struct [AttrInt](https://docs.gtk.org/Pango/struct.AttrInt.html)
pub const AttrInt = extern struct {
    attr: pango.Attribute,
    value: i32,
};
/// Struct [AttrIterator](https://docs.gtk.org/Pango/struct.AttrIterator.html)
pub const AttrIterator = opaque {
    /// method [copy](https://docs.gtk.org/Pango/method.AttrIterator.copy.html)
    pub fn copy(self: *AttrIterator) *pango.AttrIterator {
        const cFn = @extern(*const fn (*AttrIterator) callconv(.c) *pango.AttrIterator, .{ .name = "pango_attr_iterator_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/Pango/method.AttrIterator.destroy.html)
    pub fn destroy(self: *AttrIterator) void {
        const cFn = @extern(*const fn (*AttrIterator) callconv(.c) void, .{ .name = "pango_attr_iterator_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get](https://docs.gtk.org/Pango/method.AttrIterator.get.html)
    pub fn get(self: *AttrIterator, _type: pango.AttrType) ?*pango.Attribute {
        const cFn = @extern(*const fn (*AttrIterator, pango.AttrType) callconv(.c) ?*pango.Attribute, .{ .name = "pango_attr_iterator_get" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [get_attrs](https://docs.gtk.org/Pango/method.AttrIterator.get_attrs.html)
    pub fn getAttrs(self: *AttrIterator) ?*core.SList {
        const cFn = @extern(*const fn (*AttrIterator) callconv(.c) ?*core.SList, .{ .name = "pango_attr_iterator_get_attrs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font](https://docs.gtk.org/Pango/method.AttrIterator.get_font.html)
    pub fn getFont(self: *AttrIterator, _desc: *pango.FontDescription) struct {
        ret: void,
        language: *pango.Language,
        extra_attrs: *core.SList,
    } {
        var language_out: *pango.Language = undefined;
        const _language = &language_out;
        var extra_attrs_out: *core.SList = undefined;
        const _extra_attrs = &extra_attrs_out;
        const cFn = @extern(*const fn (*AttrIterator, *pango.FontDescription, ?**pango.Language, ?**core.SList) callconv(.c) void, .{ .name = "pango_attr_iterator_get_font" });
        const ret = cFn(self, _desc, _language, _extra_attrs);
        return .{ .ret = ret, .language = language_out, .extra_attrs = extra_attrs_out };
    }
    /// method [next](https://docs.gtk.org/Pango/method.AttrIterator.next.html)
    pub fn next(self: *AttrIterator) bool {
        const cFn = @extern(*const fn (*AttrIterator) callconv(.c) bool, .{ .name = "pango_attr_iterator_next" });
        const ret = cFn(self);
        return ret;
    }
    /// method [range](https://docs.gtk.org/Pango/method.AttrIterator.range.html)
    pub fn range(self: *AttrIterator) struct {
        ret: void,
        start: i32,
        end: i32,
    } {
        var start_out: i32 = undefined;
        const _start = &start_out;
        var end_out: i32 = undefined;
        const _end = &end_out;
        const cFn = @extern(*const fn (*AttrIterator, *i32, *i32) callconv(.c) void, .{ .name = "pango_attr_iterator_range" });
        const ret = cFn(self, _start, _end);
        return .{ .ret = ret, .start = start_out, .end = end_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_attr_iterator_get_type" });
        return cFn();
    }
};
/// Struct [AttrLanguage](https://docs.gtk.org/Pango/struct.AttrLanguage.html)
pub const AttrLanguage = extern struct {
    attr: pango.Attribute,
    value: ?*pango.Language,
    /// type func [new](https://docs.gtk.org/Pango/type_func.AttrLanguage.new.html)
    pub fn new(_language: *pango.Language) *pango.Attribute {
        const cFn = @extern(*const fn (*pango.Language) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_language_new" });
        const ret = cFn(_language);
        return ret;
    }
};
/// Struct [AttrList](https://docs.gtk.org/Pango/struct.AttrList.html)
pub const AttrList = opaque {
    /// ctor [new](https://docs.gtk.org/Pango/ctor.AttrList.new.html)
    pub fn new() *AttrList {
        const cFn = @extern(*const fn () callconv(.c) *AttrList, .{ .name = "pango_attr_list_new" });
        const ret = cFn();
        return ret;
    }
    /// method [change](https://docs.gtk.org/Pango/method.AttrList.change.html)
    pub fn change(self: *AttrList, _attr: *pango.Attribute) void {
        const cFn = @extern(*const fn (*AttrList, *pango.Attribute) callconv(.c) void, .{ .name = "pango_attr_list_change" });
        const ret = cFn(self, _attr);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.AttrList.copy.html)
    pub fn copy(self: *AttrList) ?*pango.AttrList {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) ?*pango.AttrList, .{ .name = "pango_attr_list_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/Pango/method.AttrList.equal.html)
    pub fn equal(self: *AttrList, _other_list: *pango.AttrList) bool {
        const cFn = @extern(*const fn (*AttrList, *pango.AttrList) callconv(.c) bool, .{ .name = "pango_attr_list_equal" });
        const ret = cFn(self, _other_list);
        return ret;
    }
    /// method [filter](https://docs.gtk.org/Pango/method.AttrList.filter.html)
    pub fn filter(self: *AttrList, func: anytype, func_args: anytype) ?*pango.AttrList {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, *pango.Attribute });
        defer closure_func.deinit();
        const _func: pango.AttrFilterFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*AttrList, pango.AttrFilterFunc, ?*anyopaque) callconv(.c) ?*pango.AttrList, .{ .name = "pango_attr_list_filter" });
        const ret = cFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/Pango/method.AttrList.get_attributes.html)
    pub fn getAttributes(self: *AttrList) ?*core.SList {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) ?*core.SList, .{ .name = "pango_attr_list_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iterator](https://docs.gtk.org/Pango/method.AttrList.get_iterator.html)
    pub fn getIterator(self: *AttrList) *pango.AttrIterator {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) *pango.AttrIterator, .{ .name = "pango_attr_list_get_iterator" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/Pango/method.AttrList.insert.html)
    pub fn insert(self: *AttrList, _attr: *pango.Attribute) void {
        const cFn = @extern(*const fn (*AttrList, *pango.Attribute) callconv(.c) void, .{ .name = "pango_attr_list_insert" });
        const ret = cFn(self, _attr);
        return ret;
    }
    /// method [insert_before](https://docs.gtk.org/Pango/method.AttrList.insert_before.html)
    pub fn insertBefore(self: *AttrList, _attr: *pango.Attribute) void {
        const cFn = @extern(*const fn (*AttrList, *pango.Attribute) callconv(.c) void, .{ .name = "pango_attr_list_insert_before" });
        const ret = cFn(self, _attr);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/Pango/method.AttrList.ref.html)
    pub fn ref(self: *AttrList) *pango.AttrList {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) *pango.AttrList, .{ .name = "pango_attr_list_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [splice](https://docs.gtk.org/Pango/method.AttrList.splice.html)
    pub fn splice(self: *AttrList, _other: *pango.AttrList, _pos: i32, _len: i32) void {
        const cFn = @extern(*const fn (*AttrList, *pango.AttrList, i32, i32) callconv(.c) void, .{ .name = "pango_attr_list_splice" });
        const ret = cFn(self, _other, _pos, _len);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/Pango/method.AttrList.to_string.html)
    pub fn toString(self: *AttrList) [*:0]u8 {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) [*:0]u8, .{ .name = "pango_attr_list_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/Pango/method.AttrList.unref.html)
    pub fn unref(self: *AttrList) void {
        const cFn = @extern(*const fn (*AttrList) callconv(.c) void, .{ .name = "pango_attr_list_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [update](https://docs.gtk.org/Pango/method.AttrList.update.html)
    pub fn update(self: *AttrList, _pos: i32, _remove: i32, _add: i32) void {
        const cFn = @extern(*const fn (*AttrList, i32, i32, i32) callconv(.c) void, .{ .name = "pango_attr_list_update" });
        const ret = cFn(self, _pos, _remove, _add);
        return ret;
    }
    /// type func [from_string](https://docs.gtk.org/Pango/type_func.AttrList.from_string.html)
    pub fn fromString(_text: [*:0]const u8) ?*pango.AttrList {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*pango.AttrList, .{ .name = "pango_attr_list_from_string" });
        const ret = cFn(_text);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_attr_list_get_type" });
        return cFn();
    }
};
/// Struct [AttrShape](https://docs.gtk.org/Pango/struct.AttrShape.html)
pub const AttrShape = extern struct {
    attr: pango.Attribute,
    ink_rect: pango.Rectangle,
    logical_rect: pango.Rectangle,
    data: ?*anyopaque,
    copy_func: ?*const fn (_user_data: ?*anyopaque) callconv(.c) ?*anyopaque,
    destroy_func: ?*const fn (_data: ?*anyopaque) callconv(.c) void,
    /// type func [new](https://docs.gtk.org/Pango/type_func.AttrShape.new.html)
    pub fn new(_ink_rect: *pango.Rectangle, _logical_rect: *pango.Rectangle) *pango.Attribute {
        const cFn = @extern(*const fn (*pango.Rectangle, *pango.Rectangle) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_shape_new" });
        const ret = cFn(_ink_rect, _logical_rect);
        return ret;
    }
    /// type func [new_with_data](https://docs.gtk.org/Pango/type_func.AttrShape.new_with_data.html)
    pub fn newWithData(_ink_rect: *pango.Rectangle, _logical_rect: *pango.Rectangle, _data: ?*anyopaque, _copy_func: ?pango.AttrDataCopyFunc, _destroy_func: ?glib.DestroyNotify) *pango.Attribute {
        const cFn = @extern(*const fn (*pango.Rectangle, *pango.Rectangle, ?*anyopaque, ?pango.AttrDataCopyFunc, ?glib.DestroyNotify) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_shape_new_with_data" });
        const ret = cFn(_ink_rect, _logical_rect, @ptrCast(_data), _copy_func, _destroy_func);
        return ret;
    }
};
/// Struct [AttrSize](https://docs.gtk.org/Pango/struct.AttrSize.html)
pub const AttrSize = extern struct {
    attr: pango.Attribute,
    size: i32,
    absolute: u32,
    /// type func [new](https://docs.gtk.org/Pango/type_func.AttrSize.new.html)
    pub fn new(_size: i32) *pango.Attribute {
        const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_size_new" });
        const ret = cFn(_size);
        return ret;
    }
    /// type func [new_absolute](https://docs.gtk.org/Pango/type_func.AttrSize.new_absolute.html)
    pub fn newAbsolute(_size: i32) *pango.Attribute {
        const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_size_new_absolute" });
        const ret = cFn(_size);
        return ret;
    }
};
/// Struct [AttrString](https://docs.gtk.org/Pango/struct.AttrString.html)
pub const AttrString = extern struct {
    attr: pango.Attribute,
    value: ?[*:0]const u8,
};
/// Enum [AttrType](https://docs.gtk.org/Pango/enum.AttrType.html)
pub const AttrType = enum(u32) {
    invalid = 0,
    language = 1,
    family = 2,
    style = 3,
    weight = 4,
    variant = 5,
    stretch = 6,
    size = 7,
    font_desc = 8,
    foreground = 9,
    background = 10,
    underline = 11,
    strikethrough = 12,
    rise = 13,
    shape = 14,
    scale = 15,
    fallback = 16,
    letter_spacing = 17,
    underline_color = 18,
    strikethrough_color = 19,
    absolute_size = 20,
    gravity = 21,
    gravity_hint = 22,
    font_features = 23,
    foreground_alpha = 24,
    background_alpha = 25,
    allow_breaks = 26,
    show = 27,
    insert_hyphens = 28,
    overline = 29,
    overline_color = 30,
    line_height = 31,
    absolute_line_height = 32,
    text_transform = 33,
    word = 34,
    sentence = 35,
    baseline_shift = 36,
    font_scale = 37,

    /// type func [get_name](https://docs.gtk.org/Pango/type_func.AttrType.get_name.html)
    pub fn getName(_type: pango.AttrType) ?[*:0]u8 {
        const cFn = @extern(*const fn (pango.AttrType) callconv(.c) ?[*:0]u8, .{ .name = "pango_attr_type_get_name" });
        const ret = cFn(_type);
        return ret;
    }

    /// type func [register](https://docs.gtk.org/Pango/type_func.AttrType.register.html)
    pub fn register(_name: [*:0]const u8) pango.AttrType {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) pango.AttrType, .{ .name = "pango_attr_type_register" });
        const ret = cFn(_name);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_attr_type_get_type" });
        return cFn();
    }
};
/// Struct [Attribute](https://docs.gtk.org/Pango/struct.Attribute.html)
pub const Attribute = extern struct {
    klass: ?*pango.AttrClass,
    start_index: u32,
    end_index: u32,
    /// method [as_color](https://docs.gtk.org/Pango/method.Attribute.as_color.html)
    pub fn asColor(self: *Attribute) ?*pango.AttrColor {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrColor, .{ .name = "pango_attribute_as_color" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_float](https://docs.gtk.org/Pango/method.Attribute.as_float.html)
    pub fn asFloat(self: *Attribute) ?*pango.AttrFloat {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrFloat, .{ .name = "pango_attribute_as_float" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_font_desc](https://docs.gtk.org/Pango/method.Attribute.as_font_desc.html)
    pub fn asFontDesc(self: *Attribute) ?*pango.AttrFontDesc {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrFontDesc, .{ .name = "pango_attribute_as_font_desc" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_font_features](https://docs.gtk.org/Pango/method.Attribute.as_font_features.html)
    pub fn asFontFeatures(self: *Attribute) ?*pango.AttrFontFeatures {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrFontFeatures, .{ .name = "pango_attribute_as_font_features" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_int](https://docs.gtk.org/Pango/method.Attribute.as_int.html)
    pub fn asInt(self: *Attribute) ?*pango.AttrInt {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrInt, .{ .name = "pango_attribute_as_int" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_language](https://docs.gtk.org/Pango/method.Attribute.as_language.html)
    pub fn asLanguage(self: *Attribute) ?*pango.AttrLanguage {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrLanguage, .{ .name = "pango_attribute_as_language" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_shape](https://docs.gtk.org/Pango/method.Attribute.as_shape.html)
    pub fn asShape(self: *Attribute) ?*pango.AttrShape {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrShape, .{ .name = "pango_attribute_as_shape" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_size](https://docs.gtk.org/Pango/method.Attribute.as_size.html)
    pub fn asSize(self: *Attribute) ?*pango.AttrSize {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrSize, .{ .name = "pango_attribute_as_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [as_string](https://docs.gtk.org/Pango/method.Attribute.as_string.html)
    pub fn asString(self: *Attribute) ?*pango.AttrString {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) ?*pango.AttrString, .{ .name = "pango_attribute_as_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.Attribute.copy.html)
    pub fn copy(self: *Attribute) *pango.Attribute {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) *pango.Attribute, .{ .name = "pango_attribute_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/Pango/method.Attribute.destroy.html)
    pub fn destroy(self: *Attribute) void {
        const cFn = @extern(*const fn (*Attribute) callconv(.c) void, .{ .name = "pango_attribute_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/Pango/method.Attribute.equal.html)
    pub fn equal(self: *Attribute, _attr2: *pango.Attribute) bool {
        const cFn = @extern(*const fn (*Attribute, *pango.Attribute) callconv(.c) bool, .{ .name = "pango_attribute_equal" });
        const ret = cFn(self, _attr2);
        return ret;
    }
    /// method [init](https://docs.gtk.org/Pango/method.Attribute.init.html)
    pub fn init(self: *Attribute, _klass: *pango.AttrClass) void {
        const cFn = @extern(*const fn (*Attribute, *pango.AttrClass) callconv(.c) void, .{ .name = "pango_attribute_init" });
        const ret = cFn(self, _klass);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_attribute_get_type" });
        return cFn();
    }
};
/// Enum [BaselineShift](https://docs.gtk.org/Pango/enum.BaselineShift.html)
pub const BaselineShift = enum(u32) {
    none = 0,
    superscript = 1,
    subscript = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_baseline_shift_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Enum [BidiType](https://docs.gtk.org/Pango/enum.BidiType.html)
pub const BidiType = if (config.disable_deprecated) core.Deprecated else enum(u32) {
    l = 0,
    lre = 1,
    lro = 2,
    r = 3,
    al = 4,
    rle = 5,
    rlo = 6,
    pdf = 7,
    en = 8,
    es = 9,
    et = 10,
    an = 11,
    cs = 12,
    nsm = 13,
    bn = 14,
    b = 15,
    s = 16,
    ws = 17,
    on = 18,
    lri = 19,
    rli = 20,
    fsi = 21,
    pdi = 22,

    /// type func [for_unichar](https://docs.gtk.org/Pango/type_func.BidiType.for_unichar.html)
    pub fn forUnichar(_ch: core.Unichar) pango.BidiType {
        const cFn = @extern(*const fn (core.Unichar) callconv(.c) pango.BidiType, .{ .name = "pango_bidi_type_for_unichar" });
        const ret = cFn(_ch);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_bidi_type_get_type" });
        return cFn();
    }
};
/// Struct [Color](https://docs.gtk.org/Pango/struct.Color.html)
pub const Color = extern struct {
    red: u16,
    green: u16,
    blue: u16,
    /// method [copy](https://docs.gtk.org/Pango/method.Color.copy.html)
    pub fn copy(self: *Color) ?*pango.Color {
        const cFn = @extern(*const fn (*Color) callconv(.c) ?*pango.Color, .{ .name = "pango_color_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.Color.free.html)
    pub fn free(self: *Color) void {
        const cFn = @extern(*const fn (*Color) callconv(.c) void, .{ .name = "pango_color_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse](https://docs.gtk.org/Pango/method.Color.parse.html)
    pub fn parse(self: *Color, _spec: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Color, [*:0]const u8) callconv(.c) bool, .{ .name = "pango_color_parse" });
        const ret = cFn(self, _spec);
        return ret;
    }
    /// method [parse_with_alpha](https://docs.gtk.org/Pango/method.Color.parse_with_alpha.html)
    pub fn parseWithAlpha(self: *Color, _spec: [*:0]const u8) struct {
        ret: bool,
        alpha: u16,
    } {
        var alpha_out: u16 = undefined;
        const _alpha = &alpha_out;
        const cFn = @extern(*const fn (*Color, ?*u16, [*:0]const u8) callconv(.c) bool, .{ .name = "pango_color_parse_with_alpha" });
        const ret = cFn(self, _alpha, _spec);
        return .{ .ret = ret, .alpha = alpha_out };
    }
    /// method [to_string](https://docs.gtk.org/Pango/method.Color.to_string.html)
    pub fn toString(self: *Color) [*:0]u8 {
        const cFn = @extern(*const fn (*Color) callconv(.c) [*:0]u8, .{ .name = "pango_color_to_string" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_color_get_type" });
        return cFn();
    }
};
/// Class [Context](https://docs.gtk.org/Pango/class.Context.html)
pub const Context = opaque {
    pub const Parent = gobject.Object;
    pub const Class = pango.ContextClass;
    /// ctor [new](https://docs.gtk.org/Pango/ctor.Context.new.html)
    pub fn new() *Context {
        const cFn = @extern(*const fn () callconv(.c) *Context, .{ .name = "pango_context_new" });
        const ret = cFn();
        return ret;
    }
    /// method [changed](https://docs.gtk.org/Pango/method.Context.changed.html)
    pub fn changed(self: *Context) void {
        const cFn = @extern(*const fn (*Context) callconv(.c) void, .{ .name = "pango_context_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_base_dir](https://docs.gtk.org/Pango/method.Context.get_base_dir.html)
    pub fn getBaseDir(self: *Context) pango.Direction {
        const cFn = @extern(*const fn (*Context) callconv(.c) pango.Direction, .{ .name = "pango_context_get_base_dir" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_base_gravity](https://docs.gtk.org/Pango/method.Context.get_base_gravity.html)
    pub fn getBaseGravity(self: *Context) pango.Gravity {
        const cFn = @extern(*const fn (*Context) callconv(.c) pango.Gravity, .{ .name = "pango_context_get_base_gravity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_description](https://docs.gtk.org/Pango/method.Context.get_font_description.html)
    pub fn getFontDescription(self: *Context) ?*pango.FontDescription {
        const cFn = @extern(*const fn (*Context) callconv(.c) ?*pango.FontDescription, .{ .name = "pango_context_get_font_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_map](https://docs.gtk.org/Pango/method.Context.get_font_map.html)
    pub fn getFontMap(self: *Context) ?*pango.FontMap {
        const cFn = @extern(*const fn (*Context) callconv(.c) ?*pango.FontMap, .{ .name = "pango_context_get_font_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gravity](https://docs.gtk.org/Pango/method.Context.get_gravity.html)
    pub fn getGravity(self: *Context) pango.Gravity {
        const cFn = @extern(*const fn (*Context) callconv(.c) pango.Gravity, .{ .name = "pango_context_get_gravity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gravity_hint](https://docs.gtk.org/Pango/method.Context.get_gravity_hint.html)
    pub fn getGravityHint(self: *Context) pango.GravityHint {
        const cFn = @extern(*const fn (*Context) callconv(.c) pango.GravityHint, .{ .name = "pango_context_get_gravity_hint" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_language](https://docs.gtk.org/Pango/method.Context.get_language.html)
    pub fn getLanguage(self: *Context) *pango.Language {
        const cFn = @extern(*const fn (*Context) callconv(.c) *pango.Language, .{ .name = "pango_context_get_language" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_matrix](https://docs.gtk.org/Pango/method.Context.get_matrix.html)
    pub fn getMatrix(self: *Context) ?*pango.Matrix {
        const cFn = @extern(*const fn (*Context) callconv(.c) ?*pango.Matrix, .{ .name = "pango_context_get_matrix" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_metrics](https://docs.gtk.org/Pango/method.Context.get_metrics.html)
    pub fn getMetrics(self: *Context, _desc: ?*pango.FontDescription, _language: ?*pango.Language) *pango.FontMetrics {
        const cFn = @extern(*const fn (*Context, ?*pango.FontDescription, ?*pango.Language) callconv(.c) *pango.FontMetrics, .{ .name = "pango_context_get_metrics" });
        const ret = cFn(self, _desc, _language);
        return ret;
    }
    /// method [get_round_glyph_positions](https://docs.gtk.org/Pango/method.Context.get_round_glyph_positions.html)
    pub fn getRoundGlyphPositions(self: *Context) bool {
        const cFn = @extern(*const fn (*Context) callconv(.c) bool, .{ .name = "pango_context_get_round_glyph_positions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_serial](https://docs.gtk.org/Pango/method.Context.get_serial.html)
    pub fn getSerial(self: *Context) u32 {
        const cFn = @extern(*const fn (*Context) callconv(.c) u32, .{ .name = "pango_context_get_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_families](https://docs.gtk.org/Pango/method.Context.list_families.html)
    pub fn listFamilies(self: *Context) struct {
        ret: void,
        families: []*pango.FontFamily,
    } {
        var families_out: [*]*pango.FontFamily = undefined;
        const _families = &families_out;
        var n_families_out: i32 = undefined;
        const _n_families = &n_families_out;
        const cFn = @extern(*const fn (*Context, *[*]*pango.FontFamily, *i32) callconv(.c) void, .{ .name = "pango_context_list_families" });
        const ret = cFn(self, _families, _n_families);
        return .{ .ret = ret, .families = families_out[0..@intCast(n_families_out)] };
    }
    /// method [load_font](https://docs.gtk.org/Pango/method.Context.load_font.html)
    pub fn loadFont(self: *Context, _desc: *pango.FontDescription) ?*pango.Font {
        const cFn = @extern(*const fn (*Context, *pango.FontDescription) callconv(.c) ?*pango.Font, .{ .name = "pango_context_load_font" });
        const ret = cFn(self, _desc);
        return ret;
    }
    /// method [load_fontset](https://docs.gtk.org/Pango/method.Context.load_fontset.html)
    pub fn loadFontset(self: *Context, _desc: *pango.FontDescription, _language: *pango.Language) ?*pango.Fontset {
        const cFn = @extern(*const fn (*Context, *pango.FontDescription, *pango.Language) callconv(.c) ?*pango.Fontset, .{ .name = "pango_context_load_fontset" });
        const ret = cFn(self, _desc, _language);
        return ret;
    }
    /// method [set_base_dir](https://docs.gtk.org/Pango/method.Context.set_base_dir.html)
    pub fn setBaseDir(self: *Context, _direction: pango.Direction) void {
        const cFn = @extern(*const fn (*Context, pango.Direction) callconv(.c) void, .{ .name = "pango_context_set_base_dir" });
        const ret = cFn(self, _direction);
        return ret;
    }
    /// method [set_base_gravity](https://docs.gtk.org/Pango/method.Context.set_base_gravity.html)
    pub fn setBaseGravity(self: *Context, _gravity: pango.Gravity) void {
        const cFn = @extern(*const fn (*Context, pango.Gravity) callconv(.c) void, .{ .name = "pango_context_set_base_gravity" });
        const ret = cFn(self, _gravity);
        return ret;
    }
    /// method [set_font_description](https://docs.gtk.org/Pango/method.Context.set_font_description.html)
    pub fn setFontDescription(self: *Context, _desc: ?*pango.FontDescription) void {
        const cFn = @extern(*const fn (*Context, ?*pango.FontDescription) callconv(.c) void, .{ .name = "pango_context_set_font_description" });
        const ret = cFn(self, _desc);
        return ret;
    }
    /// method [set_font_map](https://docs.gtk.org/Pango/method.Context.set_font_map.html)
    pub fn setFontMap(self: *Context, _font_map: ?*pango.FontMap) void {
        const cFn = @extern(*const fn (*Context, ?*pango.FontMap) callconv(.c) void, .{ .name = "pango_context_set_font_map" });
        const ret = cFn(self, _font_map);
        return ret;
    }
    /// method [set_gravity_hint](https://docs.gtk.org/Pango/method.Context.set_gravity_hint.html)
    pub fn setGravityHint(self: *Context, _hint: pango.GravityHint) void {
        const cFn = @extern(*const fn (*Context, pango.GravityHint) callconv(.c) void, .{ .name = "pango_context_set_gravity_hint" });
        const ret = cFn(self, _hint);
        return ret;
    }
    /// method [set_language](https://docs.gtk.org/Pango/method.Context.set_language.html)
    pub fn setLanguage(self: *Context, _language: ?*pango.Language) void {
        const cFn = @extern(*const fn (*Context, ?*pango.Language) callconv(.c) void, .{ .name = "pango_context_set_language" });
        const ret = cFn(self, _language);
        return ret;
    }
    /// method [set_matrix](https://docs.gtk.org/Pango/method.Context.set_matrix.html)
    pub fn setMatrix(self: *Context, _matrix: ?*pango.Matrix) void {
        const cFn = @extern(*const fn (*Context, ?*pango.Matrix) callconv(.c) void, .{ .name = "pango_context_set_matrix" });
        const ret = cFn(self, _matrix);
        return ret;
    }
    /// method [set_round_glyph_positions](https://docs.gtk.org/Pango/method.Context.set_round_glyph_positions.html)
    pub fn setRoundGlyphPositions(self: *Context, _round_positions: bool) void {
        const cFn = @extern(*const fn (*Context, bool) callconv(.c) void, .{ .name = "pango_context_set_round_glyph_positions" });
        const ret = cFn(self, _round_positions);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_context_get_type" });
        return cFn();
    }
};
pub const ContextClass = opaque {};
/// Class [Coverage](https://docs.gtk.org/Pango/class.Coverage.html)
pub const Coverage = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/Pango/ctor.Coverage.new.html)
    pub fn new() *Coverage {
        const cFn = @extern(*const fn () callconv(.c) *Coverage, .{ .name = "pango_coverage_new" });
        const ret = cFn();
        return ret;
    }
    /// Deprecated:
    /// type func [from_bytes](https://docs.gtk.org/Pango/type_func.Coverage.from_bytes.html)
    pub const fromBytes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn fromBytes(_bytess: []u8) ?*pango.Coverage {
            const _bytes = _bytess.ptr;
            const _n_bytes: i32 = @intCast(_bytess.len);
            const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) ?*pango.Coverage, .{ .name = "pango_coverage_from_bytes" });
            const ret = cFn(_bytes, _n_bytes);
            return ret;
        }
    }.fromBytes;
    /// method [copy](https://docs.gtk.org/Pango/method.Coverage.copy.html)
    pub fn copy(self: *Coverage) *pango.Coverage {
        const cFn = @extern(*const fn (*Coverage) callconv(.c) *pango.Coverage, .{ .name = "pango_coverage_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get](https://docs.gtk.org/Pango/method.Coverage.get.html)
    pub fn get(self: *Coverage, _index_: i32) pango.CoverageLevel {
        const cFn = @extern(*const fn (*Coverage, i32) callconv(.c) pango.CoverageLevel, .{ .name = "pango_coverage_get" });
        const ret = cFn(self, _index_);
        return ret;
    }
    /// Deprecated:
    /// method [max](https://docs.gtk.org/Pango/method.Coverage.max.html)
    pub const max = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn max(self: *Coverage, _other: *pango.Coverage) void {
            const cFn = @extern(*const fn (*Coverage, *pango.Coverage) callconv(.c) void, .{ .name = "pango_coverage_max" });
            const ret = cFn(self, _other);
            return ret;
        }
    }.max;
    /// Deprecated:
    /// method [ref](https://docs.gtk.org/Pango/method.Coverage.ref.html)
    pub const ref = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn ref(self: *Coverage) *pango.Coverage {
            const cFn = @extern(*const fn (*Coverage) callconv(.c) *pango.Coverage, .{ .name = "pango_coverage_ref" });
            const ret = cFn(self);
            return ret;
        }
    }.ref;
    /// method [set](https://docs.gtk.org/Pango/method.Coverage.set.html)
    pub fn set(self: *Coverage, _index_: i32, _level: pango.CoverageLevel) void {
        const cFn = @extern(*const fn (*Coverage, i32, pango.CoverageLevel) callconv(.c) void, .{ .name = "pango_coverage_set" });
        const ret = cFn(self, _index_, _level);
        return ret;
    }
    /// Deprecated:
    /// method [to_bytes](https://docs.gtk.org/Pango/method.Coverage.to_bytes.html)
    pub const toBytes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toBytes(self: *Coverage) struct {
            ret: void,
            bytes: []u8,
        } {
            var bytes_out: [*]u8 = undefined;
            const _bytes = &bytes_out;
            var n_bytes_out: i32 = undefined;
            const _n_bytes = &n_bytes_out;
            const cFn = @extern(*const fn (*Coverage, *[*]u8, *i32) callconv(.c) void, .{ .name = "pango_coverage_to_bytes" });
            const ret = cFn(self, _bytes, _n_bytes);
            return .{ .ret = ret, .bytes = bytes_out[0..@intCast(n_bytes_out)] };
        }
    }.toBytes;
    /// Deprecated:
    /// method [unref](https://docs.gtk.org/Pango/method.Coverage.unref.html)
    pub const unref = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unref(self: *Coverage) void {
            const cFn = @extern(*const fn (*Coverage) callconv(.c) void, .{ .name = "pango_coverage_unref" });
            const ret = cFn(self);
            return ret;
        }
    }.unref;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_coverage_get_type" });
        return cFn();
    }
};
/// Enum [CoverageLevel](https://docs.gtk.org/Pango/enum.CoverageLevel.html)
pub const CoverageLevel = enum(u32) {
    none = 0,
    fallback = 1,
    approximate = 2,
    exact = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_coverage_level_get_type" });
        return cFn();
    }
};
/// Enum [Direction](https://docs.gtk.org/Pango/enum.Direction.html)
pub const Direction = enum(u32) {
    ltr = 0,
    rtl = 1,
    ttb_ltr = 2,
    ttb_rtl = 3,
    weak_ltr = 4,
    weak_rtl = 5,
    neutral = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_direction_get_type" });
        return cFn();
    }
};
/// Enum [EllipsizeMode](https://docs.gtk.org/Pango/enum.EllipsizeMode.html)
pub const EllipsizeMode = enum(u32) {
    none = 0,
    start = 1,
    middle = 2,
    end = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_ellipsize_mode_get_type" });
        return cFn();
    }
};
/// Class [Font](https://docs.gtk.org/Pango/class.Font.html)
pub const Font = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = pango.FontClass;
    /// type func [descriptions_free](https://docs.gtk.org/Pango/type_func.Font.descriptions_free.html)
    pub fn descriptionsFree(_descss: []*pango.FontDescription) void {
        const _descs = _descss.ptr;
        const _n_descs: i32 = @intCast(_descss.len);
        const cFn = @extern(*const fn (?[*]*pango.FontDescription, i32) callconv(.c) void, .{ .name = "pango_font_descriptions_free" });
        const ret = cFn(_descs, _n_descs);
        return ret;
    }
    /// type func [deserialize](https://docs.gtk.org/Pango/type_func.Font.deserialize.html)
    pub fn deserialize(_context: *pango.Context, _bytes: *glib.Bytes, _error: *?*core.Error) error{GError}!?*pango.Font {
        const cFn = @extern(*const fn (*pango.Context, *glib.Bytes, *?*core.Error) callconv(.c) ?*pango.Font, .{ .name = "pango_font_deserialize" });
        const ret = cFn(_context, _bytes, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [describe](https://docs.gtk.org/Pango/method.Font.describe.html)
    pub fn describe(self: *Font) *pango.FontDescription {
        const cFn = @extern(*const fn (*Font) callconv(.c) *pango.FontDescription, .{ .name = "pango_font_describe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [describe_with_absolute_size](https://docs.gtk.org/Pango/method.Font.describe_with_absolute_size.html)
    pub fn describeWithAbsoluteSize(self: *Font) *pango.FontDescription {
        const cFn = @extern(*const fn (*Font) callconv(.c) *pango.FontDescription, .{ .name = "pango_font_describe_with_absolute_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_coverage](https://docs.gtk.org/Pango/method.Font.get_coverage.html)
    pub fn getCoverage(self: *Font, _language: *pango.Language) *pango.Coverage {
        const cFn = @extern(*const fn (*Font, *pango.Language) callconv(.c) *pango.Coverage, .{ .name = "pango_font_get_coverage" });
        const ret = cFn(self, _language);
        return ret;
    }
    /// method [get_face](https://docs.gtk.org/Pango/method.Font.get_face.html)
    pub fn getFace(self: *Font) *pango.FontFace {
        const cFn = @extern(*const fn (*Font) callconv(.c) *pango.FontFace, .{ .name = "pango_font_get_face" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_features](https://docs.gtk.org/Pango/method.Font.get_features.html)
    pub fn getFeatures(self: *Font, _featuress: []harf_buzz.feature_t, _num_features: *u32) void {
        const _features = _featuress.ptr;
        const _len: u32 = @intCast(_featuress.len);
        const cFn = @extern(*const fn (*Font, [*]harf_buzz.feature_t, u32, *u32) callconv(.c) void, .{ .name = "pango_font_get_features" });
        const ret = cFn(self, _features, _len, _num_features);
        return ret;
    }
    /// method [get_font_map](https://docs.gtk.org/Pango/method.Font.get_font_map.html)
    pub fn getFontMap(self: *Font) ?*pango.FontMap {
        const cFn = @extern(*const fn (*Font) callconv(.c) ?*pango.FontMap, .{ .name = "pango_font_get_font_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_glyph_extents](https://docs.gtk.org/Pango/method.Font.get_glyph_extents.html)
    pub fn getGlyphExtents(self: *Font, _glyph: u32, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Font, u32, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_font_get_glyph_extents" });
        const ret = cFn(self, _glyph, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_languages](https://docs.gtk.org/Pango/method.Font.get_languages.html)
    pub fn getLanguages(self: *Font) ?[*:null]?*pango.Language {
        const cFn = @extern(*const fn (*Font) callconv(.c) ?[*:null]?*pango.Language, .{ .name = "pango_font_get_languages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_metrics](https://docs.gtk.org/Pango/method.Font.get_metrics.html)
    pub fn getMetrics(self: *Font, _language: ?*pango.Language) *pango.FontMetrics {
        const cFn = @extern(*const fn (*Font, ?*pango.Language) callconv(.c) *pango.FontMetrics, .{ .name = "pango_font_get_metrics" });
        const ret = cFn(self, _language);
        return ret;
    }
    /// method [has_char](https://docs.gtk.org/Pango/method.Font.has_char.html)
    pub fn hasChar(self: *Font, _wc: core.Unichar) bool {
        const cFn = @extern(*const fn (*Font, core.Unichar) callconv(.c) bool, .{ .name = "pango_font_has_char" });
        const ret = cFn(self, _wc);
        return ret;
    }
    /// method [serialize](https://docs.gtk.org/Pango/method.Font.serialize.html)
    pub fn serialize(self: *Font) *glib.Bytes {
        const cFn = @extern(*const fn (*Font) callconv(.c) *glib.Bytes, .{ .name = "pango_font_serialize" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [create_hb_font](https://docs.gtk.org/Pango/vfunc.Font.create_hb_font.html)
    pub fn createHbFontV(self: *Font) *harf_buzz.font_t {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_hb_font.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [describe](https://docs.gtk.org/Pango/vfunc.Font.describe.html)
    pub fn describeV(self: *Font) *pango.FontDescription {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.describe.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [describe_absolute](https://docs.gtk.org/Pango/vfunc.Font.describe_absolute.html)
    pub fn describeAbsoluteV(self: *Font) *pango.FontDescription {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.describe_absolute.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_coverage](https://docs.gtk.org/Pango/vfunc.Font.get_coverage.html)
    pub fn getCoverageV(self: *Font, _language: *pango.Language) *pango.Coverage {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_coverage.?;
        const ret = vFn(self, _language);
        return ret;
    }
    /// vfunc [get_features](https://docs.gtk.org/Pango/vfunc.Font.get_features.html)
    pub fn getFeaturesV(self: *Font, _features: [*]harf_buzz.feature_t, _len: u32, _num_features: *u32) void {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_features.?;
        const ret = vFn(self, _features, _len, _num_features);
        return ret;
    }
    /// vfunc [get_font_map](https://docs.gtk.org/Pango/vfunc.Font.get_font_map.html)
    pub fn getFontMapV(self: *Font) ?*pango.FontMap {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font_map.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_glyph_extents](https://docs.gtk.org/Pango/vfunc.Font.get_glyph_extents.html)
    pub fn getGlyphExtentsV(self: *Font, _glyph: u32, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_glyph_extents.?;
        const ret = vFn(self, _glyph, _ink_rect, _logical_rect);
        return ret;
    }
    /// vfunc [get_metrics](https://docs.gtk.org/Pango/vfunc.Font.get_metrics.html)
    pub fn getMetricsV(self: *Font, _language: ?*pango.Language) *pango.FontMetrics {
        const class: *FontClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_metrics.?;
        const ret = vFn(self, _language);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_get_type" });
        return cFn();
    }
};
pub const FontClass = extern struct {
    parent_class: gobject.ObjectClass,
    describe: ?*const fn (_font: *pango.Font) callconv(.c) *pango.FontDescription,
    get_coverage: ?*const fn (_font: *pango.Font, _language: *pango.Language) callconv(.c) *pango.Coverage,
    get_glyph_extents: ?*const fn (_font: ?*pango.Font, _glyph: u32, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) callconv(.c) void,
    get_metrics: ?*const fn (_font: ?*pango.Font, _language: ?*pango.Language) callconv(.c) *pango.FontMetrics,
    get_font_map: ?*const fn (_font: ?*pango.Font) callconv(.c) ?*pango.FontMap,
    describe_absolute: ?*const fn (_font: *pango.Font) callconv(.c) *pango.FontDescription,
    get_features: ?*const fn (_font: *pango.Font, _features: [*]harf_buzz.feature_t, _len: u32, _num_features: *u32) callconv(.c) void,
    create_hb_font: ?*const fn (_font: *pango.Font) callconv(.c) *harf_buzz.font_t,
};
/// Struct [FontDescription](https://docs.gtk.org/Pango/struct.FontDescription.html)
pub const FontDescription = opaque {
    /// ctor [new](https://docs.gtk.org/Pango/ctor.FontDescription.new.html)
    pub fn new() *FontDescription {
        const cFn = @extern(*const fn () callconv(.c) *FontDescription, .{ .name = "pango_font_description_new" });
        const ret = cFn();
        return ret;
    }
    /// method [better_match](https://docs.gtk.org/Pango/method.FontDescription.better_match.html)
    pub fn betterMatch(self: *FontDescription, _old_match: ?*pango.FontDescription, _new_match: *pango.FontDescription) bool {
        const cFn = @extern(*const fn (*FontDescription, ?*pango.FontDescription, *pango.FontDescription) callconv(.c) bool, .{ .name = "pango_font_description_better_match" });
        const ret = cFn(self, _old_match, _new_match);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.FontDescription.copy.html)
    pub fn copy(self: *FontDescription) ?*pango.FontDescription {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) ?*pango.FontDescription, .{ .name = "pango_font_description_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy_static](https://docs.gtk.org/Pango/method.FontDescription.copy_static.html)
    pub fn copyStatic(self: *FontDescription) ?*pango.FontDescription {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) ?*pango.FontDescription, .{ .name = "pango_font_description_copy_static" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/Pango/method.FontDescription.equal.html)
    pub fn equal(self: *FontDescription, _desc2: *pango.FontDescription) bool {
        const cFn = @extern(*const fn (*FontDescription, *pango.FontDescription) callconv(.c) bool, .{ .name = "pango_font_description_equal" });
        const ret = cFn(self, _desc2);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.FontDescription.free.html)
    pub fn free(self: *FontDescription) void {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) void, .{ .name = "pango_font_description_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/Pango/method.FontDescription.get_family.html)
    pub fn getFamily(self: *FontDescription) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) ?[*:0]u8, .{ .name = "pango_font_description_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gravity](https://docs.gtk.org/Pango/method.FontDescription.get_gravity.html)
    pub fn getGravity(self: *FontDescription) pango.Gravity {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.Gravity, .{ .name = "pango_font_description_get_gravity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_set_fields](https://docs.gtk.org/Pango/method.FontDescription.get_set_fields.html)
    pub fn getSetFields(self: *FontDescription) pango.FontMask {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.FontMask, .{ .name = "pango_font_description_get_set_fields" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/Pango/method.FontDescription.get_size.html)
    pub fn getSize(self: *FontDescription) i32 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) i32, .{ .name = "pango_font_description_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size_is_absolute](https://docs.gtk.org/Pango/method.FontDescription.get_size_is_absolute.html)
    pub fn getSizeIsAbsolute(self: *FontDescription) bool {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) bool, .{ .name = "pango_font_description_get_size_is_absolute" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stretch](https://docs.gtk.org/Pango/method.FontDescription.get_stretch.html)
    pub fn getStretch(self: *FontDescription) pango.Stretch {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.Stretch, .{ .name = "pango_font_description_get_stretch" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_style](https://docs.gtk.org/Pango/method.FontDescription.get_style.html)
    pub fn getStyle(self: *FontDescription) pango.Style {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.Style, .{ .name = "pango_font_description_get_style" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_variant](https://docs.gtk.org/Pango/method.FontDescription.get_variant.html)
    pub fn getVariant(self: *FontDescription) pango.Variant {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.Variant, .{ .name = "pango_font_description_get_variant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_variations](https://docs.gtk.org/Pango/method.FontDescription.get_variations.html)
    pub fn getVariations(self: *FontDescription) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) ?[*:0]u8, .{ .name = "pango_font_description_get_variations" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_weight](https://docs.gtk.org/Pango/method.FontDescription.get_weight.html)
    pub fn getWeight(self: *FontDescription) pango.Weight {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) pango.Weight, .{ .name = "pango_font_description_get_weight" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/Pango/method.FontDescription.hash.html)
    pub fn hash(self: *FontDescription) u32 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) u32, .{ .name = "pango_font_description_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [merge](https://docs.gtk.org/Pango/method.FontDescription.merge.html)
    pub fn merge(self: *FontDescription, _desc_to_merge: ?*pango.FontDescription, _replace_existing: bool) void {
        const cFn = @extern(*const fn (*FontDescription, ?*pango.FontDescription, bool) callconv(.c) void, .{ .name = "pango_font_description_merge" });
        const ret = cFn(self, _desc_to_merge, _replace_existing);
        return ret;
    }
    /// method [merge_static](https://docs.gtk.org/Pango/method.FontDescription.merge_static.html)
    pub fn mergeStatic(self: *FontDescription, _desc_to_merge: *pango.FontDescription, _replace_existing: bool) void {
        const cFn = @extern(*const fn (*FontDescription, *pango.FontDescription, bool) callconv(.c) void, .{ .name = "pango_font_description_merge_static" });
        const ret = cFn(self, _desc_to_merge, _replace_existing);
        return ret;
    }
    /// method [set_absolute_size](https://docs.gtk.org/Pango/method.FontDescription.set_absolute_size.html)
    pub fn setAbsoluteSize(self: *FontDescription, _size: f64) void {
        const cFn = @extern(*const fn (*FontDescription, f64) callconv(.c) void, .{ .name = "pango_font_description_set_absolute_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_family](https://docs.gtk.org/Pango/method.FontDescription.set_family.html)
    pub fn setFamily(self: *FontDescription, _family: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDescription, [*:0]const u8) callconv(.c) void, .{ .name = "pango_font_description_set_family" });
        const ret = cFn(self, _family);
        return ret;
    }
    /// method [set_family_static](https://docs.gtk.org/Pango/method.FontDescription.set_family_static.html)
    pub fn setFamilyStatic(self: *FontDescription, _family: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDescription, [*:0]const u8) callconv(.c) void, .{ .name = "pango_font_description_set_family_static" });
        const ret = cFn(self, _family);
        return ret;
    }
    /// method [set_gravity](https://docs.gtk.org/Pango/method.FontDescription.set_gravity.html)
    pub fn setGravity(self: *FontDescription, _gravity: pango.Gravity) void {
        const cFn = @extern(*const fn (*FontDescription, pango.Gravity) callconv(.c) void, .{ .name = "pango_font_description_set_gravity" });
        const ret = cFn(self, _gravity);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/Pango/method.FontDescription.set_size.html)
    pub fn setSize(self: *FontDescription, _size: i32) void {
        const cFn = @extern(*const fn (*FontDescription, i32) callconv(.c) void, .{ .name = "pango_font_description_set_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_stretch](https://docs.gtk.org/Pango/method.FontDescription.set_stretch.html)
    pub fn setStretch(self: *FontDescription, _stretch: pango.Stretch) void {
        const cFn = @extern(*const fn (*FontDescription, pango.Stretch) callconv(.c) void, .{ .name = "pango_font_description_set_stretch" });
        const ret = cFn(self, _stretch);
        return ret;
    }
    /// method [set_style](https://docs.gtk.org/Pango/method.FontDescription.set_style.html)
    pub fn setStyle(self: *FontDescription, _style: pango.Style) void {
        const cFn = @extern(*const fn (*FontDescription, pango.Style) callconv(.c) void, .{ .name = "pango_font_description_set_style" });
        const ret = cFn(self, _style);
        return ret;
    }
    /// method [set_variant](https://docs.gtk.org/Pango/method.FontDescription.set_variant.html)
    pub fn setVariant(self: *FontDescription, _variant: pango.Variant) void {
        const cFn = @extern(*const fn (*FontDescription, pango.Variant) callconv(.c) void, .{ .name = "pango_font_description_set_variant" });
        const ret = cFn(self, _variant);
        return ret;
    }
    /// method [set_variations](https://docs.gtk.org/Pango/method.FontDescription.set_variations.html)
    pub fn setVariations(self: *FontDescription, _variations: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDescription, ?[*:0]const u8) callconv(.c) void, .{ .name = "pango_font_description_set_variations" });
        const ret = cFn(self, _variations);
        return ret;
    }
    /// method [set_variations_static](https://docs.gtk.org/Pango/method.FontDescription.set_variations_static.html)
    pub fn setVariationsStatic(self: *FontDescription, _variations: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDescription, [*:0]const u8) callconv(.c) void, .{ .name = "pango_font_description_set_variations_static" });
        const ret = cFn(self, _variations);
        return ret;
    }
    /// method [set_weight](https://docs.gtk.org/Pango/method.FontDescription.set_weight.html)
    pub fn setWeight(self: *FontDescription, _weight: pango.Weight) void {
        const cFn = @extern(*const fn (*FontDescription, pango.Weight) callconv(.c) void, .{ .name = "pango_font_description_set_weight" });
        const ret = cFn(self, _weight);
        return ret;
    }
    /// method [to_filename](https://docs.gtk.org/Pango/method.FontDescription.to_filename.html)
    pub fn toFilename(self: *FontDescription) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) ?[*:0]u8, .{ .name = "pango_font_description_to_filename" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/Pango/method.FontDescription.to_string.html)
    pub fn toString(self: *FontDescription) [*:0]u8 {
        const cFn = @extern(*const fn (*FontDescription) callconv(.c) [*:0]u8, .{ .name = "pango_font_description_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unset_fields](https://docs.gtk.org/Pango/method.FontDescription.unset_fields.html)
    pub fn unsetFields(self: *FontDescription, _to_unset: pango.FontMask) void {
        const cFn = @extern(*const fn (*FontDescription, pango.FontMask) callconv(.c) void, .{ .name = "pango_font_description_unset_fields" });
        const ret = cFn(self, _to_unset);
        return ret;
    }
    /// type func [from_string](https://docs.gtk.org/Pango/type_func.FontDescription.from_string.html)
    pub fn fromString(_str: [*:0]const u8) *pango.FontDescription {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *pango.FontDescription, .{ .name = "pango_font_description_from_string" });
        const ret = cFn(_str);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_description_get_type" });
        return cFn();
    }
};
/// Class [FontFace](https://docs.gtk.org/Pango/class.FontFace.html)
pub const FontFace = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = pango.FontFaceClass;
    /// method [describe](https://docs.gtk.org/Pango/method.FontFace.describe.html)
    pub fn describe(self: *FontFace) *pango.FontDescription {
        const cFn = @extern(*const fn (*FontFace) callconv(.c) *pango.FontDescription, .{ .name = "pango_font_face_describe" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_face_name](https://docs.gtk.org/Pango/method.FontFace.get_face_name.html)
    pub fn getFaceName(self: *FontFace) [*:0]u8 {
        const cFn = @extern(*const fn (*FontFace) callconv(.c) [*:0]u8, .{ .name = "pango_font_face_get_face_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/Pango/method.FontFace.get_family.html)
    pub fn getFamily(self: *FontFace) *pango.FontFamily {
        const cFn = @extern(*const fn (*FontFace) callconv(.c) *pango.FontFamily, .{ .name = "pango_font_face_get_family" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_synthesized](https://docs.gtk.org/Pango/method.FontFace.is_synthesized.html)
    pub fn isSynthesized(self: *FontFace) bool {
        const cFn = @extern(*const fn (*FontFace) callconv(.c) bool, .{ .name = "pango_font_face_is_synthesized" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_sizes](https://docs.gtk.org/Pango/method.FontFace.list_sizes.html)
    pub fn listSizes(self: *FontFace) struct {
        ret: void,
        sizes: ?[]i32,
    } {
        var sizes_out: ?[*]i32 = undefined;
        const _sizes = &sizes_out;
        var n_sizes_out: i32 = undefined;
        const _n_sizes = &n_sizes_out;
        const cFn = @extern(*const fn (*FontFace, ?*?[*]i32, *i32) callconv(.c) void, .{ .name = "pango_font_face_list_sizes" });
        const ret = cFn(self, _sizes, _n_sizes);
        return .{ .ret = ret, .sizes = sizes_out[0..@intCast(n_sizes_out)] };
    }
    /// vfunc [describe](https://docs.gtk.org/Pango/vfunc.FontFace.describe.html)
    pub fn describeV(self: *FontFace) *pango.FontDescription {
        const class: *FontFaceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.describe.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_face_name](https://docs.gtk.org/Pango/vfunc.FontFace.get_face_name.html)
    pub fn getFaceNameV(self: *FontFace) [*:0]u8 {
        const class: *FontFaceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_face_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_family](https://docs.gtk.org/Pango/vfunc.FontFace.get_family.html)
    pub fn getFamilyV(self: *FontFace) *pango.FontFamily {
        const class: *FontFaceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_family.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_synthesized](https://docs.gtk.org/Pango/vfunc.FontFace.is_synthesized.html)
    pub fn isSynthesizedV(self: *FontFace) bool {
        const class: *FontFaceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_synthesized.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [list_sizes](https://docs.gtk.org/Pango/vfunc.FontFace.list_sizes.html)
    pub fn listSizesV(self: *FontFace, _sizes: ?*?[*]i32, _n_sizes: *i32) void {
        const class: *FontFaceClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.list_sizes.?;
        const ret = vFn(self, _sizes, _n_sizes);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_face_get_type" });
        return cFn();
    }
};
pub const FontFaceClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_face_name: ?*const fn (_face: *pango.FontFace) callconv(.c) [*:0]u8,
    describe: ?*const fn (_face: *pango.FontFace) callconv(.c) *pango.FontDescription,
    list_sizes: ?*const fn (_face: *pango.FontFace, _sizes: ?*?[*]i32, _n_sizes: *i32) callconv(.c) void,
    is_synthesized: ?*const fn (_face: *pango.FontFace) callconv(.c) bool,
    get_family: ?*const fn (_face: *pango.FontFace) callconv(.c) *pango.FontFamily,
    _pango_reserved3: ?*anyopaque,
    _pango_reserved4: ?*anyopaque,
};
/// Class [FontFamily](https://docs.gtk.org/Pango/class.FontFamily.html)
/// - property [is-monospace](https://docs.gtk.org/Pango/property.FontFamily.is-monospace.html): (r-) `bool`
/// - property [is-variable](https://docs.gtk.org/Pango/property.FontFamily.is-variable.html): (r-) `bool`
/// - property [item-type](https://docs.gtk.org/Pango/property.FontFamily.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/Pango/property.FontFamily.n-items.html): (r-) `u32`
/// - property [name](https://docs.gtk.org/Pango/property.FontFamily.name.html): (r-) `[*:0]const u8`
pub const FontFamily = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = pango.FontFamilyClass;
    /// method [get_face](https://docs.gtk.org/Pango/method.FontFamily.get_face.html)
    pub fn getFace(self: *FontFamily, _name: ?[*:0]const u8) ?*pango.FontFace {
        const cFn = @extern(*const fn (*FontFamily, ?[*:0]const u8) callconv(.c) ?*pango.FontFace, .{ .name = "pango_font_family_get_face" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/Pango/method.FontFamily.get_name.html)
    pub fn getName(self: *FontFamily) [*:0]u8 {
        const cFn = @extern(*const fn (*FontFamily) callconv(.c) [*:0]u8, .{ .name = "pango_font_family_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_monospace](https://docs.gtk.org/Pango/method.FontFamily.is_monospace.html)
    pub fn isMonospace(self: *FontFamily) bool {
        const cFn = @extern(*const fn (*FontFamily) callconv(.c) bool, .{ .name = "pango_font_family_is_monospace" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_variable](https://docs.gtk.org/Pango/method.FontFamily.is_variable.html)
    pub fn isVariable(self: *FontFamily) bool {
        const cFn = @extern(*const fn (*FontFamily) callconv(.c) bool, .{ .name = "pango_font_family_is_variable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_faces](https://docs.gtk.org/Pango/method.FontFamily.list_faces.html)
    pub fn listFaces(self: *FontFamily) struct {
        ret: void,
        faces: ?[]*pango.FontFace,
    } {
        var faces_out: [*]*pango.FontFace = undefined;
        const _faces = &faces_out;
        var n_faces_out: i32 = undefined;
        const _n_faces = &n_faces_out;
        const cFn = @extern(*const fn (*FontFamily, ?*[*]*pango.FontFace, *i32) callconv(.c) void, .{ .name = "pango_font_family_list_faces" });
        const ret = cFn(self, _faces, _n_faces);
        return .{ .ret = ret, .faces = faces_out[0..@intCast(n_faces_out)] };
    }
    /// vfunc [get_face](https://docs.gtk.org/Pango/vfunc.FontFamily.get_face.html)
    pub fn getFaceV(self: *FontFamily, _name: ?[*:0]const u8) ?*pango.FontFace {
        const class: *FontFamilyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_face.?;
        const ret = vFn(self, _name);
        return ret;
    }
    /// vfunc [get_name](https://docs.gtk.org/Pango/vfunc.FontFamily.get_name.html)
    pub fn getNameV(self: *FontFamily) [*:0]u8 {
        const class: *FontFamilyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_monospace](https://docs.gtk.org/Pango/vfunc.FontFamily.is_monospace.html)
    pub fn isMonospaceV(self: *FontFamily) bool {
        const class: *FontFamilyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_monospace.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_variable](https://docs.gtk.org/Pango/vfunc.FontFamily.is_variable.html)
    pub fn isVariableV(self: *FontFamily) bool {
        const class: *FontFamilyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_variable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [list_faces](https://docs.gtk.org/Pango/vfunc.FontFamily.list_faces.html)
    pub fn listFacesV(self: *FontFamily, _faces: ?*[*]*pango.FontFace, _n_faces: *i32) void {
        const class: *FontFamilyClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.list_faces.?;
        const ret = vFn(self, _faces, _n_faces);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_family_get_type" });
        return cFn();
    }
};
pub const FontFamilyClass = extern struct {
    parent_class: gobject.ObjectClass,
    list_faces: ?*const fn (_family: *pango.FontFamily, _faces: ?*[*]*pango.FontFace, _n_faces: *i32) callconv(.c) void,
    get_name: ?*const fn (_family: *pango.FontFamily) callconv(.c) [*:0]u8,
    is_monospace: ?*const fn (_family: *pango.FontFamily) callconv(.c) bool,
    is_variable: ?*const fn (_family: *pango.FontFamily) callconv(.c) bool,
    get_face: ?*const fn (_family: *pango.FontFamily, _name: ?[*:0]const u8) callconv(.c) ?*pango.FontFace,
    _pango_reserved2: ?*anyopaque,
};
/// Class [FontMap](https://docs.gtk.org/Pango/class.FontMap.html)
/// - property [item-type](https://docs.gtk.org/Pango/property.FontMap.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/Pango/property.FontMap.n-items.html): (r-) `u32`
pub const FontMap = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = pango.FontMapClass;
    /// method [changed](https://docs.gtk.org/Pango/method.FontMap.changed.html)
    pub fn changed(self: *FontMap) void {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) void, .{ .name = "pango_font_map_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_context](https://docs.gtk.org/Pango/method.FontMap.create_context.html)
    pub fn createContext(self: *FontMap) *pango.Context {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) *pango.Context, .{ .name = "pango_font_map_create_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_family](https://docs.gtk.org/Pango/method.FontMap.get_family.html)
    pub fn getFamily(self: *FontMap, _name: [*:0]const u8) *pango.FontFamily {
        const cFn = @extern(*const fn (*FontMap, [*:0]const u8) callconv(.c) *pango.FontFamily, .{ .name = "pango_font_map_get_family" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_serial](https://docs.gtk.org/Pango/method.FontMap.get_serial.html)
    pub fn getSerial(self: *FontMap) u32 {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) u32, .{ .name = "pango_font_map_get_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_families](https://docs.gtk.org/Pango/method.FontMap.list_families.html)
    pub fn listFamilies(self: *FontMap) struct {
        ret: void,
        families: []*pango.FontFamily,
    } {
        var families_out: [*]*pango.FontFamily = undefined;
        const _families = &families_out;
        var n_families_out: i32 = undefined;
        const _n_families = &n_families_out;
        const cFn = @extern(*const fn (*FontMap, *[*]*pango.FontFamily, *i32) callconv(.c) void, .{ .name = "pango_font_map_list_families" });
        const ret = cFn(self, _families, _n_families);
        return .{ .ret = ret, .families = families_out[0..@intCast(n_families_out)] };
    }
    /// method [load_font](https://docs.gtk.org/Pango/method.FontMap.load_font.html)
    pub fn loadFont(self: *FontMap, _context: *pango.Context, _desc: *pango.FontDescription) ?*pango.Font {
        const cFn = @extern(*const fn (*FontMap, *pango.Context, *pango.FontDescription) callconv(.c) ?*pango.Font, .{ .name = "pango_font_map_load_font" });
        const ret = cFn(self, _context, _desc);
        return ret;
    }
    /// method [load_fontset](https://docs.gtk.org/Pango/method.FontMap.load_fontset.html)
    pub fn loadFontset(self: *FontMap, _context: *pango.Context, _desc: *pango.FontDescription, _language: *pango.Language) ?*pango.Fontset {
        const cFn = @extern(*const fn (*FontMap, *pango.Context, *pango.FontDescription, *pango.Language) callconv(.c) ?*pango.Fontset, .{ .name = "pango_font_map_load_fontset" });
        const ret = cFn(self, _context, _desc, _language);
        return ret;
    }
    /// method [reload_font](https://docs.gtk.org/Pango/method.FontMap.reload_font.html)
    pub fn reloadFont(self: *FontMap, _font: *pango.Font, _scale: f64, _context: ?*pango.Context, _variations: ?[*:0]const u8) *pango.Font {
        const cFn = @extern(*const fn (*FontMap, *pango.Font, f64, ?*pango.Context, ?[*:0]const u8) callconv(.c) *pango.Font, .{ .name = "pango_font_map_reload_font" });
        const ret = cFn(self, _font, _scale, _context, _variations);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/Pango/vfunc.FontMap.changed.html)
    pub fn changedV(self: *FontMap) void {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_family](https://docs.gtk.org/Pango/vfunc.FontMap.get_family.html)
    pub fn getFamilyV(self: *FontMap, _name: [*:0]const u8) *pango.FontFamily {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_family.?;
        const ret = vFn(self, _name);
        return ret;
    }
    /// vfunc [get_serial](https://docs.gtk.org/Pango/vfunc.FontMap.get_serial.html)
    pub fn getSerialV(self: *FontMap) u32 {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_serial.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [list_families](https://docs.gtk.org/Pango/vfunc.FontMap.list_families.html)
    pub fn listFamiliesV(self: *FontMap, _families: *[*]*pango.FontFamily, _n_families: *i32) void {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.list_families.?;
        const ret = vFn(self, _families, _n_families);
        return ret;
    }
    /// vfunc [load_font](https://docs.gtk.org/Pango/vfunc.FontMap.load_font.html)
    pub fn loadFontV(self: *FontMap, _context: *pango.Context, _desc: *pango.FontDescription) ?*pango.Font {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load_font.?;
        const ret = vFn(self, _context, _desc);
        return ret;
    }
    /// vfunc [load_fontset](https://docs.gtk.org/Pango/vfunc.FontMap.load_fontset.html)
    pub fn loadFontsetV(self: *FontMap, _context: *pango.Context, _desc: *pango.FontDescription, _language: *pango.Language) ?*pango.Fontset {
        const class: *FontMapClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load_fontset.?;
        const ret = vFn(self, _context, _desc, _language);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_map_get_type" });
        return cFn();
    }
};
pub const FontMapClass = extern struct {
    parent_class: gobject.ObjectClass,
    load_font: ?*const fn (_fontmap: *pango.FontMap, _context: *pango.Context, _desc: *pango.FontDescription) callconv(.c) ?*pango.Font,
    list_families: ?*const fn (_fontmap: *pango.FontMap, _families: *[*]*pango.FontFamily, _n_families: *i32) callconv(.c) void,
    load_fontset: ?*const fn (_fontmap: *pango.FontMap, _context: *pango.Context, _desc: *pango.FontDescription, _language: *pango.Language) callconv(.c) ?*pango.Fontset,
    shape_engine_type: ?[*:0]const u8,
    get_serial: ?*const fn (_fontmap: *pango.FontMap) callconv(.c) u32,
    changed: ?*const fn (_fontmap: *pango.FontMap) callconv(.c) void,
    get_family: ?*const fn (_fontmap: *pango.FontMap, _name: [*:0]const u8) callconv(.c) *pango.FontFamily,
    get_face: ?*anyopaque,
};
/// Flags [FontMask](https://docs.gtk.org/Pango/flags.FontMask.html)
pub const FontMask = packed struct(u32) {
    family: bool = false,
    style: bool = false,
    variant: bool = false,
    weight: bool = false,
    stretch: bool = false,
    size: bool = false,
    gravity: bool = false,
    variations: bool = false,
    _: u24 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_mask_get_type" });
        return cFn();
    }
};
/// Struct [FontMetrics](https://docs.gtk.org/Pango/struct.FontMetrics.html)
pub const FontMetrics = extern struct {
    ref_count: u32,
    ascent: i32,
    descent: i32,
    height: i32,
    approximate_char_width: i32,
    approximate_digit_width: i32,
    underline_position: i32,
    underline_thickness: i32,
    strikethrough_position: i32,
    strikethrough_thickness: i32,
    /// method [get_approximate_char_width](https://docs.gtk.org/Pango/method.FontMetrics.get_approximate_char_width.html)
    pub fn getApproximateCharWidth(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_approximate_char_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_approximate_digit_width](https://docs.gtk.org/Pango/method.FontMetrics.get_approximate_digit_width.html)
    pub fn getApproximateDigitWidth(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_approximate_digit_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ascent](https://docs.gtk.org/Pango/method.FontMetrics.get_ascent.html)
    pub fn getAscent(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_ascent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_descent](https://docs.gtk.org/Pango/method.FontMetrics.get_descent.html)
    pub fn getDescent(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_descent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/Pango/method.FontMetrics.get_height.html)
    pub fn getHeight(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_strikethrough_position](https://docs.gtk.org/Pango/method.FontMetrics.get_strikethrough_position.html)
    pub fn getStrikethroughPosition(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_strikethrough_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_strikethrough_thickness](https://docs.gtk.org/Pango/method.FontMetrics.get_strikethrough_thickness.html)
    pub fn getStrikethroughThickness(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_strikethrough_thickness" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_underline_position](https://docs.gtk.org/Pango/method.FontMetrics.get_underline_position.html)
    pub fn getUnderlinePosition(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_underline_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_underline_thickness](https://docs.gtk.org/Pango/method.FontMetrics.get_underline_thickness.html)
    pub fn getUnderlineThickness(self: *FontMetrics) i32 {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) i32, .{ .name = "pango_font_metrics_get_underline_thickness" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/Pango/method.FontMetrics.ref.html)
    pub fn ref(self: *FontMetrics) ?*pango.FontMetrics {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) ?*pango.FontMetrics, .{ .name = "pango_font_metrics_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/Pango/method.FontMetrics.unref.html)
    pub fn unref(self: *FontMetrics) void {
        const cFn = @extern(*const fn (*FontMetrics) callconv(.c) void, .{ .name = "pango_font_metrics_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_metrics_get_type" });
        return cFn();
    }
};
/// Enum [FontScale](https://docs.gtk.org/Pango/enum.FontScale.html)
pub const FontScale = enum(u32) {
    none = 0,
    superscript = 1,
    subscript = 2,
    small_caps = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_font_scale_get_type" });
        return cFn();
    }
};
/// Class [Fontset](https://docs.gtk.org/Pango/class.Fontset.html)
pub const Fontset = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = pango.FontsetClass;
    /// method [foreach](https://docs.gtk.org/Pango/method.Fontset.foreach.html)
    pub fn foreach(self: *Fontset, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ bool, *pango.Fontset, *pango.Font });
        defer closure_func.deinit();
        const _func: pango.FontsetForeachFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*Fontset, pango.FontsetForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "pango_fontset_foreach" });
        const ret = cFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// method [get_font](https://docs.gtk.org/Pango/method.Fontset.get_font.html)
    pub fn getFont(self: *Fontset, _wc: u32) *pango.Font {
        const cFn = @extern(*const fn (*Fontset, u32) callconv(.c) *pango.Font, .{ .name = "pango_fontset_get_font" });
        const ret = cFn(self, _wc);
        return ret;
    }
    /// method [get_metrics](https://docs.gtk.org/Pango/method.Fontset.get_metrics.html)
    pub fn getMetrics(self: *Fontset) *pango.FontMetrics {
        const cFn = @extern(*const fn (*Fontset) callconv(.c) *pango.FontMetrics, .{ .name = "pango_fontset_get_metrics" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [foreach](https://docs.gtk.org/Pango/vfunc.Fontset.foreach.html)
    pub fn foreachV(self: *Fontset, _func: pango.FontsetForeachFunc, _data: ?*anyopaque) void {
        const class: *FontsetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.foreach.?;
        const ret = vFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// vfunc [get_font](https://docs.gtk.org/Pango/vfunc.Fontset.get_font.html)
    pub fn getFontV(self: *Fontset, _wc: u32) *pango.Font {
        const class: *FontsetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font.?;
        const ret = vFn(self, _wc);
        return ret;
    }
    /// vfunc [get_language](https://docs.gtk.org/Pango/vfunc.Fontset.get_language.html)
    pub fn getLanguageV(self: *Fontset) *pango.Language {
        const class: *FontsetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_language.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_metrics](https://docs.gtk.org/Pango/vfunc.Fontset.get_metrics.html)
    pub fn getMetricsV(self: *Fontset) *pango.FontMetrics {
        const class: *FontsetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_metrics.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_fontset_get_type" });
        return cFn();
    }
};
pub const FontsetClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_font: ?*const fn (_fontset: *pango.Fontset, _wc: u32) callconv(.c) *pango.Font,
    get_metrics: ?*const fn (_fontset: *pango.Fontset) callconv(.c) *pango.FontMetrics,
    get_language: ?*const fn (_fontset: *pango.Fontset) callconv(.c) *pango.Language,
    foreach: ?*const fn (_fontset: *pango.Fontset, _func: pango.FontsetForeachFunc, _data: ?*anyopaque) callconv(.c) void,
    _pango_reserved1: ?*anyopaque,
    _pango_reserved2: ?*anyopaque,
    _pango_reserved3: ?*anyopaque,
    _pango_reserved4: ?*anyopaque,
};
/// callback [FontsetForeachFunc](https://docs.gtk.org/Pango/callback.FontsetForeachFunc.html)
pub const FontsetForeachFunc = *const fn (_fontset: *pango.Fontset, _font: *pango.Font, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [FontsetSimple](https://docs.gtk.org/Pango/class.FontsetSimple.html)
pub const FontsetSimple = opaque {
    pub const Parent = pango.Fontset;
    pub const Class = pango.FontsetSimpleClass;
    /// ctor [new](https://docs.gtk.org/Pango/ctor.FontsetSimple.new.html)
    pub fn new(_language: *pango.Language) *FontsetSimple {
        const cFn = @extern(*const fn (*pango.Language) callconv(.c) *FontsetSimple, .{ .name = "pango_fontset_simple_new" });
        const ret = cFn(_language);
        return ret;
    }
    /// method [append](https://docs.gtk.org/Pango/method.FontsetSimple.append.html)
    pub fn append(self: *FontsetSimple, _font: *pango.Font) void {
        const cFn = @extern(*const fn (*FontsetSimple, *pango.Font) callconv(.c) void, .{ .name = "pango_fontset_simple_append" });
        const ret = cFn(self, _font);
        return ret;
    }
    /// method [size](https://docs.gtk.org/Pango/method.FontsetSimple.size.html)
    pub fn size(self: *FontsetSimple) i32 {
        const cFn = @extern(*const fn (*FontsetSimple) callconv(.c) i32, .{ .name = "pango_fontset_simple_size" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_fontset_simple_get_type" });
        return cFn();
    }
};
pub const FontsetSimpleClass = opaque {};
/// const [GLYPH_EMPTY](https://docs.gtk.org/Pango/const.GLYPH_EMPTY.html)
pub const GLYPH_EMPTY = 268435455;
/// const [GLYPH_INVALID_INPUT](https://docs.gtk.org/Pango/const.GLYPH_INVALID_INPUT.html)
pub const GLYPH_INVALID_INPUT = 4294967295;
/// const [GLYPH_UNKNOWN_FLAG](https://docs.gtk.org/Pango/const.GLYPH_UNKNOWN_FLAG.html)
pub const GLYPH_UNKNOWN_FLAG = 268435456;
/// Struct [GlyphGeometry](https://docs.gtk.org/Pango/struct.GlyphGeometry.html)
pub const GlyphGeometry = extern struct {
    width: i32,
    x_offset: i32,
    y_offset: i32,
};
/// Struct [GlyphInfo](https://docs.gtk.org/Pango/struct.GlyphInfo.html)
pub const GlyphInfo = extern struct {
    glyph: u32,
    geometry: pango.GlyphGeometry,
    attr: pango.GlyphVisAttr,
};
/// Struct [GlyphItem](https://docs.gtk.org/Pango/struct.GlyphItem.html)
pub const GlyphItem = extern struct {
    item: ?*pango.Item,
    glyphs: ?*pango.GlyphString,
    y_offset: i32,
    start_x_offset: i32,
    end_x_offset: i32,
    /// method [apply_attrs](https://docs.gtk.org/Pango/method.GlyphItem.apply_attrs.html)
    pub fn applyAttrs(self: *GlyphItem, _text: [*:0]const u8, _list: *pango.AttrList) ?*core.SList {
        const cFn = @extern(*const fn (*GlyphItem, [*:0]const u8, *pango.AttrList) callconv(.c) ?*core.SList, .{ .name = "pango_glyph_item_apply_attrs" });
        const ret = cFn(self, _text, _list);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.GlyphItem.copy.html)
    pub fn copy(self: *GlyphItem) ?*pango.GlyphItem {
        const cFn = @extern(*const fn (*GlyphItem) callconv(.c) ?*pango.GlyphItem, .{ .name = "pango_glyph_item_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.GlyphItem.free.html)
    pub fn free(self: *GlyphItem) void {
        const cFn = @extern(*const fn (*GlyphItem) callconv(.c) void, .{ .name = "pango_glyph_item_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_logical_widths](https://docs.gtk.org/Pango/method.GlyphItem.get_logical_widths.html)
    pub fn getLogicalWidths(self: *GlyphItem, _text: [*:0]const u8, _logical_widths: [*]i32) void {
        const cFn = @extern(*const fn (*GlyphItem, [*:0]const u8, [*]i32) callconv(.c) void, .{ .name = "pango_glyph_item_get_logical_widths" });
        const ret = cFn(self, _text, _logical_widths);
        return ret;
    }
    /// method [letter_space](https://docs.gtk.org/Pango/method.GlyphItem.letter_space.html)
    pub fn letterSpace(self: *GlyphItem, _text: [*:0]const u8, _log_attrs: [*]pango.LogAttr, _letter_spacing: i32) void {
        const cFn = @extern(*const fn (*GlyphItem, [*:0]const u8, [*]pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_glyph_item_letter_space" });
        const ret = cFn(self, _text, _log_attrs, _letter_spacing);
        return ret;
    }
    /// method [split](https://docs.gtk.org/Pango/method.GlyphItem.split.html)
    pub fn split(self: *GlyphItem, _text: [*:0]const u8, _split_index: i32) ?*pango.GlyphItem {
        const cFn = @extern(*const fn (*GlyphItem, [*:0]const u8, i32) callconv(.c) ?*pango.GlyphItem, .{ .name = "pango_glyph_item_split" });
        const ret = cFn(self, _text, _split_index);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_glyph_item_get_type" });
        return cFn();
    }
};
/// Struct [GlyphItemIter](https://docs.gtk.org/Pango/struct.GlyphItemIter.html)
pub const GlyphItemIter = extern struct {
    glyph_item: ?*pango.GlyphItem,
    text: ?[*:0]const u8,
    start_glyph: i32,
    start_index: i32,
    start_char: i32,
    end_glyph: i32,
    end_index: i32,
    end_char: i32,
    /// method [copy](https://docs.gtk.org/Pango/method.GlyphItemIter.copy.html)
    pub fn copy(self: *GlyphItemIter) ?*pango.GlyphItemIter {
        const cFn = @extern(*const fn (*GlyphItemIter) callconv(.c) ?*pango.GlyphItemIter, .{ .name = "pango_glyph_item_iter_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.GlyphItemIter.free.html)
    pub fn free(self: *GlyphItemIter) void {
        const cFn = @extern(*const fn (*GlyphItemIter) callconv(.c) void, .{ .name = "pango_glyph_item_iter_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init_end](https://docs.gtk.org/Pango/method.GlyphItemIter.init_end.html)
    pub fn initEnd(self: *GlyphItemIter, _glyph_item: *pango.GlyphItem, _text: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*GlyphItemIter, *pango.GlyphItem, [*:0]const u8) callconv(.c) bool, .{ .name = "pango_glyph_item_iter_init_end" });
        const ret = cFn(self, _glyph_item, _text);
        return ret;
    }
    /// method [init_start](https://docs.gtk.org/Pango/method.GlyphItemIter.init_start.html)
    pub fn initStart(self: *GlyphItemIter, _glyph_item: *pango.GlyphItem, _text: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*GlyphItemIter, *pango.GlyphItem, [*:0]const u8) callconv(.c) bool, .{ .name = "pango_glyph_item_iter_init_start" });
        const ret = cFn(self, _glyph_item, _text);
        return ret;
    }
    /// method [next_cluster](https://docs.gtk.org/Pango/method.GlyphItemIter.next_cluster.html)
    pub fn nextCluster(self: *GlyphItemIter) bool {
        const cFn = @extern(*const fn (*GlyphItemIter) callconv(.c) bool, .{ .name = "pango_glyph_item_iter_next_cluster" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prev_cluster](https://docs.gtk.org/Pango/method.GlyphItemIter.prev_cluster.html)
    pub fn prevCluster(self: *GlyphItemIter) bool {
        const cFn = @extern(*const fn (*GlyphItemIter) callconv(.c) bool, .{ .name = "pango_glyph_item_iter_prev_cluster" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_glyph_item_iter_get_type" });
        return cFn();
    }
};
/// Struct [GlyphString](https://docs.gtk.org/Pango/struct.GlyphString.html)
pub const GlyphString = extern struct {
    num_glyphs: i32,
    glyphs: ?[*]pango.GlyphInfo,
    log_clusters: ?*i32,
    space: i32,
    /// ctor [new](https://docs.gtk.org/Pango/ctor.GlyphString.new.html)
    pub fn new() *GlyphString {
        const cFn = @extern(*const fn () callconv(.c) *GlyphString, .{ .name = "pango_glyph_string_new" });
        const ret = cFn();
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.GlyphString.copy.html)
    pub fn copy(self: *GlyphString) ?*pango.GlyphString {
        const cFn = @extern(*const fn (*GlyphString) callconv(.c) ?*pango.GlyphString, .{ .name = "pango_glyph_string_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [extents](https://docs.gtk.org/Pango/method.GlyphString.extents.html)
    pub fn extents(self: *GlyphString, _font: *pango.Font, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*GlyphString, *pango.Font, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_glyph_string_extents" });
        const ret = cFn(self, _font, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [extents_range](https://docs.gtk.org/Pango/method.GlyphString.extents_range.html)
    pub fn extentsRange(self: *GlyphString, _start: i32, _end: i32, _font: *pango.Font, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*GlyphString, i32, i32, *pango.Font, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_glyph_string_extents_range" });
        const ret = cFn(self, _start, _end, _font, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.GlyphString.free.html)
    pub fn free(self: *GlyphString) void {
        const cFn = @extern(*const fn (*GlyphString) callconv(.c) void, .{ .name = "pango_glyph_string_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_logical_widths](https://docs.gtk.org/Pango/method.GlyphString.get_logical_widths.html)
    pub fn getLogicalWidths(self: *GlyphString, _text: [*:0]const u8, _length: i32, _embedding_level: i32, _logical_widths: [*]i32) void {
        const cFn = @extern(*const fn (*GlyphString, [*:0]const u8, i32, i32, [*]i32) callconv(.c) void, .{ .name = "pango_glyph_string_get_logical_widths" });
        const ret = cFn(self, _text, _length, _embedding_level, _logical_widths);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/Pango/method.GlyphString.get_width.html)
    pub fn getWidth(self: *GlyphString) i32 {
        const cFn = @extern(*const fn (*GlyphString) callconv(.c) i32, .{ .name = "pango_glyph_string_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [index_to_x](https://docs.gtk.org/Pango/method.GlyphString.index_to_x.html)
    pub fn indexToX(self: *GlyphString, _text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _index_: i32, _trailing: bool) struct {
        ret: void,
        x_pos: i32,
    } {
        var x_pos_out: i32 = undefined;
        const _x_pos = &x_pos_out;
        const cFn = @extern(*const fn (*GlyphString, [*:0]const u8, i32, *pango.Analysis, i32, bool, *i32) callconv(.c) void, .{ .name = "pango_glyph_string_index_to_x" });
        const ret = cFn(self, _text, _length, _analysis, _index_, _trailing, _x_pos);
        return .{ .ret = ret, .x_pos = x_pos_out };
    }
    /// method [index_to_x_full](https://docs.gtk.org/Pango/method.GlyphString.index_to_x_full.html)
    pub fn indexToXFull(self: *GlyphString, _text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _attrs: ?*pango.LogAttr, _index_: i32, _trailing: bool) struct {
        ret: void,
        x_pos: i32,
    } {
        var x_pos_out: i32 = undefined;
        const _x_pos = &x_pos_out;
        const cFn = @extern(*const fn (*GlyphString, [*:0]const u8, i32, *pango.Analysis, ?*pango.LogAttr, i32, bool, *i32) callconv(.c) void, .{ .name = "pango_glyph_string_index_to_x_full" });
        const ret = cFn(self, _text, _length, _analysis, _attrs, _index_, _trailing, _x_pos);
        return .{ .ret = ret, .x_pos = x_pos_out };
    }
    /// method [set_size](https://docs.gtk.org/Pango/method.GlyphString.set_size.html)
    pub fn setSize(self: *GlyphString, _new_len: i32) void {
        const cFn = @extern(*const fn (*GlyphString, i32) callconv(.c) void, .{ .name = "pango_glyph_string_set_size" });
        const ret = cFn(self, _new_len);
        return ret;
    }
    /// method [x_to_index](https://docs.gtk.org/Pango/method.GlyphString.x_to_index.html)
    pub fn xToIndex(self: *GlyphString, _text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _x_pos: i32) struct {
        ret: void,
        index_: i32,
        trailing: i32,
    } {
        var index__out: i32 = undefined;
        const _index_ = &index__out;
        var trailing_out: i32 = undefined;
        const _trailing = &trailing_out;
        const cFn = @extern(*const fn (*GlyphString, [*:0]const u8, i32, *pango.Analysis, i32, *i32, *i32) callconv(.c) void, .{ .name = "pango_glyph_string_x_to_index" });
        const ret = cFn(self, _text, _length, _analysis, _x_pos, _index_, _trailing);
        return .{ .ret = ret, .index_ = index__out, .trailing = trailing_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_glyph_string_get_type" });
        return cFn();
    }
};
/// Struct [GlyphVisAttr](https://docs.gtk.org/Pango/struct.GlyphVisAttr.html)
pub const GlyphVisAttr = extern struct {
    is_cluster_start: u32,
    is_color: u32,
};
/// Enum [Gravity](https://docs.gtk.org/Pango/enum.Gravity.html)
pub const Gravity = enum(u32) {
    south = 0,
    east = 1,
    north = 2,
    west = 3,
    auto = 4,

    /// type func [get_for_matrix](https://docs.gtk.org/Pango/type_func.Gravity.get_for_matrix.html)
    pub fn getForMatrix(_matrix: ?*pango.Matrix) pango.Gravity {
        const cFn = @extern(*const fn (?*pango.Matrix) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_matrix" });
        const ret = cFn(_matrix);
        return ret;
    }

    /// type func [get_for_script](https://docs.gtk.org/Pango/type_func.Gravity.get_for_script.html)
    pub fn getForScript(_script: pango.Script, _base_gravity: pango.Gravity, _hint: pango.GravityHint) pango.Gravity {
        const cFn = @extern(*const fn (pango.Script, pango.Gravity, pango.GravityHint) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_script" });
        const ret = cFn(_script, _base_gravity, _hint);
        return ret;
    }

    /// type func [get_for_script_and_width](https://docs.gtk.org/Pango/type_func.Gravity.get_for_script_and_width.html)
    pub fn getForScriptAndWidth(_script: pango.Script, _wide: bool, _base_gravity: pango.Gravity, _hint: pango.GravityHint) pango.Gravity {
        const cFn = @extern(*const fn (pango.Script, bool, pango.Gravity, pango.GravityHint) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_script_and_width" });
        const ret = cFn(_script, _wide, _base_gravity, _hint);
        return ret;
    }

    /// type func [to_rotation](https://docs.gtk.org/Pango/type_func.Gravity.to_rotation.html)
    pub fn toRotation(_gravity: pango.Gravity) f64 {
        const cFn = @extern(*const fn (pango.Gravity) callconv(.c) f64, .{ .name = "pango_gravity_to_rotation" });
        const ret = cFn(_gravity);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_gravity_get_type" });
        return cFn();
    }
};
/// Enum [GravityHint](https://docs.gtk.org/Pango/enum.GravityHint.html)
pub const GravityHint = enum(u32) {
    natural = 0,
    strong = 1,
    line = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_gravity_hint_get_type" });
        return cFn();
    }
};
/// Struct [Item](https://docs.gtk.org/Pango/struct.Item.html)
pub const Item = extern struct {
    offset: i32,
    length: i32,
    num_chars: i32,
    analysis: pango.Analysis,
    /// ctor [new](https://docs.gtk.org/Pango/ctor.Item.new.html)
    pub fn new() *Item {
        const cFn = @extern(*const fn () callconv(.c) *Item, .{ .name = "pango_item_new" });
        const ret = cFn();
        return ret;
    }
    /// method [apply_attrs](https://docs.gtk.org/Pango/method.Item.apply_attrs.html)
    pub fn applyAttrs(self: *Item, _iter: *pango.AttrIterator) void {
        const cFn = @extern(*const fn (*Item, *pango.AttrIterator) callconv(.c) void, .{ .name = "pango_item_apply_attrs" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.Item.copy.html)
    pub fn copy(self: *Item) ?*pango.Item {
        const cFn = @extern(*const fn (*Item) callconv(.c) ?*pango.Item, .{ .name = "pango_item_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.Item.free.html)
    pub fn free(self: *Item) void {
        const cFn = @extern(*const fn (*Item) callconv(.c) void, .{ .name = "pango_item_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [split](https://docs.gtk.org/Pango/method.Item.split.html)
    pub fn split(self: *Item, _split_index: i32, _split_offset: i32) *pango.Item {
        const cFn = @extern(*const fn (*Item, i32, i32) callconv(.c) *pango.Item, .{ .name = "pango_item_split" });
        const ret = cFn(self, _split_index, _split_offset);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_item_get_type" });
        return cFn();
    }
};
/// Struct [Language](https://docs.gtk.org/Pango/struct.Language.html)
pub const Language = opaque {
    /// method [get_sample_string](https://docs.gtk.org/Pango/method.Language.get_sample_string.html)
    pub fn getSampleString(self: *Language) [*:0]u8 {
        const cFn = @extern(*const fn (*Language) callconv(.c) [*:0]u8, .{ .name = "pango_language_get_sample_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scripts](https://docs.gtk.org/Pango/method.Language.get_scripts.html)
    pub fn getScripts(self: *Language) struct {
        ret: ?[*]pango.Script,
        num_scripts: i32,
    } {
        var num_scripts_out: i32 = undefined;
        const _num_scripts = &num_scripts_out;
        const cFn = @extern(*const fn (*Language, ?*i32) callconv(.c) ?[*]pango.Script, .{ .name = "pango_language_get_scripts" });
        const ret = cFn(self, _num_scripts);
        return .{ .ret = ret, .num_scripts = num_scripts_out };
    }
    /// method [includes_script](https://docs.gtk.org/Pango/method.Language.includes_script.html)
    pub fn includesScript(self: *Language, _script: pango.Script) bool {
        const cFn = @extern(*const fn (*Language, pango.Script) callconv(.c) bool, .{ .name = "pango_language_includes_script" });
        const ret = cFn(self, _script);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/Pango/method.Language.matches.html)
    pub fn matches(self: *Language, _range_list: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Language, [*:0]const u8) callconv(.c) bool, .{ .name = "pango_language_matches" });
        const ret = cFn(self, _range_list);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/Pango/method.Language.to_string.html)
    pub fn toString(self: *Language) [*:0]u8 {
        const cFn = @extern(*const fn (*Language) callconv(.c) [*:0]u8, .{ .name = "pango_language_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [from_string](https://docs.gtk.org/Pango/type_func.Language.from_string.html)
    pub fn fromString(_language: ?[*:0]const u8) ?*pango.Language {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) ?*pango.Language, .{ .name = "pango_language_from_string" });
        const ret = cFn(_language);
        return ret;
    }
    /// type func [get_default](https://docs.gtk.org/Pango/type_func.Language.get_default.html)
    pub fn getDefault() *pango.Language {
        const cFn = @extern(*const fn () callconv(.c) *pango.Language, .{ .name = "pango_language_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_preferred](https://docs.gtk.org/Pango/type_func.Language.get_preferred.html)
    pub fn getPreferred() ?[*:null]?*pango.Language {
        const cFn = @extern(*const fn () callconv(.c) ?[*:null]?*pango.Language, .{ .name = "pango_language_get_preferred" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_language_get_type" });
        return cFn();
    }
};
/// Class [Layout](https://docs.gtk.org/Pango/class.Layout.html)
pub const Layout = opaque {
    pub const Parent = gobject.Object;
    pub const Class = pango.LayoutClass;
    /// ctor [new](https://docs.gtk.org/Pango/ctor.Layout.new.html)
    pub fn new(_context: *pango.Context) *Layout {
        const cFn = @extern(*const fn (*pango.Context) callconv(.c) *Layout, .{ .name = "pango_layout_new" });
        const ret = cFn(_context);
        return ret;
    }
    /// type func [deserialize](https://docs.gtk.org/Pango/type_func.Layout.deserialize.html)
    pub fn deserialize(_context: *pango.Context, _bytes: *glib.Bytes, _flags: pango.LayoutDeserializeFlags, _error: *?*core.Error) error{GError}!?*pango.Layout {
        const cFn = @extern(*const fn (*pango.Context, *glib.Bytes, pango.LayoutDeserializeFlags, *?*core.Error) callconv(.c) ?*pango.Layout, .{ .name = "pango_layout_deserialize" });
        const ret = cFn(_context, _bytes, _flags, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [context_changed](https://docs.gtk.org/Pango/method.Layout.context_changed.html)
    pub fn contextChanged(self: *Layout) void {
        const cFn = @extern(*const fn (*Layout) callconv(.c) void, .{ .name = "pango_layout_context_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.Layout.copy.html)
    pub fn copy(self: *Layout) *pango.Layout {
        const cFn = @extern(*const fn (*Layout) callconv(.c) *pango.Layout, .{ .name = "pango_layout_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_alignment](https://docs.gtk.org/Pango/method.Layout.get_alignment.html)
    pub fn getAlignment(self: *Layout) pango.Alignment {
        const cFn = @extern(*const fn (*Layout) callconv(.c) pango.Alignment, .{ .name = "pango_layout_get_alignment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/Pango/method.Layout.get_attributes.html)
    pub fn getAttributes(self: *Layout) ?*pango.AttrList {
        const cFn = @extern(*const fn (*Layout) callconv(.c) ?*pango.AttrList, .{ .name = "pango_layout_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_auto_dir](https://docs.gtk.org/Pango/method.Layout.get_auto_dir.html)
    pub fn getAutoDir(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_get_auto_dir" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_baseline](https://docs.gtk.org/Pango/method.Layout.get_baseline.html)
    pub fn getBaseline(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_baseline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_caret_pos](https://docs.gtk.org/Pango/method.Layout.get_caret_pos.html)
    pub fn getCaretPos(self: *Layout, _index_: i32, _strong_pos: ?*pango.Rectangle, _weak_pos: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Layout, i32, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_get_caret_pos" });
        const ret = cFn(self, _index_, _strong_pos, _weak_pos);
        return ret;
    }
    /// method [get_character_count](https://docs.gtk.org/Pango/method.Layout.get_character_count.html)
    pub fn getCharacterCount(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_character_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/Pango/method.Layout.get_context.html)
    pub fn getContext(self: *Layout) *pango.Context {
        const cFn = @extern(*const fn (*Layout) callconv(.c) *pango.Context, .{ .name = "pango_layout_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cursor_pos](https://docs.gtk.org/Pango/method.Layout.get_cursor_pos.html)
    pub fn getCursorPos(self: *Layout, _index_: i32, _strong_pos: ?*pango.Rectangle, _weak_pos: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Layout, i32, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_get_cursor_pos" });
        const ret = cFn(self, _index_, _strong_pos, _weak_pos);
        return ret;
    }
    /// method [get_direction](https://docs.gtk.org/Pango/method.Layout.get_direction.html)
    pub fn getDirection(self: *Layout, _index: i32) pango.Direction {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) pango.Direction, .{ .name = "pango_layout_get_direction" });
        const ret = cFn(self, _index);
        return ret;
    }
    /// method [get_ellipsize](https://docs.gtk.org/Pango/method.Layout.get_ellipsize.html)
    pub fn getEllipsize(self: *Layout) pango.EllipsizeMode {
        const cFn = @extern(*const fn (*Layout) callconv(.c) pango.EllipsizeMode, .{ .name = "pango_layout_get_ellipsize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extents](https://docs.gtk.org/Pango/method.Layout.get_extents.html)
    pub fn getExtents(self: *Layout, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Layout, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_get_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_font_description](https://docs.gtk.org/Pango/method.Layout.get_font_description.html)
    pub fn getFontDescription(self: *Layout) ?*pango.FontDescription {
        const cFn = @extern(*const fn (*Layout) callconv(.c) ?*pango.FontDescription, .{ .name = "pango_layout_get_font_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/Pango/method.Layout.get_height.html)
    pub fn getHeight(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_indent](https://docs.gtk.org/Pango/method.Layout.get_indent.html)
    pub fn getIndent(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_indent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iter](https://docs.gtk.org/Pango/method.Layout.get_iter.html)
    pub fn getIter(self: *Layout) *pango.LayoutIter {
        const cFn = @extern(*const fn (*Layout) callconv(.c) *pango.LayoutIter, .{ .name = "pango_layout_get_iter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_justify](https://docs.gtk.org/Pango/method.Layout.get_justify.html)
    pub fn getJustify(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_get_justify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_justify_last_line](https://docs.gtk.org/Pango/method.Layout.get_justify_last_line.html)
    pub fn getJustifyLastLine(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_get_justify_last_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line](https://docs.gtk.org/Pango/method.Layout.get_line.html)
    pub fn getLine(self: *Layout, _line: i32) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_layout_get_line" });
        const ret = cFn(self, _line);
        return ret;
    }
    /// method [get_line_count](https://docs.gtk.org/Pango/method.Layout.get_line_count.html)
    pub fn getLineCount(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_line_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_readonly](https://docs.gtk.org/Pango/method.Layout.get_line_readonly.html)
    pub fn getLineReadonly(self: *Layout, _line: i32) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_layout_get_line_readonly" });
        const ret = cFn(self, _line);
        return ret;
    }
    /// method [get_line_spacing](https://docs.gtk.org/Pango/method.Layout.get_line_spacing.html)
    pub fn getLineSpacing(self: *Layout) f32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) f32, .{ .name = "pango_layout_get_line_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_lines](https://docs.gtk.org/Pango/method.Layout.get_lines.html)
    pub fn getLines(self: *Layout) ?*core.SList {
        const cFn = @extern(*const fn (*Layout) callconv(.c) ?*core.SList, .{ .name = "pango_layout_get_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_lines_readonly](https://docs.gtk.org/Pango/method.Layout.get_lines_readonly.html)
    pub fn getLinesReadonly(self: *Layout) ?*core.SList {
        const cFn = @extern(*const fn (*Layout) callconv(.c) ?*core.SList, .{ .name = "pango_layout_get_lines_readonly" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_log_attrs](https://docs.gtk.org/Pango/method.Layout.get_log_attrs.html)
    pub fn getLogAttrs(self: *Layout) struct {
        ret: void,
        attrs: []pango.LogAttr,
    } {
        var attrs_out: [*]pango.LogAttr = undefined;
        const _attrs = &attrs_out;
        var n_attrs_out: i32 = undefined;
        const _n_attrs = &n_attrs_out;
        const cFn = @extern(*const fn (*Layout, *[*]pango.LogAttr, *i32) callconv(.c) void, .{ .name = "pango_layout_get_log_attrs" });
        const ret = cFn(self, _attrs, _n_attrs);
        return .{ .ret = ret, .attrs = attrs_out[0..@intCast(n_attrs_out)] };
    }
    /// method [get_log_attrs_readonly](https://docs.gtk.org/Pango/method.Layout.get_log_attrs_readonly.html)
    pub fn getLogAttrsReadonly(self: *Layout) struct {
        ret: [*]pango.LogAttr,
        n_attrs: i32,
    } {
        var n_attrs_out: i32 = undefined;
        const _n_attrs = &n_attrs_out;
        const cFn = @extern(*const fn (*Layout, *i32) callconv(.c) [*]pango.LogAttr, .{ .name = "pango_layout_get_log_attrs_readonly" });
        const ret = cFn(self, _n_attrs);
        return .{ .ret = ret, .n_attrs = n_attrs_out };
    }
    /// method [get_pixel_extents](https://docs.gtk.org/Pango/method.Layout.get_pixel_extents.html)
    pub fn getPixelExtents(self: *Layout, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Layout, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_get_pixel_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_pixel_size](https://docs.gtk.org/Pango/method.Layout.get_pixel_size.html)
    pub fn getPixelSize(self: *Layout) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Layout, ?*i32, ?*i32) callconv(.c) void, .{ .name = "pango_layout_get_pixel_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_serial](https://docs.gtk.org/Pango/method.Layout.get_serial.html)
    pub fn getSerial(self: *Layout) u32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) u32, .{ .name = "pango_layout_get_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_single_paragraph_mode](https://docs.gtk.org/Pango/method.Layout.get_single_paragraph_mode.html)
    pub fn getSingleParagraphMode(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_get_single_paragraph_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/Pango/method.Layout.get_size.html)
    pub fn getSize(self: *Layout) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Layout, ?*i32, ?*i32) callconv(.c) void, .{ .name = "pango_layout_get_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_spacing](https://docs.gtk.org/Pango/method.Layout.get_spacing.html)
    pub fn getSpacing(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tabs](https://docs.gtk.org/Pango/method.Layout.get_tabs.html)
    pub fn getTabs(self: *Layout) ?*pango.TabArray {
        const cFn = @extern(*const fn (*Layout) callconv(.c) ?*pango.TabArray, .{ .name = "pango_layout_get_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/Pango/method.Layout.get_text.html)
    pub fn getText(self: *Layout) [*:0]u8 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) [*:0]u8, .{ .name = "pango_layout_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_unknown_glyphs_count](https://docs.gtk.org/Pango/method.Layout.get_unknown_glyphs_count.html)
    pub fn getUnknownGlyphsCount(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_unknown_glyphs_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/Pango/method.Layout.get_width.html)
    pub fn getWidth(self: *Layout) i32 {
        const cFn = @extern(*const fn (*Layout) callconv(.c) i32, .{ .name = "pango_layout_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap](https://docs.gtk.org/Pango/method.Layout.get_wrap.html)
    pub fn getWrap(self: *Layout) pango.WrapMode {
        const cFn = @extern(*const fn (*Layout) callconv(.c) pango.WrapMode, .{ .name = "pango_layout_get_wrap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [index_to_line_x](https://docs.gtk.org/Pango/method.Layout.index_to_line_x.html)
    pub fn indexToLineX(self: *Layout, _index_: i32, _trailing: bool) struct {
        ret: void,
        line: i32,
        x_pos: i32,
    } {
        var line_out: i32 = undefined;
        const _line = &line_out;
        var x_pos_out: i32 = undefined;
        const _x_pos = &x_pos_out;
        const cFn = @extern(*const fn (*Layout, i32, bool, ?*i32, ?*i32) callconv(.c) void, .{ .name = "pango_layout_index_to_line_x" });
        const ret = cFn(self, _index_, _trailing, _line, _x_pos);
        return .{ .ret = ret, .line = line_out, .x_pos = x_pos_out };
    }
    /// method [index_to_pos](https://docs.gtk.org/Pango/method.Layout.index_to_pos.html)
    pub fn indexToPos(self: *Layout, _index_: i32, _pos: *pango.Rectangle) void {
        const cFn = @extern(*const fn (*Layout, i32, *pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_index_to_pos" });
        const ret = cFn(self, _index_, _pos);
        return ret;
    }
    /// method [is_ellipsized](https://docs.gtk.org/Pango/method.Layout.is_ellipsized.html)
    pub fn isEllipsized(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_is_ellipsized" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_wrapped](https://docs.gtk.org/Pango/method.Layout.is_wrapped.html)
    pub fn isWrapped(self: *Layout) bool {
        const cFn = @extern(*const fn (*Layout) callconv(.c) bool, .{ .name = "pango_layout_is_wrapped" });
        const ret = cFn(self);
        return ret;
    }
    /// method [move_cursor_visually](https://docs.gtk.org/Pango/method.Layout.move_cursor_visually.html)
    pub fn moveCursorVisually(self: *Layout, _strong: bool, _old_index: i32, _old_trailing: i32, _direction: i32) struct {
        ret: void,
        new_index: i32,
        new_trailing: i32,
    } {
        var new_index_out: i32 = undefined;
        const _new_index = &new_index_out;
        var new_trailing_out: i32 = undefined;
        const _new_trailing = &new_trailing_out;
        const cFn = @extern(*const fn (*Layout, bool, i32, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "pango_layout_move_cursor_visually" });
        const ret = cFn(self, _strong, _old_index, _old_trailing, _direction, _new_index, _new_trailing);
        return .{ .ret = ret, .new_index = new_index_out, .new_trailing = new_trailing_out };
    }
    /// method [serialize](https://docs.gtk.org/Pango/method.Layout.serialize.html)
    pub fn serialize(self: *Layout, _flags: pango.LayoutSerializeFlags) *glib.Bytes {
        const cFn = @extern(*const fn (*Layout, pango.LayoutSerializeFlags) callconv(.c) *glib.Bytes, .{ .name = "pango_layout_serialize" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_alignment](https://docs.gtk.org/Pango/method.Layout.set_alignment.html)
    pub fn setAlignment(self: *Layout, _alignment: pango.Alignment) void {
        const cFn = @extern(*const fn (*Layout, pango.Alignment) callconv(.c) void, .{ .name = "pango_layout_set_alignment" });
        const ret = cFn(self, _alignment);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/Pango/method.Layout.set_attributes.html)
    pub fn setAttributes(self: *Layout, _attrs: ?*pango.AttrList) void {
        const cFn = @extern(*const fn (*Layout, ?*pango.AttrList) callconv(.c) void, .{ .name = "pango_layout_set_attributes" });
        const ret = cFn(self, _attrs);
        return ret;
    }
    /// method [set_auto_dir](https://docs.gtk.org/Pango/method.Layout.set_auto_dir.html)
    pub fn setAutoDir(self: *Layout, _auto_dir: bool) void {
        const cFn = @extern(*const fn (*Layout, bool) callconv(.c) void, .{ .name = "pango_layout_set_auto_dir" });
        const ret = cFn(self, _auto_dir);
        return ret;
    }
    /// method [set_ellipsize](https://docs.gtk.org/Pango/method.Layout.set_ellipsize.html)
    pub fn setEllipsize(self: *Layout, _ellipsize: pango.EllipsizeMode) void {
        const cFn = @extern(*const fn (*Layout, pango.EllipsizeMode) callconv(.c) void, .{ .name = "pango_layout_set_ellipsize" });
        const ret = cFn(self, _ellipsize);
        return ret;
    }
    /// method [set_font_description](https://docs.gtk.org/Pango/method.Layout.set_font_description.html)
    pub fn setFontDescription(self: *Layout, _desc: ?*pango.FontDescription) void {
        const cFn = @extern(*const fn (*Layout, ?*pango.FontDescription) callconv(.c) void, .{ .name = "pango_layout_set_font_description" });
        const ret = cFn(self, _desc);
        return ret;
    }
    /// method [set_height](https://docs.gtk.org/Pango/method.Layout.set_height.html)
    pub fn setHeight(self: *Layout, _height: i32) void {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) void, .{ .name = "pango_layout_set_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_indent](https://docs.gtk.org/Pango/method.Layout.set_indent.html)
    pub fn setIndent(self: *Layout, _indent: i32) void {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) void, .{ .name = "pango_layout_set_indent" });
        const ret = cFn(self, _indent);
        return ret;
    }
    /// method [set_justify](https://docs.gtk.org/Pango/method.Layout.set_justify.html)
    pub fn setJustify(self: *Layout, _justify: bool) void {
        const cFn = @extern(*const fn (*Layout, bool) callconv(.c) void, .{ .name = "pango_layout_set_justify" });
        const ret = cFn(self, _justify);
        return ret;
    }
    /// method [set_justify_last_line](https://docs.gtk.org/Pango/method.Layout.set_justify_last_line.html)
    pub fn setJustifyLastLine(self: *Layout, _justify: bool) void {
        const cFn = @extern(*const fn (*Layout, bool) callconv(.c) void, .{ .name = "pango_layout_set_justify_last_line" });
        const ret = cFn(self, _justify);
        return ret;
    }
    /// method [set_line_spacing](https://docs.gtk.org/Pango/method.Layout.set_line_spacing.html)
    pub fn setLineSpacing(self: *Layout, _factor: f32) void {
        const cFn = @extern(*const fn (*Layout, f32) callconv(.c) void, .{ .name = "pango_layout_set_line_spacing" });
        const ret = cFn(self, _factor);
        return ret;
    }
    /// method [set_markup](https://docs.gtk.org/Pango/method.Layout.set_markup.html)
    pub fn setMarkup(self: *Layout, _markup: [*:0]const u8, _length: i32) void {
        const cFn = @extern(*const fn (*Layout, [*:0]const u8, i32) callconv(.c) void, .{ .name = "pango_layout_set_markup" });
        const ret = cFn(self, _markup, _length);
        return ret;
    }
    /// method [set_markup_with_accel](https://docs.gtk.org/Pango/method.Layout.set_markup_with_accel.html)
    pub fn setMarkupWithAccel(self: *Layout, _markup: [*:0]const u8, _length: i32, _accel_marker: core.Unichar) struct {
        ret: void,
        accel_char: core.Unichar,
    } {
        var accel_char_out: core.Unichar = undefined;
        const _accel_char = &accel_char_out;
        const cFn = @extern(*const fn (*Layout, [*:0]const u8, i32, core.Unichar, ?*core.Unichar) callconv(.c) void, .{ .name = "pango_layout_set_markup_with_accel" });
        const ret = cFn(self, _markup, _length, _accel_marker, _accel_char);
        return .{ .ret = ret, .accel_char = accel_char_out };
    }
    /// method [set_single_paragraph_mode](https://docs.gtk.org/Pango/method.Layout.set_single_paragraph_mode.html)
    pub fn setSingleParagraphMode(self: *Layout, _setting: bool) void {
        const cFn = @extern(*const fn (*Layout, bool) callconv(.c) void, .{ .name = "pango_layout_set_single_paragraph_mode" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_spacing](https://docs.gtk.org/Pango/method.Layout.set_spacing.html)
    pub fn setSpacing(self: *Layout, _spacing: i32) void {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) void, .{ .name = "pango_layout_set_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    /// method [set_tabs](https://docs.gtk.org/Pango/method.Layout.set_tabs.html)
    pub fn setTabs(self: *Layout, _tabs: ?*pango.TabArray) void {
        const cFn = @extern(*const fn (*Layout, ?*pango.TabArray) callconv(.c) void, .{ .name = "pango_layout_set_tabs" });
        const ret = cFn(self, _tabs);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/Pango/method.Layout.set_text.html)
    pub fn setText(self: *Layout, _text: [*:0]const u8, _length: i32) void {
        const cFn = @extern(*const fn (*Layout, [*:0]const u8, i32) callconv(.c) void, .{ .name = "pango_layout_set_text" });
        const ret = cFn(self, _text, _length);
        return ret;
    }
    /// method [set_width](https://docs.gtk.org/Pango/method.Layout.set_width.html)
    pub fn setWidth(self: *Layout, _width: i32) void {
        const cFn = @extern(*const fn (*Layout, i32) callconv(.c) void, .{ .name = "pango_layout_set_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    /// method [set_wrap](https://docs.gtk.org/Pango/method.Layout.set_wrap.html)
    pub fn setWrap(self: *Layout, _wrap: pango.WrapMode) void {
        const cFn = @extern(*const fn (*Layout, pango.WrapMode) callconv(.c) void, .{ .name = "pango_layout_set_wrap" });
        const ret = cFn(self, _wrap);
        return ret;
    }
    /// method [write_to_file](https://docs.gtk.org/Pango/method.Layout.write_to_file.html)
    pub fn writeToFile(self: *Layout, _flags: pango.LayoutSerializeFlags, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Layout, pango.LayoutSerializeFlags, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "pango_layout_write_to_file" });
        const ret = cFn(self, _flags, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [xy_to_index](https://docs.gtk.org/Pango/method.Layout.xy_to_index.html)
    pub fn xyToIndex(self: *Layout, _x: i32, _y: i32) struct {
        ret: bool,
        index_: i32,
        trailing: i32,
    } {
        var index__out: i32 = undefined;
        const _index_ = &index__out;
        var trailing_out: i32 = undefined;
        const _trailing = &trailing_out;
        const cFn = @extern(*const fn (*Layout, i32, i32, *i32, *i32) callconv(.c) bool, .{ .name = "pango_layout_xy_to_index" });
        const ret = cFn(self, _x, _y, _index_, _trailing);
        return .{ .ret = ret, .index_ = index__out, .trailing = trailing_out };
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_get_type" });
        return cFn();
    }
};
pub const LayoutClass = opaque {};
/// Error [LayoutDeserializeError](https://docs.gtk.org/Pango/error.LayoutDeserializeError.html)
pub const LayoutDeserializeError = enum(u32) {
    invalid = 0,
    invalid_value = 1,
    missing_value = 2,

    /// type func [quark](https://docs.gtk.org/Pango/type_func.LayoutDeserializeError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "pango_layout_deserialize_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_deserialize_error_get_type" });
        return cFn();
    }
};
/// Flags [LayoutDeserializeFlags](https://docs.gtk.org/Pango/flags.LayoutDeserializeFlags.html)
pub const LayoutDeserializeFlags = packed struct(u32) {
    context: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_deserialize_flags_get_type" });
        return cFn();
    }
};
/// Struct [LayoutIter](https://docs.gtk.org/Pango/struct.LayoutIter.html)
pub const LayoutIter = opaque {
    /// method [at_last_line](https://docs.gtk.org/Pango/method.LayoutIter.at_last_line.html)
    pub fn atLastLine(self: *LayoutIter) bool {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) bool, .{ .name = "pango_layout_iter_at_last_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.LayoutIter.copy.html)
    pub fn copy(self: *LayoutIter) ?*pango.LayoutIter {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.LayoutIter, .{ .name = "pango_layout_iter_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.LayoutIter.free.html)
    pub fn free(self: *LayoutIter) void {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) void, .{ .name = "pango_layout_iter_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_baseline](https://docs.gtk.org/Pango/method.LayoutIter.get_baseline.html)
    pub fn getBaseline(self: *LayoutIter) i32 {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) i32, .{ .name = "pango_layout_iter_get_baseline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_char_extents](https://docs.gtk.org/Pango/method.LayoutIter.get_char_extents.html)
    pub fn getCharExtents(self: *LayoutIter, _logical_rect: *pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutIter, *pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_iter_get_char_extents" });
        const ret = cFn(self, _logical_rect);
        return ret;
    }
    /// method [get_cluster_extents](https://docs.gtk.org/Pango/method.LayoutIter.get_cluster_extents.html)
    pub fn getClusterExtents(self: *LayoutIter, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutIter, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_iter_get_cluster_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_index](https://docs.gtk.org/Pango/method.LayoutIter.get_index.html)
    pub fn getIndex(self: *LayoutIter) i32 {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) i32, .{ .name = "pango_layout_iter_get_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout](https://docs.gtk.org/Pango/method.LayoutIter.get_layout.html)
    pub fn getLayout(self: *LayoutIter) ?*pango.Layout {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.Layout, .{ .name = "pango_layout_iter_get_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_extents](https://docs.gtk.org/Pango/method.LayoutIter.get_layout_extents.html)
    pub fn getLayoutExtents(self: *LayoutIter, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutIter, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_iter_get_layout_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_line](https://docs.gtk.org/Pango/method.LayoutIter.get_line.html)
    pub fn getLine(self: *LayoutIter) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_layout_iter_get_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_extents](https://docs.gtk.org/Pango/method.LayoutIter.get_line_extents.html)
    pub fn getLineExtents(self: *LayoutIter, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutIter, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_iter_get_line_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_line_readonly](https://docs.gtk.org/Pango/method.LayoutIter.get_line_readonly.html)
    pub fn getLineReadonly(self: *LayoutIter) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_layout_iter_get_line_readonly" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_yrange](https://docs.gtk.org/Pango/method.LayoutIter.get_line_yrange.html)
    pub fn getLineYrange(self: *LayoutIter) struct {
        ret: void,
        y0_: i32,
        y1_: i32,
    } {
        var y0__out: i32 = undefined;
        const _y0_ = &y0__out;
        var y1__out: i32 = undefined;
        const _y1_ = &y1__out;
        const cFn = @extern(*const fn (*LayoutIter, ?*i32, ?*i32) callconv(.c) void, .{ .name = "pango_layout_iter_get_line_yrange" });
        const ret = cFn(self, _y0_, _y1_);
        return .{ .ret = ret, .y0_ = y0__out, .y1_ = y1__out };
    }
    /// method [get_run](https://docs.gtk.org/Pango/method.LayoutIter.get_run.html)
    pub fn getRun(self: *LayoutIter) ?*pango.GlyphItem {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.GlyphItem, .{ .name = "pango_layout_iter_get_run" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_run_baseline](https://docs.gtk.org/Pango/method.LayoutIter.get_run_baseline.html)
    pub fn getRunBaseline(self: *LayoutIter) i32 {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) i32, .{ .name = "pango_layout_iter_get_run_baseline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_run_extents](https://docs.gtk.org/Pango/method.LayoutIter.get_run_extents.html)
    pub fn getRunExtents(self: *LayoutIter, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutIter, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_iter_get_run_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_run_readonly](https://docs.gtk.org/Pango/method.LayoutIter.get_run_readonly.html)
    pub fn getRunReadonly(self: *LayoutIter) ?*pango.GlyphItem {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) ?*pango.GlyphItem, .{ .name = "pango_layout_iter_get_run_readonly" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next_char](https://docs.gtk.org/Pango/method.LayoutIter.next_char.html)
    pub fn nextChar(self: *LayoutIter) bool {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) bool, .{ .name = "pango_layout_iter_next_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next_cluster](https://docs.gtk.org/Pango/method.LayoutIter.next_cluster.html)
    pub fn nextCluster(self: *LayoutIter) bool {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) bool, .{ .name = "pango_layout_iter_next_cluster" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next_line](https://docs.gtk.org/Pango/method.LayoutIter.next_line.html)
    pub fn nextLine(self: *LayoutIter) bool {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) bool, .{ .name = "pango_layout_iter_next_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next_run](https://docs.gtk.org/Pango/method.LayoutIter.next_run.html)
    pub fn nextRun(self: *LayoutIter) bool {
        const cFn = @extern(*const fn (*LayoutIter) callconv(.c) bool, .{ .name = "pango_layout_iter_next_run" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_iter_get_type" });
        return cFn();
    }
};
/// Struct [LayoutLine](https://docs.gtk.org/Pango/struct.LayoutLine.html)
pub const LayoutLine = extern struct {
    layout: ?*pango.Layout,
    start_index: i32,
    length: i32,
    runs: ?*core.SList,
    is_paragraph_start: u32,
    resolved_dir: u32,
    /// method [get_extents](https://docs.gtk.org/Pango/method.LayoutLine.get_extents.html)
    pub fn getExtents(self: *LayoutLine, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutLine, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_line_get_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/Pango/method.LayoutLine.get_height.html)
    pub fn getHeight(self: *LayoutLine) struct {
        ret: void,
        height: i32,
    } {
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*LayoutLine, ?*i32) callconv(.c) void, .{ .name = "pango_layout_line_get_height" });
        const ret = cFn(self, _height);
        return .{ .ret = ret, .height = height_out };
    }
    /// method [get_length](https://docs.gtk.org/Pango/method.LayoutLine.get_length.html)
    pub fn getLength(self: *LayoutLine) i32 {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) i32, .{ .name = "pango_layout_line_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixel_extents](https://docs.gtk.org/Pango/method.LayoutLine.get_pixel_extents.html)
    pub fn getPixelExtents(self: *LayoutLine, _ink_rect: ?*pango.Rectangle, _logical_rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*LayoutLine, ?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_layout_line_get_pixel_extents" });
        const ret = cFn(self, _ink_rect, _logical_rect);
        return ret;
    }
    /// method [get_resolved_direction](https://docs.gtk.org/Pango/method.LayoutLine.get_resolved_direction.html)
    pub fn getResolvedDirection(self: *LayoutLine) pango.Direction {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) pango.Direction, .{ .name = "pango_layout_line_get_resolved_direction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_index](https://docs.gtk.org/Pango/method.LayoutLine.get_start_index.html)
    pub fn getStartIndex(self: *LayoutLine) i32 {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) i32, .{ .name = "pango_layout_line_get_start_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_x_ranges](https://docs.gtk.org/Pango/method.LayoutLine.get_x_ranges.html)
    pub fn getXRanges(self: *LayoutLine, _start_index: i32, _end_index: i32) struct {
        ret: void,
        ranges: []i32,
    } {
        var ranges_out: [*]i32 = undefined;
        const _ranges = &ranges_out;
        var n_ranges_out: i32 = undefined;
        const _n_ranges = &n_ranges_out;
        const cFn = @extern(*const fn (*LayoutLine, i32, i32, *[*]i32, *i32) callconv(.c) void, .{ .name = "pango_layout_line_get_x_ranges" });
        const ret = cFn(self, _start_index, _end_index, _ranges, _n_ranges);
        return .{ .ret = ret, .ranges = ranges_out[0..@intCast(n_ranges_out)] };
    }
    /// method [index_to_x](https://docs.gtk.org/Pango/method.LayoutLine.index_to_x.html)
    pub fn indexToX(self: *LayoutLine, _index_: i32, _trailing: bool) struct {
        ret: void,
        x_pos: i32,
    } {
        var x_pos_out: i32 = undefined;
        const _x_pos = &x_pos_out;
        const cFn = @extern(*const fn (*LayoutLine, i32, bool, *i32) callconv(.c) void, .{ .name = "pango_layout_line_index_to_x" });
        const ret = cFn(self, _index_, _trailing, _x_pos);
        return .{ .ret = ret, .x_pos = x_pos_out };
    }
    /// method [is_paragraph_start](https://docs.gtk.org/Pango/method.LayoutLine.is_paragraph_start.html)
    pub fn isParagraphStart(self: *LayoutLine) bool {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) bool, .{ .name = "pango_layout_line_is_paragraph_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/Pango/method.LayoutLine.ref.html)
    pub fn ref(self: *LayoutLine) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_layout_line_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/Pango/method.LayoutLine.unref.html)
    pub fn unref(self: *LayoutLine) void {
        const cFn = @extern(*const fn (*LayoutLine) callconv(.c) void, .{ .name = "pango_layout_line_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [x_to_index](https://docs.gtk.org/Pango/method.LayoutLine.x_to_index.html)
    pub fn xToIndex(self: *LayoutLine, _x_pos: i32) struct {
        ret: bool,
        index_: i32,
        trailing: i32,
    } {
        var index__out: i32 = undefined;
        const _index_ = &index__out;
        var trailing_out: i32 = undefined;
        const _trailing = &trailing_out;
        const cFn = @extern(*const fn (*LayoutLine, i32, *i32, *i32) callconv(.c) bool, .{ .name = "pango_layout_line_x_to_index" });
        const ret = cFn(self, _x_pos, _index_, _trailing);
        return .{ .ret = ret, .index_ = index__out, .trailing = trailing_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_line_get_type" });
        return cFn();
    }
};
/// Flags [LayoutSerializeFlags](https://docs.gtk.org/Pango/flags.LayoutSerializeFlags.html)
pub const LayoutSerializeFlags = packed struct(u32) {
    context: bool = false,
    output: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_layout_serialize_flags_get_type" });
        return cFn();
    }
};
/// Struct [LogAttr](https://docs.gtk.org/Pango/struct.LogAttr.html)
pub const LogAttr = extern struct {
    is_line_break: u32,
    is_mandatory_break: u32,
    is_char_break: u32,
    is_white: u32,
    is_cursor_position: u32,
    is_word_start: u32,
    is_word_end: u32,
    is_sentence_boundary: u32,
    is_sentence_start: u32,
    is_sentence_end: u32,
    backspace_deletes_character: u32,
    is_expandable_space: u32,
    is_word_boundary: u32,
    break_inserts_hyphen: u32,
    break_removes_preceding: u32,
    reserved: u32,
};
/// Struct [Matrix](https://docs.gtk.org/Pango/struct.Matrix.html)
pub const Matrix = extern struct {
    xx: f64,
    xy: f64,
    yx: f64,
    yy: f64,
    x0: f64,
    y0: f64,
    /// method [concat](https://docs.gtk.org/Pango/method.Matrix.concat.html)
    pub fn concat(self: *Matrix, _new_matrix: *pango.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, *pango.Matrix) callconv(.c) void, .{ .name = "pango_matrix_concat" });
        const ret = cFn(self, _new_matrix);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.Matrix.copy.html)
    pub fn copy(self: *Matrix) ?*pango.Matrix {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) ?*pango.Matrix, .{ .name = "pango_matrix_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.Matrix.free.html)
    pub fn free(self: *Matrix) void {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) void, .{ .name = "pango_matrix_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_scale_factor](https://docs.gtk.org/Pango/method.Matrix.get_font_scale_factor.html)
    pub fn getFontScaleFactor(self: *Matrix) f64 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f64, .{ .name = "pango_matrix_get_font_scale_factor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_scale_factors](https://docs.gtk.org/Pango/method.Matrix.get_font_scale_factors.html)
    pub fn getFontScaleFactors(self: *Matrix) struct {
        ret: void,
        xscale: f64,
        yscale: f64,
    } {
        var xscale_out: f64 = undefined;
        const _xscale = &xscale_out;
        var yscale_out: f64 = undefined;
        const _yscale = &yscale_out;
        const cFn = @extern(*const fn (*Matrix, ?*f64, ?*f64) callconv(.c) void, .{ .name = "pango_matrix_get_font_scale_factors" });
        const ret = cFn(self, _xscale, _yscale);
        return .{ .ret = ret, .xscale = xscale_out, .yscale = yscale_out };
    }
    /// method [get_slant_ratio](https://docs.gtk.org/Pango/method.Matrix.get_slant_ratio.html)
    pub fn getSlantRatio(self: *Matrix) f64 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f64, .{ .name = "pango_matrix_get_slant_ratio" });
        const ret = cFn(self);
        return ret;
    }
    /// method [rotate](https://docs.gtk.org/Pango/method.Matrix.rotate.html)
    pub fn rotate(self: *Matrix, _degrees: f64) void {
        const cFn = @extern(*const fn (*Matrix, f64) callconv(.c) void, .{ .name = "pango_matrix_rotate" });
        const ret = cFn(self, _degrees);
        return ret;
    }
    /// method [scale](https://docs.gtk.org/Pango/method.Matrix.scale.html)
    pub fn scale(self: *Matrix, _scale_x: f64, _scale_y: f64) void {
        const cFn = @extern(*const fn (*Matrix, f64, f64) callconv(.c) void, .{ .name = "pango_matrix_scale" });
        const ret = cFn(self, _scale_x, _scale_y);
        return ret;
    }
    /// method [transform_distance](https://docs.gtk.org/Pango/method.Matrix.transform_distance.html)
    pub fn transformDistance(self: *Matrix, _dx: *f64, _dy: *f64) void {
        const cFn = @extern(*const fn (*Matrix, *f64, *f64) callconv(.c) void, .{ .name = "pango_matrix_transform_distance" });
        const ret = cFn(self, _dx, _dy);
        return ret;
    }
    /// method [transform_pixel_rectangle](https://docs.gtk.org/Pango/method.Matrix.transform_pixel_rectangle.html)
    pub fn transformPixelRectangle(self: *Matrix, _rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Matrix, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_matrix_transform_pixel_rectangle" });
        const ret = cFn(self, _rect);
        return ret;
    }
    /// method [transform_point](https://docs.gtk.org/Pango/method.Matrix.transform_point.html)
    pub fn transformPoint(self: *Matrix, _x: *f64, _y: *f64) void {
        const cFn = @extern(*const fn (*Matrix, *f64, *f64) callconv(.c) void, .{ .name = "pango_matrix_transform_point" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    /// method [transform_rectangle](https://docs.gtk.org/Pango/method.Matrix.transform_rectangle.html)
    pub fn transformRectangle(self: *Matrix, _rect: ?*pango.Rectangle) void {
        const cFn = @extern(*const fn (*Matrix, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_matrix_transform_rectangle" });
        const ret = cFn(self, _rect);
        return ret;
    }
    /// method [translate](https://docs.gtk.org/Pango/method.Matrix.translate.html)
    pub fn translate(self: *Matrix, _tx: f64, _ty: f64) void {
        const cFn = @extern(*const fn (*Matrix, f64, f64) callconv(.c) void, .{ .name = "pango_matrix_translate" });
        const ret = cFn(self, _tx, _ty);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_matrix_get_type" });
        return cFn();
    }
};
/// Enum [Overline](https://docs.gtk.org/Pango/enum.Overline.html)
pub const Overline = enum(u32) {
    none = 0,
    single = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_overline_get_type" });
        return cFn();
    }
};
/// Struct [Rectangle](https://docs.gtk.org/Pango/struct.Rectangle.html)
pub const Rectangle = extern struct {
    x: i32,
    y: i32,
    width: i32,
    height: i32,
};
/// Enum [RenderPart](https://docs.gtk.org/Pango/enum.RenderPart.html)
pub const RenderPart = enum(u32) {
    foreground = 0,
    background = 1,
    underline = 2,
    strikethrough = 3,
    overline = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_render_part_get_type" });
        return cFn();
    }
};
/// Class [Renderer](https://docs.gtk.org/Pango/class.Renderer.html)
pub const Renderer = extern struct {
    parent_instance: gobject.Object,
    underline: pango.Underline,
    strikethrough: bool,
    active_count: i32,
    matrix: ?*pango.Matrix,
    priv: ?*pango.RendererPrivate,
    pub const Parent = gobject.Object;
    pub const Class = pango.RendererClass;
    /// method [activate](https://docs.gtk.org/Pango/method.Renderer.activate.html)
    pub fn activate(self: *Renderer) void {
        const cFn = @extern(*const fn (*Renderer) callconv(.c) void, .{ .name = "pango_renderer_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [deactivate](https://docs.gtk.org/Pango/method.Renderer.deactivate.html)
    pub fn deactivate(self: *Renderer) void {
        const cFn = @extern(*const fn (*Renderer) callconv(.c) void, .{ .name = "pango_renderer_deactivate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [draw_error_underline](https://docs.gtk.org/Pango/method.Renderer.draw_error_underline.html)
    pub fn drawErrorUnderline(self: *Renderer, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Renderer, i32, i32, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_error_underline" });
        const ret = cFn(self, _x, _y, _width, _height);
        return ret;
    }
    /// method [draw_glyph](https://docs.gtk.org/Pango/method.Renderer.draw_glyph.html)
    pub fn drawGlyph(self: *Renderer, _font: *pango.Font, _glyph: u32, _x: f64, _y: f64) void {
        const cFn = @extern(*const fn (*Renderer, *pango.Font, u32, f64, f64) callconv(.c) void, .{ .name = "pango_renderer_draw_glyph" });
        const ret = cFn(self, _font, _glyph, _x, _y);
        return ret;
    }
    /// method [draw_glyph_item](https://docs.gtk.org/Pango/method.Renderer.draw_glyph_item.html)
    pub fn drawGlyphItem(self: *Renderer, _text: ?[*:0]const u8, _glyph_item: *pango.GlyphItem, _x: i32, _y: i32) void {
        const cFn = @extern(*const fn (*Renderer, ?[*:0]const u8, *pango.GlyphItem, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_glyph_item" });
        const ret = cFn(self, _text, _glyph_item, _x, _y);
        return ret;
    }
    /// method [draw_glyphs](https://docs.gtk.org/Pango/method.Renderer.draw_glyphs.html)
    pub fn drawGlyphs(self: *Renderer, _font: *pango.Font, _glyphs: *pango.GlyphString, _x: i32, _y: i32) void {
        const cFn = @extern(*const fn (*Renderer, *pango.Font, *pango.GlyphString, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_glyphs" });
        const ret = cFn(self, _font, _glyphs, _x, _y);
        return ret;
    }
    /// method [draw_layout](https://docs.gtk.org/Pango/method.Renderer.draw_layout.html)
    pub fn drawLayout(self: *Renderer, _layout: *pango.Layout, _x: i32, _y: i32) void {
        const cFn = @extern(*const fn (*Renderer, *pango.Layout, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_layout" });
        const ret = cFn(self, _layout, _x, _y);
        return ret;
    }
    /// method [draw_layout_line](https://docs.gtk.org/Pango/method.Renderer.draw_layout_line.html)
    pub fn drawLayoutLine(self: *Renderer, _line: *pango.LayoutLine, _x: i32, _y: i32) void {
        const cFn = @extern(*const fn (*Renderer, *pango.LayoutLine, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_layout_line" });
        const ret = cFn(self, _line, _x, _y);
        return ret;
    }
    /// method [draw_rectangle](https://docs.gtk.org/Pango/method.Renderer.draw_rectangle.html)
    pub fn drawRectangle(self: *Renderer, _part: pango.RenderPart, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart, i32, i32, i32, i32) callconv(.c) void, .{ .name = "pango_renderer_draw_rectangle" });
        const ret = cFn(self, _part, _x, _y, _width, _height);
        return ret;
    }
    /// method [draw_trapezoid](https://docs.gtk.org/Pango/method.Renderer.draw_trapezoid.html)
    pub fn drawTrapezoid(self: *Renderer, _part: pango.RenderPart, _y1_: f64, _x11: f64, _x21: f64, _y2: f64, _x12: f64, _x22: f64) void {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart, f64, f64, f64, f64, f64, f64) callconv(.c) void, .{ .name = "pango_renderer_draw_trapezoid" });
        const ret = cFn(self, _part, _y1_, _x11, _x21, _y2, _x12, _x22);
        return ret;
    }
    /// method [get_alpha](https://docs.gtk.org/Pango/method.Renderer.get_alpha.html)
    pub fn getAlpha(self: *Renderer, _part: pango.RenderPart) u16 {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart) callconv(.c) u16, .{ .name = "pango_renderer_get_alpha" });
        const ret = cFn(self, _part);
        return ret;
    }
    /// method [get_color](https://docs.gtk.org/Pango/method.Renderer.get_color.html)
    pub fn getColor(self: *Renderer, _part: pango.RenderPart) ?*pango.Color {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart) callconv(.c) ?*pango.Color, .{ .name = "pango_renderer_get_color" });
        const ret = cFn(self, _part);
        return ret;
    }
    /// method [get_layout](https://docs.gtk.org/Pango/method.Renderer.get_layout.html)
    pub fn getLayout(self: *Renderer) ?*pango.Layout {
        const cFn = @extern(*const fn (*Renderer) callconv(.c) ?*pango.Layout, .{ .name = "pango_renderer_get_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_line](https://docs.gtk.org/Pango/method.Renderer.get_layout_line.html)
    pub fn getLayoutLine(self: *Renderer) ?*pango.LayoutLine {
        const cFn = @extern(*const fn (*Renderer) callconv(.c) ?*pango.LayoutLine, .{ .name = "pango_renderer_get_layout_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_matrix](https://docs.gtk.org/Pango/method.Renderer.get_matrix.html)
    pub fn getMatrix(self: *Renderer) ?*pango.Matrix {
        const cFn = @extern(*const fn (*Renderer) callconv(.c) ?*pango.Matrix, .{ .name = "pango_renderer_get_matrix" });
        const ret = cFn(self);
        return ret;
    }
    /// method [part_changed](https://docs.gtk.org/Pango/method.Renderer.part_changed.html)
    pub fn partChanged(self: *Renderer, _part: pango.RenderPart) void {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart) callconv(.c) void, .{ .name = "pango_renderer_part_changed" });
        const ret = cFn(self, _part);
        return ret;
    }
    /// method [set_alpha](https://docs.gtk.org/Pango/method.Renderer.set_alpha.html)
    pub fn setAlpha(self: *Renderer, _part: pango.RenderPart, _alpha: u16) void {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart, u16) callconv(.c) void, .{ .name = "pango_renderer_set_alpha" });
        const ret = cFn(self, _part, _alpha);
        return ret;
    }
    /// method [set_color](https://docs.gtk.org/Pango/method.Renderer.set_color.html)
    pub fn setColor(self: *Renderer, _part: pango.RenderPart, _color: ?*pango.Color) void {
        const cFn = @extern(*const fn (*Renderer, pango.RenderPart, ?*pango.Color) callconv(.c) void, .{ .name = "pango_renderer_set_color" });
        const ret = cFn(self, _part, _color);
        return ret;
    }
    /// method [set_matrix](https://docs.gtk.org/Pango/method.Renderer.set_matrix.html)
    pub fn setMatrix(self: *Renderer, _matrix: ?*pango.Matrix) void {
        const cFn = @extern(*const fn (*Renderer, ?*pango.Matrix) callconv(.c) void, .{ .name = "pango_renderer_set_matrix" });
        const ret = cFn(self, _matrix);
        return ret;
    }
    /// vfunc [begin](https://docs.gtk.org/Pango/vfunc.Renderer.begin.html)
    pub fn beginV(self: *Renderer) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.begin.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [draw_error_underline](https://docs.gtk.org/Pango/vfunc.Renderer.draw_error_underline.html)
    pub fn drawErrorUnderlineV(self: *Renderer, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_error_underline.?;
        const ret = vFn(self, _x, _y, _width, _height);
        return ret;
    }
    /// vfunc [draw_glyph](https://docs.gtk.org/Pango/vfunc.Renderer.draw_glyph.html)
    pub fn drawGlyphV(self: *Renderer, _font: *pango.Font, _glyph: u32, _x: f64, _y: f64) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_glyph.?;
        const ret = vFn(self, _font, _glyph, _x, _y);
        return ret;
    }
    /// vfunc [draw_glyph_item](https://docs.gtk.org/Pango/vfunc.Renderer.draw_glyph_item.html)
    pub fn drawGlyphItemV(self: *Renderer, _text: ?[*:0]const u8, _glyph_item: *pango.GlyphItem, _x: i32, _y: i32) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_glyph_item.?;
        const ret = vFn(self, _text, _glyph_item, _x, _y);
        return ret;
    }
    /// vfunc [draw_glyphs](https://docs.gtk.org/Pango/vfunc.Renderer.draw_glyphs.html)
    pub fn drawGlyphsV(self: *Renderer, _font: *pango.Font, _glyphs: *pango.GlyphString, _x: i32, _y: i32) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_glyphs.?;
        const ret = vFn(self, _font, _glyphs, _x, _y);
        return ret;
    }
    /// vfunc [draw_rectangle](https://docs.gtk.org/Pango/vfunc.Renderer.draw_rectangle.html)
    pub fn drawRectangleV(self: *Renderer, _part: pango.RenderPart, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_rectangle.?;
        const ret = vFn(self, _part, _x, _y, _width, _height);
        return ret;
    }
    /// vfunc [draw_shape](https://docs.gtk.org/Pango/vfunc.Renderer.draw_shape.html)
    pub fn drawShapeV(self: *Renderer, _attr: *pango.AttrShape, _x: i32, _y: i32) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_shape.?;
        const ret = vFn(self, _attr, _x, _y);
        return ret;
    }
    /// vfunc [draw_trapezoid](https://docs.gtk.org/Pango/vfunc.Renderer.draw_trapezoid.html)
    pub fn drawTrapezoidV(self: *Renderer, _part: pango.RenderPart, _y1_: f64, _x11: f64, _x21: f64, _y2: f64, _x12: f64, _x22: f64) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_trapezoid.?;
        const ret = vFn(self, _part, _y1_, _x11, _x21, _y2, _x12, _x22);
        return ret;
    }
    /// vfunc [end](https://docs.gtk.org/Pango/vfunc.Renderer.end.html)
    pub fn endV(self: *Renderer) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.end.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [part_changed](https://docs.gtk.org/Pango/vfunc.Renderer.part_changed.html)
    pub fn partChangedV(self: *Renderer, _part: pango.RenderPart) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.part_changed.?;
        const ret = vFn(self, _part);
        return ret;
    }
    /// vfunc [prepare_run](https://docs.gtk.org/Pango/vfunc.Renderer.prepare_run.html)
    pub fn prepareRunV(self: *Renderer, _run: *pango.GlyphItem) void {
        const class: *RendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.prepare_run.?;
        const ret = vFn(self, _run);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_renderer_get_type" });
        return cFn();
    }
};
pub const RendererClass = extern struct {
    parent_class: gobject.ObjectClass,
    draw_glyphs: ?*const fn (_renderer: *pango.Renderer, _font: *pango.Font, _glyphs: *pango.GlyphString, _x: i32, _y: i32) callconv(.c) void,
    draw_rectangle: ?*const fn (_renderer: *pango.Renderer, _part: pango.RenderPart, _x: i32, _y: i32, _width: i32, _height: i32) callconv(.c) void,
    draw_error_underline: ?*const fn (_renderer: *pango.Renderer, _x: i32, _y: i32, _width: i32, _height: i32) callconv(.c) void,
    draw_shape: ?*const fn (_renderer: *pango.Renderer, _attr: *pango.AttrShape, _x: i32, _y: i32) callconv(.c) void,
    draw_trapezoid: ?*const fn (_renderer: *pango.Renderer, _part: pango.RenderPart, _y1_: f64, _x11: f64, _x21: f64, _y2: f64, _x12: f64, _x22: f64) callconv(.c) void,
    draw_glyph: ?*const fn (_renderer: *pango.Renderer, _font: *pango.Font, _glyph: u32, _x: f64, _y: f64) callconv(.c) void,
    part_changed: ?*const fn (_renderer: *pango.Renderer, _part: pango.RenderPart) callconv(.c) void,
    begin: ?*const fn (_renderer: *pango.Renderer) callconv(.c) void,
    end: ?*const fn (_renderer: *pango.Renderer) callconv(.c) void,
    prepare_run: ?*const fn (_renderer: *pango.Renderer, _run: *pango.GlyphItem) callconv(.c) void,
    draw_glyph_item: ?*const fn (_renderer: *pango.Renderer, _text: ?[*:0]const u8, _glyph_item: *pango.GlyphItem, _x: i32, _y: i32) callconv(.c) void,
    _pango_reserved2: ?*anyopaque,
    _pango_reserved3: ?*anyopaque,
    _pango_reserved4: ?*anyopaque,
};
pub const RendererPrivate = opaque {};
/// const [SCALE](https://docs.gtk.org/Pango/const.SCALE.html)
pub const SCALE = 1024;
/// Enum [Script](https://docs.gtk.org/Pango/enum.Script.html)
pub const Script = enum(i32) {
    invalid_code = -1,
    common = 0,
    inherited = 1,
    arabic = 2,
    armenian = 3,
    bengali = 4,
    bopomofo = 5,
    cherokee = 6,
    coptic = 7,
    cyrillic = 8,
    deseret = 9,
    devanagari = 10,
    ethiopic = 11,
    georgian = 12,
    gothic = 13,
    greek = 14,
    gujarati = 15,
    gurmukhi = 16,
    han = 17,
    hangul = 18,
    hebrew = 19,
    hiragana = 20,
    kannada = 21,
    katakana = 22,
    khmer = 23,
    lao = 24,
    latin = 25,
    malayalam = 26,
    mongolian = 27,
    myanmar = 28,
    ogham = 29,
    old_italic = 30,
    oriya = 31,
    runic = 32,
    sinhala = 33,
    syriac = 34,
    tamil = 35,
    telugu = 36,
    thaana = 37,
    thai = 38,
    tibetan = 39,
    canadian_aboriginal = 40,
    yi = 41,
    tagalog = 42,
    hanunoo = 43,
    buhid = 44,
    tagbanwa = 45,
    braille = 46,
    cypriot = 47,
    limbu = 48,
    osmanya = 49,
    shavian = 50,
    linear_b = 51,
    tai_le = 52,
    ugaritic = 53,
    new_tai_lue = 54,
    buginese = 55,
    glagolitic = 56,
    tifinagh = 57,
    syloti_nagri = 58,
    old_persian = 59,
    kharoshthi = 60,
    unknown = 61,
    balinese = 62,
    cuneiform = 63,
    phoenician = 64,
    phags_pa = 65,
    nko = 66,
    kayah_li = 67,
    lepcha = 68,
    rejang = 69,
    sundanese = 70,
    saurashtra = 71,
    cham = 72,
    ol_chiki = 73,
    vai = 74,
    carian = 75,
    lycian = 76,
    lydian = 77,
    batak = 78,
    brahmi = 79,
    mandaic = 80,
    chakma = 81,
    meroitic_cursive = 82,
    meroitic_hieroglyphs = 83,
    miao = 84,
    sharada = 85,
    sora_sompeng = 86,
    takri = 87,
    bassa_vah = 88,
    caucasian_albanian = 89,
    duployan = 90,
    elbasan = 91,
    grantha = 92,
    khojki = 93,
    khudawadi = 94,
    linear_a = 95,
    mahajani = 96,
    manichaean = 97,
    mende_kikakui = 98,
    modi = 99,
    mro = 100,
    nabataean = 101,
    old_north_arabian = 102,
    old_permic = 103,
    pahawh_hmong = 104,
    palmyrene = 105,
    pau_cin_hau = 106,
    psalter_pahlavi = 107,
    siddham = 108,
    tirhuta = 109,
    warang_citi = 110,
    ahom = 111,
    anatolian_hieroglyphs = 112,
    hatran = 113,
    multani = 114,
    old_hungarian = 115,
    signwriting = 116,

    /// Deprecated:
    /// type func [for_unichar](https://docs.gtk.org/Pango/type_func.Script.for_unichar.html)
    pub const forUnichar = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn forUnichar(_ch: core.Unichar) pango.Script {
            const cFn = @extern(*const fn (core.Unichar) callconv(.c) pango.Script, .{ .name = "pango_script_for_unichar" });
            const ret = cFn(_ch);
            return ret;
        }
    }.forUnichar;

    /// type func [get_sample_language](https://docs.gtk.org/Pango/type_func.Script.get_sample_language.html)
    pub fn getSampleLanguage(_script: pango.Script) ?*pango.Language {
        const cFn = @extern(*const fn (pango.Script) callconv(.c) ?*pango.Language, .{ .name = "pango_script_get_sample_language" });
        const ret = cFn(_script);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_script_get_type" });
        return cFn();
    }
};
/// Struct [ScriptIter](https://docs.gtk.org/Pango/struct.ScriptIter.html)
pub const ScriptIter = opaque {
    /// ctor [new](https://docs.gtk.org/Pango/ctor.ScriptIter.new.html)
    pub fn new(_text: [*:0]const u8, _length: i32) *ScriptIter {
        const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) *ScriptIter, .{ .name = "pango_script_iter_new" });
        const ret = cFn(_text, _length);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.ScriptIter.free.html)
    pub fn free(self: *ScriptIter) void {
        const cFn = @extern(*const fn (*ScriptIter) callconv(.c) void, .{ .name = "pango_script_iter_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_range](https://docs.gtk.org/Pango/method.ScriptIter.get_range.html)
    pub fn getRange(self: *ScriptIter) struct {
        ret: void,
        start: [*:0]u8,
        end: [*:0]u8,
        script: pango.Script,
    } {
        var start_out: [*:0]u8 = undefined;
        const _start = &start_out;
        var end_out: [*:0]u8 = undefined;
        const _end = &end_out;
        var script_out: pango.Script = undefined;
        const _script = &script_out;
        const cFn = @extern(*const fn (*ScriptIter, ?*[*:0]u8, ?*[*:0]u8, ?*pango.Script) callconv(.c) void, .{ .name = "pango_script_iter_get_range" });
        const ret = cFn(self, _start, _end, _script);
        return .{ .ret = ret, .start = start_out, .end = end_out, .script = script_out };
    }
    /// method [next](https://docs.gtk.org/Pango/method.ScriptIter.next.html)
    pub fn next(self: *ScriptIter) bool {
        const cFn = @extern(*const fn (*ScriptIter) callconv(.c) bool, .{ .name = "pango_script_iter_next" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_script_iter_get_type" });
        return cFn();
    }
};
/// Flags [ShapeFlags](https://docs.gtk.org/Pango/flags.ShapeFlags.html)
pub const ShapeFlags = packed struct(u32) {
    round_positions: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_shape_flags_get_type" });
        return cFn();
    }
};
/// Flags [ShowFlags](https://docs.gtk.org/Pango/flags.ShowFlags.html)
pub const ShowFlags = packed struct(u32) {
    spaces: bool = false,
    line_breaks: bool = false,
    ignorables: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_show_flags_get_type" });
        return cFn();
    }
};
/// Enum [Stretch](https://docs.gtk.org/Pango/enum.Stretch.html)
pub const Stretch = enum(u32) {
    ultra_condensed = 0,
    extra_condensed = 1,
    condensed = 2,
    semi_condensed = 3,
    normal = 4,
    semi_expanded = 5,
    expanded = 6,
    extra_expanded = 7,
    ultra_expanded = 8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_stretch_get_type" });
        return cFn();
    }
};
/// Enum [Style](https://docs.gtk.org/Pango/enum.Style.html)
pub const Style = enum(u32) {
    normal = 0,
    oblique = 1,
    italic = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_style_get_type" });
        return cFn();
    }
};
/// Enum [TabAlign](https://docs.gtk.org/Pango/enum.TabAlign.html)
pub const TabAlign = enum(u32) {
    left = 0,
    right = 1,
    center = 2,
    decimal = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_tab_align_get_type" });
        return cFn();
    }
};
/// Struct [TabArray](https://docs.gtk.org/Pango/struct.TabArray.html)
pub const TabArray = opaque {
    /// ctor [new](https://docs.gtk.org/Pango/ctor.TabArray.new.html)
    pub fn new(_initial_size: i32, _positions_in_pixels: bool) *TabArray {
        const cFn = @extern(*const fn (i32, bool) callconv(.c) *TabArray, .{ .name = "pango_tab_array_new" });
        const ret = cFn(_initial_size, _positions_in_pixels);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/Pango/method.TabArray.copy.html)
    pub fn copy(self: *TabArray) *pango.TabArray {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) *pango.TabArray, .{ .name = "pango_tab_array_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/Pango/method.TabArray.free.html)
    pub fn free(self: *TabArray) void {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) void, .{ .name = "pango_tab_array_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_decimal_point](https://docs.gtk.org/Pango/method.TabArray.get_decimal_point.html)
    pub fn getDecimalPoint(self: *TabArray, _tab_index: i32) core.Unichar {
        const cFn = @extern(*const fn (*TabArray, i32) callconv(.c) core.Unichar, .{ .name = "pango_tab_array_get_decimal_point" });
        const ret = cFn(self, _tab_index);
        return ret;
    }
    /// method [get_positions_in_pixels](https://docs.gtk.org/Pango/method.TabArray.get_positions_in_pixels.html)
    pub fn getPositionsInPixels(self: *TabArray) bool {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) bool, .{ .name = "pango_tab_array_get_positions_in_pixels" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/Pango/method.TabArray.get_size.html)
    pub fn getSize(self: *TabArray) i32 {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) i32, .{ .name = "pango_tab_array_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab](https://docs.gtk.org/Pango/method.TabArray.get_tab.html)
    pub fn getTab(self: *TabArray, _tab_index: i32) struct {
        ret: void,
        alignment: pango.TabAlign,
        location: i32,
    } {
        var alignment_out: pango.TabAlign = undefined;
        const _alignment = &alignment_out;
        var location_out: i32 = undefined;
        const _location = &location_out;
        const cFn = @extern(*const fn (*TabArray, i32, ?*pango.TabAlign, ?*i32) callconv(.c) void, .{ .name = "pango_tab_array_get_tab" });
        const ret = cFn(self, _tab_index, _alignment, _location);
        return .{ .ret = ret, .alignment = alignment_out, .location = location_out };
    }
    /// method [get_tabs](https://docs.gtk.org/Pango/method.TabArray.get_tabs.html)
    pub fn getTabs(self: *TabArray) struct {
        ret: void,
        alignments: *pango.TabAlign,
        locations: [*]i32,
    } {
        var alignments_out: *pango.TabAlign = undefined;
        const _alignments = &alignments_out;
        var locations_out: [*]i32 = undefined;
        const _locations = &locations_out;
        const cFn = @extern(*const fn (*TabArray, ?**pango.TabAlign, ?*[*]i32) callconv(.c) void, .{ .name = "pango_tab_array_get_tabs" });
        const ret = cFn(self, _alignments, _locations);
        return .{ .ret = ret, .alignments = alignments_out, .locations = locations_out };
    }
    /// method [resize](https://docs.gtk.org/Pango/method.TabArray.resize.html)
    pub fn resize(self: *TabArray, _new_size: i32) void {
        const cFn = @extern(*const fn (*TabArray, i32) callconv(.c) void, .{ .name = "pango_tab_array_resize" });
        const ret = cFn(self, _new_size);
        return ret;
    }
    /// method [set_decimal_point](https://docs.gtk.org/Pango/method.TabArray.set_decimal_point.html)
    pub fn setDecimalPoint(self: *TabArray, _tab_index: i32, _decimal_point: core.Unichar) void {
        const cFn = @extern(*const fn (*TabArray, i32, core.Unichar) callconv(.c) void, .{ .name = "pango_tab_array_set_decimal_point" });
        const ret = cFn(self, _tab_index, _decimal_point);
        return ret;
    }
    /// method [set_positions_in_pixels](https://docs.gtk.org/Pango/method.TabArray.set_positions_in_pixels.html)
    pub fn setPositionsInPixels(self: *TabArray, _positions_in_pixels: bool) void {
        const cFn = @extern(*const fn (*TabArray, bool) callconv(.c) void, .{ .name = "pango_tab_array_set_positions_in_pixels" });
        const ret = cFn(self, _positions_in_pixels);
        return ret;
    }
    /// method [set_tab](https://docs.gtk.org/Pango/method.TabArray.set_tab.html)
    pub fn setTab(self: *TabArray, _tab_index: i32, _alignment: pango.TabAlign, _location: i32) void {
        const cFn = @extern(*const fn (*TabArray, i32, pango.TabAlign, i32) callconv(.c) void, .{ .name = "pango_tab_array_set_tab" });
        const ret = cFn(self, _tab_index, _alignment, _location);
        return ret;
    }
    /// method [sort](https://docs.gtk.org/Pango/method.TabArray.sort.html)
    pub fn sort(self: *TabArray) void {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) void, .{ .name = "pango_tab_array_sort" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/Pango/method.TabArray.to_string.html)
    pub fn toString(self: *TabArray) [*:0]u8 {
        const cFn = @extern(*const fn (*TabArray) callconv(.c) [*:0]u8, .{ .name = "pango_tab_array_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [from_string](https://docs.gtk.org/Pango/type_func.TabArray.from_string.html)
    pub fn fromString(_text: [*:0]const u8) ?*pango.TabArray {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*pango.TabArray, .{ .name = "pango_tab_array_from_string" });
        const ret = cFn(_text);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_tab_array_get_type" });
        return cFn();
    }
};
/// Enum [TextTransform](https://docs.gtk.org/Pango/enum.TextTransform.html)
pub const TextTransform = enum(u32) {
    none = 0,
    lowercase = 1,
    uppercase = 2,
    capitalize = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_text_transform_get_type" });
        return cFn();
    }
};
/// Enum [Underline](https://docs.gtk.org/Pango/enum.Underline.html)
pub const Underline = enum(u32) {
    none = 0,
    single = 1,
    double = 2,
    low = 3,
    @"error" = 4,
    single_line = 5,
    double_line = 6,
    error_line = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_underline_get_type" });
        return cFn();
    }
};
/// const [VERSION_MAJOR](https://docs.gtk.org/Pango/const.VERSION_MAJOR.html)
pub const VERSION_MAJOR = 1;
/// const [VERSION_MICRO](https://docs.gtk.org/Pango/const.VERSION_MICRO.html)
pub const VERSION_MICRO = 2;
/// const [VERSION_MINOR](https://docs.gtk.org/Pango/const.VERSION_MINOR.html)
pub const VERSION_MINOR = 52;
/// const [VERSION_STRING](https://docs.gtk.org/Pango/const.VERSION_STRING.html)
pub const VERSION_STRING = "1.52.2";
/// Enum [Variant](https://docs.gtk.org/Pango/enum.Variant.html)
pub const Variant = enum(u32) {
    normal = 0,
    small_caps = 1,
    all_small_caps = 2,
    petite_caps = 3,
    all_petite_caps = 4,
    unicase = 5,
    title_caps = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_variant_get_type" });
        return cFn();
    }
};
/// Enum [Weight](https://docs.gtk.org/Pango/enum.Weight.html)
pub const Weight = enum(u32) {
    thin = 100,
    ultralight = 200,
    light = 300,
    semilight = 350,
    book = 380,
    normal = 400,
    medium = 500,
    semibold = 600,
    bold = 700,
    ultrabold = 800,
    heavy = 900,
    ultraheavy = 1000,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_weight_get_type" });
        return cFn();
    }
};
/// Enum [WrapMode](https://docs.gtk.org/Pango/enum.WrapMode.html)
pub const WrapMode = enum(u32) {
    word = 0,
    char = 1,
    word_char = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_wrap_mode_get_type" });
        return cFn();
    }
};
/// func [attr_allow_breaks_new](https://docs.gtk.org/Pango/func.attr_allow_breaks_new.html)
pub fn attrAllowBreaksNew(_allow_breaks: bool) *pango.Attribute {
    const cFn = @extern(*const fn (bool) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_allow_breaks_new" });
    const ret = cFn(_allow_breaks);
    return ret;
}
/// func [attr_background_alpha_new](https://docs.gtk.org/Pango/func.attr_background_alpha_new.html)
pub fn attrBackgroundAlphaNew(_alpha: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_background_alpha_new" });
    const ret = cFn(_alpha);
    return ret;
}
/// func [attr_background_new](https://docs.gtk.org/Pango/func.attr_background_new.html)
pub fn attrBackgroundNew(_red: u16, _green: u16, _blue: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16, u16, u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_background_new" });
    const ret = cFn(_red, _green, _blue);
    return ret;
}
/// func [attr_baseline_shift_new](https://docs.gtk.org/Pango/func.attr_baseline_shift_new.html)
pub fn attrBaselineShiftNew(_shift: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_baseline_shift_new" });
    const ret = cFn(_shift);
    return ret;
}
/// func [attr_break](https://docs.gtk.org/Pango/func.attr_break.html)
pub fn attrBreak(_text: [*:0]const u8, _length: i32, _attr_list: *pango.AttrList, _offset: i32, _attrss: []pango.LogAttr) void {
    const _attrs = _attrss.ptr;
    const _attrs_len: i32 = @intCast(_attrss.len);
    const cFn = @extern(*const fn ([*:0]const u8, i32, *pango.AttrList, i32, [*]pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_attr_break" });
    const ret = cFn(_text, _length, _attr_list, _offset, _attrs, _attrs_len);
    return ret;
}
/// func [attr_fallback_new](https://docs.gtk.org/Pango/func.attr_fallback_new.html)
pub fn attrFallbackNew(_enable_fallback: bool) *pango.Attribute {
    const cFn = @extern(*const fn (bool) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_fallback_new" });
    const ret = cFn(_enable_fallback);
    return ret;
}
/// func [attr_family_new](https://docs.gtk.org/Pango/func.attr_family_new.html)
pub fn attrFamilyNew(_family: [*:0]const u8) *pango.Attribute {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_family_new" });
    const ret = cFn(_family);
    return ret;
}
/// func [attr_font_desc_new](https://docs.gtk.org/Pango/func.attr_font_desc_new.html)
pub fn attrFontDescNew(_desc: *pango.FontDescription) *pango.Attribute {
    const cFn = @extern(*const fn (*pango.FontDescription) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_font_desc_new" });
    const ret = cFn(_desc);
    return ret;
}
/// func [attr_font_features_new](https://docs.gtk.org/Pango/func.attr_font_features_new.html)
pub fn attrFontFeaturesNew(_features: [*:0]const u8) *pango.Attribute {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_font_features_new" });
    const ret = cFn(_features);
    return ret;
}
/// func [attr_font_scale_new](https://docs.gtk.org/Pango/func.attr_font_scale_new.html)
pub fn attrFontScaleNew(_scale: pango.FontScale) *pango.Attribute {
    const cFn = @extern(*const fn (pango.FontScale) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_font_scale_new" });
    const ret = cFn(_scale);
    return ret;
}
/// func [attr_foreground_alpha_new](https://docs.gtk.org/Pango/func.attr_foreground_alpha_new.html)
pub fn attrForegroundAlphaNew(_alpha: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_foreground_alpha_new" });
    const ret = cFn(_alpha);
    return ret;
}
/// func [attr_foreground_new](https://docs.gtk.org/Pango/func.attr_foreground_new.html)
pub fn attrForegroundNew(_red: u16, _green: u16, _blue: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16, u16, u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_foreground_new" });
    const ret = cFn(_red, _green, _blue);
    return ret;
}
/// func [attr_gravity_hint_new](https://docs.gtk.org/Pango/func.attr_gravity_hint_new.html)
pub fn attrGravityHintNew(_hint: pango.GravityHint) *pango.Attribute {
    const cFn = @extern(*const fn (pango.GravityHint) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_gravity_hint_new" });
    const ret = cFn(_hint);
    return ret;
}
/// func [attr_gravity_new](https://docs.gtk.org/Pango/func.attr_gravity_new.html)
pub fn attrGravityNew(_gravity: pango.Gravity) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Gravity) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_gravity_new" });
    const ret = cFn(_gravity);
    return ret;
}
/// func [attr_insert_hyphens_new](https://docs.gtk.org/Pango/func.attr_insert_hyphens_new.html)
pub fn attrInsertHyphensNew(_insert_hyphens: bool) *pango.Attribute {
    const cFn = @extern(*const fn (bool) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_insert_hyphens_new" });
    const ret = cFn(_insert_hyphens);
    return ret;
}
/// func [attr_language_new](https://docs.gtk.org/Pango/func.attr_language_new.html)
pub fn attrLanguageNew(_language: *pango.Language) *pango.Attribute {
    const cFn = @extern(*const fn (*pango.Language) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_language_new" });
    const ret = cFn(_language);
    return ret;
}
/// func [attr_letter_spacing_new](https://docs.gtk.org/Pango/func.attr_letter_spacing_new.html)
pub fn attrLetterSpacingNew(_letter_spacing: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_letter_spacing_new" });
    const ret = cFn(_letter_spacing);
    return ret;
}
/// func [attr_line_height_new](https://docs.gtk.org/Pango/func.attr_line_height_new.html)
pub fn attrLineHeightNew(_factor: f64) *pango.Attribute {
    const cFn = @extern(*const fn (f64) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_line_height_new" });
    const ret = cFn(_factor);
    return ret;
}
/// func [attr_line_height_new_absolute](https://docs.gtk.org/Pango/func.attr_line_height_new_absolute.html)
pub fn attrLineHeightNewAbsolute(_height: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_line_height_new_absolute" });
    const ret = cFn(_height);
    return ret;
}
/// func [attr_list_from_string](https://docs.gtk.org/Pango/func.attr_list_from_string.html)
pub fn attrListFromString(_text: [*:0]const u8) ?*pango.AttrList {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*pango.AttrList, .{ .name = "pango_attr_list_from_string" });
    const ret = cFn(_text);
    return ret;
}
/// func [attr_overline_color_new](https://docs.gtk.org/Pango/func.attr_overline_color_new.html)
pub fn attrOverlineColorNew(_red: u16, _green: u16, _blue: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16, u16, u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_overline_color_new" });
    const ret = cFn(_red, _green, _blue);
    return ret;
}
/// func [attr_overline_new](https://docs.gtk.org/Pango/func.attr_overline_new.html)
pub fn attrOverlineNew(_overline: pango.Overline) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Overline) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_overline_new" });
    const ret = cFn(_overline);
    return ret;
}
/// func [attr_rise_new](https://docs.gtk.org/Pango/func.attr_rise_new.html)
pub fn attrRiseNew(_rise: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_rise_new" });
    const ret = cFn(_rise);
    return ret;
}
/// func [attr_scale_new](https://docs.gtk.org/Pango/func.attr_scale_new.html)
pub fn attrScaleNew(_scale_factor: f64) *pango.Attribute {
    const cFn = @extern(*const fn (f64) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_scale_new" });
    const ret = cFn(_scale_factor);
    return ret;
}
/// func [attr_sentence_new](https://docs.gtk.org/Pango/func.attr_sentence_new.html)
pub fn attrSentenceNew() *pango.Attribute {
    const cFn = @extern(*const fn () callconv(.c) *pango.Attribute, .{ .name = "pango_attr_sentence_new" });
    const ret = cFn();
    return ret;
}
/// func [attr_shape_new](https://docs.gtk.org/Pango/func.attr_shape_new.html)
pub fn attrShapeNew(_ink_rect: *pango.Rectangle, _logical_rect: *pango.Rectangle) *pango.Attribute {
    const cFn = @extern(*const fn (*pango.Rectangle, *pango.Rectangle) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_shape_new" });
    const ret = cFn(_ink_rect, _logical_rect);
    return ret;
}
/// func [attr_shape_new_with_data](https://docs.gtk.org/Pango/func.attr_shape_new_with_data.html)
pub fn attrShapeNewWithData(_ink_rect: *pango.Rectangle, _logical_rect: *pango.Rectangle, _data: ?*anyopaque, _copy_func: ?pango.AttrDataCopyFunc, _destroy_func: ?glib.DestroyNotify) *pango.Attribute {
    const cFn = @extern(*const fn (*pango.Rectangle, *pango.Rectangle, ?*anyopaque, ?pango.AttrDataCopyFunc, ?glib.DestroyNotify) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_shape_new_with_data" });
    const ret = cFn(_ink_rect, _logical_rect, @ptrCast(_data), _copy_func, _destroy_func);
    return ret;
}
/// func [attr_show_new](https://docs.gtk.org/Pango/func.attr_show_new.html)
pub fn attrShowNew(_flags: pango.ShowFlags) *pango.Attribute {
    const cFn = @extern(*const fn (pango.ShowFlags) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_show_new" });
    const ret = cFn(_flags);
    return ret;
}
/// func [attr_size_new](https://docs.gtk.org/Pango/func.attr_size_new.html)
pub fn attrSizeNew(_size: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_size_new" });
    const ret = cFn(_size);
    return ret;
}
/// func [attr_size_new_absolute](https://docs.gtk.org/Pango/func.attr_size_new_absolute.html)
pub fn attrSizeNewAbsolute(_size: i32) *pango.Attribute {
    const cFn = @extern(*const fn (i32) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_size_new_absolute" });
    const ret = cFn(_size);
    return ret;
}
/// func [attr_stretch_new](https://docs.gtk.org/Pango/func.attr_stretch_new.html)
pub fn attrStretchNew(_stretch: pango.Stretch) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Stretch) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_stretch_new" });
    const ret = cFn(_stretch);
    return ret;
}
/// func [attr_strikethrough_color_new](https://docs.gtk.org/Pango/func.attr_strikethrough_color_new.html)
pub fn attrStrikethroughColorNew(_red: u16, _green: u16, _blue: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16, u16, u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_strikethrough_color_new" });
    const ret = cFn(_red, _green, _blue);
    return ret;
}
/// func [attr_strikethrough_new](https://docs.gtk.org/Pango/func.attr_strikethrough_new.html)
pub fn attrStrikethroughNew(_strikethrough: bool) *pango.Attribute {
    const cFn = @extern(*const fn (bool) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_strikethrough_new" });
    const ret = cFn(_strikethrough);
    return ret;
}
/// func [attr_style_new](https://docs.gtk.org/Pango/func.attr_style_new.html)
pub fn attrStyleNew(_style: pango.Style) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Style) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_style_new" });
    const ret = cFn(_style);
    return ret;
}
/// func [attr_text_transform_new](https://docs.gtk.org/Pango/func.attr_text_transform_new.html)
pub fn attrTextTransformNew(_transform: pango.TextTransform) *pango.Attribute {
    const cFn = @extern(*const fn (pango.TextTransform) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_text_transform_new" });
    const ret = cFn(_transform);
    return ret;
}
/// func [attr_type_get_name](https://docs.gtk.org/Pango/func.attr_type_get_name.html)
pub fn attrTypeGetName(_type: pango.AttrType) ?[*:0]u8 {
    const cFn = @extern(*const fn (pango.AttrType) callconv(.c) ?[*:0]u8, .{ .name = "pango_attr_type_get_name" });
    const ret = cFn(_type);
    return ret;
}
/// func [attr_type_register](https://docs.gtk.org/Pango/func.attr_type_register.html)
pub fn attrTypeRegister(_name: [*:0]const u8) pango.AttrType {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) pango.AttrType, .{ .name = "pango_attr_type_register" });
    const ret = cFn(_name);
    return ret;
}
/// func [attr_underline_color_new](https://docs.gtk.org/Pango/func.attr_underline_color_new.html)
pub fn attrUnderlineColorNew(_red: u16, _green: u16, _blue: u16) *pango.Attribute {
    const cFn = @extern(*const fn (u16, u16, u16) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_underline_color_new" });
    const ret = cFn(_red, _green, _blue);
    return ret;
}
/// func [attr_underline_new](https://docs.gtk.org/Pango/func.attr_underline_new.html)
pub fn attrUnderlineNew(_underline: pango.Underline) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Underline) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_underline_new" });
    const ret = cFn(_underline);
    return ret;
}
/// func [attr_variant_new](https://docs.gtk.org/Pango/func.attr_variant_new.html)
pub fn attrVariantNew(_variant: pango.Variant) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Variant) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_variant_new" });
    const ret = cFn(_variant);
    return ret;
}
/// func [attr_weight_new](https://docs.gtk.org/Pango/func.attr_weight_new.html)
pub fn attrWeightNew(_weight: pango.Weight) *pango.Attribute {
    const cFn = @extern(*const fn (pango.Weight) callconv(.c) *pango.Attribute, .{ .name = "pango_attr_weight_new" });
    const ret = cFn(_weight);
    return ret;
}
/// func [attr_word_new](https://docs.gtk.org/Pango/func.attr_word_new.html)
pub fn attrWordNew() *pango.Attribute {
    const cFn = @extern(*const fn () callconv(.c) *pango.Attribute, .{ .name = "pango_attr_word_new" });
    const ret = cFn();
    return ret;
}
/// func [bidi_type_for_unichar](https://docs.gtk.org/Pango/func.bidi_type_for_unichar.html)
pub fn bidiTypeForUnichar(_ch: core.Unichar) pango.BidiType {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) pango.BidiType, .{ .name = "pango_bidi_type_for_unichar" });
    const ret = cFn(_ch);
    return ret;
}
/// Deprecated:
/// func [break](https://docs.gtk.org/Pango/func.break.html)
pub const @"break" = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn @"break"(_text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _attrss: []pango.LogAttr) void {
        const _attrs = _attrss.ptr;
        const _attrs_len: i32 = @intCast(_attrss.len);
        const cFn = @extern(*const fn ([*:0]const u8, i32, *pango.Analysis, [*]pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_break" });
        const ret = cFn(_text, _length, _analysis, _attrs, _attrs_len);
        return ret;
    }
}.@"break";
/// func [default_break](https://docs.gtk.org/Pango/func.default_break.html)
pub fn defaultBreak(_text: [*:0]const u8, _length: i32, _analysis: ?*pango.Analysis, _attrs: *pango.LogAttr, _attrs_len: i32) void {
    const cFn = @extern(*const fn ([*:0]const u8, i32, ?*pango.Analysis, *pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_default_break" });
    const ret = cFn(_text, _length, _analysis, _attrs, _attrs_len);
    return ret;
}
/// func [extents_to_pixels](https://docs.gtk.org/Pango/func.extents_to_pixels.html)
pub fn extentsToPixels(_inclusive: ?*pango.Rectangle, _nearest: ?*pango.Rectangle) void {
    const cFn = @extern(*const fn (?*pango.Rectangle, ?*pango.Rectangle) callconv(.c) void, .{ .name = "pango_extents_to_pixels" });
    const ret = cFn(_inclusive, _nearest);
    return ret;
}
/// func [find_base_dir](https://docs.gtk.org/Pango/func.find_base_dir.html)
pub fn findBaseDir(_text: [*:0]const u8, _length: i32) pango.Direction {
    const cFn = @extern(*const fn ([*:0]const u8, i32) callconv(.c) pango.Direction, .{ .name = "pango_find_base_dir" });
    const ret = cFn(_text, _length);
    return ret;
}
/// func [find_paragraph_boundary](https://docs.gtk.org/Pango/func.find_paragraph_boundary.html)
pub fn findParagraphBoundary(_text: [*:0]const u8, _length: i32) struct {
    ret: void,
    paragraph_delimiter_index: i32,
    next_paragraph_start: i32,
} {
    var paragraph_delimiter_index_out: i32 = undefined;
    const _paragraph_delimiter_index = &paragraph_delimiter_index_out;
    var next_paragraph_start_out: i32 = undefined;
    const _next_paragraph_start = &next_paragraph_start_out;
    const cFn = @extern(*const fn ([*:0]const u8, i32, *i32, *i32) callconv(.c) void, .{ .name = "pango_find_paragraph_boundary" });
    const ret = cFn(_text, _length, _paragraph_delimiter_index, _next_paragraph_start);
    return .{ .ret = ret, .paragraph_delimiter_index = paragraph_delimiter_index_out, .next_paragraph_start = next_paragraph_start_out };
}
/// func [font_description_from_string](https://docs.gtk.org/Pango/func.font_description_from_string.html)
pub fn fontDescriptionFromString(_str: [*:0]const u8) *pango.FontDescription {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *pango.FontDescription, .{ .name = "pango_font_description_from_string" });
    const ret = cFn(_str);
    return ret;
}
/// func [get_log_attrs](https://docs.gtk.org/Pango/func.get_log_attrs.html)
pub fn getLogAttrs(_text: [*:0]const u8, _length: i32, _level: i32, _language: *pango.Language, _attrss: []pango.LogAttr) void {
    const _attrs = _attrss.ptr;
    const _attrs_len: i32 = @intCast(_attrss.len);
    const cFn = @extern(*const fn ([*:0]const u8, i32, i32, *pango.Language, [*]pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_get_log_attrs" });
    const ret = cFn(_text, _length, _level, _language, _attrs, _attrs_len);
    return ret;
}
/// Deprecated:
/// func [get_mirror_char](https://docs.gtk.org/Pango/func.get_mirror_char.html)
pub const getMirrorChar = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn getMirrorChar(_ch: core.Unichar, _mirrored_ch: *core.Unichar) bool {
        const cFn = @extern(*const fn (core.Unichar, *core.Unichar) callconv(.c) bool, .{ .name = "pango_get_mirror_char" });
        const ret = cFn(_ch, _mirrored_ch);
        return ret;
    }
}.getMirrorChar;
/// func [gravity_get_for_matrix](https://docs.gtk.org/Pango/func.gravity_get_for_matrix.html)
pub fn gravityGetForMatrix(_matrix: ?*pango.Matrix) pango.Gravity {
    const cFn = @extern(*const fn (?*pango.Matrix) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_matrix" });
    const ret = cFn(_matrix);
    return ret;
}
/// func [gravity_get_for_script](https://docs.gtk.org/Pango/func.gravity_get_for_script.html)
pub fn gravityGetForScript(_script: pango.Script, _base_gravity: pango.Gravity, _hint: pango.GravityHint) pango.Gravity {
    const cFn = @extern(*const fn (pango.Script, pango.Gravity, pango.GravityHint) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_script" });
    const ret = cFn(_script, _base_gravity, _hint);
    return ret;
}
/// func [gravity_get_for_script_and_width](https://docs.gtk.org/Pango/func.gravity_get_for_script_and_width.html)
pub fn gravityGetForScriptAndWidth(_script: pango.Script, _wide: bool, _base_gravity: pango.Gravity, _hint: pango.GravityHint) pango.Gravity {
    const cFn = @extern(*const fn (pango.Script, bool, pango.Gravity, pango.GravityHint) callconv(.c) pango.Gravity, .{ .name = "pango_gravity_get_for_script_and_width" });
    const ret = cFn(_script, _wide, _base_gravity, _hint);
    return ret;
}
/// func [gravity_to_rotation](https://docs.gtk.org/Pango/func.gravity_to_rotation.html)
pub fn gravityToRotation(_gravity: pango.Gravity) f64 {
    const cFn = @extern(*const fn (pango.Gravity) callconv(.c) f64, .{ .name = "pango_gravity_to_rotation" });
    const ret = cFn(_gravity);
    return ret;
}
/// func [is_zero_width](https://docs.gtk.org/Pango/func.is_zero_width.html)
pub fn isZeroWidth(_ch: core.Unichar) bool {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) bool, .{ .name = "pango_is_zero_width" });
    const ret = cFn(_ch);
    return ret;
}
/// func [itemize](https://docs.gtk.org/Pango/func.itemize.html)
pub fn itemize(_context: *pango.Context, _text: [*:0]const u8, _start_index: i32, _length: i32, _attrs: *pango.AttrList, _cached_iter: ?*pango.AttrIterator) ?*core.List {
    const cFn = @extern(*const fn (*pango.Context, [*:0]const u8, i32, i32, *pango.AttrList, ?*pango.AttrIterator) callconv(.c) ?*core.List, .{ .name = "pango_itemize" });
    const ret = cFn(_context, _text, _start_index, _length, _attrs, _cached_iter);
    return ret;
}
/// func [itemize_with_base_dir](https://docs.gtk.org/Pango/func.itemize_with_base_dir.html)
pub fn itemizeWithBaseDir(_context: *pango.Context, _base_dir: pango.Direction, _text: [*:0]const u8, _start_index: i32, _length: i32, _attrs: *pango.AttrList, _cached_iter: ?*pango.AttrIterator) ?*core.List {
    const cFn = @extern(*const fn (*pango.Context, pango.Direction, [*:0]const u8, i32, i32, *pango.AttrList, ?*pango.AttrIterator) callconv(.c) ?*core.List, .{ .name = "pango_itemize_with_base_dir" });
    const ret = cFn(_context, _base_dir, _text, _start_index, _length, _attrs, _cached_iter);
    return ret;
}
/// func [language_from_string](https://docs.gtk.org/Pango/func.language_from_string.html)
pub fn languageFromString(_language: ?[*:0]const u8) ?*pango.Language {
    const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) ?*pango.Language, .{ .name = "pango_language_from_string" });
    const ret = cFn(_language);
    return ret;
}
/// func [language_get_default](https://docs.gtk.org/Pango/func.language_get_default.html)
pub fn languageGetDefault() *pango.Language {
    const cFn = @extern(*const fn () callconv(.c) *pango.Language, .{ .name = "pango_language_get_default" });
    const ret = cFn();
    return ret;
}
/// func [language_get_preferred](https://docs.gtk.org/Pango/func.language_get_preferred.html)
pub fn languageGetPreferred() ?[*:null]?*pango.Language {
    const cFn = @extern(*const fn () callconv(.c) ?[*:null]?*pango.Language, .{ .name = "pango_language_get_preferred" });
    const ret = cFn();
    return ret;
}
/// func [layout_deserialize_error_quark](https://docs.gtk.org/Pango/func.layout_deserialize_error_quark.html)
pub fn layoutDeserializeErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "pango_layout_deserialize_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [log2vis_get_embedding_levels](https://docs.gtk.org/Pango/func.log2vis_get_embedding_levels.html)
pub fn log2visGetEmbeddingLevels(_text: [*:0]const u8, _length: i32, _pbase_dir: *pango.Direction) *u8 {
    const cFn = @extern(*const fn ([*:0]const u8, i32, *pango.Direction) callconv(.c) *u8, .{ .name = "pango_log2vis_get_embedding_levels" });
    const ret = cFn(_text, _length, _pbase_dir);
    return ret;
}
/// func [markup_parser_finish](https://docs.gtk.org/Pango/func.markup_parser_finish.html)
pub fn markupParserFinish(_context: *glib.MarkupParseContext, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    attr_list: *pango.AttrList,
    text: [*:0]u8,
    accel_char: core.Unichar,
} {
    var attr_list_out: *pango.AttrList = undefined;
    const _attr_list = &attr_list_out;
    var text_out: [*:0]u8 = undefined;
    const _text = &text_out;
    var accel_char_out: core.Unichar = undefined;
    const _accel_char = &accel_char_out;
    const cFn = @extern(*const fn (*glib.MarkupParseContext, ?**pango.AttrList, ?*[*:0]u8, ?*core.Unichar, *?*core.Error) callconv(.c) bool, .{ .name = "pango_markup_parser_finish" });
    const ret = cFn(_context, _attr_list, _text, _accel_char, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .attr_list = attr_list_out, .text = text_out, .accel_char = accel_char_out };
}
/// func [markup_parser_new](https://docs.gtk.org/Pango/func.markup_parser_new.html)
pub fn markupParserNew(_accel_marker: core.Unichar) *glib.MarkupParseContext {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) *glib.MarkupParseContext, .{ .name = "pango_markup_parser_new" });
    const ret = cFn(_accel_marker);
    return ret;
}
/// Deprecated:
/// func [parse_enum](https://docs.gtk.org/Pango/func.parse_enum.html)
pub const parseEnum = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn parseEnum(_type: core.Type, _str: ?[*:0]const u8, _warn: bool) struct {
        ret: bool,
        value: i32,
        possible_values: [*:0]u8,
    } {
        var value_out: i32 = undefined;
        const _value = &value_out;
        var possible_values_out: [*:0]u8 = undefined;
        const _possible_values = &possible_values_out;
        const cFn = @extern(*const fn (core.Type, ?[*:0]const u8, ?*i32, bool, ?*[*:0]u8) callconv(.c) bool, .{ .name = "pango_parse_enum" });
        const ret = cFn(_type, _str, _value, _warn, _possible_values);
        return .{ .ret = ret, .value = value_out, .possible_values = possible_values_out };
    }
}.parseEnum;
/// func [parse_markup](https://docs.gtk.org/Pango/func.parse_markup.html)
pub fn parseMarkup(_markup_text: [*:0]const u8, _length: i32, _accel_marker: core.Unichar, _error: *?*core.Error) error{GError}!struct {
    ret: bool,
    attr_list: *pango.AttrList,
    text: [*:0]u8,
    accel_char: core.Unichar,
} {
    var attr_list_out: *pango.AttrList = undefined;
    const _attr_list = &attr_list_out;
    var text_out: [*:0]u8 = undefined;
    const _text = &text_out;
    var accel_char_out: core.Unichar = undefined;
    const _accel_char = &accel_char_out;
    const cFn = @extern(*const fn ([*:0]const u8, i32, core.Unichar, ?**pango.AttrList, ?*[*:0]u8, ?*core.Unichar, *?*core.Error) callconv(.c) bool, .{ .name = "pango_parse_markup" });
    const ret = cFn(_markup_text, _length, _accel_marker, _attr_list, _text, _accel_char, _error);
    if (_error.* != null) return error.GError;
    return .{ .ret = ret, .attr_list = attr_list_out, .text = text_out, .accel_char = accel_char_out };
}
/// func [parse_stretch](https://docs.gtk.org/Pango/func.parse_stretch.html)
pub fn parseStretch(_str: [*:0]const u8, _warn: bool) struct {
    ret: bool,
    stretch: pango.Stretch,
} {
    var stretch_out: pango.Stretch = undefined;
    const _stretch = &stretch_out;
    const cFn = @extern(*const fn ([*:0]const u8, *pango.Stretch, bool) callconv(.c) bool, .{ .name = "pango_parse_stretch" });
    const ret = cFn(_str, _stretch, _warn);
    return .{ .ret = ret, .stretch = stretch_out };
}
/// func [parse_style](https://docs.gtk.org/Pango/func.parse_style.html)
pub fn parseStyle(_str: [*:0]const u8, _warn: bool) struct {
    ret: bool,
    style: pango.Style,
} {
    var style_out: pango.Style = undefined;
    const _style = &style_out;
    const cFn = @extern(*const fn ([*:0]const u8, *pango.Style, bool) callconv(.c) bool, .{ .name = "pango_parse_style" });
    const ret = cFn(_str, _style, _warn);
    return .{ .ret = ret, .style = style_out };
}
/// func [parse_variant](https://docs.gtk.org/Pango/func.parse_variant.html)
pub fn parseVariant(_str: [*:0]const u8, _warn: bool) struct {
    ret: bool,
    variant: pango.Variant,
} {
    var variant_out: pango.Variant = undefined;
    const _variant = &variant_out;
    const cFn = @extern(*const fn ([*:0]const u8, *pango.Variant, bool) callconv(.c) bool, .{ .name = "pango_parse_variant" });
    const ret = cFn(_str, _variant, _warn);
    return .{ .ret = ret, .variant = variant_out };
}
/// func [parse_weight](https://docs.gtk.org/Pango/func.parse_weight.html)
pub fn parseWeight(_str: [*:0]const u8, _warn: bool) struct {
    ret: bool,
    weight: pango.Weight,
} {
    var weight_out: pango.Weight = undefined;
    const _weight = &weight_out;
    const cFn = @extern(*const fn ([*:0]const u8, *pango.Weight, bool) callconv(.c) bool, .{ .name = "pango_parse_weight" });
    const ret = cFn(_str, _weight, _warn);
    return .{ .ret = ret, .weight = weight_out };
}
/// func [quantize_line_geometry](https://docs.gtk.org/Pango/func.quantize_line_geometry.html)
pub fn quantizeLineGeometry(_thickness: *i32, _position: *i32) void {
    const cFn = @extern(*const fn (*i32, *i32) callconv(.c) void, .{ .name = "pango_quantize_line_geometry" });
    const ret = cFn(_thickness, _position);
    return ret;
}
/// Deprecated:
/// func [read_line](https://docs.gtk.org/Pango/func.read_line.html)
pub const readLine = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn readLine(_stream: ?*anyopaque, _str: *glib.String) i32 {
        const cFn = @extern(*const fn (?*anyopaque, *glib.String) callconv(.c) i32, .{ .name = "pango_read_line" });
        const ret = cFn(@ptrCast(_stream), _str);
        return ret;
    }
}.readLine;
/// func [reorder_items](https://docs.gtk.org/Pango/func.reorder_items.html)
pub fn reorderItems(_items: *core.List) ?*core.List {
    const cFn = @extern(*const fn (*core.List) callconv(.c) ?*core.List, .{ .name = "pango_reorder_items" });
    const ret = cFn(_items);
    return ret;
}
/// Deprecated:
/// func [scan_int](https://docs.gtk.org/Pango/func.scan_int.html)
pub const scanInt = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn scanInt(_pos: *[*:0]u8) struct {
        ret: bool,
        out: i32,
    } {
        var out_out: i32 = undefined;
        const _out = &out_out;
        const cFn = @extern(*const fn (*[*:0]u8, *i32) callconv(.c) bool, .{ .name = "pango_scan_int" });
        const ret = cFn(_pos, _out);
        return .{ .ret = ret, .out = out_out };
    }
}.scanInt;
/// Deprecated:
/// func [scan_string](https://docs.gtk.org/Pango/func.scan_string.html)
pub const scanString = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn scanString(_pos: *[*:0]u8, _out: *glib.String) bool {
        const cFn = @extern(*const fn (*[*:0]u8, *glib.String) callconv(.c) bool, .{ .name = "pango_scan_string" });
        const ret = cFn(_pos, _out);
        return ret;
    }
}.scanString;
/// Deprecated:
/// func [scan_word](https://docs.gtk.org/Pango/func.scan_word.html)
pub const scanWord = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn scanWord(_pos: *[*:0]u8, _out: *glib.String) bool {
        const cFn = @extern(*const fn (*[*:0]u8, *glib.String) callconv(.c) bool, .{ .name = "pango_scan_word" });
        const ret = cFn(_pos, _out);
        return ret;
    }
}.scanWord;
/// Deprecated:
/// func [script_for_unichar](https://docs.gtk.org/Pango/func.script_for_unichar.html)
pub const scriptForUnichar = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn scriptForUnichar(_ch: core.Unichar) pango.Script {
        const cFn = @extern(*const fn (core.Unichar) callconv(.c) pango.Script, .{ .name = "pango_script_for_unichar" });
        const ret = cFn(_ch);
        return ret;
    }
}.scriptForUnichar;
/// func [script_get_sample_language](https://docs.gtk.org/Pango/func.script_get_sample_language.html)
pub fn scriptGetSampleLanguage(_script: pango.Script) ?*pango.Language {
    const cFn = @extern(*const fn (pango.Script) callconv(.c) ?*pango.Language, .{ .name = "pango_script_get_sample_language" });
    const ret = cFn(_script);
    return ret;
}
/// func [shape](https://docs.gtk.org/Pango/func.shape.html)
pub fn shape(_text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _glyphs: *pango.GlyphString) void {
    const cFn = @extern(*const fn ([*:0]const u8, i32, *pango.Analysis, *pango.GlyphString) callconv(.c) void, .{ .name = "pango_shape" });
    const ret = cFn(_text, _length, _analysis, _glyphs);
    return ret;
}
/// func [shape_full](https://docs.gtk.org/Pango/func.shape_full.html)
pub fn shapeFull(_item_text: [*:0]const u8, _item_length: i32, _paragraph_text: ?[*:0]const u8, _paragraph_length: i32, _analysis: *pango.Analysis, _glyphs: *pango.GlyphString) void {
    const cFn = @extern(*const fn ([*:0]const u8, i32, ?[*:0]const u8, i32, *pango.Analysis, *pango.GlyphString) callconv(.c) void, .{ .name = "pango_shape_full" });
    const ret = cFn(_item_text, _item_length, _paragraph_text, _paragraph_length, _analysis, _glyphs);
    return ret;
}
/// func [shape_item](https://docs.gtk.org/Pango/func.shape_item.html)
pub fn shapeItem(_item: *pango.Item, _paragraph_text: ?[*:0]const u8, _paragraph_length: i32, _log_attrs: ?*pango.LogAttr, _glyphs: *pango.GlyphString, _flags: pango.ShapeFlags) void {
    const cFn = @extern(*const fn (*pango.Item, ?[*:0]const u8, i32, ?*pango.LogAttr, *pango.GlyphString, pango.ShapeFlags) callconv(.c) void, .{ .name = "pango_shape_item" });
    const ret = cFn(_item, _paragraph_text, _paragraph_length, _log_attrs, _glyphs, _flags);
    return ret;
}
/// func [shape_with_flags](https://docs.gtk.org/Pango/func.shape_with_flags.html)
pub fn shapeWithFlags(_item_text: [*:0]const u8, _item_length: i32, _paragraph_text: ?[*:0]const u8, _paragraph_length: i32, _analysis: *pango.Analysis, _glyphs: *pango.GlyphString, _flags: pango.ShapeFlags) void {
    const cFn = @extern(*const fn ([*:0]const u8, i32, ?[*:0]const u8, i32, *pango.Analysis, *pango.GlyphString, pango.ShapeFlags) callconv(.c) void, .{ .name = "pango_shape_with_flags" });
    const ret = cFn(_item_text, _item_length, _paragraph_text, _paragraph_length, _analysis, _glyphs, _flags);
    return ret;
}
/// Deprecated:
/// func [skip_space](https://docs.gtk.org/Pango/func.skip_space.html)
pub const skipSpace = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn skipSpace(_pos: *[*:0]u8) bool {
        const cFn = @extern(*const fn (*[*:0]u8) callconv(.c) bool, .{ .name = "pango_skip_space" });
        const ret = cFn(_pos);
        return ret;
    }
}.skipSpace;
/// Deprecated:
/// func [split_file_list](https://docs.gtk.org/Pango/func.split_file_list.html)
pub const splitFileList = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn splitFileList(_str: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "pango_split_file_list" });
        const ret = cFn(_str);
        return ret;
    }
}.splitFileList;
/// func [tab_array_from_string](https://docs.gtk.org/Pango/func.tab_array_from_string.html)
pub fn tabArrayFromString(_text: [*:0]const u8) ?*pango.TabArray {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*pango.TabArray, .{ .name = "pango_tab_array_from_string" });
    const ret = cFn(_text);
    return ret;
}
/// func [tailor_break](https://docs.gtk.org/Pango/func.tailor_break.html)
pub fn tailorBreak(_text: [*:0]const u8, _length: i32, _analysis: *pango.Analysis, _offset: i32, _attrss: []pango.LogAttr) void {
    const _attrs = _attrss.ptr;
    const _attrs_len: i32 = @intCast(_attrss.len);
    const cFn = @extern(*const fn ([*:0]const u8, i32, *pango.Analysis, i32, [*]pango.LogAttr, i32) callconv(.c) void, .{ .name = "pango_tailor_break" });
    const ret = cFn(_text, _length, _analysis, _offset, _attrs, _attrs_len);
    return ret;
}
/// Deprecated:
/// func [trim_string](https://docs.gtk.org/Pango/func.trim_string.html)
pub const trimString = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn trimString(_str: [*:0]const u8) [*:0]u8 {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) [*:0]u8, .{ .name = "pango_trim_string" });
        const ret = cFn(_str);
        return ret;
    }
}.trimString;
/// func [unichar_direction](https://docs.gtk.org/Pango/func.unichar_direction.html)
pub fn unicharDirection(_ch: core.Unichar) pango.Direction {
    const cFn = @extern(*const fn (core.Unichar) callconv(.c) pango.Direction, .{ .name = "pango_unichar_direction" });
    const ret = cFn(_ch);
    return ret;
}
/// func [units_from_double](https://docs.gtk.org/Pango/func.units_from_double.html)
pub fn unitsFromDouble(_d: f64) i32 {
    const cFn = @extern(*const fn (f64) callconv(.c) i32, .{ .name = "pango_units_from_double" });
    const ret = cFn(_d);
    return ret;
}
/// func [units_to_double](https://docs.gtk.org/Pango/func.units_to_double.html)
pub fn unitsToDouble(_i: i32) f64 {
    const cFn = @extern(*const fn (i32) callconv(.c) f64, .{ .name = "pango_units_to_double" });
    const ret = cFn(_i);
    return ret;
}
/// func [version](https://docs.gtk.org/Pango/func.version.html)
pub fn version() i32 {
    const cFn = @extern(*const fn () callconv(.c) i32, .{ .name = "pango_version" });
    const ret = cFn();
    return ret;
}
/// func [version_check](https://docs.gtk.org/Pango/func.version_check.html)
pub fn versionCheck(_required_major: i32, _required_minor: i32, _required_micro: i32) ?[*:0]u8 {
    const cFn = @extern(*const fn (i32, i32, i32) callconv(.c) ?[*:0]u8, .{ .name = "pango_version_check" });
    const ret = cFn(_required_major, _required_minor, _required_micro);
    return ret;
}
/// func [version_string](https://docs.gtk.org/Pango/func.version_string.html)
pub fn versionString() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "pango_version_string" });
    const ret = cFn();
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
