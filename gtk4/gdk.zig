// This file is auto-generated by zig-gir-ffi
const gdk = @This();
pub const pango_cairo = @import("pango_cairo");
pub const freetype2 = @import("freetype2");
pub const glib = @import("glib");
pub const gdk_pixbuf = @import("gdk_pixbuf");
pub const harf_buzz = @import("harf_buzz");
pub const gmodule = @import("gmodule");
pub const cairo = @import("cairo");
pub const gobject = @import("gobject");
pub const pango = @import("pango");
pub const gio = @import("gio");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// const [ACTION_ALL](https://docs.gtk.org/gdk4/const.ACTION_ALL.html)
pub const ACTION_ALL = 7;
/// Flags [AnchorHints](https://docs.gtk.org/gdk4/flags.AnchorHints.html)
pub const AnchorHints = packed struct(u32) {
    flip_x: bool = false,
    flip_y: bool = false,
    slide_x: bool = false,
    slide_y: bool = false,
    resize_x: bool = false,
    resize_y: bool = false,
    _: u26 = 0,
    pub const flip: @This() = @bitCast(@as(u32, 3));
    pub const slide: @This() = @bitCast(@as(u32, 12));
    pub const resize: @This() = @bitCast(@as(u32, 48));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_anchor_hints_get_type" });
        return cFn();
    }
};
/// Class [AppLaunchContext](https://docs.gtk.org/gdk4/class.AppLaunchContext.html)
/// - property [display](https://docs.gtk.org/gdk4/property.AppLaunchContext.display.html): (r-) `gdk.Display`
pub const AppLaunchContext = opaque {
    pub const Parent = gio.AppLaunchContext;
    /// method [get_display](https://docs.gtk.org/gdk4/method.AppLaunchContext.get_display.html)
    pub fn getDisplay(self: *AppLaunchContext) *gdk.Display {
        const cFn = @extern(*const fn (*AppLaunchContext) callconv(.c) *gdk.Display, .{ .name = "gdk_app_launch_context_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_desktop](https://docs.gtk.org/gdk4/method.AppLaunchContext.set_desktop.html)
    pub fn setDesktop(self: *AppLaunchContext, _desktop: i32) void {
        const cFn = @extern(*const fn (*AppLaunchContext, i32) callconv(.c) void, .{ .name = "gdk_app_launch_context_set_desktop" });
        const ret = cFn(self, _desktop);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gdk4/method.AppLaunchContext.set_icon.html)
    pub fn setIcon(self: *AppLaunchContext, _icon: ?*gio.Icon) void {
        const cFn = @extern(*const fn (*AppLaunchContext, ?*gio.Icon) callconv(.c) void, .{ .name = "gdk_app_launch_context_set_icon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_icon_name](https://docs.gtk.org/gdk4/method.AppLaunchContext.set_icon_name.html)
    pub fn setIconName(self: *AppLaunchContext, _icon_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AppLaunchContext, ?[*:0]const u8) callconv(.c) void, .{ .name = "gdk_app_launch_context_set_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_timestamp](https://docs.gtk.org/gdk4/method.AppLaunchContext.set_timestamp.html)
    pub fn setTimestamp(self: *AppLaunchContext, _timestamp: u32) void {
        const cFn = @extern(*const fn (*AppLaunchContext, u32) callconv(.c) void, .{ .name = "gdk_app_launch_context_set_timestamp" });
        const ret = cFn(self, _timestamp);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_app_launch_context_get_type" });
        return cFn();
    }
};
/// Flags [AxisFlags](https://docs.gtk.org/gdk4/flags.AxisFlags.html)
pub const AxisFlags = packed struct(u32) {
    _0: u1 = 0,
    x: bool = false,
    y: bool = false,
    delta_x: bool = false,
    delta_y: bool = false,
    pressure: bool = false,
    xtilt: bool = false,
    ytilt: bool = false,
    wheel: bool = false,
    distance: bool = false,
    rotation: bool = false,
    slider: bool = false,
    _: u20 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_axis_flags_get_type" });
        return cFn();
    }
};
/// Enum [AxisUse](https://docs.gtk.org/gdk4/enum.AxisUse.html)
pub const AxisUse = enum(u32) {
    ignore = 0,
    x = 1,
    y = 2,
    delta_x = 3,
    delta_y = 4,
    pressure = 5,
    xtilt = 6,
    ytilt = 7,
    wheel = 8,
    distance = 9,
    rotation = 10,
    slider = 11,
    last = 12,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_axis_use_get_type" });
        return cFn();
    }
};
/// const [BUTTON_MIDDLE](https://docs.gtk.org/gdk4/const.BUTTON_MIDDLE.html)
pub const BUTTON_MIDDLE = 2;
/// const [BUTTON_PRIMARY](https://docs.gtk.org/gdk4/const.BUTTON_PRIMARY.html)
pub const BUTTON_PRIMARY = 1;
/// const [BUTTON_SECONDARY](https://docs.gtk.org/gdk4/const.BUTTON_SECONDARY.html)
pub const BUTTON_SECONDARY = 3;
/// Class [ButtonEvent](https://docs.gtk.org/gdk4/class.ButtonEvent.html)
pub const ButtonEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_button](https://docs.gtk.org/gdk4/method.ButtonEvent.get_button.html)
    pub fn getButton(self: *ButtonEvent) u32 {
        const cFn = @extern(*const fn (*ButtonEvent) callconv(.c) u32, .{ .name = "gdk_button_event_get_button" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_button_event_get_type" });
        return cFn();
    }
};
/// const [CURRENT_TIME](https://docs.gtk.org/gdk4/const.CURRENT_TIME.html)
pub const CURRENT_TIME = 0;
/// Class [CairoContext](https://docs.gtk.org/gdk4/class.CairoContext.html)
pub const CairoContext = opaque {
    pub const Parent = gdk.DrawContext;
    /// method [cairo_create](https://docs.gtk.org/gdk4/method.CairoContext.cairo_create.html)
    pub fn cairoCreate(self: *CairoContext) ?*cairo.Context {
        const cFn = @extern(*const fn (*CairoContext) callconv(.c) ?*cairo.Context, .{ .name = "gdk_cairo_context_cairo_create" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_cairo_context_get_type" });
        return cFn();
    }
};
/// Class [Clipboard](https://docs.gtk.org/gdk4/class.Clipboard.html)
/// - property [content](https://docs.gtk.org/gdk4/property.Clipboard.content.html): (r-) `gdk.ContentProvider`
/// - property [display](https://docs.gtk.org/gdk4/property.Clipboard.display.html): (r-) `gdk.Display`
/// - property [formats](https://docs.gtk.org/gdk4/property.Clipboard.formats.html): (r-) `gdk.ContentFormats`
/// - property [local](https://docs.gtk.org/gdk4/property.Clipboard.local.html): (r-) `bool`
pub const Clipboard = opaque {
    pub const Parent = gobject.Object;
    /// method [get_content](https://docs.gtk.org/gdk4/method.Clipboard.get_content.html)
    pub fn getContent(self: *Clipboard) ?*gdk.ContentProvider {
        const cFn = @extern(*const fn (*Clipboard) callconv(.c) ?*gdk.ContentProvider, .{ .name = "gdk_clipboard_get_content" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Clipboard.get_display.html)
    pub fn getDisplay(self: *Clipboard) *gdk.Display {
        const cFn = @extern(*const fn (*Clipboard) callconv(.c) *gdk.Display, .{ .name = "gdk_clipboard_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_formats](https://docs.gtk.org/gdk4/method.Clipboard.get_formats.html)
    pub fn getFormats(self: *Clipboard) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*Clipboard) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_clipboard_get_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_local](https://docs.gtk.org/gdk4/method.Clipboard.is_local.html)
    pub fn isLocal(self: *Clipboard) bool {
        const cFn = @extern(*const fn (*Clipboard) callconv(.c) bool, .{ .name = "gdk_clipboard_is_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_async](https://docs.gtk.org/gdk4/method.Clipboard.read_async.html)
    pub fn readAsync(self: *Clipboard, _mime_types: [*:null]?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Clipboard, [*:null]?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_clipboard_read_async" });
        const ret = cFn(self, _mime_types, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_finish](https://docs.gtk.org/gdk4/method.Clipboard.read_finish.html)
    pub fn readFinish(self: *Clipboard, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: ?*gio.InputStream,
        out_mime_type: [*:0]u8,
    } {
        var out_mime_type_out: [*:0]u8 = undefined;
        const _out_mime_type = &out_mime_type_out;
        const cFn = @extern(*const fn (*Clipboard, *gio.AsyncResult, ?*[*:0]u8, *?*core.Error) callconv(.c) ?*gio.InputStream, .{ .name = "gdk_clipboard_read_finish" });
        const ret = cFn(self, _result, _out_mime_type, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_mime_type = out_mime_type_out };
    }
    /// method [read_text_async](https://docs.gtk.org/gdk4/method.Clipboard.read_text_async.html)
    pub fn readTextAsync(self: *Clipboard, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Clipboard, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_clipboard_read_text_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_text_finish](https://docs.gtk.org/gdk4/method.Clipboard.read_text_finish.html)
    pub fn readTextFinish(self: *Clipboard, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?[*:0]u8 {
        const cFn = @extern(*const fn (*Clipboard, *gio.AsyncResult, *?*core.Error) callconv(.c) ?[*:0]u8, .{ .name = "gdk_clipboard_read_text_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_texture_async](https://docs.gtk.org/gdk4/method.Clipboard.read_texture_async.html)
    pub fn readTextureAsync(self: *Clipboard, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Clipboard, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_clipboard_read_texture_async" });
        const ret = cFn(self, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_texture_finish](https://docs.gtk.org/gdk4/method.Clipboard.read_texture_finish.html)
    pub fn readTextureFinish(self: *Clipboard, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gdk.Texture {
        const cFn = @extern(*const fn (*Clipboard, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gdk.Texture, .{ .name = "gdk_clipboard_read_texture_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [read_value_async](https://docs.gtk.org/gdk4/method.Clipboard.read_value_async.html)
    pub fn readValueAsync(self: *Clipboard, _type: core.Type, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Clipboard, core.Type, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_clipboard_read_value_async" });
        const ret = cFn(self, _type, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_value_finish](https://docs.gtk.org/gdk4/method.Clipboard.read_value_finish.html)
    pub fn readValueFinish(self: *Clipboard, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gobject.Value {
        const cFn = @extern(*const fn (*Clipboard, *gio.AsyncResult, *?*core.Error) callconv(.c) *gobject.Value, .{ .name = "gdk_clipboard_read_value_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_content](https://docs.gtk.org/gdk4/method.Clipboard.set_content.html)
    pub fn setContent(self: *Clipboard, _provider: ?*gdk.ContentProvider) bool {
        const cFn = @extern(*const fn (*Clipboard, ?*gdk.ContentProvider) callconv(.c) bool, .{ .name = "gdk_clipboard_set_content" });
        const ret = cFn(self, _provider);
        return ret;
    }
    /// method [set](https://docs.gtk.org/gdk4/method.Clipboard.set.html)
    pub fn set(self: *Clipboard, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (*Clipboard, *gobject.Value) callconv(.c) void, .{ .name = "gdk_clipboard_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [store_async](https://docs.gtk.org/gdk4/method.Clipboard.store_async.html)
    pub fn storeAsync(self: *Clipboard, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Clipboard, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_clipboard_store_async" });
        const ret = cFn(self, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [store_finish](https://docs.gtk.org/gdk4/method.Clipboard.store_finish.html)
    pub fn storeFinish(self: *Clipboard, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Clipboard, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_clipboard_store_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gdk4/signal.Clipboard.changed.html)
    pub fn connectChanged(self: *Clipboard, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Clipboard });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_clipboard_get_type" });
        return cFn();
    }
};
/// callback [ContentDeserializeFunc](https://docs.gtk.org/gdk4/callback.ContentDeserializeFunc.html)
pub const ContentDeserializeFunc = *const fn (_deserializer: *gdk.ContentDeserializer) callconv(.c) void;
/// Class [ContentDeserializer](https://docs.gtk.org/gdk4/class.ContentDeserializer.html)
pub const ContentDeserializer = opaque {
    pub const Interfaces = [_]type{gio.AsyncResult};
    pub const Parent = gobject.Object;
    /// method [get_cancellable](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_cancellable.html)
    pub fn getCancellable(self: *ContentDeserializer) ?*gio.Cancellable {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) ?*gio.Cancellable, .{ .name = "gdk_content_deserializer_get_cancellable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gtype](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_gtype.html)
    pub fn getGtype(self: *ContentDeserializer) core.Type {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) core.Type, .{ .name = "gdk_content_deserializer_get_gtype" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_stream](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_input_stream.html)
    pub fn getInputStream(self: *ContentDeserializer) *gio.InputStream {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) *gio.InputStream, .{ .name = "gdk_content_deserializer_get_input_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mime_type](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_mime_type.html)
    pub fn getMimeType(self: *ContentDeserializer) [*:0]u8 {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) [*:0]u8, .{ .name = "gdk_content_deserializer_get_mime_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_priority.html)
    pub fn getPriority(self: *ContentDeserializer) i32 {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) i32, .{ .name = "gdk_content_deserializer_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_task_data](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_task_data.html)
    pub fn getTaskData(self: *ContentDeserializer) ?*anyopaque {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) ?*anyopaque, .{ .name = "gdk_content_deserializer_get_task_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_user_data](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_user_data.html)
    pub fn getUserData(self: *ContentDeserializer) ?*anyopaque {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) ?*anyopaque, .{ .name = "gdk_content_deserializer_get_user_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gdk4/method.ContentDeserializer.get_value.html)
    pub fn getValue(self: *ContentDeserializer) *gobject.Value {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) *gobject.Value, .{ .name = "gdk_content_deserializer_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [return_error](https://docs.gtk.org/gdk4/method.ContentDeserializer.return_error.html)
    pub fn returnError(self: *ContentDeserializer, _error: *core.Error) void {
        const cFn = @extern(*const fn (*ContentDeserializer, *core.Error) callconv(.c) void, .{ .name = "gdk_content_deserializer_return_error" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [return_success](https://docs.gtk.org/gdk4/method.ContentDeserializer.return_success.html)
    pub fn returnSuccess(self: *ContentDeserializer) void {
        const cFn = @extern(*const fn (*ContentDeserializer) callconv(.c) void, .{ .name = "gdk_content_deserializer_return_success" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_task_data](https://docs.gtk.org/gdk4/method.ContentDeserializer.set_task_data.html)
    pub fn setTaskData(self: *ContentDeserializer, _data: ?*anyopaque, _notify: glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*ContentDeserializer, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gdk_content_deserializer_set_task_data" });
        const ret = cFn(self, @ptrCast(_data), _notify);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_content_deserializer_get_type" });
        return cFn();
    }
};
/// Struct [ContentFormats](https://docs.gtk.org/gdk4/struct.ContentFormats.html)
pub const ContentFormats = opaque {
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.ContentFormats.new.html)
    pub fn new(_mime_typess: [][*:0]const u8) *ContentFormats {
        const _mime_types = _mime_typess.ptr;
        const _n_mime_types: u32 = @intCast(_mime_typess.len);
        const cFn = @extern(*const fn (?[*][*:0]const u8, u32) callconv(.c) *ContentFormats, .{ .name = "gdk_content_formats_new" });
        const ret = cFn(_mime_types, _n_mime_types);
        return ret;
    }
    /// ctor [new_for_gtype](https://docs.gtk.org/gdk4/ctor.ContentFormats.new_for_gtype.html)
    pub fn newForGtype(_type: core.Type) *ContentFormats {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *ContentFormats, .{ .name = "gdk_content_formats_new_for_gtype" });
        const ret = cFn(_type);
        return ret;
    }
    /// method [contain_gtype](https://docs.gtk.org/gdk4/method.ContentFormats.contain_gtype.html)
    pub fn containGtype(self: *ContentFormats, _type: core.Type) bool {
        const cFn = @extern(*const fn (*ContentFormats, core.Type) callconv(.c) bool, .{ .name = "gdk_content_formats_contain_gtype" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [contain_mime_type](https://docs.gtk.org/gdk4/method.ContentFormats.contain_mime_type.html)
    pub fn containMimeType(self: *ContentFormats, _mime_type: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*ContentFormats, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_content_formats_contain_mime_type" });
        const ret = cFn(self, _mime_type);
        return ret;
    }
    /// method [get_gtypes](https://docs.gtk.org/gdk4/method.ContentFormats.get_gtypes.html)
    pub fn getGtypes(self: *ContentFormats) struct {
        ret: ?[*]core.Type,
        n_gtypes: u64,
    } {
        var n_gtypes_out: u64 = undefined;
        const _n_gtypes = &n_gtypes_out;
        const cFn = @extern(*const fn (*ContentFormats, ?*u64) callconv(.c) ?[*]core.Type, .{ .name = "gdk_content_formats_get_gtypes" });
        const ret = cFn(self, _n_gtypes);
        return .{ .ret = ret, .n_gtypes = n_gtypes_out };
    }
    /// method [get_mime_types](https://docs.gtk.org/gdk4/method.ContentFormats.get_mime_types.html)
    pub fn getMimeTypes(self: *ContentFormats) struct {
        ret: ?[*:null]?[*:0]const u8,
        n_mime_types: u64,
    } {
        var n_mime_types_out: u64 = undefined;
        const _n_mime_types = &n_mime_types_out;
        const cFn = @extern(*const fn (*ContentFormats, ?*u64) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gdk_content_formats_get_mime_types" });
        const ret = cFn(self, _n_mime_types);
        return .{ .ret = ret, .n_mime_types = n_mime_types_out };
    }
    /// method [match](https://docs.gtk.org/gdk4/method.ContentFormats.match.html)
    pub fn match(self: *ContentFormats, _second: *gdk.ContentFormats) bool {
        const cFn = @extern(*const fn (*ContentFormats, *gdk.ContentFormats) callconv(.c) bool, .{ .name = "gdk_content_formats_match" });
        const ret = cFn(self, _second);
        return ret;
    }
    /// method [match_gtype](https://docs.gtk.org/gdk4/method.ContentFormats.match_gtype.html)
    pub fn matchGtype(self: *ContentFormats, _second: *gdk.ContentFormats) core.Type {
        const cFn = @extern(*const fn (*ContentFormats, *gdk.ContentFormats) callconv(.c) core.Type, .{ .name = "gdk_content_formats_match_gtype" });
        const ret = cFn(self, _second);
        return ret;
    }
    /// method [match_mime_type](https://docs.gtk.org/gdk4/method.ContentFormats.match_mime_type.html)
    pub fn matchMimeType(self: *ContentFormats, _second: *gdk.ContentFormats) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ContentFormats, *gdk.ContentFormats) callconv(.c) ?[*:0]u8, .{ .name = "gdk_content_formats_match_mime_type" });
        const ret = cFn(self, _second);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gdk4/method.ContentFormats.print.html)
    pub fn print(self: *ContentFormats, _string: *glib.String) void {
        const cFn = @extern(*const fn (*ContentFormats, *glib.String) callconv(.c) void, .{ .name = "gdk_content_formats_print" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.ContentFormats.ref.html)
    pub fn ref(self: *ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gdk4/method.ContentFormats.to_string.html)
    pub fn toString(self: *ContentFormats) [*:0]u8 {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) [*:0]u8, .{ .name = "gdk_content_formats_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [union](https://docs.gtk.org/gdk4/method.ContentFormats.union.html)
    pub fn @"union"(self: *ContentFormats, _second: *gdk.ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats, *gdk.ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_union" });
        const ret = cFn(self, _second);
        return ret;
    }
    /// method [union_deserialize_gtypes](https://docs.gtk.org/gdk4/method.ContentFormats.union_deserialize_gtypes.html)
    pub fn unionDeserializeGtypes(self: *ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_union_deserialize_gtypes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [union_deserialize_mime_types](https://docs.gtk.org/gdk4/method.ContentFormats.union_deserialize_mime_types.html)
    pub fn unionDeserializeMimeTypes(self: *ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_union_deserialize_mime_types" });
        const ret = cFn(self);
        return ret;
    }
    /// method [union_serialize_gtypes](https://docs.gtk.org/gdk4/method.ContentFormats.union_serialize_gtypes.html)
    pub fn unionSerializeGtypes(self: *ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_union_serialize_gtypes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [union_serialize_mime_types](https://docs.gtk.org/gdk4/method.ContentFormats.union_serialize_mime_types.html)
    pub fn unionSerializeMimeTypes(self: *ContentFormats) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_union_serialize_mime_types" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.ContentFormats.unref.html)
    pub fn unref(self: *ContentFormats) void {
        const cFn = @extern(*const fn (*ContentFormats) callconv(.c) void, .{ .name = "gdk_content_formats_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [parse](https://docs.gtk.org/gdk4/type_func.ContentFormats.parse.html)
    pub fn parse(_string: [*:0]const u8) ?*gdk.ContentFormats {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gdk.ContentFormats, .{ .name = "gdk_content_formats_parse" });
        const ret = cFn(_string);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_content_formats_get_type" });
        return cFn();
    }
};
/// Struct [ContentFormatsBuilder](https://docs.gtk.org/gdk4/struct.ContentFormatsBuilder.html)
pub const ContentFormatsBuilder = opaque {
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.ContentFormatsBuilder.new.html)
    pub fn new() *ContentFormatsBuilder {
        const cFn = @extern(*const fn () callconv(.c) *ContentFormatsBuilder, .{ .name = "gdk_content_formats_builder_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_formats](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.add_formats.html)
    pub fn addFormats(self: *ContentFormatsBuilder, _formats: *gdk.ContentFormats) void {
        const cFn = @extern(*const fn (*ContentFormatsBuilder, *gdk.ContentFormats) callconv(.c) void, .{ .name = "gdk_content_formats_builder_add_formats" });
        const ret = cFn(self, _formats);
        return ret;
    }
    /// method [add_gtype](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.add_gtype.html)
    pub fn addGtype(self: *ContentFormatsBuilder, _type: core.Type) void {
        const cFn = @extern(*const fn (*ContentFormatsBuilder, core.Type) callconv(.c) void, .{ .name = "gdk_content_formats_builder_add_gtype" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// method [add_mime_type](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.add_mime_type.html)
    pub fn addMimeType(self: *ContentFormatsBuilder, _mime_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ContentFormatsBuilder, [*:0]const u8) callconv(.c) void, .{ .name = "gdk_content_formats_builder_add_mime_type" });
        const ret = cFn(self, _mime_type);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.ref.html)
    pub fn ref(self: *ContentFormatsBuilder) *gdk.ContentFormatsBuilder {
        const cFn = @extern(*const fn (*ContentFormatsBuilder) callconv(.c) *gdk.ContentFormatsBuilder, .{ .name = "gdk_content_formats_builder_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_formats](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.to_formats.html)
    pub fn toFormats(self: *ContentFormatsBuilder) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentFormatsBuilder) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_formats_builder_to_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.ContentFormatsBuilder.unref.html)
    pub fn unref(self: *ContentFormatsBuilder) void {
        const cFn = @extern(*const fn (*ContentFormatsBuilder) callconv(.c) void, .{ .name = "gdk_content_formats_builder_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_content_formats_builder_get_type" });
        return cFn();
    }
};
/// Class [ContentProvider](https://docs.gtk.org/gdk4/class.ContentProvider.html)
/// - property [formats](https://docs.gtk.org/gdk4/property.ContentProvider.formats.html): (r-) `gdk.ContentFormats`
/// - property [storable-formats](https://docs.gtk.org/gdk4/property.ContentProvider.storable-formats.html): (r-) `gdk.ContentFormats`
pub const ContentProvider = extern struct {
    parent: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gdk.ContentProviderClass;
    /// ctor [new_for_bytes](https://docs.gtk.org/gdk4/ctor.ContentProvider.new_for_bytes.html)
    pub fn newForBytes(_mime_type: [*:0]const u8, _bytes: *glib.Bytes) *ContentProvider {
        const cFn = @extern(*const fn ([*:0]const u8, *glib.Bytes) callconv(.c) *ContentProvider, .{ .name = "gdk_content_provider_new_for_bytes" });
        const ret = cFn(_mime_type, _bytes);
        return ret;
    }
    /// ctor [new_for_value](https://docs.gtk.org/gdk4/ctor.ContentProvider.new_for_value.html)
    pub fn newForValue(_value: *gobject.Value) *ContentProvider {
        const cFn = @extern(*const fn (*gobject.Value) callconv(.c) *ContentProvider, .{ .name = "gdk_content_provider_new_for_value" });
        const ret = cFn(_value);
        return ret;
    }
    /// ctor [new_union](https://docs.gtk.org/gdk4/ctor.ContentProvider.new_union.html)
    pub fn newUnion(_providerss: []*gdk.ContentProvider) *ContentProvider {
        const _providers = _providerss.ptr;
        const _n_providers: u64 = @intCast(_providerss.len);
        const cFn = @extern(*const fn (?[*]*gdk.ContentProvider, u64) callconv(.c) *ContentProvider, .{ .name = "gdk_content_provider_new_union" });
        const ret = cFn(_providers, _n_providers);
        return ret;
    }
    /// method [content_changed](https://docs.gtk.org/gdk4/method.ContentProvider.content_changed.html)
    pub fn contentChanged(self: *ContentProvider) void {
        const cFn = @extern(*const fn (*ContentProvider) callconv(.c) void, .{ .name = "gdk_content_provider_content_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gdk4/method.ContentProvider.get_value.html)
    pub fn getValue(self: *ContentProvider, _value: *gobject.Value, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*ContentProvider, *gobject.Value, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_content_provider_get_value" });
        const ret = cFn(self, _value, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [ref_formats](https://docs.gtk.org/gdk4/method.ContentProvider.ref_formats.html)
    pub fn refFormats(self: *ContentProvider) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentProvider) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_provider_ref_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref_storable_formats](https://docs.gtk.org/gdk4/method.ContentProvider.ref_storable_formats.html)
    pub fn refStorableFormats(self: *ContentProvider) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*ContentProvider) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_content_provider_ref_storable_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [write_mime_type_async](https://docs.gtk.org/gdk4/method.ContentProvider.write_mime_type_async.html)
    pub fn writeMimeTypeAsync(self: *ContentProvider, _mime_type: [*:0]const u8, _stream: *gio.OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*ContentProvider, [*:0]const u8, *gio.OutputStream, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_content_provider_write_mime_type_async" });
        const ret = cFn(self, _mime_type, _stream, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [write_mime_type_finish](https://docs.gtk.org/gdk4/method.ContentProvider.write_mime_type_finish.html)
    pub fn writeMimeTypeFinish(self: *ContentProvider, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*ContentProvider, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_content_provider_write_mime_type_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [attach_clipboard](https://docs.gtk.org/gdk4/vfunc.ContentProvider.attach_clipboard.html)
    pub fn attachClipboardV(self: *ContentProvider, _clipboard: *gdk.Clipboard) void {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.attach_clipboard.?;
        const ret = vFn(self, _clipboard);
        return ret;
    }
    /// vfunc [content_changed](https://docs.gtk.org/gdk4/vfunc.ContentProvider.content_changed.html)
    pub fn contentChangedV(self: *ContentProvider) void {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.content_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [detach_clipboard](https://docs.gtk.org/gdk4/vfunc.ContentProvider.detach_clipboard.html)
    pub fn detachClipboardV(self: *ContentProvider, _clipboard: *gdk.Clipboard) void {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.detach_clipboard.?;
        const ret = vFn(self, _clipboard);
        return ret;
    }
    /// vfunc [get_value](https://docs.gtk.org/gdk4/vfunc.ContentProvider.get_value.html)
    pub fn getValueV(self: *ContentProvider, _value: *gobject.Value, _error: *?*core.Error) bool {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_value.?;
        const ret = vFn(self, _value, _error);
        return ret;
    }
    /// vfunc [ref_formats](https://docs.gtk.org/gdk4/vfunc.ContentProvider.ref_formats.html)
    pub fn refFormatsV(self: *ContentProvider) *gdk.ContentFormats {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ref_formats.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [ref_storable_formats](https://docs.gtk.org/gdk4/vfunc.ContentProvider.ref_storable_formats.html)
    pub fn refStorableFormatsV(self: *ContentProvider) *gdk.ContentFormats {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ref_storable_formats.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [write_mime_type_async](https://docs.gtk.org/gdk4/vfunc.ContentProvider.write_mime_type_async.html)
    pub fn writeMimeTypeAsyncV(self: *ContentProvider, _mime_type: [*:0]const u8, _stream: *gio.OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) void {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_mime_type_async.?;
        const ret = vFn(self, _mime_type, _stream, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// vfunc [write_mime_type_finish](https://docs.gtk.org/gdk4/vfunc.ContentProvider.write_mime_type_finish.html)
    pub fn writeMimeTypeFinishV(self: *ContentProvider, _result: *gio.AsyncResult, _error: *?*core.Error) bool {
        const class: *ContentProviderClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.write_mime_type_finish.?;
        const ret = vFn(self, _result, _error);
        return ret;
    }
    /// signal [content-changed](https://docs.gtk.org/gdk4/signal.ContentProvider.content-changed.html)
    pub fn connectContentChanged(self: *ContentProvider, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("content-changed", handler, args, flags, &.{ void, *ContentProvider });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_content_provider_get_type" });
        return cFn();
    }
};
pub const ContentProviderClass = extern struct {
    parent_class: gobject.ObjectClass,
    content_changed: ?*const fn (_provider: *gdk.ContentProvider) callconv(.c) void,
    attach_clipboard: ?*const fn (_provider: *gdk.ContentProvider, _clipboard: *gdk.Clipboard) callconv(.c) void,
    detach_clipboard: ?*const fn (_provider: *gdk.ContentProvider, _clipboard: *gdk.Clipboard) callconv(.c) void,
    ref_formats: ?*const fn (_provider: *gdk.ContentProvider) callconv(.c) *gdk.ContentFormats,
    ref_storable_formats: ?*const fn (_provider: *gdk.ContentProvider) callconv(.c) *gdk.ContentFormats,
    write_mime_type_async: ?*const fn (_provider: *gdk.ContentProvider, _mime_type: [*:0]const u8, _stream: *gio.OutputStream, _io_priority: i32, _cancellable: ?*gio.Cancellable, _callback: ?gio.AsyncReadyCallback, _user_data: ?*anyopaque) callconv(.c) void,
    write_mime_type_finish: ?*const fn (_provider: *gdk.ContentProvider, _result: *gio.AsyncResult, _error: *?*core.Error) callconv(.c) bool,
    get_value: ?*const fn (_provider: *gdk.ContentProvider, _value: *gobject.Value, _error: *?*core.Error) callconv(.c) bool,
    padding: [8]?*anyopaque,
};
/// callback [ContentSerializeFunc](https://docs.gtk.org/gdk4/callback.ContentSerializeFunc.html)
pub const ContentSerializeFunc = *const fn (_serializer: *gdk.ContentSerializer) callconv(.c) void;
/// Class [ContentSerializer](https://docs.gtk.org/gdk4/class.ContentSerializer.html)
pub const ContentSerializer = opaque {
    pub const Interfaces = [_]type{gio.AsyncResult};
    pub const Parent = gobject.Object;
    /// method [get_cancellable](https://docs.gtk.org/gdk4/method.ContentSerializer.get_cancellable.html)
    pub fn getCancellable(self: *ContentSerializer) ?*gio.Cancellable {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) ?*gio.Cancellable, .{ .name = "gdk_content_serializer_get_cancellable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gtype](https://docs.gtk.org/gdk4/method.ContentSerializer.get_gtype.html)
    pub fn getGtype(self: *ContentSerializer) core.Type {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) core.Type, .{ .name = "gdk_content_serializer_get_gtype" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mime_type](https://docs.gtk.org/gdk4/method.ContentSerializer.get_mime_type.html)
    pub fn getMimeType(self: *ContentSerializer) [*:0]u8 {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) [*:0]u8, .{ .name = "gdk_content_serializer_get_mime_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_output_stream](https://docs.gtk.org/gdk4/method.ContentSerializer.get_output_stream.html)
    pub fn getOutputStream(self: *ContentSerializer) *gio.OutputStream {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) *gio.OutputStream, .{ .name = "gdk_content_serializer_get_output_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gdk4/method.ContentSerializer.get_priority.html)
    pub fn getPriority(self: *ContentSerializer) i32 {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) i32, .{ .name = "gdk_content_serializer_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_task_data](https://docs.gtk.org/gdk4/method.ContentSerializer.get_task_data.html)
    pub fn getTaskData(self: *ContentSerializer) ?*anyopaque {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) ?*anyopaque, .{ .name = "gdk_content_serializer_get_task_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_user_data](https://docs.gtk.org/gdk4/method.ContentSerializer.get_user_data.html)
    pub fn getUserData(self: *ContentSerializer) ?*anyopaque {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) ?*anyopaque, .{ .name = "gdk_content_serializer_get_user_data" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gdk4/method.ContentSerializer.get_value.html)
    pub fn getValue(self: *ContentSerializer) *gobject.Value {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) *gobject.Value, .{ .name = "gdk_content_serializer_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [return_error](https://docs.gtk.org/gdk4/method.ContentSerializer.return_error.html)
    pub fn returnError(self: *ContentSerializer, _error: *core.Error) void {
        const cFn = @extern(*const fn (*ContentSerializer, *core.Error) callconv(.c) void, .{ .name = "gdk_content_serializer_return_error" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [return_success](https://docs.gtk.org/gdk4/method.ContentSerializer.return_success.html)
    pub fn returnSuccess(self: *ContentSerializer) void {
        const cFn = @extern(*const fn (*ContentSerializer) callconv(.c) void, .{ .name = "gdk_content_serializer_return_success" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_task_data](https://docs.gtk.org/gdk4/method.ContentSerializer.set_task_data.html)
    pub fn setTaskData(self: *ContentSerializer, _data: ?*anyopaque, _notify: glib.DestroyNotify) void {
        const cFn = @extern(*const fn (*ContentSerializer, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gdk_content_serializer_set_task_data" });
        const ret = cFn(self, @ptrCast(_data), _notify);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_content_serializer_get_type" });
        return cFn();
    }
};
/// Class [CrossingEvent](https://docs.gtk.org/gdk4/class.CrossingEvent.html)
pub const CrossingEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_detail](https://docs.gtk.org/gdk4/method.CrossingEvent.get_detail.html)
    pub fn getDetail(self: *CrossingEvent) gdk.NotifyType {
        const cFn = @extern(*const fn (*CrossingEvent) callconv(.c) gdk.NotifyType, .{ .name = "gdk_crossing_event_get_detail" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus](https://docs.gtk.org/gdk4/method.CrossingEvent.get_focus.html)
    pub fn getFocus(self: *CrossingEvent) bool {
        const cFn = @extern(*const fn (*CrossingEvent) callconv(.c) bool, .{ .name = "gdk_crossing_event_get_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mode](https://docs.gtk.org/gdk4/method.CrossingEvent.get_mode.html)
    pub fn getMode(self: *CrossingEvent) gdk.CrossingMode {
        const cFn = @extern(*const fn (*CrossingEvent) callconv(.c) gdk.CrossingMode, .{ .name = "gdk_crossing_event_get_mode" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_crossing_event_get_type" });
        return cFn();
    }
};
/// Enum [CrossingMode](https://docs.gtk.org/gdk4/enum.CrossingMode.html)
pub const CrossingMode = enum(u32) {
    normal = 0,
    grab = 1,
    ungrab = 2,
    gtk_grab = 3,
    gtk_ungrab = 4,
    state_changed = 5,
    touch_begin = 6,
    touch_end = 7,
    device_switch = 8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_crossing_mode_get_type" });
        return cFn();
    }
};
/// Class [Cursor](https://docs.gtk.org/gdk4/class.Cursor.html)
/// - property [fallback](https://docs.gtk.org/gdk4/property.Cursor.fallback.html): (r-) `gdk.Cursor`
/// - property [hotspot-x](https://docs.gtk.org/gdk4/property.Cursor.hotspot-x.html): (r-) `i32`
/// - property [hotspot-y](https://docs.gtk.org/gdk4/property.Cursor.hotspot-y.html): (r-) `i32`
/// - property [name](https://docs.gtk.org/gdk4/property.Cursor.name.html): (r-) `[*:0]const u8`
/// - property [texture](https://docs.gtk.org/gdk4/property.Cursor.texture.html): (r-) `gdk.Texture`
pub const Cursor = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new_from_name](https://docs.gtk.org/gdk4/ctor.Cursor.new_from_name.html)
    pub fn newFromName(_name: [*:0]const u8, _fallback: ?*gdk.Cursor) ?*Cursor {
        const cFn = @extern(*const fn ([*:0]const u8, ?*gdk.Cursor) callconv(.c) ?*Cursor, .{ .name = "gdk_cursor_new_from_name" });
        const ret = cFn(_name, _fallback);
        return ret;
    }
    /// ctor [new_from_texture](https://docs.gtk.org/gdk4/ctor.Cursor.new_from_texture.html)
    pub fn newFromTexture(_texture: *gdk.Texture, _hotspot_x: i32, _hotspot_y: i32, _fallback: ?*gdk.Cursor) *Cursor {
        const cFn = @extern(*const fn (*gdk.Texture, i32, i32, ?*gdk.Cursor) callconv(.c) *Cursor, .{ .name = "gdk_cursor_new_from_texture" });
        const ret = cFn(_texture, _hotspot_x, _hotspot_y, _fallback);
        return ret;
    }
    /// method [get_fallback](https://docs.gtk.org/gdk4/method.Cursor.get_fallback.html)
    pub fn getFallback(self: *Cursor) ?*gdk.Cursor {
        const cFn = @extern(*const fn (*Cursor) callconv(.c) ?*gdk.Cursor, .{ .name = "gdk_cursor_get_fallback" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hotspot_x](https://docs.gtk.org/gdk4/method.Cursor.get_hotspot_x.html)
    pub fn getHotspotX(self: *Cursor) i32 {
        const cFn = @extern(*const fn (*Cursor) callconv(.c) i32, .{ .name = "gdk_cursor_get_hotspot_x" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hotspot_y](https://docs.gtk.org/gdk4/method.Cursor.get_hotspot_y.html)
    pub fn getHotspotY(self: *Cursor) i32 {
        const cFn = @extern(*const fn (*Cursor) callconv(.c) i32, .{ .name = "gdk_cursor_get_hotspot_y" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gdk4/method.Cursor.get_name.html)
    pub fn getName(self: *Cursor) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Cursor) callconv(.c) ?[*:0]u8, .{ .name = "gdk_cursor_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_texture](https://docs.gtk.org/gdk4/method.Cursor.get_texture.html)
    pub fn getTexture(self: *Cursor) ?*gdk.Texture {
        const cFn = @extern(*const fn (*Cursor) callconv(.c) ?*gdk.Texture, .{ .name = "gdk_cursor_get_texture" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_cursor_get_type" });
        return cFn();
    }
};
/// Class [DNDEvent](https://docs.gtk.org/gdk4/class.DNDEvent.html)
pub const DNDEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_drop](https://docs.gtk.org/gdk4/method.DNDEvent.get_drop.html)
    pub fn getDrop(self: *DNDEvent) ?*gdk.Drop {
        const cFn = @extern(*const fn (*DNDEvent) callconv(.c) ?*gdk.Drop, .{ .name = "gdk_dnd_event_get_drop" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_dnd_event_get_type" });
        return cFn();
    }
};
/// Class [DeleteEvent](https://docs.gtk.org/gdk4/class.DeleteEvent.html)
pub const DeleteEvent = opaque {
    pub const Parent = gdk.Event;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_delete_event_get_type" });
        return cFn();
    }
};
/// Class [Device](https://docs.gtk.org/gdk4/class.Device.html)
/// - property [caps-lock-state](https://docs.gtk.org/gdk4/property.Device.caps-lock-state.html): (r-) `bool`
/// - property [direction](https://docs.gtk.org/gdk4/property.Device.direction.html): (r-) `pango.Direction`
/// - property [display](https://docs.gtk.org/gdk4/property.Device.display.html): (r-) `gdk.Display`
/// - property [has-bidi-layouts](https://docs.gtk.org/gdk4/property.Device.has-bidi-layouts.html): (r-) `bool`
/// - property [has-cursor](https://docs.gtk.org/gdk4/property.Device.has-cursor.html): (r-) `bool`
/// - property [modifier-state](https://docs.gtk.org/gdk4/property.Device.modifier-state.html): (r-) `gdk.ModifierType`
/// - property [n-axes](https://docs.gtk.org/gdk4/property.Device.n-axes.html): (r-) `u32`
/// - property [name](https://docs.gtk.org/gdk4/property.Device.name.html): (r-) `[*:0]const u8`
/// - property [num-lock-state](https://docs.gtk.org/gdk4/property.Device.num-lock-state.html): (r-) `bool`
/// - property [num-touches](https://docs.gtk.org/gdk4/property.Device.num-touches.html): (r-) `u32`
/// - property [product-id](https://docs.gtk.org/gdk4/property.Device.product-id.html): (r-) `[*:0]const u8`
/// - property [scroll-lock-state](https://docs.gtk.org/gdk4/property.Device.scroll-lock-state.html): (r-) `bool`
/// - property [seat](https://docs.gtk.org/gdk4/property.Device.seat.html): (rw) `gdk.Seat`
/// - property [source](https://docs.gtk.org/gdk4/property.Device.source.html): (r-) `gdk.InputSource`
/// - property [tool](https://docs.gtk.org/gdk4/property.Device.tool.html): (r-) `gdk.DeviceTool`
/// - property [vendor-id](https://docs.gtk.org/gdk4/property.Device.vendor-id.html): (r-) `[*:0]const u8`
pub const Device = opaque {
    pub const Parent = gobject.Object;
    /// method [get_caps_lock_state](https://docs.gtk.org/gdk4/method.Device.get_caps_lock_state.html)
    pub fn getCapsLockState(self: *Device) bool {
        const cFn = @extern(*const fn (*Device) callconv(.c) bool, .{ .name = "gdk_device_get_caps_lock_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device_tool](https://docs.gtk.org/gdk4/method.Device.get_device_tool.html)
    pub fn getDeviceTool(self: *Device) ?*gdk.DeviceTool {
        const cFn = @extern(*const fn (*Device) callconv(.c) ?*gdk.DeviceTool, .{ .name = "gdk_device_get_device_tool" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_direction](https://docs.gtk.org/gdk4/method.Device.get_direction.html)
    pub fn getDirection(self: *Device) pango.Direction {
        const cFn = @extern(*const fn (*Device) callconv(.c) pango.Direction, .{ .name = "gdk_device_get_direction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Device.get_display.html)
    pub fn getDisplay(self: *Device) *gdk.Display {
        const cFn = @extern(*const fn (*Device) callconv(.c) *gdk.Display, .{ .name = "gdk_device_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_cursor](https://docs.gtk.org/gdk4/method.Device.get_has_cursor.html)
    pub fn getHasCursor(self: *Device) bool {
        const cFn = @extern(*const fn (*Device) callconv(.c) bool, .{ .name = "gdk_device_get_has_cursor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modifier_state](https://docs.gtk.org/gdk4/method.Device.get_modifier_state.html)
    pub fn getModifierState(self: *Device) gdk.ModifierType {
        const cFn = @extern(*const fn (*Device) callconv(.c) gdk.ModifierType, .{ .name = "gdk_device_get_modifier_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gdk4/method.Device.get_name.html)
    pub fn getName(self: *Device) [*:0]u8 {
        const cFn = @extern(*const fn (*Device) callconv(.c) [*:0]u8, .{ .name = "gdk_device_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_num_lock_state](https://docs.gtk.org/gdk4/method.Device.get_num_lock_state.html)
    pub fn getNumLockState(self: *Device) bool {
        const cFn = @extern(*const fn (*Device) callconv(.c) bool, .{ .name = "gdk_device_get_num_lock_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_num_touches](https://docs.gtk.org/gdk4/method.Device.get_num_touches.html)
    pub fn getNumTouches(self: *Device) u32 {
        const cFn = @extern(*const fn (*Device) callconv(.c) u32, .{ .name = "gdk_device_get_num_touches" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_product_id](https://docs.gtk.org/gdk4/method.Device.get_product_id.html)
    pub fn getProductId(self: *Device) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Device) callconv(.c) ?[*:0]u8, .{ .name = "gdk_device_get_product_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scroll_lock_state](https://docs.gtk.org/gdk4/method.Device.get_scroll_lock_state.html)
    pub fn getScrollLockState(self: *Device) bool {
        const cFn = @extern(*const fn (*Device) callconv(.c) bool, .{ .name = "gdk_device_get_scroll_lock_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_seat](https://docs.gtk.org/gdk4/method.Device.get_seat.html)
    pub fn getSeat(self: *Device) *gdk.Seat {
        const cFn = @extern(*const fn (*Device) callconv(.c) *gdk.Seat, .{ .name = "gdk_device_get_seat" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_source](https://docs.gtk.org/gdk4/method.Device.get_source.html)
    pub fn getSource(self: *Device) gdk.InputSource {
        const cFn = @extern(*const fn (*Device) callconv(.c) gdk.InputSource, .{ .name = "gdk_device_get_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface_at_position](https://docs.gtk.org/gdk4/method.Device.get_surface_at_position.html)
    pub fn getSurfaceAtPosition(self: *Device) struct {
        ret: ?*gdk.Surface,
        win_x: f64,
        win_y: f64,
    } {
        var win_x_out: f64 = undefined;
        const _win_x = &win_x_out;
        var win_y_out: f64 = undefined;
        const _win_y = &win_y_out;
        const cFn = @extern(*const fn (*Device, ?*f64, ?*f64) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_device_get_surface_at_position" });
        const ret = cFn(self, _win_x, _win_y);
        return .{ .ret = ret, .win_x = win_x_out, .win_y = win_y_out };
    }
    /// method [get_timestamp](https://docs.gtk.org/gdk4/method.Device.get_timestamp.html)
    pub fn getTimestamp(self: *Device) u32 {
        const cFn = @extern(*const fn (*Device) callconv(.c) u32, .{ .name = "gdk_device_get_timestamp" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vendor_id](https://docs.gtk.org/gdk4/method.Device.get_vendor_id.html)
    pub fn getVendorId(self: *Device) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Device) callconv(.c) ?[*:0]u8, .{ .name = "gdk_device_get_vendor_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_bidi_layouts](https://docs.gtk.org/gdk4/method.Device.has_bidi_layouts.html)
    pub fn hasBidiLayouts(self: *Device) bool {
        const cFn = @extern(*const fn (*Device) callconv(.c) bool, .{ .name = "gdk_device_has_bidi_layouts" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gdk4/signal.Device.changed.html)
    pub fn connectChanged(self: *Device, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Device });
    }
    /// signal [tool-changed](https://docs.gtk.org/gdk4/signal.Device.tool-changed.html)
    pub fn connectToolChanged(self: *Device, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tool-changed", handler, args, flags, &.{ void, *Device, *gdk.DeviceTool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_device_get_type" });
        return cFn();
    }
};
/// Iface [DevicePad](https://docs.gtk.org/gdk4/iface.DevicePad.html)
pub const DevicePad = opaque {
    pub const Prerequisites = [_]type{gdk.Device};
    /// method [get_feature_group](https://docs.gtk.org/gdk4/method.DevicePad.get_feature_group.html)
    pub fn getFeatureGroup(self: *DevicePad, _feature: gdk.DevicePadFeature, _feature_idx: i32) i32 {
        const cFn = @extern(*const fn (*DevicePad, gdk.DevicePadFeature, i32) callconv(.c) i32, .{ .name = "gdk_device_pad_get_feature_group" });
        const ret = cFn(self, _feature, _feature_idx);
        return ret;
    }
    /// method [get_group_n_modes](https://docs.gtk.org/gdk4/method.DevicePad.get_group_n_modes.html)
    pub fn getGroupNModes(self: *DevicePad, _group_idx: i32) i32 {
        const cFn = @extern(*const fn (*DevicePad, i32) callconv(.c) i32, .{ .name = "gdk_device_pad_get_group_n_modes" });
        const ret = cFn(self, _group_idx);
        return ret;
    }
    /// method [get_n_features](https://docs.gtk.org/gdk4/method.DevicePad.get_n_features.html)
    pub fn getNFeatures(self: *DevicePad, _feature: gdk.DevicePadFeature) i32 {
        const cFn = @extern(*const fn (*DevicePad, gdk.DevicePadFeature) callconv(.c) i32, .{ .name = "gdk_device_pad_get_n_features" });
        const ret = cFn(self, _feature);
        return ret;
    }
    /// method [get_n_groups](https://docs.gtk.org/gdk4/method.DevicePad.get_n_groups.html)
    pub fn getNGroups(self: *DevicePad) i32 {
        const cFn = @extern(*const fn (*DevicePad) callconv(.c) i32, .{ .name = "gdk_device_pad_get_n_groups" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_device_pad_get_type" });
        return cFn();
    }
};
/// Enum [DevicePadFeature](https://docs.gtk.org/gdk4/enum.DevicePadFeature.html)
pub const DevicePadFeature = enum(u32) {
    button = 0,
    ring = 1,
    strip = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_device_pad_feature_get_type" });
        return cFn();
    }
};
pub const DevicePadInterface = opaque {};
/// Class [DeviceTool](https://docs.gtk.org/gdk4/class.DeviceTool.html)
/// - property [axes](https://docs.gtk.org/gdk4/property.DeviceTool.axes.html): (r-) `gdk.AxisFlags`
/// - property [hardware-id](https://docs.gtk.org/gdk4/property.DeviceTool.hardware-id.html): (r-) `u64`
/// - property [serial](https://docs.gtk.org/gdk4/property.DeviceTool.serial.html): (r-) `u64`
/// - property [tool-type](https://docs.gtk.org/gdk4/property.DeviceTool.tool-type.html): (r-) `gdk.DeviceToolType`
pub const DeviceTool = opaque {
    pub const Parent = gobject.Object;
    /// method [get_axes](https://docs.gtk.org/gdk4/method.DeviceTool.get_axes.html)
    pub fn getAxes(self: *DeviceTool) gdk.AxisFlags {
        const cFn = @extern(*const fn (*DeviceTool) callconv(.c) gdk.AxisFlags, .{ .name = "gdk_device_tool_get_axes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hardware_id](https://docs.gtk.org/gdk4/method.DeviceTool.get_hardware_id.html)
    pub fn getHardwareId(self: *DeviceTool) u64 {
        const cFn = @extern(*const fn (*DeviceTool) callconv(.c) u64, .{ .name = "gdk_device_tool_get_hardware_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_serial](https://docs.gtk.org/gdk4/method.DeviceTool.get_serial.html)
    pub fn getSerial(self: *DeviceTool) u64 {
        const cFn = @extern(*const fn (*DeviceTool) callconv(.c) u64, .{ .name = "gdk_device_tool_get_serial" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tool_type](https://docs.gtk.org/gdk4/method.DeviceTool.get_tool_type.html)
    pub fn getToolType(self: *DeviceTool) gdk.DeviceToolType {
        const cFn = @extern(*const fn (*DeviceTool) callconv(.c) gdk.DeviceToolType, .{ .name = "gdk_device_tool_get_tool_type" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_device_tool_get_type" });
        return cFn();
    }
};
/// Enum [DeviceToolType](https://docs.gtk.org/gdk4/enum.DeviceToolType.html)
pub const DeviceToolType = enum(u32) {
    unknown = 0,
    pen = 1,
    eraser = 2,
    brush = 3,
    pencil = 4,
    airbrush = 5,
    mouse = 6,
    lens = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_device_tool_type_get_type" });
        return cFn();
    }
};
/// Class [Display](https://docs.gtk.org/gdk4/class.Display.html)
/// - property [composited](https://docs.gtk.org/gdk4/property.Display.composited.html): (r-) `bool`
/// - property [dmabuf-formats](https://docs.gtk.org/gdk4/property.Display.dmabuf-formats.html): (r-) `gdk.DmabufFormats`
/// - property [input-shapes](https://docs.gtk.org/gdk4/property.Display.input-shapes.html): (r-) `bool`
/// - property [rgba](https://docs.gtk.org/gdk4/property.Display.rgba.html): (r-) `bool`
/// - property [shadow-width](https://docs.gtk.org/gdk4/property.Display.shadow-width.html): (r-) `bool`
pub const Display = opaque {
    pub const Parent = gobject.Object;
    /// type func [get_default](https://docs.gtk.org/gdk4/type_func.Display.get_default.html)
    pub fn getDefault() ?*gdk.Display {
        const cFn = @extern(*const fn () callconv(.c) ?*gdk.Display, .{ .name = "gdk_display_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [open](https://docs.gtk.org/gdk4/type_func.Display.open.html)
    pub fn open(_display_name: ?[*:0]const u8) ?*gdk.Display {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) ?*gdk.Display, .{ .name = "gdk_display_open" });
        const ret = cFn(_display_name);
        return ret;
    }
    /// method [beep](https://docs.gtk.org/gdk4/method.Display.beep.html)
    pub fn beep(self: *Display) void {
        const cFn = @extern(*const fn (*Display) callconv(.c) void, .{ .name = "gdk_display_beep" });
        const ret = cFn(self);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gdk4/method.Display.close.html)
    pub fn close(self: *Display) void {
        const cFn = @extern(*const fn (*Display) callconv(.c) void, .{ .name = "gdk_display_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_gl_context](https://docs.gtk.org/gdk4/method.Display.create_gl_context.html)
    pub fn createGlContext(self: *Display, _error: *?*core.Error) error{GError}!*gdk.GLContext {
        const cFn = @extern(*const fn (*Display, *?*core.Error) callconv(.c) *gdk.GLContext, .{ .name = "gdk_display_create_gl_context" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [device_is_grabbed](https://docs.gtk.org/gdk4/method.Display.device_is_grabbed.html)
    pub fn deviceIsGrabbed(self: *Display, _device: *gdk.Device) bool {
        const cFn = @extern(*const fn (*Display, *gdk.Device) callconv(.c) bool, .{ .name = "gdk_display_device_is_grabbed" });
        const ret = cFn(self, _device);
        return ret;
    }
    /// method [flush](https://docs.gtk.org/gdk4/method.Display.flush.html)
    pub fn flush(self: *Display) void {
        const cFn = @extern(*const fn (*Display) callconv(.c) void, .{ .name = "gdk_display_flush" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_app_launch_context](https://docs.gtk.org/gdk4/method.Display.get_app_launch_context.html)
    pub fn getAppLaunchContext(self: *Display) *gdk.AppLaunchContext {
        const cFn = @extern(*const fn (*Display) callconv(.c) *gdk.AppLaunchContext, .{ .name = "gdk_display_get_app_launch_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_clipboard](https://docs.gtk.org/gdk4/method.Display.get_clipboard.html)
    pub fn getClipboard(self: *Display) *gdk.Clipboard {
        const cFn = @extern(*const fn (*Display) callconv(.c) *gdk.Clipboard, .{ .name = "gdk_display_get_clipboard" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_seat](https://docs.gtk.org/gdk4/method.Display.get_default_seat.html)
    pub fn getDefaultSeat(self: *Display) ?*gdk.Seat {
        const cFn = @extern(*const fn (*Display) callconv(.c) ?*gdk.Seat, .{ .name = "gdk_display_get_default_seat" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dmabuf_formats](https://docs.gtk.org/gdk4/method.Display.get_dmabuf_formats.html)
    pub fn getDmabufFormats(self: *Display) *gdk.DmabufFormats {
        const cFn = @extern(*const fn (*Display) callconv(.c) *gdk.DmabufFormats, .{ .name = "gdk_display_get_dmabuf_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_monitor_at_surface](https://docs.gtk.org/gdk4/method.Display.get_monitor_at_surface.html)
    pub fn getMonitorAtSurface(self: *Display, _surface: *gdk.Surface) ?*gdk.Monitor {
        const cFn = @extern(*const fn (*Display, *gdk.Surface) callconv(.c) ?*gdk.Monitor, .{ .name = "gdk_display_get_monitor_at_surface" });
        const ret = cFn(self, _surface);
        return ret;
    }
    /// method [get_monitors](https://docs.gtk.org/gdk4/method.Display.get_monitors.html)
    pub fn getMonitors(self: *Display) *gio.ListModel {
        const cFn = @extern(*const fn (*Display) callconv(.c) *gio.ListModel, .{ .name = "gdk_display_get_monitors" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gdk4/method.Display.get_name.html)
    pub fn getName(self: *Display) [*:0]u8 {
        const cFn = @extern(*const fn (*Display) callconv(.c) [*:0]u8, .{ .name = "gdk_display_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_primary_clipboard](https://docs.gtk.org/gdk4/method.Display.get_primary_clipboard.html)
    pub fn getPrimaryClipboard(self: *Display) *gdk.Clipboard {
        const cFn = @extern(*const fn (*Display) callconv(.c) *gdk.Clipboard, .{ .name = "gdk_display_get_primary_clipboard" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_setting](https://docs.gtk.org/gdk4/method.Display.get_setting.html)
    pub fn getSetting(self: *Display, _name: [*:0]const u8, _value: *gobject.Value) bool {
        const cFn = @extern(*const fn (*Display, [*:0]const u8, *gobject.Value) callconv(.c) bool, .{ .name = "gdk_display_get_setting" });
        const ret = cFn(self, _name, _value);
        return ret;
    }
    /// Deprecated:
    /// method [get_startup_notification_id](https://docs.gtk.org/gdk4/method.Display.get_startup_notification_id.html)
    pub const getStartupNotificationId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getStartupNotificationId(self: *Display) ?[*:0]u8 {
            const cFn = @extern(*const fn (*Display) callconv(.c) ?[*:0]u8, .{ .name = "gdk_display_get_startup_notification_id" });
            const ret = cFn(self);
            return ret;
        }
    }.getStartupNotificationId;
    /// method [is_closed](https://docs.gtk.org/gdk4/method.Display.is_closed.html)
    pub fn isClosed(self: *Display) bool {
        const cFn = @extern(*const fn (*Display) callconv(.c) bool, .{ .name = "gdk_display_is_closed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_composited](https://docs.gtk.org/gdk4/method.Display.is_composited.html)
    pub fn isComposited(self: *Display) bool {
        const cFn = @extern(*const fn (*Display) callconv(.c) bool, .{ .name = "gdk_display_is_composited" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_rgba](https://docs.gtk.org/gdk4/method.Display.is_rgba.html)
    pub fn isRgba(self: *Display) bool {
        const cFn = @extern(*const fn (*Display) callconv(.c) bool, .{ .name = "gdk_display_is_rgba" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_seats](https://docs.gtk.org/gdk4/method.Display.list_seats.html)
    pub fn listSeats(self: *Display) ?*core.List {
        const cFn = @extern(*const fn (*Display) callconv(.c) ?*core.List, .{ .name = "gdk_display_list_seats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [map_keycode](https://docs.gtk.org/gdk4/method.Display.map_keycode.html)
    pub fn mapKeycode(self: *Display, _keycode: u32) struct {
        ret: bool,
        keys: ?[]gdk.KeymapKey,
        keyvals: ?[]u32,
    } {
        var keys_out: [*]gdk.KeymapKey = undefined;
        const _keys = &keys_out;
        var keyvals_out: [*]u32 = undefined;
        const _keyvals = &keyvals_out;
        var n_entries_out: i32 = undefined;
        const _n_entries = &n_entries_out;
        const cFn = @extern(*const fn (*Display, u32, ?*[*]gdk.KeymapKey, ?*[*]u32, *i32) callconv(.c) bool, .{ .name = "gdk_display_map_keycode" });
        const ret = cFn(self, _keycode, _keys, _keyvals, _n_entries);
        return .{ .ret = ret, .keys = keys_out[0..@intCast(n_entries_out)], .keyvals = keyvals_out[0..@intCast(n_entries_out)] };
    }
    /// method [map_keyval](https://docs.gtk.org/gdk4/method.Display.map_keyval.html)
    pub fn mapKeyval(self: *Display, _keyval: u32) struct {
        ret: bool,
        keys: []gdk.KeymapKey,
    } {
        var keys_out: [*]gdk.KeymapKey = undefined;
        const _keys = &keys_out;
        var n_keys_out: i32 = undefined;
        const _n_keys = &n_keys_out;
        const cFn = @extern(*const fn (*Display, u32, *[*]gdk.KeymapKey, *i32) callconv(.c) bool, .{ .name = "gdk_display_map_keyval" });
        const ret = cFn(self, _keyval, _keys, _n_keys);
        return .{ .ret = ret, .keys = keys_out[0..@intCast(n_keys_out)] };
    }
    /// Deprecated:
    /// method [notify_startup_complete](https://docs.gtk.org/gdk4/method.Display.notify_startup_complete.html)
    pub const notifyStartupComplete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn notifyStartupComplete(self: *Display, _startup_id: [*:0]const u8) void {
            const cFn = @extern(*const fn (*Display, [*:0]const u8) callconv(.c) void, .{ .name = "gdk_display_notify_startup_complete" });
            const ret = cFn(self, _startup_id);
            return ret;
        }
    }.notifyStartupComplete;
    /// method [prepare_gl](https://docs.gtk.org/gdk4/method.Display.prepare_gl.html)
    pub fn prepareGl(self: *Display, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Display, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_display_prepare_gl" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [put_event](https://docs.gtk.org/gdk4/method.Display.put_event.html)
    pub const putEvent = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn putEvent(self: *Display, _event: *gdk.Event) void {
            const cFn = @extern(*const fn (*Display, *gdk.Event) callconv(.c) void, .{ .name = "gdk_display_put_event" });
            const ret = cFn(self, _event);
            return ret;
        }
    }.putEvent;
    /// method [supports_input_shapes](https://docs.gtk.org/gdk4/method.Display.supports_input_shapes.html)
    pub fn supportsInputShapes(self: *Display) bool {
        const cFn = @extern(*const fn (*Display) callconv(.c) bool, .{ .name = "gdk_display_supports_input_shapes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [supports_shadow_width](https://docs.gtk.org/gdk4/method.Display.supports_shadow_width.html)
    pub fn supportsShadowWidth(self: *Display) bool {
        const cFn = @extern(*const fn (*Display) callconv(.c) bool, .{ .name = "gdk_display_supports_shadow_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [sync](https://docs.gtk.org/gdk4/method.Display.sync.html)
    pub fn sync(self: *Display) void {
        const cFn = @extern(*const fn (*Display) callconv(.c) void, .{ .name = "gdk_display_sync" });
        const ret = cFn(self);
        return ret;
    }
    /// method [translate_key](https://docs.gtk.org/gdk4/method.Display.translate_key.html)
    pub fn translateKey(self: *Display, _keycode: u32, _state: gdk.ModifierType, _group: i32) struct {
        ret: bool,
        keyval: u32,
        effective_group: i32,
        level: i32,
        consumed: gdk.ModifierType,
    } {
        var keyval_out: u32 = undefined;
        const _keyval = &keyval_out;
        var effective_group_out: i32 = undefined;
        const _effective_group = &effective_group_out;
        var level_out: i32 = undefined;
        const _level = &level_out;
        var consumed_out: gdk.ModifierType = undefined;
        const _consumed = &consumed_out;
        const cFn = @extern(*const fn (*Display, u32, gdk.ModifierType, i32, ?*u32, ?*i32, ?*i32, ?*gdk.ModifierType) callconv(.c) bool, .{ .name = "gdk_display_translate_key" });
        const ret = cFn(self, _keycode, _state, _group, _keyval, _effective_group, _level, _consumed);
        return .{ .ret = ret, .keyval = keyval_out, .effective_group = effective_group_out, .level = level_out, .consumed = consumed_out };
    }
    /// signal [closed](https://docs.gtk.org/gdk4/signal.Display.closed.html)
    pub fn connectClosed(self: *Display, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("closed", handler, args, flags, &.{ void, *Display, bool });
    }
    /// signal [opened](https://docs.gtk.org/gdk4/signal.Display.opened.html)
    pub fn connectOpened(self: *Display, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("opened", handler, args, flags, &.{ void, *Display });
    }
    /// signal [seat-added](https://docs.gtk.org/gdk4/signal.Display.seat-added.html)
    pub fn connectSeatAdded(self: *Display, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("seat-added", handler, args, flags, &.{ void, *Display, *gdk.Seat });
    }
    /// signal [seat-removed](https://docs.gtk.org/gdk4/signal.Display.seat-removed.html)
    pub fn connectSeatRemoved(self: *Display, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("seat-removed", handler, args, flags, &.{ void, *Display, *gdk.Seat });
    }
    /// signal [setting-changed](https://docs.gtk.org/gdk4/signal.Display.setting-changed.html)
    pub fn connectSettingChanged(self: *Display, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("setting-changed", handler, args, flags, &.{ void, *Display, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_display_get_type" });
        return cFn();
    }
};
/// Class [DisplayManager](https://docs.gtk.org/gdk4/class.DisplayManager.html)
/// - property [default-display](https://docs.gtk.org/gdk4/property.DisplayManager.default-display.html): (rw) `gdk.Display`
pub const DisplayManager = opaque {
    pub const Parent = gobject.Object;
    /// type func [get](https://docs.gtk.org/gdk4/type_func.DisplayManager.get.html)
    pub fn get() *gdk.DisplayManager {
        const cFn = @extern(*const fn () callconv(.c) *gdk.DisplayManager, .{ .name = "gdk_display_manager_get" });
        const ret = cFn();
        return ret;
    }
    /// method [get_default_display](https://docs.gtk.org/gdk4/method.DisplayManager.get_default_display.html)
    pub fn getDefaultDisplay(self: *DisplayManager) ?*gdk.Display {
        const cFn = @extern(*const fn (*DisplayManager) callconv(.c) ?*gdk.Display, .{ .name = "gdk_display_manager_get_default_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_displays](https://docs.gtk.org/gdk4/method.DisplayManager.list_displays.html)
    pub fn listDisplays(self: *DisplayManager) ?*core.SList {
        const cFn = @extern(*const fn (*DisplayManager) callconv(.c) ?*core.SList, .{ .name = "gdk_display_manager_list_displays" });
        const ret = cFn(self);
        return ret;
    }
    /// method [open_display](https://docs.gtk.org/gdk4/method.DisplayManager.open_display.html)
    pub fn openDisplay(self: *DisplayManager, _name: ?[*:0]const u8) ?*gdk.Display {
        const cFn = @extern(*const fn (*DisplayManager, ?[*:0]const u8) callconv(.c) ?*gdk.Display, .{ .name = "gdk_display_manager_open_display" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_default_display](https://docs.gtk.org/gdk4/method.DisplayManager.set_default_display.html)
    pub fn setDefaultDisplay(self: *DisplayManager, _display: *gdk.Display) void {
        const cFn = @extern(*const fn (*DisplayManager, *gdk.Display) callconv(.c) void, .{ .name = "gdk_display_manager_set_default_display" });
        const ret = cFn(self, _display);
        return ret;
    }
    /// signal [display-opened](https://docs.gtk.org/gdk4/signal.DisplayManager.display-opened.html)
    pub fn connectDisplayOpened(self: *DisplayManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("display-opened", handler, args, flags, &.{ void, *DisplayManager, *gdk.Display });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_display_manager_get_type" });
        return cFn();
    }
};
/// Error [DmabufError](https://docs.gtk.org/gdk4/error.DmabufError.html)
pub const DmabufError = enum(u32) {
    not_available = 0,
    unsupported_format = 1,
    creation_failed = 2,

    /// type func [quark](https://docs.gtk.org/gdk4/type_func.DmabufError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_dmabuf_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_dmabuf_error_get_type" });
        return cFn();
    }
};
/// Struct [DmabufFormats](https://docs.gtk.org/gdk4/struct.DmabufFormats.html)
pub const DmabufFormats = opaque {
    /// method [contains](https://docs.gtk.org/gdk4/method.DmabufFormats.contains.html)
    pub fn contains(self: *DmabufFormats, _fourcc: u32, _modifier: u64) bool {
        const cFn = @extern(*const fn (*DmabufFormats, u32, u64) callconv(.c) bool, .{ .name = "gdk_dmabuf_formats_contains" });
        const ret = cFn(self, _fourcc, _modifier);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gdk4/method.DmabufFormats.equal.html)
    pub fn equal(self: *DmabufFormats, _formats2: ?*gdk.DmabufFormats) bool {
        const cFn = @extern(*const fn (*DmabufFormats, ?*gdk.DmabufFormats) callconv(.c) bool, .{ .name = "gdk_dmabuf_formats_equal" });
        const ret = cFn(self, _formats2);
        return ret;
    }
    /// method [get_format](https://docs.gtk.org/gdk4/method.DmabufFormats.get_format.html)
    pub fn getFormat(self: *DmabufFormats, _idx: u64) struct {
        ret: void,
        fourcc: u32,
        modifier: u64,
    } {
        var fourcc_out: u32 = undefined;
        const _fourcc = &fourcc_out;
        var modifier_out: u64 = undefined;
        const _modifier = &modifier_out;
        const cFn = @extern(*const fn (*DmabufFormats, u64, *u32, *u64) callconv(.c) void, .{ .name = "gdk_dmabuf_formats_get_format" });
        const ret = cFn(self, _idx, _fourcc, _modifier);
        return .{ .ret = ret, .fourcc = fourcc_out, .modifier = modifier_out };
    }
    /// method [get_n_formats](https://docs.gtk.org/gdk4/method.DmabufFormats.get_n_formats.html)
    pub fn getNFormats(self: *DmabufFormats) u64 {
        const cFn = @extern(*const fn (*DmabufFormats) callconv(.c) u64, .{ .name = "gdk_dmabuf_formats_get_n_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.DmabufFormats.ref.html)
    pub fn ref(self: *DmabufFormats) *gdk.DmabufFormats {
        const cFn = @extern(*const fn (*DmabufFormats) callconv(.c) *gdk.DmabufFormats, .{ .name = "gdk_dmabuf_formats_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.DmabufFormats.unref.html)
    pub fn unref(self: *DmabufFormats) void {
        const cFn = @extern(*const fn (*DmabufFormats) callconv(.c) void, .{ .name = "gdk_dmabuf_formats_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_dmabuf_formats_get_type" });
        return cFn();
    }
};
/// Class [DmabufTexture](https://docs.gtk.org/gdk4/class.DmabufTexture.html)
pub const DmabufTexture = opaque {
    pub const Interfaces = [_]type{ gdk.Paintable, gio.Icon, gio.LoadableIcon };
    pub const Parent = gdk.Texture;
    pub const Class = gdk.DmabufTextureClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_dmabuf_texture_get_type" });
        return cFn();
    }
};
/// Class [DmabufTextureBuilder](https://docs.gtk.org/gdk4/class.DmabufTextureBuilder.html)
/// - property [display](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.display.html): (rw) `gdk.Display`
/// - property [fourcc](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.fourcc.html): (rw) `u32`
/// - property [height](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.height.html): (rw) `u32`
/// - property [modifier](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.modifier.html): (rw) `u64`
/// - property [n-planes](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.n-planes.html): (rw) `u32`
/// - property [premultiplied](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.premultiplied.html): (rw) `bool`
/// - property [update-region](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.update-region.html): (rw) `cairo.Region`
/// - property [update-texture](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.update-texture.html): (rw) `gdk.Texture`
/// - property [width](https://docs.gtk.org/gdk4/property.DmabufTextureBuilder.width.html): (rw) `u32`
pub const DmabufTextureBuilder = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.DmabufTextureBuilderClass;
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.DmabufTextureBuilder.new.html)
    pub fn new() *DmabufTextureBuilder {
        const cFn = @extern(*const fn () callconv(.c) *DmabufTextureBuilder, .{ .name = "gdk_dmabuf_texture_builder_new" });
        const ret = cFn();
        return ret;
    }
    /// method [build](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.build.html)
    pub fn build(self: *DmabufTextureBuilder, _destroy: ?glib.DestroyNotify, _data: ?*anyopaque, _error: *?*core.Error) error{GError}!?*gdk.Texture {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, ?glib.DestroyNotify, ?*anyopaque, *?*core.Error) callconv(.c) ?*gdk.Texture, .{ .name = "gdk_dmabuf_texture_builder_build" });
        const ret = cFn(self, _destroy, @ptrCast(_data), _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_display.html)
    pub fn getDisplay(self: *DmabufTextureBuilder) *gdk.Display {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) *gdk.Display, .{ .name = "gdk_dmabuf_texture_builder_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fd](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_fd.html)
    pub fn getFd(self: *DmabufTextureBuilder, _plane: u32) i32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) i32, .{ .name = "gdk_dmabuf_texture_builder_get_fd" });
        const ret = cFn(self, _plane);
        return ret;
    }
    /// method [get_fourcc](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_fourcc.html)
    pub fn getFourcc(self: *DmabufTextureBuilder) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_fourcc" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_height.html)
    pub fn getHeight(self: *DmabufTextureBuilder) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modifier](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_modifier.html)
    pub fn getModifier(self: *DmabufTextureBuilder) u64 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) u64, .{ .name = "gdk_dmabuf_texture_builder_get_modifier" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_planes](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_n_planes.html)
    pub fn getNPlanes(self: *DmabufTextureBuilder) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_n_planes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_offset.html)
    pub fn getOffset(self: *DmabufTextureBuilder, _plane: u32) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_offset" });
        const ret = cFn(self, _plane);
        return ret;
    }
    /// method [get_premultiplied](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_premultiplied.html)
    pub fn getPremultiplied(self: *DmabufTextureBuilder) bool {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) bool, .{ .name = "gdk_dmabuf_texture_builder_get_premultiplied" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stride](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_stride.html)
    pub fn getStride(self: *DmabufTextureBuilder, _plane: u32) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_stride" });
        const ret = cFn(self, _plane);
        return ret;
    }
    /// method [get_update_region](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_update_region.html)
    pub fn getUpdateRegion(self: *DmabufTextureBuilder) ?*cairo.Region {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) ?*cairo.Region, .{ .name = "gdk_dmabuf_texture_builder_get_update_region" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_update_texture](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_update_texture.html)
    pub fn getUpdateTexture(self: *DmabufTextureBuilder) ?*gdk.Texture {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) ?*gdk.Texture, .{ .name = "gdk_dmabuf_texture_builder_get_update_texture" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.get_width.html)
    pub fn getWidth(self: *DmabufTextureBuilder) u32 {
        const cFn = @extern(*const fn (*DmabufTextureBuilder) callconv(.c) u32, .{ .name = "gdk_dmabuf_texture_builder_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_display](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_display.html)
    pub fn setDisplay(self: *DmabufTextureBuilder, _display: *gdk.Display) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, *gdk.Display) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_display" });
        const ret = cFn(self, _display);
        return ret;
    }
    /// method [set_fd](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_fd.html)
    pub fn setFd(self: *DmabufTextureBuilder, _plane: u32, _fd: i32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32, i32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_fd" });
        const ret = cFn(self, _plane, _fd);
        return ret;
    }
    /// method [set_fourcc](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_fourcc.html)
    pub fn setFourcc(self: *DmabufTextureBuilder, _fourcc: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_fourcc" });
        const ret = cFn(self, _fourcc);
        return ret;
    }
    /// method [set_height](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_height.html)
    pub fn setHeight(self: *DmabufTextureBuilder, _height: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_modifier](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_modifier.html)
    pub fn setModifier(self: *DmabufTextureBuilder, _modifier: u64) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u64) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_modifier" });
        const ret = cFn(self, _modifier);
        return ret;
    }
    /// method [set_n_planes](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_n_planes.html)
    pub fn setNPlanes(self: *DmabufTextureBuilder, _n_planes: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_n_planes" });
        const ret = cFn(self, _n_planes);
        return ret;
    }
    /// method [set_offset](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_offset.html)
    pub fn setOffset(self: *DmabufTextureBuilder, _plane: u32, _offset: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_offset" });
        const ret = cFn(self, _plane, _offset);
        return ret;
    }
    /// method [set_premultiplied](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_premultiplied.html)
    pub fn setPremultiplied(self: *DmabufTextureBuilder, _premultiplied: bool) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, bool) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_premultiplied" });
        const ret = cFn(self, _premultiplied);
        return ret;
    }
    /// method [set_stride](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_stride.html)
    pub fn setStride(self: *DmabufTextureBuilder, _plane: u32, _stride: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_stride" });
        const ret = cFn(self, _plane, _stride);
        return ret;
    }
    /// method [set_update_region](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_update_region.html)
    pub fn setUpdateRegion(self: *DmabufTextureBuilder, _region: ?*cairo.Region) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, ?*cairo.Region) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_update_region" });
        const ret = cFn(self, _region);
        return ret;
    }
    /// method [set_update_texture](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_update_texture.html)
    pub fn setUpdateTexture(self: *DmabufTextureBuilder, _texture: ?*gdk.Texture) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, ?*gdk.Texture) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_update_texture" });
        const ret = cFn(self, _texture);
        return ret;
    }
    /// method [set_width](https://docs.gtk.org/gdk4/method.DmabufTextureBuilder.set_width.html)
    pub fn setWidth(self: *DmabufTextureBuilder, _width: u32) void {
        const cFn = @extern(*const fn (*DmabufTextureBuilder, u32) callconv(.c) void, .{ .name = "gdk_dmabuf_texture_builder_set_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_dmabuf_texture_builder_get_type" });
        return cFn();
    }
};
pub const DmabufTextureBuilderClass = opaque {};
pub const DmabufTextureClass = opaque {};
/// Class [Drag](https://docs.gtk.org/gdk4/class.Drag.html)
/// - property [actions](https://docs.gtk.org/gdk4/property.Drag.actions.html): (rw) `gdk.DragAction`
/// - property [content](https://docs.gtk.org/gdk4/property.Drag.content.html): (r-) `gdk.ContentProvider`
/// - property [device](https://docs.gtk.org/gdk4/property.Drag.device.html): (r-) `gdk.Device`
/// - property [display](https://docs.gtk.org/gdk4/property.Drag.display.html): (r-) `gdk.Display`
/// - property [formats](https://docs.gtk.org/gdk4/property.Drag.formats.html): (r-) `gdk.ContentFormats`
/// - property [selected-action](https://docs.gtk.org/gdk4/property.Drag.selected-action.html): (rw) `gdk.DragAction`
/// - property [surface](https://docs.gtk.org/gdk4/property.Drag.surface.html): (r-) `gdk.Surface`
pub const Drag = opaque {
    pub const Parent = gobject.Object;
    /// type func [begin](https://docs.gtk.org/gdk4/type_func.Drag.begin.html)
    pub fn begin(_surface: *gdk.Surface, _device: *gdk.Device, _content: *gdk.ContentProvider, _actions: gdk.DragAction, _dx: f64, _dy: f64) ?*gdk.Drag {
        const cFn = @extern(*const fn (*gdk.Surface, *gdk.Device, *gdk.ContentProvider, gdk.DragAction, f64, f64) callconv(.c) ?*gdk.Drag, .{ .name = "gdk_drag_begin" });
        const ret = cFn(_surface, _device, _content, _actions, _dx, _dy);
        return ret;
    }
    /// method [drop_done](https://docs.gtk.org/gdk4/method.Drag.drop_done.html)
    pub fn dropDone(self: *Drag, _success: bool) void {
        const cFn = @extern(*const fn (*Drag, bool) callconv(.c) void, .{ .name = "gdk_drag_drop_done" });
        const ret = cFn(self, _success);
        return ret;
    }
    /// method [get_actions](https://docs.gtk.org/gdk4/method.Drag.get_actions.html)
    pub fn getActions(self: *Drag) gdk.DragAction {
        const cFn = @extern(*const fn (*Drag) callconv(.c) gdk.DragAction, .{ .name = "gdk_drag_get_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_content](https://docs.gtk.org/gdk4/method.Drag.get_content.html)
    pub fn getContent(self: *Drag) *gdk.ContentProvider {
        const cFn = @extern(*const fn (*Drag) callconv(.c) *gdk.ContentProvider, .{ .name = "gdk_drag_get_content" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device](https://docs.gtk.org/gdk4/method.Drag.get_device.html)
    pub fn getDevice(self: *Drag) *gdk.Device {
        const cFn = @extern(*const fn (*Drag) callconv(.c) *gdk.Device, .{ .name = "gdk_drag_get_device" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Drag.get_display.html)
    pub fn getDisplay(self: *Drag) *gdk.Display {
        const cFn = @extern(*const fn (*Drag) callconv(.c) *gdk.Display, .{ .name = "gdk_drag_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drag_surface](https://docs.gtk.org/gdk4/method.Drag.get_drag_surface.html)
    pub fn getDragSurface(self: *Drag) ?*gdk.Surface {
        const cFn = @extern(*const fn (*Drag) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_drag_get_drag_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_formats](https://docs.gtk.org/gdk4/method.Drag.get_formats.html)
    pub fn getFormats(self: *Drag) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*Drag) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_drag_get_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_action](https://docs.gtk.org/gdk4/method.Drag.get_selected_action.html)
    pub fn getSelectedAction(self: *Drag) gdk.DragAction {
        const cFn = @extern(*const fn (*Drag) callconv(.c) gdk.DragAction, .{ .name = "gdk_drag_get_selected_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gdk4/method.Drag.get_surface.html)
    pub fn getSurface(self: *Drag) *gdk.Surface {
        const cFn = @extern(*const fn (*Drag) callconv(.c) *gdk.Surface, .{ .name = "gdk_drag_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_hotspot](https://docs.gtk.org/gdk4/method.Drag.set_hotspot.html)
    pub fn setHotspot(self: *Drag, _hot_x: i32, _hot_y: i32) void {
        const cFn = @extern(*const fn (*Drag, i32, i32) callconv(.c) void, .{ .name = "gdk_drag_set_hotspot" });
        const ret = cFn(self, _hot_x, _hot_y);
        return ret;
    }
    /// signal [cancel](https://docs.gtk.org/gdk4/signal.Drag.cancel.html)
    pub fn connectCancel(self: *Drag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancel", handler, args, flags, &.{ void, *Drag, gdk.DragCancelReason });
    }
    /// signal [dnd-finished](https://docs.gtk.org/gdk4/signal.Drag.dnd-finished.html)
    pub fn connectDndFinished(self: *Drag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("dnd-finished", handler, args, flags, &.{ void, *Drag });
    }
    /// signal [drop-performed](https://docs.gtk.org/gdk4/signal.Drag.drop-performed.html)
    pub fn connectDropPerformed(self: *Drag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drop-performed", handler, args, flags, &.{ void, *Drag });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drag_get_type" });
        return cFn();
    }
};
/// Flags [DragAction](https://docs.gtk.org/gdk4/flags.DragAction.html)
pub const DragAction = packed struct(u32) {
    copy: bool = false,
    move: bool = false,
    link: bool = false,
    ask: bool = false,
    _: u28 = 0,

    /// type func [is_unique](https://docs.gtk.org/gdk4/type_func.DragAction.is_unique.html)
    pub fn isUnique(_action: gdk.DragAction) bool {
        const cFn = @extern(*const fn (gdk.DragAction) callconv(.c) bool, .{ .name = "gdk_drag_action_is_unique" });
        const ret = cFn(_action);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drag_action_get_type" });
        return cFn();
    }
};
/// Enum [DragCancelReason](https://docs.gtk.org/gdk4/enum.DragCancelReason.html)
pub const DragCancelReason = enum(u32) {
    no_target = 0,
    user_cancelled = 1,
    @"error" = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drag_cancel_reason_get_type" });
        return cFn();
    }
};
/// Iface [DragSurface](https://docs.gtk.org/gdk4/iface.DragSurface.html)
pub const DragSurface = opaque {
    pub const Prerequisites = [_]type{gdk.Surface};
    /// method [present](https://docs.gtk.org/gdk4/method.DragSurface.present.html)
    pub fn present(self: *DragSurface, _width: i32, _height: i32) bool {
        const cFn = @extern(*const fn (*DragSurface, i32, i32) callconv(.c) bool, .{ .name = "gdk_drag_surface_present" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// signal [compute-size](https://docs.gtk.org/gdk4/signal.DragSurface.compute-size.html)
    pub fn connectComputeSize(self: *DragSurface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("compute-size", handler, args, flags, &.{ void, *DragSurface, **gdk.DragSurfaceSize });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drag_surface_get_type" });
        return cFn();
    }
};
pub const DragSurfaceInterface = opaque {};
/// Struct [DragSurfaceSize](https://docs.gtk.org/gdk4/struct.DragSurfaceSize.html)
pub const DragSurfaceSize = opaque {
    /// method [set_size](https://docs.gtk.org/gdk4/method.DragSurfaceSize.set_size.html)
    pub fn setSize(self: *DragSurfaceSize, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*DragSurfaceSize, i32, i32) callconv(.c) void, .{ .name = "gdk_drag_surface_size_set_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
};
/// Class [DrawContext](https://docs.gtk.org/gdk4/class.DrawContext.html)
/// - property [display](https://docs.gtk.org/gdk4/property.DrawContext.display.html): (r-) `gdk.Display`
/// - property [surface](https://docs.gtk.org/gdk4/property.DrawContext.surface.html): (r-) `gdk.Surface`
pub const DrawContext = opaque {
    pub const Parent = gobject.Object;
    /// method [begin_frame](https://docs.gtk.org/gdk4/method.DrawContext.begin_frame.html)
    pub fn beginFrame(self: *DrawContext, _region: *cairo.Region) void {
        const cFn = @extern(*const fn (*DrawContext, *cairo.Region) callconv(.c) void, .{ .name = "gdk_draw_context_begin_frame" });
        const ret = cFn(self, _region);
        return ret;
    }
    /// method [end_frame](https://docs.gtk.org/gdk4/method.DrawContext.end_frame.html)
    pub fn endFrame(self: *DrawContext) void {
        const cFn = @extern(*const fn (*DrawContext) callconv(.c) void, .{ .name = "gdk_draw_context_end_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.DrawContext.get_display.html)
    pub fn getDisplay(self: *DrawContext) ?*gdk.Display {
        const cFn = @extern(*const fn (*DrawContext) callconv(.c) ?*gdk.Display, .{ .name = "gdk_draw_context_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_region](https://docs.gtk.org/gdk4/method.DrawContext.get_frame_region.html)
    pub fn getFrameRegion(self: *DrawContext) ?*cairo.Region {
        const cFn = @extern(*const fn (*DrawContext) callconv(.c) ?*cairo.Region, .{ .name = "gdk_draw_context_get_frame_region" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gdk4/method.DrawContext.get_surface.html)
    pub fn getSurface(self: *DrawContext) ?*gdk.Surface {
        const cFn = @extern(*const fn (*DrawContext) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_draw_context_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_in_frame](https://docs.gtk.org/gdk4/method.DrawContext.is_in_frame.html)
    pub fn isInFrame(self: *DrawContext) bool {
        const cFn = @extern(*const fn (*DrawContext) callconv(.c) bool, .{ .name = "gdk_draw_context_is_in_frame" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_draw_context_get_type" });
        return cFn();
    }
};
/// Class [Drop](https://docs.gtk.org/gdk4/class.Drop.html)
/// - property [actions](https://docs.gtk.org/gdk4/property.Drop.actions.html): (r-) `gdk.DragAction`
/// - property [device](https://docs.gtk.org/gdk4/property.Drop.device.html): (r-) `gdk.Device`
/// - property [display](https://docs.gtk.org/gdk4/property.Drop.display.html): (r-) `gdk.Display`
/// - property [drag](https://docs.gtk.org/gdk4/property.Drop.drag.html): (r-) `gdk.Drag`
/// - property [formats](https://docs.gtk.org/gdk4/property.Drop.formats.html): (r-) `gdk.ContentFormats`
/// - property [surface](https://docs.gtk.org/gdk4/property.Drop.surface.html): (r-) `gdk.Surface`
pub const Drop = opaque {
    pub const Parent = gobject.Object;
    /// method [finish](https://docs.gtk.org/gdk4/method.Drop.finish.html)
    pub fn finish(self: *Drop, _action: gdk.DragAction) void {
        const cFn = @extern(*const fn (*Drop, gdk.DragAction) callconv(.c) void, .{ .name = "gdk_drop_finish" });
        const ret = cFn(self, _action);
        return ret;
    }
    /// method [get_actions](https://docs.gtk.org/gdk4/method.Drop.get_actions.html)
    pub fn getActions(self: *Drop) gdk.DragAction {
        const cFn = @extern(*const fn (*Drop) callconv(.c) gdk.DragAction, .{ .name = "gdk_drop_get_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device](https://docs.gtk.org/gdk4/method.Drop.get_device.html)
    pub fn getDevice(self: *Drop) *gdk.Device {
        const cFn = @extern(*const fn (*Drop) callconv(.c) *gdk.Device, .{ .name = "gdk_drop_get_device" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Drop.get_display.html)
    pub fn getDisplay(self: *Drop) *gdk.Display {
        const cFn = @extern(*const fn (*Drop) callconv(.c) *gdk.Display, .{ .name = "gdk_drop_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drag](https://docs.gtk.org/gdk4/method.Drop.get_drag.html)
    pub fn getDrag(self: *Drop) ?*gdk.Drag {
        const cFn = @extern(*const fn (*Drop) callconv(.c) ?*gdk.Drag, .{ .name = "gdk_drop_get_drag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_formats](https://docs.gtk.org/gdk4/method.Drop.get_formats.html)
    pub fn getFormats(self: *Drop) *gdk.ContentFormats {
        const cFn = @extern(*const fn (*Drop) callconv(.c) *gdk.ContentFormats, .{ .name = "gdk_drop_get_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gdk4/method.Drop.get_surface.html)
    pub fn getSurface(self: *Drop) *gdk.Surface {
        const cFn = @extern(*const fn (*Drop) callconv(.c) *gdk.Surface, .{ .name = "gdk_drop_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [read_async](https://docs.gtk.org/gdk4/method.Drop.read_async.html)
    pub fn readAsync(self: *Drop, _mime_types: [*:null]?[*:0]const u8, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drop, [*:null]?[*:0]const u8, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_drop_read_async" });
        const ret = cFn(self, _mime_types, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_finish](https://docs.gtk.org/gdk4/method.Drop.read_finish.html)
    pub fn readFinish(self: *Drop, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: ?*gio.InputStream,
        out_mime_type: [*:0]u8,
    } {
        var out_mime_type_out: [*:0]u8 = undefined;
        const _out_mime_type = &out_mime_type_out;
        const cFn = @extern(*const fn (*Drop, *gio.AsyncResult, *[*:0]u8, *?*core.Error) callconv(.c) ?*gio.InputStream, .{ .name = "gdk_drop_read_finish" });
        const ret = cFn(self, _result, _out_mime_type, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .out_mime_type = out_mime_type_out };
    }
    /// method [read_value_async](https://docs.gtk.org/gdk4/method.Drop.read_value_async.html)
    pub fn readValueAsync(self: *Drop, _type: core.Type, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*Drop, core.Type, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_drop_read_value_async" });
        const ret = cFn(self, _type, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [read_value_finish](https://docs.gtk.org/gdk4/method.Drop.read_value_finish.html)
    pub fn readValueFinish(self: *Drop, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!*gobject.Value {
        const cFn = @extern(*const fn (*Drop, *gio.AsyncResult, *?*core.Error) callconv(.c) *gobject.Value, .{ .name = "gdk_drop_read_value_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [status](https://docs.gtk.org/gdk4/method.Drop.status.html)
    pub fn status(self: *Drop, _actions: gdk.DragAction, _preferred: gdk.DragAction) void {
        const cFn = @extern(*const fn (*Drop, gdk.DragAction, gdk.DragAction) callconv(.c) void, .{ .name = "gdk_drop_status" });
        const ret = cFn(self, _actions, _preferred);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drop_get_type" });
        return cFn();
    }
};
/// const [EVENT_PROPAGATE](https://docs.gtk.org/gdk4/const.EVENT_PROPAGATE.html)
pub const EVENT_PROPAGATE = false;
/// const [EVENT_STOP](https://docs.gtk.org/gdk4/const.EVENT_STOP.html)
pub const EVENT_STOP = true;
/// Class [Event](https://docs.gtk.org/gdk4/class.Event.html)
pub const Event = opaque {
    /// method [_get_angle](https://docs.gtk.org/gdk4/method.Event._get_angle.html)
    pub fn GetAngle(self: *Event, _event2: *gdk.Event) struct {
        ret: bool,
        angle: f64,
    } {
        var angle_out: f64 = undefined;
        const _angle = &angle_out;
        const cFn = @extern(*const fn (*Event, *gdk.Event, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_angle" });
        const ret = cFn(self, _event2, _angle);
        return .{ .ret = ret, .angle = angle_out };
    }
    /// method [_get_center](https://docs.gtk.org/gdk4/method.Event._get_center.html)
    pub fn GetCenter(self: *Event, _event2: *gdk.Event) struct {
        ret: bool,
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Event, *gdk.Event, *f64, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_center" });
        const ret = cFn(self, _event2, _x, _y);
        return .{ .ret = ret, .x = x_out, .y = y_out };
    }
    /// method [_get_distance](https://docs.gtk.org/gdk4/method.Event._get_distance.html)
    pub fn GetDistance(self: *Event, _event2: *gdk.Event) struct {
        ret: bool,
        distance: f64,
    } {
        var distance_out: f64 = undefined;
        const _distance = &distance_out;
        const cFn = @extern(*const fn (*Event, *gdk.Event, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_distance" });
        const ret = cFn(self, _event2, _distance);
        return .{ .ret = ret, .distance = distance_out };
    }
    /// method [get_axes](https://docs.gtk.org/gdk4/method.Event.get_axes.html)
    pub fn getAxes(self: *Event) ?struct {
        axes: []f64,
    } {
        var axes_out: [*]f64 = undefined;
        const _axes = &axes_out;
        var n_axes_out: u32 = undefined;
        const _n_axes = &n_axes_out;
        const cFn = @extern(*const fn (*Event, *[*]f64, *u32) callconv(.c) bool, .{ .name = "gdk_event_get_axes" });
        const ret = cFn(self, _axes, _n_axes);
        if (!ret) return null;
        return .{ .axes = axes_out[0..@intCast(n_axes_out)] };
    }
    /// method [get_axis](https://docs.gtk.org/gdk4/method.Event.get_axis.html)
    pub fn getAxis(self: *Event, _axis_use: gdk.AxisUse) ?f64 {
        var value_out: f64 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*Event, gdk.AxisUse, *f64) callconv(.c) bool, .{ .name = "gdk_event_get_axis" });
        const ret = cFn(self, _axis_use, _value);
        if (!ret) return null;
        return value_out;
    }
    /// method [get_device](https://docs.gtk.org/gdk4/method.Event.get_device.html)
    pub fn getDevice(self: *Event) ?*gdk.Device {
        const cFn = @extern(*const fn (*Event) callconv(.c) ?*gdk.Device, .{ .name = "gdk_event_get_device" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device_tool](https://docs.gtk.org/gdk4/method.Event.get_device_tool.html)
    pub fn getDeviceTool(self: *Event) ?*gdk.DeviceTool {
        const cFn = @extern(*const fn (*Event) callconv(.c) ?*gdk.DeviceTool, .{ .name = "gdk_event_get_device_tool" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Event.get_display.html)
    pub fn getDisplay(self: *Event) ?*gdk.Display {
        const cFn = @extern(*const fn (*Event) callconv(.c) ?*gdk.Display, .{ .name = "gdk_event_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_event_sequence](https://docs.gtk.org/gdk4/method.Event.get_event_sequence.html)
    pub fn getEventSequence(self: *Event) *gdk.EventSequence {
        const cFn = @extern(*const fn (*Event) callconv(.c) *gdk.EventSequence, .{ .name = "gdk_event_get_event_sequence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_event_type](https://docs.gtk.org/gdk4/method.Event.get_event_type.html)
    pub fn getEventType(self: *Event) gdk.EventType {
        const cFn = @extern(*const fn (*Event) callconv(.c) gdk.EventType, .{ .name = "gdk_event_get_event_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_history](https://docs.gtk.org/gdk4/method.Event.get_history.html)
    pub fn getHistory(self: *Event) struct {
        ret: ?[*]gdk.TimeCoord,
        out_n_coords: u32,
    } {
        var out_n_coords_out: u32 = undefined;
        const _out_n_coords = &out_n_coords_out;
        const cFn = @extern(*const fn (*Event, *u32) callconv(.c) ?[*]gdk.TimeCoord, .{ .name = "gdk_event_get_history" });
        const ret = cFn(self, _out_n_coords);
        return .{ .ret = ret, .out_n_coords = out_n_coords_out };
    }
    /// method [get_modifier_state](https://docs.gtk.org/gdk4/method.Event.get_modifier_state.html)
    pub fn getModifierState(self: *Event) gdk.ModifierType {
        const cFn = @extern(*const fn (*Event) callconv(.c) gdk.ModifierType, .{ .name = "gdk_event_get_modifier_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pointer_emulated](https://docs.gtk.org/gdk4/method.Event.get_pointer_emulated.html)
    pub fn getPointerEmulated(self: *Event) bool {
        const cFn = @extern(*const fn (*Event) callconv(.c) bool, .{ .name = "gdk_event_get_pointer_emulated" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gdk4/method.Event.get_position.html)
    pub fn getPosition(self: *Event) ?struct {
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Event, *f64, *f64) callconv(.c) bool, .{ .name = "gdk_event_get_position" });
        const ret = cFn(self, _x, _y);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out };
    }
    /// method [get_seat](https://docs.gtk.org/gdk4/method.Event.get_seat.html)
    pub fn getSeat(self: *Event) ?*gdk.Seat {
        const cFn = @extern(*const fn (*Event) callconv(.c) ?*gdk.Seat, .{ .name = "gdk_event_get_seat" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gdk4/method.Event.get_surface.html)
    pub fn getSurface(self: *Event) ?*gdk.Surface {
        const cFn = @extern(*const fn (*Event) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_event_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_time](https://docs.gtk.org/gdk4/method.Event.get_time.html)
    pub fn getTime(self: *Event) u32 {
        const cFn = @extern(*const fn (*Event) callconv(.c) u32, .{ .name = "gdk_event_get_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.Event.ref.html)
    pub fn ref(self: *Event) *gdk.Event {
        const cFn = @extern(*const fn (*Event) callconv(.c) *gdk.Event, .{ .name = "gdk_event_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [triggers_context_menu](https://docs.gtk.org/gdk4/method.Event.triggers_context_menu.html)
    pub fn triggersContextMenu(self: *Event) bool {
        const cFn = @extern(*const fn (*Event) callconv(.c) bool, .{ .name = "gdk_event_triggers_context_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.Event.unref.html)
    pub fn unref(self: *Event) void {
        const cFn = @extern(*const fn (*Event) callconv(.c) void, .{ .name = "gdk_event_unref" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_event_get_type" });
        return cFn();
    }
};
/// Struct [EventSequence](https://docs.gtk.org/gdk4/struct.EventSequence.html)
pub const EventSequence = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_event_sequence_get_type" });
        return cFn();
    }
};
/// Enum [EventType](https://docs.gtk.org/gdk4/enum.EventType.html)
pub const EventType = enum(u32) {
    delete = 0,
    motion_notify = 1,
    button_press = 2,
    button_release = 3,
    key_press = 4,
    key_release = 5,
    enter_notify = 6,
    leave_notify = 7,
    focus_change = 8,
    proximity_in = 9,
    proximity_out = 10,
    drag_enter = 11,
    drag_leave = 12,
    drag_motion = 13,
    drop_start = 14,
    scroll = 15,
    grab_broken = 16,
    touch_begin = 17,
    touch_update = 18,
    touch_end = 19,
    touch_cancel = 20,
    touchpad_swipe = 21,
    touchpad_pinch = 22,
    pad_button_press = 23,
    pad_button_release = 24,
    pad_ring = 25,
    pad_strip = 26,
    pad_group_mode = 27,
    touchpad_hold = 28,
    event_last = 29,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_event_type_get_type" });
        return cFn();
    }
};
/// Struct [FileList](https://docs.gtk.org/gdk4/struct.FileList.html)
pub const FileList = opaque {
    /// ctor [new_from_array](https://docs.gtk.org/gdk4/ctor.FileList.new_from_array.html)
    pub fn newFromArray(_filess: []*gio.File) *FileList {
        const _files = _filess.ptr;
        const _n_files: u64 = @intCast(_filess.len);
        const cFn = @extern(*const fn ([*]*gio.File, u64) callconv(.c) *FileList, .{ .name = "gdk_file_list_new_from_array" });
        const ret = cFn(_files, _n_files);
        return ret;
    }
    /// ctor [new_from_list](https://docs.gtk.org/gdk4/ctor.FileList.new_from_list.html)
    pub fn newFromList(_files: *core.SList) *FileList {
        const cFn = @extern(*const fn (*core.SList) callconv(.c) *FileList, .{ .name = "gdk_file_list_new_from_list" });
        const ret = cFn(_files);
        return ret;
    }
    /// method [get_files](https://docs.gtk.org/gdk4/method.FileList.get_files.html)
    pub fn getFiles(self: *FileList) ?*core.SList {
        const cFn = @extern(*const fn (*FileList) callconv(.c) ?*core.SList, .{ .name = "gdk_file_list_get_files" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_file_list_get_type" });
        return cFn();
    }
};
/// Class [FocusEvent](https://docs.gtk.org/gdk4/class.FocusEvent.html)
pub const FocusEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_in](https://docs.gtk.org/gdk4/method.FocusEvent.get_in.html)
    pub fn getIn(self: *FocusEvent) bool {
        const cFn = @extern(*const fn (*FocusEvent) callconv(.c) bool, .{ .name = "gdk_focus_event_get_in" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_focus_event_get_type" });
        return cFn();
    }
};
/// Class [FrameClock](https://docs.gtk.org/gdk4/class.FrameClock.html)
pub const FrameClock = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.FrameClockClass;
    /// method [begin_updating](https://docs.gtk.org/gdk4/method.FrameClock.begin_updating.html)
    pub fn beginUpdating(self: *FrameClock) void {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) void, .{ .name = "gdk_frame_clock_begin_updating" });
        const ret = cFn(self);
        return ret;
    }
    /// method [end_updating](https://docs.gtk.org/gdk4/method.FrameClock.end_updating.html)
    pub fn endUpdating(self: *FrameClock) void {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) void, .{ .name = "gdk_frame_clock_end_updating" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_timings](https://docs.gtk.org/gdk4/method.FrameClock.get_current_timings.html)
    pub fn getCurrentTimings(self: *FrameClock) ?*gdk.FrameTimings {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) ?*gdk.FrameTimings, .{ .name = "gdk_frame_clock_get_current_timings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fps](https://docs.gtk.org/gdk4/method.FrameClock.get_fps.html)
    pub fn getFps(self: *FrameClock) f64 {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) f64, .{ .name = "gdk_frame_clock_get_fps" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_counter](https://docs.gtk.org/gdk4/method.FrameClock.get_frame_counter.html)
    pub fn getFrameCounter(self: *FrameClock) i64 {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) i64, .{ .name = "gdk_frame_clock_get_frame_counter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_time](https://docs.gtk.org/gdk4/method.FrameClock.get_frame_time.html)
    pub fn getFrameTime(self: *FrameClock) i64 {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) i64, .{ .name = "gdk_frame_clock_get_frame_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_history_start](https://docs.gtk.org/gdk4/method.FrameClock.get_history_start.html)
    pub fn getHistoryStart(self: *FrameClock) i64 {
        const cFn = @extern(*const fn (*FrameClock) callconv(.c) i64, .{ .name = "gdk_frame_clock_get_history_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_refresh_info](https://docs.gtk.org/gdk4/method.FrameClock.get_refresh_info.html)
    pub fn getRefreshInfo(self: *FrameClock, _base_time: i64) struct {
        ret: void,
        refresh_interval_return: i64,
        presentation_time_return: i64,
    } {
        var refresh_interval_return_out: i64 = undefined;
        const _refresh_interval_return = &refresh_interval_return_out;
        var presentation_time_return_out: i64 = undefined;
        const _presentation_time_return = &presentation_time_return_out;
        const cFn = @extern(*const fn (*FrameClock, i64, ?*i64, *i64) callconv(.c) void, .{ .name = "gdk_frame_clock_get_refresh_info" });
        const ret = cFn(self, _base_time, _refresh_interval_return, _presentation_time_return);
        return .{ .ret = ret, .refresh_interval_return = refresh_interval_return_out, .presentation_time_return = presentation_time_return_out };
    }
    /// method [get_timings](https://docs.gtk.org/gdk4/method.FrameClock.get_timings.html)
    pub fn getTimings(self: *FrameClock, _frame_counter: i64) ?*gdk.FrameTimings {
        const cFn = @extern(*const fn (*FrameClock, i64) callconv(.c) ?*gdk.FrameTimings, .{ .name = "gdk_frame_clock_get_timings" });
        const ret = cFn(self, _frame_counter);
        return ret;
    }
    /// method [request_phase](https://docs.gtk.org/gdk4/method.FrameClock.request_phase.html)
    pub fn requestPhase(self: *FrameClock, _phase: gdk.FrameClockPhase) void {
        const cFn = @extern(*const fn (*FrameClock, gdk.FrameClockPhase) callconv(.c) void, .{ .name = "gdk_frame_clock_request_phase" });
        const ret = cFn(self, _phase);
        return ret;
    }
    /// signal [after-paint](https://docs.gtk.org/gdk4/signal.FrameClock.after-paint.html)
    pub fn connectAfterPaint(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("after-paint", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [before-paint](https://docs.gtk.org/gdk4/signal.FrameClock.before-paint.html)
    pub fn connectBeforePaint(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("before-paint", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [flush-events](https://docs.gtk.org/gdk4/signal.FrameClock.flush-events.html)
    pub fn connectFlushEvents(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("flush-events", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [layout](https://docs.gtk.org/gdk4/signal.FrameClock.layout.html)
    pub fn connectLayout(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("layout", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [paint](https://docs.gtk.org/gdk4/signal.FrameClock.paint.html)
    pub fn connectPaint(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("paint", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [resume-events](https://docs.gtk.org/gdk4/signal.FrameClock.resume-events.html)
    pub fn connectResumeEvents(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("resume-events", handler, args, flags, &.{ void, *FrameClock });
    }
    /// signal [update](https://docs.gtk.org/gdk4/signal.FrameClock.update.html)
    pub fn connectUpdate(self: *FrameClock, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("update", handler, args, flags, &.{ void, *FrameClock });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_frame_clock_get_type" });
        return cFn();
    }
};
pub const FrameClockClass = opaque {};
/// Flags [FrameClockPhase](https://docs.gtk.org/gdk4/flags.FrameClockPhase.html)
pub const FrameClockPhase = packed struct(u32) {
    flush_events: bool = false,
    before_paint: bool = false,
    update: bool = false,
    layout: bool = false,
    paint: bool = false,
    resume_events: bool = false,
    after_paint: bool = false,
    _: u25 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_frame_clock_phase_get_type" });
        return cFn();
    }
};
pub const FrameClockPrivate = opaque {};
/// Struct [FrameTimings](https://docs.gtk.org/gdk4/struct.FrameTimings.html)
pub const FrameTimings = opaque {
    /// method [get_complete](https://docs.gtk.org/gdk4/method.FrameTimings.get_complete.html)
    pub fn getComplete(self: *FrameTimings) bool {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) bool, .{ .name = "gdk_frame_timings_get_complete" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_counter](https://docs.gtk.org/gdk4/method.FrameTimings.get_frame_counter.html)
    pub fn getFrameCounter(self: *FrameTimings) i64 {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) i64, .{ .name = "gdk_frame_timings_get_frame_counter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_time](https://docs.gtk.org/gdk4/method.FrameTimings.get_frame_time.html)
    pub fn getFrameTime(self: *FrameTimings) i64 {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) i64, .{ .name = "gdk_frame_timings_get_frame_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_predicted_presentation_time](https://docs.gtk.org/gdk4/method.FrameTimings.get_predicted_presentation_time.html)
    pub fn getPredictedPresentationTime(self: *FrameTimings) i64 {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) i64, .{ .name = "gdk_frame_timings_get_predicted_presentation_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_presentation_time](https://docs.gtk.org/gdk4/method.FrameTimings.get_presentation_time.html)
    pub fn getPresentationTime(self: *FrameTimings) i64 {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) i64, .{ .name = "gdk_frame_timings_get_presentation_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_refresh_interval](https://docs.gtk.org/gdk4/method.FrameTimings.get_refresh_interval.html)
    pub fn getRefreshInterval(self: *FrameTimings) i64 {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) i64, .{ .name = "gdk_frame_timings_get_refresh_interval" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.FrameTimings.ref.html)
    pub fn ref(self: *FrameTimings) *gdk.FrameTimings {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) *gdk.FrameTimings, .{ .name = "gdk_frame_timings_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.FrameTimings.unref.html)
    pub fn unref(self: *FrameTimings) void {
        const cFn = @extern(*const fn (*FrameTimings) callconv(.c) void, .{ .name = "gdk_frame_timings_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_frame_timings_get_type" });
        return cFn();
    }
};
/// Enum [FullscreenMode](https://docs.gtk.org/gdk4/enum.FullscreenMode.html)
pub const FullscreenMode = enum(u32) {
    current_monitor = 0,
    all_monitors = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_fullscreen_mode_get_type" });
        return cFn();
    }
};
/// Flags [GLAPI](https://docs.gtk.org/gdk4/flags.GLAPI.html)
pub const GLAPI = packed struct(u32) {
    gl: bool = false,
    gles: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gl_api_get_type" });
        return cFn();
    }
};
/// Class [GLContext](https://docs.gtk.org/gdk4/class.GLContext.html)
/// - property [allowed-apis](https://docs.gtk.org/gdk4/property.GLContext.allowed-apis.html): (rw) `gdk.GLAPI`
/// - property [api](https://docs.gtk.org/gdk4/property.GLContext.api.html): (r-) `gdk.GLAPI`
/// - property [shared-context](https://docs.gtk.org/gdk4/property.GLContext.shared-context.html): (r-) `gdk.GLContext`
pub const GLContext = opaque {
    pub const Parent = gdk.DrawContext;
    /// type func [clear_current](https://docs.gtk.org/gdk4/type_func.GLContext.clear_current.html)
    pub fn clearCurrent() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "gdk_gl_context_clear_current" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_current](https://docs.gtk.org/gdk4/type_func.GLContext.get_current.html)
    pub fn getCurrent() ?*gdk.GLContext {
        const cFn = @extern(*const fn () callconv(.c) ?*gdk.GLContext, .{ .name = "gdk_gl_context_get_current" });
        const ret = cFn();
        return ret;
    }
    /// method [get_allowed_apis](https://docs.gtk.org/gdk4/method.GLContext.get_allowed_apis.html)
    pub fn getAllowedApis(self: *GLContext) gdk.GLAPI {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) gdk.GLAPI, .{ .name = "gdk_gl_context_get_allowed_apis" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_api](https://docs.gtk.org/gdk4/method.GLContext.get_api.html)
    pub fn getApi(self: *GLContext) gdk.GLAPI {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) gdk.GLAPI, .{ .name = "gdk_gl_context_get_api" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_debug_enabled](https://docs.gtk.org/gdk4/method.GLContext.get_debug_enabled.html)
    pub fn getDebugEnabled(self: *GLContext) bool {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) bool, .{ .name = "gdk_gl_context_get_debug_enabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.GLContext.get_display.html)
    pub fn getDisplay(self: *GLContext) ?*gdk.Display {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) ?*gdk.Display, .{ .name = "gdk_gl_context_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_forward_compatible](https://docs.gtk.org/gdk4/method.GLContext.get_forward_compatible.html)
    pub fn getForwardCompatible(self: *GLContext) bool {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) bool, .{ .name = "gdk_gl_context_get_forward_compatible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_required_version](https://docs.gtk.org/gdk4/method.GLContext.get_required_version.html)
    pub fn getRequiredVersion(self: *GLContext) struct {
        ret: void,
        major: i32,
        minor: i32,
    } {
        var major_out: i32 = undefined;
        const _major = &major_out;
        var minor_out: i32 = undefined;
        const _minor = &minor_out;
        const cFn = @extern(*const fn (*GLContext, *i32, *i32) callconv(.c) void, .{ .name = "gdk_gl_context_get_required_version" });
        const ret = cFn(self, _major, _minor);
        return .{ .ret = ret, .major = major_out, .minor = minor_out };
    }
    /// Deprecated:
    /// method [get_shared_context](https://docs.gtk.org/gdk4/method.GLContext.get_shared_context.html)
    pub const getSharedContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSharedContext(self: *GLContext) ?*gdk.GLContext {
            const cFn = @extern(*const fn (*GLContext) callconv(.c) ?*gdk.GLContext, .{ .name = "gdk_gl_context_get_shared_context" });
            const ret = cFn(self);
            return ret;
        }
    }.getSharedContext;
    /// method [get_surface](https://docs.gtk.org/gdk4/method.GLContext.get_surface.html)
    pub fn getSurface(self: *GLContext) ?*gdk.Surface {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_gl_context_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_es](https://docs.gtk.org/gdk4/method.GLContext.get_use_es.html)
    pub fn getUseEs(self: *GLContext) bool {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) bool, .{ .name = "gdk_gl_context_get_use_es" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_version](https://docs.gtk.org/gdk4/method.GLContext.get_version.html)
    pub fn getVersion(self: *GLContext) struct {
        ret: void,
        major: i32,
        minor: i32,
    } {
        var major_out: i32 = undefined;
        const _major = &major_out;
        var minor_out: i32 = undefined;
        const _minor = &minor_out;
        const cFn = @extern(*const fn (*GLContext, *i32, *i32) callconv(.c) void, .{ .name = "gdk_gl_context_get_version" });
        const ret = cFn(self, _major, _minor);
        return .{ .ret = ret, .major = major_out, .minor = minor_out };
    }
    /// method [is_legacy](https://docs.gtk.org/gdk4/method.GLContext.is_legacy.html)
    pub fn isLegacy(self: *GLContext) bool {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) bool, .{ .name = "gdk_gl_context_is_legacy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_shared](https://docs.gtk.org/gdk4/method.GLContext.is_shared.html)
    pub fn isShared(self: *GLContext, _other: *gdk.GLContext) bool {
        const cFn = @extern(*const fn (*GLContext, *gdk.GLContext) callconv(.c) bool, .{ .name = "gdk_gl_context_is_shared" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [make_current](https://docs.gtk.org/gdk4/method.GLContext.make_current.html)
    pub fn makeCurrent(self: *GLContext) void {
        const cFn = @extern(*const fn (*GLContext) callconv(.c) void, .{ .name = "gdk_gl_context_make_current" });
        const ret = cFn(self);
        return ret;
    }
    /// method [realize](https://docs.gtk.org/gdk4/method.GLContext.realize.html)
    pub fn realize(self: *GLContext, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*GLContext, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_gl_context_realize" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_allowed_apis](https://docs.gtk.org/gdk4/method.GLContext.set_allowed_apis.html)
    pub fn setAllowedApis(self: *GLContext, _apis: gdk.GLAPI) void {
        const cFn = @extern(*const fn (*GLContext, gdk.GLAPI) callconv(.c) void, .{ .name = "gdk_gl_context_set_allowed_apis" });
        const ret = cFn(self, _apis);
        return ret;
    }
    /// method [set_debug_enabled](https://docs.gtk.org/gdk4/method.GLContext.set_debug_enabled.html)
    pub fn setDebugEnabled(self: *GLContext, _enabled: bool) void {
        const cFn = @extern(*const fn (*GLContext, bool) callconv(.c) void, .{ .name = "gdk_gl_context_set_debug_enabled" });
        const ret = cFn(self, _enabled);
        return ret;
    }
    /// method [set_forward_compatible](https://docs.gtk.org/gdk4/method.GLContext.set_forward_compatible.html)
    pub fn setForwardCompatible(self: *GLContext, _compatible: bool) void {
        const cFn = @extern(*const fn (*GLContext, bool) callconv(.c) void, .{ .name = "gdk_gl_context_set_forward_compatible" });
        const ret = cFn(self, _compatible);
        return ret;
    }
    /// method [set_required_version](https://docs.gtk.org/gdk4/method.GLContext.set_required_version.html)
    pub fn setRequiredVersion(self: *GLContext, _major: i32, _minor: i32) void {
        const cFn = @extern(*const fn (*GLContext, i32, i32) callconv(.c) void, .{ .name = "gdk_gl_context_set_required_version" });
        const ret = cFn(self, _major, _minor);
        return ret;
    }
    /// method [set_use_es](https://docs.gtk.org/gdk4/method.GLContext.set_use_es.html)
    pub fn setUseEs(self: *GLContext, _use_es: i32) void {
        const cFn = @extern(*const fn (*GLContext, i32) callconv(.c) void, .{ .name = "gdk_gl_context_set_use_es" });
        const ret = cFn(self, _use_es);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gl_context_get_type" });
        return cFn();
    }
};
/// Error [GLError](https://docs.gtk.org/gdk4/error.GLError.html)
pub const GLError = enum(u32) {
    not_available = 0,
    unsupported_format = 1,
    unsupported_profile = 2,
    compilation_failed = 3,
    link_failed = 4,

    /// type func [quark](https://docs.gtk.org/gdk4/type_func.GLError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_gl_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gl_error_get_type" });
        return cFn();
    }
};
/// Class [GLTexture](https://docs.gtk.org/gdk4/class.GLTexture.html)
pub const GLTexture = opaque {
    pub const Interfaces = [_]type{ gdk.Paintable, gio.Icon, gio.LoadableIcon };
    pub const Parent = gdk.Texture;
    pub const Class = gdk.GLTextureClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.GLTexture.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_context: *gdk.GLContext, _id: u32, _width: i32, _height: i32, _destroy: glib.DestroyNotify, _data: ?*anyopaque) *GLTexture {
            const cFn = @extern(*const fn (*gdk.GLContext, u32, i32, i32, glib.DestroyNotify, ?*anyopaque) callconv(.c) *GLTexture, .{ .name = "gdk_gl_texture_new" });
            const ret = cFn(_context, _id, _width, _height, _destroy, @ptrCast(_data));
            return ret;
        }
    }.new;
    /// method [release](https://docs.gtk.org/gdk4/method.GLTexture.release.html)
    pub fn release(self: *GLTexture) void {
        const cFn = @extern(*const fn (*GLTexture) callconv(.c) void, .{ .name = "gdk_gl_texture_release" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gl_texture_get_type" });
        return cFn();
    }
};
/// Class [GLTextureBuilder](https://docs.gtk.org/gdk4/class.GLTextureBuilder.html)
/// - property [context](https://docs.gtk.org/gdk4/property.GLTextureBuilder.context.html): (rw) `gdk.GLContext`
/// - property [format](https://docs.gtk.org/gdk4/property.GLTextureBuilder.format.html): (rw) `gdk.MemoryFormat`
/// - property [has-mipmap](https://docs.gtk.org/gdk4/property.GLTextureBuilder.has-mipmap.html): (rw) `bool`
/// - property [height](https://docs.gtk.org/gdk4/property.GLTextureBuilder.height.html): (rw) `i32`
/// - property [id](https://docs.gtk.org/gdk4/property.GLTextureBuilder.id.html): (rw) `u32`
/// - property [sync](https://docs.gtk.org/gdk4/property.GLTextureBuilder.sync.html): (rw) `*anyopaque`
/// - property [update-region](https://docs.gtk.org/gdk4/property.GLTextureBuilder.update-region.html): (rw) `cairo.Region`
/// - property [update-texture](https://docs.gtk.org/gdk4/property.GLTextureBuilder.update-texture.html): (rw) `gdk.Texture`
/// - property [width](https://docs.gtk.org/gdk4/property.GLTextureBuilder.width.html): (rw) `i32`
pub const GLTextureBuilder = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.GLTextureBuilderClass;
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.GLTextureBuilder.new.html)
    pub fn new() *GLTextureBuilder {
        const cFn = @extern(*const fn () callconv(.c) *GLTextureBuilder, .{ .name = "gdk_gl_texture_builder_new" });
        const ret = cFn();
        return ret;
    }
    /// method [build](https://docs.gtk.org/gdk4/method.GLTextureBuilder.build.html)
    pub fn build(self: *GLTextureBuilder, _destroy: ?glib.DestroyNotify, _data: ?*anyopaque) *gdk.Texture {
        const cFn = @extern(*const fn (*GLTextureBuilder, ?glib.DestroyNotify, ?*anyopaque) callconv(.c) *gdk.Texture, .{ .name = "gdk_gl_texture_builder_build" });
        const ret = cFn(self, _destroy, @ptrCast(_data));
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_context.html)
    pub fn getContext(self: *GLTextureBuilder) ?*gdk.GLContext {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) ?*gdk.GLContext, .{ .name = "gdk_gl_texture_builder_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_format](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_format.html)
    pub fn getFormat(self: *GLTextureBuilder) gdk.MemoryFormat {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) gdk.MemoryFormat, .{ .name = "gdk_gl_texture_builder_get_format" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_mipmap](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_has_mipmap.html)
    pub fn getHasMipmap(self: *GLTextureBuilder) bool {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) bool, .{ .name = "gdk_gl_texture_builder_get_has_mipmap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_height.html)
    pub fn getHeight(self: *GLTextureBuilder) i32 {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) i32, .{ .name = "gdk_gl_texture_builder_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_id](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_id.html)
    pub fn getId(self: *GLTextureBuilder) u32 {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) u32, .{ .name = "gdk_gl_texture_builder_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sync](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_sync.html)
    pub fn getSync(self: *GLTextureBuilder) ?*anyopaque {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) ?*anyopaque, .{ .name = "gdk_gl_texture_builder_get_sync" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_update_region](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_update_region.html)
    pub fn getUpdateRegion(self: *GLTextureBuilder) ?*cairo.Region {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) ?*cairo.Region, .{ .name = "gdk_gl_texture_builder_get_update_region" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_update_texture](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_update_texture.html)
    pub fn getUpdateTexture(self: *GLTextureBuilder) ?*gdk.Texture {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) ?*gdk.Texture, .{ .name = "gdk_gl_texture_builder_get_update_texture" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk4/method.GLTextureBuilder.get_width.html)
    pub fn getWidth(self: *GLTextureBuilder) i32 {
        const cFn = @extern(*const fn (*GLTextureBuilder) callconv(.c) i32, .{ .name = "gdk_gl_texture_builder_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_context](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_context.html)
    pub fn setContext(self: *GLTextureBuilder, _context: ?*gdk.GLContext) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, ?*gdk.GLContext) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_context" });
        const ret = cFn(self, _context);
        return ret;
    }
    /// method [set_format](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_format.html)
    pub fn setFormat(self: *GLTextureBuilder, _format: gdk.MemoryFormat) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, gdk.MemoryFormat) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_format" });
        const ret = cFn(self, _format);
        return ret;
    }
    /// method [set_has_mipmap](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_has_mipmap.html)
    pub fn setHasMipmap(self: *GLTextureBuilder, _has_mipmap: bool) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, bool) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_has_mipmap" });
        const ret = cFn(self, _has_mipmap);
        return ret;
    }
    /// method [set_height](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_height.html)
    pub fn setHeight(self: *GLTextureBuilder, _height: i32) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, i32) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_id](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_id.html)
    pub fn setId(self: *GLTextureBuilder, _id: u32) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, u32) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_id" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// method [set_sync](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_sync.html)
    pub fn setSync(self: *GLTextureBuilder, _sync: ?*anyopaque) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_sync" });
        const ret = cFn(self, @ptrCast(_sync));
        return ret;
    }
    /// method [set_update_region](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_update_region.html)
    pub fn setUpdateRegion(self: *GLTextureBuilder, _region: ?*cairo.Region) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, ?*cairo.Region) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_update_region" });
        const ret = cFn(self, _region);
        return ret;
    }
    /// method [set_update_texture](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_update_texture.html)
    pub fn setUpdateTexture(self: *GLTextureBuilder, _texture: ?*gdk.Texture) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, ?*gdk.Texture) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_update_texture" });
        const ret = cFn(self, _texture);
        return ret;
    }
    /// method [set_width](https://docs.gtk.org/gdk4/method.GLTextureBuilder.set_width.html)
    pub fn setWidth(self: *GLTextureBuilder, _width: i32) void {
        const cFn = @extern(*const fn (*GLTextureBuilder, i32) callconv(.c) void, .{ .name = "gdk_gl_texture_builder_set_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gl_texture_builder_get_type" });
        return cFn();
    }
};
pub const GLTextureBuilderClass = opaque {};
pub const GLTextureClass = opaque {};
/// Class [GrabBrokenEvent](https://docs.gtk.org/gdk4/class.GrabBrokenEvent.html)
pub const GrabBrokenEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_grab_surface](https://docs.gtk.org/gdk4/method.GrabBrokenEvent.get_grab_surface.html)
    pub fn getGrabSurface(self: *GrabBrokenEvent) *gdk.Surface {
        const cFn = @extern(*const fn (*GrabBrokenEvent) callconv(.c) *gdk.Surface, .{ .name = "gdk_grab_broken_event_get_grab_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_implicit](https://docs.gtk.org/gdk4/method.GrabBrokenEvent.get_implicit.html)
    pub fn getImplicit(self: *GrabBrokenEvent) bool {
        const cFn = @extern(*const fn (*GrabBrokenEvent) callconv(.c) bool, .{ .name = "gdk_grab_broken_event_get_implicit" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_grab_broken_event_get_type" });
        return cFn();
    }
};
/// Enum [Gravity](https://docs.gtk.org/gdk4/enum.Gravity.html)
pub const Gravity = enum(u32) {
    north_west = 1,
    north = 2,
    north_east = 3,
    west = 4,
    center = 5,
    east = 6,
    south_west = 7,
    south = 8,
    south_east = 9,
    static = 10,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_gravity_get_type" });
        return cFn();
    }
};
/// Enum [InputSource](https://docs.gtk.org/gdk4/enum.InputSource.html)
pub const InputSource = enum(u32) {
    mouse = 0,
    pen = 1,
    keyboard = 2,
    touchscreen = 3,
    touchpad = 4,
    trackpoint = 5,
    tablet_pad = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_input_source_get_type" });
        return cFn();
    }
};
/// const [KEY_0](https://docs.gtk.org/gdk4/const.KEY_0.html)
pub const KEY_0 = 48;
/// const [KEY_1](https://docs.gtk.org/gdk4/const.KEY_1.html)
pub const KEY_1 = 49;
/// const [KEY_2](https://docs.gtk.org/gdk4/const.KEY_2.html)
pub const KEY_2 = 50;
/// const [KEY_3](https://docs.gtk.org/gdk4/const.KEY_3.html)
pub const KEY_3 = 51;
/// const [KEY_3270_AltCursor](https://docs.gtk.org/gdk4/const.KEY_3270_AltCursor.html)
pub const KEY_3270_AltCursor = 64784;
/// const [KEY_3270_Attn](https://docs.gtk.org/gdk4/const.KEY_3270_Attn.html)
pub const KEY_3270_Attn = 64782;
/// const [KEY_3270_BackTab](https://docs.gtk.org/gdk4/const.KEY_3270_BackTab.html)
pub const KEY_3270_BackTab = 64773;
/// const [KEY_3270_ChangeScreen](https://docs.gtk.org/gdk4/const.KEY_3270_ChangeScreen.html)
pub const KEY_3270_ChangeScreen = 64793;
/// const [KEY_3270_Copy](https://docs.gtk.org/gdk4/const.KEY_3270_Copy.html)
pub const KEY_3270_Copy = 64789;
/// const [KEY_3270_CursorBlink](https://docs.gtk.org/gdk4/const.KEY_3270_CursorBlink.html)
pub const KEY_3270_CursorBlink = 64783;
/// const [KEY_3270_CursorSelect](https://docs.gtk.org/gdk4/const.KEY_3270_CursorSelect.html)
pub const KEY_3270_CursorSelect = 64796;
/// const [KEY_3270_DeleteWord](https://docs.gtk.org/gdk4/const.KEY_3270_DeleteWord.html)
pub const KEY_3270_DeleteWord = 64794;
/// const [KEY_3270_Duplicate](https://docs.gtk.org/gdk4/const.KEY_3270_Duplicate.html)
pub const KEY_3270_Duplicate = 64769;
/// const [KEY_3270_Enter](https://docs.gtk.org/gdk4/const.KEY_3270_Enter.html)
pub const KEY_3270_Enter = 64798;
/// const [KEY_3270_EraseEOF](https://docs.gtk.org/gdk4/const.KEY_3270_EraseEOF.html)
pub const KEY_3270_EraseEOF = 64774;
/// const [KEY_3270_EraseInput](https://docs.gtk.org/gdk4/const.KEY_3270_EraseInput.html)
pub const KEY_3270_EraseInput = 64775;
/// const [KEY_3270_ExSelect](https://docs.gtk.org/gdk4/const.KEY_3270_ExSelect.html)
pub const KEY_3270_ExSelect = 64795;
/// const [KEY_3270_FieldMark](https://docs.gtk.org/gdk4/const.KEY_3270_FieldMark.html)
pub const KEY_3270_FieldMark = 64770;
/// const [KEY_3270_Ident](https://docs.gtk.org/gdk4/const.KEY_3270_Ident.html)
pub const KEY_3270_Ident = 64787;
/// const [KEY_3270_Jump](https://docs.gtk.org/gdk4/const.KEY_3270_Jump.html)
pub const KEY_3270_Jump = 64786;
/// const [KEY_3270_KeyClick](https://docs.gtk.org/gdk4/const.KEY_3270_KeyClick.html)
pub const KEY_3270_KeyClick = 64785;
/// const [KEY_3270_Left2](https://docs.gtk.org/gdk4/const.KEY_3270_Left2.html)
pub const KEY_3270_Left2 = 64772;
/// const [KEY_3270_PA1](https://docs.gtk.org/gdk4/const.KEY_3270_PA1.html)
pub const KEY_3270_PA1 = 64778;
/// const [KEY_3270_PA2](https://docs.gtk.org/gdk4/const.KEY_3270_PA2.html)
pub const KEY_3270_PA2 = 64779;
/// const [KEY_3270_PA3](https://docs.gtk.org/gdk4/const.KEY_3270_PA3.html)
pub const KEY_3270_PA3 = 64780;
/// const [KEY_3270_Play](https://docs.gtk.org/gdk4/const.KEY_3270_Play.html)
pub const KEY_3270_Play = 64790;
/// const [KEY_3270_PrintScreen](https://docs.gtk.org/gdk4/const.KEY_3270_PrintScreen.html)
pub const KEY_3270_PrintScreen = 64797;
/// const [KEY_3270_Quit](https://docs.gtk.org/gdk4/const.KEY_3270_Quit.html)
pub const KEY_3270_Quit = 64777;
/// const [KEY_3270_Record](https://docs.gtk.org/gdk4/const.KEY_3270_Record.html)
pub const KEY_3270_Record = 64792;
/// const [KEY_3270_Reset](https://docs.gtk.org/gdk4/const.KEY_3270_Reset.html)
pub const KEY_3270_Reset = 64776;
/// const [KEY_3270_Right2](https://docs.gtk.org/gdk4/const.KEY_3270_Right2.html)
pub const KEY_3270_Right2 = 64771;
/// const [KEY_3270_Rule](https://docs.gtk.org/gdk4/const.KEY_3270_Rule.html)
pub const KEY_3270_Rule = 64788;
/// const [KEY_3270_Setup](https://docs.gtk.org/gdk4/const.KEY_3270_Setup.html)
pub const KEY_3270_Setup = 64791;
/// const [KEY_3270_Test](https://docs.gtk.org/gdk4/const.KEY_3270_Test.html)
pub const KEY_3270_Test = 64781;
/// const [KEY_4](https://docs.gtk.org/gdk4/const.KEY_4.html)
pub const KEY_4 = 52;
/// const [KEY_5](https://docs.gtk.org/gdk4/const.KEY_5.html)
pub const KEY_5 = 53;
/// const [KEY_6](https://docs.gtk.org/gdk4/const.KEY_6.html)
pub const KEY_6 = 54;
/// const [KEY_7](https://docs.gtk.org/gdk4/const.KEY_7.html)
pub const KEY_7 = 55;
/// const [KEY_8](https://docs.gtk.org/gdk4/const.KEY_8.html)
pub const KEY_8 = 56;
/// const [KEY_9](https://docs.gtk.org/gdk4/const.KEY_9.html)
pub const KEY_9 = 57;
/// const [KEY_A](https://docs.gtk.org/gdk4/const.KEY_A.html)
pub const KEY_A = 65;
/// const [KEY_AE](https://docs.gtk.org/gdk4/const.KEY_AE.html)
pub const KEY_AE = 198;
/// const [KEY_Aacute](https://docs.gtk.org/gdk4/const.KEY_Aacute.html)
pub const KEY_Aacute = 193;
/// const [KEY_Abelowdot](https://docs.gtk.org/gdk4/const.KEY_Abelowdot.html)
pub const KEY_Abelowdot = 16785056;
/// const [KEY_Abreve](https://docs.gtk.org/gdk4/const.KEY_Abreve.html)
pub const KEY_Abreve = 451;
/// const [KEY_Abreveacute](https://docs.gtk.org/gdk4/const.KEY_Abreveacute.html)
pub const KEY_Abreveacute = 16785070;
/// const [KEY_Abrevebelowdot](https://docs.gtk.org/gdk4/const.KEY_Abrevebelowdot.html)
pub const KEY_Abrevebelowdot = 16785078;
/// const [KEY_Abrevegrave](https://docs.gtk.org/gdk4/const.KEY_Abrevegrave.html)
pub const KEY_Abrevegrave = 16785072;
/// const [KEY_Abrevehook](https://docs.gtk.org/gdk4/const.KEY_Abrevehook.html)
pub const KEY_Abrevehook = 16785074;
/// const [KEY_Abrevetilde](https://docs.gtk.org/gdk4/const.KEY_Abrevetilde.html)
pub const KEY_Abrevetilde = 16785076;
/// const [KEY_AccessX_Enable](https://docs.gtk.org/gdk4/const.KEY_AccessX_Enable.html)
pub const KEY_AccessX_Enable = 65136;
/// const [KEY_AccessX_Feedback_Enable](https://docs.gtk.org/gdk4/const.KEY_AccessX_Feedback_Enable.html)
pub const KEY_AccessX_Feedback_Enable = 65137;
/// const [KEY_Acircumflex](https://docs.gtk.org/gdk4/const.KEY_Acircumflex.html)
pub const KEY_Acircumflex = 194;
/// const [KEY_Acircumflexacute](https://docs.gtk.org/gdk4/const.KEY_Acircumflexacute.html)
pub const KEY_Acircumflexacute = 16785060;
/// const [KEY_Acircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_Acircumflexbelowdot.html)
pub const KEY_Acircumflexbelowdot = 16785068;
/// const [KEY_Acircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_Acircumflexgrave.html)
pub const KEY_Acircumflexgrave = 16785062;
/// const [KEY_Acircumflexhook](https://docs.gtk.org/gdk4/const.KEY_Acircumflexhook.html)
pub const KEY_Acircumflexhook = 16785064;
/// const [KEY_Acircumflextilde](https://docs.gtk.org/gdk4/const.KEY_Acircumflextilde.html)
pub const KEY_Acircumflextilde = 16785066;
/// const [KEY_AddFavorite](https://docs.gtk.org/gdk4/const.KEY_AddFavorite.html)
pub const KEY_AddFavorite = 269025081;
/// const [KEY_Adiaeresis](https://docs.gtk.org/gdk4/const.KEY_Adiaeresis.html)
pub const KEY_Adiaeresis = 196;
/// const [KEY_Agrave](https://docs.gtk.org/gdk4/const.KEY_Agrave.html)
pub const KEY_Agrave = 192;
/// const [KEY_Ahook](https://docs.gtk.org/gdk4/const.KEY_Ahook.html)
pub const KEY_Ahook = 16785058;
/// const [KEY_Alt_L](https://docs.gtk.org/gdk4/const.KEY_Alt_L.html)
pub const KEY_Alt_L = 65513;
/// const [KEY_Alt_R](https://docs.gtk.org/gdk4/const.KEY_Alt_R.html)
pub const KEY_Alt_R = 65514;
/// const [KEY_Amacron](https://docs.gtk.org/gdk4/const.KEY_Amacron.html)
pub const KEY_Amacron = 960;
/// const [KEY_Aogonek](https://docs.gtk.org/gdk4/const.KEY_Aogonek.html)
pub const KEY_Aogonek = 417;
/// const [KEY_ApplicationLeft](https://docs.gtk.org/gdk4/const.KEY_ApplicationLeft.html)
pub const KEY_ApplicationLeft = 269025104;
/// const [KEY_ApplicationRight](https://docs.gtk.org/gdk4/const.KEY_ApplicationRight.html)
pub const KEY_ApplicationRight = 269025105;
/// const [KEY_Arabic_0](https://docs.gtk.org/gdk4/const.KEY_Arabic_0.html)
pub const KEY_Arabic_0 = 16778848;
/// const [KEY_Arabic_1](https://docs.gtk.org/gdk4/const.KEY_Arabic_1.html)
pub const KEY_Arabic_1 = 16778849;
/// const [KEY_Arabic_2](https://docs.gtk.org/gdk4/const.KEY_Arabic_2.html)
pub const KEY_Arabic_2 = 16778850;
/// const [KEY_Arabic_3](https://docs.gtk.org/gdk4/const.KEY_Arabic_3.html)
pub const KEY_Arabic_3 = 16778851;
/// const [KEY_Arabic_4](https://docs.gtk.org/gdk4/const.KEY_Arabic_4.html)
pub const KEY_Arabic_4 = 16778852;
/// const [KEY_Arabic_5](https://docs.gtk.org/gdk4/const.KEY_Arabic_5.html)
pub const KEY_Arabic_5 = 16778853;
/// const [KEY_Arabic_6](https://docs.gtk.org/gdk4/const.KEY_Arabic_6.html)
pub const KEY_Arabic_6 = 16778854;
/// const [KEY_Arabic_7](https://docs.gtk.org/gdk4/const.KEY_Arabic_7.html)
pub const KEY_Arabic_7 = 16778855;
/// const [KEY_Arabic_8](https://docs.gtk.org/gdk4/const.KEY_Arabic_8.html)
pub const KEY_Arabic_8 = 16778856;
/// const [KEY_Arabic_9](https://docs.gtk.org/gdk4/const.KEY_Arabic_9.html)
pub const KEY_Arabic_9 = 16778857;
/// const [KEY_Arabic_ain](https://docs.gtk.org/gdk4/const.KEY_Arabic_ain.html)
pub const KEY_Arabic_ain = 1497;
/// const [KEY_Arabic_alef](https://docs.gtk.org/gdk4/const.KEY_Arabic_alef.html)
pub const KEY_Arabic_alef = 1479;
/// const [KEY_Arabic_alefmaksura](https://docs.gtk.org/gdk4/const.KEY_Arabic_alefmaksura.html)
pub const KEY_Arabic_alefmaksura = 1513;
/// const [KEY_Arabic_beh](https://docs.gtk.org/gdk4/const.KEY_Arabic_beh.html)
pub const KEY_Arabic_beh = 1480;
/// const [KEY_Arabic_comma](https://docs.gtk.org/gdk4/const.KEY_Arabic_comma.html)
pub const KEY_Arabic_comma = 1452;
/// const [KEY_Arabic_dad](https://docs.gtk.org/gdk4/const.KEY_Arabic_dad.html)
pub const KEY_Arabic_dad = 1494;
/// const [KEY_Arabic_dal](https://docs.gtk.org/gdk4/const.KEY_Arabic_dal.html)
pub const KEY_Arabic_dal = 1487;
/// const [KEY_Arabic_damma](https://docs.gtk.org/gdk4/const.KEY_Arabic_damma.html)
pub const KEY_Arabic_damma = 1519;
/// const [KEY_Arabic_dammatan](https://docs.gtk.org/gdk4/const.KEY_Arabic_dammatan.html)
pub const KEY_Arabic_dammatan = 1516;
/// const [KEY_Arabic_ddal](https://docs.gtk.org/gdk4/const.KEY_Arabic_ddal.html)
pub const KEY_Arabic_ddal = 16778888;
/// const [KEY_Arabic_farsi_yeh](https://docs.gtk.org/gdk4/const.KEY_Arabic_farsi_yeh.html)
pub const KEY_Arabic_farsi_yeh = 16778956;
/// const [KEY_Arabic_fatha](https://docs.gtk.org/gdk4/const.KEY_Arabic_fatha.html)
pub const KEY_Arabic_fatha = 1518;
/// const [KEY_Arabic_fathatan](https://docs.gtk.org/gdk4/const.KEY_Arabic_fathatan.html)
pub const KEY_Arabic_fathatan = 1515;
/// const [KEY_Arabic_feh](https://docs.gtk.org/gdk4/const.KEY_Arabic_feh.html)
pub const KEY_Arabic_feh = 1505;
/// const [KEY_Arabic_fullstop](https://docs.gtk.org/gdk4/const.KEY_Arabic_fullstop.html)
pub const KEY_Arabic_fullstop = 16778964;
/// const [KEY_Arabic_gaf](https://docs.gtk.org/gdk4/const.KEY_Arabic_gaf.html)
pub const KEY_Arabic_gaf = 16778927;
/// const [KEY_Arabic_ghain](https://docs.gtk.org/gdk4/const.KEY_Arabic_ghain.html)
pub const KEY_Arabic_ghain = 1498;
/// const [KEY_Arabic_ha](https://docs.gtk.org/gdk4/const.KEY_Arabic_ha.html)
pub const KEY_Arabic_ha = 1511;
/// const [KEY_Arabic_hah](https://docs.gtk.org/gdk4/const.KEY_Arabic_hah.html)
pub const KEY_Arabic_hah = 1485;
/// const [KEY_Arabic_hamza](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamza.html)
pub const KEY_Arabic_hamza = 1473;
/// const [KEY_Arabic_hamza_above](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamza_above.html)
pub const KEY_Arabic_hamza_above = 16778836;
/// const [KEY_Arabic_hamza_below](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamza_below.html)
pub const KEY_Arabic_hamza_below = 16778837;
/// const [KEY_Arabic_hamzaonalef](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamzaonalef.html)
pub const KEY_Arabic_hamzaonalef = 1475;
/// const [KEY_Arabic_hamzaonwaw](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamzaonwaw.html)
pub const KEY_Arabic_hamzaonwaw = 1476;
/// const [KEY_Arabic_hamzaonyeh](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamzaonyeh.html)
pub const KEY_Arabic_hamzaonyeh = 1478;
/// const [KEY_Arabic_hamzaunderalef](https://docs.gtk.org/gdk4/const.KEY_Arabic_hamzaunderalef.html)
pub const KEY_Arabic_hamzaunderalef = 1477;
/// const [KEY_Arabic_heh](https://docs.gtk.org/gdk4/const.KEY_Arabic_heh.html)
pub const KEY_Arabic_heh = 1511;
/// const [KEY_Arabic_heh_doachashmee](https://docs.gtk.org/gdk4/const.KEY_Arabic_heh_doachashmee.html)
pub const KEY_Arabic_heh_doachashmee = 16778942;
/// const [KEY_Arabic_heh_goal](https://docs.gtk.org/gdk4/const.KEY_Arabic_heh_goal.html)
pub const KEY_Arabic_heh_goal = 16778945;
/// const [KEY_Arabic_jeem](https://docs.gtk.org/gdk4/const.KEY_Arabic_jeem.html)
pub const KEY_Arabic_jeem = 1484;
/// const [KEY_Arabic_jeh](https://docs.gtk.org/gdk4/const.KEY_Arabic_jeh.html)
pub const KEY_Arabic_jeh = 16778904;
/// const [KEY_Arabic_kaf](https://docs.gtk.org/gdk4/const.KEY_Arabic_kaf.html)
pub const KEY_Arabic_kaf = 1507;
/// const [KEY_Arabic_kasra](https://docs.gtk.org/gdk4/const.KEY_Arabic_kasra.html)
pub const KEY_Arabic_kasra = 1520;
/// const [KEY_Arabic_kasratan](https://docs.gtk.org/gdk4/const.KEY_Arabic_kasratan.html)
pub const KEY_Arabic_kasratan = 1517;
/// const [KEY_Arabic_keheh](https://docs.gtk.org/gdk4/const.KEY_Arabic_keheh.html)
pub const KEY_Arabic_keheh = 16778921;
/// const [KEY_Arabic_khah](https://docs.gtk.org/gdk4/const.KEY_Arabic_khah.html)
pub const KEY_Arabic_khah = 1486;
/// const [KEY_Arabic_lam](https://docs.gtk.org/gdk4/const.KEY_Arabic_lam.html)
pub const KEY_Arabic_lam = 1508;
/// const [KEY_Arabic_madda_above](https://docs.gtk.org/gdk4/const.KEY_Arabic_madda_above.html)
pub const KEY_Arabic_madda_above = 16778835;
/// const [KEY_Arabic_maddaonalef](https://docs.gtk.org/gdk4/const.KEY_Arabic_maddaonalef.html)
pub const KEY_Arabic_maddaonalef = 1474;
/// const [KEY_Arabic_meem](https://docs.gtk.org/gdk4/const.KEY_Arabic_meem.html)
pub const KEY_Arabic_meem = 1509;
/// const [KEY_Arabic_noon](https://docs.gtk.org/gdk4/const.KEY_Arabic_noon.html)
pub const KEY_Arabic_noon = 1510;
/// const [KEY_Arabic_noon_ghunna](https://docs.gtk.org/gdk4/const.KEY_Arabic_noon_ghunna.html)
pub const KEY_Arabic_noon_ghunna = 16778938;
/// const [KEY_Arabic_peh](https://docs.gtk.org/gdk4/const.KEY_Arabic_peh.html)
pub const KEY_Arabic_peh = 16778878;
/// const [KEY_Arabic_percent](https://docs.gtk.org/gdk4/const.KEY_Arabic_percent.html)
pub const KEY_Arabic_percent = 16778858;
/// const [KEY_Arabic_qaf](https://docs.gtk.org/gdk4/const.KEY_Arabic_qaf.html)
pub const KEY_Arabic_qaf = 1506;
/// const [KEY_Arabic_question_mark](https://docs.gtk.org/gdk4/const.KEY_Arabic_question_mark.html)
pub const KEY_Arabic_question_mark = 1471;
/// const [KEY_Arabic_ra](https://docs.gtk.org/gdk4/const.KEY_Arabic_ra.html)
pub const KEY_Arabic_ra = 1489;
/// const [KEY_Arabic_rreh](https://docs.gtk.org/gdk4/const.KEY_Arabic_rreh.html)
pub const KEY_Arabic_rreh = 16778897;
/// const [KEY_Arabic_sad](https://docs.gtk.org/gdk4/const.KEY_Arabic_sad.html)
pub const KEY_Arabic_sad = 1493;
/// const [KEY_Arabic_seen](https://docs.gtk.org/gdk4/const.KEY_Arabic_seen.html)
pub const KEY_Arabic_seen = 1491;
/// const [KEY_Arabic_semicolon](https://docs.gtk.org/gdk4/const.KEY_Arabic_semicolon.html)
pub const KEY_Arabic_semicolon = 1467;
/// const [KEY_Arabic_shadda](https://docs.gtk.org/gdk4/const.KEY_Arabic_shadda.html)
pub const KEY_Arabic_shadda = 1521;
/// const [KEY_Arabic_sheen](https://docs.gtk.org/gdk4/const.KEY_Arabic_sheen.html)
pub const KEY_Arabic_sheen = 1492;
/// const [KEY_Arabic_sukun](https://docs.gtk.org/gdk4/const.KEY_Arabic_sukun.html)
pub const KEY_Arabic_sukun = 1522;
/// const [KEY_Arabic_superscript_alef](https://docs.gtk.org/gdk4/const.KEY_Arabic_superscript_alef.html)
pub const KEY_Arabic_superscript_alef = 16778864;
/// const [KEY_Arabic_switch](https://docs.gtk.org/gdk4/const.KEY_Arabic_switch.html)
pub const KEY_Arabic_switch = 65406;
/// const [KEY_Arabic_tah](https://docs.gtk.org/gdk4/const.KEY_Arabic_tah.html)
pub const KEY_Arabic_tah = 1495;
/// const [KEY_Arabic_tatweel](https://docs.gtk.org/gdk4/const.KEY_Arabic_tatweel.html)
pub const KEY_Arabic_tatweel = 1504;
/// const [KEY_Arabic_tcheh](https://docs.gtk.org/gdk4/const.KEY_Arabic_tcheh.html)
pub const KEY_Arabic_tcheh = 16778886;
/// const [KEY_Arabic_teh](https://docs.gtk.org/gdk4/const.KEY_Arabic_teh.html)
pub const KEY_Arabic_teh = 1482;
/// const [KEY_Arabic_tehmarbuta](https://docs.gtk.org/gdk4/const.KEY_Arabic_tehmarbuta.html)
pub const KEY_Arabic_tehmarbuta = 1481;
/// const [KEY_Arabic_thal](https://docs.gtk.org/gdk4/const.KEY_Arabic_thal.html)
pub const KEY_Arabic_thal = 1488;
/// const [KEY_Arabic_theh](https://docs.gtk.org/gdk4/const.KEY_Arabic_theh.html)
pub const KEY_Arabic_theh = 1483;
/// const [KEY_Arabic_tteh](https://docs.gtk.org/gdk4/const.KEY_Arabic_tteh.html)
pub const KEY_Arabic_tteh = 16778873;
/// const [KEY_Arabic_veh](https://docs.gtk.org/gdk4/const.KEY_Arabic_veh.html)
pub const KEY_Arabic_veh = 16778916;
/// const [KEY_Arabic_waw](https://docs.gtk.org/gdk4/const.KEY_Arabic_waw.html)
pub const KEY_Arabic_waw = 1512;
/// const [KEY_Arabic_yeh](https://docs.gtk.org/gdk4/const.KEY_Arabic_yeh.html)
pub const KEY_Arabic_yeh = 1514;
/// const [KEY_Arabic_yeh_baree](https://docs.gtk.org/gdk4/const.KEY_Arabic_yeh_baree.html)
pub const KEY_Arabic_yeh_baree = 16778962;
/// const [KEY_Arabic_zah](https://docs.gtk.org/gdk4/const.KEY_Arabic_zah.html)
pub const KEY_Arabic_zah = 1496;
/// const [KEY_Arabic_zain](https://docs.gtk.org/gdk4/const.KEY_Arabic_zain.html)
pub const KEY_Arabic_zain = 1490;
/// const [KEY_Aring](https://docs.gtk.org/gdk4/const.KEY_Aring.html)
pub const KEY_Aring = 197;
/// const [KEY_Armenian_AT](https://docs.gtk.org/gdk4/const.KEY_Armenian_AT.html)
pub const KEY_Armenian_AT = 16778552;
/// const [KEY_Armenian_AYB](https://docs.gtk.org/gdk4/const.KEY_Armenian_AYB.html)
pub const KEY_Armenian_AYB = 16778545;
/// const [KEY_Armenian_BEN](https://docs.gtk.org/gdk4/const.KEY_Armenian_BEN.html)
pub const KEY_Armenian_BEN = 16778546;
/// const [KEY_Armenian_CHA](https://docs.gtk.org/gdk4/const.KEY_Armenian_CHA.html)
pub const KEY_Armenian_CHA = 16778569;
/// const [KEY_Armenian_DA](https://docs.gtk.org/gdk4/const.KEY_Armenian_DA.html)
pub const KEY_Armenian_DA = 16778548;
/// const [KEY_Armenian_DZA](https://docs.gtk.org/gdk4/const.KEY_Armenian_DZA.html)
pub const KEY_Armenian_DZA = 16778561;
/// const [KEY_Armenian_E](https://docs.gtk.org/gdk4/const.KEY_Armenian_E.html)
pub const KEY_Armenian_E = 16778551;
/// const [KEY_Armenian_FE](https://docs.gtk.org/gdk4/const.KEY_Armenian_FE.html)
pub const KEY_Armenian_FE = 16778582;
/// const [KEY_Armenian_GHAT](https://docs.gtk.org/gdk4/const.KEY_Armenian_GHAT.html)
pub const KEY_Armenian_GHAT = 16778562;
/// const [KEY_Armenian_GIM](https://docs.gtk.org/gdk4/const.KEY_Armenian_GIM.html)
pub const KEY_Armenian_GIM = 16778547;
/// const [KEY_Armenian_HI](https://docs.gtk.org/gdk4/const.KEY_Armenian_HI.html)
pub const KEY_Armenian_HI = 16778565;
/// const [KEY_Armenian_HO](https://docs.gtk.org/gdk4/const.KEY_Armenian_HO.html)
pub const KEY_Armenian_HO = 16778560;
/// const [KEY_Armenian_INI](https://docs.gtk.org/gdk4/const.KEY_Armenian_INI.html)
pub const KEY_Armenian_INI = 16778555;
/// const [KEY_Armenian_JE](https://docs.gtk.org/gdk4/const.KEY_Armenian_JE.html)
pub const KEY_Armenian_JE = 16778571;
/// const [KEY_Armenian_KE](https://docs.gtk.org/gdk4/const.KEY_Armenian_KE.html)
pub const KEY_Armenian_KE = 16778580;
/// const [KEY_Armenian_KEN](https://docs.gtk.org/gdk4/const.KEY_Armenian_KEN.html)
pub const KEY_Armenian_KEN = 16778559;
/// const [KEY_Armenian_KHE](https://docs.gtk.org/gdk4/const.KEY_Armenian_KHE.html)
pub const KEY_Armenian_KHE = 16778557;
/// const [KEY_Armenian_LYUN](https://docs.gtk.org/gdk4/const.KEY_Armenian_LYUN.html)
pub const KEY_Armenian_LYUN = 16778556;
/// const [KEY_Armenian_MEN](https://docs.gtk.org/gdk4/const.KEY_Armenian_MEN.html)
pub const KEY_Armenian_MEN = 16778564;
/// const [KEY_Armenian_NU](https://docs.gtk.org/gdk4/const.KEY_Armenian_NU.html)
pub const KEY_Armenian_NU = 16778566;
/// const [KEY_Armenian_O](https://docs.gtk.org/gdk4/const.KEY_Armenian_O.html)
pub const KEY_Armenian_O = 16778581;
/// const [KEY_Armenian_PE](https://docs.gtk.org/gdk4/const.KEY_Armenian_PE.html)
pub const KEY_Armenian_PE = 16778570;
/// const [KEY_Armenian_PYUR](https://docs.gtk.org/gdk4/const.KEY_Armenian_PYUR.html)
pub const KEY_Armenian_PYUR = 16778579;
/// const [KEY_Armenian_RA](https://docs.gtk.org/gdk4/const.KEY_Armenian_RA.html)
pub const KEY_Armenian_RA = 16778572;
/// const [KEY_Armenian_RE](https://docs.gtk.org/gdk4/const.KEY_Armenian_RE.html)
pub const KEY_Armenian_RE = 16778576;
/// const [KEY_Armenian_SE](https://docs.gtk.org/gdk4/const.KEY_Armenian_SE.html)
pub const KEY_Armenian_SE = 16778573;
/// const [KEY_Armenian_SHA](https://docs.gtk.org/gdk4/const.KEY_Armenian_SHA.html)
pub const KEY_Armenian_SHA = 16778567;
/// const [KEY_Armenian_TCHE](https://docs.gtk.org/gdk4/const.KEY_Armenian_TCHE.html)
pub const KEY_Armenian_TCHE = 16778563;
/// const [KEY_Armenian_TO](https://docs.gtk.org/gdk4/const.KEY_Armenian_TO.html)
pub const KEY_Armenian_TO = 16778553;
/// const [KEY_Armenian_TSA](https://docs.gtk.org/gdk4/const.KEY_Armenian_TSA.html)
pub const KEY_Armenian_TSA = 16778558;
/// const [KEY_Armenian_TSO](https://docs.gtk.org/gdk4/const.KEY_Armenian_TSO.html)
pub const KEY_Armenian_TSO = 16778577;
/// const [KEY_Armenian_TYUN](https://docs.gtk.org/gdk4/const.KEY_Armenian_TYUN.html)
pub const KEY_Armenian_TYUN = 16778575;
/// const [KEY_Armenian_VEV](https://docs.gtk.org/gdk4/const.KEY_Armenian_VEV.html)
pub const KEY_Armenian_VEV = 16778574;
/// const [KEY_Armenian_VO](https://docs.gtk.org/gdk4/const.KEY_Armenian_VO.html)
pub const KEY_Armenian_VO = 16778568;
/// const [KEY_Armenian_VYUN](https://docs.gtk.org/gdk4/const.KEY_Armenian_VYUN.html)
pub const KEY_Armenian_VYUN = 16778578;
/// const [KEY_Armenian_YECH](https://docs.gtk.org/gdk4/const.KEY_Armenian_YECH.html)
pub const KEY_Armenian_YECH = 16778549;
/// const [KEY_Armenian_ZA](https://docs.gtk.org/gdk4/const.KEY_Armenian_ZA.html)
pub const KEY_Armenian_ZA = 16778550;
/// const [KEY_Armenian_ZHE](https://docs.gtk.org/gdk4/const.KEY_Armenian_ZHE.html)
pub const KEY_Armenian_ZHE = 16778554;
/// const [KEY_Armenian_accent](https://docs.gtk.org/gdk4/const.KEY_Armenian_accent.html)
pub const KEY_Armenian_accent = 16778587;
/// const [KEY_Armenian_amanak](https://docs.gtk.org/gdk4/const.KEY_Armenian_amanak.html)
pub const KEY_Armenian_amanak = 16778588;
/// const [KEY_Armenian_apostrophe](https://docs.gtk.org/gdk4/const.KEY_Armenian_apostrophe.html)
pub const KEY_Armenian_apostrophe = 16778586;
/// const [KEY_Armenian_at](https://docs.gtk.org/gdk4/const.KEY_Armenian_at.html)
pub const KEY_Armenian_at = 16778600;
/// const [KEY_Armenian_ayb](https://docs.gtk.org/gdk4/const.KEY_Armenian_ayb.html)
pub const KEY_Armenian_ayb = 16778593;
/// const [KEY_Armenian_ben](https://docs.gtk.org/gdk4/const.KEY_Armenian_ben.html)
pub const KEY_Armenian_ben = 16778594;
/// const [KEY_Armenian_but](https://docs.gtk.org/gdk4/const.KEY_Armenian_but.html)
pub const KEY_Armenian_but = 16778589;
/// const [KEY_Armenian_cha](https://docs.gtk.org/gdk4/const.KEY_Armenian_cha.html)
pub const KEY_Armenian_cha = 16778617;
/// const [KEY_Armenian_da](https://docs.gtk.org/gdk4/const.KEY_Armenian_da.html)
pub const KEY_Armenian_da = 16778596;
/// const [KEY_Armenian_dza](https://docs.gtk.org/gdk4/const.KEY_Armenian_dza.html)
pub const KEY_Armenian_dza = 16778609;
/// const [KEY_Armenian_e](https://docs.gtk.org/gdk4/const.KEY_Armenian_e.html)
pub const KEY_Armenian_e = 16778599;
/// const [KEY_Armenian_exclam](https://docs.gtk.org/gdk4/const.KEY_Armenian_exclam.html)
pub const KEY_Armenian_exclam = 16778588;
/// const [KEY_Armenian_fe](https://docs.gtk.org/gdk4/const.KEY_Armenian_fe.html)
pub const KEY_Armenian_fe = 16778630;
/// const [KEY_Armenian_full_stop](https://docs.gtk.org/gdk4/const.KEY_Armenian_full_stop.html)
pub const KEY_Armenian_full_stop = 16778633;
/// const [KEY_Armenian_ghat](https://docs.gtk.org/gdk4/const.KEY_Armenian_ghat.html)
pub const KEY_Armenian_ghat = 16778610;
/// const [KEY_Armenian_gim](https://docs.gtk.org/gdk4/const.KEY_Armenian_gim.html)
pub const KEY_Armenian_gim = 16778595;
/// const [KEY_Armenian_hi](https://docs.gtk.org/gdk4/const.KEY_Armenian_hi.html)
pub const KEY_Armenian_hi = 16778613;
/// const [KEY_Armenian_ho](https://docs.gtk.org/gdk4/const.KEY_Armenian_ho.html)
pub const KEY_Armenian_ho = 16778608;
/// const [KEY_Armenian_hyphen](https://docs.gtk.org/gdk4/const.KEY_Armenian_hyphen.html)
pub const KEY_Armenian_hyphen = 16778634;
/// const [KEY_Armenian_ini](https://docs.gtk.org/gdk4/const.KEY_Armenian_ini.html)
pub const KEY_Armenian_ini = 16778603;
/// const [KEY_Armenian_je](https://docs.gtk.org/gdk4/const.KEY_Armenian_je.html)
pub const KEY_Armenian_je = 16778619;
/// const [KEY_Armenian_ke](https://docs.gtk.org/gdk4/const.KEY_Armenian_ke.html)
pub const KEY_Armenian_ke = 16778628;
/// const [KEY_Armenian_ken](https://docs.gtk.org/gdk4/const.KEY_Armenian_ken.html)
pub const KEY_Armenian_ken = 16778607;
/// const [KEY_Armenian_khe](https://docs.gtk.org/gdk4/const.KEY_Armenian_khe.html)
pub const KEY_Armenian_khe = 16778605;
/// const [KEY_Armenian_ligature_ew](https://docs.gtk.org/gdk4/const.KEY_Armenian_ligature_ew.html)
pub const KEY_Armenian_ligature_ew = 16778631;
/// const [KEY_Armenian_lyun](https://docs.gtk.org/gdk4/const.KEY_Armenian_lyun.html)
pub const KEY_Armenian_lyun = 16778604;
/// const [KEY_Armenian_men](https://docs.gtk.org/gdk4/const.KEY_Armenian_men.html)
pub const KEY_Armenian_men = 16778612;
/// const [KEY_Armenian_nu](https://docs.gtk.org/gdk4/const.KEY_Armenian_nu.html)
pub const KEY_Armenian_nu = 16778614;
/// const [KEY_Armenian_o](https://docs.gtk.org/gdk4/const.KEY_Armenian_o.html)
pub const KEY_Armenian_o = 16778629;
/// const [KEY_Armenian_paruyk](https://docs.gtk.org/gdk4/const.KEY_Armenian_paruyk.html)
pub const KEY_Armenian_paruyk = 16778590;
/// const [KEY_Armenian_pe](https://docs.gtk.org/gdk4/const.KEY_Armenian_pe.html)
pub const KEY_Armenian_pe = 16778618;
/// const [KEY_Armenian_pyur](https://docs.gtk.org/gdk4/const.KEY_Armenian_pyur.html)
pub const KEY_Armenian_pyur = 16778627;
/// const [KEY_Armenian_question](https://docs.gtk.org/gdk4/const.KEY_Armenian_question.html)
pub const KEY_Armenian_question = 16778590;
/// const [KEY_Armenian_ra](https://docs.gtk.org/gdk4/const.KEY_Armenian_ra.html)
pub const KEY_Armenian_ra = 16778620;
/// const [KEY_Armenian_re](https://docs.gtk.org/gdk4/const.KEY_Armenian_re.html)
pub const KEY_Armenian_re = 16778624;
/// const [KEY_Armenian_se](https://docs.gtk.org/gdk4/const.KEY_Armenian_se.html)
pub const KEY_Armenian_se = 16778621;
/// const [KEY_Armenian_separation_mark](https://docs.gtk.org/gdk4/const.KEY_Armenian_separation_mark.html)
pub const KEY_Armenian_separation_mark = 16778589;
/// const [KEY_Armenian_sha](https://docs.gtk.org/gdk4/const.KEY_Armenian_sha.html)
pub const KEY_Armenian_sha = 16778615;
/// const [KEY_Armenian_shesht](https://docs.gtk.org/gdk4/const.KEY_Armenian_shesht.html)
pub const KEY_Armenian_shesht = 16778587;
/// const [KEY_Armenian_tche](https://docs.gtk.org/gdk4/const.KEY_Armenian_tche.html)
pub const KEY_Armenian_tche = 16778611;
/// const [KEY_Armenian_to](https://docs.gtk.org/gdk4/const.KEY_Armenian_to.html)
pub const KEY_Armenian_to = 16778601;
/// const [KEY_Armenian_tsa](https://docs.gtk.org/gdk4/const.KEY_Armenian_tsa.html)
pub const KEY_Armenian_tsa = 16778606;
/// const [KEY_Armenian_tso](https://docs.gtk.org/gdk4/const.KEY_Armenian_tso.html)
pub const KEY_Armenian_tso = 16778625;
/// const [KEY_Armenian_tyun](https://docs.gtk.org/gdk4/const.KEY_Armenian_tyun.html)
pub const KEY_Armenian_tyun = 16778623;
/// const [KEY_Armenian_verjaket](https://docs.gtk.org/gdk4/const.KEY_Armenian_verjaket.html)
pub const KEY_Armenian_verjaket = 16778633;
/// const [KEY_Armenian_vev](https://docs.gtk.org/gdk4/const.KEY_Armenian_vev.html)
pub const KEY_Armenian_vev = 16778622;
/// const [KEY_Armenian_vo](https://docs.gtk.org/gdk4/const.KEY_Armenian_vo.html)
pub const KEY_Armenian_vo = 16778616;
/// const [KEY_Armenian_vyun](https://docs.gtk.org/gdk4/const.KEY_Armenian_vyun.html)
pub const KEY_Armenian_vyun = 16778626;
/// const [KEY_Armenian_yech](https://docs.gtk.org/gdk4/const.KEY_Armenian_yech.html)
pub const KEY_Armenian_yech = 16778597;
/// const [KEY_Armenian_yentamna](https://docs.gtk.org/gdk4/const.KEY_Armenian_yentamna.html)
pub const KEY_Armenian_yentamna = 16778634;
/// const [KEY_Armenian_za](https://docs.gtk.org/gdk4/const.KEY_Armenian_za.html)
pub const KEY_Armenian_za = 16778598;
/// const [KEY_Armenian_zhe](https://docs.gtk.org/gdk4/const.KEY_Armenian_zhe.html)
pub const KEY_Armenian_zhe = 16778602;
/// const [KEY_Atilde](https://docs.gtk.org/gdk4/const.KEY_Atilde.html)
pub const KEY_Atilde = 195;
/// const [KEY_AudibleBell_Enable](https://docs.gtk.org/gdk4/const.KEY_AudibleBell_Enable.html)
pub const KEY_AudibleBell_Enable = 65146;
/// const [KEY_AudioCycleTrack](https://docs.gtk.org/gdk4/const.KEY_AudioCycleTrack.html)
pub const KEY_AudioCycleTrack = 269025179;
/// const [KEY_AudioForward](https://docs.gtk.org/gdk4/const.KEY_AudioForward.html)
pub const KEY_AudioForward = 269025175;
/// const [KEY_AudioLowerVolume](https://docs.gtk.org/gdk4/const.KEY_AudioLowerVolume.html)
pub const KEY_AudioLowerVolume = 269025041;
/// const [KEY_AudioMedia](https://docs.gtk.org/gdk4/const.KEY_AudioMedia.html)
pub const KEY_AudioMedia = 269025074;
/// const [KEY_AudioMicMute](https://docs.gtk.org/gdk4/const.KEY_AudioMicMute.html)
pub const KEY_AudioMicMute = 269025202;
/// const [KEY_AudioMute](https://docs.gtk.org/gdk4/const.KEY_AudioMute.html)
pub const KEY_AudioMute = 269025042;
/// const [KEY_AudioNext](https://docs.gtk.org/gdk4/const.KEY_AudioNext.html)
pub const KEY_AudioNext = 269025047;
/// const [KEY_AudioPause](https://docs.gtk.org/gdk4/const.KEY_AudioPause.html)
pub const KEY_AudioPause = 269025073;
/// const [KEY_AudioPlay](https://docs.gtk.org/gdk4/const.KEY_AudioPlay.html)
pub const KEY_AudioPlay = 269025044;
/// const [KEY_AudioPreset](https://docs.gtk.org/gdk4/const.KEY_AudioPreset.html)
pub const KEY_AudioPreset = 269025206;
/// const [KEY_AudioPrev](https://docs.gtk.org/gdk4/const.KEY_AudioPrev.html)
pub const KEY_AudioPrev = 269025046;
/// const [KEY_AudioRaiseVolume](https://docs.gtk.org/gdk4/const.KEY_AudioRaiseVolume.html)
pub const KEY_AudioRaiseVolume = 269025043;
/// const [KEY_AudioRandomPlay](https://docs.gtk.org/gdk4/const.KEY_AudioRandomPlay.html)
pub const KEY_AudioRandomPlay = 269025177;
/// const [KEY_AudioRecord](https://docs.gtk.org/gdk4/const.KEY_AudioRecord.html)
pub const KEY_AudioRecord = 269025052;
/// const [KEY_AudioRepeat](https://docs.gtk.org/gdk4/const.KEY_AudioRepeat.html)
pub const KEY_AudioRepeat = 269025176;
/// const [KEY_AudioRewind](https://docs.gtk.org/gdk4/const.KEY_AudioRewind.html)
pub const KEY_AudioRewind = 269025086;
/// const [KEY_AudioStop](https://docs.gtk.org/gdk4/const.KEY_AudioStop.html)
pub const KEY_AudioStop = 269025045;
/// const [KEY_Away](https://docs.gtk.org/gdk4/const.KEY_Away.html)
pub const KEY_Away = 269025165;
/// const [KEY_B](https://docs.gtk.org/gdk4/const.KEY_B.html)
pub const KEY_B = 66;
/// const [KEY_Babovedot](https://docs.gtk.org/gdk4/const.KEY_Babovedot.html)
pub const KEY_Babovedot = 16784898;
/// const [KEY_Back](https://docs.gtk.org/gdk4/const.KEY_Back.html)
pub const KEY_Back = 269025062;
/// const [KEY_BackForward](https://docs.gtk.org/gdk4/const.KEY_BackForward.html)
pub const KEY_BackForward = 269025087;
/// const [KEY_BackSpace](https://docs.gtk.org/gdk4/const.KEY_BackSpace.html)
pub const KEY_BackSpace = 65288;
/// const [KEY_Battery](https://docs.gtk.org/gdk4/const.KEY_Battery.html)
pub const KEY_Battery = 269025171;
/// const [KEY_Begin](https://docs.gtk.org/gdk4/const.KEY_Begin.html)
pub const KEY_Begin = 65368;
/// const [KEY_Blue](https://docs.gtk.org/gdk4/const.KEY_Blue.html)
pub const KEY_Blue = 269025190;
/// const [KEY_Bluetooth](https://docs.gtk.org/gdk4/const.KEY_Bluetooth.html)
pub const KEY_Bluetooth = 269025172;
/// const [KEY_Book](https://docs.gtk.org/gdk4/const.KEY_Book.html)
pub const KEY_Book = 269025106;
/// const [KEY_BounceKeys_Enable](https://docs.gtk.org/gdk4/const.KEY_BounceKeys_Enable.html)
pub const KEY_BounceKeys_Enable = 65140;
/// const [KEY_Break](https://docs.gtk.org/gdk4/const.KEY_Break.html)
pub const KEY_Break = 65387;
/// const [KEY_BrightnessAdjust](https://docs.gtk.org/gdk4/const.KEY_BrightnessAdjust.html)
pub const KEY_BrightnessAdjust = 269025083;
/// const [KEY_Byelorussian_SHORTU](https://docs.gtk.org/gdk4/const.KEY_Byelorussian_SHORTU.html)
pub const KEY_Byelorussian_SHORTU = 1726;
/// const [KEY_Byelorussian_shortu](https://docs.gtk.org/gdk4/const.KEY_Byelorussian_shortu.html)
pub const KEY_Byelorussian_shortu = 1710;
/// const [KEY_C](https://docs.gtk.org/gdk4/const.KEY_C.html)
pub const KEY_C = 67;
/// const [KEY_CD](https://docs.gtk.org/gdk4/const.KEY_CD.html)
pub const KEY_CD = 269025107;
/// const [KEY_CH](https://docs.gtk.org/gdk4/const.KEY_CH.html)
pub const KEY_CH = 65186;
/// const [KEY_C_H](https://docs.gtk.org/gdk4/const.KEY_C_H.html)
pub const KEY_C_H = 65189;
/// const [KEY_C_h](https://docs.gtk.org/gdk4/const.KEY_C_h.html)
pub const KEY_C_h = 65188;
/// const [KEY_Cabovedot](https://docs.gtk.org/gdk4/const.KEY_Cabovedot.html)
pub const KEY_Cabovedot = 709;
/// const [KEY_Cacute](https://docs.gtk.org/gdk4/const.KEY_Cacute.html)
pub const KEY_Cacute = 454;
/// const [KEY_Calculator](https://docs.gtk.org/gdk4/const.KEY_Calculator.html)
pub const KEY_Calculator = 269025053;
/// const [KEY_Calendar](https://docs.gtk.org/gdk4/const.KEY_Calendar.html)
pub const KEY_Calendar = 269025056;
/// const [KEY_Cancel](https://docs.gtk.org/gdk4/const.KEY_Cancel.html)
pub const KEY_Cancel = 65385;
/// const [KEY_Caps_Lock](https://docs.gtk.org/gdk4/const.KEY_Caps_Lock.html)
pub const KEY_Caps_Lock = 65509;
/// const [KEY_Ccaron](https://docs.gtk.org/gdk4/const.KEY_Ccaron.html)
pub const KEY_Ccaron = 456;
/// const [KEY_Ccedilla](https://docs.gtk.org/gdk4/const.KEY_Ccedilla.html)
pub const KEY_Ccedilla = 199;
/// const [KEY_Ccircumflex](https://docs.gtk.org/gdk4/const.KEY_Ccircumflex.html)
pub const KEY_Ccircumflex = 710;
/// const [KEY_Ch](https://docs.gtk.org/gdk4/const.KEY_Ch.html)
pub const KEY_Ch = 65185;
/// const [KEY_Clear](https://docs.gtk.org/gdk4/const.KEY_Clear.html)
pub const KEY_Clear = 65291;
/// const [KEY_ClearGrab](https://docs.gtk.org/gdk4/const.KEY_ClearGrab.html)
pub const KEY_ClearGrab = 269024801;
/// const [KEY_Close](https://docs.gtk.org/gdk4/const.KEY_Close.html)
pub const KEY_Close = 269025110;
/// const [KEY_Codeinput](https://docs.gtk.org/gdk4/const.KEY_Codeinput.html)
pub const KEY_Codeinput = 65335;
/// const [KEY_ColonSign](https://docs.gtk.org/gdk4/const.KEY_ColonSign.html)
pub const KEY_ColonSign = 16785569;
/// const [KEY_Community](https://docs.gtk.org/gdk4/const.KEY_Community.html)
pub const KEY_Community = 269025085;
/// const [KEY_ContrastAdjust](https://docs.gtk.org/gdk4/const.KEY_ContrastAdjust.html)
pub const KEY_ContrastAdjust = 269025058;
/// const [KEY_Control_L](https://docs.gtk.org/gdk4/const.KEY_Control_L.html)
pub const KEY_Control_L = 65507;
/// const [KEY_Control_R](https://docs.gtk.org/gdk4/const.KEY_Control_R.html)
pub const KEY_Control_R = 65508;
/// const [KEY_Copy](https://docs.gtk.org/gdk4/const.KEY_Copy.html)
pub const KEY_Copy = 269025111;
/// const [KEY_CruzeiroSign](https://docs.gtk.org/gdk4/const.KEY_CruzeiroSign.html)
pub const KEY_CruzeiroSign = 16785570;
/// const [KEY_Cut](https://docs.gtk.org/gdk4/const.KEY_Cut.html)
pub const KEY_Cut = 269025112;
/// const [KEY_CycleAngle](https://docs.gtk.org/gdk4/const.KEY_CycleAngle.html)
pub const KEY_CycleAngle = 269025180;
/// const [KEY_Cyrillic_A](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_A.html)
pub const KEY_Cyrillic_A = 1761;
/// const [KEY_Cyrillic_BE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_BE.html)
pub const KEY_Cyrillic_BE = 1762;
/// const [KEY_Cyrillic_CHE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_CHE.html)
pub const KEY_Cyrillic_CHE = 1790;
/// const [KEY_Cyrillic_CHE_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_CHE_descender.html)
pub const KEY_Cyrillic_CHE_descender = 16778422;
/// const [KEY_Cyrillic_CHE_vertstroke](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_CHE_vertstroke.html)
pub const KEY_Cyrillic_CHE_vertstroke = 16778424;
/// const [KEY_Cyrillic_DE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_DE.html)
pub const KEY_Cyrillic_DE = 1764;
/// const [KEY_Cyrillic_DZHE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_DZHE.html)
pub const KEY_Cyrillic_DZHE = 1727;
/// const [KEY_Cyrillic_E](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_E.html)
pub const KEY_Cyrillic_E = 1788;
/// const [KEY_Cyrillic_EF](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_EF.html)
pub const KEY_Cyrillic_EF = 1766;
/// const [KEY_Cyrillic_EL](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_EL.html)
pub const KEY_Cyrillic_EL = 1772;
/// const [KEY_Cyrillic_EM](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_EM.html)
pub const KEY_Cyrillic_EM = 1773;
/// const [KEY_Cyrillic_EN](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_EN.html)
pub const KEY_Cyrillic_EN = 1774;
/// const [KEY_Cyrillic_EN_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_EN_descender.html)
pub const KEY_Cyrillic_EN_descender = 16778402;
/// const [KEY_Cyrillic_ER](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ER.html)
pub const KEY_Cyrillic_ER = 1778;
/// const [KEY_Cyrillic_ES](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ES.html)
pub const KEY_Cyrillic_ES = 1779;
/// const [KEY_Cyrillic_GHE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_GHE.html)
pub const KEY_Cyrillic_GHE = 1767;
/// const [KEY_Cyrillic_GHE_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_GHE_bar.html)
pub const KEY_Cyrillic_GHE_bar = 16778386;
/// const [KEY_Cyrillic_HA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_HA.html)
pub const KEY_Cyrillic_HA = 1768;
/// const [KEY_Cyrillic_HARDSIGN](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_HARDSIGN.html)
pub const KEY_Cyrillic_HARDSIGN = 1791;
/// const [KEY_Cyrillic_HA_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_HA_descender.html)
pub const KEY_Cyrillic_HA_descender = 16778418;
/// const [KEY_Cyrillic_I](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_I.html)
pub const KEY_Cyrillic_I = 1769;
/// const [KEY_Cyrillic_IE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_IE.html)
pub const KEY_Cyrillic_IE = 1765;
/// const [KEY_Cyrillic_IO](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_IO.html)
pub const KEY_Cyrillic_IO = 1715;
/// const [KEY_Cyrillic_I_macron](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_I_macron.html)
pub const KEY_Cyrillic_I_macron = 16778466;
/// const [KEY_Cyrillic_JE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_JE.html)
pub const KEY_Cyrillic_JE = 1720;
/// const [KEY_Cyrillic_KA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_KA.html)
pub const KEY_Cyrillic_KA = 1771;
/// const [KEY_Cyrillic_KA_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_KA_descender.html)
pub const KEY_Cyrillic_KA_descender = 16778394;
/// const [KEY_Cyrillic_KA_vertstroke](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_KA_vertstroke.html)
pub const KEY_Cyrillic_KA_vertstroke = 16778396;
/// const [KEY_Cyrillic_LJE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_LJE.html)
pub const KEY_Cyrillic_LJE = 1721;
/// const [KEY_Cyrillic_NJE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_NJE.html)
pub const KEY_Cyrillic_NJE = 1722;
/// const [KEY_Cyrillic_O](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_O.html)
pub const KEY_Cyrillic_O = 1775;
/// const [KEY_Cyrillic_O_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_O_bar.html)
pub const KEY_Cyrillic_O_bar = 16778472;
/// const [KEY_Cyrillic_PE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_PE.html)
pub const KEY_Cyrillic_PE = 1776;
/// const [KEY_Cyrillic_SCHWA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SCHWA.html)
pub const KEY_Cyrillic_SCHWA = 16778456;
/// const [KEY_Cyrillic_SHA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SHA.html)
pub const KEY_Cyrillic_SHA = 1787;
/// const [KEY_Cyrillic_SHCHA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SHCHA.html)
pub const KEY_Cyrillic_SHCHA = 1789;
/// const [KEY_Cyrillic_SHHA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SHHA.html)
pub const KEY_Cyrillic_SHHA = 16778426;
/// const [KEY_Cyrillic_SHORTI](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SHORTI.html)
pub const KEY_Cyrillic_SHORTI = 1770;
/// const [KEY_Cyrillic_SOFTSIGN](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_SOFTSIGN.html)
pub const KEY_Cyrillic_SOFTSIGN = 1784;
/// const [KEY_Cyrillic_TE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_TE.html)
pub const KEY_Cyrillic_TE = 1780;
/// const [KEY_Cyrillic_TSE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_TSE.html)
pub const KEY_Cyrillic_TSE = 1763;
/// const [KEY_Cyrillic_U](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_U.html)
pub const KEY_Cyrillic_U = 1781;
/// const [KEY_Cyrillic_U_macron](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_U_macron.html)
pub const KEY_Cyrillic_U_macron = 16778478;
/// const [KEY_Cyrillic_U_straight](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_U_straight.html)
pub const KEY_Cyrillic_U_straight = 16778414;
/// const [KEY_Cyrillic_U_straight_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_U_straight_bar.html)
pub const KEY_Cyrillic_U_straight_bar = 16778416;
/// const [KEY_Cyrillic_VE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_VE.html)
pub const KEY_Cyrillic_VE = 1783;
/// const [KEY_Cyrillic_YA](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_YA.html)
pub const KEY_Cyrillic_YA = 1777;
/// const [KEY_Cyrillic_YERU](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_YERU.html)
pub const KEY_Cyrillic_YERU = 1785;
/// const [KEY_Cyrillic_YU](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_YU.html)
pub const KEY_Cyrillic_YU = 1760;
/// const [KEY_Cyrillic_ZE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ZE.html)
pub const KEY_Cyrillic_ZE = 1786;
/// const [KEY_Cyrillic_ZHE](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ZHE.html)
pub const KEY_Cyrillic_ZHE = 1782;
/// const [KEY_Cyrillic_ZHE_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ZHE_descender.html)
pub const KEY_Cyrillic_ZHE_descender = 16778390;
/// const [KEY_Cyrillic_a](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_a.html)
pub const KEY_Cyrillic_a = 1729;
/// const [KEY_Cyrillic_be](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_be.html)
pub const KEY_Cyrillic_be = 1730;
/// const [KEY_Cyrillic_che](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_che.html)
pub const KEY_Cyrillic_che = 1758;
/// const [KEY_Cyrillic_che_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_che_descender.html)
pub const KEY_Cyrillic_che_descender = 16778423;
/// const [KEY_Cyrillic_che_vertstroke](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_che_vertstroke.html)
pub const KEY_Cyrillic_che_vertstroke = 16778425;
/// const [KEY_Cyrillic_de](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_de.html)
pub const KEY_Cyrillic_de = 1732;
/// const [KEY_Cyrillic_dzhe](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_dzhe.html)
pub const KEY_Cyrillic_dzhe = 1711;
/// const [KEY_Cyrillic_e](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_e.html)
pub const KEY_Cyrillic_e = 1756;
/// const [KEY_Cyrillic_ef](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ef.html)
pub const KEY_Cyrillic_ef = 1734;
/// const [KEY_Cyrillic_el](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_el.html)
pub const KEY_Cyrillic_el = 1740;
/// const [KEY_Cyrillic_em](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_em.html)
pub const KEY_Cyrillic_em = 1741;
/// const [KEY_Cyrillic_en](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_en.html)
pub const KEY_Cyrillic_en = 1742;
/// const [KEY_Cyrillic_en_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_en_descender.html)
pub const KEY_Cyrillic_en_descender = 16778403;
/// const [KEY_Cyrillic_er](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_er.html)
pub const KEY_Cyrillic_er = 1746;
/// const [KEY_Cyrillic_es](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_es.html)
pub const KEY_Cyrillic_es = 1747;
/// const [KEY_Cyrillic_ghe](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ghe.html)
pub const KEY_Cyrillic_ghe = 1735;
/// const [KEY_Cyrillic_ghe_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ghe_bar.html)
pub const KEY_Cyrillic_ghe_bar = 16778387;
/// const [KEY_Cyrillic_ha](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ha.html)
pub const KEY_Cyrillic_ha = 1736;
/// const [KEY_Cyrillic_ha_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ha_descender.html)
pub const KEY_Cyrillic_ha_descender = 16778419;
/// const [KEY_Cyrillic_hardsign](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_hardsign.html)
pub const KEY_Cyrillic_hardsign = 1759;
/// const [KEY_Cyrillic_i](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_i.html)
pub const KEY_Cyrillic_i = 1737;
/// const [KEY_Cyrillic_i_macron](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_i_macron.html)
pub const KEY_Cyrillic_i_macron = 16778467;
/// const [KEY_Cyrillic_ie](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ie.html)
pub const KEY_Cyrillic_ie = 1733;
/// const [KEY_Cyrillic_io](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_io.html)
pub const KEY_Cyrillic_io = 1699;
/// const [KEY_Cyrillic_je](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_je.html)
pub const KEY_Cyrillic_je = 1704;
/// const [KEY_Cyrillic_ka](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ka.html)
pub const KEY_Cyrillic_ka = 1739;
/// const [KEY_Cyrillic_ka_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ka_descender.html)
pub const KEY_Cyrillic_ka_descender = 16778395;
/// const [KEY_Cyrillic_ka_vertstroke](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ka_vertstroke.html)
pub const KEY_Cyrillic_ka_vertstroke = 16778397;
/// const [KEY_Cyrillic_lje](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_lje.html)
pub const KEY_Cyrillic_lje = 1705;
/// const [KEY_Cyrillic_nje](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_nje.html)
pub const KEY_Cyrillic_nje = 1706;
/// const [KEY_Cyrillic_o](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_o.html)
pub const KEY_Cyrillic_o = 1743;
/// const [KEY_Cyrillic_o_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_o_bar.html)
pub const KEY_Cyrillic_o_bar = 16778473;
/// const [KEY_Cyrillic_pe](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_pe.html)
pub const KEY_Cyrillic_pe = 1744;
/// const [KEY_Cyrillic_schwa](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_schwa.html)
pub const KEY_Cyrillic_schwa = 16778457;
/// const [KEY_Cyrillic_sha](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_sha.html)
pub const KEY_Cyrillic_sha = 1755;
/// const [KEY_Cyrillic_shcha](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_shcha.html)
pub const KEY_Cyrillic_shcha = 1757;
/// const [KEY_Cyrillic_shha](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_shha.html)
pub const KEY_Cyrillic_shha = 16778427;
/// const [KEY_Cyrillic_shorti](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_shorti.html)
pub const KEY_Cyrillic_shorti = 1738;
/// const [KEY_Cyrillic_softsign](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_softsign.html)
pub const KEY_Cyrillic_softsign = 1752;
/// const [KEY_Cyrillic_te](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_te.html)
pub const KEY_Cyrillic_te = 1748;
/// const [KEY_Cyrillic_tse](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_tse.html)
pub const KEY_Cyrillic_tse = 1731;
/// const [KEY_Cyrillic_u](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_u.html)
pub const KEY_Cyrillic_u = 1749;
/// const [KEY_Cyrillic_u_macron](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_u_macron.html)
pub const KEY_Cyrillic_u_macron = 16778479;
/// const [KEY_Cyrillic_u_straight](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_u_straight.html)
pub const KEY_Cyrillic_u_straight = 16778415;
/// const [KEY_Cyrillic_u_straight_bar](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_u_straight_bar.html)
pub const KEY_Cyrillic_u_straight_bar = 16778417;
/// const [KEY_Cyrillic_ve](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ve.html)
pub const KEY_Cyrillic_ve = 1751;
/// const [KEY_Cyrillic_ya](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ya.html)
pub const KEY_Cyrillic_ya = 1745;
/// const [KEY_Cyrillic_yeru](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_yeru.html)
pub const KEY_Cyrillic_yeru = 1753;
/// const [KEY_Cyrillic_yu](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_yu.html)
pub const KEY_Cyrillic_yu = 1728;
/// const [KEY_Cyrillic_ze](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_ze.html)
pub const KEY_Cyrillic_ze = 1754;
/// const [KEY_Cyrillic_zhe](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_zhe.html)
pub const KEY_Cyrillic_zhe = 1750;
/// const [KEY_Cyrillic_zhe_descender](https://docs.gtk.org/gdk4/const.KEY_Cyrillic_zhe_descender.html)
pub const KEY_Cyrillic_zhe_descender = 16778391;
/// const [KEY_D](https://docs.gtk.org/gdk4/const.KEY_D.html)
pub const KEY_D = 68;
/// const [KEY_DOS](https://docs.gtk.org/gdk4/const.KEY_DOS.html)
pub const KEY_DOS = 269025114;
/// const [KEY_Dabovedot](https://docs.gtk.org/gdk4/const.KEY_Dabovedot.html)
pub const KEY_Dabovedot = 16784906;
/// const [KEY_Dcaron](https://docs.gtk.org/gdk4/const.KEY_Dcaron.html)
pub const KEY_Dcaron = 463;
/// const [KEY_Delete](https://docs.gtk.org/gdk4/const.KEY_Delete.html)
pub const KEY_Delete = 65535;
/// const [KEY_Display](https://docs.gtk.org/gdk4/const.KEY_Display.html)
pub const KEY_Display = 269025113;
/// const [KEY_Documents](https://docs.gtk.org/gdk4/const.KEY_Documents.html)
pub const KEY_Documents = 269025115;
/// const [KEY_DongSign](https://docs.gtk.org/gdk4/const.KEY_DongSign.html)
pub const KEY_DongSign = 16785579;
/// const [KEY_Down](https://docs.gtk.org/gdk4/const.KEY_Down.html)
pub const KEY_Down = 65364;
/// const [KEY_Dstroke](https://docs.gtk.org/gdk4/const.KEY_Dstroke.html)
pub const KEY_Dstroke = 464;
/// const [KEY_E](https://docs.gtk.org/gdk4/const.KEY_E.html)
pub const KEY_E = 69;
/// const [KEY_ENG](https://docs.gtk.org/gdk4/const.KEY_ENG.html)
pub const KEY_ENG = 957;
/// const [KEY_ETH](https://docs.gtk.org/gdk4/const.KEY_ETH.html)
pub const KEY_ETH = 208;
/// const [KEY_EZH](https://docs.gtk.org/gdk4/const.KEY_EZH.html)
pub const KEY_EZH = 16777655;
/// const [KEY_Eabovedot](https://docs.gtk.org/gdk4/const.KEY_Eabovedot.html)
pub const KEY_Eabovedot = 972;
/// const [KEY_Eacute](https://docs.gtk.org/gdk4/const.KEY_Eacute.html)
pub const KEY_Eacute = 201;
/// const [KEY_Ebelowdot](https://docs.gtk.org/gdk4/const.KEY_Ebelowdot.html)
pub const KEY_Ebelowdot = 16785080;
/// const [KEY_Ecaron](https://docs.gtk.org/gdk4/const.KEY_Ecaron.html)
pub const KEY_Ecaron = 460;
/// const [KEY_Ecircumflex](https://docs.gtk.org/gdk4/const.KEY_Ecircumflex.html)
pub const KEY_Ecircumflex = 202;
/// const [KEY_Ecircumflexacute](https://docs.gtk.org/gdk4/const.KEY_Ecircumflexacute.html)
pub const KEY_Ecircumflexacute = 16785086;
/// const [KEY_Ecircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_Ecircumflexbelowdot.html)
pub const KEY_Ecircumflexbelowdot = 16785094;
/// const [KEY_Ecircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_Ecircumflexgrave.html)
pub const KEY_Ecircumflexgrave = 16785088;
/// const [KEY_Ecircumflexhook](https://docs.gtk.org/gdk4/const.KEY_Ecircumflexhook.html)
pub const KEY_Ecircumflexhook = 16785090;
/// const [KEY_Ecircumflextilde](https://docs.gtk.org/gdk4/const.KEY_Ecircumflextilde.html)
pub const KEY_Ecircumflextilde = 16785092;
/// const [KEY_EcuSign](https://docs.gtk.org/gdk4/const.KEY_EcuSign.html)
pub const KEY_EcuSign = 16785568;
/// const [KEY_Ediaeresis](https://docs.gtk.org/gdk4/const.KEY_Ediaeresis.html)
pub const KEY_Ediaeresis = 203;
/// const [KEY_Egrave](https://docs.gtk.org/gdk4/const.KEY_Egrave.html)
pub const KEY_Egrave = 200;
/// const [KEY_Ehook](https://docs.gtk.org/gdk4/const.KEY_Ehook.html)
pub const KEY_Ehook = 16785082;
/// const [KEY_Eisu_Shift](https://docs.gtk.org/gdk4/const.KEY_Eisu_Shift.html)
pub const KEY_Eisu_Shift = 65327;
/// const [KEY_Eisu_toggle](https://docs.gtk.org/gdk4/const.KEY_Eisu_toggle.html)
pub const KEY_Eisu_toggle = 65328;
/// const [KEY_Eject](https://docs.gtk.org/gdk4/const.KEY_Eject.html)
pub const KEY_Eject = 269025068;
/// const [KEY_Emacron](https://docs.gtk.org/gdk4/const.KEY_Emacron.html)
pub const KEY_Emacron = 938;
/// const [KEY_End](https://docs.gtk.org/gdk4/const.KEY_End.html)
pub const KEY_End = 65367;
/// const [KEY_Eogonek](https://docs.gtk.org/gdk4/const.KEY_Eogonek.html)
pub const KEY_Eogonek = 458;
/// const [KEY_Escape](https://docs.gtk.org/gdk4/const.KEY_Escape.html)
pub const KEY_Escape = 65307;
/// const [KEY_Eth](https://docs.gtk.org/gdk4/const.KEY_Eth.html)
pub const KEY_Eth = 208;
/// const [KEY_Etilde](https://docs.gtk.org/gdk4/const.KEY_Etilde.html)
pub const KEY_Etilde = 16785084;
/// const [KEY_EuroSign](https://docs.gtk.org/gdk4/const.KEY_EuroSign.html)
pub const KEY_EuroSign = 8364;
/// const [KEY_Excel](https://docs.gtk.org/gdk4/const.KEY_Excel.html)
pub const KEY_Excel = 269025116;
/// const [KEY_Execute](https://docs.gtk.org/gdk4/const.KEY_Execute.html)
pub const KEY_Execute = 65378;
/// const [KEY_Explorer](https://docs.gtk.org/gdk4/const.KEY_Explorer.html)
pub const KEY_Explorer = 269025117;
/// const [KEY_F](https://docs.gtk.org/gdk4/const.KEY_F.html)
pub const KEY_F = 70;
/// const [KEY_F1](https://docs.gtk.org/gdk4/const.KEY_F1.html)
pub const KEY_F1 = 65470;
/// const [KEY_F10](https://docs.gtk.org/gdk4/const.KEY_F10.html)
pub const KEY_F10 = 65479;
/// const [KEY_F11](https://docs.gtk.org/gdk4/const.KEY_F11.html)
pub const KEY_F11 = 65480;
/// const [KEY_F12](https://docs.gtk.org/gdk4/const.KEY_F12.html)
pub const KEY_F12 = 65481;
/// const [KEY_F13](https://docs.gtk.org/gdk4/const.KEY_F13.html)
pub const KEY_F13 = 65482;
/// const [KEY_F14](https://docs.gtk.org/gdk4/const.KEY_F14.html)
pub const KEY_F14 = 65483;
/// const [KEY_F15](https://docs.gtk.org/gdk4/const.KEY_F15.html)
pub const KEY_F15 = 65484;
/// const [KEY_F16](https://docs.gtk.org/gdk4/const.KEY_F16.html)
pub const KEY_F16 = 65485;
/// const [KEY_F17](https://docs.gtk.org/gdk4/const.KEY_F17.html)
pub const KEY_F17 = 65486;
/// const [KEY_F18](https://docs.gtk.org/gdk4/const.KEY_F18.html)
pub const KEY_F18 = 65487;
/// const [KEY_F19](https://docs.gtk.org/gdk4/const.KEY_F19.html)
pub const KEY_F19 = 65488;
/// const [KEY_F2](https://docs.gtk.org/gdk4/const.KEY_F2.html)
pub const KEY_F2 = 65471;
/// const [KEY_F20](https://docs.gtk.org/gdk4/const.KEY_F20.html)
pub const KEY_F20 = 65489;
/// const [KEY_F21](https://docs.gtk.org/gdk4/const.KEY_F21.html)
pub const KEY_F21 = 65490;
/// const [KEY_F22](https://docs.gtk.org/gdk4/const.KEY_F22.html)
pub const KEY_F22 = 65491;
/// const [KEY_F23](https://docs.gtk.org/gdk4/const.KEY_F23.html)
pub const KEY_F23 = 65492;
/// const [KEY_F24](https://docs.gtk.org/gdk4/const.KEY_F24.html)
pub const KEY_F24 = 65493;
/// const [KEY_F25](https://docs.gtk.org/gdk4/const.KEY_F25.html)
pub const KEY_F25 = 65494;
/// const [KEY_F26](https://docs.gtk.org/gdk4/const.KEY_F26.html)
pub const KEY_F26 = 65495;
/// const [KEY_F27](https://docs.gtk.org/gdk4/const.KEY_F27.html)
pub const KEY_F27 = 65496;
/// const [KEY_F28](https://docs.gtk.org/gdk4/const.KEY_F28.html)
pub const KEY_F28 = 65497;
/// const [KEY_F29](https://docs.gtk.org/gdk4/const.KEY_F29.html)
pub const KEY_F29 = 65498;
/// const [KEY_F3](https://docs.gtk.org/gdk4/const.KEY_F3.html)
pub const KEY_F3 = 65472;
/// const [KEY_F30](https://docs.gtk.org/gdk4/const.KEY_F30.html)
pub const KEY_F30 = 65499;
/// const [KEY_F31](https://docs.gtk.org/gdk4/const.KEY_F31.html)
pub const KEY_F31 = 65500;
/// const [KEY_F32](https://docs.gtk.org/gdk4/const.KEY_F32.html)
pub const KEY_F32 = 65501;
/// const [KEY_F33](https://docs.gtk.org/gdk4/const.KEY_F33.html)
pub const KEY_F33 = 65502;
/// const [KEY_F34](https://docs.gtk.org/gdk4/const.KEY_F34.html)
pub const KEY_F34 = 65503;
/// const [KEY_F35](https://docs.gtk.org/gdk4/const.KEY_F35.html)
pub const KEY_F35 = 65504;
/// const [KEY_F4](https://docs.gtk.org/gdk4/const.KEY_F4.html)
pub const KEY_F4 = 65473;
/// const [KEY_F5](https://docs.gtk.org/gdk4/const.KEY_F5.html)
pub const KEY_F5 = 65474;
/// const [KEY_F6](https://docs.gtk.org/gdk4/const.KEY_F6.html)
pub const KEY_F6 = 65475;
/// const [KEY_F7](https://docs.gtk.org/gdk4/const.KEY_F7.html)
pub const KEY_F7 = 65476;
/// const [KEY_F8](https://docs.gtk.org/gdk4/const.KEY_F8.html)
pub const KEY_F8 = 65477;
/// const [KEY_F9](https://docs.gtk.org/gdk4/const.KEY_F9.html)
pub const KEY_F9 = 65478;
/// const [KEY_FFrancSign](https://docs.gtk.org/gdk4/const.KEY_FFrancSign.html)
pub const KEY_FFrancSign = 16785571;
/// const [KEY_Fabovedot](https://docs.gtk.org/gdk4/const.KEY_Fabovedot.html)
pub const KEY_Fabovedot = 16784926;
/// const [KEY_Farsi_0](https://docs.gtk.org/gdk4/const.KEY_Farsi_0.html)
pub const KEY_Farsi_0 = 16778992;
/// const [KEY_Farsi_1](https://docs.gtk.org/gdk4/const.KEY_Farsi_1.html)
pub const KEY_Farsi_1 = 16778993;
/// const [KEY_Farsi_2](https://docs.gtk.org/gdk4/const.KEY_Farsi_2.html)
pub const KEY_Farsi_2 = 16778994;
/// const [KEY_Farsi_3](https://docs.gtk.org/gdk4/const.KEY_Farsi_3.html)
pub const KEY_Farsi_3 = 16778995;
/// const [KEY_Farsi_4](https://docs.gtk.org/gdk4/const.KEY_Farsi_4.html)
pub const KEY_Farsi_4 = 16778996;
/// const [KEY_Farsi_5](https://docs.gtk.org/gdk4/const.KEY_Farsi_5.html)
pub const KEY_Farsi_5 = 16778997;
/// const [KEY_Farsi_6](https://docs.gtk.org/gdk4/const.KEY_Farsi_6.html)
pub const KEY_Farsi_6 = 16778998;
/// const [KEY_Farsi_7](https://docs.gtk.org/gdk4/const.KEY_Farsi_7.html)
pub const KEY_Farsi_7 = 16778999;
/// const [KEY_Farsi_8](https://docs.gtk.org/gdk4/const.KEY_Farsi_8.html)
pub const KEY_Farsi_8 = 16779000;
/// const [KEY_Farsi_9](https://docs.gtk.org/gdk4/const.KEY_Farsi_9.html)
pub const KEY_Farsi_9 = 16779001;
/// const [KEY_Farsi_yeh](https://docs.gtk.org/gdk4/const.KEY_Farsi_yeh.html)
pub const KEY_Farsi_yeh = 16778956;
/// const [KEY_Favorites](https://docs.gtk.org/gdk4/const.KEY_Favorites.html)
pub const KEY_Favorites = 269025072;
/// const [KEY_Finance](https://docs.gtk.org/gdk4/const.KEY_Finance.html)
pub const KEY_Finance = 269025084;
/// const [KEY_Find](https://docs.gtk.org/gdk4/const.KEY_Find.html)
pub const KEY_Find = 65384;
/// const [KEY_First_Virtual_Screen](https://docs.gtk.org/gdk4/const.KEY_First_Virtual_Screen.html)
pub const KEY_First_Virtual_Screen = 65232;
/// const [KEY_Forward](https://docs.gtk.org/gdk4/const.KEY_Forward.html)
pub const KEY_Forward = 269025063;
/// const [KEY_FrameBack](https://docs.gtk.org/gdk4/const.KEY_FrameBack.html)
pub const KEY_FrameBack = 269025181;
/// const [KEY_FrameForward](https://docs.gtk.org/gdk4/const.KEY_FrameForward.html)
pub const KEY_FrameForward = 269025182;
/// const [KEY_G](https://docs.gtk.org/gdk4/const.KEY_G.html)
pub const KEY_G = 71;
/// const [KEY_Gabovedot](https://docs.gtk.org/gdk4/const.KEY_Gabovedot.html)
pub const KEY_Gabovedot = 725;
/// const [KEY_Game](https://docs.gtk.org/gdk4/const.KEY_Game.html)
pub const KEY_Game = 269025118;
/// const [KEY_Gbreve](https://docs.gtk.org/gdk4/const.KEY_Gbreve.html)
pub const KEY_Gbreve = 683;
/// const [KEY_Gcaron](https://docs.gtk.org/gdk4/const.KEY_Gcaron.html)
pub const KEY_Gcaron = 16777702;
/// const [KEY_Gcedilla](https://docs.gtk.org/gdk4/const.KEY_Gcedilla.html)
pub const KEY_Gcedilla = 939;
/// const [KEY_Gcircumflex](https://docs.gtk.org/gdk4/const.KEY_Gcircumflex.html)
pub const KEY_Gcircumflex = 728;
/// const [KEY_Georgian_an](https://docs.gtk.org/gdk4/const.KEY_Georgian_an.html)
pub const KEY_Georgian_an = 16781520;
/// const [KEY_Georgian_ban](https://docs.gtk.org/gdk4/const.KEY_Georgian_ban.html)
pub const KEY_Georgian_ban = 16781521;
/// const [KEY_Georgian_can](https://docs.gtk.org/gdk4/const.KEY_Georgian_can.html)
pub const KEY_Georgian_can = 16781546;
/// const [KEY_Georgian_char](https://docs.gtk.org/gdk4/const.KEY_Georgian_char.html)
pub const KEY_Georgian_char = 16781549;
/// const [KEY_Georgian_chin](https://docs.gtk.org/gdk4/const.KEY_Georgian_chin.html)
pub const KEY_Georgian_chin = 16781545;
/// const [KEY_Georgian_cil](https://docs.gtk.org/gdk4/const.KEY_Georgian_cil.html)
pub const KEY_Georgian_cil = 16781548;
/// const [KEY_Georgian_don](https://docs.gtk.org/gdk4/const.KEY_Georgian_don.html)
pub const KEY_Georgian_don = 16781523;
/// const [KEY_Georgian_en](https://docs.gtk.org/gdk4/const.KEY_Georgian_en.html)
pub const KEY_Georgian_en = 16781524;
/// const [KEY_Georgian_fi](https://docs.gtk.org/gdk4/const.KEY_Georgian_fi.html)
pub const KEY_Georgian_fi = 16781558;
/// const [KEY_Georgian_gan](https://docs.gtk.org/gdk4/const.KEY_Georgian_gan.html)
pub const KEY_Georgian_gan = 16781522;
/// const [KEY_Georgian_ghan](https://docs.gtk.org/gdk4/const.KEY_Georgian_ghan.html)
pub const KEY_Georgian_ghan = 16781542;
/// const [KEY_Georgian_hae](https://docs.gtk.org/gdk4/const.KEY_Georgian_hae.html)
pub const KEY_Georgian_hae = 16781552;
/// const [KEY_Georgian_har](https://docs.gtk.org/gdk4/const.KEY_Georgian_har.html)
pub const KEY_Georgian_har = 16781556;
/// const [KEY_Georgian_he](https://docs.gtk.org/gdk4/const.KEY_Georgian_he.html)
pub const KEY_Georgian_he = 16781553;
/// const [KEY_Georgian_hie](https://docs.gtk.org/gdk4/const.KEY_Georgian_hie.html)
pub const KEY_Georgian_hie = 16781554;
/// const [KEY_Georgian_hoe](https://docs.gtk.org/gdk4/const.KEY_Georgian_hoe.html)
pub const KEY_Georgian_hoe = 16781557;
/// const [KEY_Georgian_in](https://docs.gtk.org/gdk4/const.KEY_Georgian_in.html)
pub const KEY_Georgian_in = 16781528;
/// const [KEY_Georgian_jhan](https://docs.gtk.org/gdk4/const.KEY_Georgian_jhan.html)
pub const KEY_Georgian_jhan = 16781551;
/// const [KEY_Georgian_jil](https://docs.gtk.org/gdk4/const.KEY_Georgian_jil.html)
pub const KEY_Georgian_jil = 16781547;
/// const [KEY_Georgian_kan](https://docs.gtk.org/gdk4/const.KEY_Georgian_kan.html)
pub const KEY_Georgian_kan = 16781529;
/// const [KEY_Georgian_khar](https://docs.gtk.org/gdk4/const.KEY_Georgian_khar.html)
pub const KEY_Georgian_khar = 16781541;
/// const [KEY_Georgian_las](https://docs.gtk.org/gdk4/const.KEY_Georgian_las.html)
pub const KEY_Georgian_las = 16781530;
/// const [KEY_Georgian_man](https://docs.gtk.org/gdk4/const.KEY_Georgian_man.html)
pub const KEY_Georgian_man = 16781531;
/// const [KEY_Georgian_nar](https://docs.gtk.org/gdk4/const.KEY_Georgian_nar.html)
pub const KEY_Georgian_nar = 16781532;
/// const [KEY_Georgian_on](https://docs.gtk.org/gdk4/const.KEY_Georgian_on.html)
pub const KEY_Georgian_on = 16781533;
/// const [KEY_Georgian_par](https://docs.gtk.org/gdk4/const.KEY_Georgian_par.html)
pub const KEY_Georgian_par = 16781534;
/// const [KEY_Georgian_phar](https://docs.gtk.org/gdk4/const.KEY_Georgian_phar.html)
pub const KEY_Georgian_phar = 16781540;
/// const [KEY_Georgian_qar](https://docs.gtk.org/gdk4/const.KEY_Georgian_qar.html)
pub const KEY_Georgian_qar = 16781543;
/// const [KEY_Georgian_rae](https://docs.gtk.org/gdk4/const.KEY_Georgian_rae.html)
pub const KEY_Georgian_rae = 16781536;
/// const [KEY_Georgian_san](https://docs.gtk.org/gdk4/const.KEY_Georgian_san.html)
pub const KEY_Georgian_san = 16781537;
/// const [KEY_Georgian_shin](https://docs.gtk.org/gdk4/const.KEY_Georgian_shin.html)
pub const KEY_Georgian_shin = 16781544;
/// const [KEY_Georgian_tan](https://docs.gtk.org/gdk4/const.KEY_Georgian_tan.html)
pub const KEY_Georgian_tan = 16781527;
/// const [KEY_Georgian_tar](https://docs.gtk.org/gdk4/const.KEY_Georgian_tar.html)
pub const KEY_Georgian_tar = 16781538;
/// const [KEY_Georgian_un](https://docs.gtk.org/gdk4/const.KEY_Georgian_un.html)
pub const KEY_Georgian_un = 16781539;
/// const [KEY_Georgian_vin](https://docs.gtk.org/gdk4/const.KEY_Georgian_vin.html)
pub const KEY_Georgian_vin = 16781525;
/// const [KEY_Georgian_we](https://docs.gtk.org/gdk4/const.KEY_Georgian_we.html)
pub const KEY_Georgian_we = 16781555;
/// const [KEY_Georgian_xan](https://docs.gtk.org/gdk4/const.KEY_Georgian_xan.html)
pub const KEY_Georgian_xan = 16781550;
/// const [KEY_Georgian_zen](https://docs.gtk.org/gdk4/const.KEY_Georgian_zen.html)
pub const KEY_Georgian_zen = 16781526;
/// const [KEY_Georgian_zhar](https://docs.gtk.org/gdk4/const.KEY_Georgian_zhar.html)
pub const KEY_Georgian_zhar = 16781535;
/// const [KEY_Go](https://docs.gtk.org/gdk4/const.KEY_Go.html)
pub const KEY_Go = 269025119;
/// const [KEY_Greek_ALPHA](https://docs.gtk.org/gdk4/const.KEY_Greek_ALPHA.html)
pub const KEY_Greek_ALPHA = 1985;
/// const [KEY_Greek_ALPHAaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_ALPHAaccent.html)
pub const KEY_Greek_ALPHAaccent = 1953;
/// const [KEY_Greek_BETA](https://docs.gtk.org/gdk4/const.KEY_Greek_BETA.html)
pub const KEY_Greek_BETA = 1986;
/// const [KEY_Greek_CHI](https://docs.gtk.org/gdk4/const.KEY_Greek_CHI.html)
pub const KEY_Greek_CHI = 2007;
/// const [KEY_Greek_DELTA](https://docs.gtk.org/gdk4/const.KEY_Greek_DELTA.html)
pub const KEY_Greek_DELTA = 1988;
/// const [KEY_Greek_EPSILON](https://docs.gtk.org/gdk4/const.KEY_Greek_EPSILON.html)
pub const KEY_Greek_EPSILON = 1989;
/// const [KEY_Greek_EPSILONaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_EPSILONaccent.html)
pub const KEY_Greek_EPSILONaccent = 1954;
/// const [KEY_Greek_ETA](https://docs.gtk.org/gdk4/const.KEY_Greek_ETA.html)
pub const KEY_Greek_ETA = 1991;
/// const [KEY_Greek_ETAaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_ETAaccent.html)
pub const KEY_Greek_ETAaccent = 1955;
/// const [KEY_Greek_GAMMA](https://docs.gtk.org/gdk4/const.KEY_Greek_GAMMA.html)
pub const KEY_Greek_GAMMA = 1987;
/// const [KEY_Greek_IOTA](https://docs.gtk.org/gdk4/const.KEY_Greek_IOTA.html)
pub const KEY_Greek_IOTA = 1993;
/// const [KEY_Greek_IOTAaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_IOTAaccent.html)
pub const KEY_Greek_IOTAaccent = 1956;
/// const [KEY_Greek_IOTAdiaeresis](https://docs.gtk.org/gdk4/const.KEY_Greek_IOTAdiaeresis.html)
pub const KEY_Greek_IOTAdiaeresis = 1957;
/// const [KEY_Greek_IOTAdieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_IOTAdieresis.html)
pub const KEY_Greek_IOTAdieresis = 1957;
/// const [KEY_Greek_KAPPA](https://docs.gtk.org/gdk4/const.KEY_Greek_KAPPA.html)
pub const KEY_Greek_KAPPA = 1994;
/// const [KEY_Greek_LAMBDA](https://docs.gtk.org/gdk4/const.KEY_Greek_LAMBDA.html)
pub const KEY_Greek_LAMBDA = 1995;
/// const [KEY_Greek_LAMDA](https://docs.gtk.org/gdk4/const.KEY_Greek_LAMDA.html)
pub const KEY_Greek_LAMDA = 1995;
/// const [KEY_Greek_MU](https://docs.gtk.org/gdk4/const.KEY_Greek_MU.html)
pub const KEY_Greek_MU = 1996;
/// const [KEY_Greek_NU](https://docs.gtk.org/gdk4/const.KEY_Greek_NU.html)
pub const KEY_Greek_NU = 1997;
/// const [KEY_Greek_OMEGA](https://docs.gtk.org/gdk4/const.KEY_Greek_OMEGA.html)
pub const KEY_Greek_OMEGA = 2009;
/// const [KEY_Greek_OMEGAaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_OMEGAaccent.html)
pub const KEY_Greek_OMEGAaccent = 1963;
/// const [KEY_Greek_OMICRON](https://docs.gtk.org/gdk4/const.KEY_Greek_OMICRON.html)
pub const KEY_Greek_OMICRON = 1999;
/// const [KEY_Greek_OMICRONaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_OMICRONaccent.html)
pub const KEY_Greek_OMICRONaccent = 1959;
/// const [KEY_Greek_PHI](https://docs.gtk.org/gdk4/const.KEY_Greek_PHI.html)
pub const KEY_Greek_PHI = 2006;
/// const [KEY_Greek_PI](https://docs.gtk.org/gdk4/const.KEY_Greek_PI.html)
pub const KEY_Greek_PI = 2000;
/// const [KEY_Greek_PSI](https://docs.gtk.org/gdk4/const.KEY_Greek_PSI.html)
pub const KEY_Greek_PSI = 2008;
/// const [KEY_Greek_RHO](https://docs.gtk.org/gdk4/const.KEY_Greek_RHO.html)
pub const KEY_Greek_RHO = 2001;
/// const [KEY_Greek_SIGMA](https://docs.gtk.org/gdk4/const.KEY_Greek_SIGMA.html)
pub const KEY_Greek_SIGMA = 2002;
/// const [KEY_Greek_TAU](https://docs.gtk.org/gdk4/const.KEY_Greek_TAU.html)
pub const KEY_Greek_TAU = 2004;
/// const [KEY_Greek_THETA](https://docs.gtk.org/gdk4/const.KEY_Greek_THETA.html)
pub const KEY_Greek_THETA = 1992;
/// const [KEY_Greek_UPSILON](https://docs.gtk.org/gdk4/const.KEY_Greek_UPSILON.html)
pub const KEY_Greek_UPSILON = 2005;
/// const [KEY_Greek_UPSILONaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_UPSILONaccent.html)
pub const KEY_Greek_UPSILONaccent = 1960;
/// const [KEY_Greek_UPSILONdieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_UPSILONdieresis.html)
pub const KEY_Greek_UPSILONdieresis = 1961;
/// const [KEY_Greek_XI](https://docs.gtk.org/gdk4/const.KEY_Greek_XI.html)
pub const KEY_Greek_XI = 1998;
/// const [KEY_Greek_ZETA](https://docs.gtk.org/gdk4/const.KEY_Greek_ZETA.html)
pub const KEY_Greek_ZETA = 1990;
/// const [KEY_Greek_accentdieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_accentdieresis.html)
pub const KEY_Greek_accentdieresis = 1966;
/// const [KEY_Greek_alpha](https://docs.gtk.org/gdk4/const.KEY_Greek_alpha.html)
pub const KEY_Greek_alpha = 2017;
/// const [KEY_Greek_alphaaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_alphaaccent.html)
pub const KEY_Greek_alphaaccent = 1969;
/// const [KEY_Greek_beta](https://docs.gtk.org/gdk4/const.KEY_Greek_beta.html)
pub const KEY_Greek_beta = 2018;
/// const [KEY_Greek_chi](https://docs.gtk.org/gdk4/const.KEY_Greek_chi.html)
pub const KEY_Greek_chi = 2039;
/// const [KEY_Greek_delta](https://docs.gtk.org/gdk4/const.KEY_Greek_delta.html)
pub const KEY_Greek_delta = 2020;
/// const [KEY_Greek_epsilon](https://docs.gtk.org/gdk4/const.KEY_Greek_epsilon.html)
pub const KEY_Greek_epsilon = 2021;
/// const [KEY_Greek_epsilonaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_epsilonaccent.html)
pub const KEY_Greek_epsilonaccent = 1970;
/// const [KEY_Greek_eta](https://docs.gtk.org/gdk4/const.KEY_Greek_eta.html)
pub const KEY_Greek_eta = 2023;
/// const [KEY_Greek_etaaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_etaaccent.html)
pub const KEY_Greek_etaaccent = 1971;
/// const [KEY_Greek_finalsmallsigma](https://docs.gtk.org/gdk4/const.KEY_Greek_finalsmallsigma.html)
pub const KEY_Greek_finalsmallsigma = 2035;
/// const [KEY_Greek_gamma](https://docs.gtk.org/gdk4/const.KEY_Greek_gamma.html)
pub const KEY_Greek_gamma = 2019;
/// const [KEY_Greek_horizbar](https://docs.gtk.org/gdk4/const.KEY_Greek_horizbar.html)
pub const KEY_Greek_horizbar = 1967;
/// const [KEY_Greek_iota](https://docs.gtk.org/gdk4/const.KEY_Greek_iota.html)
pub const KEY_Greek_iota = 2025;
/// const [KEY_Greek_iotaaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_iotaaccent.html)
pub const KEY_Greek_iotaaccent = 1972;
/// const [KEY_Greek_iotaaccentdieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_iotaaccentdieresis.html)
pub const KEY_Greek_iotaaccentdieresis = 1974;
/// const [KEY_Greek_iotadieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_iotadieresis.html)
pub const KEY_Greek_iotadieresis = 1973;
/// const [KEY_Greek_kappa](https://docs.gtk.org/gdk4/const.KEY_Greek_kappa.html)
pub const KEY_Greek_kappa = 2026;
/// const [KEY_Greek_lambda](https://docs.gtk.org/gdk4/const.KEY_Greek_lambda.html)
pub const KEY_Greek_lambda = 2027;
/// const [KEY_Greek_lamda](https://docs.gtk.org/gdk4/const.KEY_Greek_lamda.html)
pub const KEY_Greek_lamda = 2027;
/// const [KEY_Greek_mu](https://docs.gtk.org/gdk4/const.KEY_Greek_mu.html)
pub const KEY_Greek_mu = 2028;
/// const [KEY_Greek_nu](https://docs.gtk.org/gdk4/const.KEY_Greek_nu.html)
pub const KEY_Greek_nu = 2029;
/// const [KEY_Greek_omega](https://docs.gtk.org/gdk4/const.KEY_Greek_omega.html)
pub const KEY_Greek_omega = 2041;
/// const [KEY_Greek_omegaaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_omegaaccent.html)
pub const KEY_Greek_omegaaccent = 1979;
/// const [KEY_Greek_omicron](https://docs.gtk.org/gdk4/const.KEY_Greek_omicron.html)
pub const KEY_Greek_omicron = 2031;
/// const [KEY_Greek_omicronaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_omicronaccent.html)
pub const KEY_Greek_omicronaccent = 1975;
/// const [KEY_Greek_phi](https://docs.gtk.org/gdk4/const.KEY_Greek_phi.html)
pub const KEY_Greek_phi = 2038;
/// const [KEY_Greek_pi](https://docs.gtk.org/gdk4/const.KEY_Greek_pi.html)
pub const KEY_Greek_pi = 2032;
/// const [KEY_Greek_psi](https://docs.gtk.org/gdk4/const.KEY_Greek_psi.html)
pub const KEY_Greek_psi = 2040;
/// const [KEY_Greek_rho](https://docs.gtk.org/gdk4/const.KEY_Greek_rho.html)
pub const KEY_Greek_rho = 2033;
/// const [KEY_Greek_sigma](https://docs.gtk.org/gdk4/const.KEY_Greek_sigma.html)
pub const KEY_Greek_sigma = 2034;
/// const [KEY_Greek_switch](https://docs.gtk.org/gdk4/const.KEY_Greek_switch.html)
pub const KEY_Greek_switch = 65406;
/// const [KEY_Greek_tau](https://docs.gtk.org/gdk4/const.KEY_Greek_tau.html)
pub const KEY_Greek_tau = 2036;
/// const [KEY_Greek_theta](https://docs.gtk.org/gdk4/const.KEY_Greek_theta.html)
pub const KEY_Greek_theta = 2024;
/// const [KEY_Greek_upsilon](https://docs.gtk.org/gdk4/const.KEY_Greek_upsilon.html)
pub const KEY_Greek_upsilon = 2037;
/// const [KEY_Greek_upsilonaccent](https://docs.gtk.org/gdk4/const.KEY_Greek_upsilonaccent.html)
pub const KEY_Greek_upsilonaccent = 1976;
/// const [KEY_Greek_upsilonaccentdieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_upsilonaccentdieresis.html)
pub const KEY_Greek_upsilonaccentdieresis = 1978;
/// const [KEY_Greek_upsilondieresis](https://docs.gtk.org/gdk4/const.KEY_Greek_upsilondieresis.html)
pub const KEY_Greek_upsilondieresis = 1977;
/// const [KEY_Greek_xi](https://docs.gtk.org/gdk4/const.KEY_Greek_xi.html)
pub const KEY_Greek_xi = 2030;
/// const [KEY_Greek_zeta](https://docs.gtk.org/gdk4/const.KEY_Greek_zeta.html)
pub const KEY_Greek_zeta = 2022;
/// const [KEY_Green](https://docs.gtk.org/gdk4/const.KEY_Green.html)
pub const KEY_Green = 269025188;
/// const [KEY_H](https://docs.gtk.org/gdk4/const.KEY_H.html)
pub const KEY_H = 72;
/// const [KEY_Hangul](https://docs.gtk.org/gdk4/const.KEY_Hangul.html)
pub const KEY_Hangul = 65329;
/// const [KEY_Hangul_A](https://docs.gtk.org/gdk4/const.KEY_Hangul_A.html)
pub const KEY_Hangul_A = 3775;
/// const [KEY_Hangul_AE](https://docs.gtk.org/gdk4/const.KEY_Hangul_AE.html)
pub const KEY_Hangul_AE = 3776;
/// const [KEY_Hangul_AraeA](https://docs.gtk.org/gdk4/const.KEY_Hangul_AraeA.html)
pub const KEY_Hangul_AraeA = 3830;
/// const [KEY_Hangul_AraeAE](https://docs.gtk.org/gdk4/const.KEY_Hangul_AraeAE.html)
pub const KEY_Hangul_AraeAE = 3831;
/// const [KEY_Hangul_Banja](https://docs.gtk.org/gdk4/const.KEY_Hangul_Banja.html)
pub const KEY_Hangul_Banja = 65337;
/// const [KEY_Hangul_Cieuc](https://docs.gtk.org/gdk4/const.KEY_Hangul_Cieuc.html)
pub const KEY_Hangul_Cieuc = 3770;
/// const [KEY_Hangul_Codeinput](https://docs.gtk.org/gdk4/const.KEY_Hangul_Codeinput.html)
pub const KEY_Hangul_Codeinput = 65335;
/// const [KEY_Hangul_Dikeud](https://docs.gtk.org/gdk4/const.KEY_Hangul_Dikeud.html)
pub const KEY_Hangul_Dikeud = 3751;
/// const [KEY_Hangul_E](https://docs.gtk.org/gdk4/const.KEY_Hangul_E.html)
pub const KEY_Hangul_E = 3780;
/// const [KEY_Hangul_EO](https://docs.gtk.org/gdk4/const.KEY_Hangul_EO.html)
pub const KEY_Hangul_EO = 3779;
/// const [KEY_Hangul_EU](https://docs.gtk.org/gdk4/const.KEY_Hangul_EU.html)
pub const KEY_Hangul_EU = 3793;
/// const [KEY_Hangul_End](https://docs.gtk.org/gdk4/const.KEY_Hangul_End.html)
pub const KEY_Hangul_End = 65331;
/// const [KEY_Hangul_Hanja](https://docs.gtk.org/gdk4/const.KEY_Hangul_Hanja.html)
pub const KEY_Hangul_Hanja = 65332;
/// const [KEY_Hangul_Hieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_Hieuh.html)
pub const KEY_Hangul_Hieuh = 3774;
/// const [KEY_Hangul_I](https://docs.gtk.org/gdk4/const.KEY_Hangul_I.html)
pub const KEY_Hangul_I = 3795;
/// const [KEY_Hangul_Ieung](https://docs.gtk.org/gdk4/const.KEY_Hangul_Ieung.html)
pub const KEY_Hangul_Ieung = 3767;
/// const [KEY_Hangul_J_Cieuc](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Cieuc.html)
pub const KEY_Hangul_J_Cieuc = 3818;
/// const [KEY_Hangul_J_Dikeud](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Dikeud.html)
pub const KEY_Hangul_J_Dikeud = 3802;
/// const [KEY_Hangul_J_Hieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Hieuh.html)
pub const KEY_Hangul_J_Hieuh = 3822;
/// const [KEY_Hangul_J_Ieung](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Ieung.html)
pub const KEY_Hangul_J_Ieung = 3816;
/// const [KEY_Hangul_J_Jieuj](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Jieuj.html)
pub const KEY_Hangul_J_Jieuj = 3817;
/// const [KEY_Hangul_J_Khieuq](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Khieuq.html)
pub const KEY_Hangul_J_Khieuq = 3819;
/// const [KEY_Hangul_J_Kiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Kiyeog.html)
pub const KEY_Hangul_J_Kiyeog = 3796;
/// const [KEY_Hangul_J_KiyeogSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_KiyeogSios.html)
pub const KEY_Hangul_J_KiyeogSios = 3798;
/// const [KEY_Hangul_J_KkogjiDalrinIeung](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_KkogjiDalrinIeung.html)
pub const KEY_Hangul_J_KkogjiDalrinIeung = 3833;
/// const [KEY_Hangul_J_Mieum](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Mieum.html)
pub const KEY_Hangul_J_Mieum = 3811;
/// const [KEY_Hangul_J_Nieun](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Nieun.html)
pub const KEY_Hangul_J_Nieun = 3799;
/// const [KEY_Hangul_J_NieunHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_NieunHieuh.html)
pub const KEY_Hangul_J_NieunHieuh = 3801;
/// const [KEY_Hangul_J_NieunJieuj](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_NieunJieuj.html)
pub const KEY_Hangul_J_NieunJieuj = 3800;
/// const [KEY_Hangul_J_PanSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_PanSios.html)
pub const KEY_Hangul_J_PanSios = 3832;
/// const [KEY_Hangul_J_Phieuf](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Phieuf.html)
pub const KEY_Hangul_J_Phieuf = 3821;
/// const [KEY_Hangul_J_Pieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Pieub.html)
pub const KEY_Hangul_J_Pieub = 3812;
/// const [KEY_Hangul_J_PieubSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_PieubSios.html)
pub const KEY_Hangul_J_PieubSios = 3813;
/// const [KEY_Hangul_J_Rieul](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Rieul.html)
pub const KEY_Hangul_J_Rieul = 3803;
/// const [KEY_Hangul_J_RieulHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulHieuh.html)
pub const KEY_Hangul_J_RieulHieuh = 3810;
/// const [KEY_Hangul_J_RieulKiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulKiyeog.html)
pub const KEY_Hangul_J_RieulKiyeog = 3804;
/// const [KEY_Hangul_J_RieulMieum](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulMieum.html)
pub const KEY_Hangul_J_RieulMieum = 3805;
/// const [KEY_Hangul_J_RieulPhieuf](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulPhieuf.html)
pub const KEY_Hangul_J_RieulPhieuf = 3809;
/// const [KEY_Hangul_J_RieulPieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulPieub.html)
pub const KEY_Hangul_J_RieulPieub = 3806;
/// const [KEY_Hangul_J_RieulSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulSios.html)
pub const KEY_Hangul_J_RieulSios = 3807;
/// const [KEY_Hangul_J_RieulTieut](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_RieulTieut.html)
pub const KEY_Hangul_J_RieulTieut = 3808;
/// const [KEY_Hangul_J_Sios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Sios.html)
pub const KEY_Hangul_J_Sios = 3814;
/// const [KEY_Hangul_J_SsangKiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_SsangKiyeog.html)
pub const KEY_Hangul_J_SsangKiyeog = 3797;
/// const [KEY_Hangul_J_SsangSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_SsangSios.html)
pub const KEY_Hangul_J_SsangSios = 3815;
/// const [KEY_Hangul_J_Tieut](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_Tieut.html)
pub const KEY_Hangul_J_Tieut = 3820;
/// const [KEY_Hangul_J_YeorinHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_J_YeorinHieuh.html)
pub const KEY_Hangul_J_YeorinHieuh = 3834;
/// const [KEY_Hangul_Jamo](https://docs.gtk.org/gdk4/const.KEY_Hangul_Jamo.html)
pub const KEY_Hangul_Jamo = 65333;
/// const [KEY_Hangul_Jeonja](https://docs.gtk.org/gdk4/const.KEY_Hangul_Jeonja.html)
pub const KEY_Hangul_Jeonja = 65336;
/// const [KEY_Hangul_Jieuj](https://docs.gtk.org/gdk4/const.KEY_Hangul_Jieuj.html)
pub const KEY_Hangul_Jieuj = 3768;
/// const [KEY_Hangul_Khieuq](https://docs.gtk.org/gdk4/const.KEY_Hangul_Khieuq.html)
pub const KEY_Hangul_Khieuq = 3771;
/// const [KEY_Hangul_Kiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_Kiyeog.html)
pub const KEY_Hangul_Kiyeog = 3745;
/// const [KEY_Hangul_KiyeogSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_KiyeogSios.html)
pub const KEY_Hangul_KiyeogSios = 3747;
/// const [KEY_Hangul_KkogjiDalrinIeung](https://docs.gtk.org/gdk4/const.KEY_Hangul_KkogjiDalrinIeung.html)
pub const KEY_Hangul_KkogjiDalrinIeung = 3827;
/// const [KEY_Hangul_Mieum](https://docs.gtk.org/gdk4/const.KEY_Hangul_Mieum.html)
pub const KEY_Hangul_Mieum = 3761;
/// const [KEY_Hangul_MultipleCandidate](https://docs.gtk.org/gdk4/const.KEY_Hangul_MultipleCandidate.html)
pub const KEY_Hangul_MultipleCandidate = 65341;
/// const [KEY_Hangul_Nieun](https://docs.gtk.org/gdk4/const.KEY_Hangul_Nieun.html)
pub const KEY_Hangul_Nieun = 3748;
/// const [KEY_Hangul_NieunHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_NieunHieuh.html)
pub const KEY_Hangul_NieunHieuh = 3750;
/// const [KEY_Hangul_NieunJieuj](https://docs.gtk.org/gdk4/const.KEY_Hangul_NieunJieuj.html)
pub const KEY_Hangul_NieunJieuj = 3749;
/// const [KEY_Hangul_O](https://docs.gtk.org/gdk4/const.KEY_Hangul_O.html)
pub const KEY_Hangul_O = 3783;
/// const [KEY_Hangul_OE](https://docs.gtk.org/gdk4/const.KEY_Hangul_OE.html)
pub const KEY_Hangul_OE = 3786;
/// const [KEY_Hangul_PanSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_PanSios.html)
pub const KEY_Hangul_PanSios = 3826;
/// const [KEY_Hangul_Phieuf](https://docs.gtk.org/gdk4/const.KEY_Hangul_Phieuf.html)
pub const KEY_Hangul_Phieuf = 3773;
/// const [KEY_Hangul_Pieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_Pieub.html)
pub const KEY_Hangul_Pieub = 3762;
/// const [KEY_Hangul_PieubSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_PieubSios.html)
pub const KEY_Hangul_PieubSios = 3764;
/// const [KEY_Hangul_PostHanja](https://docs.gtk.org/gdk4/const.KEY_Hangul_PostHanja.html)
pub const KEY_Hangul_PostHanja = 65339;
/// const [KEY_Hangul_PreHanja](https://docs.gtk.org/gdk4/const.KEY_Hangul_PreHanja.html)
pub const KEY_Hangul_PreHanja = 65338;
/// const [KEY_Hangul_PreviousCandidate](https://docs.gtk.org/gdk4/const.KEY_Hangul_PreviousCandidate.html)
pub const KEY_Hangul_PreviousCandidate = 65342;
/// const [KEY_Hangul_Rieul](https://docs.gtk.org/gdk4/const.KEY_Hangul_Rieul.html)
pub const KEY_Hangul_Rieul = 3753;
/// const [KEY_Hangul_RieulHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulHieuh.html)
pub const KEY_Hangul_RieulHieuh = 3760;
/// const [KEY_Hangul_RieulKiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulKiyeog.html)
pub const KEY_Hangul_RieulKiyeog = 3754;
/// const [KEY_Hangul_RieulMieum](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulMieum.html)
pub const KEY_Hangul_RieulMieum = 3755;
/// const [KEY_Hangul_RieulPhieuf](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulPhieuf.html)
pub const KEY_Hangul_RieulPhieuf = 3759;
/// const [KEY_Hangul_RieulPieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulPieub.html)
pub const KEY_Hangul_RieulPieub = 3756;
/// const [KEY_Hangul_RieulSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulSios.html)
pub const KEY_Hangul_RieulSios = 3757;
/// const [KEY_Hangul_RieulTieut](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulTieut.html)
pub const KEY_Hangul_RieulTieut = 3758;
/// const [KEY_Hangul_RieulYeorinHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_RieulYeorinHieuh.html)
pub const KEY_Hangul_RieulYeorinHieuh = 3823;
/// const [KEY_Hangul_Romaja](https://docs.gtk.org/gdk4/const.KEY_Hangul_Romaja.html)
pub const KEY_Hangul_Romaja = 65334;
/// const [KEY_Hangul_SingleCandidate](https://docs.gtk.org/gdk4/const.KEY_Hangul_SingleCandidate.html)
pub const KEY_Hangul_SingleCandidate = 65340;
/// const [KEY_Hangul_Sios](https://docs.gtk.org/gdk4/const.KEY_Hangul_Sios.html)
pub const KEY_Hangul_Sios = 3765;
/// const [KEY_Hangul_Special](https://docs.gtk.org/gdk4/const.KEY_Hangul_Special.html)
pub const KEY_Hangul_Special = 65343;
/// const [KEY_Hangul_SsangDikeud](https://docs.gtk.org/gdk4/const.KEY_Hangul_SsangDikeud.html)
pub const KEY_Hangul_SsangDikeud = 3752;
/// const [KEY_Hangul_SsangJieuj](https://docs.gtk.org/gdk4/const.KEY_Hangul_SsangJieuj.html)
pub const KEY_Hangul_SsangJieuj = 3769;
/// const [KEY_Hangul_SsangKiyeog](https://docs.gtk.org/gdk4/const.KEY_Hangul_SsangKiyeog.html)
pub const KEY_Hangul_SsangKiyeog = 3746;
/// const [KEY_Hangul_SsangPieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_SsangPieub.html)
pub const KEY_Hangul_SsangPieub = 3763;
/// const [KEY_Hangul_SsangSios](https://docs.gtk.org/gdk4/const.KEY_Hangul_SsangSios.html)
pub const KEY_Hangul_SsangSios = 3766;
/// const [KEY_Hangul_Start](https://docs.gtk.org/gdk4/const.KEY_Hangul_Start.html)
pub const KEY_Hangul_Start = 65330;
/// const [KEY_Hangul_SunkyeongeumMieum](https://docs.gtk.org/gdk4/const.KEY_Hangul_SunkyeongeumMieum.html)
pub const KEY_Hangul_SunkyeongeumMieum = 3824;
/// const [KEY_Hangul_SunkyeongeumPhieuf](https://docs.gtk.org/gdk4/const.KEY_Hangul_SunkyeongeumPhieuf.html)
pub const KEY_Hangul_SunkyeongeumPhieuf = 3828;
/// const [KEY_Hangul_SunkyeongeumPieub](https://docs.gtk.org/gdk4/const.KEY_Hangul_SunkyeongeumPieub.html)
pub const KEY_Hangul_SunkyeongeumPieub = 3825;
/// const [KEY_Hangul_Tieut](https://docs.gtk.org/gdk4/const.KEY_Hangul_Tieut.html)
pub const KEY_Hangul_Tieut = 3772;
/// const [KEY_Hangul_U](https://docs.gtk.org/gdk4/const.KEY_Hangul_U.html)
pub const KEY_Hangul_U = 3788;
/// const [KEY_Hangul_WA](https://docs.gtk.org/gdk4/const.KEY_Hangul_WA.html)
pub const KEY_Hangul_WA = 3784;
/// const [KEY_Hangul_WAE](https://docs.gtk.org/gdk4/const.KEY_Hangul_WAE.html)
pub const KEY_Hangul_WAE = 3785;
/// const [KEY_Hangul_WE](https://docs.gtk.org/gdk4/const.KEY_Hangul_WE.html)
pub const KEY_Hangul_WE = 3790;
/// const [KEY_Hangul_WEO](https://docs.gtk.org/gdk4/const.KEY_Hangul_WEO.html)
pub const KEY_Hangul_WEO = 3789;
/// const [KEY_Hangul_WI](https://docs.gtk.org/gdk4/const.KEY_Hangul_WI.html)
pub const KEY_Hangul_WI = 3791;
/// const [KEY_Hangul_YA](https://docs.gtk.org/gdk4/const.KEY_Hangul_YA.html)
pub const KEY_Hangul_YA = 3777;
/// const [KEY_Hangul_YAE](https://docs.gtk.org/gdk4/const.KEY_Hangul_YAE.html)
pub const KEY_Hangul_YAE = 3778;
/// const [KEY_Hangul_YE](https://docs.gtk.org/gdk4/const.KEY_Hangul_YE.html)
pub const KEY_Hangul_YE = 3782;
/// const [KEY_Hangul_YEO](https://docs.gtk.org/gdk4/const.KEY_Hangul_YEO.html)
pub const KEY_Hangul_YEO = 3781;
/// const [KEY_Hangul_YI](https://docs.gtk.org/gdk4/const.KEY_Hangul_YI.html)
pub const KEY_Hangul_YI = 3794;
/// const [KEY_Hangul_YO](https://docs.gtk.org/gdk4/const.KEY_Hangul_YO.html)
pub const KEY_Hangul_YO = 3787;
/// const [KEY_Hangul_YU](https://docs.gtk.org/gdk4/const.KEY_Hangul_YU.html)
pub const KEY_Hangul_YU = 3792;
/// const [KEY_Hangul_YeorinHieuh](https://docs.gtk.org/gdk4/const.KEY_Hangul_YeorinHieuh.html)
pub const KEY_Hangul_YeorinHieuh = 3829;
/// const [KEY_Hangul_switch](https://docs.gtk.org/gdk4/const.KEY_Hangul_switch.html)
pub const KEY_Hangul_switch = 65406;
/// const [KEY_Hankaku](https://docs.gtk.org/gdk4/const.KEY_Hankaku.html)
pub const KEY_Hankaku = 65321;
/// const [KEY_Hcircumflex](https://docs.gtk.org/gdk4/const.KEY_Hcircumflex.html)
pub const KEY_Hcircumflex = 678;
/// const [KEY_Hebrew_switch](https://docs.gtk.org/gdk4/const.KEY_Hebrew_switch.html)
pub const KEY_Hebrew_switch = 65406;
/// const [KEY_Help](https://docs.gtk.org/gdk4/const.KEY_Help.html)
pub const KEY_Help = 65386;
/// const [KEY_Henkan](https://docs.gtk.org/gdk4/const.KEY_Henkan.html)
pub const KEY_Henkan = 65315;
/// const [KEY_Henkan_Mode](https://docs.gtk.org/gdk4/const.KEY_Henkan_Mode.html)
pub const KEY_Henkan_Mode = 65315;
/// const [KEY_Hibernate](https://docs.gtk.org/gdk4/const.KEY_Hibernate.html)
pub const KEY_Hibernate = 269025192;
/// const [KEY_Hiragana](https://docs.gtk.org/gdk4/const.KEY_Hiragana.html)
pub const KEY_Hiragana = 65317;
/// const [KEY_Hiragana_Katakana](https://docs.gtk.org/gdk4/const.KEY_Hiragana_Katakana.html)
pub const KEY_Hiragana_Katakana = 65319;
/// const [KEY_History](https://docs.gtk.org/gdk4/const.KEY_History.html)
pub const KEY_History = 269025079;
/// const [KEY_Home](https://docs.gtk.org/gdk4/const.KEY_Home.html)
pub const KEY_Home = 65360;
/// const [KEY_HomePage](https://docs.gtk.org/gdk4/const.KEY_HomePage.html)
pub const KEY_HomePage = 269025048;
/// const [KEY_HotLinks](https://docs.gtk.org/gdk4/const.KEY_HotLinks.html)
pub const KEY_HotLinks = 269025082;
/// const [KEY_Hstroke](https://docs.gtk.org/gdk4/const.KEY_Hstroke.html)
pub const KEY_Hstroke = 673;
/// const [KEY_Hyper_L](https://docs.gtk.org/gdk4/const.KEY_Hyper_L.html)
pub const KEY_Hyper_L = 65517;
/// const [KEY_Hyper_R](https://docs.gtk.org/gdk4/const.KEY_Hyper_R.html)
pub const KEY_Hyper_R = 65518;
/// const [KEY_I](https://docs.gtk.org/gdk4/const.KEY_I.html)
pub const KEY_I = 73;
/// const [KEY_ISO_Center_Object](https://docs.gtk.org/gdk4/const.KEY_ISO_Center_Object.html)
pub const KEY_ISO_Center_Object = 65075;
/// const [KEY_ISO_Continuous_Underline](https://docs.gtk.org/gdk4/const.KEY_ISO_Continuous_Underline.html)
pub const KEY_ISO_Continuous_Underline = 65072;
/// const [KEY_ISO_Discontinuous_Underline](https://docs.gtk.org/gdk4/const.KEY_ISO_Discontinuous_Underline.html)
pub const KEY_ISO_Discontinuous_Underline = 65073;
/// const [KEY_ISO_Emphasize](https://docs.gtk.org/gdk4/const.KEY_ISO_Emphasize.html)
pub const KEY_ISO_Emphasize = 65074;
/// const [KEY_ISO_Enter](https://docs.gtk.org/gdk4/const.KEY_ISO_Enter.html)
pub const KEY_ISO_Enter = 65076;
/// const [KEY_ISO_Fast_Cursor_Down](https://docs.gtk.org/gdk4/const.KEY_ISO_Fast_Cursor_Down.html)
pub const KEY_ISO_Fast_Cursor_Down = 65071;
/// const [KEY_ISO_Fast_Cursor_Left](https://docs.gtk.org/gdk4/const.KEY_ISO_Fast_Cursor_Left.html)
pub const KEY_ISO_Fast_Cursor_Left = 65068;
/// const [KEY_ISO_Fast_Cursor_Right](https://docs.gtk.org/gdk4/const.KEY_ISO_Fast_Cursor_Right.html)
pub const KEY_ISO_Fast_Cursor_Right = 65069;
/// const [KEY_ISO_Fast_Cursor_Up](https://docs.gtk.org/gdk4/const.KEY_ISO_Fast_Cursor_Up.html)
pub const KEY_ISO_Fast_Cursor_Up = 65070;
/// const [KEY_ISO_First_Group](https://docs.gtk.org/gdk4/const.KEY_ISO_First_Group.html)
pub const KEY_ISO_First_Group = 65036;
/// const [KEY_ISO_First_Group_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_First_Group_Lock.html)
pub const KEY_ISO_First_Group_Lock = 65037;
/// const [KEY_ISO_Group_Latch](https://docs.gtk.org/gdk4/const.KEY_ISO_Group_Latch.html)
pub const KEY_ISO_Group_Latch = 65030;
/// const [KEY_ISO_Group_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Group_Lock.html)
pub const KEY_ISO_Group_Lock = 65031;
/// const [KEY_ISO_Group_Shift](https://docs.gtk.org/gdk4/const.KEY_ISO_Group_Shift.html)
pub const KEY_ISO_Group_Shift = 65406;
/// const [KEY_ISO_Last_Group](https://docs.gtk.org/gdk4/const.KEY_ISO_Last_Group.html)
pub const KEY_ISO_Last_Group = 65038;
/// const [KEY_ISO_Last_Group_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Last_Group_Lock.html)
pub const KEY_ISO_Last_Group_Lock = 65039;
/// const [KEY_ISO_Left_Tab](https://docs.gtk.org/gdk4/const.KEY_ISO_Left_Tab.html)
pub const KEY_ISO_Left_Tab = 65056;
/// const [KEY_ISO_Level2_Latch](https://docs.gtk.org/gdk4/const.KEY_ISO_Level2_Latch.html)
pub const KEY_ISO_Level2_Latch = 65026;
/// const [KEY_ISO_Level3_Latch](https://docs.gtk.org/gdk4/const.KEY_ISO_Level3_Latch.html)
pub const KEY_ISO_Level3_Latch = 65028;
/// const [KEY_ISO_Level3_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Level3_Lock.html)
pub const KEY_ISO_Level3_Lock = 65029;
/// const [KEY_ISO_Level3_Shift](https://docs.gtk.org/gdk4/const.KEY_ISO_Level3_Shift.html)
pub const KEY_ISO_Level3_Shift = 65027;
/// const [KEY_ISO_Level5_Latch](https://docs.gtk.org/gdk4/const.KEY_ISO_Level5_Latch.html)
pub const KEY_ISO_Level5_Latch = 65042;
/// const [KEY_ISO_Level5_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Level5_Lock.html)
pub const KEY_ISO_Level5_Lock = 65043;
/// const [KEY_ISO_Level5_Shift](https://docs.gtk.org/gdk4/const.KEY_ISO_Level5_Shift.html)
pub const KEY_ISO_Level5_Shift = 65041;
/// const [KEY_ISO_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Lock.html)
pub const KEY_ISO_Lock = 65025;
/// const [KEY_ISO_Move_Line_Down](https://docs.gtk.org/gdk4/const.KEY_ISO_Move_Line_Down.html)
pub const KEY_ISO_Move_Line_Down = 65058;
/// const [KEY_ISO_Move_Line_Up](https://docs.gtk.org/gdk4/const.KEY_ISO_Move_Line_Up.html)
pub const KEY_ISO_Move_Line_Up = 65057;
/// const [KEY_ISO_Next_Group](https://docs.gtk.org/gdk4/const.KEY_ISO_Next_Group.html)
pub const KEY_ISO_Next_Group = 65032;
/// const [KEY_ISO_Next_Group_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Next_Group_Lock.html)
pub const KEY_ISO_Next_Group_Lock = 65033;
/// const [KEY_ISO_Partial_Line_Down](https://docs.gtk.org/gdk4/const.KEY_ISO_Partial_Line_Down.html)
pub const KEY_ISO_Partial_Line_Down = 65060;
/// const [KEY_ISO_Partial_Line_Up](https://docs.gtk.org/gdk4/const.KEY_ISO_Partial_Line_Up.html)
pub const KEY_ISO_Partial_Line_Up = 65059;
/// const [KEY_ISO_Partial_Space_Left](https://docs.gtk.org/gdk4/const.KEY_ISO_Partial_Space_Left.html)
pub const KEY_ISO_Partial_Space_Left = 65061;
/// const [KEY_ISO_Partial_Space_Right](https://docs.gtk.org/gdk4/const.KEY_ISO_Partial_Space_Right.html)
pub const KEY_ISO_Partial_Space_Right = 65062;
/// const [KEY_ISO_Prev_Group](https://docs.gtk.org/gdk4/const.KEY_ISO_Prev_Group.html)
pub const KEY_ISO_Prev_Group = 65034;
/// const [KEY_ISO_Prev_Group_Lock](https://docs.gtk.org/gdk4/const.KEY_ISO_Prev_Group_Lock.html)
pub const KEY_ISO_Prev_Group_Lock = 65035;
/// const [KEY_ISO_Release_Both_Margins](https://docs.gtk.org/gdk4/const.KEY_ISO_Release_Both_Margins.html)
pub const KEY_ISO_Release_Both_Margins = 65067;
/// const [KEY_ISO_Release_Margin_Left](https://docs.gtk.org/gdk4/const.KEY_ISO_Release_Margin_Left.html)
pub const KEY_ISO_Release_Margin_Left = 65065;
/// const [KEY_ISO_Release_Margin_Right](https://docs.gtk.org/gdk4/const.KEY_ISO_Release_Margin_Right.html)
pub const KEY_ISO_Release_Margin_Right = 65066;
/// const [KEY_ISO_Set_Margin_Left](https://docs.gtk.org/gdk4/const.KEY_ISO_Set_Margin_Left.html)
pub const KEY_ISO_Set_Margin_Left = 65063;
/// const [KEY_ISO_Set_Margin_Right](https://docs.gtk.org/gdk4/const.KEY_ISO_Set_Margin_Right.html)
pub const KEY_ISO_Set_Margin_Right = 65064;
/// const [KEY_Iabovedot](https://docs.gtk.org/gdk4/const.KEY_Iabovedot.html)
pub const KEY_Iabovedot = 681;
/// const [KEY_Iacute](https://docs.gtk.org/gdk4/const.KEY_Iacute.html)
pub const KEY_Iacute = 205;
/// const [KEY_Ibelowdot](https://docs.gtk.org/gdk4/const.KEY_Ibelowdot.html)
pub const KEY_Ibelowdot = 16785098;
/// const [KEY_Ibreve](https://docs.gtk.org/gdk4/const.KEY_Ibreve.html)
pub const KEY_Ibreve = 16777516;
/// const [KEY_Icircumflex](https://docs.gtk.org/gdk4/const.KEY_Icircumflex.html)
pub const KEY_Icircumflex = 206;
/// const [KEY_Idiaeresis](https://docs.gtk.org/gdk4/const.KEY_Idiaeresis.html)
pub const KEY_Idiaeresis = 207;
/// const [KEY_Igrave](https://docs.gtk.org/gdk4/const.KEY_Igrave.html)
pub const KEY_Igrave = 204;
/// const [KEY_Ihook](https://docs.gtk.org/gdk4/const.KEY_Ihook.html)
pub const KEY_Ihook = 16785096;
/// const [KEY_Imacron](https://docs.gtk.org/gdk4/const.KEY_Imacron.html)
pub const KEY_Imacron = 975;
/// const [KEY_Insert](https://docs.gtk.org/gdk4/const.KEY_Insert.html)
pub const KEY_Insert = 65379;
/// const [KEY_Iogonek](https://docs.gtk.org/gdk4/const.KEY_Iogonek.html)
pub const KEY_Iogonek = 967;
/// const [KEY_Itilde](https://docs.gtk.org/gdk4/const.KEY_Itilde.html)
pub const KEY_Itilde = 933;
/// const [KEY_J](https://docs.gtk.org/gdk4/const.KEY_J.html)
pub const KEY_J = 74;
/// const [KEY_Jcircumflex](https://docs.gtk.org/gdk4/const.KEY_Jcircumflex.html)
pub const KEY_Jcircumflex = 684;
/// const [KEY_K](https://docs.gtk.org/gdk4/const.KEY_K.html)
pub const KEY_K = 75;
/// const [KEY_KP_0](https://docs.gtk.org/gdk4/const.KEY_KP_0.html)
pub const KEY_KP_0 = 65456;
/// const [KEY_KP_1](https://docs.gtk.org/gdk4/const.KEY_KP_1.html)
pub const KEY_KP_1 = 65457;
/// const [KEY_KP_2](https://docs.gtk.org/gdk4/const.KEY_KP_2.html)
pub const KEY_KP_2 = 65458;
/// const [KEY_KP_3](https://docs.gtk.org/gdk4/const.KEY_KP_3.html)
pub const KEY_KP_3 = 65459;
/// const [KEY_KP_4](https://docs.gtk.org/gdk4/const.KEY_KP_4.html)
pub const KEY_KP_4 = 65460;
/// const [KEY_KP_5](https://docs.gtk.org/gdk4/const.KEY_KP_5.html)
pub const KEY_KP_5 = 65461;
/// const [KEY_KP_6](https://docs.gtk.org/gdk4/const.KEY_KP_6.html)
pub const KEY_KP_6 = 65462;
/// const [KEY_KP_7](https://docs.gtk.org/gdk4/const.KEY_KP_7.html)
pub const KEY_KP_7 = 65463;
/// const [KEY_KP_8](https://docs.gtk.org/gdk4/const.KEY_KP_8.html)
pub const KEY_KP_8 = 65464;
/// const [KEY_KP_9](https://docs.gtk.org/gdk4/const.KEY_KP_9.html)
pub const KEY_KP_9 = 65465;
/// const [KEY_KP_Add](https://docs.gtk.org/gdk4/const.KEY_KP_Add.html)
pub const KEY_KP_Add = 65451;
/// const [KEY_KP_Begin](https://docs.gtk.org/gdk4/const.KEY_KP_Begin.html)
pub const KEY_KP_Begin = 65437;
/// const [KEY_KP_Decimal](https://docs.gtk.org/gdk4/const.KEY_KP_Decimal.html)
pub const KEY_KP_Decimal = 65454;
/// const [KEY_KP_Delete](https://docs.gtk.org/gdk4/const.KEY_KP_Delete.html)
pub const KEY_KP_Delete = 65439;
/// const [KEY_KP_Divide](https://docs.gtk.org/gdk4/const.KEY_KP_Divide.html)
pub const KEY_KP_Divide = 65455;
/// const [KEY_KP_Down](https://docs.gtk.org/gdk4/const.KEY_KP_Down.html)
pub const KEY_KP_Down = 65433;
/// const [KEY_KP_End](https://docs.gtk.org/gdk4/const.KEY_KP_End.html)
pub const KEY_KP_End = 65436;
/// const [KEY_KP_Enter](https://docs.gtk.org/gdk4/const.KEY_KP_Enter.html)
pub const KEY_KP_Enter = 65421;
/// const [KEY_KP_Equal](https://docs.gtk.org/gdk4/const.KEY_KP_Equal.html)
pub const KEY_KP_Equal = 65469;
/// const [KEY_KP_F1](https://docs.gtk.org/gdk4/const.KEY_KP_F1.html)
pub const KEY_KP_F1 = 65425;
/// const [KEY_KP_F2](https://docs.gtk.org/gdk4/const.KEY_KP_F2.html)
pub const KEY_KP_F2 = 65426;
/// const [KEY_KP_F3](https://docs.gtk.org/gdk4/const.KEY_KP_F3.html)
pub const KEY_KP_F3 = 65427;
/// const [KEY_KP_F4](https://docs.gtk.org/gdk4/const.KEY_KP_F4.html)
pub const KEY_KP_F4 = 65428;
/// const [KEY_KP_Home](https://docs.gtk.org/gdk4/const.KEY_KP_Home.html)
pub const KEY_KP_Home = 65429;
/// const [KEY_KP_Insert](https://docs.gtk.org/gdk4/const.KEY_KP_Insert.html)
pub const KEY_KP_Insert = 65438;
/// const [KEY_KP_Left](https://docs.gtk.org/gdk4/const.KEY_KP_Left.html)
pub const KEY_KP_Left = 65430;
/// const [KEY_KP_Multiply](https://docs.gtk.org/gdk4/const.KEY_KP_Multiply.html)
pub const KEY_KP_Multiply = 65450;
/// const [KEY_KP_Next](https://docs.gtk.org/gdk4/const.KEY_KP_Next.html)
pub const KEY_KP_Next = 65435;
/// const [KEY_KP_Page_Down](https://docs.gtk.org/gdk4/const.KEY_KP_Page_Down.html)
pub const KEY_KP_Page_Down = 65435;
/// const [KEY_KP_Page_Up](https://docs.gtk.org/gdk4/const.KEY_KP_Page_Up.html)
pub const KEY_KP_Page_Up = 65434;
/// const [KEY_KP_Prior](https://docs.gtk.org/gdk4/const.KEY_KP_Prior.html)
pub const KEY_KP_Prior = 65434;
/// const [KEY_KP_Right](https://docs.gtk.org/gdk4/const.KEY_KP_Right.html)
pub const KEY_KP_Right = 65432;
/// const [KEY_KP_Separator](https://docs.gtk.org/gdk4/const.KEY_KP_Separator.html)
pub const KEY_KP_Separator = 65452;
/// const [KEY_KP_Space](https://docs.gtk.org/gdk4/const.KEY_KP_Space.html)
pub const KEY_KP_Space = 65408;
/// const [KEY_KP_Subtract](https://docs.gtk.org/gdk4/const.KEY_KP_Subtract.html)
pub const KEY_KP_Subtract = 65453;
/// const [KEY_KP_Tab](https://docs.gtk.org/gdk4/const.KEY_KP_Tab.html)
pub const KEY_KP_Tab = 65417;
/// const [KEY_KP_Up](https://docs.gtk.org/gdk4/const.KEY_KP_Up.html)
pub const KEY_KP_Up = 65431;
/// const [KEY_Kana_Lock](https://docs.gtk.org/gdk4/const.KEY_Kana_Lock.html)
pub const KEY_Kana_Lock = 65325;
/// const [KEY_Kana_Shift](https://docs.gtk.org/gdk4/const.KEY_Kana_Shift.html)
pub const KEY_Kana_Shift = 65326;
/// const [KEY_Kanji](https://docs.gtk.org/gdk4/const.KEY_Kanji.html)
pub const KEY_Kanji = 65313;
/// const [KEY_Kanji_Bangou](https://docs.gtk.org/gdk4/const.KEY_Kanji_Bangou.html)
pub const KEY_Kanji_Bangou = 65335;
/// const [KEY_Katakana](https://docs.gtk.org/gdk4/const.KEY_Katakana.html)
pub const KEY_Katakana = 65318;
/// const [KEY_KbdBrightnessDown](https://docs.gtk.org/gdk4/const.KEY_KbdBrightnessDown.html)
pub const KEY_KbdBrightnessDown = 269025030;
/// const [KEY_KbdBrightnessUp](https://docs.gtk.org/gdk4/const.KEY_KbdBrightnessUp.html)
pub const KEY_KbdBrightnessUp = 269025029;
/// const [KEY_KbdLightOnOff](https://docs.gtk.org/gdk4/const.KEY_KbdLightOnOff.html)
pub const KEY_KbdLightOnOff = 269025028;
/// const [KEY_Kcedilla](https://docs.gtk.org/gdk4/const.KEY_Kcedilla.html)
pub const KEY_Kcedilla = 979;
/// const [KEY_Keyboard](https://docs.gtk.org/gdk4/const.KEY_Keyboard.html)
pub const KEY_Keyboard = 269025203;
/// const [KEY_Korean_Won](https://docs.gtk.org/gdk4/const.KEY_Korean_Won.html)
pub const KEY_Korean_Won = 3839;
/// const [KEY_L](https://docs.gtk.org/gdk4/const.KEY_L.html)
pub const KEY_L = 76;
/// const [KEY_L1](https://docs.gtk.org/gdk4/const.KEY_L1.html)
pub const KEY_L1 = 65480;
/// const [KEY_L10](https://docs.gtk.org/gdk4/const.KEY_L10.html)
pub const KEY_L10 = 65489;
/// const [KEY_L2](https://docs.gtk.org/gdk4/const.KEY_L2.html)
pub const KEY_L2 = 65481;
/// const [KEY_L3](https://docs.gtk.org/gdk4/const.KEY_L3.html)
pub const KEY_L3 = 65482;
/// const [KEY_L4](https://docs.gtk.org/gdk4/const.KEY_L4.html)
pub const KEY_L4 = 65483;
/// const [KEY_L5](https://docs.gtk.org/gdk4/const.KEY_L5.html)
pub const KEY_L5 = 65484;
/// const [KEY_L6](https://docs.gtk.org/gdk4/const.KEY_L6.html)
pub const KEY_L6 = 65485;
/// const [KEY_L7](https://docs.gtk.org/gdk4/const.KEY_L7.html)
pub const KEY_L7 = 65486;
/// const [KEY_L8](https://docs.gtk.org/gdk4/const.KEY_L8.html)
pub const KEY_L8 = 65487;
/// const [KEY_L9](https://docs.gtk.org/gdk4/const.KEY_L9.html)
pub const KEY_L9 = 65488;
/// const [KEY_Lacute](https://docs.gtk.org/gdk4/const.KEY_Lacute.html)
pub const KEY_Lacute = 453;
/// const [KEY_Last_Virtual_Screen](https://docs.gtk.org/gdk4/const.KEY_Last_Virtual_Screen.html)
pub const KEY_Last_Virtual_Screen = 65236;
/// const [KEY_Launch0](https://docs.gtk.org/gdk4/const.KEY_Launch0.html)
pub const KEY_Launch0 = 269025088;
/// const [KEY_Launch1](https://docs.gtk.org/gdk4/const.KEY_Launch1.html)
pub const KEY_Launch1 = 269025089;
/// const [KEY_Launch2](https://docs.gtk.org/gdk4/const.KEY_Launch2.html)
pub const KEY_Launch2 = 269025090;
/// const [KEY_Launch3](https://docs.gtk.org/gdk4/const.KEY_Launch3.html)
pub const KEY_Launch3 = 269025091;
/// const [KEY_Launch4](https://docs.gtk.org/gdk4/const.KEY_Launch4.html)
pub const KEY_Launch4 = 269025092;
/// const [KEY_Launch5](https://docs.gtk.org/gdk4/const.KEY_Launch5.html)
pub const KEY_Launch5 = 269025093;
/// const [KEY_Launch6](https://docs.gtk.org/gdk4/const.KEY_Launch6.html)
pub const KEY_Launch6 = 269025094;
/// const [KEY_Launch7](https://docs.gtk.org/gdk4/const.KEY_Launch7.html)
pub const KEY_Launch7 = 269025095;
/// const [KEY_Launch8](https://docs.gtk.org/gdk4/const.KEY_Launch8.html)
pub const KEY_Launch8 = 269025096;
/// const [KEY_Launch9](https://docs.gtk.org/gdk4/const.KEY_Launch9.html)
pub const KEY_Launch9 = 269025097;
/// const [KEY_LaunchA](https://docs.gtk.org/gdk4/const.KEY_LaunchA.html)
pub const KEY_LaunchA = 269025098;
/// const [KEY_LaunchB](https://docs.gtk.org/gdk4/const.KEY_LaunchB.html)
pub const KEY_LaunchB = 269025099;
/// const [KEY_LaunchC](https://docs.gtk.org/gdk4/const.KEY_LaunchC.html)
pub const KEY_LaunchC = 269025100;
/// const [KEY_LaunchD](https://docs.gtk.org/gdk4/const.KEY_LaunchD.html)
pub const KEY_LaunchD = 269025101;
/// const [KEY_LaunchE](https://docs.gtk.org/gdk4/const.KEY_LaunchE.html)
pub const KEY_LaunchE = 269025102;
/// const [KEY_LaunchF](https://docs.gtk.org/gdk4/const.KEY_LaunchF.html)
pub const KEY_LaunchF = 269025103;
/// const [KEY_Lbelowdot](https://docs.gtk.org/gdk4/const.KEY_Lbelowdot.html)
pub const KEY_Lbelowdot = 16784950;
/// const [KEY_Lcaron](https://docs.gtk.org/gdk4/const.KEY_Lcaron.html)
pub const KEY_Lcaron = 421;
/// const [KEY_Lcedilla](https://docs.gtk.org/gdk4/const.KEY_Lcedilla.html)
pub const KEY_Lcedilla = 934;
/// const [KEY_Left](https://docs.gtk.org/gdk4/const.KEY_Left.html)
pub const KEY_Left = 65361;
/// const [KEY_LightBulb](https://docs.gtk.org/gdk4/const.KEY_LightBulb.html)
pub const KEY_LightBulb = 269025077;
/// const [KEY_Linefeed](https://docs.gtk.org/gdk4/const.KEY_Linefeed.html)
pub const KEY_Linefeed = 65290;
/// const [KEY_LiraSign](https://docs.gtk.org/gdk4/const.KEY_LiraSign.html)
pub const KEY_LiraSign = 16785572;
/// const [KEY_LogGrabInfo](https://docs.gtk.org/gdk4/const.KEY_LogGrabInfo.html)
pub const KEY_LogGrabInfo = 269024805;
/// const [KEY_LogOff](https://docs.gtk.org/gdk4/const.KEY_LogOff.html)
pub const KEY_LogOff = 269025121;
/// const [KEY_LogWindowTree](https://docs.gtk.org/gdk4/const.KEY_LogWindowTree.html)
pub const KEY_LogWindowTree = 269024804;
/// const [KEY_Lstroke](https://docs.gtk.org/gdk4/const.KEY_Lstroke.html)
pub const KEY_Lstroke = 419;
/// const [KEY_M](https://docs.gtk.org/gdk4/const.KEY_M.html)
pub const KEY_M = 77;
/// const [KEY_Mabovedot](https://docs.gtk.org/gdk4/const.KEY_Mabovedot.html)
pub const KEY_Mabovedot = 16784960;
/// const [KEY_Macedonia_DSE](https://docs.gtk.org/gdk4/const.KEY_Macedonia_DSE.html)
pub const KEY_Macedonia_DSE = 1717;
/// const [KEY_Macedonia_GJE](https://docs.gtk.org/gdk4/const.KEY_Macedonia_GJE.html)
pub const KEY_Macedonia_GJE = 1714;
/// const [KEY_Macedonia_KJE](https://docs.gtk.org/gdk4/const.KEY_Macedonia_KJE.html)
pub const KEY_Macedonia_KJE = 1724;
/// const [KEY_Macedonia_dse](https://docs.gtk.org/gdk4/const.KEY_Macedonia_dse.html)
pub const KEY_Macedonia_dse = 1701;
/// const [KEY_Macedonia_gje](https://docs.gtk.org/gdk4/const.KEY_Macedonia_gje.html)
pub const KEY_Macedonia_gje = 1698;
/// const [KEY_Macedonia_kje](https://docs.gtk.org/gdk4/const.KEY_Macedonia_kje.html)
pub const KEY_Macedonia_kje = 1708;
/// const [KEY_Mae_Koho](https://docs.gtk.org/gdk4/const.KEY_Mae_Koho.html)
pub const KEY_Mae_Koho = 65342;
/// const [KEY_Mail](https://docs.gtk.org/gdk4/const.KEY_Mail.html)
pub const KEY_Mail = 269025049;
/// const [KEY_MailForward](https://docs.gtk.org/gdk4/const.KEY_MailForward.html)
pub const KEY_MailForward = 269025168;
/// const [KEY_Market](https://docs.gtk.org/gdk4/const.KEY_Market.html)
pub const KEY_Market = 269025122;
/// const [KEY_Massyo](https://docs.gtk.org/gdk4/const.KEY_Massyo.html)
pub const KEY_Massyo = 65324;
/// const [KEY_Meeting](https://docs.gtk.org/gdk4/const.KEY_Meeting.html)
pub const KEY_Meeting = 269025123;
/// const [KEY_Memo](https://docs.gtk.org/gdk4/const.KEY_Memo.html)
pub const KEY_Memo = 269025054;
/// const [KEY_Menu](https://docs.gtk.org/gdk4/const.KEY_Menu.html)
pub const KEY_Menu = 65383;
/// const [KEY_MenuKB](https://docs.gtk.org/gdk4/const.KEY_MenuKB.html)
pub const KEY_MenuKB = 269025125;
/// const [KEY_MenuPB](https://docs.gtk.org/gdk4/const.KEY_MenuPB.html)
pub const KEY_MenuPB = 269025126;
/// const [KEY_Messenger](https://docs.gtk.org/gdk4/const.KEY_Messenger.html)
pub const KEY_Messenger = 269025166;
/// const [KEY_Meta_L](https://docs.gtk.org/gdk4/const.KEY_Meta_L.html)
pub const KEY_Meta_L = 65511;
/// const [KEY_Meta_R](https://docs.gtk.org/gdk4/const.KEY_Meta_R.html)
pub const KEY_Meta_R = 65512;
/// const [KEY_MillSign](https://docs.gtk.org/gdk4/const.KEY_MillSign.html)
pub const KEY_MillSign = 16785573;
/// const [KEY_ModeLock](https://docs.gtk.org/gdk4/const.KEY_ModeLock.html)
pub const KEY_ModeLock = 269025025;
/// const [KEY_Mode_switch](https://docs.gtk.org/gdk4/const.KEY_Mode_switch.html)
pub const KEY_Mode_switch = 65406;
/// const [KEY_MonBrightnessDown](https://docs.gtk.org/gdk4/const.KEY_MonBrightnessDown.html)
pub const KEY_MonBrightnessDown = 269025027;
/// const [KEY_MonBrightnessUp](https://docs.gtk.org/gdk4/const.KEY_MonBrightnessUp.html)
pub const KEY_MonBrightnessUp = 269025026;
/// const [KEY_MouseKeys_Accel_Enable](https://docs.gtk.org/gdk4/const.KEY_MouseKeys_Accel_Enable.html)
pub const KEY_MouseKeys_Accel_Enable = 65143;
/// const [KEY_MouseKeys_Enable](https://docs.gtk.org/gdk4/const.KEY_MouseKeys_Enable.html)
pub const KEY_MouseKeys_Enable = 65142;
/// const [KEY_Muhenkan](https://docs.gtk.org/gdk4/const.KEY_Muhenkan.html)
pub const KEY_Muhenkan = 65314;
/// const [KEY_Multi_key](https://docs.gtk.org/gdk4/const.KEY_Multi_key.html)
pub const KEY_Multi_key = 65312;
/// const [KEY_MultipleCandidate](https://docs.gtk.org/gdk4/const.KEY_MultipleCandidate.html)
pub const KEY_MultipleCandidate = 65341;
/// const [KEY_Music](https://docs.gtk.org/gdk4/const.KEY_Music.html)
pub const KEY_Music = 269025170;
/// const [KEY_MyComputer](https://docs.gtk.org/gdk4/const.KEY_MyComputer.html)
pub const KEY_MyComputer = 269025075;
/// const [KEY_MySites](https://docs.gtk.org/gdk4/const.KEY_MySites.html)
pub const KEY_MySites = 269025127;
/// const [KEY_N](https://docs.gtk.org/gdk4/const.KEY_N.html)
pub const KEY_N = 78;
/// const [KEY_Nacute](https://docs.gtk.org/gdk4/const.KEY_Nacute.html)
pub const KEY_Nacute = 465;
/// const [KEY_NairaSign](https://docs.gtk.org/gdk4/const.KEY_NairaSign.html)
pub const KEY_NairaSign = 16785574;
/// const [KEY_Ncaron](https://docs.gtk.org/gdk4/const.KEY_Ncaron.html)
pub const KEY_Ncaron = 466;
/// const [KEY_Ncedilla](https://docs.gtk.org/gdk4/const.KEY_Ncedilla.html)
pub const KEY_Ncedilla = 977;
/// const [KEY_New](https://docs.gtk.org/gdk4/const.KEY_New.html)
pub const KEY_New = 269025128;
/// const [KEY_NewSheqelSign](https://docs.gtk.org/gdk4/const.KEY_NewSheqelSign.html)
pub const KEY_NewSheqelSign = 16785578;
/// const [KEY_News](https://docs.gtk.org/gdk4/const.KEY_News.html)
pub const KEY_News = 269025129;
/// const [KEY_Next](https://docs.gtk.org/gdk4/const.KEY_Next.html)
pub const KEY_Next = 65366;
/// const [KEY_Next_VMode](https://docs.gtk.org/gdk4/const.KEY_Next_VMode.html)
pub const KEY_Next_VMode = 269024802;
/// const [KEY_Next_Virtual_Screen](https://docs.gtk.org/gdk4/const.KEY_Next_Virtual_Screen.html)
pub const KEY_Next_Virtual_Screen = 65234;
/// const [KEY_Ntilde](https://docs.gtk.org/gdk4/const.KEY_Ntilde.html)
pub const KEY_Ntilde = 209;
/// const [KEY_Num_Lock](https://docs.gtk.org/gdk4/const.KEY_Num_Lock.html)
pub const KEY_Num_Lock = 65407;
/// const [KEY_O](https://docs.gtk.org/gdk4/const.KEY_O.html)
pub const KEY_O = 79;
/// const [KEY_OE](https://docs.gtk.org/gdk4/const.KEY_OE.html)
pub const KEY_OE = 5052;
/// const [KEY_Oacute](https://docs.gtk.org/gdk4/const.KEY_Oacute.html)
pub const KEY_Oacute = 211;
/// const [KEY_Obarred](https://docs.gtk.org/gdk4/const.KEY_Obarred.html)
pub const KEY_Obarred = 16777631;
/// const [KEY_Obelowdot](https://docs.gtk.org/gdk4/const.KEY_Obelowdot.html)
pub const KEY_Obelowdot = 16785100;
/// const [KEY_Ocaron](https://docs.gtk.org/gdk4/const.KEY_Ocaron.html)
pub const KEY_Ocaron = 16777681;
/// const [KEY_Ocircumflex](https://docs.gtk.org/gdk4/const.KEY_Ocircumflex.html)
pub const KEY_Ocircumflex = 212;
/// const [KEY_Ocircumflexacute](https://docs.gtk.org/gdk4/const.KEY_Ocircumflexacute.html)
pub const KEY_Ocircumflexacute = 16785104;
/// const [KEY_Ocircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_Ocircumflexbelowdot.html)
pub const KEY_Ocircumflexbelowdot = 16785112;
/// const [KEY_Ocircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_Ocircumflexgrave.html)
pub const KEY_Ocircumflexgrave = 16785106;
/// const [KEY_Ocircumflexhook](https://docs.gtk.org/gdk4/const.KEY_Ocircumflexhook.html)
pub const KEY_Ocircumflexhook = 16785108;
/// const [KEY_Ocircumflextilde](https://docs.gtk.org/gdk4/const.KEY_Ocircumflextilde.html)
pub const KEY_Ocircumflextilde = 16785110;
/// const [KEY_Odiaeresis](https://docs.gtk.org/gdk4/const.KEY_Odiaeresis.html)
pub const KEY_Odiaeresis = 214;
/// const [KEY_Odoubleacute](https://docs.gtk.org/gdk4/const.KEY_Odoubleacute.html)
pub const KEY_Odoubleacute = 469;
/// const [KEY_OfficeHome](https://docs.gtk.org/gdk4/const.KEY_OfficeHome.html)
pub const KEY_OfficeHome = 269025130;
/// const [KEY_Ograve](https://docs.gtk.org/gdk4/const.KEY_Ograve.html)
pub const KEY_Ograve = 210;
/// const [KEY_Ohook](https://docs.gtk.org/gdk4/const.KEY_Ohook.html)
pub const KEY_Ohook = 16785102;
/// const [KEY_Ohorn](https://docs.gtk.org/gdk4/const.KEY_Ohorn.html)
pub const KEY_Ohorn = 16777632;
/// const [KEY_Ohornacute](https://docs.gtk.org/gdk4/const.KEY_Ohornacute.html)
pub const KEY_Ohornacute = 16785114;
/// const [KEY_Ohornbelowdot](https://docs.gtk.org/gdk4/const.KEY_Ohornbelowdot.html)
pub const KEY_Ohornbelowdot = 16785122;
/// const [KEY_Ohorngrave](https://docs.gtk.org/gdk4/const.KEY_Ohorngrave.html)
pub const KEY_Ohorngrave = 16785116;
/// const [KEY_Ohornhook](https://docs.gtk.org/gdk4/const.KEY_Ohornhook.html)
pub const KEY_Ohornhook = 16785118;
/// const [KEY_Ohorntilde](https://docs.gtk.org/gdk4/const.KEY_Ohorntilde.html)
pub const KEY_Ohorntilde = 16785120;
/// const [KEY_Omacron](https://docs.gtk.org/gdk4/const.KEY_Omacron.html)
pub const KEY_Omacron = 978;
/// const [KEY_Ooblique](https://docs.gtk.org/gdk4/const.KEY_Ooblique.html)
pub const KEY_Ooblique = 216;
/// const [KEY_Open](https://docs.gtk.org/gdk4/const.KEY_Open.html)
pub const KEY_Open = 269025131;
/// const [KEY_OpenURL](https://docs.gtk.org/gdk4/const.KEY_OpenURL.html)
pub const KEY_OpenURL = 269025080;
/// const [KEY_Option](https://docs.gtk.org/gdk4/const.KEY_Option.html)
pub const KEY_Option = 269025132;
/// const [KEY_Oslash](https://docs.gtk.org/gdk4/const.KEY_Oslash.html)
pub const KEY_Oslash = 216;
/// const [KEY_Otilde](https://docs.gtk.org/gdk4/const.KEY_Otilde.html)
pub const KEY_Otilde = 213;
/// const [KEY_Overlay1_Enable](https://docs.gtk.org/gdk4/const.KEY_Overlay1_Enable.html)
pub const KEY_Overlay1_Enable = 65144;
/// const [KEY_Overlay2_Enable](https://docs.gtk.org/gdk4/const.KEY_Overlay2_Enable.html)
pub const KEY_Overlay2_Enable = 65145;
/// const [KEY_P](https://docs.gtk.org/gdk4/const.KEY_P.html)
pub const KEY_P = 80;
/// const [KEY_Pabovedot](https://docs.gtk.org/gdk4/const.KEY_Pabovedot.html)
pub const KEY_Pabovedot = 16784982;
/// const [KEY_Page_Down](https://docs.gtk.org/gdk4/const.KEY_Page_Down.html)
pub const KEY_Page_Down = 65366;
/// const [KEY_Page_Up](https://docs.gtk.org/gdk4/const.KEY_Page_Up.html)
pub const KEY_Page_Up = 65365;
/// const [KEY_Paste](https://docs.gtk.org/gdk4/const.KEY_Paste.html)
pub const KEY_Paste = 269025133;
/// const [KEY_Pause](https://docs.gtk.org/gdk4/const.KEY_Pause.html)
pub const KEY_Pause = 65299;
/// const [KEY_PesetaSign](https://docs.gtk.org/gdk4/const.KEY_PesetaSign.html)
pub const KEY_PesetaSign = 16785575;
/// const [KEY_Phone](https://docs.gtk.org/gdk4/const.KEY_Phone.html)
pub const KEY_Phone = 269025134;
/// const [KEY_Pictures](https://docs.gtk.org/gdk4/const.KEY_Pictures.html)
pub const KEY_Pictures = 269025169;
/// const [KEY_Pointer_Accelerate](https://docs.gtk.org/gdk4/const.KEY_Pointer_Accelerate.html)
pub const KEY_Pointer_Accelerate = 65274;
/// const [KEY_Pointer_Button1](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button1.html)
pub const KEY_Pointer_Button1 = 65257;
/// const [KEY_Pointer_Button2](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button2.html)
pub const KEY_Pointer_Button2 = 65258;
/// const [KEY_Pointer_Button3](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button3.html)
pub const KEY_Pointer_Button3 = 65259;
/// const [KEY_Pointer_Button4](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button4.html)
pub const KEY_Pointer_Button4 = 65260;
/// const [KEY_Pointer_Button5](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button5.html)
pub const KEY_Pointer_Button5 = 65261;
/// const [KEY_Pointer_Button_Dflt](https://docs.gtk.org/gdk4/const.KEY_Pointer_Button_Dflt.html)
pub const KEY_Pointer_Button_Dflt = 65256;
/// const [KEY_Pointer_DblClick1](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick1.html)
pub const KEY_Pointer_DblClick1 = 65263;
/// const [KEY_Pointer_DblClick2](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick2.html)
pub const KEY_Pointer_DblClick2 = 65264;
/// const [KEY_Pointer_DblClick3](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick3.html)
pub const KEY_Pointer_DblClick3 = 65265;
/// const [KEY_Pointer_DblClick4](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick4.html)
pub const KEY_Pointer_DblClick4 = 65266;
/// const [KEY_Pointer_DblClick5](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick5.html)
pub const KEY_Pointer_DblClick5 = 65267;
/// const [KEY_Pointer_DblClick_Dflt](https://docs.gtk.org/gdk4/const.KEY_Pointer_DblClick_Dflt.html)
pub const KEY_Pointer_DblClick_Dflt = 65262;
/// const [KEY_Pointer_DfltBtnNext](https://docs.gtk.org/gdk4/const.KEY_Pointer_DfltBtnNext.html)
pub const KEY_Pointer_DfltBtnNext = 65275;
/// const [KEY_Pointer_DfltBtnPrev](https://docs.gtk.org/gdk4/const.KEY_Pointer_DfltBtnPrev.html)
pub const KEY_Pointer_DfltBtnPrev = 65276;
/// const [KEY_Pointer_Down](https://docs.gtk.org/gdk4/const.KEY_Pointer_Down.html)
pub const KEY_Pointer_Down = 65251;
/// const [KEY_Pointer_DownLeft](https://docs.gtk.org/gdk4/const.KEY_Pointer_DownLeft.html)
pub const KEY_Pointer_DownLeft = 65254;
/// const [KEY_Pointer_DownRight](https://docs.gtk.org/gdk4/const.KEY_Pointer_DownRight.html)
pub const KEY_Pointer_DownRight = 65255;
/// const [KEY_Pointer_Drag1](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag1.html)
pub const KEY_Pointer_Drag1 = 65269;
/// const [KEY_Pointer_Drag2](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag2.html)
pub const KEY_Pointer_Drag2 = 65270;
/// const [KEY_Pointer_Drag3](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag3.html)
pub const KEY_Pointer_Drag3 = 65271;
/// const [KEY_Pointer_Drag4](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag4.html)
pub const KEY_Pointer_Drag4 = 65272;
/// const [KEY_Pointer_Drag5](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag5.html)
pub const KEY_Pointer_Drag5 = 65277;
/// const [KEY_Pointer_Drag_Dflt](https://docs.gtk.org/gdk4/const.KEY_Pointer_Drag_Dflt.html)
pub const KEY_Pointer_Drag_Dflt = 65268;
/// const [KEY_Pointer_EnableKeys](https://docs.gtk.org/gdk4/const.KEY_Pointer_EnableKeys.html)
pub const KEY_Pointer_EnableKeys = 65273;
/// const [KEY_Pointer_Left](https://docs.gtk.org/gdk4/const.KEY_Pointer_Left.html)
pub const KEY_Pointer_Left = 65248;
/// const [KEY_Pointer_Right](https://docs.gtk.org/gdk4/const.KEY_Pointer_Right.html)
pub const KEY_Pointer_Right = 65249;
/// const [KEY_Pointer_Up](https://docs.gtk.org/gdk4/const.KEY_Pointer_Up.html)
pub const KEY_Pointer_Up = 65250;
/// const [KEY_Pointer_UpLeft](https://docs.gtk.org/gdk4/const.KEY_Pointer_UpLeft.html)
pub const KEY_Pointer_UpLeft = 65252;
/// const [KEY_Pointer_UpRight](https://docs.gtk.org/gdk4/const.KEY_Pointer_UpRight.html)
pub const KEY_Pointer_UpRight = 65253;
/// const [KEY_PowerDown](https://docs.gtk.org/gdk4/const.KEY_PowerDown.html)
pub const KEY_PowerDown = 269025057;
/// const [KEY_PowerOff](https://docs.gtk.org/gdk4/const.KEY_PowerOff.html)
pub const KEY_PowerOff = 269025066;
/// const [KEY_Prev_VMode](https://docs.gtk.org/gdk4/const.KEY_Prev_VMode.html)
pub const KEY_Prev_VMode = 269024803;
/// const [KEY_Prev_Virtual_Screen](https://docs.gtk.org/gdk4/const.KEY_Prev_Virtual_Screen.html)
pub const KEY_Prev_Virtual_Screen = 65233;
/// const [KEY_PreviousCandidate](https://docs.gtk.org/gdk4/const.KEY_PreviousCandidate.html)
pub const KEY_PreviousCandidate = 65342;
/// const [KEY_Print](https://docs.gtk.org/gdk4/const.KEY_Print.html)
pub const KEY_Print = 65377;
/// const [KEY_Prior](https://docs.gtk.org/gdk4/const.KEY_Prior.html)
pub const KEY_Prior = 65365;
/// const [KEY_Q](https://docs.gtk.org/gdk4/const.KEY_Q.html)
pub const KEY_Q = 81;
/// const [KEY_R](https://docs.gtk.org/gdk4/const.KEY_R.html)
pub const KEY_R = 82;
/// const [KEY_R1](https://docs.gtk.org/gdk4/const.KEY_R1.html)
pub const KEY_R1 = 65490;
/// const [KEY_R10](https://docs.gtk.org/gdk4/const.KEY_R10.html)
pub const KEY_R10 = 65499;
/// const [KEY_R11](https://docs.gtk.org/gdk4/const.KEY_R11.html)
pub const KEY_R11 = 65500;
/// const [KEY_R12](https://docs.gtk.org/gdk4/const.KEY_R12.html)
pub const KEY_R12 = 65501;
/// const [KEY_R13](https://docs.gtk.org/gdk4/const.KEY_R13.html)
pub const KEY_R13 = 65502;
/// const [KEY_R14](https://docs.gtk.org/gdk4/const.KEY_R14.html)
pub const KEY_R14 = 65503;
/// const [KEY_R15](https://docs.gtk.org/gdk4/const.KEY_R15.html)
pub const KEY_R15 = 65504;
/// const [KEY_R2](https://docs.gtk.org/gdk4/const.KEY_R2.html)
pub const KEY_R2 = 65491;
/// const [KEY_R3](https://docs.gtk.org/gdk4/const.KEY_R3.html)
pub const KEY_R3 = 65492;
/// const [KEY_R4](https://docs.gtk.org/gdk4/const.KEY_R4.html)
pub const KEY_R4 = 65493;
/// const [KEY_R5](https://docs.gtk.org/gdk4/const.KEY_R5.html)
pub const KEY_R5 = 65494;
/// const [KEY_R6](https://docs.gtk.org/gdk4/const.KEY_R6.html)
pub const KEY_R6 = 65495;
/// const [KEY_R7](https://docs.gtk.org/gdk4/const.KEY_R7.html)
pub const KEY_R7 = 65496;
/// const [KEY_R8](https://docs.gtk.org/gdk4/const.KEY_R8.html)
pub const KEY_R8 = 65497;
/// const [KEY_R9](https://docs.gtk.org/gdk4/const.KEY_R9.html)
pub const KEY_R9 = 65498;
/// const [KEY_RFKill](https://docs.gtk.org/gdk4/const.KEY_RFKill.html)
pub const KEY_RFKill = 269025205;
/// const [KEY_Racute](https://docs.gtk.org/gdk4/const.KEY_Racute.html)
pub const KEY_Racute = 448;
/// const [KEY_Rcaron](https://docs.gtk.org/gdk4/const.KEY_Rcaron.html)
pub const KEY_Rcaron = 472;
/// const [KEY_Rcedilla](https://docs.gtk.org/gdk4/const.KEY_Rcedilla.html)
pub const KEY_Rcedilla = 931;
/// const [KEY_Red](https://docs.gtk.org/gdk4/const.KEY_Red.html)
pub const KEY_Red = 269025187;
/// const [KEY_Redo](https://docs.gtk.org/gdk4/const.KEY_Redo.html)
pub const KEY_Redo = 65382;
/// const [KEY_Refresh](https://docs.gtk.org/gdk4/const.KEY_Refresh.html)
pub const KEY_Refresh = 269025065;
/// const [KEY_Reload](https://docs.gtk.org/gdk4/const.KEY_Reload.html)
pub const KEY_Reload = 269025139;
/// const [KEY_RepeatKeys_Enable](https://docs.gtk.org/gdk4/const.KEY_RepeatKeys_Enable.html)
pub const KEY_RepeatKeys_Enable = 65138;
/// const [KEY_Reply](https://docs.gtk.org/gdk4/const.KEY_Reply.html)
pub const KEY_Reply = 269025138;
/// const [KEY_Return](https://docs.gtk.org/gdk4/const.KEY_Return.html)
pub const KEY_Return = 65293;
/// const [KEY_Right](https://docs.gtk.org/gdk4/const.KEY_Right.html)
pub const KEY_Right = 65363;
/// const [KEY_RockerDown](https://docs.gtk.org/gdk4/const.KEY_RockerDown.html)
pub const KEY_RockerDown = 269025060;
/// const [KEY_RockerEnter](https://docs.gtk.org/gdk4/const.KEY_RockerEnter.html)
pub const KEY_RockerEnter = 269025061;
/// const [KEY_RockerUp](https://docs.gtk.org/gdk4/const.KEY_RockerUp.html)
pub const KEY_RockerUp = 269025059;
/// const [KEY_Romaji](https://docs.gtk.org/gdk4/const.KEY_Romaji.html)
pub const KEY_Romaji = 65316;
/// const [KEY_RotateWindows](https://docs.gtk.org/gdk4/const.KEY_RotateWindows.html)
pub const KEY_RotateWindows = 269025140;
/// const [KEY_RotationKB](https://docs.gtk.org/gdk4/const.KEY_RotationKB.html)
pub const KEY_RotationKB = 269025142;
/// const [KEY_RotationPB](https://docs.gtk.org/gdk4/const.KEY_RotationPB.html)
pub const KEY_RotationPB = 269025141;
/// const [KEY_RupeeSign](https://docs.gtk.org/gdk4/const.KEY_RupeeSign.html)
pub const KEY_RupeeSign = 16785576;
/// const [KEY_S](https://docs.gtk.org/gdk4/const.KEY_S.html)
pub const KEY_S = 83;
/// const [KEY_SCHWA](https://docs.gtk.org/gdk4/const.KEY_SCHWA.html)
pub const KEY_SCHWA = 16777615;
/// const [KEY_Sabovedot](https://docs.gtk.org/gdk4/const.KEY_Sabovedot.html)
pub const KEY_Sabovedot = 16784992;
/// const [KEY_Sacute](https://docs.gtk.org/gdk4/const.KEY_Sacute.html)
pub const KEY_Sacute = 422;
/// const [KEY_Save](https://docs.gtk.org/gdk4/const.KEY_Save.html)
pub const KEY_Save = 269025143;
/// const [KEY_Scaron](https://docs.gtk.org/gdk4/const.KEY_Scaron.html)
pub const KEY_Scaron = 425;
/// const [KEY_Scedilla](https://docs.gtk.org/gdk4/const.KEY_Scedilla.html)
pub const KEY_Scedilla = 426;
/// const [KEY_Scircumflex](https://docs.gtk.org/gdk4/const.KEY_Scircumflex.html)
pub const KEY_Scircumflex = 734;
/// const [KEY_ScreenSaver](https://docs.gtk.org/gdk4/const.KEY_ScreenSaver.html)
pub const KEY_ScreenSaver = 269025069;
/// const [KEY_ScrollClick](https://docs.gtk.org/gdk4/const.KEY_ScrollClick.html)
pub const KEY_ScrollClick = 269025146;
/// const [KEY_ScrollDown](https://docs.gtk.org/gdk4/const.KEY_ScrollDown.html)
pub const KEY_ScrollDown = 269025145;
/// const [KEY_ScrollUp](https://docs.gtk.org/gdk4/const.KEY_ScrollUp.html)
pub const KEY_ScrollUp = 269025144;
/// const [KEY_Scroll_Lock](https://docs.gtk.org/gdk4/const.KEY_Scroll_Lock.html)
pub const KEY_Scroll_Lock = 65300;
/// const [KEY_Search](https://docs.gtk.org/gdk4/const.KEY_Search.html)
pub const KEY_Search = 269025051;
/// const [KEY_Select](https://docs.gtk.org/gdk4/const.KEY_Select.html)
pub const KEY_Select = 65376;
/// const [KEY_SelectButton](https://docs.gtk.org/gdk4/const.KEY_SelectButton.html)
pub const KEY_SelectButton = 269025184;
/// const [KEY_Send](https://docs.gtk.org/gdk4/const.KEY_Send.html)
pub const KEY_Send = 269025147;
/// const [KEY_Serbian_DJE](https://docs.gtk.org/gdk4/const.KEY_Serbian_DJE.html)
pub const KEY_Serbian_DJE = 1713;
/// const [KEY_Serbian_DZE](https://docs.gtk.org/gdk4/const.KEY_Serbian_DZE.html)
pub const KEY_Serbian_DZE = 1727;
/// const [KEY_Serbian_JE](https://docs.gtk.org/gdk4/const.KEY_Serbian_JE.html)
pub const KEY_Serbian_JE = 1720;
/// const [KEY_Serbian_LJE](https://docs.gtk.org/gdk4/const.KEY_Serbian_LJE.html)
pub const KEY_Serbian_LJE = 1721;
/// const [KEY_Serbian_NJE](https://docs.gtk.org/gdk4/const.KEY_Serbian_NJE.html)
pub const KEY_Serbian_NJE = 1722;
/// const [KEY_Serbian_TSHE](https://docs.gtk.org/gdk4/const.KEY_Serbian_TSHE.html)
pub const KEY_Serbian_TSHE = 1723;
/// const [KEY_Serbian_dje](https://docs.gtk.org/gdk4/const.KEY_Serbian_dje.html)
pub const KEY_Serbian_dje = 1697;
/// const [KEY_Serbian_dze](https://docs.gtk.org/gdk4/const.KEY_Serbian_dze.html)
pub const KEY_Serbian_dze = 1711;
/// const [KEY_Serbian_je](https://docs.gtk.org/gdk4/const.KEY_Serbian_je.html)
pub const KEY_Serbian_je = 1704;
/// const [KEY_Serbian_lje](https://docs.gtk.org/gdk4/const.KEY_Serbian_lje.html)
pub const KEY_Serbian_lje = 1705;
/// const [KEY_Serbian_nje](https://docs.gtk.org/gdk4/const.KEY_Serbian_nje.html)
pub const KEY_Serbian_nje = 1706;
/// const [KEY_Serbian_tshe](https://docs.gtk.org/gdk4/const.KEY_Serbian_tshe.html)
pub const KEY_Serbian_tshe = 1707;
/// const [KEY_Shift_L](https://docs.gtk.org/gdk4/const.KEY_Shift_L.html)
pub const KEY_Shift_L = 65505;
/// const [KEY_Shift_Lock](https://docs.gtk.org/gdk4/const.KEY_Shift_Lock.html)
pub const KEY_Shift_Lock = 65510;
/// const [KEY_Shift_R](https://docs.gtk.org/gdk4/const.KEY_Shift_R.html)
pub const KEY_Shift_R = 65506;
/// const [KEY_Shop](https://docs.gtk.org/gdk4/const.KEY_Shop.html)
pub const KEY_Shop = 269025078;
/// const [KEY_SingleCandidate](https://docs.gtk.org/gdk4/const.KEY_SingleCandidate.html)
pub const KEY_SingleCandidate = 65340;
/// const [KEY_Sinh_a](https://docs.gtk.org/gdk4/const.KEY_Sinh_a.html)
pub const KEY_Sinh_a = 16780677;
/// const [KEY_Sinh_aa](https://docs.gtk.org/gdk4/const.KEY_Sinh_aa.html)
pub const KEY_Sinh_aa = 16780678;
/// const [KEY_Sinh_aa2](https://docs.gtk.org/gdk4/const.KEY_Sinh_aa2.html)
pub const KEY_Sinh_aa2 = 16780751;
/// const [KEY_Sinh_ae](https://docs.gtk.org/gdk4/const.KEY_Sinh_ae.html)
pub const KEY_Sinh_ae = 16780679;
/// const [KEY_Sinh_ae2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ae2.html)
pub const KEY_Sinh_ae2 = 16780752;
/// const [KEY_Sinh_aee](https://docs.gtk.org/gdk4/const.KEY_Sinh_aee.html)
pub const KEY_Sinh_aee = 16780680;
/// const [KEY_Sinh_aee2](https://docs.gtk.org/gdk4/const.KEY_Sinh_aee2.html)
pub const KEY_Sinh_aee2 = 16780753;
/// const [KEY_Sinh_ai](https://docs.gtk.org/gdk4/const.KEY_Sinh_ai.html)
pub const KEY_Sinh_ai = 16780691;
/// const [KEY_Sinh_ai2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ai2.html)
pub const KEY_Sinh_ai2 = 16780763;
/// const [KEY_Sinh_al](https://docs.gtk.org/gdk4/const.KEY_Sinh_al.html)
pub const KEY_Sinh_al = 16780746;
/// const [KEY_Sinh_au](https://docs.gtk.org/gdk4/const.KEY_Sinh_au.html)
pub const KEY_Sinh_au = 16780694;
/// const [KEY_Sinh_au2](https://docs.gtk.org/gdk4/const.KEY_Sinh_au2.html)
pub const KEY_Sinh_au2 = 16780766;
/// const [KEY_Sinh_ba](https://docs.gtk.org/gdk4/const.KEY_Sinh_ba.html)
pub const KEY_Sinh_ba = 16780726;
/// const [KEY_Sinh_bha](https://docs.gtk.org/gdk4/const.KEY_Sinh_bha.html)
pub const KEY_Sinh_bha = 16780727;
/// const [KEY_Sinh_ca](https://docs.gtk.org/gdk4/const.KEY_Sinh_ca.html)
pub const KEY_Sinh_ca = 16780704;
/// const [KEY_Sinh_cha](https://docs.gtk.org/gdk4/const.KEY_Sinh_cha.html)
pub const KEY_Sinh_cha = 16780705;
/// const [KEY_Sinh_dda](https://docs.gtk.org/gdk4/const.KEY_Sinh_dda.html)
pub const KEY_Sinh_dda = 16780713;
/// const [KEY_Sinh_ddha](https://docs.gtk.org/gdk4/const.KEY_Sinh_ddha.html)
pub const KEY_Sinh_ddha = 16780714;
/// const [KEY_Sinh_dha](https://docs.gtk.org/gdk4/const.KEY_Sinh_dha.html)
pub const KEY_Sinh_dha = 16780719;
/// const [KEY_Sinh_dhha](https://docs.gtk.org/gdk4/const.KEY_Sinh_dhha.html)
pub const KEY_Sinh_dhha = 16780720;
/// const [KEY_Sinh_e](https://docs.gtk.org/gdk4/const.KEY_Sinh_e.html)
pub const KEY_Sinh_e = 16780689;
/// const [KEY_Sinh_e2](https://docs.gtk.org/gdk4/const.KEY_Sinh_e2.html)
pub const KEY_Sinh_e2 = 16780761;
/// const [KEY_Sinh_ee](https://docs.gtk.org/gdk4/const.KEY_Sinh_ee.html)
pub const KEY_Sinh_ee = 16780690;
/// const [KEY_Sinh_ee2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ee2.html)
pub const KEY_Sinh_ee2 = 16780762;
/// const [KEY_Sinh_fa](https://docs.gtk.org/gdk4/const.KEY_Sinh_fa.html)
pub const KEY_Sinh_fa = 16780742;
/// const [KEY_Sinh_ga](https://docs.gtk.org/gdk4/const.KEY_Sinh_ga.html)
pub const KEY_Sinh_ga = 16780700;
/// const [KEY_Sinh_gha](https://docs.gtk.org/gdk4/const.KEY_Sinh_gha.html)
pub const KEY_Sinh_gha = 16780701;
/// const [KEY_Sinh_h2](https://docs.gtk.org/gdk4/const.KEY_Sinh_h2.html)
pub const KEY_Sinh_h2 = 16780675;
/// const [KEY_Sinh_ha](https://docs.gtk.org/gdk4/const.KEY_Sinh_ha.html)
pub const KEY_Sinh_ha = 16780740;
/// const [KEY_Sinh_i](https://docs.gtk.org/gdk4/const.KEY_Sinh_i.html)
pub const KEY_Sinh_i = 16780681;
/// const [KEY_Sinh_i2](https://docs.gtk.org/gdk4/const.KEY_Sinh_i2.html)
pub const KEY_Sinh_i2 = 16780754;
/// const [KEY_Sinh_ii](https://docs.gtk.org/gdk4/const.KEY_Sinh_ii.html)
pub const KEY_Sinh_ii = 16780682;
/// const [KEY_Sinh_ii2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ii2.html)
pub const KEY_Sinh_ii2 = 16780755;
/// const [KEY_Sinh_ja](https://docs.gtk.org/gdk4/const.KEY_Sinh_ja.html)
pub const KEY_Sinh_ja = 16780706;
/// const [KEY_Sinh_jha](https://docs.gtk.org/gdk4/const.KEY_Sinh_jha.html)
pub const KEY_Sinh_jha = 16780707;
/// const [KEY_Sinh_jnya](https://docs.gtk.org/gdk4/const.KEY_Sinh_jnya.html)
pub const KEY_Sinh_jnya = 16780709;
/// const [KEY_Sinh_ka](https://docs.gtk.org/gdk4/const.KEY_Sinh_ka.html)
pub const KEY_Sinh_ka = 16780698;
/// const [KEY_Sinh_kha](https://docs.gtk.org/gdk4/const.KEY_Sinh_kha.html)
pub const KEY_Sinh_kha = 16780699;
/// const [KEY_Sinh_kunddaliya](https://docs.gtk.org/gdk4/const.KEY_Sinh_kunddaliya.html)
pub const KEY_Sinh_kunddaliya = 16780788;
/// const [KEY_Sinh_la](https://docs.gtk.org/gdk4/const.KEY_Sinh_la.html)
pub const KEY_Sinh_la = 16780733;
/// const [KEY_Sinh_lla](https://docs.gtk.org/gdk4/const.KEY_Sinh_lla.html)
pub const KEY_Sinh_lla = 16780741;
/// const [KEY_Sinh_lu](https://docs.gtk.org/gdk4/const.KEY_Sinh_lu.html)
pub const KEY_Sinh_lu = 16780687;
/// const [KEY_Sinh_lu2](https://docs.gtk.org/gdk4/const.KEY_Sinh_lu2.html)
pub const KEY_Sinh_lu2 = 16780767;
/// const [KEY_Sinh_luu](https://docs.gtk.org/gdk4/const.KEY_Sinh_luu.html)
pub const KEY_Sinh_luu = 16780688;
/// const [KEY_Sinh_luu2](https://docs.gtk.org/gdk4/const.KEY_Sinh_luu2.html)
pub const KEY_Sinh_luu2 = 16780787;
/// const [KEY_Sinh_ma](https://docs.gtk.org/gdk4/const.KEY_Sinh_ma.html)
pub const KEY_Sinh_ma = 16780728;
/// const [KEY_Sinh_mba](https://docs.gtk.org/gdk4/const.KEY_Sinh_mba.html)
pub const KEY_Sinh_mba = 16780729;
/// const [KEY_Sinh_na](https://docs.gtk.org/gdk4/const.KEY_Sinh_na.html)
pub const KEY_Sinh_na = 16780721;
/// const [KEY_Sinh_ndda](https://docs.gtk.org/gdk4/const.KEY_Sinh_ndda.html)
pub const KEY_Sinh_ndda = 16780716;
/// const [KEY_Sinh_ndha](https://docs.gtk.org/gdk4/const.KEY_Sinh_ndha.html)
pub const KEY_Sinh_ndha = 16780723;
/// const [KEY_Sinh_ng](https://docs.gtk.org/gdk4/const.KEY_Sinh_ng.html)
pub const KEY_Sinh_ng = 16780674;
/// const [KEY_Sinh_ng2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ng2.html)
pub const KEY_Sinh_ng2 = 16780702;
/// const [KEY_Sinh_nga](https://docs.gtk.org/gdk4/const.KEY_Sinh_nga.html)
pub const KEY_Sinh_nga = 16780703;
/// const [KEY_Sinh_nja](https://docs.gtk.org/gdk4/const.KEY_Sinh_nja.html)
pub const KEY_Sinh_nja = 16780710;
/// const [KEY_Sinh_nna](https://docs.gtk.org/gdk4/const.KEY_Sinh_nna.html)
pub const KEY_Sinh_nna = 16780715;
/// const [KEY_Sinh_nya](https://docs.gtk.org/gdk4/const.KEY_Sinh_nya.html)
pub const KEY_Sinh_nya = 16780708;
/// const [KEY_Sinh_o](https://docs.gtk.org/gdk4/const.KEY_Sinh_o.html)
pub const KEY_Sinh_o = 16780692;
/// const [KEY_Sinh_o2](https://docs.gtk.org/gdk4/const.KEY_Sinh_o2.html)
pub const KEY_Sinh_o2 = 16780764;
/// const [KEY_Sinh_oo](https://docs.gtk.org/gdk4/const.KEY_Sinh_oo.html)
pub const KEY_Sinh_oo = 16780693;
/// const [KEY_Sinh_oo2](https://docs.gtk.org/gdk4/const.KEY_Sinh_oo2.html)
pub const KEY_Sinh_oo2 = 16780765;
/// const [KEY_Sinh_pa](https://docs.gtk.org/gdk4/const.KEY_Sinh_pa.html)
pub const KEY_Sinh_pa = 16780724;
/// const [KEY_Sinh_pha](https://docs.gtk.org/gdk4/const.KEY_Sinh_pha.html)
pub const KEY_Sinh_pha = 16780725;
/// const [KEY_Sinh_ra](https://docs.gtk.org/gdk4/const.KEY_Sinh_ra.html)
pub const KEY_Sinh_ra = 16780731;
/// const [KEY_Sinh_ri](https://docs.gtk.org/gdk4/const.KEY_Sinh_ri.html)
pub const KEY_Sinh_ri = 16780685;
/// const [KEY_Sinh_rii](https://docs.gtk.org/gdk4/const.KEY_Sinh_rii.html)
pub const KEY_Sinh_rii = 16780686;
/// const [KEY_Sinh_ru2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ru2.html)
pub const KEY_Sinh_ru2 = 16780760;
/// const [KEY_Sinh_ruu2](https://docs.gtk.org/gdk4/const.KEY_Sinh_ruu2.html)
pub const KEY_Sinh_ruu2 = 16780786;
/// const [KEY_Sinh_sa](https://docs.gtk.org/gdk4/const.KEY_Sinh_sa.html)
pub const KEY_Sinh_sa = 16780739;
/// const [KEY_Sinh_sha](https://docs.gtk.org/gdk4/const.KEY_Sinh_sha.html)
pub const KEY_Sinh_sha = 16780737;
/// const [KEY_Sinh_ssha](https://docs.gtk.org/gdk4/const.KEY_Sinh_ssha.html)
pub const KEY_Sinh_ssha = 16780738;
/// const [KEY_Sinh_tha](https://docs.gtk.org/gdk4/const.KEY_Sinh_tha.html)
pub const KEY_Sinh_tha = 16780717;
/// const [KEY_Sinh_thha](https://docs.gtk.org/gdk4/const.KEY_Sinh_thha.html)
pub const KEY_Sinh_thha = 16780718;
/// const [KEY_Sinh_tta](https://docs.gtk.org/gdk4/const.KEY_Sinh_tta.html)
pub const KEY_Sinh_tta = 16780711;
/// const [KEY_Sinh_ttha](https://docs.gtk.org/gdk4/const.KEY_Sinh_ttha.html)
pub const KEY_Sinh_ttha = 16780712;
/// const [KEY_Sinh_u](https://docs.gtk.org/gdk4/const.KEY_Sinh_u.html)
pub const KEY_Sinh_u = 16780683;
/// const [KEY_Sinh_u2](https://docs.gtk.org/gdk4/const.KEY_Sinh_u2.html)
pub const KEY_Sinh_u2 = 16780756;
/// const [KEY_Sinh_uu](https://docs.gtk.org/gdk4/const.KEY_Sinh_uu.html)
pub const KEY_Sinh_uu = 16780684;
/// const [KEY_Sinh_uu2](https://docs.gtk.org/gdk4/const.KEY_Sinh_uu2.html)
pub const KEY_Sinh_uu2 = 16780758;
/// const [KEY_Sinh_va](https://docs.gtk.org/gdk4/const.KEY_Sinh_va.html)
pub const KEY_Sinh_va = 16780736;
/// const [KEY_Sinh_ya](https://docs.gtk.org/gdk4/const.KEY_Sinh_ya.html)
pub const KEY_Sinh_ya = 16780730;
/// const [KEY_Sleep](https://docs.gtk.org/gdk4/const.KEY_Sleep.html)
pub const KEY_Sleep = 269025071;
/// const [KEY_SlowKeys_Enable](https://docs.gtk.org/gdk4/const.KEY_SlowKeys_Enable.html)
pub const KEY_SlowKeys_Enable = 65139;
/// const [KEY_Spell](https://docs.gtk.org/gdk4/const.KEY_Spell.html)
pub const KEY_Spell = 269025148;
/// const [KEY_SplitScreen](https://docs.gtk.org/gdk4/const.KEY_SplitScreen.html)
pub const KEY_SplitScreen = 269025149;
/// const [KEY_Standby](https://docs.gtk.org/gdk4/const.KEY_Standby.html)
pub const KEY_Standby = 269025040;
/// const [KEY_Start](https://docs.gtk.org/gdk4/const.KEY_Start.html)
pub const KEY_Start = 269025050;
/// const [KEY_StickyKeys_Enable](https://docs.gtk.org/gdk4/const.KEY_StickyKeys_Enable.html)
pub const KEY_StickyKeys_Enable = 65141;
/// const [KEY_Stop](https://docs.gtk.org/gdk4/const.KEY_Stop.html)
pub const KEY_Stop = 269025064;
/// const [KEY_Subtitle](https://docs.gtk.org/gdk4/const.KEY_Subtitle.html)
pub const KEY_Subtitle = 269025178;
/// const [KEY_Super_L](https://docs.gtk.org/gdk4/const.KEY_Super_L.html)
pub const KEY_Super_L = 65515;
/// const [KEY_Super_R](https://docs.gtk.org/gdk4/const.KEY_Super_R.html)
pub const KEY_Super_R = 65516;
/// const [KEY_Support](https://docs.gtk.org/gdk4/const.KEY_Support.html)
pub const KEY_Support = 269025150;
/// const [KEY_Suspend](https://docs.gtk.org/gdk4/const.KEY_Suspend.html)
pub const KEY_Suspend = 269025191;
/// const [KEY_Switch_VT_1](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_1.html)
pub const KEY_Switch_VT_1 = 269024769;
/// const [KEY_Switch_VT_10](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_10.html)
pub const KEY_Switch_VT_10 = 269024778;
/// const [KEY_Switch_VT_11](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_11.html)
pub const KEY_Switch_VT_11 = 269024779;
/// const [KEY_Switch_VT_12](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_12.html)
pub const KEY_Switch_VT_12 = 269024780;
/// const [KEY_Switch_VT_2](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_2.html)
pub const KEY_Switch_VT_2 = 269024770;
/// const [KEY_Switch_VT_3](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_3.html)
pub const KEY_Switch_VT_3 = 269024771;
/// const [KEY_Switch_VT_4](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_4.html)
pub const KEY_Switch_VT_4 = 269024772;
/// const [KEY_Switch_VT_5](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_5.html)
pub const KEY_Switch_VT_5 = 269024773;
/// const [KEY_Switch_VT_6](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_6.html)
pub const KEY_Switch_VT_6 = 269024774;
/// const [KEY_Switch_VT_7](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_7.html)
pub const KEY_Switch_VT_7 = 269024775;
/// const [KEY_Switch_VT_8](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_8.html)
pub const KEY_Switch_VT_8 = 269024776;
/// const [KEY_Switch_VT_9](https://docs.gtk.org/gdk4/const.KEY_Switch_VT_9.html)
pub const KEY_Switch_VT_9 = 269024777;
/// const [KEY_Sys_Req](https://docs.gtk.org/gdk4/const.KEY_Sys_Req.html)
pub const KEY_Sys_Req = 65301;
/// const [KEY_T](https://docs.gtk.org/gdk4/const.KEY_T.html)
pub const KEY_T = 84;
/// const [KEY_THORN](https://docs.gtk.org/gdk4/const.KEY_THORN.html)
pub const KEY_THORN = 222;
/// const [KEY_Tab](https://docs.gtk.org/gdk4/const.KEY_Tab.html)
pub const KEY_Tab = 65289;
/// const [KEY_Tabovedot](https://docs.gtk.org/gdk4/const.KEY_Tabovedot.html)
pub const KEY_Tabovedot = 16785002;
/// const [KEY_TaskPane](https://docs.gtk.org/gdk4/const.KEY_TaskPane.html)
pub const KEY_TaskPane = 269025151;
/// const [KEY_Tcaron](https://docs.gtk.org/gdk4/const.KEY_Tcaron.html)
pub const KEY_Tcaron = 427;
/// const [KEY_Tcedilla](https://docs.gtk.org/gdk4/const.KEY_Tcedilla.html)
pub const KEY_Tcedilla = 478;
/// const [KEY_Terminal](https://docs.gtk.org/gdk4/const.KEY_Terminal.html)
pub const KEY_Terminal = 269025152;
/// const [KEY_Terminate_Server](https://docs.gtk.org/gdk4/const.KEY_Terminate_Server.html)
pub const KEY_Terminate_Server = 65237;
/// const [KEY_Thai_baht](https://docs.gtk.org/gdk4/const.KEY_Thai_baht.html)
pub const KEY_Thai_baht = 3551;
/// const [KEY_Thai_bobaimai](https://docs.gtk.org/gdk4/const.KEY_Thai_bobaimai.html)
pub const KEY_Thai_bobaimai = 3514;
/// const [KEY_Thai_chochan](https://docs.gtk.org/gdk4/const.KEY_Thai_chochan.html)
pub const KEY_Thai_chochan = 3496;
/// const [KEY_Thai_chochang](https://docs.gtk.org/gdk4/const.KEY_Thai_chochang.html)
pub const KEY_Thai_chochang = 3498;
/// const [KEY_Thai_choching](https://docs.gtk.org/gdk4/const.KEY_Thai_choching.html)
pub const KEY_Thai_choching = 3497;
/// const [KEY_Thai_chochoe](https://docs.gtk.org/gdk4/const.KEY_Thai_chochoe.html)
pub const KEY_Thai_chochoe = 3500;
/// const [KEY_Thai_dochada](https://docs.gtk.org/gdk4/const.KEY_Thai_dochada.html)
pub const KEY_Thai_dochada = 3502;
/// const [KEY_Thai_dodek](https://docs.gtk.org/gdk4/const.KEY_Thai_dodek.html)
pub const KEY_Thai_dodek = 3508;
/// const [KEY_Thai_fofa](https://docs.gtk.org/gdk4/const.KEY_Thai_fofa.html)
pub const KEY_Thai_fofa = 3517;
/// const [KEY_Thai_fofan](https://docs.gtk.org/gdk4/const.KEY_Thai_fofan.html)
pub const KEY_Thai_fofan = 3519;
/// const [KEY_Thai_hohip](https://docs.gtk.org/gdk4/const.KEY_Thai_hohip.html)
pub const KEY_Thai_hohip = 3531;
/// const [KEY_Thai_honokhuk](https://docs.gtk.org/gdk4/const.KEY_Thai_honokhuk.html)
pub const KEY_Thai_honokhuk = 3534;
/// const [KEY_Thai_khokhai](https://docs.gtk.org/gdk4/const.KEY_Thai_khokhai.html)
pub const KEY_Thai_khokhai = 3490;
/// const [KEY_Thai_khokhon](https://docs.gtk.org/gdk4/const.KEY_Thai_khokhon.html)
pub const KEY_Thai_khokhon = 3493;
/// const [KEY_Thai_khokhuat](https://docs.gtk.org/gdk4/const.KEY_Thai_khokhuat.html)
pub const KEY_Thai_khokhuat = 3491;
/// const [KEY_Thai_khokhwai](https://docs.gtk.org/gdk4/const.KEY_Thai_khokhwai.html)
pub const KEY_Thai_khokhwai = 3492;
/// const [KEY_Thai_khorakhang](https://docs.gtk.org/gdk4/const.KEY_Thai_khorakhang.html)
pub const KEY_Thai_khorakhang = 3494;
/// const [KEY_Thai_kokai](https://docs.gtk.org/gdk4/const.KEY_Thai_kokai.html)
pub const KEY_Thai_kokai = 3489;
/// const [KEY_Thai_lakkhangyao](https://docs.gtk.org/gdk4/const.KEY_Thai_lakkhangyao.html)
pub const KEY_Thai_lakkhangyao = 3557;
/// const [KEY_Thai_lekchet](https://docs.gtk.org/gdk4/const.KEY_Thai_lekchet.html)
pub const KEY_Thai_lekchet = 3575;
/// const [KEY_Thai_lekha](https://docs.gtk.org/gdk4/const.KEY_Thai_lekha.html)
pub const KEY_Thai_lekha = 3573;
/// const [KEY_Thai_lekhok](https://docs.gtk.org/gdk4/const.KEY_Thai_lekhok.html)
pub const KEY_Thai_lekhok = 3574;
/// const [KEY_Thai_lekkao](https://docs.gtk.org/gdk4/const.KEY_Thai_lekkao.html)
pub const KEY_Thai_lekkao = 3577;
/// const [KEY_Thai_leknung](https://docs.gtk.org/gdk4/const.KEY_Thai_leknung.html)
pub const KEY_Thai_leknung = 3569;
/// const [KEY_Thai_lekpaet](https://docs.gtk.org/gdk4/const.KEY_Thai_lekpaet.html)
pub const KEY_Thai_lekpaet = 3576;
/// const [KEY_Thai_leksam](https://docs.gtk.org/gdk4/const.KEY_Thai_leksam.html)
pub const KEY_Thai_leksam = 3571;
/// const [KEY_Thai_leksi](https://docs.gtk.org/gdk4/const.KEY_Thai_leksi.html)
pub const KEY_Thai_leksi = 3572;
/// const [KEY_Thai_leksong](https://docs.gtk.org/gdk4/const.KEY_Thai_leksong.html)
pub const KEY_Thai_leksong = 3570;
/// const [KEY_Thai_leksun](https://docs.gtk.org/gdk4/const.KEY_Thai_leksun.html)
pub const KEY_Thai_leksun = 3568;
/// const [KEY_Thai_lochula](https://docs.gtk.org/gdk4/const.KEY_Thai_lochula.html)
pub const KEY_Thai_lochula = 3532;
/// const [KEY_Thai_loling](https://docs.gtk.org/gdk4/const.KEY_Thai_loling.html)
pub const KEY_Thai_loling = 3525;
/// const [KEY_Thai_lu](https://docs.gtk.org/gdk4/const.KEY_Thai_lu.html)
pub const KEY_Thai_lu = 3526;
/// const [KEY_Thai_maichattawa](https://docs.gtk.org/gdk4/const.KEY_Thai_maichattawa.html)
pub const KEY_Thai_maichattawa = 3563;
/// const [KEY_Thai_maiek](https://docs.gtk.org/gdk4/const.KEY_Thai_maiek.html)
pub const KEY_Thai_maiek = 3560;
/// const [KEY_Thai_maihanakat](https://docs.gtk.org/gdk4/const.KEY_Thai_maihanakat.html)
pub const KEY_Thai_maihanakat = 3537;
/// const [KEY_Thai_maihanakat_maitho](https://docs.gtk.org/gdk4/const.KEY_Thai_maihanakat_maitho.html)
pub const KEY_Thai_maihanakat_maitho = 3550;
/// const [KEY_Thai_maitaikhu](https://docs.gtk.org/gdk4/const.KEY_Thai_maitaikhu.html)
pub const KEY_Thai_maitaikhu = 3559;
/// const [KEY_Thai_maitho](https://docs.gtk.org/gdk4/const.KEY_Thai_maitho.html)
pub const KEY_Thai_maitho = 3561;
/// const [KEY_Thai_maitri](https://docs.gtk.org/gdk4/const.KEY_Thai_maitri.html)
pub const KEY_Thai_maitri = 3562;
/// const [KEY_Thai_maiyamok](https://docs.gtk.org/gdk4/const.KEY_Thai_maiyamok.html)
pub const KEY_Thai_maiyamok = 3558;
/// const [KEY_Thai_moma](https://docs.gtk.org/gdk4/const.KEY_Thai_moma.html)
pub const KEY_Thai_moma = 3521;
/// const [KEY_Thai_ngongu](https://docs.gtk.org/gdk4/const.KEY_Thai_ngongu.html)
pub const KEY_Thai_ngongu = 3495;
/// const [KEY_Thai_nikhahit](https://docs.gtk.org/gdk4/const.KEY_Thai_nikhahit.html)
pub const KEY_Thai_nikhahit = 3565;
/// const [KEY_Thai_nonen](https://docs.gtk.org/gdk4/const.KEY_Thai_nonen.html)
pub const KEY_Thai_nonen = 3507;
/// const [KEY_Thai_nonu](https://docs.gtk.org/gdk4/const.KEY_Thai_nonu.html)
pub const KEY_Thai_nonu = 3513;
/// const [KEY_Thai_oang](https://docs.gtk.org/gdk4/const.KEY_Thai_oang.html)
pub const KEY_Thai_oang = 3533;
/// const [KEY_Thai_paiyannoi](https://docs.gtk.org/gdk4/const.KEY_Thai_paiyannoi.html)
pub const KEY_Thai_paiyannoi = 3535;
/// const [KEY_Thai_phinthu](https://docs.gtk.org/gdk4/const.KEY_Thai_phinthu.html)
pub const KEY_Thai_phinthu = 3546;
/// const [KEY_Thai_phophan](https://docs.gtk.org/gdk4/const.KEY_Thai_phophan.html)
pub const KEY_Thai_phophan = 3518;
/// const [KEY_Thai_phophung](https://docs.gtk.org/gdk4/const.KEY_Thai_phophung.html)
pub const KEY_Thai_phophung = 3516;
/// const [KEY_Thai_phosamphao](https://docs.gtk.org/gdk4/const.KEY_Thai_phosamphao.html)
pub const KEY_Thai_phosamphao = 3520;
/// const [KEY_Thai_popla](https://docs.gtk.org/gdk4/const.KEY_Thai_popla.html)
pub const KEY_Thai_popla = 3515;
/// const [KEY_Thai_rorua](https://docs.gtk.org/gdk4/const.KEY_Thai_rorua.html)
pub const KEY_Thai_rorua = 3523;
/// const [KEY_Thai_ru](https://docs.gtk.org/gdk4/const.KEY_Thai_ru.html)
pub const KEY_Thai_ru = 3524;
/// const [KEY_Thai_saraa](https://docs.gtk.org/gdk4/const.KEY_Thai_saraa.html)
pub const KEY_Thai_saraa = 3536;
/// const [KEY_Thai_saraaa](https://docs.gtk.org/gdk4/const.KEY_Thai_saraaa.html)
pub const KEY_Thai_saraaa = 3538;
/// const [KEY_Thai_saraae](https://docs.gtk.org/gdk4/const.KEY_Thai_saraae.html)
pub const KEY_Thai_saraae = 3553;
/// const [KEY_Thai_saraaimaimalai](https://docs.gtk.org/gdk4/const.KEY_Thai_saraaimaimalai.html)
pub const KEY_Thai_saraaimaimalai = 3556;
/// const [KEY_Thai_saraaimaimuan](https://docs.gtk.org/gdk4/const.KEY_Thai_saraaimaimuan.html)
pub const KEY_Thai_saraaimaimuan = 3555;
/// const [KEY_Thai_saraam](https://docs.gtk.org/gdk4/const.KEY_Thai_saraam.html)
pub const KEY_Thai_saraam = 3539;
/// const [KEY_Thai_sarae](https://docs.gtk.org/gdk4/const.KEY_Thai_sarae.html)
pub const KEY_Thai_sarae = 3552;
/// const [KEY_Thai_sarai](https://docs.gtk.org/gdk4/const.KEY_Thai_sarai.html)
pub const KEY_Thai_sarai = 3540;
/// const [KEY_Thai_saraii](https://docs.gtk.org/gdk4/const.KEY_Thai_saraii.html)
pub const KEY_Thai_saraii = 3541;
/// const [KEY_Thai_sarao](https://docs.gtk.org/gdk4/const.KEY_Thai_sarao.html)
pub const KEY_Thai_sarao = 3554;
/// const [KEY_Thai_sarau](https://docs.gtk.org/gdk4/const.KEY_Thai_sarau.html)
pub const KEY_Thai_sarau = 3544;
/// const [KEY_Thai_saraue](https://docs.gtk.org/gdk4/const.KEY_Thai_saraue.html)
pub const KEY_Thai_saraue = 3542;
/// const [KEY_Thai_sarauee](https://docs.gtk.org/gdk4/const.KEY_Thai_sarauee.html)
pub const KEY_Thai_sarauee = 3543;
/// const [KEY_Thai_sarauu](https://docs.gtk.org/gdk4/const.KEY_Thai_sarauu.html)
pub const KEY_Thai_sarauu = 3545;
/// const [KEY_Thai_sorusi](https://docs.gtk.org/gdk4/const.KEY_Thai_sorusi.html)
pub const KEY_Thai_sorusi = 3529;
/// const [KEY_Thai_sosala](https://docs.gtk.org/gdk4/const.KEY_Thai_sosala.html)
pub const KEY_Thai_sosala = 3528;
/// const [KEY_Thai_soso](https://docs.gtk.org/gdk4/const.KEY_Thai_soso.html)
pub const KEY_Thai_soso = 3499;
/// const [KEY_Thai_sosua](https://docs.gtk.org/gdk4/const.KEY_Thai_sosua.html)
pub const KEY_Thai_sosua = 3530;
/// const [KEY_Thai_thanthakhat](https://docs.gtk.org/gdk4/const.KEY_Thai_thanthakhat.html)
pub const KEY_Thai_thanthakhat = 3564;
/// const [KEY_Thai_thonangmontho](https://docs.gtk.org/gdk4/const.KEY_Thai_thonangmontho.html)
pub const KEY_Thai_thonangmontho = 3505;
/// const [KEY_Thai_thophuthao](https://docs.gtk.org/gdk4/const.KEY_Thai_thophuthao.html)
pub const KEY_Thai_thophuthao = 3506;
/// const [KEY_Thai_thothahan](https://docs.gtk.org/gdk4/const.KEY_Thai_thothahan.html)
pub const KEY_Thai_thothahan = 3511;
/// const [KEY_Thai_thothan](https://docs.gtk.org/gdk4/const.KEY_Thai_thothan.html)
pub const KEY_Thai_thothan = 3504;
/// const [KEY_Thai_thothong](https://docs.gtk.org/gdk4/const.KEY_Thai_thothong.html)
pub const KEY_Thai_thothong = 3512;
/// const [KEY_Thai_thothung](https://docs.gtk.org/gdk4/const.KEY_Thai_thothung.html)
pub const KEY_Thai_thothung = 3510;
/// const [KEY_Thai_topatak](https://docs.gtk.org/gdk4/const.KEY_Thai_topatak.html)
pub const KEY_Thai_topatak = 3503;
/// const [KEY_Thai_totao](https://docs.gtk.org/gdk4/const.KEY_Thai_totao.html)
pub const KEY_Thai_totao = 3509;
/// const [KEY_Thai_wowaen](https://docs.gtk.org/gdk4/const.KEY_Thai_wowaen.html)
pub const KEY_Thai_wowaen = 3527;
/// const [KEY_Thai_yoyak](https://docs.gtk.org/gdk4/const.KEY_Thai_yoyak.html)
pub const KEY_Thai_yoyak = 3522;
/// const [KEY_Thai_yoying](https://docs.gtk.org/gdk4/const.KEY_Thai_yoying.html)
pub const KEY_Thai_yoying = 3501;
/// const [KEY_Thorn](https://docs.gtk.org/gdk4/const.KEY_Thorn.html)
pub const KEY_Thorn = 222;
/// const [KEY_Time](https://docs.gtk.org/gdk4/const.KEY_Time.html)
pub const KEY_Time = 269025183;
/// const [KEY_ToDoList](https://docs.gtk.org/gdk4/const.KEY_ToDoList.html)
pub const KEY_ToDoList = 269025055;
/// const [KEY_Tools](https://docs.gtk.org/gdk4/const.KEY_Tools.html)
pub const KEY_Tools = 269025153;
/// const [KEY_TopMenu](https://docs.gtk.org/gdk4/const.KEY_TopMenu.html)
pub const KEY_TopMenu = 269025186;
/// const [KEY_TouchpadOff](https://docs.gtk.org/gdk4/const.KEY_TouchpadOff.html)
pub const KEY_TouchpadOff = 269025201;
/// const [KEY_TouchpadOn](https://docs.gtk.org/gdk4/const.KEY_TouchpadOn.html)
pub const KEY_TouchpadOn = 269025200;
/// const [KEY_TouchpadToggle](https://docs.gtk.org/gdk4/const.KEY_TouchpadToggle.html)
pub const KEY_TouchpadToggle = 269025193;
/// const [KEY_Touroku](https://docs.gtk.org/gdk4/const.KEY_Touroku.html)
pub const KEY_Touroku = 65323;
/// const [KEY_Travel](https://docs.gtk.org/gdk4/const.KEY_Travel.html)
pub const KEY_Travel = 269025154;
/// const [KEY_Tslash](https://docs.gtk.org/gdk4/const.KEY_Tslash.html)
pub const KEY_Tslash = 940;
/// const [KEY_U](https://docs.gtk.org/gdk4/const.KEY_U.html)
pub const KEY_U = 85;
/// const [KEY_UWB](https://docs.gtk.org/gdk4/const.KEY_UWB.html)
pub const KEY_UWB = 269025174;
/// const [KEY_Uacute](https://docs.gtk.org/gdk4/const.KEY_Uacute.html)
pub const KEY_Uacute = 218;
/// const [KEY_Ubelowdot](https://docs.gtk.org/gdk4/const.KEY_Ubelowdot.html)
pub const KEY_Ubelowdot = 16785124;
/// const [KEY_Ubreve](https://docs.gtk.org/gdk4/const.KEY_Ubreve.html)
pub const KEY_Ubreve = 733;
/// const [KEY_Ucircumflex](https://docs.gtk.org/gdk4/const.KEY_Ucircumflex.html)
pub const KEY_Ucircumflex = 219;
/// const [KEY_Udiaeresis](https://docs.gtk.org/gdk4/const.KEY_Udiaeresis.html)
pub const KEY_Udiaeresis = 220;
/// const [KEY_Udoubleacute](https://docs.gtk.org/gdk4/const.KEY_Udoubleacute.html)
pub const KEY_Udoubleacute = 475;
/// const [KEY_Ugrave](https://docs.gtk.org/gdk4/const.KEY_Ugrave.html)
pub const KEY_Ugrave = 217;
/// const [KEY_Uhook](https://docs.gtk.org/gdk4/const.KEY_Uhook.html)
pub const KEY_Uhook = 16785126;
/// const [KEY_Uhorn](https://docs.gtk.org/gdk4/const.KEY_Uhorn.html)
pub const KEY_Uhorn = 16777647;
/// const [KEY_Uhornacute](https://docs.gtk.org/gdk4/const.KEY_Uhornacute.html)
pub const KEY_Uhornacute = 16785128;
/// const [KEY_Uhornbelowdot](https://docs.gtk.org/gdk4/const.KEY_Uhornbelowdot.html)
pub const KEY_Uhornbelowdot = 16785136;
/// const [KEY_Uhorngrave](https://docs.gtk.org/gdk4/const.KEY_Uhorngrave.html)
pub const KEY_Uhorngrave = 16785130;
/// const [KEY_Uhornhook](https://docs.gtk.org/gdk4/const.KEY_Uhornhook.html)
pub const KEY_Uhornhook = 16785132;
/// const [KEY_Uhorntilde](https://docs.gtk.org/gdk4/const.KEY_Uhorntilde.html)
pub const KEY_Uhorntilde = 16785134;
/// const [KEY_Ukrainian_GHE_WITH_UPTURN](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_GHE_WITH_UPTURN.html)
pub const KEY_Ukrainian_GHE_WITH_UPTURN = 1725;
/// const [KEY_Ukrainian_I](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_I.html)
pub const KEY_Ukrainian_I = 1718;
/// const [KEY_Ukrainian_IE](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_IE.html)
pub const KEY_Ukrainian_IE = 1716;
/// const [KEY_Ukrainian_YI](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_YI.html)
pub const KEY_Ukrainian_YI = 1719;
/// const [KEY_Ukrainian_ghe_with_upturn](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_ghe_with_upturn.html)
pub const KEY_Ukrainian_ghe_with_upturn = 1709;
/// const [KEY_Ukrainian_i](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_i.html)
pub const KEY_Ukrainian_i = 1702;
/// const [KEY_Ukrainian_ie](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_ie.html)
pub const KEY_Ukrainian_ie = 1700;
/// const [KEY_Ukrainian_yi](https://docs.gtk.org/gdk4/const.KEY_Ukrainian_yi.html)
pub const KEY_Ukrainian_yi = 1703;
/// const [KEY_Ukranian_I](https://docs.gtk.org/gdk4/const.KEY_Ukranian_I.html)
pub const KEY_Ukranian_I = 1718;
/// const [KEY_Ukranian_JE](https://docs.gtk.org/gdk4/const.KEY_Ukranian_JE.html)
pub const KEY_Ukranian_JE = 1716;
/// const [KEY_Ukranian_YI](https://docs.gtk.org/gdk4/const.KEY_Ukranian_YI.html)
pub const KEY_Ukranian_YI = 1719;
/// const [KEY_Ukranian_i](https://docs.gtk.org/gdk4/const.KEY_Ukranian_i.html)
pub const KEY_Ukranian_i = 1702;
/// const [KEY_Ukranian_je](https://docs.gtk.org/gdk4/const.KEY_Ukranian_je.html)
pub const KEY_Ukranian_je = 1700;
/// const [KEY_Ukranian_yi](https://docs.gtk.org/gdk4/const.KEY_Ukranian_yi.html)
pub const KEY_Ukranian_yi = 1703;
/// const [KEY_Umacron](https://docs.gtk.org/gdk4/const.KEY_Umacron.html)
pub const KEY_Umacron = 990;
/// const [KEY_Undo](https://docs.gtk.org/gdk4/const.KEY_Undo.html)
pub const KEY_Undo = 65381;
/// const [KEY_Ungrab](https://docs.gtk.org/gdk4/const.KEY_Ungrab.html)
pub const KEY_Ungrab = 269024800;
/// const [KEY_Uogonek](https://docs.gtk.org/gdk4/const.KEY_Uogonek.html)
pub const KEY_Uogonek = 985;
/// const [KEY_Up](https://docs.gtk.org/gdk4/const.KEY_Up.html)
pub const KEY_Up = 65362;
/// const [KEY_Uring](https://docs.gtk.org/gdk4/const.KEY_Uring.html)
pub const KEY_Uring = 473;
/// const [KEY_User1KB](https://docs.gtk.org/gdk4/const.KEY_User1KB.html)
pub const KEY_User1KB = 269025157;
/// const [KEY_User2KB](https://docs.gtk.org/gdk4/const.KEY_User2KB.html)
pub const KEY_User2KB = 269025158;
/// const [KEY_UserPB](https://docs.gtk.org/gdk4/const.KEY_UserPB.html)
pub const KEY_UserPB = 269025156;
/// const [KEY_Utilde](https://docs.gtk.org/gdk4/const.KEY_Utilde.html)
pub const KEY_Utilde = 989;
/// const [KEY_V](https://docs.gtk.org/gdk4/const.KEY_V.html)
pub const KEY_V = 86;
/// const [KEY_VendorHome](https://docs.gtk.org/gdk4/const.KEY_VendorHome.html)
pub const KEY_VendorHome = 269025076;
/// const [KEY_Video](https://docs.gtk.org/gdk4/const.KEY_Video.html)
pub const KEY_Video = 269025159;
/// const [KEY_View](https://docs.gtk.org/gdk4/const.KEY_View.html)
pub const KEY_View = 269025185;
/// const [KEY_VoidSymbol](https://docs.gtk.org/gdk4/const.KEY_VoidSymbol.html)
pub const KEY_VoidSymbol = 16777215;
/// const [KEY_W](https://docs.gtk.org/gdk4/const.KEY_W.html)
pub const KEY_W = 87;
/// const [KEY_WLAN](https://docs.gtk.org/gdk4/const.KEY_WLAN.html)
pub const KEY_WLAN = 269025173;
/// const [KEY_WWAN](https://docs.gtk.org/gdk4/const.KEY_WWAN.html)
pub const KEY_WWAN = 269025204;
/// const [KEY_WWW](https://docs.gtk.org/gdk4/const.KEY_WWW.html)
pub const KEY_WWW = 269025070;
/// const [KEY_Wacute](https://docs.gtk.org/gdk4/const.KEY_Wacute.html)
pub const KEY_Wacute = 16785026;
/// const [KEY_WakeUp](https://docs.gtk.org/gdk4/const.KEY_WakeUp.html)
pub const KEY_WakeUp = 269025067;
/// const [KEY_Wcircumflex](https://docs.gtk.org/gdk4/const.KEY_Wcircumflex.html)
pub const KEY_Wcircumflex = 16777588;
/// const [KEY_Wdiaeresis](https://docs.gtk.org/gdk4/const.KEY_Wdiaeresis.html)
pub const KEY_Wdiaeresis = 16785028;
/// const [KEY_WebCam](https://docs.gtk.org/gdk4/const.KEY_WebCam.html)
pub const KEY_WebCam = 269025167;
/// const [KEY_Wgrave](https://docs.gtk.org/gdk4/const.KEY_Wgrave.html)
pub const KEY_Wgrave = 16785024;
/// const [KEY_WheelButton](https://docs.gtk.org/gdk4/const.KEY_WheelButton.html)
pub const KEY_WheelButton = 269025160;
/// const [KEY_WindowClear](https://docs.gtk.org/gdk4/const.KEY_WindowClear.html)
pub const KEY_WindowClear = 269025109;
/// const [KEY_WonSign](https://docs.gtk.org/gdk4/const.KEY_WonSign.html)
pub const KEY_WonSign = 16785577;
/// const [KEY_Word](https://docs.gtk.org/gdk4/const.KEY_Word.html)
pub const KEY_Word = 269025161;
/// const [KEY_X](https://docs.gtk.org/gdk4/const.KEY_X.html)
pub const KEY_X = 88;
/// const [KEY_Xabovedot](https://docs.gtk.org/gdk4/const.KEY_Xabovedot.html)
pub const KEY_Xabovedot = 16785034;
/// const [KEY_Xfer](https://docs.gtk.org/gdk4/const.KEY_Xfer.html)
pub const KEY_Xfer = 269025162;
/// const [KEY_Y](https://docs.gtk.org/gdk4/const.KEY_Y.html)
pub const KEY_Y = 89;
/// const [KEY_Yacute](https://docs.gtk.org/gdk4/const.KEY_Yacute.html)
pub const KEY_Yacute = 221;
/// const [KEY_Ybelowdot](https://docs.gtk.org/gdk4/const.KEY_Ybelowdot.html)
pub const KEY_Ybelowdot = 16785140;
/// const [KEY_Ycircumflex](https://docs.gtk.org/gdk4/const.KEY_Ycircumflex.html)
pub const KEY_Ycircumflex = 16777590;
/// const [KEY_Ydiaeresis](https://docs.gtk.org/gdk4/const.KEY_Ydiaeresis.html)
pub const KEY_Ydiaeresis = 5054;
/// const [KEY_Yellow](https://docs.gtk.org/gdk4/const.KEY_Yellow.html)
pub const KEY_Yellow = 269025189;
/// const [KEY_Ygrave](https://docs.gtk.org/gdk4/const.KEY_Ygrave.html)
pub const KEY_Ygrave = 16785138;
/// const [KEY_Yhook](https://docs.gtk.org/gdk4/const.KEY_Yhook.html)
pub const KEY_Yhook = 16785142;
/// const [KEY_Ytilde](https://docs.gtk.org/gdk4/const.KEY_Ytilde.html)
pub const KEY_Ytilde = 16785144;
/// const [KEY_Z](https://docs.gtk.org/gdk4/const.KEY_Z.html)
pub const KEY_Z = 90;
/// const [KEY_Zabovedot](https://docs.gtk.org/gdk4/const.KEY_Zabovedot.html)
pub const KEY_Zabovedot = 431;
/// const [KEY_Zacute](https://docs.gtk.org/gdk4/const.KEY_Zacute.html)
pub const KEY_Zacute = 428;
/// const [KEY_Zcaron](https://docs.gtk.org/gdk4/const.KEY_Zcaron.html)
pub const KEY_Zcaron = 430;
/// const [KEY_Zen_Koho](https://docs.gtk.org/gdk4/const.KEY_Zen_Koho.html)
pub const KEY_Zen_Koho = 65341;
/// const [KEY_Zenkaku](https://docs.gtk.org/gdk4/const.KEY_Zenkaku.html)
pub const KEY_Zenkaku = 65320;
/// const [KEY_Zenkaku_Hankaku](https://docs.gtk.org/gdk4/const.KEY_Zenkaku_Hankaku.html)
pub const KEY_Zenkaku_Hankaku = 65322;
/// const [KEY_ZoomIn](https://docs.gtk.org/gdk4/const.KEY_ZoomIn.html)
pub const KEY_ZoomIn = 269025163;
/// const [KEY_ZoomOut](https://docs.gtk.org/gdk4/const.KEY_ZoomOut.html)
pub const KEY_ZoomOut = 269025164;
/// const [KEY_Zstroke](https://docs.gtk.org/gdk4/const.KEY_Zstroke.html)
pub const KEY_Zstroke = 16777653;
/// const [KEY_a](https://docs.gtk.org/gdk4/const.KEY_a.html)
pub const KEY_a = 97;
/// const [KEY_aacute](https://docs.gtk.org/gdk4/const.KEY_aacute.html)
pub const KEY_aacute = 225;
/// const [KEY_abelowdot](https://docs.gtk.org/gdk4/const.KEY_abelowdot.html)
pub const KEY_abelowdot = 16785057;
/// const [KEY_abovedot](https://docs.gtk.org/gdk4/const.KEY_abovedot.html)
pub const KEY_abovedot = 511;
/// const [KEY_abreve](https://docs.gtk.org/gdk4/const.KEY_abreve.html)
pub const KEY_abreve = 483;
/// const [KEY_abreveacute](https://docs.gtk.org/gdk4/const.KEY_abreveacute.html)
pub const KEY_abreveacute = 16785071;
/// const [KEY_abrevebelowdot](https://docs.gtk.org/gdk4/const.KEY_abrevebelowdot.html)
pub const KEY_abrevebelowdot = 16785079;
/// const [KEY_abrevegrave](https://docs.gtk.org/gdk4/const.KEY_abrevegrave.html)
pub const KEY_abrevegrave = 16785073;
/// const [KEY_abrevehook](https://docs.gtk.org/gdk4/const.KEY_abrevehook.html)
pub const KEY_abrevehook = 16785075;
/// const [KEY_abrevetilde](https://docs.gtk.org/gdk4/const.KEY_abrevetilde.html)
pub const KEY_abrevetilde = 16785077;
/// const [KEY_acircumflex](https://docs.gtk.org/gdk4/const.KEY_acircumflex.html)
pub const KEY_acircumflex = 226;
/// const [KEY_acircumflexacute](https://docs.gtk.org/gdk4/const.KEY_acircumflexacute.html)
pub const KEY_acircumflexacute = 16785061;
/// const [KEY_acircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_acircumflexbelowdot.html)
pub const KEY_acircumflexbelowdot = 16785069;
/// const [KEY_acircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_acircumflexgrave.html)
pub const KEY_acircumflexgrave = 16785063;
/// const [KEY_acircumflexhook](https://docs.gtk.org/gdk4/const.KEY_acircumflexhook.html)
pub const KEY_acircumflexhook = 16785065;
/// const [KEY_acircumflextilde](https://docs.gtk.org/gdk4/const.KEY_acircumflextilde.html)
pub const KEY_acircumflextilde = 16785067;
/// const [KEY_acute](https://docs.gtk.org/gdk4/const.KEY_acute.html)
pub const KEY_acute = 180;
/// const [KEY_adiaeresis](https://docs.gtk.org/gdk4/const.KEY_adiaeresis.html)
pub const KEY_adiaeresis = 228;
/// const [KEY_ae](https://docs.gtk.org/gdk4/const.KEY_ae.html)
pub const KEY_ae = 230;
/// const [KEY_agrave](https://docs.gtk.org/gdk4/const.KEY_agrave.html)
pub const KEY_agrave = 224;
/// const [KEY_ahook](https://docs.gtk.org/gdk4/const.KEY_ahook.html)
pub const KEY_ahook = 16785059;
/// const [KEY_amacron](https://docs.gtk.org/gdk4/const.KEY_amacron.html)
pub const KEY_amacron = 992;
/// const [KEY_ampersand](https://docs.gtk.org/gdk4/const.KEY_ampersand.html)
pub const KEY_ampersand = 38;
/// const [KEY_aogonek](https://docs.gtk.org/gdk4/const.KEY_aogonek.html)
pub const KEY_aogonek = 433;
/// const [KEY_apostrophe](https://docs.gtk.org/gdk4/const.KEY_apostrophe.html)
pub const KEY_apostrophe = 39;
/// const [KEY_approxeq](https://docs.gtk.org/gdk4/const.KEY_approxeq.html)
pub const KEY_approxeq = 16785992;
/// const [KEY_approximate](https://docs.gtk.org/gdk4/const.KEY_approximate.html)
pub const KEY_approximate = 2248;
/// const [KEY_aring](https://docs.gtk.org/gdk4/const.KEY_aring.html)
pub const KEY_aring = 229;
/// const [KEY_asciicircum](https://docs.gtk.org/gdk4/const.KEY_asciicircum.html)
pub const KEY_asciicircum = 94;
/// const [KEY_asciitilde](https://docs.gtk.org/gdk4/const.KEY_asciitilde.html)
pub const KEY_asciitilde = 126;
/// const [KEY_asterisk](https://docs.gtk.org/gdk4/const.KEY_asterisk.html)
pub const KEY_asterisk = 42;
/// const [KEY_at](https://docs.gtk.org/gdk4/const.KEY_at.html)
pub const KEY_at = 64;
/// const [KEY_atilde](https://docs.gtk.org/gdk4/const.KEY_atilde.html)
pub const KEY_atilde = 227;
/// const [KEY_b](https://docs.gtk.org/gdk4/const.KEY_b.html)
pub const KEY_b = 98;
/// const [KEY_babovedot](https://docs.gtk.org/gdk4/const.KEY_babovedot.html)
pub const KEY_babovedot = 16784899;
/// const [KEY_backslash](https://docs.gtk.org/gdk4/const.KEY_backslash.html)
pub const KEY_backslash = 92;
/// const [KEY_ballotcross](https://docs.gtk.org/gdk4/const.KEY_ballotcross.html)
pub const KEY_ballotcross = 2804;
/// const [KEY_bar](https://docs.gtk.org/gdk4/const.KEY_bar.html)
pub const KEY_bar = 124;
/// const [KEY_because](https://docs.gtk.org/gdk4/const.KEY_because.html)
pub const KEY_because = 16785973;
/// const [KEY_blank](https://docs.gtk.org/gdk4/const.KEY_blank.html)
pub const KEY_blank = 2527;
/// const [KEY_botintegral](https://docs.gtk.org/gdk4/const.KEY_botintegral.html)
pub const KEY_botintegral = 2213;
/// const [KEY_botleftparens](https://docs.gtk.org/gdk4/const.KEY_botleftparens.html)
pub const KEY_botleftparens = 2220;
/// const [KEY_botleftsqbracket](https://docs.gtk.org/gdk4/const.KEY_botleftsqbracket.html)
pub const KEY_botleftsqbracket = 2216;
/// const [KEY_botleftsummation](https://docs.gtk.org/gdk4/const.KEY_botleftsummation.html)
pub const KEY_botleftsummation = 2226;
/// const [KEY_botrightparens](https://docs.gtk.org/gdk4/const.KEY_botrightparens.html)
pub const KEY_botrightparens = 2222;
/// const [KEY_botrightsqbracket](https://docs.gtk.org/gdk4/const.KEY_botrightsqbracket.html)
pub const KEY_botrightsqbracket = 2218;
/// const [KEY_botrightsummation](https://docs.gtk.org/gdk4/const.KEY_botrightsummation.html)
pub const KEY_botrightsummation = 2230;
/// const [KEY_bott](https://docs.gtk.org/gdk4/const.KEY_bott.html)
pub const KEY_bott = 2550;
/// const [KEY_botvertsummationconnector](https://docs.gtk.org/gdk4/const.KEY_botvertsummationconnector.html)
pub const KEY_botvertsummationconnector = 2228;
/// const [KEY_braceleft](https://docs.gtk.org/gdk4/const.KEY_braceleft.html)
pub const KEY_braceleft = 123;
/// const [KEY_braceright](https://docs.gtk.org/gdk4/const.KEY_braceright.html)
pub const KEY_braceright = 125;
/// const [KEY_bracketleft](https://docs.gtk.org/gdk4/const.KEY_bracketleft.html)
pub const KEY_bracketleft = 91;
/// const [KEY_bracketright](https://docs.gtk.org/gdk4/const.KEY_bracketright.html)
pub const KEY_bracketright = 93;
/// const [KEY_braille_blank](https://docs.gtk.org/gdk4/const.KEY_braille_blank.html)
pub const KEY_braille_blank = 16787456;
/// const [KEY_braille_dot_1](https://docs.gtk.org/gdk4/const.KEY_braille_dot_1.html)
pub const KEY_braille_dot_1 = 65521;
/// const [KEY_braille_dot_10](https://docs.gtk.org/gdk4/const.KEY_braille_dot_10.html)
pub const KEY_braille_dot_10 = 65530;
/// const [KEY_braille_dot_2](https://docs.gtk.org/gdk4/const.KEY_braille_dot_2.html)
pub const KEY_braille_dot_2 = 65522;
/// const [KEY_braille_dot_3](https://docs.gtk.org/gdk4/const.KEY_braille_dot_3.html)
pub const KEY_braille_dot_3 = 65523;
/// const [KEY_braille_dot_4](https://docs.gtk.org/gdk4/const.KEY_braille_dot_4.html)
pub const KEY_braille_dot_4 = 65524;
/// const [KEY_braille_dot_5](https://docs.gtk.org/gdk4/const.KEY_braille_dot_5.html)
pub const KEY_braille_dot_5 = 65525;
/// const [KEY_braille_dot_6](https://docs.gtk.org/gdk4/const.KEY_braille_dot_6.html)
pub const KEY_braille_dot_6 = 65526;
/// const [KEY_braille_dot_7](https://docs.gtk.org/gdk4/const.KEY_braille_dot_7.html)
pub const KEY_braille_dot_7 = 65527;
/// const [KEY_braille_dot_8](https://docs.gtk.org/gdk4/const.KEY_braille_dot_8.html)
pub const KEY_braille_dot_8 = 65528;
/// const [KEY_braille_dot_9](https://docs.gtk.org/gdk4/const.KEY_braille_dot_9.html)
pub const KEY_braille_dot_9 = 65529;
/// const [KEY_braille_dots_1](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1.html)
pub const KEY_braille_dots_1 = 16787457;
/// const [KEY_braille_dots_12](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12.html)
pub const KEY_braille_dots_12 = 16787459;
/// const [KEY_braille_dots_123](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123.html)
pub const KEY_braille_dots_123 = 16787463;
/// const [KEY_braille_dots_1234](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1234.html)
pub const KEY_braille_dots_1234 = 16787471;
/// const [KEY_braille_dots_12345](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12345.html)
pub const KEY_braille_dots_12345 = 16787487;
/// const [KEY_braille_dots_123456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123456.html)
pub const KEY_braille_dots_123456 = 16787519;
/// const [KEY_braille_dots_1234567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1234567.html)
pub const KEY_braille_dots_1234567 = 16787583;
/// const [KEY_braille_dots_12345678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12345678.html)
pub const KEY_braille_dots_12345678 = 16787711;
/// const [KEY_braille_dots_1234568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1234568.html)
pub const KEY_braille_dots_1234568 = 16787647;
/// const [KEY_braille_dots_123457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123457.html)
pub const KEY_braille_dots_123457 = 16787551;
/// const [KEY_braille_dots_1234578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1234578.html)
pub const KEY_braille_dots_1234578 = 16787679;
/// const [KEY_braille_dots_123458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123458.html)
pub const KEY_braille_dots_123458 = 16787615;
/// const [KEY_braille_dots_12346](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12346.html)
pub const KEY_braille_dots_12346 = 16787503;
/// const [KEY_braille_dots_123467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123467.html)
pub const KEY_braille_dots_123467 = 16787567;
/// const [KEY_braille_dots_1234678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1234678.html)
pub const KEY_braille_dots_1234678 = 16787695;
/// const [KEY_braille_dots_123468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123468.html)
pub const KEY_braille_dots_123468 = 16787631;
/// const [KEY_braille_dots_12347](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12347.html)
pub const KEY_braille_dots_12347 = 16787535;
/// const [KEY_braille_dots_123478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123478.html)
pub const KEY_braille_dots_123478 = 16787663;
/// const [KEY_braille_dots_12348](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12348.html)
pub const KEY_braille_dots_12348 = 16787599;
/// const [KEY_braille_dots_1235](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1235.html)
pub const KEY_braille_dots_1235 = 16787479;
/// const [KEY_braille_dots_12356](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12356.html)
pub const KEY_braille_dots_12356 = 16787511;
/// const [KEY_braille_dots_123567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123567.html)
pub const KEY_braille_dots_123567 = 16787575;
/// const [KEY_braille_dots_1235678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1235678.html)
pub const KEY_braille_dots_1235678 = 16787703;
/// const [KEY_braille_dots_123568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123568.html)
pub const KEY_braille_dots_123568 = 16787639;
/// const [KEY_braille_dots_12357](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12357.html)
pub const KEY_braille_dots_12357 = 16787543;
/// const [KEY_braille_dots_123578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123578.html)
pub const KEY_braille_dots_123578 = 16787671;
/// const [KEY_braille_dots_12358](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12358.html)
pub const KEY_braille_dots_12358 = 16787607;
/// const [KEY_braille_dots_1236](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1236.html)
pub const KEY_braille_dots_1236 = 16787495;
/// const [KEY_braille_dots_12367](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12367.html)
pub const KEY_braille_dots_12367 = 16787559;
/// const [KEY_braille_dots_123678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_123678.html)
pub const KEY_braille_dots_123678 = 16787687;
/// const [KEY_braille_dots_12368](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12368.html)
pub const KEY_braille_dots_12368 = 16787623;
/// const [KEY_braille_dots_1237](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1237.html)
pub const KEY_braille_dots_1237 = 16787527;
/// const [KEY_braille_dots_12378](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12378.html)
pub const KEY_braille_dots_12378 = 16787655;
/// const [KEY_braille_dots_1238](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1238.html)
pub const KEY_braille_dots_1238 = 16787591;
/// const [KEY_braille_dots_124](https://docs.gtk.org/gdk4/const.KEY_braille_dots_124.html)
pub const KEY_braille_dots_124 = 16787467;
/// const [KEY_braille_dots_1245](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1245.html)
pub const KEY_braille_dots_1245 = 16787483;
/// const [KEY_braille_dots_12456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12456.html)
pub const KEY_braille_dots_12456 = 16787515;
/// const [KEY_braille_dots_124567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_124567.html)
pub const KEY_braille_dots_124567 = 16787579;
/// const [KEY_braille_dots_1245678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1245678.html)
pub const KEY_braille_dots_1245678 = 16787707;
/// const [KEY_braille_dots_124568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_124568.html)
pub const KEY_braille_dots_124568 = 16787643;
/// const [KEY_braille_dots_12457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12457.html)
pub const KEY_braille_dots_12457 = 16787547;
/// const [KEY_braille_dots_124578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_124578.html)
pub const KEY_braille_dots_124578 = 16787675;
/// const [KEY_braille_dots_12458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12458.html)
pub const KEY_braille_dots_12458 = 16787611;
/// const [KEY_braille_dots_1246](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1246.html)
pub const KEY_braille_dots_1246 = 16787499;
/// const [KEY_braille_dots_12467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12467.html)
pub const KEY_braille_dots_12467 = 16787563;
/// const [KEY_braille_dots_124678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_124678.html)
pub const KEY_braille_dots_124678 = 16787691;
/// const [KEY_braille_dots_12468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12468.html)
pub const KEY_braille_dots_12468 = 16787627;
/// const [KEY_braille_dots_1247](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1247.html)
pub const KEY_braille_dots_1247 = 16787531;
/// const [KEY_braille_dots_12478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12478.html)
pub const KEY_braille_dots_12478 = 16787659;
/// const [KEY_braille_dots_1248](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1248.html)
pub const KEY_braille_dots_1248 = 16787595;
/// const [KEY_braille_dots_125](https://docs.gtk.org/gdk4/const.KEY_braille_dots_125.html)
pub const KEY_braille_dots_125 = 16787475;
/// const [KEY_braille_dots_1256](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1256.html)
pub const KEY_braille_dots_1256 = 16787507;
/// const [KEY_braille_dots_12567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12567.html)
pub const KEY_braille_dots_12567 = 16787571;
/// const [KEY_braille_dots_125678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_125678.html)
pub const KEY_braille_dots_125678 = 16787699;
/// const [KEY_braille_dots_12568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12568.html)
pub const KEY_braille_dots_12568 = 16787635;
/// const [KEY_braille_dots_1257](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1257.html)
pub const KEY_braille_dots_1257 = 16787539;
/// const [KEY_braille_dots_12578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12578.html)
pub const KEY_braille_dots_12578 = 16787667;
/// const [KEY_braille_dots_1258](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1258.html)
pub const KEY_braille_dots_1258 = 16787603;
/// const [KEY_braille_dots_126](https://docs.gtk.org/gdk4/const.KEY_braille_dots_126.html)
pub const KEY_braille_dots_126 = 16787491;
/// const [KEY_braille_dots_1267](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1267.html)
pub const KEY_braille_dots_1267 = 16787555;
/// const [KEY_braille_dots_12678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_12678.html)
pub const KEY_braille_dots_12678 = 16787683;
/// const [KEY_braille_dots_1268](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1268.html)
pub const KEY_braille_dots_1268 = 16787619;
/// const [KEY_braille_dots_127](https://docs.gtk.org/gdk4/const.KEY_braille_dots_127.html)
pub const KEY_braille_dots_127 = 16787523;
/// const [KEY_braille_dots_1278](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1278.html)
pub const KEY_braille_dots_1278 = 16787651;
/// const [KEY_braille_dots_128](https://docs.gtk.org/gdk4/const.KEY_braille_dots_128.html)
pub const KEY_braille_dots_128 = 16787587;
/// const [KEY_braille_dots_13](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13.html)
pub const KEY_braille_dots_13 = 16787461;
/// const [KEY_braille_dots_134](https://docs.gtk.org/gdk4/const.KEY_braille_dots_134.html)
pub const KEY_braille_dots_134 = 16787469;
/// const [KEY_braille_dots_1345](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1345.html)
pub const KEY_braille_dots_1345 = 16787485;
/// const [KEY_braille_dots_13456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13456.html)
pub const KEY_braille_dots_13456 = 16787517;
/// const [KEY_braille_dots_134567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_134567.html)
pub const KEY_braille_dots_134567 = 16787581;
/// const [KEY_braille_dots_1345678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1345678.html)
pub const KEY_braille_dots_1345678 = 16787709;
/// const [KEY_braille_dots_134568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_134568.html)
pub const KEY_braille_dots_134568 = 16787645;
/// const [KEY_braille_dots_13457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13457.html)
pub const KEY_braille_dots_13457 = 16787549;
/// const [KEY_braille_dots_134578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_134578.html)
pub const KEY_braille_dots_134578 = 16787677;
/// const [KEY_braille_dots_13458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13458.html)
pub const KEY_braille_dots_13458 = 16787613;
/// const [KEY_braille_dots_1346](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1346.html)
pub const KEY_braille_dots_1346 = 16787501;
/// const [KEY_braille_dots_13467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13467.html)
pub const KEY_braille_dots_13467 = 16787565;
/// const [KEY_braille_dots_134678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_134678.html)
pub const KEY_braille_dots_134678 = 16787693;
/// const [KEY_braille_dots_13468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13468.html)
pub const KEY_braille_dots_13468 = 16787629;
/// const [KEY_braille_dots_1347](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1347.html)
pub const KEY_braille_dots_1347 = 16787533;
/// const [KEY_braille_dots_13478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13478.html)
pub const KEY_braille_dots_13478 = 16787661;
/// const [KEY_braille_dots_1348](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1348.html)
pub const KEY_braille_dots_1348 = 16787597;
/// const [KEY_braille_dots_135](https://docs.gtk.org/gdk4/const.KEY_braille_dots_135.html)
pub const KEY_braille_dots_135 = 16787477;
/// const [KEY_braille_dots_1356](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1356.html)
pub const KEY_braille_dots_1356 = 16787509;
/// const [KEY_braille_dots_13567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13567.html)
pub const KEY_braille_dots_13567 = 16787573;
/// const [KEY_braille_dots_135678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_135678.html)
pub const KEY_braille_dots_135678 = 16787701;
/// const [KEY_braille_dots_13568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13568.html)
pub const KEY_braille_dots_13568 = 16787637;
/// const [KEY_braille_dots_1357](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1357.html)
pub const KEY_braille_dots_1357 = 16787541;
/// const [KEY_braille_dots_13578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13578.html)
pub const KEY_braille_dots_13578 = 16787669;
/// const [KEY_braille_dots_1358](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1358.html)
pub const KEY_braille_dots_1358 = 16787605;
/// const [KEY_braille_dots_136](https://docs.gtk.org/gdk4/const.KEY_braille_dots_136.html)
pub const KEY_braille_dots_136 = 16787493;
/// const [KEY_braille_dots_1367](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1367.html)
pub const KEY_braille_dots_1367 = 16787557;
/// const [KEY_braille_dots_13678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_13678.html)
pub const KEY_braille_dots_13678 = 16787685;
/// const [KEY_braille_dots_1368](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1368.html)
pub const KEY_braille_dots_1368 = 16787621;
/// const [KEY_braille_dots_137](https://docs.gtk.org/gdk4/const.KEY_braille_dots_137.html)
pub const KEY_braille_dots_137 = 16787525;
/// const [KEY_braille_dots_1378](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1378.html)
pub const KEY_braille_dots_1378 = 16787653;
/// const [KEY_braille_dots_138](https://docs.gtk.org/gdk4/const.KEY_braille_dots_138.html)
pub const KEY_braille_dots_138 = 16787589;
/// const [KEY_braille_dots_14](https://docs.gtk.org/gdk4/const.KEY_braille_dots_14.html)
pub const KEY_braille_dots_14 = 16787465;
/// const [KEY_braille_dots_145](https://docs.gtk.org/gdk4/const.KEY_braille_dots_145.html)
pub const KEY_braille_dots_145 = 16787481;
/// const [KEY_braille_dots_1456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1456.html)
pub const KEY_braille_dots_1456 = 16787513;
/// const [KEY_braille_dots_14567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_14567.html)
pub const KEY_braille_dots_14567 = 16787577;
/// const [KEY_braille_dots_145678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_145678.html)
pub const KEY_braille_dots_145678 = 16787705;
/// const [KEY_braille_dots_14568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_14568.html)
pub const KEY_braille_dots_14568 = 16787641;
/// const [KEY_braille_dots_1457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1457.html)
pub const KEY_braille_dots_1457 = 16787545;
/// const [KEY_braille_dots_14578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_14578.html)
pub const KEY_braille_dots_14578 = 16787673;
/// const [KEY_braille_dots_1458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1458.html)
pub const KEY_braille_dots_1458 = 16787609;
/// const [KEY_braille_dots_146](https://docs.gtk.org/gdk4/const.KEY_braille_dots_146.html)
pub const KEY_braille_dots_146 = 16787497;
/// const [KEY_braille_dots_1467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1467.html)
pub const KEY_braille_dots_1467 = 16787561;
/// const [KEY_braille_dots_14678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_14678.html)
pub const KEY_braille_dots_14678 = 16787689;
/// const [KEY_braille_dots_1468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1468.html)
pub const KEY_braille_dots_1468 = 16787625;
/// const [KEY_braille_dots_147](https://docs.gtk.org/gdk4/const.KEY_braille_dots_147.html)
pub const KEY_braille_dots_147 = 16787529;
/// const [KEY_braille_dots_1478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1478.html)
pub const KEY_braille_dots_1478 = 16787657;
/// const [KEY_braille_dots_148](https://docs.gtk.org/gdk4/const.KEY_braille_dots_148.html)
pub const KEY_braille_dots_148 = 16787593;
/// const [KEY_braille_dots_15](https://docs.gtk.org/gdk4/const.KEY_braille_dots_15.html)
pub const KEY_braille_dots_15 = 16787473;
/// const [KEY_braille_dots_156](https://docs.gtk.org/gdk4/const.KEY_braille_dots_156.html)
pub const KEY_braille_dots_156 = 16787505;
/// const [KEY_braille_dots_1567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1567.html)
pub const KEY_braille_dots_1567 = 16787569;
/// const [KEY_braille_dots_15678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_15678.html)
pub const KEY_braille_dots_15678 = 16787697;
/// const [KEY_braille_dots_1568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1568.html)
pub const KEY_braille_dots_1568 = 16787633;
/// const [KEY_braille_dots_157](https://docs.gtk.org/gdk4/const.KEY_braille_dots_157.html)
pub const KEY_braille_dots_157 = 16787537;
/// const [KEY_braille_dots_1578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1578.html)
pub const KEY_braille_dots_1578 = 16787665;
/// const [KEY_braille_dots_158](https://docs.gtk.org/gdk4/const.KEY_braille_dots_158.html)
pub const KEY_braille_dots_158 = 16787601;
/// const [KEY_braille_dots_16](https://docs.gtk.org/gdk4/const.KEY_braille_dots_16.html)
pub const KEY_braille_dots_16 = 16787489;
/// const [KEY_braille_dots_167](https://docs.gtk.org/gdk4/const.KEY_braille_dots_167.html)
pub const KEY_braille_dots_167 = 16787553;
/// const [KEY_braille_dots_1678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_1678.html)
pub const KEY_braille_dots_1678 = 16787681;
/// const [KEY_braille_dots_168](https://docs.gtk.org/gdk4/const.KEY_braille_dots_168.html)
pub const KEY_braille_dots_168 = 16787617;
/// const [KEY_braille_dots_17](https://docs.gtk.org/gdk4/const.KEY_braille_dots_17.html)
pub const KEY_braille_dots_17 = 16787521;
/// const [KEY_braille_dots_178](https://docs.gtk.org/gdk4/const.KEY_braille_dots_178.html)
pub const KEY_braille_dots_178 = 16787649;
/// const [KEY_braille_dots_18](https://docs.gtk.org/gdk4/const.KEY_braille_dots_18.html)
pub const KEY_braille_dots_18 = 16787585;
/// const [KEY_braille_dots_2](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2.html)
pub const KEY_braille_dots_2 = 16787458;
/// const [KEY_braille_dots_23](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23.html)
pub const KEY_braille_dots_23 = 16787462;
/// const [KEY_braille_dots_234](https://docs.gtk.org/gdk4/const.KEY_braille_dots_234.html)
pub const KEY_braille_dots_234 = 16787470;
/// const [KEY_braille_dots_2345](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2345.html)
pub const KEY_braille_dots_2345 = 16787486;
/// const [KEY_braille_dots_23456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23456.html)
pub const KEY_braille_dots_23456 = 16787518;
/// const [KEY_braille_dots_234567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_234567.html)
pub const KEY_braille_dots_234567 = 16787582;
/// const [KEY_braille_dots_2345678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2345678.html)
pub const KEY_braille_dots_2345678 = 16787710;
/// const [KEY_braille_dots_234568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_234568.html)
pub const KEY_braille_dots_234568 = 16787646;
/// const [KEY_braille_dots_23457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23457.html)
pub const KEY_braille_dots_23457 = 16787550;
/// const [KEY_braille_dots_234578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_234578.html)
pub const KEY_braille_dots_234578 = 16787678;
/// const [KEY_braille_dots_23458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23458.html)
pub const KEY_braille_dots_23458 = 16787614;
/// const [KEY_braille_dots_2346](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2346.html)
pub const KEY_braille_dots_2346 = 16787502;
/// const [KEY_braille_dots_23467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23467.html)
pub const KEY_braille_dots_23467 = 16787566;
/// const [KEY_braille_dots_234678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_234678.html)
pub const KEY_braille_dots_234678 = 16787694;
/// const [KEY_braille_dots_23468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23468.html)
pub const KEY_braille_dots_23468 = 16787630;
/// const [KEY_braille_dots_2347](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2347.html)
pub const KEY_braille_dots_2347 = 16787534;
/// const [KEY_braille_dots_23478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23478.html)
pub const KEY_braille_dots_23478 = 16787662;
/// const [KEY_braille_dots_2348](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2348.html)
pub const KEY_braille_dots_2348 = 16787598;
/// const [KEY_braille_dots_235](https://docs.gtk.org/gdk4/const.KEY_braille_dots_235.html)
pub const KEY_braille_dots_235 = 16787478;
/// const [KEY_braille_dots_2356](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2356.html)
pub const KEY_braille_dots_2356 = 16787510;
/// const [KEY_braille_dots_23567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23567.html)
pub const KEY_braille_dots_23567 = 16787574;
/// const [KEY_braille_dots_235678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_235678.html)
pub const KEY_braille_dots_235678 = 16787702;
/// const [KEY_braille_dots_23568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23568.html)
pub const KEY_braille_dots_23568 = 16787638;
/// const [KEY_braille_dots_2357](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2357.html)
pub const KEY_braille_dots_2357 = 16787542;
/// const [KEY_braille_dots_23578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23578.html)
pub const KEY_braille_dots_23578 = 16787670;
/// const [KEY_braille_dots_2358](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2358.html)
pub const KEY_braille_dots_2358 = 16787606;
/// const [KEY_braille_dots_236](https://docs.gtk.org/gdk4/const.KEY_braille_dots_236.html)
pub const KEY_braille_dots_236 = 16787494;
/// const [KEY_braille_dots_2367](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2367.html)
pub const KEY_braille_dots_2367 = 16787558;
/// const [KEY_braille_dots_23678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_23678.html)
pub const KEY_braille_dots_23678 = 16787686;
/// const [KEY_braille_dots_2368](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2368.html)
pub const KEY_braille_dots_2368 = 16787622;
/// const [KEY_braille_dots_237](https://docs.gtk.org/gdk4/const.KEY_braille_dots_237.html)
pub const KEY_braille_dots_237 = 16787526;
/// const [KEY_braille_dots_2378](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2378.html)
pub const KEY_braille_dots_2378 = 16787654;
/// const [KEY_braille_dots_238](https://docs.gtk.org/gdk4/const.KEY_braille_dots_238.html)
pub const KEY_braille_dots_238 = 16787590;
/// const [KEY_braille_dots_24](https://docs.gtk.org/gdk4/const.KEY_braille_dots_24.html)
pub const KEY_braille_dots_24 = 16787466;
/// const [KEY_braille_dots_245](https://docs.gtk.org/gdk4/const.KEY_braille_dots_245.html)
pub const KEY_braille_dots_245 = 16787482;
/// const [KEY_braille_dots_2456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2456.html)
pub const KEY_braille_dots_2456 = 16787514;
/// const [KEY_braille_dots_24567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_24567.html)
pub const KEY_braille_dots_24567 = 16787578;
/// const [KEY_braille_dots_245678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_245678.html)
pub const KEY_braille_dots_245678 = 16787706;
/// const [KEY_braille_dots_24568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_24568.html)
pub const KEY_braille_dots_24568 = 16787642;
/// const [KEY_braille_dots_2457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2457.html)
pub const KEY_braille_dots_2457 = 16787546;
/// const [KEY_braille_dots_24578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_24578.html)
pub const KEY_braille_dots_24578 = 16787674;
/// const [KEY_braille_dots_2458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2458.html)
pub const KEY_braille_dots_2458 = 16787610;
/// const [KEY_braille_dots_246](https://docs.gtk.org/gdk4/const.KEY_braille_dots_246.html)
pub const KEY_braille_dots_246 = 16787498;
/// const [KEY_braille_dots_2467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2467.html)
pub const KEY_braille_dots_2467 = 16787562;
/// const [KEY_braille_dots_24678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_24678.html)
pub const KEY_braille_dots_24678 = 16787690;
/// const [KEY_braille_dots_2468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2468.html)
pub const KEY_braille_dots_2468 = 16787626;
/// const [KEY_braille_dots_247](https://docs.gtk.org/gdk4/const.KEY_braille_dots_247.html)
pub const KEY_braille_dots_247 = 16787530;
/// const [KEY_braille_dots_2478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2478.html)
pub const KEY_braille_dots_2478 = 16787658;
/// const [KEY_braille_dots_248](https://docs.gtk.org/gdk4/const.KEY_braille_dots_248.html)
pub const KEY_braille_dots_248 = 16787594;
/// const [KEY_braille_dots_25](https://docs.gtk.org/gdk4/const.KEY_braille_dots_25.html)
pub const KEY_braille_dots_25 = 16787474;
/// const [KEY_braille_dots_256](https://docs.gtk.org/gdk4/const.KEY_braille_dots_256.html)
pub const KEY_braille_dots_256 = 16787506;
/// const [KEY_braille_dots_2567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2567.html)
pub const KEY_braille_dots_2567 = 16787570;
/// const [KEY_braille_dots_25678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_25678.html)
pub const KEY_braille_dots_25678 = 16787698;
/// const [KEY_braille_dots_2568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2568.html)
pub const KEY_braille_dots_2568 = 16787634;
/// const [KEY_braille_dots_257](https://docs.gtk.org/gdk4/const.KEY_braille_dots_257.html)
pub const KEY_braille_dots_257 = 16787538;
/// const [KEY_braille_dots_2578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2578.html)
pub const KEY_braille_dots_2578 = 16787666;
/// const [KEY_braille_dots_258](https://docs.gtk.org/gdk4/const.KEY_braille_dots_258.html)
pub const KEY_braille_dots_258 = 16787602;
/// const [KEY_braille_dots_26](https://docs.gtk.org/gdk4/const.KEY_braille_dots_26.html)
pub const KEY_braille_dots_26 = 16787490;
/// const [KEY_braille_dots_267](https://docs.gtk.org/gdk4/const.KEY_braille_dots_267.html)
pub const KEY_braille_dots_267 = 16787554;
/// const [KEY_braille_dots_2678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_2678.html)
pub const KEY_braille_dots_2678 = 16787682;
/// const [KEY_braille_dots_268](https://docs.gtk.org/gdk4/const.KEY_braille_dots_268.html)
pub const KEY_braille_dots_268 = 16787618;
/// const [KEY_braille_dots_27](https://docs.gtk.org/gdk4/const.KEY_braille_dots_27.html)
pub const KEY_braille_dots_27 = 16787522;
/// const [KEY_braille_dots_278](https://docs.gtk.org/gdk4/const.KEY_braille_dots_278.html)
pub const KEY_braille_dots_278 = 16787650;
/// const [KEY_braille_dots_28](https://docs.gtk.org/gdk4/const.KEY_braille_dots_28.html)
pub const KEY_braille_dots_28 = 16787586;
/// const [KEY_braille_dots_3](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3.html)
pub const KEY_braille_dots_3 = 16787460;
/// const [KEY_braille_dots_34](https://docs.gtk.org/gdk4/const.KEY_braille_dots_34.html)
pub const KEY_braille_dots_34 = 16787468;
/// const [KEY_braille_dots_345](https://docs.gtk.org/gdk4/const.KEY_braille_dots_345.html)
pub const KEY_braille_dots_345 = 16787484;
/// const [KEY_braille_dots_3456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3456.html)
pub const KEY_braille_dots_3456 = 16787516;
/// const [KEY_braille_dots_34567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_34567.html)
pub const KEY_braille_dots_34567 = 16787580;
/// const [KEY_braille_dots_345678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_345678.html)
pub const KEY_braille_dots_345678 = 16787708;
/// const [KEY_braille_dots_34568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_34568.html)
pub const KEY_braille_dots_34568 = 16787644;
/// const [KEY_braille_dots_3457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3457.html)
pub const KEY_braille_dots_3457 = 16787548;
/// const [KEY_braille_dots_34578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_34578.html)
pub const KEY_braille_dots_34578 = 16787676;
/// const [KEY_braille_dots_3458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3458.html)
pub const KEY_braille_dots_3458 = 16787612;
/// const [KEY_braille_dots_346](https://docs.gtk.org/gdk4/const.KEY_braille_dots_346.html)
pub const KEY_braille_dots_346 = 16787500;
/// const [KEY_braille_dots_3467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3467.html)
pub const KEY_braille_dots_3467 = 16787564;
/// const [KEY_braille_dots_34678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_34678.html)
pub const KEY_braille_dots_34678 = 16787692;
/// const [KEY_braille_dots_3468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3468.html)
pub const KEY_braille_dots_3468 = 16787628;
/// const [KEY_braille_dots_347](https://docs.gtk.org/gdk4/const.KEY_braille_dots_347.html)
pub const KEY_braille_dots_347 = 16787532;
/// const [KEY_braille_dots_3478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3478.html)
pub const KEY_braille_dots_3478 = 16787660;
/// const [KEY_braille_dots_348](https://docs.gtk.org/gdk4/const.KEY_braille_dots_348.html)
pub const KEY_braille_dots_348 = 16787596;
/// const [KEY_braille_dots_35](https://docs.gtk.org/gdk4/const.KEY_braille_dots_35.html)
pub const KEY_braille_dots_35 = 16787476;
/// const [KEY_braille_dots_356](https://docs.gtk.org/gdk4/const.KEY_braille_dots_356.html)
pub const KEY_braille_dots_356 = 16787508;
/// const [KEY_braille_dots_3567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3567.html)
pub const KEY_braille_dots_3567 = 16787572;
/// const [KEY_braille_dots_35678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_35678.html)
pub const KEY_braille_dots_35678 = 16787700;
/// const [KEY_braille_dots_3568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3568.html)
pub const KEY_braille_dots_3568 = 16787636;
/// const [KEY_braille_dots_357](https://docs.gtk.org/gdk4/const.KEY_braille_dots_357.html)
pub const KEY_braille_dots_357 = 16787540;
/// const [KEY_braille_dots_3578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3578.html)
pub const KEY_braille_dots_3578 = 16787668;
/// const [KEY_braille_dots_358](https://docs.gtk.org/gdk4/const.KEY_braille_dots_358.html)
pub const KEY_braille_dots_358 = 16787604;
/// const [KEY_braille_dots_36](https://docs.gtk.org/gdk4/const.KEY_braille_dots_36.html)
pub const KEY_braille_dots_36 = 16787492;
/// const [KEY_braille_dots_367](https://docs.gtk.org/gdk4/const.KEY_braille_dots_367.html)
pub const KEY_braille_dots_367 = 16787556;
/// const [KEY_braille_dots_3678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_3678.html)
pub const KEY_braille_dots_3678 = 16787684;
/// const [KEY_braille_dots_368](https://docs.gtk.org/gdk4/const.KEY_braille_dots_368.html)
pub const KEY_braille_dots_368 = 16787620;
/// const [KEY_braille_dots_37](https://docs.gtk.org/gdk4/const.KEY_braille_dots_37.html)
pub const KEY_braille_dots_37 = 16787524;
/// const [KEY_braille_dots_378](https://docs.gtk.org/gdk4/const.KEY_braille_dots_378.html)
pub const KEY_braille_dots_378 = 16787652;
/// const [KEY_braille_dots_38](https://docs.gtk.org/gdk4/const.KEY_braille_dots_38.html)
pub const KEY_braille_dots_38 = 16787588;
/// const [KEY_braille_dots_4](https://docs.gtk.org/gdk4/const.KEY_braille_dots_4.html)
pub const KEY_braille_dots_4 = 16787464;
/// const [KEY_braille_dots_45](https://docs.gtk.org/gdk4/const.KEY_braille_dots_45.html)
pub const KEY_braille_dots_45 = 16787480;
/// const [KEY_braille_dots_456](https://docs.gtk.org/gdk4/const.KEY_braille_dots_456.html)
pub const KEY_braille_dots_456 = 16787512;
/// const [KEY_braille_dots_4567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_4567.html)
pub const KEY_braille_dots_4567 = 16787576;
/// const [KEY_braille_dots_45678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_45678.html)
pub const KEY_braille_dots_45678 = 16787704;
/// const [KEY_braille_dots_4568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_4568.html)
pub const KEY_braille_dots_4568 = 16787640;
/// const [KEY_braille_dots_457](https://docs.gtk.org/gdk4/const.KEY_braille_dots_457.html)
pub const KEY_braille_dots_457 = 16787544;
/// const [KEY_braille_dots_4578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_4578.html)
pub const KEY_braille_dots_4578 = 16787672;
/// const [KEY_braille_dots_458](https://docs.gtk.org/gdk4/const.KEY_braille_dots_458.html)
pub const KEY_braille_dots_458 = 16787608;
/// const [KEY_braille_dots_46](https://docs.gtk.org/gdk4/const.KEY_braille_dots_46.html)
pub const KEY_braille_dots_46 = 16787496;
/// const [KEY_braille_dots_467](https://docs.gtk.org/gdk4/const.KEY_braille_dots_467.html)
pub const KEY_braille_dots_467 = 16787560;
/// const [KEY_braille_dots_4678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_4678.html)
pub const KEY_braille_dots_4678 = 16787688;
/// const [KEY_braille_dots_468](https://docs.gtk.org/gdk4/const.KEY_braille_dots_468.html)
pub const KEY_braille_dots_468 = 16787624;
/// const [KEY_braille_dots_47](https://docs.gtk.org/gdk4/const.KEY_braille_dots_47.html)
pub const KEY_braille_dots_47 = 16787528;
/// const [KEY_braille_dots_478](https://docs.gtk.org/gdk4/const.KEY_braille_dots_478.html)
pub const KEY_braille_dots_478 = 16787656;
/// const [KEY_braille_dots_48](https://docs.gtk.org/gdk4/const.KEY_braille_dots_48.html)
pub const KEY_braille_dots_48 = 16787592;
/// const [KEY_braille_dots_5](https://docs.gtk.org/gdk4/const.KEY_braille_dots_5.html)
pub const KEY_braille_dots_5 = 16787472;
/// const [KEY_braille_dots_56](https://docs.gtk.org/gdk4/const.KEY_braille_dots_56.html)
pub const KEY_braille_dots_56 = 16787504;
/// const [KEY_braille_dots_567](https://docs.gtk.org/gdk4/const.KEY_braille_dots_567.html)
pub const KEY_braille_dots_567 = 16787568;
/// const [KEY_braille_dots_5678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_5678.html)
pub const KEY_braille_dots_5678 = 16787696;
/// const [KEY_braille_dots_568](https://docs.gtk.org/gdk4/const.KEY_braille_dots_568.html)
pub const KEY_braille_dots_568 = 16787632;
/// const [KEY_braille_dots_57](https://docs.gtk.org/gdk4/const.KEY_braille_dots_57.html)
pub const KEY_braille_dots_57 = 16787536;
/// const [KEY_braille_dots_578](https://docs.gtk.org/gdk4/const.KEY_braille_dots_578.html)
pub const KEY_braille_dots_578 = 16787664;
/// const [KEY_braille_dots_58](https://docs.gtk.org/gdk4/const.KEY_braille_dots_58.html)
pub const KEY_braille_dots_58 = 16787600;
/// const [KEY_braille_dots_6](https://docs.gtk.org/gdk4/const.KEY_braille_dots_6.html)
pub const KEY_braille_dots_6 = 16787488;
/// const [KEY_braille_dots_67](https://docs.gtk.org/gdk4/const.KEY_braille_dots_67.html)
pub const KEY_braille_dots_67 = 16787552;
/// const [KEY_braille_dots_678](https://docs.gtk.org/gdk4/const.KEY_braille_dots_678.html)
pub const KEY_braille_dots_678 = 16787680;
/// const [KEY_braille_dots_68](https://docs.gtk.org/gdk4/const.KEY_braille_dots_68.html)
pub const KEY_braille_dots_68 = 16787616;
/// const [KEY_braille_dots_7](https://docs.gtk.org/gdk4/const.KEY_braille_dots_7.html)
pub const KEY_braille_dots_7 = 16787520;
/// const [KEY_braille_dots_78](https://docs.gtk.org/gdk4/const.KEY_braille_dots_78.html)
pub const KEY_braille_dots_78 = 16787648;
/// const [KEY_braille_dots_8](https://docs.gtk.org/gdk4/const.KEY_braille_dots_8.html)
pub const KEY_braille_dots_8 = 16787584;
/// const [KEY_breve](https://docs.gtk.org/gdk4/const.KEY_breve.html)
pub const KEY_breve = 418;
/// const [KEY_brokenbar](https://docs.gtk.org/gdk4/const.KEY_brokenbar.html)
pub const KEY_brokenbar = 166;
/// const [KEY_c](https://docs.gtk.org/gdk4/const.KEY_c.html)
pub const KEY_c = 99;
/// const [KEY_c_h](https://docs.gtk.org/gdk4/const.KEY_c_h.html)
pub const KEY_c_h = 65187;
/// const [KEY_cabovedot](https://docs.gtk.org/gdk4/const.KEY_cabovedot.html)
pub const KEY_cabovedot = 741;
/// const [KEY_cacute](https://docs.gtk.org/gdk4/const.KEY_cacute.html)
pub const KEY_cacute = 486;
/// const [KEY_careof](https://docs.gtk.org/gdk4/const.KEY_careof.html)
pub const KEY_careof = 2744;
/// const [KEY_caret](https://docs.gtk.org/gdk4/const.KEY_caret.html)
pub const KEY_caret = 2812;
/// const [KEY_caron](https://docs.gtk.org/gdk4/const.KEY_caron.html)
pub const KEY_caron = 439;
/// const [KEY_ccaron](https://docs.gtk.org/gdk4/const.KEY_ccaron.html)
pub const KEY_ccaron = 488;
/// const [KEY_ccedilla](https://docs.gtk.org/gdk4/const.KEY_ccedilla.html)
pub const KEY_ccedilla = 231;
/// const [KEY_ccircumflex](https://docs.gtk.org/gdk4/const.KEY_ccircumflex.html)
pub const KEY_ccircumflex = 742;
/// const [KEY_cedilla](https://docs.gtk.org/gdk4/const.KEY_cedilla.html)
pub const KEY_cedilla = 184;
/// const [KEY_cent](https://docs.gtk.org/gdk4/const.KEY_cent.html)
pub const KEY_cent = 162;
/// const [KEY_ch](https://docs.gtk.org/gdk4/const.KEY_ch.html)
pub const KEY_ch = 65184;
/// const [KEY_checkerboard](https://docs.gtk.org/gdk4/const.KEY_checkerboard.html)
pub const KEY_checkerboard = 2529;
/// const [KEY_checkmark](https://docs.gtk.org/gdk4/const.KEY_checkmark.html)
pub const KEY_checkmark = 2803;
/// const [KEY_circle](https://docs.gtk.org/gdk4/const.KEY_circle.html)
pub const KEY_circle = 3023;
/// const [KEY_club](https://docs.gtk.org/gdk4/const.KEY_club.html)
pub const KEY_club = 2796;
/// const [KEY_colon](https://docs.gtk.org/gdk4/const.KEY_colon.html)
pub const KEY_colon = 58;
/// const [KEY_comma](https://docs.gtk.org/gdk4/const.KEY_comma.html)
pub const KEY_comma = 44;
/// const [KEY_containsas](https://docs.gtk.org/gdk4/const.KEY_containsas.html)
pub const KEY_containsas = 16785931;
/// const [KEY_copyright](https://docs.gtk.org/gdk4/const.KEY_copyright.html)
pub const KEY_copyright = 169;
/// const [KEY_cr](https://docs.gtk.org/gdk4/const.KEY_cr.html)
pub const KEY_cr = 2532;
/// const [KEY_crossinglines](https://docs.gtk.org/gdk4/const.KEY_crossinglines.html)
pub const KEY_crossinglines = 2542;
/// const [KEY_cuberoot](https://docs.gtk.org/gdk4/const.KEY_cuberoot.html)
pub const KEY_cuberoot = 16785947;
/// const [KEY_currency](https://docs.gtk.org/gdk4/const.KEY_currency.html)
pub const KEY_currency = 164;
/// const [KEY_cursor](https://docs.gtk.org/gdk4/const.KEY_cursor.html)
pub const KEY_cursor = 2815;
/// const [KEY_d](https://docs.gtk.org/gdk4/const.KEY_d.html)
pub const KEY_d = 100;
/// const [KEY_dabovedot](https://docs.gtk.org/gdk4/const.KEY_dabovedot.html)
pub const KEY_dabovedot = 16784907;
/// const [KEY_dagger](https://docs.gtk.org/gdk4/const.KEY_dagger.html)
pub const KEY_dagger = 2801;
/// const [KEY_dcaron](https://docs.gtk.org/gdk4/const.KEY_dcaron.html)
pub const KEY_dcaron = 495;
/// const [KEY_dead_A](https://docs.gtk.org/gdk4/const.KEY_dead_A.html)
pub const KEY_dead_A = 65153;
/// const [KEY_dead_E](https://docs.gtk.org/gdk4/const.KEY_dead_E.html)
pub const KEY_dead_E = 65155;
/// const [KEY_dead_I](https://docs.gtk.org/gdk4/const.KEY_dead_I.html)
pub const KEY_dead_I = 65157;
/// const [KEY_dead_O](https://docs.gtk.org/gdk4/const.KEY_dead_O.html)
pub const KEY_dead_O = 65159;
/// const [KEY_dead_U](https://docs.gtk.org/gdk4/const.KEY_dead_U.html)
pub const KEY_dead_U = 65161;
/// const [KEY_dead_a](https://docs.gtk.org/gdk4/const.KEY_dead_a.html)
pub const KEY_dead_a = 65152;
/// const [KEY_dead_abovecomma](https://docs.gtk.org/gdk4/const.KEY_dead_abovecomma.html)
pub const KEY_dead_abovecomma = 65124;
/// const [KEY_dead_abovedot](https://docs.gtk.org/gdk4/const.KEY_dead_abovedot.html)
pub const KEY_dead_abovedot = 65110;
/// const [KEY_dead_abovereversedcomma](https://docs.gtk.org/gdk4/const.KEY_dead_abovereversedcomma.html)
pub const KEY_dead_abovereversedcomma = 65125;
/// const [KEY_dead_abovering](https://docs.gtk.org/gdk4/const.KEY_dead_abovering.html)
pub const KEY_dead_abovering = 65112;
/// const [KEY_dead_aboveverticalline](https://docs.gtk.org/gdk4/const.KEY_dead_aboveverticalline.html)
pub const KEY_dead_aboveverticalline = 65169;
/// const [KEY_dead_acute](https://docs.gtk.org/gdk4/const.KEY_dead_acute.html)
pub const KEY_dead_acute = 65105;
/// const [KEY_dead_belowbreve](https://docs.gtk.org/gdk4/const.KEY_dead_belowbreve.html)
pub const KEY_dead_belowbreve = 65131;
/// const [KEY_dead_belowcircumflex](https://docs.gtk.org/gdk4/const.KEY_dead_belowcircumflex.html)
pub const KEY_dead_belowcircumflex = 65129;
/// const [KEY_dead_belowcomma](https://docs.gtk.org/gdk4/const.KEY_dead_belowcomma.html)
pub const KEY_dead_belowcomma = 65134;
/// const [KEY_dead_belowdiaeresis](https://docs.gtk.org/gdk4/const.KEY_dead_belowdiaeresis.html)
pub const KEY_dead_belowdiaeresis = 65132;
/// const [KEY_dead_belowdot](https://docs.gtk.org/gdk4/const.KEY_dead_belowdot.html)
pub const KEY_dead_belowdot = 65120;
/// const [KEY_dead_belowmacron](https://docs.gtk.org/gdk4/const.KEY_dead_belowmacron.html)
pub const KEY_dead_belowmacron = 65128;
/// const [KEY_dead_belowring](https://docs.gtk.org/gdk4/const.KEY_dead_belowring.html)
pub const KEY_dead_belowring = 65127;
/// const [KEY_dead_belowtilde](https://docs.gtk.org/gdk4/const.KEY_dead_belowtilde.html)
pub const KEY_dead_belowtilde = 65130;
/// const [KEY_dead_belowverticalline](https://docs.gtk.org/gdk4/const.KEY_dead_belowverticalline.html)
pub const KEY_dead_belowverticalline = 65170;
/// const [KEY_dead_breve](https://docs.gtk.org/gdk4/const.KEY_dead_breve.html)
pub const KEY_dead_breve = 65109;
/// const [KEY_dead_capital_schwa](https://docs.gtk.org/gdk4/const.KEY_dead_capital_schwa.html)
pub const KEY_dead_capital_schwa = 65163;
/// const [KEY_dead_caron](https://docs.gtk.org/gdk4/const.KEY_dead_caron.html)
pub const KEY_dead_caron = 65114;
/// const [KEY_dead_cedilla](https://docs.gtk.org/gdk4/const.KEY_dead_cedilla.html)
pub const KEY_dead_cedilla = 65115;
/// const [KEY_dead_circumflex](https://docs.gtk.org/gdk4/const.KEY_dead_circumflex.html)
pub const KEY_dead_circumflex = 65106;
/// const [KEY_dead_currency](https://docs.gtk.org/gdk4/const.KEY_dead_currency.html)
pub const KEY_dead_currency = 65135;
/// const [KEY_dead_dasia](https://docs.gtk.org/gdk4/const.KEY_dead_dasia.html)
pub const KEY_dead_dasia = 65125;
/// const [KEY_dead_diaeresis](https://docs.gtk.org/gdk4/const.KEY_dead_diaeresis.html)
pub const KEY_dead_diaeresis = 65111;
/// const [KEY_dead_doubleacute](https://docs.gtk.org/gdk4/const.KEY_dead_doubleacute.html)
pub const KEY_dead_doubleacute = 65113;
/// const [KEY_dead_doublegrave](https://docs.gtk.org/gdk4/const.KEY_dead_doublegrave.html)
pub const KEY_dead_doublegrave = 65126;
/// const [KEY_dead_e](https://docs.gtk.org/gdk4/const.KEY_dead_e.html)
pub const KEY_dead_e = 65154;
/// const [KEY_dead_grave](https://docs.gtk.org/gdk4/const.KEY_dead_grave.html)
pub const KEY_dead_grave = 65104;
/// const [KEY_dead_greek](https://docs.gtk.org/gdk4/const.KEY_dead_greek.html)
pub const KEY_dead_greek = 65164;
/// const [KEY_dead_hook](https://docs.gtk.org/gdk4/const.KEY_dead_hook.html)
pub const KEY_dead_hook = 65121;
/// const [KEY_dead_horn](https://docs.gtk.org/gdk4/const.KEY_dead_horn.html)
pub const KEY_dead_horn = 65122;
/// const [KEY_dead_i](https://docs.gtk.org/gdk4/const.KEY_dead_i.html)
pub const KEY_dead_i = 65156;
/// const [KEY_dead_invertedbreve](https://docs.gtk.org/gdk4/const.KEY_dead_invertedbreve.html)
pub const KEY_dead_invertedbreve = 65133;
/// const [KEY_dead_iota](https://docs.gtk.org/gdk4/const.KEY_dead_iota.html)
pub const KEY_dead_iota = 65117;
/// const [KEY_dead_longsolidusoverlay](https://docs.gtk.org/gdk4/const.KEY_dead_longsolidusoverlay.html)
pub const KEY_dead_longsolidusoverlay = 65171;
/// const [KEY_dead_lowline](https://docs.gtk.org/gdk4/const.KEY_dead_lowline.html)
pub const KEY_dead_lowline = 65168;
/// const [KEY_dead_macron](https://docs.gtk.org/gdk4/const.KEY_dead_macron.html)
pub const KEY_dead_macron = 65108;
/// const [KEY_dead_o](https://docs.gtk.org/gdk4/const.KEY_dead_o.html)
pub const KEY_dead_o = 65158;
/// const [KEY_dead_ogonek](https://docs.gtk.org/gdk4/const.KEY_dead_ogonek.html)
pub const KEY_dead_ogonek = 65116;
/// const [KEY_dead_perispomeni](https://docs.gtk.org/gdk4/const.KEY_dead_perispomeni.html)
pub const KEY_dead_perispomeni = 65107;
/// const [KEY_dead_psili](https://docs.gtk.org/gdk4/const.KEY_dead_psili.html)
pub const KEY_dead_psili = 65124;
/// const [KEY_dead_semivoiced_sound](https://docs.gtk.org/gdk4/const.KEY_dead_semivoiced_sound.html)
pub const KEY_dead_semivoiced_sound = 65119;
/// const [KEY_dead_small_schwa](https://docs.gtk.org/gdk4/const.KEY_dead_small_schwa.html)
pub const KEY_dead_small_schwa = 65162;
/// const [KEY_dead_stroke](https://docs.gtk.org/gdk4/const.KEY_dead_stroke.html)
pub const KEY_dead_stroke = 65123;
/// const [KEY_dead_tilde](https://docs.gtk.org/gdk4/const.KEY_dead_tilde.html)
pub const KEY_dead_tilde = 65107;
/// const [KEY_dead_u](https://docs.gtk.org/gdk4/const.KEY_dead_u.html)
pub const KEY_dead_u = 65160;
/// const [KEY_dead_voiced_sound](https://docs.gtk.org/gdk4/const.KEY_dead_voiced_sound.html)
pub const KEY_dead_voiced_sound = 65118;
/// const [KEY_decimalpoint](https://docs.gtk.org/gdk4/const.KEY_decimalpoint.html)
pub const KEY_decimalpoint = 2749;
/// const [KEY_degree](https://docs.gtk.org/gdk4/const.KEY_degree.html)
pub const KEY_degree = 176;
/// const [KEY_diaeresis](https://docs.gtk.org/gdk4/const.KEY_diaeresis.html)
pub const KEY_diaeresis = 168;
/// const [KEY_diamond](https://docs.gtk.org/gdk4/const.KEY_diamond.html)
pub const KEY_diamond = 2797;
/// const [KEY_digitspace](https://docs.gtk.org/gdk4/const.KEY_digitspace.html)
pub const KEY_digitspace = 2725;
/// const [KEY_dintegral](https://docs.gtk.org/gdk4/const.KEY_dintegral.html)
pub const KEY_dintegral = 16785964;
/// const [KEY_division](https://docs.gtk.org/gdk4/const.KEY_division.html)
pub const KEY_division = 247;
/// const [KEY_dollar](https://docs.gtk.org/gdk4/const.KEY_dollar.html)
pub const KEY_dollar = 36;
/// const [KEY_doubbaselinedot](https://docs.gtk.org/gdk4/const.KEY_doubbaselinedot.html)
pub const KEY_doubbaselinedot = 2735;
/// const [KEY_doubleacute](https://docs.gtk.org/gdk4/const.KEY_doubleacute.html)
pub const KEY_doubleacute = 445;
/// const [KEY_doubledagger](https://docs.gtk.org/gdk4/const.KEY_doubledagger.html)
pub const KEY_doubledagger = 2802;
/// const [KEY_doublelowquotemark](https://docs.gtk.org/gdk4/const.KEY_doublelowquotemark.html)
pub const KEY_doublelowquotemark = 2814;
/// const [KEY_downarrow](https://docs.gtk.org/gdk4/const.KEY_downarrow.html)
pub const KEY_downarrow = 2302;
/// const [KEY_downcaret](https://docs.gtk.org/gdk4/const.KEY_downcaret.html)
pub const KEY_downcaret = 2984;
/// const [KEY_downshoe](https://docs.gtk.org/gdk4/const.KEY_downshoe.html)
pub const KEY_downshoe = 3030;
/// const [KEY_downstile](https://docs.gtk.org/gdk4/const.KEY_downstile.html)
pub const KEY_downstile = 3012;
/// const [KEY_downtack](https://docs.gtk.org/gdk4/const.KEY_downtack.html)
pub const KEY_downtack = 3010;
/// const [KEY_dstroke](https://docs.gtk.org/gdk4/const.KEY_dstroke.html)
pub const KEY_dstroke = 496;
/// const [KEY_e](https://docs.gtk.org/gdk4/const.KEY_e.html)
pub const KEY_e = 101;
/// const [KEY_eabovedot](https://docs.gtk.org/gdk4/const.KEY_eabovedot.html)
pub const KEY_eabovedot = 1004;
/// const [KEY_eacute](https://docs.gtk.org/gdk4/const.KEY_eacute.html)
pub const KEY_eacute = 233;
/// const [KEY_ebelowdot](https://docs.gtk.org/gdk4/const.KEY_ebelowdot.html)
pub const KEY_ebelowdot = 16785081;
/// const [KEY_ecaron](https://docs.gtk.org/gdk4/const.KEY_ecaron.html)
pub const KEY_ecaron = 492;
/// const [KEY_ecircumflex](https://docs.gtk.org/gdk4/const.KEY_ecircumflex.html)
pub const KEY_ecircumflex = 234;
/// const [KEY_ecircumflexacute](https://docs.gtk.org/gdk4/const.KEY_ecircumflexacute.html)
pub const KEY_ecircumflexacute = 16785087;
/// const [KEY_ecircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_ecircumflexbelowdot.html)
pub const KEY_ecircumflexbelowdot = 16785095;
/// const [KEY_ecircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_ecircumflexgrave.html)
pub const KEY_ecircumflexgrave = 16785089;
/// const [KEY_ecircumflexhook](https://docs.gtk.org/gdk4/const.KEY_ecircumflexhook.html)
pub const KEY_ecircumflexhook = 16785091;
/// const [KEY_ecircumflextilde](https://docs.gtk.org/gdk4/const.KEY_ecircumflextilde.html)
pub const KEY_ecircumflextilde = 16785093;
/// const [KEY_ediaeresis](https://docs.gtk.org/gdk4/const.KEY_ediaeresis.html)
pub const KEY_ediaeresis = 235;
/// const [KEY_egrave](https://docs.gtk.org/gdk4/const.KEY_egrave.html)
pub const KEY_egrave = 232;
/// const [KEY_ehook](https://docs.gtk.org/gdk4/const.KEY_ehook.html)
pub const KEY_ehook = 16785083;
/// const [KEY_eightsubscript](https://docs.gtk.org/gdk4/const.KEY_eightsubscript.html)
pub const KEY_eightsubscript = 16785544;
/// const [KEY_eightsuperior](https://docs.gtk.org/gdk4/const.KEY_eightsuperior.html)
pub const KEY_eightsuperior = 16785528;
/// const [KEY_elementof](https://docs.gtk.org/gdk4/const.KEY_elementof.html)
pub const KEY_elementof = 16785928;
/// const [KEY_ellipsis](https://docs.gtk.org/gdk4/const.KEY_ellipsis.html)
pub const KEY_ellipsis = 2734;
/// const [KEY_em3space](https://docs.gtk.org/gdk4/const.KEY_em3space.html)
pub const KEY_em3space = 2723;
/// const [KEY_em4space](https://docs.gtk.org/gdk4/const.KEY_em4space.html)
pub const KEY_em4space = 2724;
/// const [KEY_emacron](https://docs.gtk.org/gdk4/const.KEY_emacron.html)
pub const KEY_emacron = 954;
/// const [KEY_emdash](https://docs.gtk.org/gdk4/const.KEY_emdash.html)
pub const KEY_emdash = 2729;
/// const [KEY_emfilledcircle](https://docs.gtk.org/gdk4/const.KEY_emfilledcircle.html)
pub const KEY_emfilledcircle = 2782;
/// const [KEY_emfilledrect](https://docs.gtk.org/gdk4/const.KEY_emfilledrect.html)
pub const KEY_emfilledrect = 2783;
/// const [KEY_emopencircle](https://docs.gtk.org/gdk4/const.KEY_emopencircle.html)
pub const KEY_emopencircle = 2766;
/// const [KEY_emopenrectangle](https://docs.gtk.org/gdk4/const.KEY_emopenrectangle.html)
pub const KEY_emopenrectangle = 2767;
/// const [KEY_emptyset](https://docs.gtk.org/gdk4/const.KEY_emptyset.html)
pub const KEY_emptyset = 16785925;
/// const [KEY_emspace](https://docs.gtk.org/gdk4/const.KEY_emspace.html)
pub const KEY_emspace = 2721;
/// const [KEY_endash](https://docs.gtk.org/gdk4/const.KEY_endash.html)
pub const KEY_endash = 2730;
/// const [KEY_enfilledcircbullet](https://docs.gtk.org/gdk4/const.KEY_enfilledcircbullet.html)
pub const KEY_enfilledcircbullet = 2790;
/// const [KEY_enfilledsqbullet](https://docs.gtk.org/gdk4/const.KEY_enfilledsqbullet.html)
pub const KEY_enfilledsqbullet = 2791;
/// const [KEY_eng](https://docs.gtk.org/gdk4/const.KEY_eng.html)
pub const KEY_eng = 959;
/// const [KEY_enopencircbullet](https://docs.gtk.org/gdk4/const.KEY_enopencircbullet.html)
pub const KEY_enopencircbullet = 2784;
/// const [KEY_enopensquarebullet](https://docs.gtk.org/gdk4/const.KEY_enopensquarebullet.html)
pub const KEY_enopensquarebullet = 2785;
/// const [KEY_enspace](https://docs.gtk.org/gdk4/const.KEY_enspace.html)
pub const KEY_enspace = 2722;
/// const [KEY_eogonek](https://docs.gtk.org/gdk4/const.KEY_eogonek.html)
pub const KEY_eogonek = 490;
/// const [KEY_equal](https://docs.gtk.org/gdk4/const.KEY_equal.html)
pub const KEY_equal = 61;
/// const [KEY_eth](https://docs.gtk.org/gdk4/const.KEY_eth.html)
pub const KEY_eth = 240;
/// const [KEY_etilde](https://docs.gtk.org/gdk4/const.KEY_etilde.html)
pub const KEY_etilde = 16785085;
/// const [KEY_exclam](https://docs.gtk.org/gdk4/const.KEY_exclam.html)
pub const KEY_exclam = 33;
/// const [KEY_exclamdown](https://docs.gtk.org/gdk4/const.KEY_exclamdown.html)
pub const KEY_exclamdown = 161;
/// const [KEY_ezh](https://docs.gtk.org/gdk4/const.KEY_ezh.html)
pub const KEY_ezh = 16777874;
/// const [KEY_f](https://docs.gtk.org/gdk4/const.KEY_f.html)
pub const KEY_f = 102;
/// const [KEY_fabovedot](https://docs.gtk.org/gdk4/const.KEY_fabovedot.html)
pub const KEY_fabovedot = 16784927;
/// const [KEY_femalesymbol](https://docs.gtk.org/gdk4/const.KEY_femalesymbol.html)
pub const KEY_femalesymbol = 2808;
/// const [KEY_ff](https://docs.gtk.org/gdk4/const.KEY_ff.html)
pub const KEY_ff = 2531;
/// const [KEY_figdash](https://docs.gtk.org/gdk4/const.KEY_figdash.html)
pub const KEY_figdash = 2747;
/// const [KEY_filledlefttribullet](https://docs.gtk.org/gdk4/const.KEY_filledlefttribullet.html)
pub const KEY_filledlefttribullet = 2780;
/// const [KEY_filledrectbullet](https://docs.gtk.org/gdk4/const.KEY_filledrectbullet.html)
pub const KEY_filledrectbullet = 2779;
/// const [KEY_filledrighttribullet](https://docs.gtk.org/gdk4/const.KEY_filledrighttribullet.html)
pub const KEY_filledrighttribullet = 2781;
/// const [KEY_filledtribulletdown](https://docs.gtk.org/gdk4/const.KEY_filledtribulletdown.html)
pub const KEY_filledtribulletdown = 2793;
/// const [KEY_filledtribulletup](https://docs.gtk.org/gdk4/const.KEY_filledtribulletup.html)
pub const KEY_filledtribulletup = 2792;
/// const [KEY_fiveeighths](https://docs.gtk.org/gdk4/const.KEY_fiveeighths.html)
pub const KEY_fiveeighths = 2757;
/// const [KEY_fivesixths](https://docs.gtk.org/gdk4/const.KEY_fivesixths.html)
pub const KEY_fivesixths = 2743;
/// const [KEY_fivesubscript](https://docs.gtk.org/gdk4/const.KEY_fivesubscript.html)
pub const KEY_fivesubscript = 16785541;
/// const [KEY_fivesuperior](https://docs.gtk.org/gdk4/const.KEY_fivesuperior.html)
pub const KEY_fivesuperior = 16785525;
/// const [KEY_fourfifths](https://docs.gtk.org/gdk4/const.KEY_fourfifths.html)
pub const KEY_fourfifths = 2741;
/// const [KEY_foursubscript](https://docs.gtk.org/gdk4/const.KEY_foursubscript.html)
pub const KEY_foursubscript = 16785540;
/// const [KEY_foursuperior](https://docs.gtk.org/gdk4/const.KEY_foursuperior.html)
pub const KEY_foursuperior = 16785524;
/// const [KEY_fourthroot](https://docs.gtk.org/gdk4/const.KEY_fourthroot.html)
pub const KEY_fourthroot = 16785948;
/// const [KEY_function](https://docs.gtk.org/gdk4/const.KEY_function.html)
pub const KEY_function = 2294;
/// const [KEY_g](https://docs.gtk.org/gdk4/const.KEY_g.html)
pub const KEY_g = 103;
/// const [KEY_gabovedot](https://docs.gtk.org/gdk4/const.KEY_gabovedot.html)
pub const KEY_gabovedot = 757;
/// const [KEY_gbreve](https://docs.gtk.org/gdk4/const.KEY_gbreve.html)
pub const KEY_gbreve = 699;
/// const [KEY_gcaron](https://docs.gtk.org/gdk4/const.KEY_gcaron.html)
pub const KEY_gcaron = 16777703;
/// const [KEY_gcedilla](https://docs.gtk.org/gdk4/const.KEY_gcedilla.html)
pub const KEY_gcedilla = 955;
/// const [KEY_gcircumflex](https://docs.gtk.org/gdk4/const.KEY_gcircumflex.html)
pub const KEY_gcircumflex = 760;
/// const [KEY_grave](https://docs.gtk.org/gdk4/const.KEY_grave.html)
pub const KEY_grave = 96;
/// const [KEY_greater](https://docs.gtk.org/gdk4/const.KEY_greater.html)
pub const KEY_greater = 62;
/// const [KEY_greaterthanequal](https://docs.gtk.org/gdk4/const.KEY_greaterthanequal.html)
pub const KEY_greaterthanequal = 2238;
/// const [KEY_guillemotleft](https://docs.gtk.org/gdk4/const.KEY_guillemotleft.html)
pub const KEY_guillemotleft = 171;
/// const [KEY_guillemotright](https://docs.gtk.org/gdk4/const.KEY_guillemotright.html)
pub const KEY_guillemotright = 187;
/// const [KEY_h](https://docs.gtk.org/gdk4/const.KEY_h.html)
pub const KEY_h = 104;
/// const [KEY_hairspace](https://docs.gtk.org/gdk4/const.KEY_hairspace.html)
pub const KEY_hairspace = 2728;
/// const [KEY_hcircumflex](https://docs.gtk.org/gdk4/const.KEY_hcircumflex.html)
pub const KEY_hcircumflex = 694;
/// const [KEY_heart](https://docs.gtk.org/gdk4/const.KEY_heart.html)
pub const KEY_heart = 2798;
/// const [KEY_hebrew_aleph](https://docs.gtk.org/gdk4/const.KEY_hebrew_aleph.html)
pub const KEY_hebrew_aleph = 3296;
/// const [KEY_hebrew_ayin](https://docs.gtk.org/gdk4/const.KEY_hebrew_ayin.html)
pub const KEY_hebrew_ayin = 3314;
/// const [KEY_hebrew_bet](https://docs.gtk.org/gdk4/const.KEY_hebrew_bet.html)
pub const KEY_hebrew_bet = 3297;
/// const [KEY_hebrew_beth](https://docs.gtk.org/gdk4/const.KEY_hebrew_beth.html)
pub const KEY_hebrew_beth = 3297;
/// const [KEY_hebrew_chet](https://docs.gtk.org/gdk4/const.KEY_hebrew_chet.html)
pub const KEY_hebrew_chet = 3303;
/// const [KEY_hebrew_dalet](https://docs.gtk.org/gdk4/const.KEY_hebrew_dalet.html)
pub const KEY_hebrew_dalet = 3299;
/// const [KEY_hebrew_daleth](https://docs.gtk.org/gdk4/const.KEY_hebrew_daleth.html)
pub const KEY_hebrew_daleth = 3299;
/// const [KEY_hebrew_doublelowline](https://docs.gtk.org/gdk4/const.KEY_hebrew_doublelowline.html)
pub const KEY_hebrew_doublelowline = 3295;
/// const [KEY_hebrew_finalkaph](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalkaph.html)
pub const KEY_hebrew_finalkaph = 3306;
/// const [KEY_hebrew_finalmem](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalmem.html)
pub const KEY_hebrew_finalmem = 3309;
/// const [KEY_hebrew_finalnun](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalnun.html)
pub const KEY_hebrew_finalnun = 3311;
/// const [KEY_hebrew_finalpe](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalpe.html)
pub const KEY_hebrew_finalpe = 3315;
/// const [KEY_hebrew_finalzade](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalzade.html)
pub const KEY_hebrew_finalzade = 3317;
/// const [KEY_hebrew_finalzadi](https://docs.gtk.org/gdk4/const.KEY_hebrew_finalzadi.html)
pub const KEY_hebrew_finalzadi = 3317;
/// const [KEY_hebrew_gimel](https://docs.gtk.org/gdk4/const.KEY_hebrew_gimel.html)
pub const KEY_hebrew_gimel = 3298;
/// const [KEY_hebrew_gimmel](https://docs.gtk.org/gdk4/const.KEY_hebrew_gimmel.html)
pub const KEY_hebrew_gimmel = 3298;
/// const [KEY_hebrew_he](https://docs.gtk.org/gdk4/const.KEY_hebrew_he.html)
pub const KEY_hebrew_he = 3300;
/// const [KEY_hebrew_het](https://docs.gtk.org/gdk4/const.KEY_hebrew_het.html)
pub const KEY_hebrew_het = 3303;
/// const [KEY_hebrew_kaph](https://docs.gtk.org/gdk4/const.KEY_hebrew_kaph.html)
pub const KEY_hebrew_kaph = 3307;
/// const [KEY_hebrew_kuf](https://docs.gtk.org/gdk4/const.KEY_hebrew_kuf.html)
pub const KEY_hebrew_kuf = 3319;
/// const [KEY_hebrew_lamed](https://docs.gtk.org/gdk4/const.KEY_hebrew_lamed.html)
pub const KEY_hebrew_lamed = 3308;
/// const [KEY_hebrew_mem](https://docs.gtk.org/gdk4/const.KEY_hebrew_mem.html)
pub const KEY_hebrew_mem = 3310;
/// const [KEY_hebrew_nun](https://docs.gtk.org/gdk4/const.KEY_hebrew_nun.html)
pub const KEY_hebrew_nun = 3312;
/// const [KEY_hebrew_pe](https://docs.gtk.org/gdk4/const.KEY_hebrew_pe.html)
pub const KEY_hebrew_pe = 3316;
/// const [KEY_hebrew_qoph](https://docs.gtk.org/gdk4/const.KEY_hebrew_qoph.html)
pub const KEY_hebrew_qoph = 3319;
/// const [KEY_hebrew_resh](https://docs.gtk.org/gdk4/const.KEY_hebrew_resh.html)
pub const KEY_hebrew_resh = 3320;
/// const [KEY_hebrew_samech](https://docs.gtk.org/gdk4/const.KEY_hebrew_samech.html)
pub const KEY_hebrew_samech = 3313;
/// const [KEY_hebrew_samekh](https://docs.gtk.org/gdk4/const.KEY_hebrew_samekh.html)
pub const KEY_hebrew_samekh = 3313;
/// const [KEY_hebrew_shin](https://docs.gtk.org/gdk4/const.KEY_hebrew_shin.html)
pub const KEY_hebrew_shin = 3321;
/// const [KEY_hebrew_taf](https://docs.gtk.org/gdk4/const.KEY_hebrew_taf.html)
pub const KEY_hebrew_taf = 3322;
/// const [KEY_hebrew_taw](https://docs.gtk.org/gdk4/const.KEY_hebrew_taw.html)
pub const KEY_hebrew_taw = 3322;
/// const [KEY_hebrew_tet](https://docs.gtk.org/gdk4/const.KEY_hebrew_tet.html)
pub const KEY_hebrew_tet = 3304;
/// const [KEY_hebrew_teth](https://docs.gtk.org/gdk4/const.KEY_hebrew_teth.html)
pub const KEY_hebrew_teth = 3304;
/// const [KEY_hebrew_waw](https://docs.gtk.org/gdk4/const.KEY_hebrew_waw.html)
pub const KEY_hebrew_waw = 3301;
/// const [KEY_hebrew_yod](https://docs.gtk.org/gdk4/const.KEY_hebrew_yod.html)
pub const KEY_hebrew_yod = 3305;
/// const [KEY_hebrew_zade](https://docs.gtk.org/gdk4/const.KEY_hebrew_zade.html)
pub const KEY_hebrew_zade = 3318;
/// const [KEY_hebrew_zadi](https://docs.gtk.org/gdk4/const.KEY_hebrew_zadi.html)
pub const KEY_hebrew_zadi = 3318;
/// const [KEY_hebrew_zain](https://docs.gtk.org/gdk4/const.KEY_hebrew_zain.html)
pub const KEY_hebrew_zain = 3302;
/// const [KEY_hebrew_zayin](https://docs.gtk.org/gdk4/const.KEY_hebrew_zayin.html)
pub const KEY_hebrew_zayin = 3302;
/// const [KEY_hexagram](https://docs.gtk.org/gdk4/const.KEY_hexagram.html)
pub const KEY_hexagram = 2778;
/// const [KEY_horizconnector](https://docs.gtk.org/gdk4/const.KEY_horizconnector.html)
pub const KEY_horizconnector = 2211;
/// const [KEY_horizlinescan1](https://docs.gtk.org/gdk4/const.KEY_horizlinescan1.html)
pub const KEY_horizlinescan1 = 2543;
/// const [KEY_horizlinescan3](https://docs.gtk.org/gdk4/const.KEY_horizlinescan3.html)
pub const KEY_horizlinescan3 = 2544;
/// const [KEY_horizlinescan5](https://docs.gtk.org/gdk4/const.KEY_horizlinescan5.html)
pub const KEY_horizlinescan5 = 2545;
/// const [KEY_horizlinescan7](https://docs.gtk.org/gdk4/const.KEY_horizlinescan7.html)
pub const KEY_horizlinescan7 = 2546;
/// const [KEY_horizlinescan9](https://docs.gtk.org/gdk4/const.KEY_horizlinescan9.html)
pub const KEY_horizlinescan9 = 2547;
/// const [KEY_hstroke](https://docs.gtk.org/gdk4/const.KEY_hstroke.html)
pub const KEY_hstroke = 689;
/// const [KEY_ht](https://docs.gtk.org/gdk4/const.KEY_ht.html)
pub const KEY_ht = 2530;
/// const [KEY_hyphen](https://docs.gtk.org/gdk4/const.KEY_hyphen.html)
pub const KEY_hyphen = 173;
/// const [KEY_i](https://docs.gtk.org/gdk4/const.KEY_i.html)
pub const KEY_i = 105;
/// const [KEY_iTouch](https://docs.gtk.org/gdk4/const.KEY_iTouch.html)
pub const KEY_iTouch = 269025120;
/// const [KEY_iacute](https://docs.gtk.org/gdk4/const.KEY_iacute.html)
pub const KEY_iacute = 237;
/// const [KEY_ibelowdot](https://docs.gtk.org/gdk4/const.KEY_ibelowdot.html)
pub const KEY_ibelowdot = 16785099;
/// const [KEY_ibreve](https://docs.gtk.org/gdk4/const.KEY_ibreve.html)
pub const KEY_ibreve = 16777517;
/// const [KEY_icircumflex](https://docs.gtk.org/gdk4/const.KEY_icircumflex.html)
pub const KEY_icircumflex = 238;
/// const [KEY_identical](https://docs.gtk.org/gdk4/const.KEY_identical.html)
pub const KEY_identical = 2255;
/// const [KEY_idiaeresis](https://docs.gtk.org/gdk4/const.KEY_idiaeresis.html)
pub const KEY_idiaeresis = 239;
/// const [KEY_idotless](https://docs.gtk.org/gdk4/const.KEY_idotless.html)
pub const KEY_idotless = 697;
/// const [KEY_ifonlyif](https://docs.gtk.org/gdk4/const.KEY_ifonlyif.html)
pub const KEY_ifonlyif = 2253;
/// const [KEY_igrave](https://docs.gtk.org/gdk4/const.KEY_igrave.html)
pub const KEY_igrave = 236;
/// const [KEY_ihook](https://docs.gtk.org/gdk4/const.KEY_ihook.html)
pub const KEY_ihook = 16785097;
/// const [KEY_imacron](https://docs.gtk.org/gdk4/const.KEY_imacron.html)
pub const KEY_imacron = 1007;
/// const [KEY_implies](https://docs.gtk.org/gdk4/const.KEY_implies.html)
pub const KEY_implies = 2254;
/// const [KEY_includedin](https://docs.gtk.org/gdk4/const.KEY_includedin.html)
pub const KEY_includedin = 2266;
/// const [KEY_includes](https://docs.gtk.org/gdk4/const.KEY_includes.html)
pub const KEY_includes = 2267;
/// const [KEY_infinity](https://docs.gtk.org/gdk4/const.KEY_infinity.html)
pub const KEY_infinity = 2242;
/// const [KEY_integral](https://docs.gtk.org/gdk4/const.KEY_integral.html)
pub const KEY_integral = 2239;
/// const [KEY_intersection](https://docs.gtk.org/gdk4/const.KEY_intersection.html)
pub const KEY_intersection = 2268;
/// const [KEY_iogonek](https://docs.gtk.org/gdk4/const.KEY_iogonek.html)
pub const KEY_iogonek = 999;
/// const [KEY_itilde](https://docs.gtk.org/gdk4/const.KEY_itilde.html)
pub const KEY_itilde = 949;
/// const [KEY_j](https://docs.gtk.org/gdk4/const.KEY_j.html)
pub const KEY_j = 106;
/// const [KEY_jcircumflex](https://docs.gtk.org/gdk4/const.KEY_jcircumflex.html)
pub const KEY_jcircumflex = 700;
/// const [KEY_jot](https://docs.gtk.org/gdk4/const.KEY_jot.html)
pub const KEY_jot = 3018;
/// const [KEY_k](https://docs.gtk.org/gdk4/const.KEY_k.html)
pub const KEY_k = 107;
/// const [KEY_kana_A](https://docs.gtk.org/gdk4/const.KEY_kana_A.html)
pub const KEY_kana_A = 1201;
/// const [KEY_kana_CHI](https://docs.gtk.org/gdk4/const.KEY_kana_CHI.html)
pub const KEY_kana_CHI = 1217;
/// const [KEY_kana_E](https://docs.gtk.org/gdk4/const.KEY_kana_E.html)
pub const KEY_kana_E = 1204;
/// const [KEY_kana_FU](https://docs.gtk.org/gdk4/const.KEY_kana_FU.html)
pub const KEY_kana_FU = 1228;
/// const [KEY_kana_HA](https://docs.gtk.org/gdk4/const.KEY_kana_HA.html)
pub const KEY_kana_HA = 1226;
/// const [KEY_kana_HE](https://docs.gtk.org/gdk4/const.KEY_kana_HE.html)
pub const KEY_kana_HE = 1229;
/// const [KEY_kana_HI](https://docs.gtk.org/gdk4/const.KEY_kana_HI.html)
pub const KEY_kana_HI = 1227;
/// const [KEY_kana_HO](https://docs.gtk.org/gdk4/const.KEY_kana_HO.html)
pub const KEY_kana_HO = 1230;
/// const [KEY_kana_HU](https://docs.gtk.org/gdk4/const.KEY_kana_HU.html)
pub const KEY_kana_HU = 1228;
/// const [KEY_kana_I](https://docs.gtk.org/gdk4/const.KEY_kana_I.html)
pub const KEY_kana_I = 1202;
/// const [KEY_kana_KA](https://docs.gtk.org/gdk4/const.KEY_kana_KA.html)
pub const KEY_kana_KA = 1206;
/// const [KEY_kana_KE](https://docs.gtk.org/gdk4/const.KEY_kana_KE.html)
pub const KEY_kana_KE = 1209;
/// const [KEY_kana_KI](https://docs.gtk.org/gdk4/const.KEY_kana_KI.html)
pub const KEY_kana_KI = 1207;
/// const [KEY_kana_KO](https://docs.gtk.org/gdk4/const.KEY_kana_KO.html)
pub const KEY_kana_KO = 1210;
/// const [KEY_kana_KU](https://docs.gtk.org/gdk4/const.KEY_kana_KU.html)
pub const KEY_kana_KU = 1208;
/// const [KEY_kana_MA](https://docs.gtk.org/gdk4/const.KEY_kana_MA.html)
pub const KEY_kana_MA = 1231;
/// const [KEY_kana_ME](https://docs.gtk.org/gdk4/const.KEY_kana_ME.html)
pub const KEY_kana_ME = 1234;
/// const [KEY_kana_MI](https://docs.gtk.org/gdk4/const.KEY_kana_MI.html)
pub const KEY_kana_MI = 1232;
/// const [KEY_kana_MO](https://docs.gtk.org/gdk4/const.KEY_kana_MO.html)
pub const KEY_kana_MO = 1235;
/// const [KEY_kana_MU](https://docs.gtk.org/gdk4/const.KEY_kana_MU.html)
pub const KEY_kana_MU = 1233;
/// const [KEY_kana_N](https://docs.gtk.org/gdk4/const.KEY_kana_N.html)
pub const KEY_kana_N = 1245;
/// const [KEY_kana_NA](https://docs.gtk.org/gdk4/const.KEY_kana_NA.html)
pub const KEY_kana_NA = 1221;
/// const [KEY_kana_NE](https://docs.gtk.org/gdk4/const.KEY_kana_NE.html)
pub const KEY_kana_NE = 1224;
/// const [KEY_kana_NI](https://docs.gtk.org/gdk4/const.KEY_kana_NI.html)
pub const KEY_kana_NI = 1222;
/// const [KEY_kana_NO](https://docs.gtk.org/gdk4/const.KEY_kana_NO.html)
pub const KEY_kana_NO = 1225;
/// const [KEY_kana_NU](https://docs.gtk.org/gdk4/const.KEY_kana_NU.html)
pub const KEY_kana_NU = 1223;
/// const [KEY_kana_O](https://docs.gtk.org/gdk4/const.KEY_kana_O.html)
pub const KEY_kana_O = 1205;
/// const [KEY_kana_RA](https://docs.gtk.org/gdk4/const.KEY_kana_RA.html)
pub const KEY_kana_RA = 1239;
/// const [KEY_kana_RE](https://docs.gtk.org/gdk4/const.KEY_kana_RE.html)
pub const KEY_kana_RE = 1242;
/// const [KEY_kana_RI](https://docs.gtk.org/gdk4/const.KEY_kana_RI.html)
pub const KEY_kana_RI = 1240;
/// const [KEY_kana_RO](https://docs.gtk.org/gdk4/const.KEY_kana_RO.html)
pub const KEY_kana_RO = 1243;
/// const [KEY_kana_RU](https://docs.gtk.org/gdk4/const.KEY_kana_RU.html)
pub const KEY_kana_RU = 1241;
/// const [KEY_kana_SA](https://docs.gtk.org/gdk4/const.KEY_kana_SA.html)
pub const KEY_kana_SA = 1211;
/// const [KEY_kana_SE](https://docs.gtk.org/gdk4/const.KEY_kana_SE.html)
pub const KEY_kana_SE = 1214;
/// const [KEY_kana_SHI](https://docs.gtk.org/gdk4/const.KEY_kana_SHI.html)
pub const KEY_kana_SHI = 1212;
/// const [KEY_kana_SO](https://docs.gtk.org/gdk4/const.KEY_kana_SO.html)
pub const KEY_kana_SO = 1215;
/// const [KEY_kana_SU](https://docs.gtk.org/gdk4/const.KEY_kana_SU.html)
pub const KEY_kana_SU = 1213;
/// const [KEY_kana_TA](https://docs.gtk.org/gdk4/const.KEY_kana_TA.html)
pub const KEY_kana_TA = 1216;
/// const [KEY_kana_TE](https://docs.gtk.org/gdk4/const.KEY_kana_TE.html)
pub const KEY_kana_TE = 1219;
/// const [KEY_kana_TI](https://docs.gtk.org/gdk4/const.KEY_kana_TI.html)
pub const KEY_kana_TI = 1217;
/// const [KEY_kana_TO](https://docs.gtk.org/gdk4/const.KEY_kana_TO.html)
pub const KEY_kana_TO = 1220;
/// const [KEY_kana_TSU](https://docs.gtk.org/gdk4/const.KEY_kana_TSU.html)
pub const KEY_kana_TSU = 1218;
/// const [KEY_kana_TU](https://docs.gtk.org/gdk4/const.KEY_kana_TU.html)
pub const KEY_kana_TU = 1218;
/// const [KEY_kana_U](https://docs.gtk.org/gdk4/const.KEY_kana_U.html)
pub const KEY_kana_U = 1203;
/// const [KEY_kana_WA](https://docs.gtk.org/gdk4/const.KEY_kana_WA.html)
pub const KEY_kana_WA = 1244;
/// const [KEY_kana_WO](https://docs.gtk.org/gdk4/const.KEY_kana_WO.html)
pub const KEY_kana_WO = 1190;
/// const [KEY_kana_YA](https://docs.gtk.org/gdk4/const.KEY_kana_YA.html)
pub const KEY_kana_YA = 1236;
/// const [KEY_kana_YO](https://docs.gtk.org/gdk4/const.KEY_kana_YO.html)
pub const KEY_kana_YO = 1238;
/// const [KEY_kana_YU](https://docs.gtk.org/gdk4/const.KEY_kana_YU.html)
pub const KEY_kana_YU = 1237;
/// const [KEY_kana_a](https://docs.gtk.org/gdk4/const.KEY_kana_a.html)
pub const KEY_kana_a = 1191;
/// const [KEY_kana_closingbracket](https://docs.gtk.org/gdk4/const.KEY_kana_closingbracket.html)
pub const KEY_kana_closingbracket = 1187;
/// const [KEY_kana_comma](https://docs.gtk.org/gdk4/const.KEY_kana_comma.html)
pub const KEY_kana_comma = 1188;
/// const [KEY_kana_conjunctive](https://docs.gtk.org/gdk4/const.KEY_kana_conjunctive.html)
pub const KEY_kana_conjunctive = 1189;
/// const [KEY_kana_e](https://docs.gtk.org/gdk4/const.KEY_kana_e.html)
pub const KEY_kana_e = 1194;
/// const [KEY_kana_fullstop](https://docs.gtk.org/gdk4/const.KEY_kana_fullstop.html)
pub const KEY_kana_fullstop = 1185;
/// const [KEY_kana_i](https://docs.gtk.org/gdk4/const.KEY_kana_i.html)
pub const KEY_kana_i = 1192;
/// const [KEY_kana_middledot](https://docs.gtk.org/gdk4/const.KEY_kana_middledot.html)
pub const KEY_kana_middledot = 1189;
/// const [KEY_kana_o](https://docs.gtk.org/gdk4/const.KEY_kana_o.html)
pub const KEY_kana_o = 1195;
/// const [KEY_kana_openingbracket](https://docs.gtk.org/gdk4/const.KEY_kana_openingbracket.html)
pub const KEY_kana_openingbracket = 1186;
/// const [KEY_kana_switch](https://docs.gtk.org/gdk4/const.KEY_kana_switch.html)
pub const KEY_kana_switch = 65406;
/// const [KEY_kana_tsu](https://docs.gtk.org/gdk4/const.KEY_kana_tsu.html)
pub const KEY_kana_tsu = 1199;
/// const [KEY_kana_tu](https://docs.gtk.org/gdk4/const.KEY_kana_tu.html)
pub const KEY_kana_tu = 1199;
/// const [KEY_kana_u](https://docs.gtk.org/gdk4/const.KEY_kana_u.html)
pub const KEY_kana_u = 1193;
/// const [KEY_kana_ya](https://docs.gtk.org/gdk4/const.KEY_kana_ya.html)
pub const KEY_kana_ya = 1196;
/// const [KEY_kana_yo](https://docs.gtk.org/gdk4/const.KEY_kana_yo.html)
pub const KEY_kana_yo = 1198;
/// const [KEY_kana_yu](https://docs.gtk.org/gdk4/const.KEY_kana_yu.html)
pub const KEY_kana_yu = 1197;
/// const [KEY_kappa](https://docs.gtk.org/gdk4/const.KEY_kappa.html)
pub const KEY_kappa = 930;
/// const [KEY_kcedilla](https://docs.gtk.org/gdk4/const.KEY_kcedilla.html)
pub const KEY_kcedilla = 1011;
/// const [KEY_kra](https://docs.gtk.org/gdk4/const.KEY_kra.html)
pub const KEY_kra = 930;
/// const [KEY_l](https://docs.gtk.org/gdk4/const.KEY_l.html)
pub const KEY_l = 108;
/// const [KEY_lacute](https://docs.gtk.org/gdk4/const.KEY_lacute.html)
pub const KEY_lacute = 485;
/// const [KEY_latincross](https://docs.gtk.org/gdk4/const.KEY_latincross.html)
pub const KEY_latincross = 2777;
/// const [KEY_lbelowdot](https://docs.gtk.org/gdk4/const.KEY_lbelowdot.html)
pub const KEY_lbelowdot = 16784951;
/// const [KEY_lcaron](https://docs.gtk.org/gdk4/const.KEY_lcaron.html)
pub const KEY_lcaron = 437;
/// const [KEY_lcedilla](https://docs.gtk.org/gdk4/const.KEY_lcedilla.html)
pub const KEY_lcedilla = 950;
/// const [KEY_leftanglebracket](https://docs.gtk.org/gdk4/const.KEY_leftanglebracket.html)
pub const KEY_leftanglebracket = 2748;
/// const [KEY_leftarrow](https://docs.gtk.org/gdk4/const.KEY_leftarrow.html)
pub const KEY_leftarrow = 2299;
/// const [KEY_leftcaret](https://docs.gtk.org/gdk4/const.KEY_leftcaret.html)
pub const KEY_leftcaret = 2979;
/// const [KEY_leftdoublequotemark](https://docs.gtk.org/gdk4/const.KEY_leftdoublequotemark.html)
pub const KEY_leftdoublequotemark = 2770;
/// const [KEY_leftmiddlecurlybrace](https://docs.gtk.org/gdk4/const.KEY_leftmiddlecurlybrace.html)
pub const KEY_leftmiddlecurlybrace = 2223;
/// const [KEY_leftopentriangle](https://docs.gtk.org/gdk4/const.KEY_leftopentriangle.html)
pub const KEY_leftopentriangle = 2764;
/// const [KEY_leftpointer](https://docs.gtk.org/gdk4/const.KEY_leftpointer.html)
pub const KEY_leftpointer = 2794;
/// const [KEY_leftradical](https://docs.gtk.org/gdk4/const.KEY_leftradical.html)
pub const KEY_leftradical = 2209;
/// const [KEY_leftshoe](https://docs.gtk.org/gdk4/const.KEY_leftshoe.html)
pub const KEY_leftshoe = 3034;
/// const [KEY_leftsinglequotemark](https://docs.gtk.org/gdk4/const.KEY_leftsinglequotemark.html)
pub const KEY_leftsinglequotemark = 2768;
/// const [KEY_leftt](https://docs.gtk.org/gdk4/const.KEY_leftt.html)
pub const KEY_leftt = 2548;
/// const [KEY_lefttack](https://docs.gtk.org/gdk4/const.KEY_lefttack.html)
pub const KEY_lefttack = 3036;
/// const [KEY_less](https://docs.gtk.org/gdk4/const.KEY_less.html)
pub const KEY_less = 60;
/// const [KEY_lessthanequal](https://docs.gtk.org/gdk4/const.KEY_lessthanequal.html)
pub const KEY_lessthanequal = 2236;
/// const [KEY_lf](https://docs.gtk.org/gdk4/const.KEY_lf.html)
pub const KEY_lf = 2533;
/// const [KEY_logicaland](https://docs.gtk.org/gdk4/const.KEY_logicaland.html)
pub const KEY_logicaland = 2270;
/// const [KEY_logicalor](https://docs.gtk.org/gdk4/const.KEY_logicalor.html)
pub const KEY_logicalor = 2271;
/// const [KEY_lowleftcorner](https://docs.gtk.org/gdk4/const.KEY_lowleftcorner.html)
pub const KEY_lowleftcorner = 2541;
/// const [KEY_lowrightcorner](https://docs.gtk.org/gdk4/const.KEY_lowrightcorner.html)
pub const KEY_lowrightcorner = 2538;
/// const [KEY_lstroke](https://docs.gtk.org/gdk4/const.KEY_lstroke.html)
pub const KEY_lstroke = 435;
/// const [KEY_m](https://docs.gtk.org/gdk4/const.KEY_m.html)
pub const KEY_m = 109;
/// const [KEY_mabovedot](https://docs.gtk.org/gdk4/const.KEY_mabovedot.html)
pub const KEY_mabovedot = 16784961;
/// const [KEY_macron](https://docs.gtk.org/gdk4/const.KEY_macron.html)
pub const KEY_macron = 175;
/// const [KEY_malesymbol](https://docs.gtk.org/gdk4/const.KEY_malesymbol.html)
pub const KEY_malesymbol = 2807;
/// const [KEY_maltesecross](https://docs.gtk.org/gdk4/const.KEY_maltesecross.html)
pub const KEY_maltesecross = 2800;
/// const [KEY_marker](https://docs.gtk.org/gdk4/const.KEY_marker.html)
pub const KEY_marker = 2751;
/// const [KEY_masculine](https://docs.gtk.org/gdk4/const.KEY_masculine.html)
pub const KEY_masculine = 186;
/// const [KEY_minus](https://docs.gtk.org/gdk4/const.KEY_minus.html)
pub const KEY_minus = 45;
/// const [KEY_minutes](https://docs.gtk.org/gdk4/const.KEY_minutes.html)
pub const KEY_minutes = 2774;
/// const [KEY_mu](https://docs.gtk.org/gdk4/const.KEY_mu.html)
pub const KEY_mu = 181;
/// const [KEY_multiply](https://docs.gtk.org/gdk4/const.KEY_multiply.html)
pub const KEY_multiply = 215;
/// const [KEY_musicalflat](https://docs.gtk.org/gdk4/const.KEY_musicalflat.html)
pub const KEY_musicalflat = 2806;
/// const [KEY_musicalsharp](https://docs.gtk.org/gdk4/const.KEY_musicalsharp.html)
pub const KEY_musicalsharp = 2805;
/// const [KEY_n](https://docs.gtk.org/gdk4/const.KEY_n.html)
pub const KEY_n = 110;
/// const [KEY_nabla](https://docs.gtk.org/gdk4/const.KEY_nabla.html)
pub const KEY_nabla = 2245;
/// const [KEY_nacute](https://docs.gtk.org/gdk4/const.KEY_nacute.html)
pub const KEY_nacute = 497;
/// const [KEY_ncaron](https://docs.gtk.org/gdk4/const.KEY_ncaron.html)
pub const KEY_ncaron = 498;
/// const [KEY_ncedilla](https://docs.gtk.org/gdk4/const.KEY_ncedilla.html)
pub const KEY_ncedilla = 1009;
/// const [KEY_ninesubscript](https://docs.gtk.org/gdk4/const.KEY_ninesubscript.html)
pub const KEY_ninesubscript = 16785545;
/// const [KEY_ninesuperior](https://docs.gtk.org/gdk4/const.KEY_ninesuperior.html)
pub const KEY_ninesuperior = 16785529;
/// const [KEY_nl](https://docs.gtk.org/gdk4/const.KEY_nl.html)
pub const KEY_nl = 2536;
/// const [KEY_nobreakspace](https://docs.gtk.org/gdk4/const.KEY_nobreakspace.html)
pub const KEY_nobreakspace = 160;
/// const [KEY_notapproxeq](https://docs.gtk.org/gdk4/const.KEY_notapproxeq.html)
pub const KEY_notapproxeq = 16785991;
/// const [KEY_notelementof](https://docs.gtk.org/gdk4/const.KEY_notelementof.html)
pub const KEY_notelementof = 16785929;
/// const [KEY_notequal](https://docs.gtk.org/gdk4/const.KEY_notequal.html)
pub const KEY_notequal = 2237;
/// const [KEY_notidentical](https://docs.gtk.org/gdk4/const.KEY_notidentical.html)
pub const KEY_notidentical = 16786018;
/// const [KEY_notsign](https://docs.gtk.org/gdk4/const.KEY_notsign.html)
pub const KEY_notsign = 172;
/// const [KEY_ntilde](https://docs.gtk.org/gdk4/const.KEY_ntilde.html)
pub const KEY_ntilde = 241;
/// const [KEY_numbersign](https://docs.gtk.org/gdk4/const.KEY_numbersign.html)
pub const KEY_numbersign = 35;
/// const [KEY_numerosign](https://docs.gtk.org/gdk4/const.KEY_numerosign.html)
pub const KEY_numerosign = 1712;
/// const [KEY_o](https://docs.gtk.org/gdk4/const.KEY_o.html)
pub const KEY_o = 111;
/// const [KEY_oacute](https://docs.gtk.org/gdk4/const.KEY_oacute.html)
pub const KEY_oacute = 243;
/// const [KEY_obarred](https://docs.gtk.org/gdk4/const.KEY_obarred.html)
pub const KEY_obarred = 16777845;
/// const [KEY_obelowdot](https://docs.gtk.org/gdk4/const.KEY_obelowdot.html)
pub const KEY_obelowdot = 16785101;
/// const [KEY_ocaron](https://docs.gtk.org/gdk4/const.KEY_ocaron.html)
pub const KEY_ocaron = 16777682;
/// const [KEY_ocircumflex](https://docs.gtk.org/gdk4/const.KEY_ocircumflex.html)
pub const KEY_ocircumflex = 244;
/// const [KEY_ocircumflexacute](https://docs.gtk.org/gdk4/const.KEY_ocircumflexacute.html)
pub const KEY_ocircumflexacute = 16785105;
/// const [KEY_ocircumflexbelowdot](https://docs.gtk.org/gdk4/const.KEY_ocircumflexbelowdot.html)
pub const KEY_ocircumflexbelowdot = 16785113;
/// const [KEY_ocircumflexgrave](https://docs.gtk.org/gdk4/const.KEY_ocircumflexgrave.html)
pub const KEY_ocircumflexgrave = 16785107;
/// const [KEY_ocircumflexhook](https://docs.gtk.org/gdk4/const.KEY_ocircumflexhook.html)
pub const KEY_ocircumflexhook = 16785109;
/// const [KEY_ocircumflextilde](https://docs.gtk.org/gdk4/const.KEY_ocircumflextilde.html)
pub const KEY_ocircumflextilde = 16785111;
/// const [KEY_odiaeresis](https://docs.gtk.org/gdk4/const.KEY_odiaeresis.html)
pub const KEY_odiaeresis = 246;
/// const [KEY_odoubleacute](https://docs.gtk.org/gdk4/const.KEY_odoubleacute.html)
pub const KEY_odoubleacute = 501;
/// const [KEY_oe](https://docs.gtk.org/gdk4/const.KEY_oe.html)
pub const KEY_oe = 5053;
/// const [KEY_ogonek](https://docs.gtk.org/gdk4/const.KEY_ogonek.html)
pub const KEY_ogonek = 434;
/// const [KEY_ograve](https://docs.gtk.org/gdk4/const.KEY_ograve.html)
pub const KEY_ograve = 242;
/// const [KEY_ohook](https://docs.gtk.org/gdk4/const.KEY_ohook.html)
pub const KEY_ohook = 16785103;
/// const [KEY_ohorn](https://docs.gtk.org/gdk4/const.KEY_ohorn.html)
pub const KEY_ohorn = 16777633;
/// const [KEY_ohornacute](https://docs.gtk.org/gdk4/const.KEY_ohornacute.html)
pub const KEY_ohornacute = 16785115;
/// const [KEY_ohornbelowdot](https://docs.gtk.org/gdk4/const.KEY_ohornbelowdot.html)
pub const KEY_ohornbelowdot = 16785123;
/// const [KEY_ohorngrave](https://docs.gtk.org/gdk4/const.KEY_ohorngrave.html)
pub const KEY_ohorngrave = 16785117;
/// const [KEY_ohornhook](https://docs.gtk.org/gdk4/const.KEY_ohornhook.html)
pub const KEY_ohornhook = 16785119;
/// const [KEY_ohorntilde](https://docs.gtk.org/gdk4/const.KEY_ohorntilde.html)
pub const KEY_ohorntilde = 16785121;
/// const [KEY_omacron](https://docs.gtk.org/gdk4/const.KEY_omacron.html)
pub const KEY_omacron = 1010;
/// const [KEY_oneeighth](https://docs.gtk.org/gdk4/const.KEY_oneeighth.html)
pub const KEY_oneeighth = 2755;
/// const [KEY_onefifth](https://docs.gtk.org/gdk4/const.KEY_onefifth.html)
pub const KEY_onefifth = 2738;
/// const [KEY_onehalf](https://docs.gtk.org/gdk4/const.KEY_onehalf.html)
pub const KEY_onehalf = 189;
/// const [KEY_onequarter](https://docs.gtk.org/gdk4/const.KEY_onequarter.html)
pub const KEY_onequarter = 188;
/// const [KEY_onesixth](https://docs.gtk.org/gdk4/const.KEY_onesixth.html)
pub const KEY_onesixth = 2742;
/// const [KEY_onesubscript](https://docs.gtk.org/gdk4/const.KEY_onesubscript.html)
pub const KEY_onesubscript = 16785537;
/// const [KEY_onesuperior](https://docs.gtk.org/gdk4/const.KEY_onesuperior.html)
pub const KEY_onesuperior = 185;
/// const [KEY_onethird](https://docs.gtk.org/gdk4/const.KEY_onethird.html)
pub const KEY_onethird = 2736;
/// const [KEY_ooblique](https://docs.gtk.org/gdk4/const.KEY_ooblique.html)
pub const KEY_ooblique = 248;
/// const [KEY_openrectbullet](https://docs.gtk.org/gdk4/const.KEY_openrectbullet.html)
pub const KEY_openrectbullet = 2786;
/// const [KEY_openstar](https://docs.gtk.org/gdk4/const.KEY_openstar.html)
pub const KEY_openstar = 2789;
/// const [KEY_opentribulletdown](https://docs.gtk.org/gdk4/const.KEY_opentribulletdown.html)
pub const KEY_opentribulletdown = 2788;
/// const [KEY_opentribulletup](https://docs.gtk.org/gdk4/const.KEY_opentribulletup.html)
pub const KEY_opentribulletup = 2787;
/// const [KEY_ordfeminine](https://docs.gtk.org/gdk4/const.KEY_ordfeminine.html)
pub const KEY_ordfeminine = 170;
/// const [KEY_oslash](https://docs.gtk.org/gdk4/const.KEY_oslash.html)
pub const KEY_oslash = 248;
/// const [KEY_otilde](https://docs.gtk.org/gdk4/const.KEY_otilde.html)
pub const KEY_otilde = 245;
/// const [KEY_overbar](https://docs.gtk.org/gdk4/const.KEY_overbar.html)
pub const KEY_overbar = 3008;
/// const [KEY_overline](https://docs.gtk.org/gdk4/const.KEY_overline.html)
pub const KEY_overline = 1150;
/// const [KEY_p](https://docs.gtk.org/gdk4/const.KEY_p.html)
pub const KEY_p = 112;
/// const [KEY_pabovedot](https://docs.gtk.org/gdk4/const.KEY_pabovedot.html)
pub const KEY_pabovedot = 16784983;
/// const [KEY_paragraph](https://docs.gtk.org/gdk4/const.KEY_paragraph.html)
pub const KEY_paragraph = 182;
/// const [KEY_parenleft](https://docs.gtk.org/gdk4/const.KEY_parenleft.html)
pub const KEY_parenleft = 40;
/// const [KEY_parenright](https://docs.gtk.org/gdk4/const.KEY_parenright.html)
pub const KEY_parenright = 41;
/// const [KEY_partdifferential](https://docs.gtk.org/gdk4/const.KEY_partdifferential.html)
pub const KEY_partdifferential = 16785922;
/// const [KEY_partialderivative](https://docs.gtk.org/gdk4/const.KEY_partialderivative.html)
pub const KEY_partialderivative = 2287;
/// const [KEY_percent](https://docs.gtk.org/gdk4/const.KEY_percent.html)
pub const KEY_percent = 37;
/// const [KEY_period](https://docs.gtk.org/gdk4/const.KEY_period.html)
pub const KEY_period = 46;
/// const [KEY_periodcentered](https://docs.gtk.org/gdk4/const.KEY_periodcentered.html)
pub const KEY_periodcentered = 183;
/// const [KEY_permille](https://docs.gtk.org/gdk4/const.KEY_permille.html)
pub const KEY_permille = 2773;
/// const [KEY_phonographcopyright](https://docs.gtk.org/gdk4/const.KEY_phonographcopyright.html)
pub const KEY_phonographcopyright = 2811;
/// const [KEY_plus](https://docs.gtk.org/gdk4/const.KEY_plus.html)
pub const KEY_plus = 43;
/// const [KEY_plusminus](https://docs.gtk.org/gdk4/const.KEY_plusminus.html)
pub const KEY_plusminus = 177;
/// const [KEY_prescription](https://docs.gtk.org/gdk4/const.KEY_prescription.html)
pub const KEY_prescription = 2772;
/// const [KEY_prolongedsound](https://docs.gtk.org/gdk4/const.KEY_prolongedsound.html)
pub const KEY_prolongedsound = 1200;
/// const [KEY_punctspace](https://docs.gtk.org/gdk4/const.KEY_punctspace.html)
pub const KEY_punctspace = 2726;
/// const [KEY_q](https://docs.gtk.org/gdk4/const.KEY_q.html)
pub const KEY_q = 113;
/// const [KEY_quad](https://docs.gtk.org/gdk4/const.KEY_quad.html)
pub const KEY_quad = 3020;
/// const [KEY_question](https://docs.gtk.org/gdk4/const.KEY_question.html)
pub const KEY_question = 63;
/// const [KEY_questiondown](https://docs.gtk.org/gdk4/const.KEY_questiondown.html)
pub const KEY_questiondown = 191;
/// const [KEY_quotedbl](https://docs.gtk.org/gdk4/const.KEY_quotedbl.html)
pub const KEY_quotedbl = 34;
/// const [KEY_quoteleft](https://docs.gtk.org/gdk4/const.KEY_quoteleft.html)
pub const KEY_quoteleft = 96;
/// const [KEY_quoteright](https://docs.gtk.org/gdk4/const.KEY_quoteright.html)
pub const KEY_quoteright = 39;
/// const [KEY_r](https://docs.gtk.org/gdk4/const.KEY_r.html)
pub const KEY_r = 114;
/// const [KEY_racute](https://docs.gtk.org/gdk4/const.KEY_racute.html)
pub const KEY_racute = 480;
/// const [KEY_radical](https://docs.gtk.org/gdk4/const.KEY_radical.html)
pub const KEY_radical = 2262;
/// const [KEY_rcaron](https://docs.gtk.org/gdk4/const.KEY_rcaron.html)
pub const KEY_rcaron = 504;
/// const [KEY_rcedilla](https://docs.gtk.org/gdk4/const.KEY_rcedilla.html)
pub const KEY_rcedilla = 947;
/// const [KEY_registered](https://docs.gtk.org/gdk4/const.KEY_registered.html)
pub const KEY_registered = 174;
/// const [KEY_rightanglebracket](https://docs.gtk.org/gdk4/const.KEY_rightanglebracket.html)
pub const KEY_rightanglebracket = 2750;
/// const [KEY_rightarrow](https://docs.gtk.org/gdk4/const.KEY_rightarrow.html)
pub const KEY_rightarrow = 2301;
/// const [KEY_rightcaret](https://docs.gtk.org/gdk4/const.KEY_rightcaret.html)
pub const KEY_rightcaret = 2982;
/// const [KEY_rightdoublequotemark](https://docs.gtk.org/gdk4/const.KEY_rightdoublequotemark.html)
pub const KEY_rightdoublequotemark = 2771;
/// const [KEY_rightmiddlecurlybrace](https://docs.gtk.org/gdk4/const.KEY_rightmiddlecurlybrace.html)
pub const KEY_rightmiddlecurlybrace = 2224;
/// const [KEY_rightmiddlesummation](https://docs.gtk.org/gdk4/const.KEY_rightmiddlesummation.html)
pub const KEY_rightmiddlesummation = 2231;
/// const [KEY_rightopentriangle](https://docs.gtk.org/gdk4/const.KEY_rightopentriangle.html)
pub const KEY_rightopentriangle = 2765;
/// const [KEY_rightpointer](https://docs.gtk.org/gdk4/const.KEY_rightpointer.html)
pub const KEY_rightpointer = 2795;
/// const [KEY_rightshoe](https://docs.gtk.org/gdk4/const.KEY_rightshoe.html)
pub const KEY_rightshoe = 3032;
/// const [KEY_rightsinglequotemark](https://docs.gtk.org/gdk4/const.KEY_rightsinglequotemark.html)
pub const KEY_rightsinglequotemark = 2769;
/// const [KEY_rightt](https://docs.gtk.org/gdk4/const.KEY_rightt.html)
pub const KEY_rightt = 2549;
/// const [KEY_righttack](https://docs.gtk.org/gdk4/const.KEY_righttack.html)
pub const KEY_righttack = 3068;
/// const [KEY_s](https://docs.gtk.org/gdk4/const.KEY_s.html)
pub const KEY_s = 115;
/// const [KEY_sabovedot](https://docs.gtk.org/gdk4/const.KEY_sabovedot.html)
pub const KEY_sabovedot = 16784993;
/// const [KEY_sacute](https://docs.gtk.org/gdk4/const.KEY_sacute.html)
pub const KEY_sacute = 438;
/// const [KEY_scaron](https://docs.gtk.org/gdk4/const.KEY_scaron.html)
pub const KEY_scaron = 441;
/// const [KEY_scedilla](https://docs.gtk.org/gdk4/const.KEY_scedilla.html)
pub const KEY_scedilla = 442;
/// const [KEY_schwa](https://docs.gtk.org/gdk4/const.KEY_schwa.html)
pub const KEY_schwa = 16777817;
/// const [KEY_scircumflex](https://docs.gtk.org/gdk4/const.KEY_scircumflex.html)
pub const KEY_scircumflex = 766;
/// const [KEY_script_switch](https://docs.gtk.org/gdk4/const.KEY_script_switch.html)
pub const KEY_script_switch = 65406;
/// const [KEY_seconds](https://docs.gtk.org/gdk4/const.KEY_seconds.html)
pub const KEY_seconds = 2775;
/// const [KEY_section](https://docs.gtk.org/gdk4/const.KEY_section.html)
pub const KEY_section = 167;
/// const [KEY_semicolon](https://docs.gtk.org/gdk4/const.KEY_semicolon.html)
pub const KEY_semicolon = 59;
/// const [KEY_semivoicedsound](https://docs.gtk.org/gdk4/const.KEY_semivoicedsound.html)
pub const KEY_semivoicedsound = 1247;
/// const [KEY_seveneighths](https://docs.gtk.org/gdk4/const.KEY_seveneighths.html)
pub const KEY_seveneighths = 2758;
/// const [KEY_sevensubscript](https://docs.gtk.org/gdk4/const.KEY_sevensubscript.html)
pub const KEY_sevensubscript = 16785543;
/// const [KEY_sevensuperior](https://docs.gtk.org/gdk4/const.KEY_sevensuperior.html)
pub const KEY_sevensuperior = 16785527;
/// const [KEY_signaturemark](https://docs.gtk.org/gdk4/const.KEY_signaturemark.html)
pub const KEY_signaturemark = 2762;
/// const [KEY_signifblank](https://docs.gtk.org/gdk4/const.KEY_signifblank.html)
pub const KEY_signifblank = 2732;
/// const [KEY_similarequal](https://docs.gtk.org/gdk4/const.KEY_similarequal.html)
pub const KEY_similarequal = 2249;
/// const [KEY_singlelowquotemark](https://docs.gtk.org/gdk4/const.KEY_singlelowquotemark.html)
pub const KEY_singlelowquotemark = 2813;
/// const [KEY_sixsubscript](https://docs.gtk.org/gdk4/const.KEY_sixsubscript.html)
pub const KEY_sixsubscript = 16785542;
/// const [KEY_sixsuperior](https://docs.gtk.org/gdk4/const.KEY_sixsuperior.html)
pub const KEY_sixsuperior = 16785526;
/// const [KEY_slash](https://docs.gtk.org/gdk4/const.KEY_slash.html)
pub const KEY_slash = 47;
/// const [KEY_soliddiamond](https://docs.gtk.org/gdk4/const.KEY_soliddiamond.html)
pub const KEY_soliddiamond = 2528;
/// const [KEY_space](https://docs.gtk.org/gdk4/const.KEY_space.html)
pub const KEY_space = 32;
/// const [KEY_squareroot](https://docs.gtk.org/gdk4/const.KEY_squareroot.html)
pub const KEY_squareroot = 16785946;
/// const [KEY_ssharp](https://docs.gtk.org/gdk4/const.KEY_ssharp.html)
pub const KEY_ssharp = 223;
/// const [KEY_sterling](https://docs.gtk.org/gdk4/const.KEY_sterling.html)
pub const KEY_sterling = 163;
/// const [KEY_stricteq](https://docs.gtk.org/gdk4/const.KEY_stricteq.html)
pub const KEY_stricteq = 16786019;
/// const [KEY_t](https://docs.gtk.org/gdk4/const.KEY_t.html)
pub const KEY_t = 116;
/// const [KEY_tabovedot](https://docs.gtk.org/gdk4/const.KEY_tabovedot.html)
pub const KEY_tabovedot = 16785003;
/// const [KEY_tcaron](https://docs.gtk.org/gdk4/const.KEY_tcaron.html)
pub const KEY_tcaron = 443;
/// const [KEY_tcedilla](https://docs.gtk.org/gdk4/const.KEY_tcedilla.html)
pub const KEY_tcedilla = 510;
/// const [KEY_telephone](https://docs.gtk.org/gdk4/const.KEY_telephone.html)
pub const KEY_telephone = 2809;
/// const [KEY_telephonerecorder](https://docs.gtk.org/gdk4/const.KEY_telephonerecorder.html)
pub const KEY_telephonerecorder = 2810;
/// const [KEY_therefore](https://docs.gtk.org/gdk4/const.KEY_therefore.html)
pub const KEY_therefore = 2240;
/// const [KEY_thinspace](https://docs.gtk.org/gdk4/const.KEY_thinspace.html)
pub const KEY_thinspace = 2727;
/// const [KEY_thorn](https://docs.gtk.org/gdk4/const.KEY_thorn.html)
pub const KEY_thorn = 254;
/// const [KEY_threeeighths](https://docs.gtk.org/gdk4/const.KEY_threeeighths.html)
pub const KEY_threeeighths = 2756;
/// const [KEY_threefifths](https://docs.gtk.org/gdk4/const.KEY_threefifths.html)
pub const KEY_threefifths = 2740;
/// const [KEY_threequarters](https://docs.gtk.org/gdk4/const.KEY_threequarters.html)
pub const KEY_threequarters = 190;
/// const [KEY_threesubscript](https://docs.gtk.org/gdk4/const.KEY_threesubscript.html)
pub const KEY_threesubscript = 16785539;
/// const [KEY_threesuperior](https://docs.gtk.org/gdk4/const.KEY_threesuperior.html)
pub const KEY_threesuperior = 179;
/// const [KEY_tintegral](https://docs.gtk.org/gdk4/const.KEY_tintegral.html)
pub const KEY_tintegral = 16785965;
/// const [KEY_topintegral](https://docs.gtk.org/gdk4/const.KEY_topintegral.html)
pub const KEY_topintegral = 2212;
/// const [KEY_topleftparens](https://docs.gtk.org/gdk4/const.KEY_topleftparens.html)
pub const KEY_topleftparens = 2219;
/// const [KEY_topleftradical](https://docs.gtk.org/gdk4/const.KEY_topleftradical.html)
pub const KEY_topleftradical = 2210;
/// const [KEY_topleftsqbracket](https://docs.gtk.org/gdk4/const.KEY_topleftsqbracket.html)
pub const KEY_topleftsqbracket = 2215;
/// const [KEY_topleftsummation](https://docs.gtk.org/gdk4/const.KEY_topleftsummation.html)
pub const KEY_topleftsummation = 2225;
/// const [KEY_toprightparens](https://docs.gtk.org/gdk4/const.KEY_toprightparens.html)
pub const KEY_toprightparens = 2221;
/// const [KEY_toprightsqbracket](https://docs.gtk.org/gdk4/const.KEY_toprightsqbracket.html)
pub const KEY_toprightsqbracket = 2217;
/// const [KEY_toprightsummation](https://docs.gtk.org/gdk4/const.KEY_toprightsummation.html)
pub const KEY_toprightsummation = 2229;
/// const [KEY_topt](https://docs.gtk.org/gdk4/const.KEY_topt.html)
pub const KEY_topt = 2551;
/// const [KEY_topvertsummationconnector](https://docs.gtk.org/gdk4/const.KEY_topvertsummationconnector.html)
pub const KEY_topvertsummationconnector = 2227;
/// const [KEY_trademark](https://docs.gtk.org/gdk4/const.KEY_trademark.html)
pub const KEY_trademark = 2761;
/// const [KEY_trademarkincircle](https://docs.gtk.org/gdk4/const.KEY_trademarkincircle.html)
pub const KEY_trademarkincircle = 2763;
/// const [KEY_tslash](https://docs.gtk.org/gdk4/const.KEY_tslash.html)
pub const KEY_tslash = 956;
/// const [KEY_twofifths](https://docs.gtk.org/gdk4/const.KEY_twofifths.html)
pub const KEY_twofifths = 2739;
/// const [KEY_twosubscript](https://docs.gtk.org/gdk4/const.KEY_twosubscript.html)
pub const KEY_twosubscript = 16785538;
/// const [KEY_twosuperior](https://docs.gtk.org/gdk4/const.KEY_twosuperior.html)
pub const KEY_twosuperior = 178;
/// const [KEY_twothirds](https://docs.gtk.org/gdk4/const.KEY_twothirds.html)
pub const KEY_twothirds = 2737;
/// const [KEY_u](https://docs.gtk.org/gdk4/const.KEY_u.html)
pub const KEY_u = 117;
/// const [KEY_uacute](https://docs.gtk.org/gdk4/const.KEY_uacute.html)
pub const KEY_uacute = 250;
/// const [KEY_ubelowdot](https://docs.gtk.org/gdk4/const.KEY_ubelowdot.html)
pub const KEY_ubelowdot = 16785125;
/// const [KEY_ubreve](https://docs.gtk.org/gdk4/const.KEY_ubreve.html)
pub const KEY_ubreve = 765;
/// const [KEY_ucircumflex](https://docs.gtk.org/gdk4/const.KEY_ucircumflex.html)
pub const KEY_ucircumflex = 251;
/// const [KEY_udiaeresis](https://docs.gtk.org/gdk4/const.KEY_udiaeresis.html)
pub const KEY_udiaeresis = 252;
/// const [KEY_udoubleacute](https://docs.gtk.org/gdk4/const.KEY_udoubleacute.html)
pub const KEY_udoubleacute = 507;
/// const [KEY_ugrave](https://docs.gtk.org/gdk4/const.KEY_ugrave.html)
pub const KEY_ugrave = 249;
/// const [KEY_uhook](https://docs.gtk.org/gdk4/const.KEY_uhook.html)
pub const KEY_uhook = 16785127;
/// const [KEY_uhorn](https://docs.gtk.org/gdk4/const.KEY_uhorn.html)
pub const KEY_uhorn = 16777648;
/// const [KEY_uhornacute](https://docs.gtk.org/gdk4/const.KEY_uhornacute.html)
pub const KEY_uhornacute = 16785129;
/// const [KEY_uhornbelowdot](https://docs.gtk.org/gdk4/const.KEY_uhornbelowdot.html)
pub const KEY_uhornbelowdot = 16785137;
/// const [KEY_uhorngrave](https://docs.gtk.org/gdk4/const.KEY_uhorngrave.html)
pub const KEY_uhorngrave = 16785131;
/// const [KEY_uhornhook](https://docs.gtk.org/gdk4/const.KEY_uhornhook.html)
pub const KEY_uhornhook = 16785133;
/// const [KEY_uhorntilde](https://docs.gtk.org/gdk4/const.KEY_uhorntilde.html)
pub const KEY_uhorntilde = 16785135;
/// const [KEY_umacron](https://docs.gtk.org/gdk4/const.KEY_umacron.html)
pub const KEY_umacron = 1022;
/// const [KEY_underbar](https://docs.gtk.org/gdk4/const.KEY_underbar.html)
pub const KEY_underbar = 3014;
/// const [KEY_underscore](https://docs.gtk.org/gdk4/const.KEY_underscore.html)
pub const KEY_underscore = 95;
/// const [KEY_union](https://docs.gtk.org/gdk4/const.KEY_union.html)
pub const KEY_union = 2269;
/// const [KEY_uogonek](https://docs.gtk.org/gdk4/const.KEY_uogonek.html)
pub const KEY_uogonek = 1017;
/// const [KEY_uparrow](https://docs.gtk.org/gdk4/const.KEY_uparrow.html)
pub const KEY_uparrow = 2300;
/// const [KEY_upcaret](https://docs.gtk.org/gdk4/const.KEY_upcaret.html)
pub const KEY_upcaret = 2985;
/// const [KEY_upleftcorner](https://docs.gtk.org/gdk4/const.KEY_upleftcorner.html)
pub const KEY_upleftcorner = 2540;
/// const [KEY_uprightcorner](https://docs.gtk.org/gdk4/const.KEY_uprightcorner.html)
pub const KEY_uprightcorner = 2539;
/// const [KEY_upshoe](https://docs.gtk.org/gdk4/const.KEY_upshoe.html)
pub const KEY_upshoe = 3011;
/// const [KEY_upstile](https://docs.gtk.org/gdk4/const.KEY_upstile.html)
pub const KEY_upstile = 3027;
/// const [KEY_uptack](https://docs.gtk.org/gdk4/const.KEY_uptack.html)
pub const KEY_uptack = 3022;
/// const [KEY_uring](https://docs.gtk.org/gdk4/const.KEY_uring.html)
pub const KEY_uring = 505;
/// const [KEY_utilde](https://docs.gtk.org/gdk4/const.KEY_utilde.html)
pub const KEY_utilde = 1021;
/// const [KEY_v](https://docs.gtk.org/gdk4/const.KEY_v.html)
pub const KEY_v = 118;
/// const [KEY_variation](https://docs.gtk.org/gdk4/const.KEY_variation.html)
pub const KEY_variation = 2241;
/// const [KEY_vertbar](https://docs.gtk.org/gdk4/const.KEY_vertbar.html)
pub const KEY_vertbar = 2552;
/// const [KEY_vertconnector](https://docs.gtk.org/gdk4/const.KEY_vertconnector.html)
pub const KEY_vertconnector = 2214;
/// const [KEY_voicedsound](https://docs.gtk.org/gdk4/const.KEY_voicedsound.html)
pub const KEY_voicedsound = 1246;
/// const [KEY_vt](https://docs.gtk.org/gdk4/const.KEY_vt.html)
pub const KEY_vt = 2537;
/// const [KEY_w](https://docs.gtk.org/gdk4/const.KEY_w.html)
pub const KEY_w = 119;
/// const [KEY_wacute](https://docs.gtk.org/gdk4/const.KEY_wacute.html)
pub const KEY_wacute = 16785027;
/// const [KEY_wcircumflex](https://docs.gtk.org/gdk4/const.KEY_wcircumflex.html)
pub const KEY_wcircumflex = 16777589;
/// const [KEY_wdiaeresis](https://docs.gtk.org/gdk4/const.KEY_wdiaeresis.html)
pub const KEY_wdiaeresis = 16785029;
/// const [KEY_wgrave](https://docs.gtk.org/gdk4/const.KEY_wgrave.html)
pub const KEY_wgrave = 16785025;
/// const [KEY_x](https://docs.gtk.org/gdk4/const.KEY_x.html)
pub const KEY_x = 120;
/// const [KEY_xabovedot](https://docs.gtk.org/gdk4/const.KEY_xabovedot.html)
pub const KEY_xabovedot = 16785035;
/// const [KEY_y](https://docs.gtk.org/gdk4/const.KEY_y.html)
pub const KEY_y = 121;
/// const [KEY_yacute](https://docs.gtk.org/gdk4/const.KEY_yacute.html)
pub const KEY_yacute = 253;
/// const [KEY_ybelowdot](https://docs.gtk.org/gdk4/const.KEY_ybelowdot.html)
pub const KEY_ybelowdot = 16785141;
/// const [KEY_ycircumflex](https://docs.gtk.org/gdk4/const.KEY_ycircumflex.html)
pub const KEY_ycircumflex = 16777591;
/// const [KEY_ydiaeresis](https://docs.gtk.org/gdk4/const.KEY_ydiaeresis.html)
pub const KEY_ydiaeresis = 255;
/// const [KEY_yen](https://docs.gtk.org/gdk4/const.KEY_yen.html)
pub const KEY_yen = 165;
/// const [KEY_ygrave](https://docs.gtk.org/gdk4/const.KEY_ygrave.html)
pub const KEY_ygrave = 16785139;
/// const [KEY_yhook](https://docs.gtk.org/gdk4/const.KEY_yhook.html)
pub const KEY_yhook = 16785143;
/// const [KEY_ytilde](https://docs.gtk.org/gdk4/const.KEY_ytilde.html)
pub const KEY_ytilde = 16785145;
/// const [KEY_z](https://docs.gtk.org/gdk4/const.KEY_z.html)
pub const KEY_z = 122;
/// const [KEY_zabovedot](https://docs.gtk.org/gdk4/const.KEY_zabovedot.html)
pub const KEY_zabovedot = 447;
/// const [KEY_zacute](https://docs.gtk.org/gdk4/const.KEY_zacute.html)
pub const KEY_zacute = 444;
/// const [KEY_zcaron](https://docs.gtk.org/gdk4/const.KEY_zcaron.html)
pub const KEY_zcaron = 446;
/// const [KEY_zerosubscript](https://docs.gtk.org/gdk4/const.KEY_zerosubscript.html)
pub const KEY_zerosubscript = 16785536;
/// const [KEY_zerosuperior](https://docs.gtk.org/gdk4/const.KEY_zerosuperior.html)
pub const KEY_zerosuperior = 16785520;
/// const [KEY_zstroke](https://docs.gtk.org/gdk4/const.KEY_zstroke.html)
pub const KEY_zstroke = 16777654;
/// Class [KeyEvent](https://docs.gtk.org/gdk4/class.KeyEvent.html)
pub const KeyEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_consumed_modifiers](https://docs.gtk.org/gdk4/method.KeyEvent.get_consumed_modifiers.html)
    pub fn getConsumedModifiers(self: *KeyEvent) gdk.ModifierType {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) gdk.ModifierType, .{ .name = "gdk_key_event_get_consumed_modifiers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_keycode](https://docs.gtk.org/gdk4/method.KeyEvent.get_keycode.html)
    pub fn getKeycode(self: *KeyEvent) u32 {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) u32, .{ .name = "gdk_key_event_get_keycode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_keyval](https://docs.gtk.org/gdk4/method.KeyEvent.get_keyval.html)
    pub fn getKeyval(self: *KeyEvent) u32 {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) u32, .{ .name = "gdk_key_event_get_keyval" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout](https://docs.gtk.org/gdk4/method.KeyEvent.get_layout.html)
    pub fn getLayout(self: *KeyEvent) u32 {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) u32, .{ .name = "gdk_key_event_get_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_level](https://docs.gtk.org/gdk4/method.KeyEvent.get_level.html)
    pub fn getLevel(self: *KeyEvent) u32 {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) u32, .{ .name = "gdk_key_event_get_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_match](https://docs.gtk.org/gdk4/method.KeyEvent.get_match.html)
    pub fn getMatch(self: *KeyEvent) ?struct {
        keyval: u32,
        modifiers: gdk.ModifierType,
    } {
        var keyval_out: u32 = undefined;
        const _keyval = &keyval_out;
        var modifiers_out: gdk.ModifierType = undefined;
        const _modifiers = &modifiers_out;
        const cFn = @extern(*const fn (*KeyEvent, *u32, *gdk.ModifierType) callconv(.c) bool, .{ .name = "gdk_key_event_get_match" });
        const ret = cFn(self, _keyval, _modifiers);
        if (!ret) return null;
        return .{ .keyval = keyval_out, .modifiers = modifiers_out };
    }
    /// method [is_modifier](https://docs.gtk.org/gdk4/method.KeyEvent.is_modifier.html)
    pub fn isModifier(self: *KeyEvent) bool {
        const cFn = @extern(*const fn (*KeyEvent) callconv(.c) bool, .{ .name = "gdk_key_event_is_modifier" });
        const ret = cFn(self);
        return ret;
    }
    /// method [matches](https://docs.gtk.org/gdk4/method.KeyEvent.matches.html)
    pub fn matches(self: *KeyEvent, _keyval: u32, _modifiers: gdk.ModifierType) gdk.KeyMatch {
        const cFn = @extern(*const fn (*KeyEvent, u32, gdk.ModifierType) callconv(.c) gdk.KeyMatch, .{ .name = "gdk_key_event_matches" });
        const ret = cFn(self, _keyval, _modifiers);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_key_event_get_type" });
        return cFn();
    }
};
/// Enum [KeyMatch](https://docs.gtk.org/gdk4/enum.KeyMatch.html)
pub const KeyMatch = enum(u32) {
    none = 0,
    partial = 1,
    exact = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_key_match_get_type" });
        return cFn();
    }
};
/// Struct [KeymapKey](https://docs.gtk.org/gdk4/struct.KeymapKey.html)
pub const KeymapKey = extern struct {
    keycode: u32,
    group: i32,
    level: i32,
};
/// const [MODIFIER_MASK](https://docs.gtk.org/gdk4/const.MODIFIER_MASK.html)
pub const MODIFIER_MASK = 469769999;
/// Enum [MemoryFormat](https://docs.gtk.org/gdk4/enum.MemoryFormat.html)
pub const MemoryFormat = enum(u32) {
    b8g8r8a8_premultiplied = 0,
    a8r8g8b8_premultiplied = 1,
    r8g8b8a8_premultiplied = 2,
    b8g8r8a8 = 3,
    a8r8g8b8 = 4,
    r8g8b8a8 = 5,
    a8b8g8r8 = 6,
    r8g8b8 = 7,
    b8g8r8 = 8,
    r16g16b16 = 9,
    r16g16b16a16_premultiplied = 10,
    r16g16b16a16 = 11,
    r16g16b16_float = 12,
    r16g16b16a16_float_premultiplied = 13,
    r16g16b16a16_float = 14,
    r32g32b32_float = 15,
    r32g32b32a32_float_premultiplied = 16,
    r32g32b32a32_float = 17,
    g8a8_premultiplied = 18,
    g8a8 = 19,
    g8 = 20,
    g16a16_premultiplied = 21,
    g16a16 = 22,
    g16 = 23,
    a8 = 24,
    a16 = 25,
    a16_float = 26,
    a32_float = 27,
    a8b8g8r8_premultiplied = 28,
    b8g8r8x8 = 29,
    x8r8g8b8 = 30,
    r8g8b8x8 = 31,
    x8b8g8r8 = 32,
    n_formats = 33,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_memory_format_get_type" });
        return cFn();
    }
};
/// Class [MemoryTexture](https://docs.gtk.org/gdk4/class.MemoryTexture.html)
pub const MemoryTexture = opaque {
    pub const Interfaces = [_]type{ gdk.Paintable, gio.Icon, gio.LoadableIcon };
    pub const Parent = gdk.Texture;
    pub const Class = gdk.MemoryTextureClass;
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.MemoryTexture.new.html)
    pub fn new(_width: i32, _height: i32, _format: gdk.MemoryFormat, _bytes: *glib.Bytes, _stride: u64) *MemoryTexture {
        const cFn = @extern(*const fn (i32, i32, gdk.MemoryFormat, *glib.Bytes, u64) callconv(.c) *MemoryTexture, .{ .name = "gdk_memory_texture_new" });
        const ret = cFn(_width, _height, _format, _bytes, _stride);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_memory_texture_get_type" });
        return cFn();
    }
};
pub const MemoryTextureClass = opaque {};
/// Flags [ModifierType](https://docs.gtk.org/gdk4/flags.ModifierType.html)
pub const ModifierType = packed struct(u32) {
    shift_mask: bool = false,
    lock_mask: bool = false,
    control_mask: bool = false,
    alt_mask: bool = false,
    _4: u4 = 0,
    button1_mask: bool = false,
    button2_mask: bool = false,
    button3_mask: bool = false,
    button4_mask: bool = false,
    button5_mask: bool = false,
    _13: u13 = 0,
    super_mask: bool = false,
    hyper_mask: bool = false,
    meta_mask: bool = false,
    _: u3 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_modifier_type_get_type" });
        return cFn();
    }
};
/// Class [Monitor](https://docs.gtk.org/gdk4/class.Monitor.html)
/// - property [connector](https://docs.gtk.org/gdk4/property.Monitor.connector.html): (r-) `[*:0]const u8`
/// - property [description](https://docs.gtk.org/gdk4/property.Monitor.description.html): (r-) `[*:0]const u8`
/// - property [display](https://docs.gtk.org/gdk4/property.Monitor.display.html): (r-) `gdk.Display`
/// - property [geometry](https://docs.gtk.org/gdk4/property.Monitor.geometry.html): (r-) `gdk.Rectangle`
/// - property [height-mm](https://docs.gtk.org/gdk4/property.Monitor.height-mm.html): (r-) `i32`
/// - property [manufacturer](https://docs.gtk.org/gdk4/property.Monitor.manufacturer.html): (r-) `[*:0]const u8`
/// - property [model](https://docs.gtk.org/gdk4/property.Monitor.model.html): (r-) `[*:0]const u8`
/// - property [refresh-rate](https://docs.gtk.org/gdk4/property.Monitor.refresh-rate.html): (r-) `i32`
/// - property [scale](https://docs.gtk.org/gdk4/property.Monitor.scale.html): (r-) `f64`
/// - property [scale-factor](https://docs.gtk.org/gdk4/property.Monitor.scale-factor.html): (r-) `i32`
/// - property [subpixel-layout](https://docs.gtk.org/gdk4/property.Monitor.subpixel-layout.html): (r-) `gdk.SubpixelLayout`
/// - property [valid](https://docs.gtk.org/gdk4/property.Monitor.valid.html): (r-) `bool`
/// - property [width-mm](https://docs.gtk.org/gdk4/property.Monitor.width-mm.html): (r-) `i32`
pub const Monitor = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.MonitorClass;
    /// method [get_connector](https://docs.gtk.org/gdk4/method.Monitor.get_connector.html)
    pub fn getConnector(self: *Monitor) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) ?[*:0]u8, .{ .name = "gdk_monitor_get_connector" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gdk4/method.Monitor.get_description.html)
    pub fn getDescription(self: *Monitor) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) ?[*:0]u8, .{ .name = "gdk_monitor_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Monitor.get_display.html)
    pub fn getDisplay(self: *Monitor) *gdk.Display {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) *gdk.Display, .{ .name = "gdk_monitor_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_geometry](https://docs.gtk.org/gdk4/method.Monitor.get_geometry.html)
    pub fn getGeometry(self: *Monitor, _geometry: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Monitor, *gdk.Rectangle) callconv(.c) void, .{ .name = "gdk_monitor_get_geometry" });
        const ret = cFn(self, _geometry);
        return ret;
    }
    /// method [get_height_mm](https://docs.gtk.org/gdk4/method.Monitor.get_height_mm.html)
    pub fn getHeightMm(self: *Monitor) i32 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) i32, .{ .name = "gdk_monitor_get_height_mm" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_manufacturer](https://docs.gtk.org/gdk4/method.Monitor.get_manufacturer.html)
    pub fn getManufacturer(self: *Monitor) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) ?[*:0]u8, .{ .name = "gdk_monitor_get_manufacturer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gdk4/method.Monitor.get_model.html)
    pub fn getModel(self: *Monitor) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) ?[*:0]u8, .{ .name = "gdk_monitor_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_refresh_rate](https://docs.gtk.org/gdk4/method.Monitor.get_refresh_rate.html)
    pub fn getRefreshRate(self: *Monitor) i32 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) i32, .{ .name = "gdk_monitor_get_refresh_rate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale](https://docs.gtk.org/gdk4/method.Monitor.get_scale.html)
    pub fn getScale(self: *Monitor) f64 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) f64, .{ .name = "gdk_monitor_get_scale" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale_factor](https://docs.gtk.org/gdk4/method.Monitor.get_scale_factor.html)
    pub fn getScaleFactor(self: *Monitor) i32 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) i32, .{ .name = "gdk_monitor_get_scale_factor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_subpixel_layout](https://docs.gtk.org/gdk4/method.Monitor.get_subpixel_layout.html)
    pub fn getSubpixelLayout(self: *Monitor) gdk.SubpixelLayout {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) gdk.SubpixelLayout, .{ .name = "gdk_monitor_get_subpixel_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width_mm](https://docs.gtk.org/gdk4/method.Monitor.get_width_mm.html)
    pub fn getWidthMm(self: *Monitor) i32 {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) i32, .{ .name = "gdk_monitor_get_width_mm" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_valid](https://docs.gtk.org/gdk4/method.Monitor.is_valid.html)
    pub fn isValid(self: *Monitor) bool {
        const cFn = @extern(*const fn (*Monitor) callconv(.c) bool, .{ .name = "gdk_monitor_is_valid" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [invalidate](https://docs.gtk.org/gdk4/signal.Monitor.invalidate.html)
    pub fn connectInvalidate(self: *Monitor, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("invalidate", handler, args, flags, &.{ void, *Monitor });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_monitor_get_type" });
        return cFn();
    }
};
pub const MonitorClass = opaque {};
/// Class [MotionEvent](https://docs.gtk.org/gdk4/class.MotionEvent.html)
pub const MotionEvent = opaque {
    pub const Parent = gdk.Event;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_motion_event_get_type" });
        return cFn();
    }
};
/// Enum [NotifyType](https://docs.gtk.org/gdk4/enum.NotifyType.html)
pub const NotifyType = enum(u32) {
    ancestor = 0,
    virtual = 1,
    inferior = 2,
    nonlinear = 3,
    nonlinear_virtual = 4,
    unknown = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_notify_type_get_type" });
        return cFn();
    }
};
/// const [PRIORITY_REDRAW](https://docs.gtk.org/gdk4/const.PRIORITY_REDRAW.html)
pub const PRIORITY_REDRAW = 120;
/// Class [PadEvent](https://docs.gtk.org/gdk4/class.PadEvent.html)
pub const PadEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_axis_value](https://docs.gtk.org/gdk4/method.PadEvent.get_axis_value.html)
    pub fn getAxisValue(self: *PadEvent) struct {
        ret: void,
        index: u32,
        value: f64,
    } {
        var index_out: u32 = undefined;
        const _index = &index_out;
        var value_out: f64 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*PadEvent, *u32, *f64) callconv(.c) void, .{ .name = "gdk_pad_event_get_axis_value" });
        const ret = cFn(self, _index, _value);
        return .{ .ret = ret, .index = index_out, .value = value_out };
    }
    /// method [get_button](https://docs.gtk.org/gdk4/method.PadEvent.get_button.html)
    pub fn getButton(self: *PadEvent) u32 {
        const cFn = @extern(*const fn (*PadEvent) callconv(.c) u32, .{ .name = "gdk_pad_event_get_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_group_mode](https://docs.gtk.org/gdk4/method.PadEvent.get_group_mode.html)
    pub fn getGroupMode(self: *PadEvent) struct {
        ret: void,
        group: u32,
        mode: u32,
    } {
        var group_out: u32 = undefined;
        const _group = &group_out;
        var mode_out: u32 = undefined;
        const _mode = &mode_out;
        const cFn = @extern(*const fn (*PadEvent, *u32, *u32) callconv(.c) void, .{ .name = "gdk_pad_event_get_group_mode" });
        const ret = cFn(self, _group, _mode);
        return .{ .ret = ret, .group = group_out, .mode = mode_out };
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_pad_event_get_type" });
        return cFn();
    }
};
/// Iface [Paintable](https://docs.gtk.org/gdk4/iface.Paintable.html)
pub const Paintable = opaque {
    /// type func [new_empty](https://docs.gtk.org/gdk4/type_func.Paintable.new_empty.html)
    pub fn newEmpty(_intrinsic_width: i32, _intrinsic_height: i32) *gdk.Paintable {
        const cFn = @extern(*const fn (i32, i32) callconv(.c) *gdk.Paintable, .{ .name = "gdk_paintable_new_empty" });
        const ret = cFn(_intrinsic_width, _intrinsic_height);
        return ret;
    }
    /// method [compute_concrete_size](https://docs.gtk.org/gdk4/method.Paintable.compute_concrete_size.html)
    pub fn computeConcreteSize(self: *Paintable, _specified_width: f64, _specified_height: f64, _default_width: f64, _default_height: f64) struct {
        ret: void,
        concrete_width: f64,
        concrete_height: f64,
    } {
        var concrete_width_out: f64 = undefined;
        const _concrete_width = &concrete_width_out;
        var concrete_height_out: f64 = undefined;
        const _concrete_height = &concrete_height_out;
        const cFn = @extern(*const fn (*Paintable, f64, f64, f64, f64, *f64, *f64) callconv(.c) void, .{ .name = "gdk_paintable_compute_concrete_size" });
        const ret = cFn(self, _specified_width, _specified_height, _default_width, _default_height, _concrete_width, _concrete_height);
        return .{ .ret = ret, .concrete_width = concrete_width_out, .concrete_height = concrete_height_out };
    }
    /// method [get_current_image](https://docs.gtk.org/gdk4/method.Paintable.get_current_image.html)
    pub fn getCurrentImage(self: *Paintable) *gdk.Paintable {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) *gdk.Paintable, .{ .name = "gdk_paintable_get_current_image" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gdk4/method.Paintable.get_flags.html)
    pub fn getFlags(self: *Paintable) gdk.PaintableFlags {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) gdk.PaintableFlags, .{ .name = "gdk_paintable_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_intrinsic_aspect_ratio](https://docs.gtk.org/gdk4/method.Paintable.get_intrinsic_aspect_ratio.html)
    pub fn getIntrinsicAspectRatio(self: *Paintable) f64 {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) f64, .{ .name = "gdk_paintable_get_intrinsic_aspect_ratio" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_intrinsic_height](https://docs.gtk.org/gdk4/method.Paintable.get_intrinsic_height.html)
    pub fn getIntrinsicHeight(self: *Paintable) i32 {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) i32, .{ .name = "gdk_paintable_get_intrinsic_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_intrinsic_width](https://docs.gtk.org/gdk4/method.Paintable.get_intrinsic_width.html)
    pub fn getIntrinsicWidth(self: *Paintable) i32 {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) i32, .{ .name = "gdk_paintable_get_intrinsic_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invalidate_contents](https://docs.gtk.org/gdk4/method.Paintable.invalidate_contents.html)
    pub fn invalidateContents(self: *Paintable) void {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) void, .{ .name = "gdk_paintable_invalidate_contents" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invalidate_size](https://docs.gtk.org/gdk4/method.Paintable.invalidate_size.html)
    pub fn invalidateSize(self: *Paintable) void {
        const cFn = @extern(*const fn (*Paintable) callconv(.c) void, .{ .name = "gdk_paintable_invalidate_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [snapshot](https://docs.gtk.org/gdk4/method.Paintable.snapshot.html)
    pub fn snapshot(self: *Paintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*Paintable, *gdk.Snapshot, f64, f64) callconv(.c) void, .{ .name = "gdk_paintable_snapshot" });
        const ret = cFn(self, _snapshot, _width, _height);
        return ret;
    }
    /// vfunc [get_current_image](https://docs.gtk.org/gdk4/vfunc.Paintable.get_current_image.html)
    pub fn getCurrentImageV(self: *Paintable) *gdk.Paintable {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_current_image.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_flags](https://docs.gtk.org/gdk4/vfunc.Paintable.get_flags.html)
    pub fn getFlagsV(self: *Paintable) gdk.PaintableFlags {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_flags.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_intrinsic_aspect_ratio](https://docs.gtk.org/gdk4/vfunc.Paintable.get_intrinsic_aspect_ratio.html)
    pub fn getIntrinsicAspectRatioV(self: *Paintable) f64 {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_intrinsic_aspect_ratio.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_intrinsic_height](https://docs.gtk.org/gdk4/vfunc.Paintable.get_intrinsic_height.html)
    pub fn getIntrinsicHeightV(self: *Paintable) i32 {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_intrinsic_height.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_intrinsic_width](https://docs.gtk.org/gdk4/vfunc.Paintable.get_intrinsic_width.html)
    pub fn getIntrinsicWidthV(self: *Paintable) i32 {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_intrinsic_width.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [snapshot](https://docs.gtk.org/gdk4/vfunc.Paintable.snapshot.html)
    pub fn snapshotV(self: *Paintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64) void {
        const class: *PaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot.?;
        const ret = vFn(self, _snapshot, _width, _height);
        return ret;
    }
    /// signal [invalidate-contents](https://docs.gtk.org/gdk4/signal.Paintable.invalidate-contents.html)
    pub fn connectInvalidateContents(self: *Paintable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("invalidate-contents", handler, args, flags, &.{ void, *Paintable });
    }
    /// signal [invalidate-size](https://docs.gtk.org/gdk4/signal.Paintable.invalidate-size.html)
    pub fn connectInvalidateSize(self: *Paintable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("invalidate-size", handler, args, flags, &.{ void, *Paintable });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_paintable_get_type" });
        return cFn();
    }
};
/// Flags [PaintableFlags](https://docs.gtk.org/gdk4/flags.PaintableFlags.html)
pub const PaintableFlags = packed struct(u32) {
    size: bool = false,
    contents: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_paintable_flags_get_type" });
        return cFn();
    }
};
pub const PaintableInterface = extern struct {
    g_iface: gobject.TypeInterface,
    snapshot: ?*const fn (_paintable: *gdk.Paintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64) callconv(.c) void,
    get_current_image: ?*const fn (_paintable: *gdk.Paintable) callconv(.c) *gdk.Paintable,
    get_flags: ?*const fn (_paintable: *gdk.Paintable) callconv(.c) gdk.PaintableFlags,
    get_intrinsic_width: ?*const fn (_paintable: *gdk.Paintable) callconv(.c) i32,
    get_intrinsic_height: ?*const fn (_paintable: *gdk.Paintable) callconv(.c) i32,
    get_intrinsic_aspect_ratio: ?*const fn (_paintable: *gdk.Paintable) callconv(.c) f64,
};
/// Iface [Popup](https://docs.gtk.org/gdk4/iface.Popup.html)
/// - property [autohide](https://docs.gtk.org/gdk4/property.Popup.autohide.html): (r-) `bool`
/// - property [parent](https://docs.gtk.org/gdk4/property.Popup.parent.html): (r-) `gdk.Surface`
pub const Popup = opaque {
    pub const Prerequisites = [_]type{gdk.Surface};
    /// method [get_autohide](https://docs.gtk.org/gdk4/method.Popup.get_autohide.html)
    pub fn getAutohide(self: *Popup) bool {
        const cFn = @extern(*const fn (*Popup) callconv(.c) bool, .{ .name = "gdk_popup_get_autohide" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gdk4/method.Popup.get_parent.html)
    pub fn getParent(self: *Popup) ?*gdk.Surface {
        const cFn = @extern(*const fn (*Popup) callconv(.c) ?*gdk.Surface, .{ .name = "gdk_popup_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position_x](https://docs.gtk.org/gdk4/method.Popup.get_position_x.html)
    pub fn getPositionX(self: *Popup) i32 {
        const cFn = @extern(*const fn (*Popup) callconv(.c) i32, .{ .name = "gdk_popup_get_position_x" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position_y](https://docs.gtk.org/gdk4/method.Popup.get_position_y.html)
    pub fn getPositionY(self: *Popup) i32 {
        const cFn = @extern(*const fn (*Popup) callconv(.c) i32, .{ .name = "gdk_popup_get_position_y" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_rect_anchor](https://docs.gtk.org/gdk4/method.Popup.get_rect_anchor.html)
    pub fn getRectAnchor(self: *Popup) gdk.Gravity {
        const cFn = @extern(*const fn (*Popup) callconv(.c) gdk.Gravity, .{ .name = "gdk_popup_get_rect_anchor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface_anchor](https://docs.gtk.org/gdk4/method.Popup.get_surface_anchor.html)
    pub fn getSurfaceAnchor(self: *Popup) gdk.Gravity {
        const cFn = @extern(*const fn (*Popup) callconv(.c) gdk.Gravity, .{ .name = "gdk_popup_get_surface_anchor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [present](https://docs.gtk.org/gdk4/method.Popup.present.html)
    pub fn present(self: *Popup, _width: i32, _height: i32, _layout: *gdk.PopupLayout) bool {
        const cFn = @extern(*const fn (*Popup, i32, i32, *gdk.PopupLayout) callconv(.c) bool, .{ .name = "gdk_popup_present" });
        const ret = cFn(self, _width, _height, _layout);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_popup_get_type" });
        return cFn();
    }
};
pub const PopupInterface = opaque {};
/// Struct [PopupLayout](https://docs.gtk.org/gdk4/struct.PopupLayout.html)
pub const PopupLayout = opaque {
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.PopupLayout.new.html)
    pub fn new(_anchor_rect: *gdk.Rectangle, _rect_anchor: gdk.Gravity, _surface_anchor: gdk.Gravity) *PopupLayout {
        const cFn = @extern(*const fn (*gdk.Rectangle, gdk.Gravity, gdk.Gravity) callconv(.c) *PopupLayout, .{ .name = "gdk_popup_layout_new" });
        const ret = cFn(_anchor_rect, _rect_anchor, _surface_anchor);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gdk4/method.PopupLayout.copy.html)
    pub fn copy(self: *PopupLayout) *gdk.PopupLayout {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) *gdk.PopupLayout, .{ .name = "gdk_popup_layout_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gdk4/method.PopupLayout.equal.html)
    pub fn equal(self: *PopupLayout, _other: *gdk.PopupLayout) bool {
        const cFn = @extern(*const fn (*PopupLayout, *gdk.PopupLayout) callconv(.c) bool, .{ .name = "gdk_popup_layout_equal" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [get_anchor_hints](https://docs.gtk.org/gdk4/method.PopupLayout.get_anchor_hints.html)
    pub fn getAnchorHints(self: *PopupLayout) gdk.AnchorHints {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) gdk.AnchorHints, .{ .name = "gdk_popup_layout_get_anchor_hints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_anchor_rect](https://docs.gtk.org/gdk4/method.PopupLayout.get_anchor_rect.html)
    pub fn getAnchorRect(self: *PopupLayout) *gdk.Rectangle {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) *gdk.Rectangle, .{ .name = "gdk_popup_layout_get_anchor_rect" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gdk4/method.PopupLayout.get_offset.html)
    pub fn getOffset(self: *PopupLayout) struct {
        ret: void,
        dx: i32,
        dy: i32,
    } {
        var dx_out: i32 = undefined;
        const _dx = &dx_out;
        var dy_out: i32 = undefined;
        const _dy = &dy_out;
        const cFn = @extern(*const fn (*PopupLayout, *i32, *i32) callconv(.c) void, .{ .name = "gdk_popup_layout_get_offset" });
        const ret = cFn(self, _dx, _dy);
        return .{ .ret = ret, .dx = dx_out, .dy = dy_out };
    }
    /// method [get_rect_anchor](https://docs.gtk.org/gdk4/method.PopupLayout.get_rect_anchor.html)
    pub fn getRectAnchor(self: *PopupLayout) gdk.Gravity {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) gdk.Gravity, .{ .name = "gdk_popup_layout_get_rect_anchor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_shadow_width](https://docs.gtk.org/gdk4/method.PopupLayout.get_shadow_width.html)
    pub fn getShadowWidth(self: *PopupLayout) struct {
        ret: void,
        left: i32,
        right: i32,
        top: i32,
        bottom: i32,
    } {
        var left_out: i32 = undefined;
        const _left = &left_out;
        var right_out: i32 = undefined;
        const _right = &right_out;
        var top_out: i32 = undefined;
        const _top = &top_out;
        var bottom_out: i32 = undefined;
        const _bottom = &bottom_out;
        const cFn = @extern(*const fn (*PopupLayout, *i32, *i32, *i32, *i32) callconv(.c) void, .{ .name = "gdk_popup_layout_get_shadow_width" });
        const ret = cFn(self, _left, _right, _top, _bottom);
        return .{ .ret = ret, .left = left_out, .right = right_out, .top = top_out, .bottom = bottom_out };
    }
    /// method [get_surface_anchor](https://docs.gtk.org/gdk4/method.PopupLayout.get_surface_anchor.html)
    pub fn getSurfaceAnchor(self: *PopupLayout) gdk.Gravity {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) gdk.Gravity, .{ .name = "gdk_popup_layout_get_surface_anchor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.PopupLayout.ref.html)
    pub fn ref(self: *PopupLayout) *gdk.PopupLayout {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) *gdk.PopupLayout, .{ .name = "gdk_popup_layout_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_anchor_hints](https://docs.gtk.org/gdk4/method.PopupLayout.set_anchor_hints.html)
    pub fn setAnchorHints(self: *PopupLayout, _anchor_hints: gdk.AnchorHints) void {
        const cFn = @extern(*const fn (*PopupLayout, gdk.AnchorHints) callconv(.c) void, .{ .name = "gdk_popup_layout_set_anchor_hints" });
        const ret = cFn(self, _anchor_hints);
        return ret;
    }
    /// method [set_anchor_rect](https://docs.gtk.org/gdk4/method.PopupLayout.set_anchor_rect.html)
    pub fn setAnchorRect(self: *PopupLayout, _anchor_rect: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*PopupLayout, *gdk.Rectangle) callconv(.c) void, .{ .name = "gdk_popup_layout_set_anchor_rect" });
        const ret = cFn(self, _anchor_rect);
        return ret;
    }
    /// method [set_offset](https://docs.gtk.org/gdk4/method.PopupLayout.set_offset.html)
    pub fn setOffset(self: *PopupLayout, _dx: i32, _dy: i32) void {
        const cFn = @extern(*const fn (*PopupLayout, i32, i32) callconv(.c) void, .{ .name = "gdk_popup_layout_set_offset" });
        const ret = cFn(self, _dx, _dy);
        return ret;
    }
    /// method [set_rect_anchor](https://docs.gtk.org/gdk4/method.PopupLayout.set_rect_anchor.html)
    pub fn setRectAnchor(self: *PopupLayout, _anchor: gdk.Gravity) void {
        const cFn = @extern(*const fn (*PopupLayout, gdk.Gravity) callconv(.c) void, .{ .name = "gdk_popup_layout_set_rect_anchor" });
        const ret = cFn(self, _anchor);
        return ret;
    }
    /// method [set_shadow_width](https://docs.gtk.org/gdk4/method.PopupLayout.set_shadow_width.html)
    pub fn setShadowWidth(self: *PopupLayout, _left: i32, _right: i32, _top: i32, _bottom: i32) void {
        const cFn = @extern(*const fn (*PopupLayout, i32, i32, i32, i32) callconv(.c) void, .{ .name = "gdk_popup_layout_set_shadow_width" });
        const ret = cFn(self, _left, _right, _top, _bottom);
        return ret;
    }
    /// method [set_surface_anchor](https://docs.gtk.org/gdk4/method.PopupLayout.set_surface_anchor.html)
    pub fn setSurfaceAnchor(self: *PopupLayout, _anchor: gdk.Gravity) void {
        const cFn = @extern(*const fn (*PopupLayout, gdk.Gravity) callconv(.c) void, .{ .name = "gdk_popup_layout_set_surface_anchor" });
        const ret = cFn(self, _anchor);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.PopupLayout.unref.html)
    pub fn unref(self: *PopupLayout) void {
        const cFn = @extern(*const fn (*PopupLayout) callconv(.c) void, .{ .name = "gdk_popup_layout_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_popup_layout_get_type" });
        return cFn();
    }
};
/// Class [ProximityEvent](https://docs.gtk.org/gdk4/class.ProximityEvent.html)
pub const ProximityEvent = opaque {
    pub const Parent = gdk.Event;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_proximity_event_get_type" });
        return cFn();
    }
};
/// Struct [RGBA](https://docs.gtk.org/gdk4/struct.RGBA.html)
pub const RGBA = extern struct {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
    /// method [copy](https://docs.gtk.org/gdk4/method.RGBA.copy.html)
    pub fn copy(self: *RGBA) *gdk.RGBA {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) *gdk.RGBA, .{ .name = "gdk_rgba_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gdk4/method.RGBA.equal.html)
    pub fn equal(self: *RGBA, _p2: *gdk.RGBA) bool {
        const cFn = @extern(*const fn (*RGBA, *gdk.RGBA) callconv(.c) bool, .{ .name = "gdk_rgba_equal" });
        const ret = cFn(self, _p2);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gdk4/method.RGBA.free.html)
    pub fn free(self: *RGBA) void {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) void, .{ .name = "gdk_rgba_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/gdk4/method.RGBA.hash.html)
    pub fn hash(self: *RGBA) u32 {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) u32, .{ .name = "gdk_rgba_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_clear](https://docs.gtk.org/gdk4/method.RGBA.is_clear.html)
    pub fn isClear(self: *RGBA) bool {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) bool, .{ .name = "gdk_rgba_is_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_opaque](https://docs.gtk.org/gdk4/method.RGBA.is_opaque.html)
    pub fn isOpaque(self: *RGBA) bool {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) bool, .{ .name = "gdk_rgba_is_opaque" });
        const ret = cFn(self);
        return ret;
    }
    /// method [parse](https://docs.gtk.org/gdk4/method.RGBA.parse.html)
    pub fn parse(self: *RGBA, _spec: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*RGBA, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_rgba_parse" });
        const ret = cFn(self, _spec);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gdk4/method.RGBA.to_string.html)
    pub fn toString(self: *RGBA) [*:0]u8 {
        const cFn = @extern(*const fn (*RGBA) callconv(.c) [*:0]u8, .{ .name = "gdk_rgba_to_string" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_rgba_get_type" });
        return cFn();
    }
};
/// Struct [Rectangle](https://docs.gtk.org/gdk4/struct.Rectangle.html)
pub const Rectangle = extern struct {
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    /// method [contains_point](https://docs.gtk.org/gdk4/method.Rectangle.contains_point.html)
    pub fn containsPoint(self: *Rectangle, _x: i32, _y: i32) bool {
        const cFn = @extern(*const fn (*Rectangle, i32, i32) callconv(.c) bool, .{ .name = "gdk_rectangle_contains_point" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gdk4/method.Rectangle.equal.html)
    pub fn equal(self: *Rectangle, _rect2: *gdk.Rectangle) bool {
        const cFn = @extern(*const fn (*Rectangle, *gdk.Rectangle) callconv(.c) bool, .{ .name = "gdk_rectangle_equal" });
        const ret = cFn(self, _rect2);
        return ret;
    }
    /// method [intersect](https://docs.gtk.org/gdk4/method.Rectangle.intersect.html)
    pub fn intersect(self: *Rectangle, _src2: *gdk.Rectangle, _dest: ?*gdk.Rectangle) bool {
        const cFn = @extern(*const fn (*Rectangle, *gdk.Rectangle, ?*gdk.Rectangle) callconv(.c) bool, .{ .name = "gdk_rectangle_intersect" });
        const ret = cFn(self, _src2, _dest);
        return ret;
    }
    /// method [union](https://docs.gtk.org/gdk4/method.Rectangle.union.html)
    pub fn @"union"(self: *Rectangle, _src2: *gdk.Rectangle, _dest: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Rectangle, *gdk.Rectangle, *gdk.Rectangle) callconv(.c) void, .{ .name = "gdk_rectangle_union" });
        const ret = cFn(self, _src2, _dest);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_rectangle_get_type" });
        return cFn();
    }
};
/// Enum [ScrollDirection](https://docs.gtk.org/gdk4/enum.ScrollDirection.html)
pub const ScrollDirection = enum(u32) {
    up = 0,
    down = 1,
    left = 2,
    right = 3,
    smooth = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_scroll_direction_get_type" });
        return cFn();
    }
};
/// Class [ScrollEvent](https://docs.gtk.org/gdk4/class.ScrollEvent.html)
pub const ScrollEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_deltas](https://docs.gtk.org/gdk4/method.ScrollEvent.get_deltas.html)
    pub fn getDeltas(self: *ScrollEvent) struct {
        ret: void,
        delta_x: f64,
        delta_y: f64,
    } {
        var delta_x_out: f64 = undefined;
        const _delta_x = &delta_x_out;
        var delta_y_out: f64 = undefined;
        const _delta_y = &delta_y_out;
        const cFn = @extern(*const fn (*ScrollEvent, *f64, *f64) callconv(.c) void, .{ .name = "gdk_scroll_event_get_deltas" });
        const ret = cFn(self, _delta_x, _delta_y);
        return .{ .ret = ret, .delta_x = delta_x_out, .delta_y = delta_y_out };
    }
    /// method [get_direction](https://docs.gtk.org/gdk4/method.ScrollEvent.get_direction.html)
    pub fn getDirection(self: *ScrollEvent) gdk.ScrollDirection {
        const cFn = @extern(*const fn (*ScrollEvent) callconv(.c) gdk.ScrollDirection, .{ .name = "gdk_scroll_event_get_direction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_unit](https://docs.gtk.org/gdk4/method.ScrollEvent.get_unit.html)
    pub fn getUnit(self: *ScrollEvent) gdk.ScrollUnit {
        const cFn = @extern(*const fn (*ScrollEvent) callconv(.c) gdk.ScrollUnit, .{ .name = "gdk_scroll_event_get_unit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_stop](https://docs.gtk.org/gdk4/method.ScrollEvent.is_stop.html)
    pub fn isStop(self: *ScrollEvent) bool {
        const cFn = @extern(*const fn (*ScrollEvent) callconv(.c) bool, .{ .name = "gdk_scroll_event_is_stop" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_scroll_event_get_type" });
        return cFn();
    }
};
/// Enum [ScrollUnit](https://docs.gtk.org/gdk4/enum.ScrollUnit.html)
pub const ScrollUnit = enum(u32) {
    wheel = 0,
    surface = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_scroll_unit_get_type" });
        return cFn();
    }
};
/// Class [Seat](https://docs.gtk.org/gdk4/class.Seat.html)
/// - property [display](https://docs.gtk.org/gdk4/property.Seat.display.html): (r-) `gdk.Display`
pub const Seat = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    /// method [get_capabilities](https://docs.gtk.org/gdk4/method.Seat.get_capabilities.html)
    pub fn getCapabilities(self: *Seat) gdk.SeatCapabilities {
        const cFn = @extern(*const fn (*Seat) callconv(.c) gdk.SeatCapabilities, .{ .name = "gdk_seat_get_capabilities" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_devices](https://docs.gtk.org/gdk4/method.Seat.get_devices.html)
    pub fn getDevices(self: *Seat, _capabilities: gdk.SeatCapabilities) ?*core.List {
        const cFn = @extern(*const fn (*Seat, gdk.SeatCapabilities) callconv(.c) ?*core.List, .{ .name = "gdk_seat_get_devices" });
        const ret = cFn(self, _capabilities);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Seat.get_display.html)
    pub fn getDisplay(self: *Seat) *gdk.Display {
        const cFn = @extern(*const fn (*Seat) callconv(.c) *gdk.Display, .{ .name = "gdk_seat_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_keyboard](https://docs.gtk.org/gdk4/method.Seat.get_keyboard.html)
    pub fn getKeyboard(self: *Seat) ?*gdk.Device {
        const cFn = @extern(*const fn (*Seat) callconv(.c) ?*gdk.Device, .{ .name = "gdk_seat_get_keyboard" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pointer](https://docs.gtk.org/gdk4/method.Seat.get_pointer.html)
    pub fn getPointer(self: *Seat) ?*gdk.Device {
        const cFn = @extern(*const fn (*Seat) callconv(.c) ?*gdk.Device, .{ .name = "gdk_seat_get_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tools](https://docs.gtk.org/gdk4/method.Seat.get_tools.html)
    pub fn getTools(self: *Seat) ?*core.List {
        const cFn = @extern(*const fn (*Seat) callconv(.c) ?*core.List, .{ .name = "gdk_seat_get_tools" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [device-added](https://docs.gtk.org/gdk4/signal.Seat.device-added.html)
    pub fn connectDeviceAdded(self: *Seat, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("device-added", handler, args, flags, &.{ void, *Seat, *gdk.Device });
    }
    /// signal [device-removed](https://docs.gtk.org/gdk4/signal.Seat.device-removed.html)
    pub fn connectDeviceRemoved(self: *Seat, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("device-removed", handler, args, flags, &.{ void, *Seat, *gdk.Device });
    }
    /// signal [tool-added](https://docs.gtk.org/gdk4/signal.Seat.tool-added.html)
    pub fn connectToolAdded(self: *Seat, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tool-added", handler, args, flags, &.{ void, *Seat, *gdk.DeviceTool });
    }
    /// signal [tool-removed](https://docs.gtk.org/gdk4/signal.Seat.tool-removed.html)
    pub fn connectToolRemoved(self: *Seat, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tool-removed", handler, args, flags, &.{ void, *Seat, *gdk.DeviceTool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_seat_get_type" });
        return cFn();
    }
};
/// Flags [SeatCapabilities](https://docs.gtk.org/gdk4/flags.SeatCapabilities.html)
pub const SeatCapabilities = packed struct(u32) {
    pointer: bool = false,
    touch: bool = false,
    tablet_stylus: bool = false,
    keyboard: bool = false,
    tablet_pad: bool = false,
    _: u27 = 0,
    pub const all_pointing: @This() = @bitCast(@as(u32, 7));
    pub const all: @This() = @bitCast(@as(u32, 31));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_seat_capabilities_get_type" });
        return cFn();
    }
};
/// Class [Snapshot](https://docs.gtk.org/gdk4/class.Snapshot.html)
pub const Snapshot = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.SnapshotClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_snapshot_get_type" });
        return cFn();
    }
};
pub const SnapshotClass = opaque {};
/// Enum [SubpixelLayout](https://docs.gtk.org/gdk4/enum.SubpixelLayout.html)
pub const SubpixelLayout = enum(u32) {
    unknown = 0,
    none = 1,
    horizontal_rgb = 2,
    horizontal_bgr = 3,
    vertical_rgb = 4,
    vertical_bgr = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_subpixel_layout_get_type" });
        return cFn();
    }
};
/// Class [Surface](https://docs.gtk.org/gdk4/class.Surface.html)
/// - property [cursor](https://docs.gtk.org/gdk4/property.Surface.cursor.html): (rw) `gdk.Cursor`
/// - property [display](https://docs.gtk.org/gdk4/property.Surface.display.html): (r-) `gdk.Display`
/// - property [frame-clock](https://docs.gtk.org/gdk4/property.Surface.frame-clock.html): (r-) `gdk.FrameClock`
/// - property [height](https://docs.gtk.org/gdk4/property.Surface.height.html): (r-) `i32`
/// - property [mapped](https://docs.gtk.org/gdk4/property.Surface.mapped.html): (r-) `bool`
/// - property [scale](https://docs.gtk.org/gdk4/property.Surface.scale.html): (r-) `f64`
/// - property [scale-factor](https://docs.gtk.org/gdk4/property.Surface.scale-factor.html): (r-) `i32`
/// - property [width](https://docs.gtk.org/gdk4/property.Surface.width.html): (r-) `i32`
pub const Surface = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gdk.SurfaceClass;
    /// ctor [new_popup](https://docs.gtk.org/gdk4/ctor.Surface.new_popup.html)
    pub fn newPopup(_parent: *gdk.Surface, _autohide: bool) *Surface {
        const cFn = @extern(*const fn (*gdk.Surface, bool) callconv(.c) *Surface, .{ .name = "gdk_surface_new_popup" });
        const ret = cFn(_parent, _autohide);
        return ret;
    }
    /// ctor [new_toplevel](https://docs.gtk.org/gdk4/ctor.Surface.new_toplevel.html)
    pub fn newToplevel(_display: *gdk.Display) *Surface {
        const cFn = @extern(*const fn (*gdk.Display) callconv(.c) *Surface, .{ .name = "gdk_surface_new_toplevel" });
        const ret = cFn(_display);
        return ret;
    }
    /// method [beep](https://docs.gtk.org/gdk4/method.Surface.beep.html)
    pub fn beep(self: *Surface) void {
        const cFn = @extern(*const fn (*Surface) callconv(.c) void, .{ .name = "gdk_surface_beep" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_cairo_context](https://docs.gtk.org/gdk4/method.Surface.create_cairo_context.html)
    pub fn createCairoContext(self: *Surface) *gdk.CairoContext {
        const cFn = @extern(*const fn (*Surface) callconv(.c) *gdk.CairoContext, .{ .name = "gdk_surface_create_cairo_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_gl_context](https://docs.gtk.org/gdk4/method.Surface.create_gl_context.html)
    pub fn createGlContext(self: *Surface, _error: *?*core.Error) error{GError}!*gdk.GLContext {
        const cFn = @extern(*const fn (*Surface, *?*core.Error) callconv(.c) *gdk.GLContext, .{ .name = "gdk_surface_create_gl_context" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// Deprecated:
    /// method [create_similar_surface](https://docs.gtk.org/gdk4/method.Surface.create_similar_surface.html)
    pub const createSimilarSurface = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn createSimilarSurface(self: *Surface, _content: cairo.Content, _width: i32, _height: i32) *cairo.Surface {
            const cFn = @extern(*const fn (*Surface, cairo.Content, i32, i32) callconv(.c) *cairo.Surface, .{ .name = "gdk_surface_create_similar_surface" });
            const ret = cFn(self, _content, _width, _height);
            return ret;
        }
    }.createSimilarSurface;
    /// Deprecated:
    /// method [create_vulkan_context](https://docs.gtk.org/gdk4/method.Surface.create_vulkan_context.html)
    pub const createVulkanContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn createVulkanContext(self: *Surface, _error: *?*core.Error) error{GError}!*gdk.VulkanContext {
            const cFn = @extern(*const fn (*Surface, *?*core.Error) callconv(.c) *gdk.VulkanContext, .{ .name = "gdk_surface_create_vulkan_context" });
            const ret = cFn(self, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.createVulkanContext;
    /// method [destroy](https://docs.gtk.org/gdk4/method.Surface.destroy.html)
    pub fn destroy(self: *Surface) void {
        const cFn = @extern(*const fn (*Surface) callconv(.c) void, .{ .name = "gdk_surface_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cursor](https://docs.gtk.org/gdk4/method.Surface.get_cursor.html)
    pub fn getCursor(self: *Surface) ?*gdk.Cursor {
        const cFn = @extern(*const fn (*Surface) callconv(.c) ?*gdk.Cursor, .{ .name = "gdk_surface_get_cursor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_device_cursor](https://docs.gtk.org/gdk4/method.Surface.get_device_cursor.html)
    pub fn getDeviceCursor(self: *Surface, _device: *gdk.Device) ?*gdk.Cursor {
        const cFn = @extern(*const fn (*Surface, *gdk.Device) callconv(.c) ?*gdk.Cursor, .{ .name = "gdk_surface_get_device_cursor" });
        const ret = cFn(self, _device);
        return ret;
    }
    /// method [get_device_position](https://docs.gtk.org/gdk4/method.Surface.get_device_position.html)
    pub fn getDevicePosition(self: *Surface, _device: *gdk.Device) ?struct {
        x: f64,
        y: f64,
        mask: gdk.ModifierType,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        var mask_out: gdk.ModifierType = undefined;
        const _mask = &mask_out;
        const cFn = @extern(*const fn (*Surface, *gdk.Device, ?*f64, ?*f64, ?*gdk.ModifierType) callconv(.c) bool, .{ .name = "gdk_surface_get_device_position" });
        const ret = cFn(self, _device, _x, _y, _mask);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out, .mask = mask_out };
    }
    /// method [get_display](https://docs.gtk.org/gdk4/method.Surface.get_display.html)
    pub fn getDisplay(self: *Surface) *gdk.Display {
        const cFn = @extern(*const fn (*Surface) callconv(.c) *gdk.Display, .{ .name = "gdk_surface_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_clock](https://docs.gtk.org/gdk4/method.Surface.get_frame_clock.html)
    pub fn getFrameClock(self: *Surface) *gdk.FrameClock {
        const cFn = @extern(*const fn (*Surface) callconv(.c) *gdk.FrameClock, .{ .name = "gdk_surface_get_frame_clock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk4/method.Surface.get_height.html)
    pub fn getHeight(self: *Surface) i32 {
        const cFn = @extern(*const fn (*Surface) callconv(.c) i32, .{ .name = "gdk_surface_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mapped](https://docs.gtk.org/gdk4/method.Surface.get_mapped.html)
    pub fn getMapped(self: *Surface) bool {
        const cFn = @extern(*const fn (*Surface) callconv(.c) bool, .{ .name = "gdk_surface_get_mapped" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale](https://docs.gtk.org/gdk4/method.Surface.get_scale.html)
    pub fn getScale(self: *Surface) f64 {
        const cFn = @extern(*const fn (*Surface) callconv(.c) f64, .{ .name = "gdk_surface_get_scale" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale_factor](https://docs.gtk.org/gdk4/method.Surface.get_scale_factor.html)
    pub fn getScaleFactor(self: *Surface) i32 {
        const cFn = @extern(*const fn (*Surface) callconv(.c) i32, .{ .name = "gdk_surface_get_scale_factor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk4/method.Surface.get_width.html)
    pub fn getWidth(self: *Surface) i32 {
        const cFn = @extern(*const fn (*Surface) callconv(.c) i32, .{ .name = "gdk_surface_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hide](https://docs.gtk.org/gdk4/method.Surface.hide.html)
    pub fn hide(self: *Surface) void {
        const cFn = @extern(*const fn (*Surface) callconv(.c) void, .{ .name = "gdk_surface_hide" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_destroyed](https://docs.gtk.org/gdk4/method.Surface.is_destroyed.html)
    pub fn isDestroyed(self: *Surface) bool {
        const cFn = @extern(*const fn (*Surface) callconv(.c) bool, .{ .name = "gdk_surface_is_destroyed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [queue_render](https://docs.gtk.org/gdk4/method.Surface.queue_render.html)
    pub fn queueRender(self: *Surface) void {
        const cFn = @extern(*const fn (*Surface) callconv(.c) void, .{ .name = "gdk_surface_queue_render" });
        const ret = cFn(self);
        return ret;
    }
    /// method [request_layout](https://docs.gtk.org/gdk4/method.Surface.request_layout.html)
    pub fn requestLayout(self: *Surface) void {
        const cFn = @extern(*const fn (*Surface) callconv(.c) void, .{ .name = "gdk_surface_request_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_cursor](https://docs.gtk.org/gdk4/method.Surface.set_cursor.html)
    pub fn setCursor(self: *Surface, _cursor: ?*gdk.Cursor) void {
        const cFn = @extern(*const fn (*Surface, ?*gdk.Cursor) callconv(.c) void, .{ .name = "gdk_surface_set_cursor" });
        const ret = cFn(self, _cursor);
        return ret;
    }
    /// method [set_device_cursor](https://docs.gtk.org/gdk4/method.Surface.set_device_cursor.html)
    pub fn setDeviceCursor(self: *Surface, _device: *gdk.Device, _cursor: *gdk.Cursor) void {
        const cFn = @extern(*const fn (*Surface, *gdk.Device, *gdk.Cursor) callconv(.c) void, .{ .name = "gdk_surface_set_device_cursor" });
        const ret = cFn(self, _device, _cursor);
        return ret;
    }
    /// method [set_input_region](https://docs.gtk.org/gdk4/method.Surface.set_input_region.html)
    pub fn setInputRegion(self: *Surface, _region: *cairo.Region) void {
        const cFn = @extern(*const fn (*Surface, *cairo.Region) callconv(.c) void, .{ .name = "gdk_surface_set_input_region" });
        const ret = cFn(self, _region);
        return ret;
    }
    /// method [set_opaque_region](https://docs.gtk.org/gdk4/method.Surface.set_opaque_region.html)
    pub fn setOpaqueRegion(self: *Surface, _region: ?*cairo.Region) void {
        const cFn = @extern(*const fn (*Surface, ?*cairo.Region) callconv(.c) void, .{ .name = "gdk_surface_set_opaque_region" });
        const ret = cFn(self, _region);
        return ret;
    }
    /// method [translate_coordinates](https://docs.gtk.org/gdk4/method.Surface.translate_coordinates.html)
    pub fn translateCoordinates(self: *Surface, _to: *gdk.Surface, _x: *f64, _y: *f64) bool {
        const cFn = @extern(*const fn (*Surface, *gdk.Surface, *f64, *f64) callconv(.c) bool, .{ .name = "gdk_surface_translate_coordinates" });
        const ret = cFn(self, _to, _x, _y);
        return ret;
    }
    /// signal [enter-monitor](https://docs.gtk.org/gdk4/signal.Surface.enter-monitor.html)
    pub fn connectEnterMonitor(self: *Surface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enter-monitor", handler, args, flags, &.{ void, *Surface, *gdk.Monitor });
    }
    /// signal [event](https://docs.gtk.org/gdk4/signal.Surface.event.html)
    pub fn connectEvent(self: *Surface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("event", handler, args, flags, &.{ bool, *Surface, **gdk.Event });
    }
    /// signal [layout](https://docs.gtk.org/gdk4/signal.Surface.layout.html)
    pub fn connectLayout(self: *Surface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("layout", handler, args, flags, &.{ void, *Surface, i32, i32 });
    }
    /// signal [leave-monitor](https://docs.gtk.org/gdk4/signal.Surface.leave-monitor.html)
    pub fn connectLeaveMonitor(self: *Surface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("leave-monitor", handler, args, flags, &.{ void, *Surface, *gdk.Monitor });
    }
    /// signal [render](https://docs.gtk.org/gdk4/signal.Surface.render.html)
    pub fn connectRender(self: *Surface, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("render", handler, args, flags, &.{ bool, *Surface, *cairo.Region });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_surface_get_type" });
        return cFn();
    }
};
pub const SurfaceClass = opaque {};
/// Enum [SurfaceEdge](https://docs.gtk.org/gdk4/enum.SurfaceEdge.html)
pub const SurfaceEdge = enum(u32) {
    north_west = 0,
    north = 1,
    north_east = 2,
    west = 3,
    east = 4,
    south_west = 5,
    south = 6,
    south_east = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_surface_edge_get_type" });
        return cFn();
    }
};
/// Class [Texture](https://docs.gtk.org/gdk4/class.Texture.html)
/// - property [height](https://docs.gtk.org/gdk4/property.Texture.height.html): (r-) `i32`
/// - property [width](https://docs.gtk.org/gdk4/property.Texture.width.html): (r-) `i32`
pub const Texture = opaque {
    pub const Interfaces = [_]type{ gdk.Paintable, gio.Icon, gio.LoadableIcon };
    pub const Parent = gobject.Object;
    pub const Class = gdk.TextureClass;
    /// ctor [new_for_pixbuf](https://docs.gtk.org/gdk4/ctor.Texture.new_for_pixbuf.html)
    pub fn newForPixbuf(_pixbuf: *gdk_pixbuf.Pixbuf) *Texture {
        const cFn = @extern(*const fn (*gdk_pixbuf.Pixbuf) callconv(.c) *Texture, .{ .name = "gdk_texture_new_for_pixbuf" });
        const ret = cFn(_pixbuf);
        return ret;
    }
    /// ctor [new_from_bytes](https://docs.gtk.org/gdk4/ctor.Texture.new_from_bytes.html)
    pub fn newFromBytes(_bytes: *glib.Bytes, _error: *?*core.Error) error{GError}!*Texture {
        const cFn = @extern(*const fn (*glib.Bytes, *?*core.Error) callconv(.c) *Texture, .{ .name = "gdk_texture_new_from_bytes" });
        const ret = cFn(_bytes, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gdk4/ctor.Texture.new_from_file.html)
    pub fn newFromFile(_file: *gio.File, _error: *?*core.Error) error{GError}!*Texture {
        const cFn = @extern(*const fn (*gio.File, *?*core.Error) callconv(.c) *Texture, .{ .name = "gdk_texture_new_from_file" });
        const ret = cFn(_file, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_filename](https://docs.gtk.org/gdk4/ctor.Texture.new_from_filename.html)
    pub fn newFromFilename(_path: [*:0]const u8, _error: *?*core.Error) error{GError}!*Texture {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *Texture, .{ .name = "gdk_texture_new_from_filename" });
        const ret = cFn(_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_resource](https://docs.gtk.org/gdk4/ctor.Texture.new_from_resource.html)
    pub fn newFromResource(_resource_path: [*:0]const u8) *Texture {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Texture, .{ .name = "gdk_texture_new_from_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// method [download](https://docs.gtk.org/gdk4/method.Texture.download.html)
    pub fn download(self: *Texture, _data: [*]u8, _stride: u64) void {
        const cFn = @extern(*const fn (*Texture, [*]u8, u64) callconv(.c) void, .{ .name = "gdk_texture_download" });
        const ret = cFn(self, _data, _stride);
        return ret;
    }
    /// method [get_format](https://docs.gtk.org/gdk4/method.Texture.get_format.html)
    pub fn getFormat(self: *Texture) gdk.MemoryFormat {
        const cFn = @extern(*const fn (*Texture) callconv(.c) gdk.MemoryFormat, .{ .name = "gdk_texture_get_format" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gdk4/method.Texture.get_height.html)
    pub fn getHeight(self: *Texture) i32 {
        const cFn = @extern(*const fn (*Texture) callconv(.c) i32, .{ .name = "gdk_texture_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gdk4/method.Texture.get_width.html)
    pub fn getWidth(self: *Texture) i32 {
        const cFn = @extern(*const fn (*Texture) callconv(.c) i32, .{ .name = "gdk_texture_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [save_to_png](https://docs.gtk.org/gdk4/method.Texture.save_to_png.html)
    pub fn saveToPng(self: *Texture, _filename: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Texture, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_texture_save_to_png" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [save_to_png_bytes](https://docs.gtk.org/gdk4/method.Texture.save_to_png_bytes.html)
    pub fn saveToPngBytes(self: *Texture) *glib.Bytes {
        const cFn = @extern(*const fn (*Texture) callconv(.c) *glib.Bytes, .{ .name = "gdk_texture_save_to_png_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [save_to_tiff](https://docs.gtk.org/gdk4/method.Texture.save_to_tiff.html)
    pub fn saveToTiff(self: *Texture, _filename: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Texture, [*:0]const u8) callconv(.c) bool, .{ .name = "gdk_texture_save_to_tiff" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [save_to_tiff_bytes](https://docs.gtk.org/gdk4/method.Texture.save_to_tiff_bytes.html)
    pub fn saveToTiffBytes(self: *Texture) *glib.Bytes {
        const cFn = @extern(*const fn (*Texture) callconv(.c) *glib.Bytes, .{ .name = "gdk_texture_save_to_tiff_bytes" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_texture_get_type" });
        return cFn();
    }
};
pub const TextureClass = opaque {};
/// Struct [TextureDownloader](https://docs.gtk.org/gdk4/struct.TextureDownloader.html)
pub const TextureDownloader = opaque {
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.TextureDownloader.new.html)
    pub fn new(_texture: *gdk.Texture) *TextureDownloader {
        const cFn = @extern(*const fn (*gdk.Texture) callconv(.c) *TextureDownloader, .{ .name = "gdk_texture_downloader_new" });
        const ret = cFn(_texture);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gdk4/method.TextureDownloader.copy.html)
    pub fn copy(self: *TextureDownloader) *gdk.TextureDownloader {
        const cFn = @extern(*const fn (*TextureDownloader) callconv(.c) *gdk.TextureDownloader, .{ .name = "gdk_texture_downloader_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [download_bytes](https://docs.gtk.org/gdk4/method.TextureDownloader.download_bytes.html)
    pub fn downloadBytes(self: *TextureDownloader) struct {
        ret: *glib.Bytes,
        out_stride: u64,
    } {
        var out_stride_out: u64 = undefined;
        const _out_stride = &out_stride_out;
        const cFn = @extern(*const fn (*TextureDownloader, *u64) callconv(.c) *glib.Bytes, .{ .name = "gdk_texture_downloader_download_bytes" });
        const ret = cFn(self, _out_stride);
        return .{ .ret = ret, .out_stride = out_stride_out };
    }
    /// method [download_into](https://docs.gtk.org/gdk4/method.TextureDownloader.download_into.html)
    pub fn downloadInto(self: *TextureDownloader, _data: [*]u8, _stride: u64) void {
        const cFn = @extern(*const fn (*TextureDownloader, [*]u8, u64) callconv(.c) void, .{ .name = "gdk_texture_downloader_download_into" });
        const ret = cFn(self, _data, _stride);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gdk4/method.TextureDownloader.free.html)
    pub fn free(self: *TextureDownloader) void {
        const cFn = @extern(*const fn (*TextureDownloader) callconv(.c) void, .{ .name = "gdk_texture_downloader_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_format](https://docs.gtk.org/gdk4/method.TextureDownloader.get_format.html)
    pub fn getFormat(self: *TextureDownloader) gdk.MemoryFormat {
        const cFn = @extern(*const fn (*TextureDownloader) callconv(.c) gdk.MemoryFormat, .{ .name = "gdk_texture_downloader_get_format" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_texture](https://docs.gtk.org/gdk4/method.TextureDownloader.get_texture.html)
    pub fn getTexture(self: *TextureDownloader) *gdk.Texture {
        const cFn = @extern(*const fn (*TextureDownloader) callconv(.c) *gdk.Texture, .{ .name = "gdk_texture_downloader_get_texture" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_format](https://docs.gtk.org/gdk4/method.TextureDownloader.set_format.html)
    pub fn setFormat(self: *TextureDownloader, _format: gdk.MemoryFormat) void {
        const cFn = @extern(*const fn (*TextureDownloader, gdk.MemoryFormat) callconv(.c) void, .{ .name = "gdk_texture_downloader_set_format" });
        const ret = cFn(self, _format);
        return ret;
    }
    /// method [set_texture](https://docs.gtk.org/gdk4/method.TextureDownloader.set_texture.html)
    pub fn setTexture(self: *TextureDownloader, _texture: *gdk.Texture) void {
        const cFn = @extern(*const fn (*TextureDownloader, *gdk.Texture) callconv(.c) void, .{ .name = "gdk_texture_downloader_set_texture" });
        const ret = cFn(self, _texture);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_texture_downloader_get_type" });
        return cFn();
    }
};
/// Error [TextureError](https://docs.gtk.org/gdk4/error.TextureError.html)
pub const TextureError = enum(u32) {
    too_large = 0,
    corrupt_image = 1,
    unsupported_content = 2,
    unsupported_format = 3,

    /// type func [quark](https://docs.gtk.org/gdk4/type_func.TextureError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_texture_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_texture_error_get_type" });
        return cFn();
    }
};
/// Struct [TimeCoord](https://docs.gtk.org/gdk4/struct.TimeCoord.html)
pub const TimeCoord = extern struct {
    time: u32,
    flags: gdk.AxisFlags,
    axes: [12]f64,
};
/// Enum [TitlebarGesture](https://docs.gtk.org/gdk4/enum.TitlebarGesture.html)
pub const TitlebarGesture = enum(u32) {
    double_click = 1,
    right_click = 2,
    middle_click = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_titlebar_gesture_get_type" });
        return cFn();
    }
};
/// Iface [Toplevel](https://docs.gtk.org/gdk4/iface.Toplevel.html)
/// - property [decorated](https://docs.gtk.org/gdk4/property.Toplevel.decorated.html): (rw) `bool`
/// - property [deletable](https://docs.gtk.org/gdk4/property.Toplevel.deletable.html): (rw) `bool`
/// - property [fullscreen-mode](https://docs.gtk.org/gdk4/property.Toplevel.fullscreen-mode.html): (rw) `gdk.FullscreenMode`
/// - property [icon-list](https://docs.gtk.org/gdk4/property.Toplevel.icon-list.html): (rw) `*anyopaque`
/// - property [modal](https://docs.gtk.org/gdk4/property.Toplevel.modal.html): (rw) `bool`
/// - property [shortcuts-inhibited](https://docs.gtk.org/gdk4/property.Toplevel.shortcuts-inhibited.html): (r-) `bool`
/// - property [startup-id](https://docs.gtk.org/gdk4/property.Toplevel.startup-id.html): (rw) `[*:0]const u8`
/// - property [state](https://docs.gtk.org/gdk4/property.Toplevel.state.html): (r-) `gdk.ToplevelState`
/// - property [title](https://docs.gtk.org/gdk4/property.Toplevel.title.html): (rw) `[*:0]const u8`
/// - property [transient-for](https://docs.gtk.org/gdk4/property.Toplevel.transient-for.html): (rw) `gdk.Surface`
pub const Toplevel = opaque {
    pub const Prerequisites = [_]type{gdk.Surface};
    /// method [begin_move](https://docs.gtk.org/gdk4/method.Toplevel.begin_move.html)
    pub fn beginMove(self: *Toplevel, _device: *gdk.Device, _button: i32, _x: f64, _y: f64, _timestamp: u32) void {
        const cFn = @extern(*const fn (*Toplevel, *gdk.Device, i32, f64, f64, u32) callconv(.c) void, .{ .name = "gdk_toplevel_begin_move" });
        const ret = cFn(self, _device, _button, _x, _y, _timestamp);
        return ret;
    }
    /// method [begin_resize](https://docs.gtk.org/gdk4/method.Toplevel.begin_resize.html)
    pub fn beginResize(self: *Toplevel, _edge: gdk.SurfaceEdge, _device: ?*gdk.Device, _button: i32, _x: f64, _y: f64, _timestamp: u32) void {
        const cFn = @extern(*const fn (*Toplevel, gdk.SurfaceEdge, ?*gdk.Device, i32, f64, f64, u32) callconv(.c) void, .{ .name = "gdk_toplevel_begin_resize" });
        const ret = cFn(self, _edge, _device, _button, _x, _y, _timestamp);
        return ret;
    }
    /// method [focus](https://docs.gtk.org/gdk4/method.Toplevel.focus.html)
    pub fn focus(self: *Toplevel, _timestamp: u32) void {
        const cFn = @extern(*const fn (*Toplevel, u32) callconv(.c) void, .{ .name = "gdk_toplevel_focus" });
        const ret = cFn(self, _timestamp);
        return ret;
    }
    /// method [get_state](https://docs.gtk.org/gdk4/method.Toplevel.get_state.html)
    pub fn getState(self: *Toplevel) gdk.ToplevelState {
        const cFn = @extern(*const fn (*Toplevel) callconv(.c) gdk.ToplevelState, .{ .name = "gdk_toplevel_get_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [inhibit_system_shortcuts](https://docs.gtk.org/gdk4/method.Toplevel.inhibit_system_shortcuts.html)
    pub fn inhibitSystemShortcuts(self: *Toplevel, _event: ?*gdk.Event) void {
        const cFn = @extern(*const fn (*Toplevel, ?*gdk.Event) callconv(.c) void, .{ .name = "gdk_toplevel_inhibit_system_shortcuts" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// method [lower](https://docs.gtk.org/gdk4/method.Toplevel.lower.html)
    pub fn lower(self: *Toplevel) bool {
        const cFn = @extern(*const fn (*Toplevel) callconv(.c) bool, .{ .name = "gdk_toplevel_lower" });
        const ret = cFn(self);
        return ret;
    }
    /// method [minimize](https://docs.gtk.org/gdk4/method.Toplevel.minimize.html)
    pub fn minimize(self: *Toplevel) bool {
        const cFn = @extern(*const fn (*Toplevel) callconv(.c) bool, .{ .name = "gdk_toplevel_minimize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [present](https://docs.gtk.org/gdk4/method.Toplevel.present.html)
    pub fn present(self: *Toplevel, _layout: *gdk.ToplevelLayout) void {
        const cFn = @extern(*const fn (*Toplevel, *gdk.ToplevelLayout) callconv(.c) void, .{ .name = "gdk_toplevel_present" });
        const ret = cFn(self, _layout);
        return ret;
    }
    /// method [restore_system_shortcuts](https://docs.gtk.org/gdk4/method.Toplevel.restore_system_shortcuts.html)
    pub fn restoreSystemShortcuts(self: *Toplevel) void {
        const cFn = @extern(*const fn (*Toplevel) callconv(.c) void, .{ .name = "gdk_toplevel_restore_system_shortcuts" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_decorated](https://docs.gtk.org/gdk4/method.Toplevel.set_decorated.html)
    pub fn setDecorated(self: *Toplevel, _decorated: bool) void {
        const cFn = @extern(*const fn (*Toplevel, bool) callconv(.c) void, .{ .name = "gdk_toplevel_set_decorated" });
        const ret = cFn(self, _decorated);
        return ret;
    }
    /// method [set_deletable](https://docs.gtk.org/gdk4/method.Toplevel.set_deletable.html)
    pub fn setDeletable(self: *Toplevel, _deletable: bool) void {
        const cFn = @extern(*const fn (*Toplevel, bool) callconv(.c) void, .{ .name = "gdk_toplevel_set_deletable" });
        const ret = cFn(self, _deletable);
        return ret;
    }
    /// method [set_icon_list](https://docs.gtk.org/gdk4/method.Toplevel.set_icon_list.html)
    pub fn setIconList(self: *Toplevel, _surfaces: *core.List) void {
        const cFn = @extern(*const fn (*Toplevel, *core.List) callconv(.c) void, .{ .name = "gdk_toplevel_set_icon_list" });
        const ret = cFn(self, _surfaces);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gdk4/method.Toplevel.set_modal.html)
    pub fn setModal(self: *Toplevel, _modal: bool) void {
        const cFn = @extern(*const fn (*Toplevel, bool) callconv(.c) void, .{ .name = "gdk_toplevel_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_startup_id](https://docs.gtk.org/gdk4/method.Toplevel.set_startup_id.html)
    pub fn setStartupId(self: *Toplevel, _startup_id: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Toplevel, [*:0]const u8) callconv(.c) void, .{ .name = "gdk_toplevel_set_startup_id" });
        const ret = cFn(self, _startup_id);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gdk4/method.Toplevel.set_title.html)
    pub fn setTitle(self: *Toplevel, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Toplevel, [*:0]const u8) callconv(.c) void, .{ .name = "gdk_toplevel_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [set_transient_for](https://docs.gtk.org/gdk4/method.Toplevel.set_transient_for.html)
    pub fn setTransientFor(self: *Toplevel, _parent: *gdk.Surface) void {
        const cFn = @extern(*const fn (*Toplevel, *gdk.Surface) callconv(.c) void, .{ .name = "gdk_toplevel_set_transient_for" });
        const ret = cFn(self, _parent);
        return ret;
    }
    /// method [show_window_menu](https://docs.gtk.org/gdk4/method.Toplevel.show_window_menu.html)
    pub fn showWindowMenu(self: *Toplevel, _event: *gdk.Event) bool {
        const cFn = @extern(*const fn (*Toplevel, *gdk.Event) callconv(.c) bool, .{ .name = "gdk_toplevel_show_window_menu" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// method [supports_edge_constraints](https://docs.gtk.org/gdk4/method.Toplevel.supports_edge_constraints.html)
    pub fn supportsEdgeConstraints(self: *Toplevel) bool {
        const cFn = @extern(*const fn (*Toplevel) callconv(.c) bool, .{ .name = "gdk_toplevel_supports_edge_constraints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [titlebar_gesture](https://docs.gtk.org/gdk4/method.Toplevel.titlebar_gesture.html)
    pub fn titlebarGesture(self: *Toplevel, _gesture: gdk.TitlebarGesture) bool {
        const cFn = @extern(*const fn (*Toplevel, gdk.TitlebarGesture) callconv(.c) bool, .{ .name = "gdk_toplevel_titlebar_gesture" });
        const ret = cFn(self, _gesture);
        return ret;
    }
    /// signal [compute-size](https://docs.gtk.org/gdk4/signal.Toplevel.compute-size.html)
    pub fn connectComputeSize(self: *Toplevel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("compute-size", handler, args, flags, &.{ void, *Toplevel, **gdk.ToplevelSize });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_toplevel_get_type" });
        return cFn();
    }
};
pub const ToplevelInterface = opaque {};
/// Struct [ToplevelLayout](https://docs.gtk.org/gdk4/struct.ToplevelLayout.html)
pub const ToplevelLayout = opaque {
    /// ctor [new](https://docs.gtk.org/gdk4/ctor.ToplevelLayout.new.html)
    pub fn new() *ToplevelLayout {
        const cFn = @extern(*const fn () callconv(.c) *ToplevelLayout, .{ .name = "gdk_toplevel_layout_new" });
        const ret = cFn();
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gdk4/method.ToplevelLayout.copy.html)
    pub fn copy(self: *ToplevelLayout) *gdk.ToplevelLayout {
        const cFn = @extern(*const fn (*ToplevelLayout) callconv(.c) *gdk.ToplevelLayout, .{ .name = "gdk_toplevel_layout_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gdk4/method.ToplevelLayout.equal.html)
    pub fn equal(self: *ToplevelLayout, _other: *gdk.ToplevelLayout) bool {
        const cFn = @extern(*const fn (*ToplevelLayout, *gdk.ToplevelLayout) callconv(.c) bool, .{ .name = "gdk_toplevel_layout_equal" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [get_fullscreen](https://docs.gtk.org/gdk4/method.ToplevelLayout.get_fullscreen.html)
    pub fn getFullscreen(self: *ToplevelLayout) ?bool {
        var fullscreen_out: bool = undefined;
        const _fullscreen = &fullscreen_out;
        const cFn = @extern(*const fn (*ToplevelLayout, *bool) callconv(.c) bool, .{ .name = "gdk_toplevel_layout_get_fullscreen" });
        const ret = cFn(self, _fullscreen);
        if (!ret) return null;
        return fullscreen_out;
    }
    /// method [get_fullscreen_monitor](https://docs.gtk.org/gdk4/method.ToplevelLayout.get_fullscreen_monitor.html)
    pub fn getFullscreenMonitor(self: *ToplevelLayout) ?*gdk.Monitor {
        const cFn = @extern(*const fn (*ToplevelLayout) callconv(.c) ?*gdk.Monitor, .{ .name = "gdk_toplevel_layout_get_fullscreen_monitor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_maximized](https://docs.gtk.org/gdk4/method.ToplevelLayout.get_maximized.html)
    pub fn getMaximized(self: *ToplevelLayout) ?bool {
        var maximized_out: bool = undefined;
        const _maximized = &maximized_out;
        const cFn = @extern(*const fn (*ToplevelLayout, *bool) callconv(.c) bool, .{ .name = "gdk_toplevel_layout_get_maximized" });
        const ret = cFn(self, _maximized);
        if (!ret) return null;
        return maximized_out;
    }
    /// method [get_resizable](https://docs.gtk.org/gdk4/method.ToplevelLayout.get_resizable.html)
    pub fn getResizable(self: *ToplevelLayout) bool {
        const cFn = @extern(*const fn (*ToplevelLayout) callconv(.c) bool, .{ .name = "gdk_toplevel_layout_get_resizable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gdk4/method.ToplevelLayout.ref.html)
    pub fn ref(self: *ToplevelLayout) *gdk.ToplevelLayout {
        const cFn = @extern(*const fn (*ToplevelLayout) callconv(.c) *gdk.ToplevelLayout, .{ .name = "gdk_toplevel_layout_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_fullscreen](https://docs.gtk.org/gdk4/method.ToplevelLayout.set_fullscreen.html)
    pub fn setFullscreen(self: *ToplevelLayout, _fullscreen: bool, _monitor: ?*gdk.Monitor) void {
        const cFn = @extern(*const fn (*ToplevelLayout, bool, ?*gdk.Monitor) callconv(.c) void, .{ .name = "gdk_toplevel_layout_set_fullscreen" });
        const ret = cFn(self, _fullscreen, _monitor);
        return ret;
    }
    /// method [set_maximized](https://docs.gtk.org/gdk4/method.ToplevelLayout.set_maximized.html)
    pub fn setMaximized(self: *ToplevelLayout, _maximized: bool) void {
        const cFn = @extern(*const fn (*ToplevelLayout, bool) callconv(.c) void, .{ .name = "gdk_toplevel_layout_set_maximized" });
        const ret = cFn(self, _maximized);
        return ret;
    }
    /// method [set_resizable](https://docs.gtk.org/gdk4/method.ToplevelLayout.set_resizable.html)
    pub fn setResizable(self: *ToplevelLayout, _resizable: bool) void {
        const cFn = @extern(*const fn (*ToplevelLayout, bool) callconv(.c) void, .{ .name = "gdk_toplevel_layout_set_resizable" });
        const ret = cFn(self, _resizable);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gdk4/method.ToplevelLayout.unref.html)
    pub fn unref(self: *ToplevelLayout) void {
        const cFn = @extern(*const fn (*ToplevelLayout) callconv(.c) void, .{ .name = "gdk_toplevel_layout_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_toplevel_layout_get_type" });
        return cFn();
    }
};
/// Struct [ToplevelSize](https://docs.gtk.org/gdk4/struct.ToplevelSize.html)
pub const ToplevelSize = opaque {
    /// method [get_bounds](https://docs.gtk.org/gdk4/method.ToplevelSize.get_bounds.html)
    pub fn getBounds(self: *ToplevelSize) struct {
        ret: void,
        bounds_width: i32,
        bounds_height: i32,
    } {
        var bounds_width_out: i32 = undefined;
        const _bounds_width = &bounds_width_out;
        var bounds_height_out: i32 = undefined;
        const _bounds_height = &bounds_height_out;
        const cFn = @extern(*const fn (*ToplevelSize, *i32, *i32) callconv(.c) void, .{ .name = "gdk_toplevel_size_get_bounds" });
        const ret = cFn(self, _bounds_width, _bounds_height);
        return .{ .ret = ret, .bounds_width = bounds_width_out, .bounds_height = bounds_height_out };
    }
    /// method [set_min_size](https://docs.gtk.org/gdk4/method.ToplevelSize.set_min_size.html)
    pub fn setMinSize(self: *ToplevelSize, _min_width: i32, _min_height: i32) void {
        const cFn = @extern(*const fn (*ToplevelSize, i32, i32) callconv(.c) void, .{ .name = "gdk_toplevel_size_set_min_size" });
        const ret = cFn(self, _min_width, _min_height);
        return ret;
    }
    /// method [set_shadow_width](https://docs.gtk.org/gdk4/method.ToplevelSize.set_shadow_width.html)
    pub fn setShadowWidth(self: *ToplevelSize, _left: i32, _right: i32, _top: i32, _bottom: i32) void {
        const cFn = @extern(*const fn (*ToplevelSize, i32, i32, i32, i32) callconv(.c) void, .{ .name = "gdk_toplevel_size_set_shadow_width" });
        const ret = cFn(self, _left, _right, _top, _bottom);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/gdk4/method.ToplevelSize.set_size.html)
    pub fn setSize(self: *ToplevelSize, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*ToplevelSize, i32, i32) callconv(.c) void, .{ .name = "gdk_toplevel_size_set_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
};
/// Flags [ToplevelState](https://docs.gtk.org/gdk4/flags.ToplevelState.html)
pub const ToplevelState = packed struct(u32) {
    minimized: bool = false,
    maximized: bool = false,
    sticky: bool = false,
    fullscreen: bool = false,
    above: bool = false,
    below: bool = false,
    focused: bool = false,
    tiled: bool = false,
    top_tiled: bool = false,
    top_resizable: bool = false,
    right_tiled: bool = false,
    right_resizable: bool = false,
    bottom_tiled: bool = false,
    bottom_resizable: bool = false,
    left_tiled: bool = false,
    left_resizable: bool = false,
    suspended: bool = false,
    _: u15 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_toplevel_state_get_type" });
        return cFn();
    }
};
/// Class [TouchEvent](https://docs.gtk.org/gdk4/class.TouchEvent.html)
pub const TouchEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_emulating_pointer](https://docs.gtk.org/gdk4/method.TouchEvent.get_emulating_pointer.html)
    pub fn getEmulatingPointer(self: *TouchEvent) bool {
        const cFn = @extern(*const fn (*TouchEvent) callconv(.c) bool, .{ .name = "gdk_touch_event_get_emulating_pointer" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_touch_event_get_type" });
        return cFn();
    }
};
/// Class [TouchpadEvent](https://docs.gtk.org/gdk4/class.TouchpadEvent.html)
pub const TouchpadEvent = opaque {
    pub const Parent = gdk.Event;
    /// method [get_deltas](https://docs.gtk.org/gdk4/method.TouchpadEvent.get_deltas.html)
    pub fn getDeltas(self: *TouchpadEvent) struct {
        ret: void,
        dx: f64,
        dy: f64,
    } {
        var dx_out: f64 = undefined;
        const _dx = &dx_out;
        var dy_out: f64 = undefined;
        const _dy = &dy_out;
        const cFn = @extern(*const fn (*TouchpadEvent, *f64, *f64) callconv(.c) void, .{ .name = "gdk_touchpad_event_get_deltas" });
        const ret = cFn(self, _dx, _dy);
        return .{ .ret = ret, .dx = dx_out, .dy = dy_out };
    }
    /// method [get_gesture_phase](https://docs.gtk.org/gdk4/method.TouchpadEvent.get_gesture_phase.html)
    pub fn getGesturePhase(self: *TouchpadEvent) gdk.TouchpadGesturePhase {
        const cFn = @extern(*const fn (*TouchpadEvent) callconv(.c) gdk.TouchpadGesturePhase, .{ .name = "gdk_touchpad_event_get_gesture_phase" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_fingers](https://docs.gtk.org/gdk4/method.TouchpadEvent.get_n_fingers.html)
    pub fn getNFingers(self: *TouchpadEvent) u32 {
        const cFn = @extern(*const fn (*TouchpadEvent) callconv(.c) u32, .{ .name = "gdk_touchpad_event_get_n_fingers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pinch_angle_delta](https://docs.gtk.org/gdk4/method.TouchpadEvent.get_pinch_angle_delta.html)
    pub fn getPinchAngleDelta(self: *TouchpadEvent) f64 {
        const cFn = @extern(*const fn (*TouchpadEvent) callconv(.c) f64, .{ .name = "gdk_touchpad_event_get_pinch_angle_delta" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pinch_scale](https://docs.gtk.org/gdk4/method.TouchpadEvent.get_pinch_scale.html)
    pub fn getPinchScale(self: *TouchpadEvent) f64 {
        const cFn = @extern(*const fn (*TouchpadEvent) callconv(.c) f64, .{ .name = "gdk_touchpad_event_get_pinch_scale" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_touchpad_event_get_type" });
        return cFn();
    }
};
/// Enum [TouchpadGesturePhase](https://docs.gtk.org/gdk4/enum.TouchpadGesturePhase.html)
pub const TouchpadGesturePhase = enum(u32) {
    begin = 0,
    update = 1,
    end = 2,
    cancel = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_touchpad_gesture_phase_get_type" });
        return cFn();
    }
};
/// Class [VulkanContext](https://docs.gtk.org/gdk4/class.VulkanContext.html)
pub const VulkanContext = opaque {
    pub const Interfaces = [_]type{gio.Initable};
    pub const Parent = gdk.DrawContext;
    /// signal [images-updated](https://docs.gtk.org/gdk4/signal.VulkanContext.images-updated.html)
    pub fn connectImagesUpdated(self: *VulkanContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("images-updated", handler, args, flags, &.{ void, *VulkanContext });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_vulkan_context_get_type" });
        return cFn();
    }
};
/// Error [VulkanError](https://docs.gtk.org/gdk4/error.VulkanError.html)
pub const VulkanError = enum(u32) {
    unsupported = 0,
    not_available = 1,

    /// type func [quark](https://docs.gtk.org/gdk4/type_func.VulkanError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_vulkan_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_vulkan_error_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// func [cairo_draw_from_gl](https://docs.gtk.org/gdk4/func.cairo_draw_from_gl.html)
pub const cairoDrawFromGl = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn cairoDrawFromGl(_cr: *cairo.Context, _surface: *gdk.Surface, _source: i32, _source_type: i32, _buffer_scale: i32, _x: i32, _y: i32, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*cairo.Context, *gdk.Surface, i32, i32, i32, i32, i32, i32, i32) callconv(.c) void, .{ .name = "gdk_cairo_draw_from_gl" });
        const ret = cFn(_cr, _surface, _source, _source_type, _buffer_scale, _x, _y, _width, _height);
        return ret;
    }
}.cairoDrawFromGl;
/// func [cairo_rectangle](https://docs.gtk.org/gdk4/func.cairo_rectangle.html)
pub fn cairoRectangle(_cr: *cairo.Context, _rectangle: *gdk.Rectangle) void {
    const cFn = @extern(*const fn (*cairo.Context, *gdk.Rectangle) callconv(.c) void, .{ .name = "gdk_cairo_rectangle" });
    const ret = cFn(_cr, _rectangle);
    return ret;
}
/// func [cairo_region](https://docs.gtk.org/gdk4/func.cairo_region.html)
pub fn cairoRegion(_cr: *cairo.Context, _region: *cairo.Region) void {
    const cFn = @extern(*const fn (*cairo.Context, *cairo.Region) callconv(.c) void, .{ .name = "gdk_cairo_region" });
    const ret = cFn(_cr, _region);
    return ret;
}
/// func [cairo_region_create_from_surface](https://docs.gtk.org/gdk4/func.cairo_region_create_from_surface.html)
pub fn cairoRegionCreateFromSurface(_surface: *cairo.Surface) *cairo.Region {
    const cFn = @extern(*const fn (*cairo.Surface) callconv(.c) *cairo.Region, .{ .name = "gdk_cairo_region_create_from_surface" });
    const ret = cFn(_surface);
    return ret;
}
/// func [cairo_set_source_pixbuf](https://docs.gtk.org/gdk4/func.cairo_set_source_pixbuf.html)
pub fn cairoSetSourcePixbuf(_cr: *cairo.Context, _pixbuf: *gdk_pixbuf.Pixbuf, _pixbuf_x: f64, _pixbuf_y: f64) void {
    const cFn = @extern(*const fn (*cairo.Context, *gdk_pixbuf.Pixbuf, f64, f64) callconv(.c) void, .{ .name = "gdk_cairo_set_source_pixbuf" });
    const ret = cFn(_cr, _pixbuf, _pixbuf_x, _pixbuf_y);
    return ret;
}
/// func [cairo_set_source_rgba](https://docs.gtk.org/gdk4/func.cairo_set_source_rgba.html)
pub fn cairoSetSourceRgba(_cr: *cairo.Context, _rgba: *gdk.RGBA) void {
    const cFn = @extern(*const fn (*cairo.Context, *gdk.RGBA) callconv(.c) void, .{ .name = "gdk_cairo_set_source_rgba" });
    const ret = cFn(_cr, _rgba);
    return ret;
}
/// func [content_deserialize_async](https://docs.gtk.org/gdk4/func.content_deserialize_async.html)
pub fn contentDeserializeAsync(_stream: *gio.InputStream, _mime_type: [*:0]const u8, _type: core.Type, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn (*gio.InputStream, [*:0]const u8, core.Type, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_content_deserialize_async" });
    const ret = cFn(_stream, _mime_type, _type, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [content_deserialize_finish](https://docs.gtk.org/gdk4/func.content_deserialize_finish.html)
pub fn contentDeserializeFinish(_result: *gio.AsyncResult, _value: *gobject.Value, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (*gio.AsyncResult, *gobject.Value, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_content_deserialize_finish" });
    const ret = cFn(_result, _value, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [content_formats_parse](https://docs.gtk.org/gdk4/func.content_formats_parse.html)
pub fn contentFormatsParse(_string: [*:0]const u8) ?*gdk.ContentFormats {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*gdk.ContentFormats, .{ .name = "gdk_content_formats_parse" });
    const ret = cFn(_string);
    return ret;
}
/// func [content_register_deserializer](https://docs.gtk.org/gdk4/func.content_register_deserializer.html)
pub fn contentRegisterDeserializer(_mime_type: [*:0]const u8, _type: core.Type, deserialize: anytype, deserialize_args: anytype) void {
    var closure_deserialize = core.zig_closure(deserialize, deserialize_args, &.{void});
    const _deserialize: gdk.ContentDeserializeFunc = @ptrCast(closure_deserialize.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_deserialize.c_data());
    const _notify: glib.DestroyNotify = @ptrCast(closure_deserialize.c_destroy());
    const cFn = @extern(*const fn ([*:0]const u8, core.Type, gdk.ContentDeserializeFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gdk_content_register_deserializer" });
    const ret = cFn(_mime_type, _type, _deserialize, @ptrCast(_data), _notify);
    return ret;
}
/// func [content_register_serializer](https://docs.gtk.org/gdk4/func.content_register_serializer.html)
pub fn contentRegisterSerializer(_type: core.Type, _mime_type: [*:0]const u8, serialize: anytype, serialize_args: anytype) void {
    var closure_serialize = core.zig_closure(serialize, serialize_args, &.{void});
    const _serialize: gdk.ContentSerializeFunc = @ptrCast(closure_serialize.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_serialize.c_data());
    const _notify: glib.DestroyNotify = @ptrCast(closure_serialize.c_destroy());
    const cFn = @extern(*const fn (core.Type, [*:0]const u8, gdk.ContentSerializeFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gdk_content_register_serializer" });
    const ret = cFn(_type, _mime_type, _serialize, @ptrCast(_data), _notify);
    return ret;
}
/// func [content_serialize_async](https://docs.gtk.org/gdk4/func.content_serialize_async.html)
pub fn contentSerializeAsync(_stream: *gio.OutputStream, _mime_type: [*:0]const u8, _value: *gobject.Value, _io_priority: i32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
    var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
    closure_callback.setOnce();
    const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
    const cFn = @extern(*const fn (*gio.OutputStream, [*:0]const u8, *gobject.Value, i32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gdk_content_serialize_async" });
    const ret = cFn(_stream, _mime_type, _value, _io_priority, _cancellable, _callback, @ptrCast(_user_data));
    return ret;
}
/// func [content_serialize_finish](https://docs.gtk.org/gdk4/func.content_serialize_finish.html)
pub fn contentSerializeFinish(_result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
    const cFn = @extern(*const fn (*gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gdk_content_serialize_finish" });
    const ret = cFn(_result, _error);
    if (_error.* != null) return error.GError;
    return ret;
}
/// func [dmabuf_error_quark](https://docs.gtk.org/gdk4/func.dmabuf_error_quark.html)
pub fn dmabufErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_dmabuf_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [drag_action_is_unique](https://docs.gtk.org/gdk4/func.drag_action_is_unique.html)
pub fn dragActionIsUnique(_action: gdk.DragAction) bool {
    const cFn = @extern(*const fn (gdk.DragAction) callconv(.c) bool, .{ .name = "gdk_drag_action_is_unique" });
    const ret = cFn(_action);
    return ret;
}
/// func [drag_surface_size_get_type](https://docs.gtk.org/gdk4/func.drag_surface_size_get_type.html)
pub fn dragSurfaceSizeGetType() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_drag_surface_size_get_type" });
    const ret = cFn();
    return ret;
}
/// func [events_get_angle](https://docs.gtk.org/gdk4/func.events_get_angle.html)
pub fn eventsGetAngle(_event1: *gdk.Event, _event2: *gdk.Event) struct {
    ret: bool,
    angle: f64,
} {
    var angle_out: f64 = undefined;
    const _angle = &angle_out;
    const cFn = @extern(*const fn (*gdk.Event, *gdk.Event, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_angle" });
    const ret = cFn(_event1, _event2, _angle);
    return .{ .ret = ret, .angle = angle_out };
}
/// func [events_get_center](https://docs.gtk.org/gdk4/func.events_get_center.html)
pub fn eventsGetCenter(_event1: *gdk.Event, _event2: *gdk.Event) struct {
    ret: bool,
    x: f64,
    y: f64,
} {
    var x_out: f64 = undefined;
    const _x = &x_out;
    var y_out: f64 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*gdk.Event, *gdk.Event, *f64, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_center" });
    const ret = cFn(_event1, _event2, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
/// func [events_get_distance](https://docs.gtk.org/gdk4/func.events_get_distance.html)
pub fn eventsGetDistance(_event1: *gdk.Event, _event2: *gdk.Event) struct {
    ret: bool,
    distance: f64,
} {
    var distance_out: f64 = undefined;
    const _distance = &distance_out;
    const cFn = @extern(*const fn (*gdk.Event, *gdk.Event, *f64) callconv(.c) bool, .{ .name = "gdk_events_get_distance" });
    const ret = cFn(_event1, _event2, _distance);
    return .{ .ret = ret, .distance = distance_out };
}
/// func [gl_error_quark](https://docs.gtk.org/gdk4/func.gl_error_quark.html)
pub fn glErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_gl_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [intern_mime_type](https://docs.gtk.org/gdk4/func.intern_mime_type.html)
pub fn internMimeType(_string: [*:0]const u8) ?[*:0]u8 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "gdk_intern_mime_type" });
    const ret = cFn(_string);
    return ret;
}
/// func [keyval_convert_case](https://docs.gtk.org/gdk4/func.keyval_convert_case.html)
pub fn keyvalConvertCase(_symbol: u32) struct {
    ret: void,
    lower: u32,
    upper: u32,
} {
    var lower_out: u32 = undefined;
    const _lower = &lower_out;
    var upper_out: u32 = undefined;
    const _upper = &upper_out;
    const cFn = @extern(*const fn (u32, *u32, *u32) callconv(.c) void, .{ .name = "gdk_keyval_convert_case" });
    const ret = cFn(_symbol, _lower, _upper);
    return .{ .ret = ret, .lower = lower_out, .upper = upper_out };
}
/// func [keyval_from_name](https://docs.gtk.org/gdk4/func.keyval_from_name.html)
pub fn keyvalFromName(_keyval_name: [*:0]const u8) u32 {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) u32, .{ .name = "gdk_keyval_from_name" });
    const ret = cFn(_keyval_name);
    return ret;
}
/// func [keyval_is_lower](https://docs.gtk.org/gdk4/func.keyval_is_lower.html)
pub fn keyvalIsLower(_keyval: u32) bool {
    const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "gdk_keyval_is_lower" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [keyval_is_upper](https://docs.gtk.org/gdk4/func.keyval_is_upper.html)
pub fn keyvalIsUpper(_keyval: u32) bool {
    const cFn = @extern(*const fn (u32) callconv(.c) bool, .{ .name = "gdk_keyval_is_upper" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [keyval_name](https://docs.gtk.org/gdk4/func.keyval_name.html)
pub fn keyvalName(_keyval: u32) ?[*:0]u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) ?[*:0]u8, .{ .name = "gdk_keyval_name" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [keyval_to_lower](https://docs.gtk.org/gdk4/func.keyval_to_lower.html)
pub fn keyvalToLower(_keyval: u32) u32 {
    const cFn = @extern(*const fn (u32) callconv(.c) u32, .{ .name = "gdk_keyval_to_lower" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [keyval_to_unicode](https://docs.gtk.org/gdk4/func.keyval_to_unicode.html)
pub fn keyvalToUnicode(_keyval: u32) u32 {
    const cFn = @extern(*const fn (u32) callconv(.c) u32, .{ .name = "gdk_keyval_to_unicode" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [keyval_to_upper](https://docs.gtk.org/gdk4/func.keyval_to_upper.html)
pub fn keyvalToUpper(_keyval: u32) u32 {
    const cFn = @extern(*const fn (u32) callconv(.c) u32, .{ .name = "gdk_keyval_to_upper" });
    const ret = cFn(_keyval);
    return ret;
}
/// func [paintable_new_empty](https://docs.gtk.org/gdk4/func.paintable_new_empty.html)
pub fn paintableNewEmpty(_intrinsic_width: i32, _intrinsic_height: i32) *gdk.Paintable {
    const cFn = @extern(*const fn (i32, i32) callconv(.c) *gdk.Paintable, .{ .name = "gdk_paintable_new_empty" });
    const ret = cFn(_intrinsic_width, _intrinsic_height);
    return ret;
}
/// Deprecated:
/// func [pixbuf_get_from_surface](https://docs.gtk.org/gdk4/func.pixbuf_get_from_surface.html)
pub const pixbufGetFromSurface = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn pixbufGetFromSurface(_surface: *cairo.Surface, _src_x: i32, _src_y: i32, _width: i32, _height: i32) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*cairo.Surface, i32, i32, i32, i32) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_get_from_surface" });
        const ret = cFn(_surface, _src_x, _src_y, _width, _height);
        return ret;
    }
}.pixbufGetFromSurface;
/// Deprecated:
/// func [pixbuf_get_from_texture](https://docs.gtk.org/gdk4/func.pixbuf_get_from_texture.html)
pub const pixbufGetFromTexture = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn pixbufGetFromTexture(_texture: *gdk.Texture) ?*gdk_pixbuf.Pixbuf {
        const cFn = @extern(*const fn (*gdk.Texture) callconv(.c) ?*gdk_pixbuf.Pixbuf, .{ .name = "gdk_pixbuf_get_from_texture" });
        const ret = cFn(_texture);
        return ret;
    }
}.pixbufGetFromTexture;
/// func [set_allowed_backends](https://docs.gtk.org/gdk4/func.set_allowed_backends.html)
pub fn setAllowedBackends(_backends: [*:0]const u8) void {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "gdk_set_allowed_backends" });
    const ret = cFn(_backends);
    return ret;
}
/// func [texture_error_quark](https://docs.gtk.org/gdk4/func.texture_error_quark.html)
pub fn textureErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_texture_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [toplevel_size_get_type](https://docs.gtk.org/gdk4/func.toplevel_size_get_type.html)
pub fn toplevelSizeGetType() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gdk_toplevel_size_get_type" });
    const ret = cFn();
    return ret;
}
/// func [unicode_to_keyval](https://docs.gtk.org/gdk4/func.unicode_to_keyval.html)
pub fn unicodeToKeyval(_wc: u32) u32 {
    const cFn = @extern(*const fn (u32) callconv(.c) u32, .{ .name = "gdk_unicode_to_keyval" });
    const ret = cFn(_wc);
    return ret;
}
/// func [vulkan_error_quark](https://docs.gtk.org/gdk4/func.vulkan_error_quark.html)
pub fn vulkanErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gdk_vulkan_error_quark" });
    const ret = cFn();
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
