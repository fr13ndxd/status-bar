// This file is auto-generated by zig-gir-ffi
const pango_cairo = @This();
pub const freetype2 = @import("freetype2");
pub const glib = @import("glib");
pub const harf_buzz = @import("harf_buzz");
pub const gmodule = @import("gmodule");
pub const cairo = @import("cairo");
pub const gobject = @import("gobject");
pub const pango = @import("pango");
pub const gio = @import("gio");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// Iface [Font](https://docs.gtk.org/PangoCairo/iface.Font.html)
pub const Font = opaque {
    pub const Prerequisites = [_]type{pango.Font};
    /// method [get_scaled_font](https://docs.gtk.org/PangoCairo/method.Font.get_scaled_font.html)
    pub fn getScaledFont(self: *Font) ?*cairo.ScaledFont {
        const cFn = @extern(*const fn (*Font) callconv(.c) ?*cairo.ScaledFont, .{ .name = "pango_cairo_font_get_scaled_font" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_cairo_font_get_type" });
        return cFn();
    }
};
/// Iface [FontMap](https://docs.gtk.org/PangoCairo/iface.FontMap.html)
pub const FontMap = opaque {
    pub const Prerequisites = [_]type{pango.FontMap};
    /// type func [get_default](https://docs.gtk.org/PangoCairo/type_func.FontMap.get_default.html)
    pub fn getDefault() *pango.FontMap {
        const cFn = @extern(*const fn () callconv(.c) *pango.FontMap, .{ .name = "pango_cairo_font_map_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [new](https://docs.gtk.org/PangoCairo/type_func.FontMap.new.html)
    pub fn new() *pango.FontMap {
        const cFn = @extern(*const fn () callconv(.c) *pango.FontMap, .{ .name = "pango_cairo_font_map_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [new_for_font_type](https://docs.gtk.org/PangoCairo/type_func.FontMap.new_for_font_type.html)
    pub fn newForFontType(_fonttype: cairo.FontType) ?*pango.FontMap {
        const cFn = @extern(*const fn (cairo.FontType) callconv(.c) ?*pango.FontMap, .{ .name = "pango_cairo_font_map_new_for_font_type" });
        const ret = cFn(_fonttype);
        return ret;
    }
    /// method [get_font_type](https://docs.gtk.org/PangoCairo/method.FontMap.get_font_type.html)
    pub fn getFontType(self: *FontMap) cairo.FontType {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) cairo.FontType, .{ .name = "pango_cairo_font_map_get_font_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resolution](https://docs.gtk.org/PangoCairo/method.FontMap.get_resolution.html)
    pub fn getResolution(self: *FontMap) f64 {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) f64, .{ .name = "pango_cairo_font_map_get_resolution" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_default](https://docs.gtk.org/PangoCairo/method.FontMap.set_default.html)
    pub fn setDefault(self: *FontMap) void {
        const cFn = @extern(*const fn (*FontMap) callconv(.c) void, .{ .name = "pango_cairo_font_map_set_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_resolution](https://docs.gtk.org/PangoCairo/method.FontMap.set_resolution.html)
    pub fn setResolution(self: *FontMap, _dpi: f64) void {
        const cFn = @extern(*const fn (*FontMap, f64) callconv(.c) void, .{ .name = "pango_cairo_font_map_set_resolution" });
        const ret = cFn(self, _dpi);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "pango_cairo_font_map_get_type" });
        return cFn();
    }
};
/// callback [ShapeRendererFunc](https://docs.gtk.org/PangoCairo/callback.ShapeRendererFunc.html)
pub const ShapeRendererFunc = *const fn (_cr: *cairo.Context, _attr: *pango.AttrShape, _do_path: bool, _data: ?*anyopaque) callconv(.c) void;
/// func [context_get_font_options](https://docs.gtk.org/PangoCairo/func.context_get_font_options.html)
pub fn contextGetFontOptions(_context: *pango.Context) ?*cairo.FontOptions {
    const cFn = @extern(*const fn (*pango.Context) callconv(.c) ?*cairo.FontOptions, .{ .name = "pango_cairo_context_get_font_options" });
    const ret = cFn(_context);
    return ret;
}
/// func [context_get_resolution](https://docs.gtk.org/PangoCairo/func.context_get_resolution.html)
pub fn contextGetResolution(_context: *pango.Context) f64 {
    const cFn = @extern(*const fn (*pango.Context) callconv(.c) f64, .{ .name = "pango_cairo_context_get_resolution" });
    const ret = cFn(_context);
    return ret;
}
/// func [context_set_font_options](https://docs.gtk.org/PangoCairo/func.context_set_font_options.html)
pub fn contextSetFontOptions(_context: *pango.Context, _options: ?*cairo.FontOptions) void {
    const cFn = @extern(*const fn (*pango.Context, ?*cairo.FontOptions) callconv(.c) void, .{ .name = "pango_cairo_context_set_font_options" });
    const ret = cFn(_context, _options);
    return ret;
}
/// func [context_set_resolution](https://docs.gtk.org/PangoCairo/func.context_set_resolution.html)
pub fn contextSetResolution(_context: *pango.Context, _dpi: f64) void {
    const cFn = @extern(*const fn (*pango.Context, f64) callconv(.c) void, .{ .name = "pango_cairo_context_set_resolution" });
    const ret = cFn(_context, _dpi);
    return ret;
}
/// func [context_set_shape_renderer](https://docs.gtk.org/PangoCairo/func.context_set_shape_renderer.html)
pub fn contextSetShapeRenderer(_context: *pango.Context, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *cairo.Context, *pango.AttrShape, bool });
    const _func: ?pango_cairo.ShapeRendererFunc = @ptrCast(closure_func.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _dnotify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*pango.Context, ?pango_cairo.ShapeRendererFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "pango_cairo_context_set_shape_renderer" });
    const ret = cFn(_context, _func, @ptrCast(_data), _dnotify);
    return ret;
}
/// func [create_context](https://docs.gtk.org/PangoCairo/func.create_context.html)
pub fn createContext(_cr: *cairo.Context) *pango.Context {
    const cFn = @extern(*const fn (*cairo.Context) callconv(.c) *pango.Context, .{ .name = "pango_cairo_create_context" });
    const ret = cFn(_cr);
    return ret;
}
/// func [create_layout](https://docs.gtk.org/PangoCairo/func.create_layout.html)
pub fn createLayout(_cr: *cairo.Context) *pango.Layout {
    const cFn = @extern(*const fn (*cairo.Context) callconv(.c) *pango.Layout, .{ .name = "pango_cairo_create_layout" });
    const ret = cFn(_cr);
    return ret;
}
/// func [error_underline_path](https://docs.gtk.org/PangoCairo/func.error_underline_path.html)
pub fn errorUnderlinePath(_cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
    const cFn = @extern(*const fn (*cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "pango_cairo_error_underline_path" });
    const ret = cFn(_cr, _x, _y, _width, _height);
    return ret;
}
/// func [font_map_get_default](https://docs.gtk.org/PangoCairo/func.font_map_get_default.html)
pub fn fontMapGetDefault() *pango.FontMap {
    const cFn = @extern(*const fn () callconv(.c) *pango.FontMap, .{ .name = "pango_cairo_font_map_get_default" });
    const ret = cFn();
    return ret;
}
/// func [font_map_new](https://docs.gtk.org/PangoCairo/func.font_map_new.html)
pub fn fontMapNew() *pango.FontMap {
    const cFn = @extern(*const fn () callconv(.c) *pango.FontMap, .{ .name = "pango_cairo_font_map_new" });
    const ret = cFn();
    return ret;
}
/// func [font_map_new_for_font_type](https://docs.gtk.org/PangoCairo/func.font_map_new_for_font_type.html)
pub fn fontMapNewForFontType(_fonttype: cairo.FontType) ?*pango.FontMap {
    const cFn = @extern(*const fn (cairo.FontType) callconv(.c) ?*pango.FontMap, .{ .name = "pango_cairo_font_map_new_for_font_type" });
    const ret = cFn(_fonttype);
    return ret;
}
/// func [glyph_string_path](https://docs.gtk.org/PangoCairo/func.glyph_string_path.html)
pub fn glyphStringPath(_cr: *cairo.Context, _font: *pango.Font, _glyphs: *pango.GlyphString) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Font, *pango.GlyphString) callconv(.c) void, .{ .name = "pango_cairo_glyph_string_path" });
    const ret = cFn(_cr, _font, _glyphs);
    return ret;
}
/// func [layout_line_path](https://docs.gtk.org/PangoCairo/func.layout_line_path.html)
pub fn layoutLinePath(_cr: *cairo.Context, _line: *pango.LayoutLine) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.LayoutLine) callconv(.c) void, .{ .name = "pango_cairo_layout_line_path" });
    const ret = cFn(_cr, _line);
    return ret;
}
/// func [layout_path](https://docs.gtk.org/PangoCairo/func.layout_path.html)
pub fn layoutPath(_cr: *cairo.Context, _layout: *pango.Layout) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Layout) callconv(.c) void, .{ .name = "pango_cairo_layout_path" });
    const ret = cFn(_cr, _layout);
    return ret;
}
/// func [show_error_underline](https://docs.gtk.org/PangoCairo/func.show_error_underline.html)
pub fn showErrorUnderline(_cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
    const cFn = @extern(*const fn (*cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "pango_cairo_show_error_underline" });
    const ret = cFn(_cr, _x, _y, _width, _height);
    return ret;
}
/// func [show_glyph_item](https://docs.gtk.org/PangoCairo/func.show_glyph_item.html)
pub fn showGlyphItem(_cr: *cairo.Context, _text: [*:0]const u8, _glyph_item: *pango.GlyphItem) void {
    const cFn = @extern(*const fn (*cairo.Context, [*:0]const u8, *pango.GlyphItem) callconv(.c) void, .{ .name = "pango_cairo_show_glyph_item" });
    const ret = cFn(_cr, _text, _glyph_item);
    return ret;
}
/// func [show_glyph_string](https://docs.gtk.org/PangoCairo/func.show_glyph_string.html)
pub fn showGlyphString(_cr: *cairo.Context, _font: *pango.Font, _glyphs: *pango.GlyphString) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Font, *pango.GlyphString) callconv(.c) void, .{ .name = "pango_cairo_show_glyph_string" });
    const ret = cFn(_cr, _font, _glyphs);
    return ret;
}
/// func [show_layout](https://docs.gtk.org/PangoCairo/func.show_layout.html)
pub fn showLayout(_cr: *cairo.Context, _layout: *pango.Layout) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Layout) callconv(.c) void, .{ .name = "pango_cairo_show_layout" });
    const ret = cFn(_cr, _layout);
    return ret;
}
/// func [show_layout_line](https://docs.gtk.org/PangoCairo/func.show_layout_line.html)
pub fn showLayoutLine(_cr: *cairo.Context, _line: *pango.LayoutLine) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.LayoutLine) callconv(.c) void, .{ .name = "pango_cairo_show_layout_line" });
    const ret = cFn(_cr, _line);
    return ret;
}
/// func [update_context](https://docs.gtk.org/PangoCairo/func.update_context.html)
pub fn updateContext(_cr: *cairo.Context, _context: *pango.Context) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Context) callconv(.c) void, .{ .name = "pango_cairo_update_context" });
    const ret = cFn(_cr, _context);
    return ret;
}
/// func [update_layout](https://docs.gtk.org/PangoCairo/func.update_layout.html)
pub fn updateLayout(_cr: *cairo.Context, _layout: *pango.Layout) void {
    const cFn = @extern(*const fn (*cairo.Context, *pango.Layout) callconv(.c) void, .{ .name = "pango_cairo_update_layout" });
    const ret = cFn(_cr, _layout);
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
