// This file is auto-generated by zig-gir-ffi
const graphene = @This();
pub const gobject = @import("gobject");
pub const glib = @import("glib");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
pub const Box = extern struct {
    min: graphene.Vec3,
    max: graphene.Vec3,
    pub fn alloc() *Box {
        const cFn = @extern(*const fn () callconv(.c) *Box, .{ .name = "graphene_box_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn containsBox(self: *Box, _b: *graphene.Box) bool {
        const cFn = @extern(*const fn (*Box, *graphene.Box) callconv(.c) bool, .{ .name = "graphene_box_contains_box" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn containsPoint(self: *Box, _point: *graphene.Point3D) bool {
        const cFn = @extern(*const fn (*Box, *graphene.Point3D) callconv(.c) bool, .{ .name = "graphene_box_contains_point" });
        const ret = cFn(self, _point);
        return ret;
    }
    pub fn equal(self: *Box, _b: *graphene.Box) bool {
        const cFn = @extern(*const fn (*Box, *graphene.Box) callconv(.c) bool, .{ .name = "graphene_box_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn expand(self: *Box, _point: *graphene.Point3D, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Box, *graphene.Point3D, *graphene.Box) callconv(.c) void, .{ .name = "graphene_box_expand" });
        const ret = cFn(self, _point, _res);
        return ret;
    }
    pub fn expandScalar(self: *Box, _scalar: f32, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Box, f32, *graphene.Box) callconv(.c) void, .{ .name = "graphene_box_expand_scalar" });
        const ret = cFn(self, _scalar, _res);
        return ret;
    }
    pub fn expandVec3(self: *Box, _vec: *graphene.Vec3, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Box, *graphene.Vec3, *graphene.Box) callconv(.c) void, .{ .name = "graphene_box_expand_vec3" });
        const ret = cFn(self, _vec, _res);
        return ret;
    }
    pub fn free(self: *Box) void {
        const cFn = @extern(*const fn (*Box) callconv(.c) void, .{ .name = "graphene_box_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getBoundingSphere(self: *Box, _sphere: *graphene.Sphere) void {
        const cFn = @extern(*const fn (*Box, *graphene.Sphere) callconv(.c) void, .{ .name = "graphene_box_get_bounding_sphere" });
        const ret = cFn(self, _sphere);
        return ret;
    }
    pub fn getCenter(self: *Box, _center: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Box, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_box_get_center" });
        const ret = cFn(self, _center);
        return ret;
    }
    pub fn getDepth(self: *Box) f32 {
        const cFn = @extern(*const fn (*Box) callconv(.c) f32, .{ .name = "graphene_box_get_depth" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getHeight(self: *Box) f32 {
        const cFn = @extern(*const fn (*Box) callconv(.c) f32, .{ .name = "graphene_box_get_height" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getMax(self: *Box, _max: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Box, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_box_get_max" });
        const ret = cFn(self, _max);
        return ret;
    }
    pub fn getMin(self: *Box, _min: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Box, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_box_get_min" });
        const ret = cFn(self, _min);
        return ret;
    }
    pub fn getSize(self: *Box, _size: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Box, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_box_get_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    pub fn getVertices(self: *Box, _vertices: *[8]graphene.Vec3) void {
        const cFn = @extern(*const fn (*Box, *[8]graphene.Vec3) callconv(.c) void, .{ .name = "graphene_box_get_vertices" });
        const ret = cFn(self, _vertices);
        return ret;
    }
    pub fn getWidth(self: *Box) f32 {
        const cFn = @extern(*const fn (*Box) callconv(.c) f32, .{ .name = "graphene_box_get_width" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Box, _min: ?*graphene.Point3D, _max: ?*graphene.Point3D) *graphene.Box {
        const cFn = @extern(*const fn (*Box, ?*graphene.Point3D, ?*graphene.Point3D) callconv(.c) *graphene.Box, .{ .name = "graphene_box_init" });
        const ret = cFn(self, _min, _max);
        return ret;
    }
    pub fn initFromBox(self: *Box, _src: *graphene.Box) *graphene.Box {
        const cFn = @extern(*const fn (*Box, *graphene.Box) callconv(.c) *graphene.Box, .{ .name = "graphene_box_init_from_box" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromPoints(self: *Box, _pointss: []graphene.Point3D) *graphene.Box {
        const _n_points: u32 = @intCast(_pointss.len);
        const _points = _pointss.ptr;
        const cFn = @extern(*const fn (*Box, u32, [*]graphene.Point3D) callconv(.c) *graphene.Box, .{ .name = "graphene_box_init_from_points" });
        const ret = cFn(self, _n_points, _points);
        return ret;
    }
    pub fn initFromVec3(self: *Box, _min: ?*graphene.Vec3, _max: ?*graphene.Vec3) *graphene.Box {
        const cFn = @extern(*const fn (*Box, ?*graphene.Vec3, ?*graphene.Vec3) callconv(.c) *graphene.Box, .{ .name = "graphene_box_init_from_vec3" });
        const ret = cFn(self, _min, _max);
        return ret;
    }
    pub fn initFromVectors(self: *Box, _vectorss: []graphene.Vec3) *graphene.Box {
        const _n_vectors: u32 = @intCast(_vectorss.len);
        const _vectors = _vectorss.ptr;
        const cFn = @extern(*const fn (*Box, u32, [*]graphene.Vec3) callconv(.c) *graphene.Box, .{ .name = "graphene_box_init_from_vectors" });
        const ret = cFn(self, _n_vectors, _vectors);
        return ret;
    }
    pub fn intersection(self: *Box, _b: *graphene.Box, _res: ?*graphene.Box) bool {
        const cFn = @extern(*const fn (*Box, *graphene.Box, ?*graphene.Box) callconv(.c) bool, .{ .name = "graphene_box_intersection" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn @"union"(self: *Box, _b: *graphene.Box, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Box, *graphene.Box, *graphene.Box) callconv(.c) void, .{ .name = "graphene_box_union" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn empty() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_empty" });
        const ret = cFn();
        return ret;
    }
    pub fn infinite() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_infinite" });
        const ret = cFn();
        return ret;
    }
    pub fn minusOne() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_minus_one" });
        const ret = cFn();
        return ret;
    }
    pub fn one() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_one" });
        const ret = cFn();
        return ret;
    }
    pub fn oneMinusOne() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_one_minus_one" });
        const ret = cFn();
        return ret;
    }
    pub fn zero() *graphene.Box {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_box_get_type" });
        return cFn();
    }
};
pub const Euler = extern struct {
    angles: graphene.Vec3,
    order: graphene.EulerOrder,
    pub fn alloc() *Euler {
        const cFn = @extern(*const fn () callconv(.c) *Euler, .{ .name = "graphene_euler_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn equal(self: *Euler, _b: *graphene.Euler) bool {
        const cFn = @extern(*const fn (*Euler, *graphene.Euler) callconv(.c) bool, .{ .name = "graphene_euler_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Euler) void {
        const cFn = @extern(*const fn (*Euler) callconv(.c) void, .{ .name = "graphene_euler_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getAlpha(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_alpha" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getBeta(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_beta" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getGamma(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_gamma" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getOrder(self: *Euler) graphene.EulerOrder {
        const cFn = @extern(*const fn (*Euler) callconv(.c) graphene.EulerOrder, .{ .name = "graphene_euler_get_order" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getX(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_x" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getY(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_y" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getZ(self: *Euler) f32 {
        const cFn = @extern(*const fn (*Euler) callconv(.c) f32, .{ .name = "graphene_euler_get_z" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Euler, _x: f32, _y: f32, _z: f32) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, f32, f32, f32) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init" });
        const ret = cFn(self, _x, _y, _z);
        return ret;
    }
    pub fn initFromEuler(self: *Euler, _src: ?*graphene.Euler) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, ?*graphene.Euler) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_from_euler" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromMatrix(self: *Euler, _m: ?*graphene.Matrix, _order: graphene.EulerOrder) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, ?*graphene.Matrix, graphene.EulerOrder) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_from_matrix" });
        const ret = cFn(self, _m, _order);
        return ret;
    }
    pub fn initFromQuaternion(self: *Euler, _q: ?*graphene.Quaternion, _order: graphene.EulerOrder) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, ?*graphene.Quaternion, graphene.EulerOrder) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_from_quaternion" });
        const ret = cFn(self, _q, _order);
        return ret;
    }
    pub fn initFromRadians(self: *Euler, _x: f32, _y: f32, _z: f32, _order: graphene.EulerOrder) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, f32, f32, f32, graphene.EulerOrder) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_from_radians" });
        const ret = cFn(self, _x, _y, _z, _order);
        return ret;
    }
    pub fn initFromVec3(self: *Euler, _v: ?*graphene.Vec3, _order: graphene.EulerOrder) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, ?*graphene.Vec3, graphene.EulerOrder) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_from_vec3" });
        const ret = cFn(self, _v, _order);
        return ret;
    }
    pub fn initWithOrder(self: *Euler, _x: f32, _y: f32, _z: f32, _order: graphene.EulerOrder) *graphene.Euler {
        const cFn = @extern(*const fn (*Euler, f32, f32, f32, graphene.EulerOrder) callconv(.c) *graphene.Euler, .{ .name = "graphene_euler_init_with_order" });
        const ret = cFn(self, _x, _y, _z, _order);
        return ret;
    }
    pub fn reorder(self: *Euler, _order: graphene.EulerOrder, _res: *graphene.Euler) void {
        const cFn = @extern(*const fn (*Euler, graphene.EulerOrder, *graphene.Euler) callconv(.c) void, .{ .name = "graphene_euler_reorder" });
        const ret = cFn(self, _order, _res);
        return ret;
    }
    pub fn toMatrix(self: *Euler, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Euler, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_euler_to_matrix" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn toQuaternion(self: *Euler, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Euler, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_euler_to_quaternion" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn toVec3(self: *Euler, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Euler, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_euler_to_vec3" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_euler_get_type" });
        return cFn();
    }
};
pub const EulerOrder = enum(i32) {
    default = -1,
    xyz = 0,
    yzx = 1,
    zxy = 2,
    xzy = 3,
    yxz = 4,
    zyx = 5,
    sxyz = 6,
    sxyx = 7,
    sxzy = 8,
    sxzx = 9,
    syzx = 10,
    syzy = 11,
    syxz = 12,
    syxy = 13,
    szxy = 14,
    szxz = 15,
    szyx = 16,
    szyz = 17,
    rzyx = 18,
    rxyx = 19,
    ryzx = 20,
    rxzx = 21,
    rxzy = 22,
    ryzy = 23,
    rzxy = 24,
    ryxy = 25,
    ryxz = 26,
    rzxz = 27,
    rxyz = 28,
    rzyz = 29,
};
pub const Frustum = extern struct {
    planes: [6]graphene.Plane,
    pub fn alloc() *Frustum {
        const cFn = @extern(*const fn () callconv(.c) *Frustum, .{ .name = "graphene_frustum_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn containsPoint(self: *Frustum, _point: *graphene.Point3D) bool {
        const cFn = @extern(*const fn (*Frustum, *graphene.Point3D) callconv(.c) bool, .{ .name = "graphene_frustum_contains_point" });
        const ret = cFn(self, _point);
        return ret;
    }
    pub fn equal(self: *Frustum, _b: *graphene.Frustum) bool {
        const cFn = @extern(*const fn (*Frustum, *graphene.Frustum) callconv(.c) bool, .{ .name = "graphene_frustum_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Frustum) void {
        const cFn = @extern(*const fn (*Frustum) callconv(.c) void, .{ .name = "graphene_frustum_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getPlanes(self: *Frustum, _planes: *[6]graphene.Plane) void {
        const cFn = @extern(*const fn (*Frustum, *[6]graphene.Plane) callconv(.c) void, .{ .name = "graphene_frustum_get_planes" });
        const ret = cFn(self, _planes);
        return ret;
    }
    pub fn init(self: *Frustum, _p0: *graphene.Plane, _p1: *graphene.Plane, _p2: *graphene.Plane, _p3: *graphene.Plane, _p4: *graphene.Plane, _p5: *graphene.Plane) *graphene.Frustum {
        const cFn = @extern(*const fn (*Frustum, *graphene.Plane, *graphene.Plane, *graphene.Plane, *graphene.Plane, *graphene.Plane, *graphene.Plane) callconv(.c) *graphene.Frustum, .{ .name = "graphene_frustum_init" });
        const ret = cFn(self, _p0, _p1, _p2, _p3, _p4, _p5);
        return ret;
    }
    pub fn initFromFrustum(self: *Frustum, _src: *graphene.Frustum) *graphene.Frustum {
        const cFn = @extern(*const fn (*Frustum, *graphene.Frustum) callconv(.c) *graphene.Frustum, .{ .name = "graphene_frustum_init_from_frustum" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromMatrix(self: *Frustum, _matrix: *graphene.Matrix) *graphene.Frustum {
        const cFn = @extern(*const fn (*Frustum, *graphene.Matrix) callconv(.c) *graphene.Frustum, .{ .name = "graphene_frustum_init_from_matrix" });
        const ret = cFn(self, _matrix);
        return ret;
    }
    pub fn intersectsBox(self: *Frustum, _box: *graphene.Box) bool {
        const cFn = @extern(*const fn (*Frustum, *graphene.Box) callconv(.c) bool, .{ .name = "graphene_frustum_intersects_box" });
        const ret = cFn(self, _box);
        return ret;
    }
    pub fn intersectsSphere(self: *Frustum, _sphere: *graphene.Sphere) bool {
        const cFn = @extern(*const fn (*Frustum, *graphene.Sphere) callconv(.c) bool, .{ .name = "graphene_frustum_intersects_sphere" });
        const ret = cFn(self, _sphere);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_frustum_get_type" });
        return cFn();
    }
};
pub const Matrix = extern struct {
    value: graphene.Simd4X4F,
    pub fn alloc() *Matrix {
        const cFn = @extern(*const fn () callconv(.c) *Matrix, .{ .name = "graphene_matrix_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn decompose(self: *Matrix, _translate: *graphene.Vec3, _scale: *graphene.Vec3, _rotate: *graphene.Quaternion, _shear: *graphene.Vec3, _perspective: *graphene.Vec4) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Vec3, *graphene.Vec3, *graphene.Quaternion, *graphene.Vec3, *graphene.Vec4) callconv(.c) bool, .{ .name = "graphene_matrix_decompose" });
        const ret = cFn(self, _translate, _scale, _rotate, _shear, _perspective);
        return ret;
    }
    pub fn determinant(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_determinant" });
        const ret = cFn(self);
        return ret;
    }
    pub fn equal(self: *Matrix, _b: *graphene.Matrix) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equalFast(self: *Matrix, _b: *graphene.Matrix) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_equal_fast" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Matrix) void {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) void, .{ .name = "graphene_matrix_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getRow(self: *Matrix, _index_: u32, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Matrix, u32, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_matrix_get_row" });
        const ret = cFn(self, _index_, _res);
        return ret;
    }
    pub fn getValue(self: *Matrix, _row: u32, _col: u32) f32 {
        const cFn = @extern(*const fn (*Matrix, u32, u32) callconv(.c) f32, .{ .name = "graphene_matrix_get_value" });
        const ret = cFn(self, _row, _col);
        return ret;
    }
    pub fn getXScale(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_x_scale" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getXTranslation(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_x_translation" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getYScale(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_y_scale" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getYTranslation(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_y_translation" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getZScale(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_z_scale" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getZTranslation(self: *Matrix) f32 {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) f32, .{ .name = "graphene_matrix_get_z_translation" });
        const ret = cFn(self);
        return ret;
    }
    pub fn initFrom2d(self: *Matrix, _xx: f64, _yx: f64, _xy: f64, _yy: f64, _x_0: f64, _y_0: f64) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f64, f64, f64, f64, f64, f64) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_from_2d" });
        const ret = cFn(self, _xx, _yx, _xy, _yy, _x_0, _y_0);
        return ret;
    }
    pub fn initFromFloat(self: *Matrix, _v: *[16]f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, *[16]f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_from_float" });
        const ret = cFn(self, _v);
        return ret;
    }
    pub fn initFromMatrix(self: *Matrix, _src: *graphene.Matrix) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_from_matrix" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec4(self: *Matrix, _v0: *graphene.Vec4, _v1: *graphene.Vec4, _v2: *graphene.Vec4, _v3: *graphene.Vec4) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, *graphene.Vec4, *graphene.Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_from_vec4" });
        const ret = cFn(self, _v0, _v1, _v2, _v3);
        return ret;
    }
    pub fn initFrustum(self: *Matrix, _left: f32, _right: f32, _bottom: f32, _top: f32, _z_near: f32, _z_far: f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, f32, f32, f32, f32, f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_frustum" });
        const ret = cFn(self, _left, _right, _bottom, _top, _z_near, _z_far);
        return ret;
    }
    pub fn initIdentity(self: *Matrix) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_identity" });
        const ret = cFn(self);
        return ret;
    }
    pub fn initLookAt(self: *Matrix, _eye: *graphene.Vec3, _center: *graphene.Vec3, _up: *graphene.Vec3) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, *graphene.Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_look_at" });
        const ret = cFn(self, _eye, _center, _up);
        return ret;
    }
    pub fn initOrtho(self: *Matrix, _left: f32, _right: f32, _top: f32, _bottom: f32, _z_near: f32, _z_far: f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, f32, f32, f32, f32, f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_ortho" });
        const ret = cFn(self, _left, _right, _top, _bottom, _z_near, _z_far);
        return ret;
    }
    pub fn initPerspective(self: *Matrix, _fovy: f32, _aspect: f32, _z_near: f32, _z_far: f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, f32, f32, f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_perspective" });
        const ret = cFn(self, _fovy, _aspect, _z_near, _z_far);
        return ret;
    }
    pub fn initRotate(self: *Matrix, _angle: f32, _axis: *graphene.Vec3) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, *graphene.Vec3) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_rotate" });
        const ret = cFn(self, _angle, _axis);
        return ret;
    }
    pub fn initScale(self: *Matrix, _x: f32, _y: f32, _z: f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, f32, f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_scale" });
        const ret = cFn(self, _x, _y, _z);
        return ret;
    }
    pub fn initSkew(self: *Matrix, _x_skew: f32, _y_skew: f32) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, f32, f32) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_skew" });
        const ret = cFn(self, _x_skew, _y_skew);
        return ret;
    }
    pub fn initTranslate(self: *Matrix, _p: *graphene.Point3D) *graphene.Matrix {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point3D) callconv(.c) *graphene.Matrix, .{ .name = "graphene_matrix_init_translate" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn interpolate(self: *Matrix, _b: *graphene.Matrix, _factor: f64, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix, f64, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_matrix_interpolate" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn inverse(self: *Matrix, _res: *graphene.Matrix) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_inverse" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn is2d(self: *Matrix) bool {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_is_2d" });
        const ret = cFn(self);
        return ret;
    }
    pub fn isBackfaceVisible(self: *Matrix) bool {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_is_backface_visible" });
        const ret = cFn(self);
        return ret;
    }
    pub fn isIdentity(self: *Matrix) bool {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_is_identity" });
        const ret = cFn(self);
        return ret;
    }
    pub fn isSingular(self: *Matrix) bool {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) bool, .{ .name = "graphene_matrix_is_singular" });
        const ret = cFn(self);
        return ret;
    }
    pub fn multiply(self: *Matrix, _b: *graphene.Matrix, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_matrix_multiply" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn near(self: *Matrix, _b: *graphene.Matrix, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix, f32) callconv(.c) bool, .{ .name = "graphene_matrix_near" });
        const ret = cFn(self, _b, _epsilon);
        return ret;
    }
    pub fn normalize(self: *Matrix, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_matrix_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn perspective(self: *Matrix, _depth: f32, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, f32, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_matrix_perspective" });
        const ret = cFn(self, _depth, _res);
        return ret;
    }
    pub fn print(self: *Matrix) void {
        const cFn = @extern(*const fn (*Matrix) callconv(.c) void, .{ .name = "graphene_matrix_print" });
        const ret = cFn(self);
        return ret;
    }
    pub fn projectPoint(self: *Matrix, _p: *graphene.Point, _res: *graphene.Point) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point, *graphene.Point) callconv(.c) void, .{ .name = "graphene_matrix_project_point" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn projectRect(self: *Matrix, _r: *graphene.Rect, _res: *graphene.Quad) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Rect, *graphene.Quad) callconv(.c) void, .{ .name = "graphene_matrix_project_rect" });
        const ret = cFn(self, _r, _res);
        return ret;
    }
    pub fn projectRectBounds(self: *Matrix, _r: *graphene.Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_matrix_project_rect_bounds" });
        const ret = cFn(self, _r, _res);
        return ret;
    }
    pub fn rotate(self: *Matrix, _angle: f32, _axis: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Matrix, f32, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_matrix_rotate" });
        const ret = cFn(self, _angle, _axis);
        return ret;
    }
    pub fn rotateEuler(self: *Matrix, _e: *graphene.Euler) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Euler) callconv(.c) void, .{ .name = "graphene_matrix_rotate_euler" });
        const ret = cFn(self, _e);
        return ret;
    }
    pub fn rotateQuaternion(self: *Matrix, _q: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_matrix_rotate_quaternion" });
        const ret = cFn(self, _q);
        return ret;
    }
    pub fn rotateX(self: *Matrix, _angle: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_rotate_x" });
        const ret = cFn(self, _angle);
        return ret;
    }
    pub fn rotateY(self: *Matrix, _angle: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_rotate_y" });
        const ret = cFn(self, _angle);
        return ret;
    }
    pub fn rotateZ(self: *Matrix, _angle: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_rotate_z" });
        const ret = cFn(self, _angle);
        return ret;
    }
    pub fn scale(self: *Matrix, _factor_x: f32, _factor_y: f32, _factor_z: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32, f32, f32) callconv(.c) void, .{ .name = "graphene_matrix_scale" });
        const ret = cFn(self, _factor_x, _factor_y, _factor_z);
        return ret;
    }
    pub fn skewXy(self: *Matrix, _factor: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_skew_xy" });
        const ret = cFn(self, _factor);
        return ret;
    }
    pub fn skewXz(self: *Matrix, _factor: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_skew_xz" });
        const ret = cFn(self, _factor);
        return ret;
    }
    pub fn skewYz(self: *Matrix, _factor: f32) void {
        const cFn = @extern(*const fn (*Matrix, f32) callconv(.c) void, .{ .name = "graphene_matrix_skew_yz" });
        const ret = cFn(self, _factor);
        return ret;
    }
    pub fn to2d(self: *Matrix) struct {
        ret: bool,
        xx: f64,
        yx: f64,
        xy: f64,
        yy: f64,
        x_0: f64,
        y_0: f64,
    } {
        var xx_out: f64 = undefined;
        const _xx = &xx_out;
        var yx_out: f64 = undefined;
        const _yx = &yx_out;
        var xy_out: f64 = undefined;
        const _xy = &xy_out;
        var yy_out: f64 = undefined;
        const _yy = &yy_out;
        var x_0_out: f64 = undefined;
        const _x_0 = &x_0_out;
        var y_0_out: f64 = undefined;
        const _y_0 = &y_0_out;
        const cFn = @extern(*const fn (*Matrix, *f64, *f64, *f64, *f64, *f64, *f64) callconv(.c) bool, .{ .name = "graphene_matrix_to_2d" });
        const ret = cFn(self, _xx, _yx, _xy, _yy, _x_0, _y_0);
        return .{ .ret = ret, .xx = xx_out, .yx = yx_out, .xy = xy_out, .yy = yy_out, .x_0 = x_0_out, .y_0 = y_0_out };
    }
    pub fn toFloat(self: *Matrix, _v: *[16]f32) void {
        const cFn = @extern(*const fn (*Matrix, *[16]f32) callconv(.c) void, .{ .name = "graphene_matrix_to_float" });
        const ret = cFn(self, _v);
        return ret;
    }
    pub fn transformBounds(self: *Matrix, _r: *graphene.Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_matrix_transform_bounds" });
        const ret = cFn(self, _r, _res);
        return ret;
    }
    pub fn transformBox(self: *Matrix, _b: *graphene.Box, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Box, *graphene.Box) callconv(.c) void, .{ .name = "graphene_matrix_transform_box" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn transformPoint(self: *Matrix, _p: *graphene.Point, _res: *graphene.Point) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point, *graphene.Point) callconv(.c) void, .{ .name = "graphene_matrix_transform_point" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn transformPoint3d(self: *Matrix, _p: *graphene.Point3D, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point3D, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_matrix_transform_point3d" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn transformRay(self: *Matrix, _r: *graphene.Ray, _res: *graphene.Ray) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Ray, *graphene.Ray) callconv(.c) void, .{ .name = "graphene_matrix_transform_ray" });
        const ret = cFn(self, _r, _res);
        return ret;
    }
    pub fn transformRect(self: *Matrix, _r: *graphene.Rect, _res: *graphene.Quad) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Rect, *graphene.Quad) callconv(.c) void, .{ .name = "graphene_matrix_transform_rect" });
        const ret = cFn(self, _r, _res);
        return ret;
    }
    pub fn transformSphere(self: *Matrix, _s: *graphene.Sphere, _res: *graphene.Sphere) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Sphere, *graphene.Sphere) callconv(.c) void, .{ .name = "graphene_matrix_transform_sphere" });
        const ret = cFn(self, _s, _res);
        return ret;
    }
    pub fn transformVec3(self: *Matrix, _v: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_matrix_transform_vec3" });
        const ret = cFn(self, _v, _res);
        return ret;
    }
    pub fn transformVec4(self: *Matrix, _v: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_matrix_transform_vec4" });
        const ret = cFn(self, _v, _res);
        return ret;
    }
    pub fn translate(self: *Matrix, _pos: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_matrix_translate" });
        const ret = cFn(self, _pos);
        return ret;
    }
    pub fn transpose(self: *Matrix, _res: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_matrix_transpose" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn unprojectPoint3d(self: *Matrix, _modelview: *graphene.Matrix, _point: *graphene.Point3D, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Matrix, *graphene.Point3D, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_matrix_unproject_point3d" });
        const ret = cFn(self, _modelview, _point, _res);
        return ret;
    }
    pub fn untransformBounds(self: *Matrix, _r: *graphene.Rect, _bounds: *graphene.Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Matrix, *graphene.Rect, *graphene.Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_matrix_untransform_bounds" });
        const ret = cFn(self, _r, _bounds, _res);
        return ret;
    }
    pub fn untransformPoint(self: *Matrix, _p: *graphene.Point, _bounds: *graphene.Rect, _res: *graphene.Point) bool {
        const cFn = @extern(*const fn (*Matrix, *graphene.Point, *graphene.Rect, *graphene.Point) callconv(.c) bool, .{ .name = "graphene_matrix_untransform_point" });
        const ret = cFn(self, _p, _bounds, _res);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_matrix_get_type" });
        return cFn();
    }
};
pub const PI = 3.141593e0;
pub const PI_2 = 1.570796e0;
pub const Plane = extern struct {
    normal: graphene.Vec3,
    constant: f32,
    pub fn alloc() *Plane {
        const cFn = @extern(*const fn () callconv(.c) *Plane, .{ .name = "graphene_plane_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn distance(self: *Plane, _point: *graphene.Point3D) f32 {
        const cFn = @extern(*const fn (*Plane, *graphene.Point3D) callconv(.c) f32, .{ .name = "graphene_plane_distance" });
        const ret = cFn(self, _point);
        return ret;
    }
    pub fn equal(self: *Plane, _b: *graphene.Plane) bool {
        const cFn = @extern(*const fn (*Plane, *graphene.Plane) callconv(.c) bool, .{ .name = "graphene_plane_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Plane) void {
        const cFn = @extern(*const fn (*Plane) callconv(.c) void, .{ .name = "graphene_plane_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getConstant(self: *Plane) f32 {
        const cFn = @extern(*const fn (*Plane) callconv(.c) f32, .{ .name = "graphene_plane_get_constant" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getNormal(self: *Plane, _normal: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Plane, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_plane_get_normal" });
        const ret = cFn(self, _normal);
        return ret;
    }
    pub fn init(self: *Plane, _normal: ?*graphene.Vec3, _constant: f32) *graphene.Plane {
        const cFn = @extern(*const fn (*Plane, ?*graphene.Vec3, f32) callconv(.c) *graphene.Plane, .{ .name = "graphene_plane_init" });
        const ret = cFn(self, _normal, _constant);
        return ret;
    }
    pub fn initFromPlane(self: *Plane, _src: *graphene.Plane) *graphene.Plane {
        const cFn = @extern(*const fn (*Plane, *graphene.Plane) callconv(.c) *graphene.Plane, .{ .name = "graphene_plane_init_from_plane" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromPoint(self: *Plane, _normal: *graphene.Vec3, _point: *graphene.Point3D) *graphene.Plane {
        const cFn = @extern(*const fn (*Plane, *graphene.Vec3, *graphene.Point3D) callconv(.c) *graphene.Plane, .{ .name = "graphene_plane_init_from_point" });
        const ret = cFn(self, _normal, _point);
        return ret;
    }
    pub fn initFromPoints(self: *Plane, _a: *graphene.Point3D, _b: *graphene.Point3D, _c: *graphene.Point3D) *graphene.Plane {
        const cFn = @extern(*const fn (*Plane, *graphene.Point3D, *graphene.Point3D, *graphene.Point3D) callconv(.c) *graphene.Plane, .{ .name = "graphene_plane_init_from_points" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn initFromVec4(self: *Plane, _src: *graphene.Vec4) *graphene.Plane {
        const cFn = @extern(*const fn (*Plane, *graphene.Vec4) callconv(.c) *graphene.Plane, .{ .name = "graphene_plane_init_from_vec4" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn negate(self: *Plane, _res: *graphene.Plane) void {
        const cFn = @extern(*const fn (*Plane, *graphene.Plane) callconv(.c) void, .{ .name = "graphene_plane_negate" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn normalize(self: *Plane, _res: *graphene.Plane) void {
        const cFn = @extern(*const fn (*Plane, *graphene.Plane) callconv(.c) void, .{ .name = "graphene_plane_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn transform(self: *Plane, _matrix: *graphene.Matrix, _normal_matrix: ?*graphene.Matrix, _res: *graphene.Plane) void {
        const cFn = @extern(*const fn (*Plane, *graphene.Matrix, ?*graphene.Matrix, *graphene.Plane) callconv(.c) void, .{ .name = "graphene_plane_transform" });
        const ret = cFn(self, _matrix, _normal_matrix, _res);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_plane_get_type" });
        return cFn();
    }
};
pub const Point = extern struct {
    x: f32,
    y: f32,
    pub fn alloc() *Point {
        const cFn = @extern(*const fn () callconv(.c) *Point, .{ .name = "graphene_point_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn distance(self: *Point, _b: *graphene.Point) struct {
        ret: f32,
        d_x: f32,
        d_y: f32,
    } {
        var d_x_out: f32 = undefined;
        const _d_x = &d_x_out;
        var d_y_out: f32 = undefined;
        const _d_y = &d_y_out;
        const cFn = @extern(*const fn (*Point, *graphene.Point, ?*f32, ?*f32) callconv(.c) f32, .{ .name = "graphene_point_distance" });
        const ret = cFn(self, _b, _d_x, _d_y);
        return .{ .ret = ret, .d_x = d_x_out, .d_y = d_y_out };
    }
    pub fn equal(self: *Point, _b: *graphene.Point) bool {
        const cFn = @extern(*const fn (*Point, *graphene.Point) callconv(.c) bool, .{ .name = "graphene_point_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Point) void {
        const cFn = @extern(*const fn (*Point) callconv(.c) void, .{ .name = "graphene_point_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Point, _x: f32, _y: f32) *graphene.Point {
        const cFn = @extern(*const fn (*Point, f32, f32) callconv(.c) *graphene.Point, .{ .name = "graphene_point_init" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    pub fn initFromPoint(self: *Point, _src: *graphene.Point) *graphene.Point {
        const cFn = @extern(*const fn (*Point, *graphene.Point) callconv(.c) *graphene.Point, .{ .name = "graphene_point_init_from_point" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec2(self: *Point, _src: *graphene.Vec2) *graphene.Point {
        const cFn = @extern(*const fn (*Point, *graphene.Vec2) callconv(.c) *graphene.Point, .{ .name = "graphene_point_init_from_vec2" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn interpolate(self: *Point, _b: *graphene.Point, _factor: f64, _res: *graphene.Point) void {
        const cFn = @extern(*const fn (*Point, *graphene.Point, f64, *graphene.Point) callconv(.c) void, .{ .name = "graphene_point_interpolate" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn near(self: *Point, _b: *graphene.Point, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Point, *graphene.Point, f32) callconv(.c) bool, .{ .name = "graphene_point_near" });
        const ret = cFn(self, _b, _epsilon);
        return ret;
    }
    pub fn toVec2(self: *Point, _v: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Point, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_point_to_vec2" });
        const ret = cFn(self, _v);
        return ret;
    }
    pub fn zero() *graphene.Point {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Point, .{ .name = "graphene_point_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_point_get_type" });
        return cFn();
    }
};
pub const Point3D = extern struct {
    x: f32,
    y: f32,
    z: f32,
    pub fn alloc() *Point3D {
        const cFn = @extern(*const fn () callconv(.c) *Point3D, .{ .name = "graphene_point3d_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn cross(self: *Point3D, _b: *graphene.Point3D, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_point3d_cross" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn distance(self: *Point3D, _b: *graphene.Point3D, _delta: ?*graphene.Vec3) f32 {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D, ?*graphene.Vec3) callconv(.c) f32, .{ .name = "graphene_point3d_distance" });
        const ret = cFn(self, _b, _delta);
        return ret;
    }
    pub fn dot(self: *Point3D, _b: *graphene.Point3D) f32 {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D) callconv(.c) f32, .{ .name = "graphene_point3d_dot" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Point3D, _b: *graphene.Point3D) bool {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D) callconv(.c) bool, .{ .name = "graphene_point3d_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Point3D) void {
        const cFn = @extern(*const fn (*Point3D) callconv(.c) void, .{ .name = "graphene_point3d_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Point3D, _x: f32, _y: f32, _z: f32) *graphene.Point3D {
        const cFn = @extern(*const fn (*Point3D, f32, f32, f32) callconv(.c) *graphene.Point3D, .{ .name = "graphene_point3d_init" });
        const ret = cFn(self, _x, _y, _z);
        return ret;
    }
    pub fn initFromPoint(self: *Point3D, _src: *graphene.Point3D) *graphene.Point3D {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D) callconv(.c) *graphene.Point3D, .{ .name = "graphene_point3d_init_from_point" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec3(self: *Point3D, _v: *graphene.Vec3) *graphene.Point3D {
        const cFn = @extern(*const fn (*Point3D, *graphene.Vec3) callconv(.c) *graphene.Point3D, .{ .name = "graphene_point3d_init_from_vec3" });
        const ret = cFn(self, _v);
        return ret;
    }
    pub fn interpolate(self: *Point3D, _b: *graphene.Point3D, _factor: f64, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D, f64, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_point3d_interpolate" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn length(self: *Point3D) f32 {
        const cFn = @extern(*const fn (*Point3D) callconv(.c) f32, .{ .name = "graphene_point3d_length" });
        const ret = cFn(self);
        return ret;
    }
    pub fn near(self: *Point3D, _b: *graphene.Point3D, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D, f32) callconv(.c) bool, .{ .name = "graphene_point3d_near" });
        const ret = cFn(self, _b, _epsilon);
        return ret;
    }
    pub fn normalize(self: *Point3D, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Point3D, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_point3d_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn normalizeViewport(self: *Point3D, _viewport: *graphene.Rect, _z_near: f32, _z_far: f32, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Point3D, *graphene.Rect, f32, f32, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_point3d_normalize_viewport" });
        const ret = cFn(self, _viewport, _z_near, _z_far, _res);
        return ret;
    }
    pub fn scale(self: *Point3D, _factor: f32, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Point3D, f32, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_point3d_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn toVec3(self: *Point3D, _v: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Point3D, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_point3d_to_vec3" });
        const ret = cFn(self, _v);
        return ret;
    }
    pub fn zero() *graphene.Point3D {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Point3D, .{ .name = "graphene_point3d_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_point3d_get_type" });
        return cFn();
    }
};
pub const Quad = extern struct {
    points: [4]graphene.Point,
    pub fn alloc() *Quad {
        const cFn = @extern(*const fn () callconv(.c) *Quad, .{ .name = "graphene_quad_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn bounds(self: *Quad, _r: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Quad, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_quad_bounds" });
        const ret = cFn(self, _r);
        return ret;
    }
    pub fn contains(self: *Quad, _p: *graphene.Point) bool {
        const cFn = @extern(*const fn (*Quad, *graphene.Point) callconv(.c) bool, .{ .name = "graphene_quad_contains" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn free(self: *Quad) void {
        const cFn = @extern(*const fn (*Quad) callconv(.c) void, .{ .name = "graphene_quad_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getPoint(self: *Quad, _index_: u32) *graphene.Point {
        const cFn = @extern(*const fn (*Quad, u32) callconv(.c) *graphene.Point, .{ .name = "graphene_quad_get_point" });
        const ret = cFn(self, _index_);
        return ret;
    }
    pub fn init(self: *Quad, _p1: *graphene.Point, _p2: *graphene.Point, _p3: *graphene.Point, _p4: *graphene.Point) *graphene.Quad {
        const cFn = @extern(*const fn (*Quad, *graphene.Point, *graphene.Point, *graphene.Point, *graphene.Point) callconv(.c) *graphene.Quad, .{ .name = "graphene_quad_init" });
        const ret = cFn(self, _p1, _p2, _p3, _p4);
        return ret;
    }
    pub fn initFromPoints(self: *Quad, _points: *[4]graphene.Point) *graphene.Quad {
        const cFn = @extern(*const fn (*Quad, *[4]graphene.Point) callconv(.c) *graphene.Quad, .{ .name = "graphene_quad_init_from_points" });
        const ret = cFn(self, _points);
        return ret;
    }
    pub fn initFromRect(self: *Quad, _r: *graphene.Rect) *graphene.Quad {
        const cFn = @extern(*const fn (*Quad, *graphene.Rect) callconv(.c) *graphene.Quad, .{ .name = "graphene_quad_init_from_rect" });
        const ret = cFn(self, _r);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_quad_get_type" });
        return cFn();
    }
};
pub const Quaternion = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
    pub fn alloc() *Quaternion {
        const cFn = @extern(*const fn () callconv(.c) *Quaternion, .{ .name = "graphene_quaternion_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn add(self: *Quaternion, _b: *graphene.Quaternion, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_add" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn dot(self: *Quaternion, _b: *graphene.Quaternion) f32 {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion) callconv(.c) f32, .{ .name = "graphene_quaternion_dot" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Quaternion, _b: *graphene.Quaternion) bool {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion) callconv(.c) bool, .{ .name = "graphene_quaternion_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Quaternion, _x: f32, _y: f32, _z: f32, _w: f32) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, f32, f32, f32, f32) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init" });
        const ret = cFn(self, _x, _y, _z, _w);
        return ret;
    }
    pub fn initFromAngleVec3(self: *Quaternion, _angle: f32, _axis: *graphene.Vec3) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, f32, *graphene.Vec3) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_angle_vec3" });
        const ret = cFn(self, _angle, _axis);
        return ret;
    }
    pub fn initFromAngles(self: *Quaternion, _deg_x: f32, _deg_y: f32, _deg_z: f32) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, f32, f32, f32) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_angles" });
        const ret = cFn(self, _deg_x, _deg_y, _deg_z);
        return ret;
    }
    pub fn initFromEuler(self: *Quaternion, _e: *graphene.Euler) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Euler) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_euler" });
        const ret = cFn(self, _e);
        return ret;
    }
    pub fn initFromMatrix(self: *Quaternion, _m: *graphene.Matrix) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Matrix) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_matrix" });
        const ret = cFn(self, _m);
        return ret;
    }
    pub fn initFromQuaternion(self: *Quaternion, _src: *graphene.Quaternion) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_quaternion" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromRadians(self: *Quaternion, _rad_x: f32, _rad_y: f32, _rad_z: f32) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, f32, f32, f32) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_radians" });
        const ret = cFn(self, _rad_x, _rad_y, _rad_z);
        return ret;
    }
    pub fn initFromVec4(self: *Quaternion, _src: *graphene.Vec4) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Vec4) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_from_vec4" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initIdentity(self: *Quaternion) *graphene.Quaternion {
        const cFn = @extern(*const fn (*Quaternion) callconv(.c) *graphene.Quaternion, .{ .name = "graphene_quaternion_init_identity" });
        const ret = cFn(self);
        return ret;
    }
    pub fn invert(self: *Quaternion, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_invert" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn multiply(self: *Quaternion, _b: *graphene.Quaternion, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_multiply" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn normalize(self: *Quaternion, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn scale(self: *Quaternion, _factor: f32, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, f32, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn slerp(self: *Quaternion, _b: *graphene.Quaternion, _factor: f32, _res: *graphene.Quaternion) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Quaternion, f32, *graphene.Quaternion) callconv(.c) void, .{ .name = "graphene_quaternion_slerp" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn toAngleVec3(self: *Quaternion, _axis: *graphene.Vec3) struct {
        ret: void,
        angle: f32,
    } {
        var angle_out: f32 = undefined;
        const _angle = &angle_out;
        const cFn = @extern(*const fn (*Quaternion, *f32, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_quaternion_to_angle_vec3" });
        const ret = cFn(self, _angle, _axis);
        return .{ .ret = ret, .angle = angle_out };
    }
    pub fn toAngles(self: *Quaternion) struct {
        ret: void,
        deg_x: f32,
        deg_y: f32,
        deg_z: f32,
    } {
        var deg_x_out: f32 = undefined;
        const _deg_x = &deg_x_out;
        var deg_y_out: f32 = undefined;
        const _deg_y = &deg_y_out;
        var deg_z_out: f32 = undefined;
        const _deg_z = &deg_z_out;
        const cFn = @extern(*const fn (*Quaternion, ?*f32, ?*f32, ?*f32) callconv(.c) void, .{ .name = "graphene_quaternion_to_angles" });
        const ret = cFn(self, _deg_x, _deg_y, _deg_z);
        return .{ .ret = ret, .deg_x = deg_x_out, .deg_y = deg_y_out, .deg_z = deg_z_out };
    }
    pub fn toMatrix(self: *Quaternion, _m: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Matrix) callconv(.c) void, .{ .name = "graphene_quaternion_to_matrix" });
        const ret = cFn(self, _m);
        return ret;
    }
    pub fn toRadians(self: *Quaternion) struct {
        ret: void,
        rad_x: f32,
        rad_y: f32,
        rad_z: f32,
    } {
        var rad_x_out: f32 = undefined;
        const _rad_x = &rad_x_out;
        var rad_y_out: f32 = undefined;
        const _rad_y = &rad_y_out;
        var rad_z_out: f32 = undefined;
        const _rad_z = &rad_z_out;
        const cFn = @extern(*const fn (*Quaternion, ?*f32, ?*f32, ?*f32) callconv(.c) void, .{ .name = "graphene_quaternion_to_radians" });
        const ret = cFn(self, _rad_x, _rad_y, _rad_z);
        return .{ .ret = ret, .rad_x = rad_x_out, .rad_y = rad_y_out, .rad_z = rad_z_out };
    }
    pub fn toVec4(self: *Quaternion, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Quaternion, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_quaternion_to_vec4" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_quaternion_get_type" });
        return cFn();
    }
};
pub const Ray = extern struct {
    origin: graphene.Vec3,
    direction: graphene.Vec3,
    pub fn alloc() *Ray {
        const cFn = @extern(*const fn () callconv(.c) *Ray, .{ .name = "graphene_ray_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn equal(self: *Ray, _b: *graphene.Ray) bool {
        const cFn = @extern(*const fn (*Ray, *graphene.Ray) callconv(.c) bool, .{ .name = "graphene_ray_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Ray) void {
        const cFn = @extern(*const fn (*Ray) callconv(.c) void, .{ .name = "graphene_ray_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getClosestPointToPoint(self: *Ray, _p: *graphene.Point3D, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Ray, *graphene.Point3D, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_ray_get_closest_point_to_point" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn getDirection(self: *Ray, _direction: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Ray, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_ray_get_direction" });
        const ret = cFn(self, _direction);
        return ret;
    }
    pub fn getDistanceToPlane(self: *Ray, _p: *graphene.Plane) f32 {
        const cFn = @extern(*const fn (*Ray, *graphene.Plane) callconv(.c) f32, .{ .name = "graphene_ray_get_distance_to_plane" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getDistanceToPoint(self: *Ray, _p: *graphene.Point3D) f32 {
        const cFn = @extern(*const fn (*Ray, *graphene.Point3D) callconv(.c) f32, .{ .name = "graphene_ray_get_distance_to_point" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getOrigin(self: *Ray, _origin: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Ray, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_ray_get_origin" });
        const ret = cFn(self, _origin);
        return ret;
    }
    pub fn getPositionAt(self: *Ray, _t: f32, _position: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Ray, f32, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_ray_get_position_at" });
        const ret = cFn(self, _t, _position);
        return ret;
    }
    pub fn init(self: *Ray, _origin: ?*graphene.Point3D, _direction: ?*graphene.Vec3) *graphene.Ray {
        const cFn = @extern(*const fn (*Ray, ?*graphene.Point3D, ?*graphene.Vec3) callconv(.c) *graphene.Ray, .{ .name = "graphene_ray_init" });
        const ret = cFn(self, _origin, _direction);
        return ret;
    }
    pub fn initFromRay(self: *Ray, _src: *graphene.Ray) *graphene.Ray {
        const cFn = @extern(*const fn (*Ray, *graphene.Ray) callconv(.c) *graphene.Ray, .{ .name = "graphene_ray_init_from_ray" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec3(self: *Ray, _origin: ?*graphene.Vec3, _direction: ?*graphene.Vec3) *graphene.Ray {
        const cFn = @extern(*const fn (*Ray, ?*graphene.Vec3, ?*graphene.Vec3) callconv(.c) *graphene.Ray, .{ .name = "graphene_ray_init_from_vec3" });
        const ret = cFn(self, _origin, _direction);
        return ret;
    }
    pub fn intersectBox(self: *Ray, _b: *graphene.Box) struct {
        ret: graphene.RayIntersectionKind,
        t_out: f32,
    } {
        var t_out_out: f32 = undefined;
        const _t_out = &t_out_out;
        const cFn = @extern(*const fn (*Ray, *graphene.Box, *f32) callconv(.c) graphene.RayIntersectionKind, .{ .name = "graphene_ray_intersect_box" });
        const ret = cFn(self, _b, _t_out);
        return .{ .ret = ret, .t_out = t_out_out };
    }
    pub fn intersectSphere(self: *Ray, _s: *graphene.Sphere) struct {
        ret: graphene.RayIntersectionKind,
        t_out: f32,
    } {
        var t_out_out: f32 = undefined;
        const _t_out = &t_out_out;
        const cFn = @extern(*const fn (*Ray, *graphene.Sphere, *f32) callconv(.c) graphene.RayIntersectionKind, .{ .name = "graphene_ray_intersect_sphere" });
        const ret = cFn(self, _s, _t_out);
        return .{ .ret = ret, .t_out = t_out_out };
    }
    pub fn intersectTriangle(self: *Ray, _t: *graphene.Triangle) struct {
        ret: graphene.RayIntersectionKind,
        t_out: f32,
    } {
        var t_out_out: f32 = undefined;
        const _t_out = &t_out_out;
        const cFn = @extern(*const fn (*Ray, *graphene.Triangle, *f32) callconv(.c) graphene.RayIntersectionKind, .{ .name = "graphene_ray_intersect_triangle" });
        const ret = cFn(self, _t, _t_out);
        return .{ .ret = ret, .t_out = t_out_out };
    }
    pub fn intersectsBox(self: *Ray, _b: *graphene.Box) bool {
        const cFn = @extern(*const fn (*Ray, *graphene.Box) callconv(.c) bool, .{ .name = "graphene_ray_intersects_box" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn intersectsSphere(self: *Ray, _s: *graphene.Sphere) bool {
        const cFn = @extern(*const fn (*Ray, *graphene.Sphere) callconv(.c) bool, .{ .name = "graphene_ray_intersects_sphere" });
        const ret = cFn(self, _s);
        return ret;
    }
    pub fn intersectsTriangle(self: *Ray, _t: *graphene.Triangle) bool {
        const cFn = @extern(*const fn (*Ray, *graphene.Triangle) callconv(.c) bool, .{ .name = "graphene_ray_intersects_triangle" });
        const ret = cFn(self, _t);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_ray_get_type" });
        return cFn();
    }
};
pub const RayIntersectionKind = enum(u32) {
    none = 0,
    enter = 1,
    leave = 2,
};
pub const Rect = extern struct {
    origin: graphene.Point,
    size: graphene.Size,
    pub fn containsPoint(self: *Rect, _p: *graphene.Point) bool {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) bool, .{ .name = "graphene_rect_contains_point" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn containsRect(self: *Rect, _b: *graphene.Rect) bool {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) bool, .{ .name = "graphene_rect_contains_rect" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Rect, _b: *graphene.Rect) bool {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) bool, .{ .name = "graphene_rect_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn expand(self: *Rect, _p: *graphene.Point, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_expand" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn free(self: *Rect) void {
        const cFn = @extern(*const fn (*Rect) callconv(.c) void, .{ .name = "graphene_rect_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getArea(self: *Rect) f32 {
        const cFn = @extern(*const fn (*Rect) callconv(.c) f32, .{ .name = "graphene_rect_get_area" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getBottomLeft(self: *Rect, _p: *graphene.Point) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) void, .{ .name = "graphene_rect_get_bottom_left" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getBottomRight(self: *Rect, _p: *graphene.Point) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) void, .{ .name = "graphene_rect_get_bottom_right" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getCenter(self: *Rect, _p: *graphene.Point) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) void, .{ .name = "graphene_rect_get_center" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getHeight(self: *Rect) f32 {
        const cFn = @extern(*const fn (*Rect) callconv(.c) f32, .{ .name = "graphene_rect_get_height" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getTopLeft(self: *Rect, _p: *graphene.Point) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) void, .{ .name = "graphene_rect_get_top_left" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getTopRight(self: *Rect, _p: *graphene.Point) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Point) callconv(.c) void, .{ .name = "graphene_rect_get_top_right" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn getVertices(self: *Rect, _vertices: *[4]graphene.Vec2) void {
        const cFn = @extern(*const fn (*Rect, *[4]graphene.Vec2) callconv(.c) void, .{ .name = "graphene_rect_get_vertices" });
        const ret = cFn(self, _vertices);
        return ret;
    }
    pub fn getWidth(self: *Rect) f32 {
        const cFn = @extern(*const fn (*Rect) callconv(.c) f32, .{ .name = "graphene_rect_get_width" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getX(self: *Rect) f32 {
        const cFn = @extern(*const fn (*Rect) callconv(.c) f32, .{ .name = "graphene_rect_get_x" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getY(self: *Rect) f32 {
        const cFn = @extern(*const fn (*Rect) callconv(.c) f32, .{ .name = "graphene_rect_get_y" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Rect, _x: f32, _y: f32, _width: f32, _height: f32) *graphene.Rect {
        const cFn = @extern(*const fn (*Rect, f32, f32, f32, f32) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_init" });
        const ret = cFn(self, _x, _y, _width, _height);
        return ret;
    }
    pub fn initFromRect(self: *Rect, _src: *graphene.Rect) *graphene.Rect {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_init_from_rect" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn inset(self: *Rect, _d_x: f32, _d_y: f32) *graphene.Rect {
        const cFn = @extern(*const fn (*Rect, f32, f32) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_inset" });
        const ret = cFn(self, _d_x, _d_y);
        return ret;
    }
    pub fn insetR(self: *Rect, _d_x: f32, _d_y: f32, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, f32, f32, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_inset_r" });
        const ret = cFn(self, _d_x, _d_y, _res);
        return ret;
    }
    pub fn interpolate(self: *Rect, _b: *graphene.Rect, _factor: f64, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect, f64, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_interpolate" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn intersection(self: *Rect, _b: *graphene.Rect, _res: ?*graphene.Rect) bool {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect, ?*graphene.Rect) callconv(.c) bool, .{ .name = "graphene_rect_intersection" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn normalize(self: *Rect) *graphene.Rect {
        const cFn = @extern(*const fn (*Rect) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_normalize" });
        const ret = cFn(self);
        return ret;
    }
    pub fn normalizeR(self: *Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_normalize_r" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn offset(self: *Rect, _d_x: f32, _d_y: f32) *graphene.Rect {
        const cFn = @extern(*const fn (*Rect, f32, f32) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_offset" });
        const ret = cFn(self, _d_x, _d_y);
        return ret;
    }
    pub fn offsetR(self: *Rect, _d_x: f32, _d_y: f32, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, f32, f32, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_offset_r" });
        const ret = cFn(self, _d_x, _d_y, _res);
        return ret;
    }
    pub const round = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn round(self: *Rect, _res: *graphene.Rect) void {
            const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_round" });
            const ret = cFn(self, _res);
            return ret;
        }
    }.round;
    pub fn roundExtents(self: *Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_round_extents" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub const roundToPixel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn roundToPixel(self: *Rect) *graphene.Rect {
            const cFn = @extern(*const fn (*Rect) callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_round_to_pixel" });
            const ret = cFn(self);
            return ret;
        }
    }.roundToPixel;
    pub fn scale(self: *Rect, _s_h: f32, _s_v: f32, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, f32, f32, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_scale" });
        const ret = cFn(self, _s_h, _s_v, _res);
        return ret;
    }
    pub fn @"union"(self: *Rect, _b: *graphene.Rect, _res: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Rect, *graphene.Rect, *graphene.Rect) callconv(.c) void, .{ .name = "graphene_rect_union" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn alloc() *graphene.Rect {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn zero() *graphene.Rect {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_rect_get_type" });
        return cFn();
    }
};
pub const Simd4F = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
};
pub const Simd4X4F = extern struct {
    x: graphene.Simd4F align(16),
    y: graphene.Simd4F align(16),
    z: graphene.Simd4F align(16),
    w: graphene.Simd4F align(16),
};
pub const Size = extern struct {
    width: f32,
    height: f32,
    pub fn alloc() *Size {
        const cFn = @extern(*const fn () callconv(.c) *Size, .{ .name = "graphene_size_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn equal(self: *Size, _b: *graphene.Size) bool {
        const cFn = @extern(*const fn (*Size, *graphene.Size) callconv(.c) bool, .{ .name = "graphene_size_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Size) void {
        const cFn = @extern(*const fn (*Size) callconv(.c) void, .{ .name = "graphene_size_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Size, _width: f32, _height: f32) *graphene.Size {
        const cFn = @extern(*const fn (*Size, f32, f32) callconv(.c) *graphene.Size, .{ .name = "graphene_size_init" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    pub fn initFromSize(self: *Size, _src: *graphene.Size) *graphene.Size {
        const cFn = @extern(*const fn (*Size, *graphene.Size) callconv(.c) *graphene.Size, .{ .name = "graphene_size_init_from_size" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn interpolate(self: *Size, _b: *graphene.Size, _factor: f64, _res: *graphene.Size) void {
        const cFn = @extern(*const fn (*Size, *graphene.Size, f64, *graphene.Size) callconv(.c) void, .{ .name = "graphene_size_interpolate" });
        const ret = cFn(self, _b, _factor, _res);
        return ret;
    }
    pub fn scale(self: *Size, _factor: f32, _res: *graphene.Size) void {
        const cFn = @extern(*const fn (*Size, f32, *graphene.Size) callconv(.c) void, .{ .name = "graphene_size_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn zero() *graphene.Size {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Size, .{ .name = "graphene_size_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_size_get_type" });
        return cFn();
    }
};
pub const Sphere = extern struct {
    center: graphene.Vec3,
    radius: f32,
    pub fn alloc() *Sphere {
        const cFn = @extern(*const fn () callconv(.c) *Sphere, .{ .name = "graphene_sphere_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn containsPoint(self: *Sphere, _point: *graphene.Point3D) bool {
        const cFn = @extern(*const fn (*Sphere, *graphene.Point3D) callconv(.c) bool, .{ .name = "graphene_sphere_contains_point" });
        const ret = cFn(self, _point);
        return ret;
    }
    pub fn distance(self: *Sphere, _point: *graphene.Point3D) f32 {
        const cFn = @extern(*const fn (*Sphere, *graphene.Point3D) callconv(.c) f32, .{ .name = "graphene_sphere_distance" });
        const ret = cFn(self, _point);
        return ret;
    }
    pub fn equal(self: *Sphere, _b: *graphene.Sphere) bool {
        const cFn = @extern(*const fn (*Sphere, *graphene.Sphere) callconv(.c) bool, .{ .name = "graphene_sphere_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Sphere) void {
        const cFn = @extern(*const fn (*Sphere) callconv(.c) void, .{ .name = "graphene_sphere_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getBoundingBox(self: *Sphere, _box: *graphene.Box) void {
        const cFn = @extern(*const fn (*Sphere, *graphene.Box) callconv(.c) void, .{ .name = "graphene_sphere_get_bounding_box" });
        const ret = cFn(self, _box);
        return ret;
    }
    pub fn getCenter(self: *Sphere, _center: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Sphere, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_sphere_get_center" });
        const ret = cFn(self, _center);
        return ret;
    }
    pub fn getRadius(self: *Sphere) f32 {
        const cFn = @extern(*const fn (*Sphere) callconv(.c) f32, .{ .name = "graphene_sphere_get_radius" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Sphere, _center: ?*graphene.Point3D, _radius: f32) *graphene.Sphere {
        const cFn = @extern(*const fn (*Sphere, ?*graphene.Point3D, f32) callconv(.c) *graphene.Sphere, .{ .name = "graphene_sphere_init" });
        const ret = cFn(self, _center, _radius);
        return ret;
    }
    pub fn initFromPoints(self: *Sphere, _pointss: []graphene.Point3D, _center: ?*graphene.Point3D) *graphene.Sphere {
        const _n_points: u32 = @intCast(_pointss.len);
        const _points = _pointss.ptr;
        const cFn = @extern(*const fn (*Sphere, u32, [*]graphene.Point3D, ?*graphene.Point3D) callconv(.c) *graphene.Sphere, .{ .name = "graphene_sphere_init_from_points" });
        const ret = cFn(self, _n_points, _points, _center);
        return ret;
    }
    pub fn initFromVectors(self: *Sphere, _vectorss: []graphene.Vec3, _center: ?*graphene.Point3D) *graphene.Sphere {
        const _n_vectors: u32 = @intCast(_vectorss.len);
        const _vectors = _vectorss.ptr;
        const cFn = @extern(*const fn (*Sphere, u32, [*]graphene.Vec3, ?*graphene.Point3D) callconv(.c) *graphene.Sphere, .{ .name = "graphene_sphere_init_from_vectors" });
        const ret = cFn(self, _n_vectors, _vectors, _center);
        return ret;
    }
    pub fn isEmpty(self: *Sphere) bool {
        const cFn = @extern(*const fn (*Sphere) callconv(.c) bool, .{ .name = "graphene_sphere_is_empty" });
        const ret = cFn(self);
        return ret;
    }
    pub fn translate(self: *Sphere, _point: *graphene.Point3D, _res: *graphene.Sphere) void {
        const cFn = @extern(*const fn (*Sphere, *graphene.Point3D, *graphene.Sphere) callconv(.c) void, .{ .name = "graphene_sphere_translate" });
        const ret = cFn(self, _point, _res);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_sphere_get_type" });
        return cFn();
    }
};
pub const Triangle = extern struct {
    a: graphene.Vec3,
    b: graphene.Vec3,
    c: graphene.Vec3,
    pub fn alloc() *Triangle {
        const cFn = @extern(*const fn () callconv(.c) *Triangle, .{ .name = "graphene_triangle_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn containsPoint(self: *Triangle, _p: *graphene.Point3D) bool {
        const cFn = @extern(*const fn (*Triangle, *graphene.Point3D) callconv(.c) bool, .{ .name = "graphene_triangle_contains_point" });
        const ret = cFn(self, _p);
        return ret;
    }
    pub fn equal(self: *Triangle, _b: *graphene.Triangle) bool {
        const cFn = @extern(*const fn (*Triangle, *graphene.Triangle) callconv(.c) bool, .{ .name = "graphene_triangle_equal" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn free(self: *Triangle) void {
        const cFn = @extern(*const fn (*Triangle) callconv(.c) void, .{ .name = "graphene_triangle_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getArea(self: *Triangle) f32 {
        const cFn = @extern(*const fn (*Triangle) callconv(.c) f32, .{ .name = "graphene_triangle_get_area" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getBarycoords(self: *Triangle, _p: ?*graphene.Point3D, _res: *graphene.Vec2) bool {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Point3D, *graphene.Vec2) callconv(.c) bool, .{ .name = "graphene_triangle_get_barycoords" });
        const ret = cFn(self, _p, _res);
        return ret;
    }
    pub fn getBoundingBox(self: *Triangle, _res: *graphene.Box) void {
        const cFn = @extern(*const fn (*Triangle, *graphene.Box) callconv(.c) void, .{ .name = "graphene_triangle_get_bounding_box" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getMidpoint(self: *Triangle, _res: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Triangle, *graphene.Point3D) callconv(.c) void, .{ .name = "graphene_triangle_get_midpoint" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getNormal(self: *Triangle, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Triangle, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_triangle_get_normal" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getPlane(self: *Triangle, _res: *graphene.Plane) void {
        const cFn = @extern(*const fn (*Triangle, *graphene.Plane) callconv(.c) void, .{ .name = "graphene_triangle_get_plane" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getPoints(self: *Triangle, _a: ?*graphene.Point3D, _b: ?*graphene.Point3D, _c: ?*graphene.Point3D) void {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Point3D, ?*graphene.Point3D, ?*graphene.Point3D) callconv(.c) void, .{ .name = "graphene_triangle_get_points" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn getUv(self: *Triangle, _p: ?*graphene.Point3D, _uv_a: *graphene.Vec2, _uv_b: *graphene.Vec2, _uv_c: *graphene.Vec2, _res: *graphene.Vec2) bool {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Point3D, *graphene.Vec2, *graphene.Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) bool, .{ .name = "graphene_triangle_get_uv" });
        const ret = cFn(self, _p, _uv_a, _uv_b, _uv_c, _res);
        return ret;
    }
    pub fn getVertices(self: *Triangle, _a: ?*graphene.Vec3, _b: ?*graphene.Vec3, _c: ?*graphene.Vec3) void {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Vec3, ?*graphene.Vec3, ?*graphene.Vec3) callconv(.c) void, .{ .name = "graphene_triangle_get_vertices" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn initFromFloat(self: *Triangle, _a: *[3]f32, _b: *[3]f32, _c: *[3]f32) *graphene.Triangle {
        const cFn = @extern(*const fn (*Triangle, *[3]f32, *[3]f32, *[3]f32) callconv(.c) *graphene.Triangle, .{ .name = "graphene_triangle_init_from_float" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn initFromPoint3d(self: *Triangle, _a: ?*graphene.Point3D, _b: ?*graphene.Point3D, _c: ?*graphene.Point3D) *graphene.Triangle {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Point3D, ?*graphene.Point3D, ?*graphene.Point3D) callconv(.c) *graphene.Triangle, .{ .name = "graphene_triangle_init_from_point3d" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn initFromVec3(self: *Triangle, _a: ?*graphene.Vec3, _b: ?*graphene.Vec3, _c: ?*graphene.Vec3) *graphene.Triangle {
        const cFn = @extern(*const fn (*Triangle, ?*graphene.Vec3, ?*graphene.Vec3, ?*graphene.Vec3) callconv(.c) *graphene.Triangle, .{ .name = "graphene_triangle_init_from_vec3" });
        const ret = cFn(self, _a, _b, _c);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_triangle_get_type" });
        return cFn();
    }
};
pub const VEC2_LEN = 2;
pub const VEC3_LEN = 3;
pub const VEC4_LEN = 4;
pub const Vec2 = extern struct {
    value: graphene.Simd4F align(16),
    pub fn alloc() *Vec2 {
        const cFn = @extern(*const fn () callconv(.c) *Vec2, .{ .name = "graphene_vec2_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn add(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_add" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn divide(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_divide" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn dot(self: *Vec2, _b: *graphene.Vec2) f32 {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2) callconv(.c) f32, .{ .name = "graphene_vec2_dot" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Vec2, _v2: *graphene.Vec2) bool {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2) callconv(.c) bool, .{ .name = "graphene_vec2_equal" });
        const ret = cFn(self, _v2);
        return ret;
    }
    pub fn free(self: *Vec2) void {
        const cFn = @extern(*const fn (*Vec2) callconv(.c) void, .{ .name = "graphene_vec2_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getX(self: *Vec2) f32 {
        const cFn = @extern(*const fn (*Vec2) callconv(.c) f32, .{ .name = "graphene_vec2_get_x" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getY(self: *Vec2) f32 {
        const cFn = @extern(*const fn (*Vec2) callconv(.c) f32, .{ .name = "graphene_vec2_get_y" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Vec2, _x: f32, _y: f32) *graphene.Vec2 {
        const cFn = @extern(*const fn (*Vec2, f32, f32) callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_init" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    pub fn initFromFloat(self: *Vec2, _src: *[2]f32) *graphene.Vec2 {
        const cFn = @extern(*const fn (*Vec2, *[2]f32) callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_init_from_float" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec2(self: *Vec2, _src: *graphene.Vec2) *graphene.Vec2 {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2) callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_init_from_vec2" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn interpolate(self: *Vec2, _v2: *graphene.Vec2, _factor: f64, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, f64, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_interpolate" });
        const ret = cFn(self, _v2, _factor, _res);
        return ret;
    }
    pub fn length(self: *Vec2) f32 {
        const cFn = @extern(*const fn (*Vec2) callconv(.c) f32, .{ .name = "graphene_vec2_length" });
        const ret = cFn(self);
        return ret;
    }
    pub fn max(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_max" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn min(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_min" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn multiply(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_multiply" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn near(self: *Vec2, _v2: *graphene.Vec2, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, f32) callconv(.c) bool, .{ .name = "graphene_vec2_near" });
        const ret = cFn(self, _v2, _epsilon);
        return ret;
    }
    pub fn negate(self: *Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_negate" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn normalize(self: *Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn scale(self: *Vec2, _factor: f32, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, f32, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn subtract(self: *Vec2, _b: *graphene.Vec2, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec2, *graphene.Vec2, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec2_subtract" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn toFloat(self: *Vec2, _dest: *[2]f32) void {
        const cFn = @extern(*const fn (*Vec2, *[2]f32) callconv(.c) void, .{ .name = "graphene_vec2_to_float" });
        const ret = cFn(self, _dest);
        return ret;
    }
    pub fn one() *graphene.Vec2 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_one" });
        const ret = cFn();
        return ret;
    }
    pub fn xAxis() *graphene.Vec2 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_x_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn yAxis() *graphene.Vec2 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_y_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn zero() *graphene.Vec2 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_vec2_get_type" });
        return cFn();
    }
};
pub const Vec3 = extern struct {
    value: graphene.Simd4F align(16),
    pub fn alloc() *Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *Vec3, .{ .name = "graphene_vec3_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn add(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_add" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn cross(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_cross" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn divide(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_divide" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn dot(self: *Vec3, _b: *graphene.Vec3) f32 {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) f32, .{ .name = "graphene_vec3_dot" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Vec3, _v2: *graphene.Vec3) bool {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) bool, .{ .name = "graphene_vec3_equal" });
        const ret = cFn(self, _v2);
        return ret;
    }
    pub fn free(self: *Vec3) void {
        const cFn = @extern(*const fn (*Vec3) callconv(.c) void, .{ .name = "graphene_vec3_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getX(self: *Vec3) f32 {
        const cFn = @extern(*const fn (*Vec3) callconv(.c) f32, .{ .name = "graphene_vec3_get_x" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getXy(self: *Vec3, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec3_get_xy" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getXy0(self: *Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_get_xy0" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getXyz0(self: *Vec3, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec3_get_xyz0" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getXyz1(self: *Vec3, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec3_get_xyz1" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getXyzw(self: *Vec3, _w: f32, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec3, f32, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec3_get_xyzw" });
        const ret = cFn(self, _w, _res);
        return ret;
    }
    pub fn getY(self: *Vec3) f32 {
        const cFn = @extern(*const fn (*Vec3) callconv(.c) f32, .{ .name = "graphene_vec3_get_y" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getZ(self: *Vec3) f32 {
        const cFn = @extern(*const fn (*Vec3) callconv(.c) f32, .{ .name = "graphene_vec3_get_z" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Vec3, _x: f32, _y: f32, _z: f32) *graphene.Vec3 {
        const cFn = @extern(*const fn (*Vec3, f32, f32, f32) callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_init" });
        const ret = cFn(self, _x, _y, _z);
        return ret;
    }
    pub fn initFromFloat(self: *Vec3, _src: *[3]f32) *graphene.Vec3 {
        const cFn = @extern(*const fn (*Vec3, *[3]f32) callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_init_from_float" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec3(self: *Vec3, _src: *graphene.Vec3) *graphene.Vec3 {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_init_from_vec3" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn interpolate(self: *Vec3, _v2: *graphene.Vec3, _factor: f64, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, f64, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_interpolate" });
        const ret = cFn(self, _v2, _factor, _res);
        return ret;
    }
    pub fn length(self: *Vec3) f32 {
        const cFn = @extern(*const fn (*Vec3) callconv(.c) f32, .{ .name = "graphene_vec3_length" });
        const ret = cFn(self);
        return ret;
    }
    pub fn max(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_max" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn min(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_min" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn multiply(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_multiply" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn near(self: *Vec3, _v2: *graphene.Vec3, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, f32) callconv(.c) bool, .{ .name = "graphene_vec3_near" });
        const ret = cFn(self, _v2, _epsilon);
        return ret;
    }
    pub fn negate(self: *Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_negate" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn normalize(self: *Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn scale(self: *Vec3, _factor: f32, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, f32, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn subtract(self: *Vec3, _b: *graphene.Vec3, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec3, *graphene.Vec3, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec3_subtract" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn toFloat(self: *Vec3, _dest: *[3]f32) void {
        const cFn = @extern(*const fn (*Vec3, *[3]f32) callconv(.c) void, .{ .name = "graphene_vec3_to_float" });
        const ret = cFn(self, _dest);
        return ret;
    }
    pub fn one() *graphene.Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_one" });
        const ret = cFn();
        return ret;
    }
    pub fn xAxis() *graphene.Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_x_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn yAxis() *graphene.Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_y_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn zAxis() *graphene.Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_z_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn zero() *graphene.Vec3 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_vec3_get_type" });
        return cFn();
    }
};
pub const Vec4 = extern struct {
    value: graphene.Simd4F align(16),
    pub fn alloc() *Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *Vec4, .{ .name = "graphene_vec4_alloc" });
        const ret = cFn();
        return ret;
    }
    pub fn add(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_add" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn divide(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_divide" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn dot(self: *Vec4, _b: *graphene.Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_dot" });
        const ret = cFn(self, _b);
        return ret;
    }
    pub fn equal(self: *Vec4, _v2: *graphene.Vec4) bool {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4) callconv(.c) bool, .{ .name = "graphene_vec4_equal" });
        const ret = cFn(self, _v2);
        return ret;
    }
    pub fn free(self: *Vec4) void {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) void, .{ .name = "graphene_vec4_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getW(self: *Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_get_w" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getX(self: *Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_get_x" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getXy(self: *Vec4, _res: *graphene.Vec2) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec2) callconv(.c) void, .{ .name = "graphene_vec4_get_xy" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getXyz(self: *Vec4, _res: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec3) callconv(.c) void, .{ .name = "graphene_vec4_get_xyz" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn getY(self: *Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_get_y" });
        const ret = cFn(self);
        return ret;
    }
    pub fn getZ(self: *Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_get_z" });
        const ret = cFn(self);
        return ret;
    }
    pub fn init(self: *Vec4, _x: f32, _y: f32, _z: f32, _w: f32) *graphene.Vec4 {
        const cFn = @extern(*const fn (*Vec4, f32, f32, f32, f32) callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_init" });
        const ret = cFn(self, _x, _y, _z, _w);
        return ret;
    }
    pub fn initFromFloat(self: *Vec4, _src: *[4]f32) *graphene.Vec4 {
        const cFn = @extern(*const fn (*Vec4, *[4]f32) callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_init_from_float" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn initFromVec2(self: *Vec4, _src: *graphene.Vec2, _z: f32, _w: f32) *graphene.Vec4 {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec2, f32, f32) callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_init_from_vec2" });
        const ret = cFn(self, _src, _z, _w);
        return ret;
    }
    pub fn initFromVec3(self: *Vec4, _src: *graphene.Vec3, _w: f32) *graphene.Vec4 {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec3, f32) callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_init_from_vec3" });
        const ret = cFn(self, _src, _w);
        return ret;
    }
    pub fn initFromVec4(self: *Vec4, _src: *graphene.Vec4) *graphene.Vec4 {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4) callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_init_from_vec4" });
        const ret = cFn(self, _src);
        return ret;
    }
    pub fn interpolate(self: *Vec4, _v2: *graphene.Vec4, _factor: f64, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, f64, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_interpolate" });
        const ret = cFn(self, _v2, _factor, _res);
        return ret;
    }
    pub fn length(self: *Vec4) f32 {
        const cFn = @extern(*const fn (*Vec4) callconv(.c) f32, .{ .name = "graphene_vec4_length" });
        const ret = cFn(self);
        return ret;
    }
    pub fn max(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_max" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn min(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_min" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn multiply(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_multiply" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn near(self: *Vec4, _v2: *graphene.Vec4, _epsilon: f32) bool {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, f32) callconv(.c) bool, .{ .name = "graphene_vec4_near" });
        const ret = cFn(self, _v2, _epsilon);
        return ret;
    }
    pub fn negate(self: *Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_negate" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn normalize(self: *Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_normalize" });
        const ret = cFn(self, _res);
        return ret;
    }
    pub fn scale(self: *Vec4, _factor: f32, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, f32, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_scale" });
        const ret = cFn(self, _factor, _res);
        return ret;
    }
    pub fn subtract(self: *Vec4, _b: *graphene.Vec4, _res: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Vec4, *graphene.Vec4, *graphene.Vec4) callconv(.c) void, .{ .name = "graphene_vec4_subtract" });
        const ret = cFn(self, _b, _res);
        return ret;
    }
    pub fn toFloat(self: *Vec4, _dest: *[4]f32) void {
        const cFn = @extern(*const fn (*Vec4, *[4]f32) callconv(.c) void, .{ .name = "graphene_vec4_to_float" });
        const ret = cFn(self, _dest);
        return ret;
    }
    pub fn one() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_one" });
        const ret = cFn();
        return ret;
    }
    pub fn wAxis() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_w_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn xAxis() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_x_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn yAxis() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_y_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn zAxis() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_z_axis" });
        const ret = cFn();
        return ret;
    }
    pub fn zero() *graphene.Vec4 {
        const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_zero" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "graphene_vec4_get_type" });
        return cFn();
    }
};
pub fn boxEmpty() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_empty" });
    const ret = cFn();
    return ret;
}
pub fn boxInfinite() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_infinite" });
    const ret = cFn();
    return ret;
}
pub fn boxMinusOne() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_minus_one" });
    const ret = cFn();
    return ret;
}
pub fn boxOne() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_one" });
    const ret = cFn();
    return ret;
}
pub fn boxOneMinusOne() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_one_minus_one" });
    const ret = cFn();
    return ret;
}
pub fn boxZero() *graphene.Box {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Box, .{ .name = "graphene_box_zero" });
    const ret = cFn();
    return ret;
}
pub fn point3dZero() *graphene.Point3D {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Point3D, .{ .name = "graphene_point3d_zero" });
    const ret = cFn();
    return ret;
}
pub fn pointZero() *graphene.Point {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Point, .{ .name = "graphene_point_zero" });
    const ret = cFn();
    return ret;
}
pub fn rectAlloc() *graphene.Rect {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_alloc" });
    const ret = cFn();
    return ret;
}
pub fn rectZero() *graphene.Rect {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Rect, .{ .name = "graphene_rect_zero" });
    const ret = cFn();
    return ret;
}
pub fn sizeZero() *graphene.Size {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Size, .{ .name = "graphene_size_zero" });
    const ret = cFn();
    return ret;
}
pub fn vec2One() *graphene.Vec2 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_one" });
    const ret = cFn();
    return ret;
}
pub fn vec2XAxis() *graphene.Vec2 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_x_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec2YAxis() *graphene.Vec2 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_y_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec2Zero() *graphene.Vec2 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec2, .{ .name = "graphene_vec2_zero" });
    const ret = cFn();
    return ret;
}
pub fn vec3One() *graphene.Vec3 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_one" });
    const ret = cFn();
    return ret;
}
pub fn vec3XAxis() *graphene.Vec3 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_x_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec3YAxis() *graphene.Vec3 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_y_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec3ZAxis() *graphene.Vec3 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_z_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec3Zero() *graphene.Vec3 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec3, .{ .name = "graphene_vec3_zero" });
    const ret = cFn();
    return ret;
}
pub fn vec4One() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_one" });
    const ret = cFn();
    return ret;
}
pub fn vec4WAxis() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_w_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec4XAxis() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_x_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec4YAxis() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_y_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec4ZAxis() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_z_axis" });
    const ret = cFn();
    return ret;
}
pub fn vec4Zero() *graphene.Vec4 {
    const cFn = @extern(*const fn () callconv(.c) *graphene.Vec4, .{ .name = "graphene_vec4_zero" });
    const ret = cFn();
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
