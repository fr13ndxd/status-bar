// This file is auto-generated by zig-gir-ffi
const harf_buzz = @This();
pub const gobject = @import("gobject");
pub const glib = @import("glib");
pub const freetype2 = @import("freetype2");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
pub const AAT_LAYOUT_NO_SELECTOR_INDEX = 65535;
pub const BUFFER_REPLACEMENT_CODEPOINT_DEFAULT = 65533;
pub const CODEPOINT_INVALID = 4294967295;
pub const FEATURE_GLOBAL_START = 0;
pub const FONT_NO_VAR_NAMED_INSTANCE = -1;
pub const LANGUAGE_INVALID = null;
pub const OT_LAYOUT_DEFAULT_LANGUAGE_INDEX = 65535;
pub const OT_LAYOUT_NO_FEATURE_INDEX = 65535;
pub const OT_LAYOUT_NO_SCRIPT_INDEX = 65535;
pub const OT_LAYOUT_NO_VARIATIONS_INDEX = -1;
pub const OT_MAX_TAGS_PER_LANGUAGE = 3;
pub const OT_MAX_TAGS_PER_SCRIPT = 3;
pub const OT_VAR_NO_AXIS_INDEX = if (config.disable_deprecated) core.Deprecated else -1;
pub const UNICODE_COMBINING_CLASS_CCC133 = if (config.disable_deprecated) core.Deprecated else 133;
pub const UNICODE_MAX = 1114111;
pub const UNICODE_MAX_DECOMPOSITION_LEN = if (config.disable_deprecated) core.Deprecated else 19;
pub const VERSION_MAJOR = 9;
pub const VERSION_MICRO = 0;
pub const VERSION_MINOR = 0;
pub const VERSION_STRING = "9.0.0";
pub const aat_layout_feature_selector_info_t = extern struct {
    name_id: u32,
    enable: harf_buzz.aat_layout_feature_selector_t,
    disable: harf_buzz.aat_layout_feature_selector_t,
    reserved: u32,
};
pub const aat_layout_feature_selector_t = enum(u32) {
    invalid = 65535,
    all_type_features_on = 0,
    all_type_features_off = 1,
    common_ligatures_on = 2,
    common_ligatures_off = 3,
    rare_ligatures_on = 4,
    rare_ligatures_off = 5,
    logos_on = 6,
    logos_off = 7,
    rebus_pictures_on = 8,
    rebus_pictures_off = 9,
    diphthong_ligatures_on = 10,
    diphthong_ligatures_off = 11,
    squared_ligatures_on = 12,
    squared_ligatures_off = 13,
    abbrev_squared_ligatures_on = 14,
    abbrev_squared_ligatures_off = 15,
    symbol_ligatures_on = 16,
    symbol_ligatures_off = 17,
    contextual_ligatures_on = 18,
    contextual_ligatures_off = 19,
    historical_ligatures_on = 20,
    historical_ligatures_off = 21,
    stylistic_alt_eleven_on = 22,
    stylistic_alt_eleven_off = 23,
    stylistic_alt_twelve_on = 24,
    stylistic_alt_twelve_off = 25,
    stylistic_alt_thirteen_on = 26,
    stylistic_alt_thirteen_off = 27,
    stylistic_alt_fourteen_on = 28,
    stylistic_alt_fourteen_off = 29,
    stylistic_alt_fifteen_on = 30,
    stylistic_alt_fifteen_off = 31,
    stylistic_alt_sixteen_on = 32,
    stylistic_alt_sixteen_off = 33,
    stylistic_alt_seventeen_on = 34,
    stylistic_alt_seventeen_off = 35,
    stylistic_alt_eighteen_on = 36,
    stylistic_alt_eighteen_off = 37,
    stylistic_alt_nineteen_on = 38,
    stylistic_alt_nineteen_off = 39,
    stylistic_alt_twenty_on = 40,
    stylistic_alt_twenty_off = 41,
    pub const required_ligatures_on: @This() = @enumFromInt(0);
    pub const required_ligatures_off: @This() = @enumFromInt(1);
    pub const unconnected: @This() = @enumFromInt(0);
    pub const partially_connected: @This() = @enumFromInt(1);
    pub const cursive: @This() = @enumFromInt(2);
    pub const upper_and_lower_case: @This() = @enumFromInt(0);
    pub const all_caps: @This() = @enumFromInt(1);
    pub const all_lower_case: @This() = @enumFromInt(2);
    pub const small_caps: @This() = @enumFromInt(3);
    pub const initial_caps: @This() = @enumFromInt(4);
    pub const initial_caps_and_small_caps: @This() = @enumFromInt(5);
    pub const substitute_vertical_forms_on: @This() = @enumFromInt(0);
    pub const substitute_vertical_forms_off: @This() = @enumFromInt(1);
    pub const linguistic_rearrangement_on: @This() = @enumFromInt(0);
    pub const linguistic_rearrangement_off: @This() = @enumFromInt(1);
    pub const monospaced_numbers: @This() = @enumFromInt(0);
    pub const proportional_numbers: @This() = @enumFromInt(1);
    pub const third_width_numbers: @This() = @enumFromInt(2);
    pub const quarter_width_numbers: @This() = @enumFromInt(3);
    pub const word_initial_swashes_on: @This() = @enumFromInt(0);
    pub const word_initial_swashes_off: @This() = @enumFromInt(1);
    pub const word_final_swashes_on: @This() = @enumFromInt(2);
    pub const word_final_swashes_off: @This() = @enumFromInt(3);
    pub const line_initial_swashes_on: @This() = @enumFromInt(4);
    pub const line_initial_swashes_off: @This() = @enumFromInt(5);
    pub const line_final_swashes_on: @This() = @enumFromInt(6);
    pub const line_final_swashes_off: @This() = @enumFromInt(7);
    pub const non_final_swashes_on: @This() = @enumFromInt(8);
    pub const non_final_swashes_off: @This() = @enumFromInt(9);
    pub const show_diacritics: @This() = @enumFromInt(0);
    pub const hide_diacritics: @This() = @enumFromInt(1);
    pub const decompose_diacritics: @This() = @enumFromInt(2);
    pub const normal_position: @This() = @enumFromInt(0);
    pub const superiors: @This() = @enumFromInt(1);
    pub const inferiors: @This() = @enumFromInt(2);
    pub const ordinals: @This() = @enumFromInt(3);
    pub const scientific_inferiors: @This() = @enumFromInt(4);
    pub const no_fractions: @This() = @enumFromInt(0);
    pub const vertical_fractions: @This() = @enumFromInt(1);
    pub const diagonal_fractions: @This() = @enumFromInt(2);
    pub const prevent_overlap_on: @This() = @enumFromInt(0);
    pub const prevent_overlap_off: @This() = @enumFromInt(1);
    pub const hyphens_to_em_dash_on: @This() = @enumFromInt(0);
    pub const hyphens_to_em_dash_off: @This() = @enumFromInt(1);
    pub const hyphen_to_en_dash_on: @This() = @enumFromInt(2);
    pub const hyphen_to_en_dash_off: @This() = @enumFromInt(3);
    pub const slashed_zero_on: @This() = @enumFromInt(4);
    pub const slashed_zero_off: @This() = @enumFromInt(5);
    pub const form_interrobang_on: @This() = @enumFromInt(6);
    pub const form_interrobang_off: @This() = @enumFromInt(7);
    pub const smart_quotes_on: @This() = @enumFromInt(8);
    pub const smart_quotes_off: @This() = @enumFromInt(9);
    pub const periods_to_ellipsis_on: @This() = @enumFromInt(10);
    pub const periods_to_ellipsis_off: @This() = @enumFromInt(11);
    pub const hyphen_to_minus_on: @This() = @enumFromInt(0);
    pub const hyphen_to_minus_off: @This() = @enumFromInt(1);
    pub const asterisk_to_multiply_on: @This() = @enumFromInt(2);
    pub const asterisk_to_multiply_off: @This() = @enumFromInt(3);
    pub const slash_to_divide_on: @This() = @enumFromInt(4);
    pub const slash_to_divide_off: @This() = @enumFromInt(5);
    pub const inequality_ligatures_on: @This() = @enumFromInt(6);
    pub const inequality_ligatures_off: @This() = @enumFromInt(7);
    pub const exponents_on: @This() = @enumFromInt(8);
    pub const exponents_off: @This() = @enumFromInt(9);
    pub const mathematical_greek_on: @This() = @enumFromInt(10);
    pub const mathematical_greek_off: @This() = @enumFromInt(11);
    pub const no_ornaments: @This() = @enumFromInt(0);
    pub const dingbats: @This() = @enumFromInt(1);
    pub const pi_characters: @This() = @enumFromInt(2);
    pub const fleurons: @This() = @enumFromInt(3);
    pub const decorative_borders: @This() = @enumFromInt(4);
    pub const international_symbols: @This() = @enumFromInt(5);
    pub const math_symbols: @This() = @enumFromInt(6);
    pub const no_alternates: @This() = @enumFromInt(0);
    pub const design_level1: @This() = @enumFromInt(0);
    pub const design_level2: @This() = @enumFromInt(1);
    pub const design_level3: @This() = @enumFromInt(2);
    pub const design_level4: @This() = @enumFromInt(3);
    pub const design_level5: @This() = @enumFromInt(4);
    pub const no_style_options: @This() = @enumFromInt(0);
    pub const display_text: @This() = @enumFromInt(1);
    pub const engraved_text: @This() = @enumFromInt(2);
    pub const illuminated_caps: @This() = @enumFromInt(3);
    pub const titling_caps: @This() = @enumFromInt(4);
    pub const tall_caps: @This() = @enumFromInt(5);
    pub const traditional_characters: @This() = @enumFromInt(0);
    pub const simplified_characters: @This() = @enumFromInt(1);
    pub const jis1978_characters: @This() = @enumFromInt(2);
    pub const jis1983_characters: @This() = @enumFromInt(3);
    pub const jis1990_characters: @This() = @enumFromInt(4);
    pub const traditional_alt_one: @This() = @enumFromInt(5);
    pub const traditional_alt_two: @This() = @enumFromInt(6);
    pub const traditional_alt_three: @This() = @enumFromInt(7);
    pub const traditional_alt_four: @This() = @enumFromInt(8);
    pub const traditional_alt_five: @This() = @enumFromInt(9);
    pub const expert_characters: @This() = @enumFromInt(10);
    pub const jis2004_characters: @This() = @enumFromInt(11);
    pub const hojo_characters: @This() = @enumFromInt(12);
    pub const nlccharacters: @This() = @enumFromInt(13);
    pub const traditional_names_characters: @This() = @enumFromInt(14);
    pub const lower_case_numbers: @This() = @enumFromInt(0);
    pub const upper_case_numbers: @This() = @enumFromInt(1);
    pub const proportional_text: @This() = @enumFromInt(0);
    pub const monospaced_text: @This() = @enumFromInt(1);
    pub const half_width_text: @This() = @enumFromInt(2);
    pub const third_width_text: @This() = @enumFromInt(3);
    pub const quarter_width_text: @This() = @enumFromInt(4);
    pub const alt_proportional_text: @This() = @enumFromInt(5);
    pub const alt_half_width_text: @This() = @enumFromInt(6);
    pub const no_transliteration: @This() = @enumFromInt(0);
    pub const hanja_to_hangul: @This() = @enumFromInt(1);
    pub const hiragana_to_katakana: @This() = @enumFromInt(2);
    pub const katakana_to_hiragana: @This() = @enumFromInt(3);
    pub const kana_to_romanization: @This() = @enumFromInt(4);
    pub const romanization_to_hiragana: @This() = @enumFromInt(5);
    pub const romanization_to_katakana: @This() = @enumFromInt(6);
    pub const hanja_to_hangul_alt_one: @This() = @enumFromInt(7);
    pub const hanja_to_hangul_alt_two: @This() = @enumFromInt(8);
    pub const hanja_to_hangul_alt_three: @This() = @enumFromInt(9);
    pub const no_annotation: @This() = @enumFromInt(0);
    pub const box_annotation: @This() = @enumFromInt(1);
    pub const rounded_box_annotation: @This() = @enumFromInt(2);
    pub const circle_annotation: @This() = @enumFromInt(3);
    pub const inverted_circle_annotation: @This() = @enumFromInt(4);
    pub const parenthesis_annotation: @This() = @enumFromInt(5);
    pub const period_annotation: @This() = @enumFromInt(6);
    pub const roman_numeral_annotation: @This() = @enumFromInt(7);
    pub const diamond_annotation: @This() = @enumFromInt(8);
    pub const inverted_box_annotation: @This() = @enumFromInt(9);
    pub const inverted_rounded_box_annotation: @This() = @enumFromInt(10);
    pub const full_width_kana: @This() = @enumFromInt(0);
    pub const proportional_kana: @This() = @enumFromInt(1);
    pub const full_width_ideographs: @This() = @enumFromInt(0);
    pub const proportional_ideographs: @This() = @enumFromInt(1);
    pub const half_width_ideographs: @This() = @enumFromInt(2);
    pub const canonical_composition_on: @This() = @enumFromInt(0);
    pub const canonical_composition_off: @This() = @enumFromInt(1);
    pub const compatibility_composition_on: @This() = @enumFromInt(2);
    pub const compatibility_composition_off: @This() = @enumFromInt(3);
    pub const transcoding_composition_on: @This() = @enumFromInt(4);
    pub const transcoding_composition_off: @This() = @enumFromInt(5);
    pub const no_ruby_kana: @This() = @enumFromInt(0);
    pub const ruby_kana: @This() = @enumFromInt(1);
    pub const ruby_kana_on: @This() = @enumFromInt(2);
    pub const ruby_kana_off: @This() = @enumFromInt(3);
    pub const no_cjk_symbol_alternatives: @This() = @enumFromInt(0);
    pub const cjk_symbol_alt_one: @This() = @enumFromInt(1);
    pub const cjk_symbol_alt_two: @This() = @enumFromInt(2);
    pub const cjk_symbol_alt_three: @This() = @enumFromInt(3);
    pub const cjk_symbol_alt_four: @This() = @enumFromInt(4);
    pub const cjk_symbol_alt_five: @This() = @enumFromInt(5);
    pub const no_ideographic_alternatives: @This() = @enumFromInt(0);
    pub const ideographic_alt_one: @This() = @enumFromInt(1);
    pub const ideographic_alt_two: @This() = @enumFromInt(2);
    pub const ideographic_alt_three: @This() = @enumFromInt(3);
    pub const ideographic_alt_four: @This() = @enumFromInt(4);
    pub const ideographic_alt_five: @This() = @enumFromInt(5);
    pub const cjk_vertical_roman_centered: @This() = @enumFromInt(0);
    pub const cjk_vertical_roman_hbaseline: @This() = @enumFromInt(1);
    pub const no_cjk_italic_roman: @This() = @enumFromInt(0);
    pub const cjk_italic_roman: @This() = @enumFromInt(1);
    pub const cjk_italic_roman_on: @This() = @enumFromInt(2);
    pub const cjk_italic_roman_off: @This() = @enumFromInt(3);
    pub const case_sensitive_layout_on: @This() = @enumFromInt(0);
    pub const case_sensitive_layout_off: @This() = @enumFromInt(1);
    pub const case_sensitive_spacing_on: @This() = @enumFromInt(2);
    pub const case_sensitive_spacing_off: @This() = @enumFromInt(3);
    pub const alternate_horiz_kana_on: @This() = @enumFromInt(0);
    pub const alternate_horiz_kana_off: @This() = @enumFromInt(1);
    pub const alternate_vert_kana_on: @This() = @enumFromInt(2);
    pub const alternate_vert_kana_off: @This() = @enumFromInt(3);
    pub const no_stylistic_alternates: @This() = @enumFromInt(0);
    pub const stylistic_alt_one_on: @This() = @enumFromInt(2);
    pub const stylistic_alt_one_off: @This() = @enumFromInt(3);
    pub const stylistic_alt_two_on: @This() = @enumFromInt(4);
    pub const stylistic_alt_two_off: @This() = @enumFromInt(5);
    pub const stylistic_alt_three_on: @This() = @enumFromInt(6);
    pub const stylistic_alt_three_off: @This() = @enumFromInt(7);
    pub const stylistic_alt_four_on: @This() = @enumFromInt(8);
    pub const stylistic_alt_four_off: @This() = @enumFromInt(9);
    pub const stylistic_alt_five_on: @This() = @enumFromInt(10);
    pub const stylistic_alt_five_off: @This() = @enumFromInt(11);
    pub const stylistic_alt_six_on: @This() = @enumFromInt(12);
    pub const stylistic_alt_six_off: @This() = @enumFromInt(13);
    pub const stylistic_alt_seven_on: @This() = @enumFromInt(14);
    pub const stylistic_alt_seven_off: @This() = @enumFromInt(15);
    pub const stylistic_alt_eight_on: @This() = @enumFromInt(16);
    pub const stylistic_alt_eight_off: @This() = @enumFromInt(17);
    pub const stylistic_alt_nine_on: @This() = @enumFromInt(18);
    pub const stylistic_alt_nine_off: @This() = @enumFromInt(19);
    pub const stylistic_alt_ten_on: @This() = @enumFromInt(20);
    pub const stylistic_alt_ten_off: @This() = @enumFromInt(21);
    pub const contextual_alternates_on: @This() = @enumFromInt(0);
    pub const contextual_alternates_off: @This() = @enumFromInt(1);
    pub const swash_alternates_on: @This() = @enumFromInt(2);
    pub const swash_alternates_off: @This() = @enumFromInt(3);
    pub const contextual_swash_alternates_on: @This() = @enumFromInt(4);
    pub const contextual_swash_alternates_off: @This() = @enumFromInt(5);
    pub const default_lower_case: @This() = @enumFromInt(0);
    pub const lower_case_small_caps: @This() = @enumFromInt(1);
    pub const lower_case_petite_caps: @This() = @enumFromInt(2);
    pub const default_upper_case: @This() = @enumFromInt(0);
    pub const upper_case_small_caps: @This() = @enumFromInt(1);
    pub const upper_case_petite_caps: @This() = @enumFromInt(2);
    pub const half_width_cjk_roman: @This() = @enumFromInt(0);
    pub const proportional_cjk_roman: @This() = @enumFromInt(1);
    pub const default_cjk_roman: @This() = @enumFromInt(2);
    pub const full_width_cjk_roman: @This() = @enumFromInt(3);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_aat_layout_feature_selector_get_type" });
        return cFn();
    }
};
pub fn aatLayoutFeatureTypeGetNameId(_face: *harf_buzz.face_t, _feature_type: harf_buzz.aat_layout_feature_type_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, harf_buzz.aat_layout_feature_type_t) callconv(.c) u32, .{ .name = "hb_aat_layout_feature_type_get_name_id" });
    const ret = cFn(_face, _feature_type);
    return ret;
}
pub fn aatLayoutFeatureTypeGetSelectorInfos(_face: *harf_buzz.face_t, _feature_type: harf_buzz.aat_layout_feature_type_t, _start_offset: u32, _selectorss: ?[]harf_buzz.aat_layout_feature_selector_info_t) struct {
    ret: u32,
    default_index: u32,
} {
    const _selectors = if (_selectorss) |some| some.ptr else null;
    var selector_count_out: u32 = undefined;
    const _selector_count = &selector_count_out;
    var default_index_out: u32 = undefined;
    const _default_index = &default_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, harf_buzz.aat_layout_feature_type_t, u32, ?*u32, [*]harf_buzz.aat_layout_feature_selector_info_t, ?*u32) callconv(.c) u32, .{ .name = "hb_aat_layout_feature_type_get_selector_infos" });
    const ret = cFn(_face, _feature_type, _start_offset, _selector_count, _selectors, _default_index);
    return .{ .ret = ret, .default_index = default_index_out };
}
pub const aat_layout_feature_type_t = enum(u32) {
    invalid = 65535,
    all_typographic = 0,
    ligatures = 1,
    cursive_connection = 2,
    letter_case = 3,
    vertical_substitution = 4,
    linguistic_rearrangement = 5,
    number_spacing = 6,
    smart_swash_type = 8,
    diacritics_type = 9,
    vertical_position = 10,
    fractions = 11,
    overlapping_characters_type = 13,
    typographic_extras = 14,
    mathematical_extras = 15,
    ornament_sets_type = 16,
    character_alternatives = 17,
    design_complexity_type = 18,
    style_options = 19,
    character_shape = 20,
    number_case = 21,
    text_spacing = 22,
    transliteration = 23,
    annotation_type = 24,
    kana_spacing_type = 25,
    ideographic_spacing_type = 26,
    unicode_decomposition_type = 27,
    ruby_kana = 28,
    cjk_symbol_alternatives_type = 29,
    ideographic_alternatives_type = 30,
    cjk_vertical_roman_placement_type = 31,
    italic_cjk_roman = 32,
    case_sensitive_layout = 33,
    alternate_kana = 34,
    stylistic_alternatives = 35,
    contextual_alternatives = 36,
    lower_case = 37,
    upper_case = 38,
    language_tag_type = 39,
    cjk_roman_spacing_type = 103,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_aat_layout_feature_type_get_type" });
        return cFn();
    }
};
pub fn aatLayoutGetFeatureTypes(_face: *harf_buzz.face_t, _start_offset: u32, _featuress: []harf_buzz.aat_layout_feature_type_t) struct {
    ret: u32,
} {
    const _features = _featuress.ptr;
    var feature_count_out: u32 = undefined;
    const _feature_count = &feature_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?*u32, [*]harf_buzz.aat_layout_feature_type_t) callconv(.c) u32, .{ .name = "hb_aat_layout_get_feature_types" });
    const ret = cFn(_face, _start_offset, _feature_count, _features);
    return .{ .ret = ret };
}
pub fn aatLayoutHasPositioning(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_aat_layout_has_positioning" });
    const ret = cFn(_face);
    return ret;
}
pub fn aatLayoutHasSubstitution(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_aat_layout_has_substitution" });
    const ret = cFn(_face);
    return ret;
}
pub fn aatLayoutHasTracking(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_aat_layout_has_tracking" });
    const ret = cFn(_face);
    return ret;
}
pub fn blobCopyWritableOrFail(_blob: *harf_buzz.blob_t) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.blob_t) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_blob_copy_writable_or_fail" });
    const ret = cFn(_blob);
    return ret;
}
pub fn blobCreateFromFile(_file_name: [*:0]const u8) *harf_buzz.blob_t {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_blob_create_from_file" });
    const ret = cFn(_file_name);
    return ret;
}
pub fn blobCreateFromFileOrFail(_file_name: [*:0]const u8) *harf_buzz.blob_t {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_blob_create_from_file_or_fail" });
    const ret = cFn(_file_name);
    return ret;
}
pub fn blobCreateSubBlob(_parent: *harf_buzz.blob_t, _offset: u32, _length: u32) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.blob_t, u32, u32) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_blob_create_sub_blob" });
    const ret = cFn(_parent, _offset, _length);
    return ret;
}
pub fn blobGetData(_blob: *harf_buzz.blob_t) struct {
    ret: ?[*][*:0]const u8,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.blob_t, *u32) callconv(.c) ?[*][*:0]const u8, .{ .name = "hb_blob_get_data" });
    const ret = cFn(_blob, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn blobGetDataWritable(_blob: *harf_buzz.blob_t) struct {
    ret: [*][*:0]const u8,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.blob_t, *u32) callconv(.c) [*][*:0]const u8, .{ .name = "hb_blob_get_data_writable" });
    const ret = cFn(_blob, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn blobGetEmpty() *harf_buzz.blob_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_blob_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn blobGetLength(_blob: *harf_buzz.blob_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.blob_t) callconv(.c) u32, .{ .name = "hb_blob_get_length" });
    const ret = cFn(_blob);
    return ret;
}
pub fn blobIsImmutable(_blob: *harf_buzz.blob_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.blob_t) callconv(.c) i32, .{ .name = "hb_blob_is_immutable" });
    const ret = cFn(_blob);
    return ret;
}
pub fn blobMakeImmutable(_blob: *harf_buzz.blob_t) void {
    const cFn = @extern(*const fn (*harf_buzz.blob_t) callconv(.c) void, .{ .name = "hb_blob_make_immutable" });
    const ret = cFn(_blob);
    return ret;
}
pub const blob_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_blob_get_type" });
        return cFn();
    }
};
pub fn bufferAdd(_buffer: *harf_buzz.buffer_t, _codepoint: u32, _cluster: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32, u32) callconv(.c) void, .{ .name = "hb_buffer_add" });
    const ret = cFn(_buffer, _codepoint, _cluster);
    return ret;
}
pub fn bufferAddCodepoints(_buffer: *harf_buzz.buffer_t, _texts: []u32, _item_offset: u32, _item_length: i32) void {
    const _text = _texts.ptr;
    const _text_length: i32 = @intCast(_texts.len);
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*]u32, i32, u32, i32) callconv(.c) void, .{ .name = "hb_buffer_add_codepoints" });
    const ret = cFn(_buffer, _text, _text_length, _item_offset, _item_length);
    return ret;
}
pub fn bufferAddLatin1(_buffer: *harf_buzz.buffer_t, _texts: []u8, _item_offset: u32, _item_length: i32) void {
    const _text = _texts.ptr;
    const _text_length: i32 = @intCast(_texts.len);
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*]u8, i32, u32, i32) callconv(.c) void, .{ .name = "hb_buffer_add_latin1" });
    const ret = cFn(_buffer, _text, _text_length, _item_offset, _item_length);
    return ret;
}
pub fn bufferAddUtf16(_buffer: *harf_buzz.buffer_t, _texts: []u16, _item_offset: u32, _item_length: i32) void {
    const _text = _texts.ptr;
    const _text_length: i32 = @intCast(_texts.len);
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*]u16, i32, u32, i32) callconv(.c) void, .{ .name = "hb_buffer_add_utf16" });
    const ret = cFn(_buffer, _text, _text_length, _item_offset, _item_length);
    return ret;
}
pub fn bufferAddUtf32(_buffer: *harf_buzz.buffer_t, _texts: []u32, _item_offset: u32, _item_length: i32) void {
    const _text = _texts.ptr;
    const _text_length: i32 = @intCast(_texts.len);
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*]u32, i32, u32, i32) callconv(.c) void, .{ .name = "hb_buffer_add_utf32" });
    const ret = cFn(_buffer, _text, _text_length, _item_offset, _item_length);
    return ret;
}
pub fn bufferAddUtf8(_buffer: *harf_buzz.buffer_t, _texts: []u8, _item_offset: u32, _item_length: i32) void {
    const _text = _texts.ptr;
    const _text_length: i32 = @intCast(_texts.len);
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*]u8, i32, u32, i32) callconv(.c) void, .{ .name = "hb_buffer_add_utf8" });
    const ret = cFn(_buffer, _text, _text_length, _item_offset, _item_length);
    return ret;
}
pub fn bufferAllocationSuccessful(_buffer: *harf_buzz.buffer_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) i32, .{ .name = "hb_buffer_allocation_successful" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferAppend(_buffer: *harf_buzz.buffer_t, _source: *harf_buzz.buffer_t, _start: u32, _end: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.buffer_t, u32, u32) callconv(.c) void, .{ .name = "hb_buffer_append" });
    const ret = cFn(_buffer, _source, _start, _end);
    return ret;
}
pub fn bufferClearContents(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_clear_contents" });
    const ret = cFn(_buffer);
    return ret;
}
pub const buffer_cluster_level_t = enum(u32) {
    monotone_graphemes = 0,
    monotone_characters = 1,
    characters = 2,
    pub const default: @This() = @enumFromInt(0);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_cluster_level_get_type" });
        return cFn();
    }
};
pub const buffer_content_type_t = enum(u32) {
    invalid = 0,
    unicode = 1,
    glyphs = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_content_type_get_type" });
        return cFn();
    }
};
pub fn bufferCreate() *harf_buzz.buffer_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.buffer_t, .{ .name = "hb_buffer_create" });
    const ret = cFn();
    return ret;
}
pub fn bufferCreateSimilar(_src: *harf_buzz.buffer_t) *harf_buzz.buffer_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) *harf_buzz.buffer_t, .{ .name = "hb_buffer_create_similar" });
    const ret = cFn(_src);
    return ret;
}
pub fn bufferDeserializeGlyphs(_buffer: *harf_buzz.buffer_t, _bufs: [][*:0]const u8, _font: ?*harf_buzz.font_t, _format: harf_buzz.buffer_serialize_format_t) struct {
    ret: i32,
    end_ptr: [*:0]u8,
} {
    const _buf = _bufs.ptr;
    const _buf_len: i32 = @intCast(_bufs.len);
    var end_ptr_out: [*:0]u8 = undefined;
    const _end_ptr = &end_ptr_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*][*:0]const u8, i32, ?*[*:0]u8, ?*harf_buzz.font_t, harf_buzz.buffer_serialize_format_t) callconv(.c) i32, .{ .name = "hb_buffer_deserialize_glyphs" });
    const ret = cFn(_buffer, _buf, _buf_len, _end_ptr, _font, _format);
    return .{ .ret = ret, .end_ptr = end_ptr_out };
}
pub fn bufferDeserializeUnicode(_buffer: *harf_buzz.buffer_t, _bufs: [][*:0]const u8, _format: harf_buzz.buffer_serialize_format_t) struct {
    ret: i32,
    end_ptr: [*:0]u8,
} {
    const _buf = _bufs.ptr;
    const _buf_len: i32 = @intCast(_bufs.len);
    var end_ptr_out: [*:0]u8 = undefined;
    const _end_ptr = &end_ptr_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, [*][*:0]const u8, i32, ?*[*:0]u8, harf_buzz.buffer_serialize_format_t) callconv(.c) i32, .{ .name = "hb_buffer_deserialize_unicode" });
    const ret = cFn(_buffer, _buf, _buf_len, _end_ptr, _format);
    return .{ .ret = ret, .end_ptr = end_ptr_out };
}
pub fn bufferDiff(_buffer: *harf_buzz.buffer_t, _reference: *harf_buzz.buffer_t, _dottedcircle_glyph: u32, _position_fuzz: u32) harf_buzz.buffer_diff_flags_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.buffer_t, u32, u32) callconv(.c) harf_buzz.buffer_diff_flags_t, .{ .name = "hb_buffer_diff" });
    const ret = cFn(_buffer, _reference, _dottedcircle_glyph, _position_fuzz);
    return ret;
}
pub const buffer_diff_flags_t = packed struct(u32) {
    content_type_mismatch: bool = false,
    length_mismatch: bool = false,
    notdef_present: bool = false,
    dotted_circle_present: bool = false,
    codepoint_mismatch: bool = false,
    cluster_mismatch: bool = false,
    glyph_flags_mismatch: bool = false,
    position_mismatch: bool = false,
    _: u24 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_diff_flags_get_type" });
        return cFn();
    }
};
pub const buffer_flags_t = packed struct(u32) {
    bot: bool = false,
    eot: bool = false,
    preserve_default_ignorables: bool = false,
    remove_default_ignorables: bool = false,
    do_not_insert_dotted_circle: bool = false,
    verify: bool = false,
    produce_unsafe_to_concat: bool = false,
    produce_safe_to_insert_tatweel: bool = false,
    _: u24 = 0,
    pub const defined: @This() = @bitCast(@as(u32, 255));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_flags_get_type" });
        return cFn();
    }
};
pub fn bufferGetClusterLevel(_buffer: *harf_buzz.buffer_t) harf_buzz.buffer_cluster_level_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) harf_buzz.buffer_cluster_level_t, .{ .name = "hb_buffer_get_cluster_level" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetContentType(_buffer: *harf_buzz.buffer_t) harf_buzz.buffer_content_type_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) harf_buzz.buffer_content_type_t, .{ .name = "hb_buffer_get_content_type" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetDirection(_buffer: *harf_buzz.buffer_t) harf_buzz.direction_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) harf_buzz.direction_t, .{ .name = "hb_buffer_get_direction" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetEmpty() *harf_buzz.buffer_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.buffer_t, .{ .name = "hb_buffer_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn bufferGetFlags(_buffer: *harf_buzz.buffer_t) harf_buzz.buffer_flags_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) harf_buzz.buffer_flags_t, .{ .name = "hb_buffer_get_flags" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetGlyphInfos(_buffer: *harf_buzz.buffer_t) struct {
    ret: [*]harf_buzz.glyph_info_t,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *u32) callconv(.c) [*]harf_buzz.glyph_info_t, .{ .name = "hb_buffer_get_glyph_infos" });
    const ret = cFn(_buffer, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn bufferGetGlyphPositions(_buffer: *harf_buzz.buffer_t) struct {
    ret: [*]harf_buzz.glyph_position_t,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *u32) callconv(.c) [*]harf_buzz.glyph_position_t, .{ .name = "hb_buffer_get_glyph_positions" });
    const ret = cFn(_buffer, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn bufferGetInvisibleGlyph(_buffer: *harf_buzz.buffer_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) u32, .{ .name = "hb_buffer_get_invisible_glyph" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetLanguage(_buffer: *harf_buzz.buffer_t) *harf_buzz.language_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) *harf_buzz.language_t, .{ .name = "hb_buffer_get_language" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetLength(_buffer: *harf_buzz.buffer_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) u32, .{ .name = "hb_buffer_get_length" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetNotFoundGlyph(_buffer: *harf_buzz.buffer_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) u32, .{ .name = "hb_buffer_get_not_found_glyph" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetRandomState(_buffer: *harf_buzz.buffer_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) u32, .{ .name = "hb_buffer_get_random_state" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetReplacementCodepoint(_buffer: *harf_buzz.buffer_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) u32, .{ .name = "hb_buffer_get_replacement_codepoint" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetScript(_buffer: *harf_buzz.buffer_t) harf_buzz.script_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) harf_buzz.script_t, .{ .name = "hb_buffer_get_script" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGetSegmentProperties(_buffer: *harf_buzz.buffer_t, _props: *harf_buzz.segment_properties_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.segment_properties_t) callconv(.c) void, .{ .name = "hb_buffer_get_segment_properties" });
    const ret = cFn(_buffer, _props);
    return ret;
}
pub fn bufferGetUnicodeFuncs(_buffer: *harf_buzz.buffer_t) *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_buffer_get_unicode_funcs" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferGuessSegmentProperties(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_guess_segment_properties" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferHasPositions(_buffer: *harf_buzz.buffer_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) i32, .{ .name = "hb_buffer_has_positions" });
    const ret = cFn(_buffer);
    return ret;
}
pub const buffer_message_func_t = *const fn (_buffer: *harf_buzz.buffer_t, _font: *harf_buzz.font_t, _message: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn bufferNormalizeGlyphs(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_normalize_glyphs" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferPreAllocate(_buffer: *harf_buzz.buffer_t, _size: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) i32, .{ .name = "hb_buffer_pre_allocate" });
    const ret = cFn(_buffer, _size);
    return ret;
}
pub fn bufferReset(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_reset" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferReverse(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_reverse" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferReverseClusters(_buffer: *harf_buzz.buffer_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t) callconv(.c) void, .{ .name = "hb_buffer_reverse_clusters" });
    const ret = cFn(_buffer);
    return ret;
}
pub fn bufferReverseRange(_buffer: *harf_buzz.buffer_t, _start: u32, _end: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32, u32) callconv(.c) void, .{ .name = "hb_buffer_reverse_range" });
    const ret = cFn(_buffer, _start, _end);
    return ret;
}
pub fn bufferSerialize(_buffer: *harf_buzz.buffer_t, _start: u32, _end: u32, _font: ?*harf_buzz.font_t, _format: harf_buzz.buffer_serialize_format_t, _flags: harf_buzz.buffer_serialize_flags_t) struct {
    ret: u32,
    buf: []u8,
    buf_consumed: u32,
} {
    var buf_out: [*]u8 = undefined;
    const _buf = &buf_out;
    var buf_size_out: u32 = undefined;
    const _buf_size = &buf_size_out;
    var buf_consumed_out: u32 = undefined;
    const _buf_consumed = &buf_consumed_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32, u32, *[*]u8, *u32, ?*u32, ?*harf_buzz.font_t, harf_buzz.buffer_serialize_format_t, harf_buzz.buffer_serialize_flags_t) callconv(.c) u32, .{ .name = "hb_buffer_serialize" });
    const ret = cFn(_buffer, _start, _end, _buf, _buf_size, _buf_consumed, _font, _format, _flags);
    return .{ .ret = ret, .buf = buf_out[0..@intCast(buf_size_out)], .buf_consumed = buf_consumed_out };
}
pub const buffer_serialize_flags_t = packed struct(u32) {
    no_clusters: bool = false,
    no_positions: bool = false,
    no_glyph_names: bool = false,
    glyph_extents: bool = false,
    glyph_flags: bool = false,
    no_advances: bool = false,
    _: u26 = 0,
    pub const defined: @This() = @bitCast(@as(u32, 63));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_serialize_flags_get_type" });
        return cFn();
    }
};
pub fn bufferSerializeFormatFromString(_strs: []u8) harf_buzz.buffer_serialize_format_t {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) harf_buzz.buffer_serialize_format_t, .{ .name = "hb_buffer_serialize_format_from_string" });
    const ret = cFn(_str, _len);
    return ret;
}
pub const buffer_serialize_format_t = enum(u32) {
    text = 1413830740,
    json = 1246973774,
    invalid = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_serialize_format_get_type" });
        return cFn();
    }
};
pub fn bufferSerializeFormatToString(_format: harf_buzz.buffer_serialize_format_t) [*:0]u8 {
    const cFn = @extern(*const fn (harf_buzz.buffer_serialize_format_t) callconv(.c) [*:0]u8, .{ .name = "hb_buffer_serialize_format_to_string" });
    const ret = cFn(_format);
    return ret;
}
pub fn bufferSerializeGlyphs(_buffer: *harf_buzz.buffer_t, _start: u32, _end: u32, _font: ?*harf_buzz.font_t, _format: harf_buzz.buffer_serialize_format_t, _flags: harf_buzz.buffer_serialize_flags_t) struct {
    ret: u32,
    buf: []u8,
    buf_consumed: u32,
} {
    var buf_out: [*]u8 = undefined;
    const _buf = &buf_out;
    var buf_size_out: u32 = undefined;
    const _buf_size = &buf_size_out;
    var buf_consumed_out: u32 = undefined;
    const _buf_consumed = &buf_consumed_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32, u32, *[*]u8, *u32, ?*u32, ?*harf_buzz.font_t, harf_buzz.buffer_serialize_format_t, harf_buzz.buffer_serialize_flags_t) callconv(.c) u32, .{ .name = "hb_buffer_serialize_glyphs" });
    const ret = cFn(_buffer, _start, _end, _buf, _buf_size, _buf_consumed, _font, _format, _flags);
    return .{ .ret = ret, .buf = buf_out[0..@intCast(buf_size_out)], .buf_consumed = buf_consumed_out };
}
pub fn bufferSerializeListFormats() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "hb_buffer_serialize_list_formats" });
    const ret = cFn();
    return ret;
}
pub fn bufferSerializeUnicode(_buffer: *harf_buzz.buffer_t, _start: u32, _end: u32, _format: harf_buzz.buffer_serialize_format_t, _flags: harf_buzz.buffer_serialize_flags_t) struct {
    ret: u32,
    buf: []u8,
    buf_consumed: u32,
} {
    var buf_out: [*]u8 = undefined;
    const _buf = &buf_out;
    var buf_size_out: u32 = undefined;
    const _buf_size = &buf_size_out;
    var buf_consumed_out: u32 = undefined;
    const _buf_consumed = &buf_consumed_out;
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32, u32, *[*]u8, *u32, ?*u32, harf_buzz.buffer_serialize_format_t, harf_buzz.buffer_serialize_flags_t) callconv(.c) u32, .{ .name = "hb_buffer_serialize_unicode" });
    const ret = cFn(_buffer, _start, _end, _buf, _buf_size, _buf_consumed, _format, _flags);
    return .{ .ret = ret, .buf = buf_out[0..@intCast(buf_size_out)], .buf_consumed = buf_consumed_out };
}
pub fn bufferSetClusterLevel(_buffer: *harf_buzz.buffer_t, _cluster_level: harf_buzz.buffer_cluster_level_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, harf_buzz.buffer_cluster_level_t) callconv(.c) void, .{ .name = "hb_buffer_set_cluster_level" });
    const ret = cFn(_buffer, _cluster_level);
    return ret;
}
pub fn bufferSetContentType(_buffer: *harf_buzz.buffer_t, _content_type: harf_buzz.buffer_content_type_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, harf_buzz.buffer_content_type_t) callconv(.c) void, .{ .name = "hb_buffer_set_content_type" });
    const ret = cFn(_buffer, _content_type);
    return ret;
}
pub fn bufferSetDirection(_buffer: *harf_buzz.buffer_t, _direction: harf_buzz.direction_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, harf_buzz.direction_t) callconv(.c) void, .{ .name = "hb_buffer_set_direction" });
    const ret = cFn(_buffer, _direction);
    return ret;
}
pub fn bufferSetFlags(_buffer: *harf_buzz.buffer_t, _flags: harf_buzz.buffer_flags_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, harf_buzz.buffer_flags_t) callconv(.c) void, .{ .name = "hb_buffer_set_flags" });
    const ret = cFn(_buffer, _flags);
    return ret;
}
pub fn bufferSetInvisibleGlyph(_buffer: *harf_buzz.buffer_t, _invisible: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) void, .{ .name = "hb_buffer_set_invisible_glyph" });
    const ret = cFn(_buffer, _invisible);
    return ret;
}
pub fn bufferSetLanguage(_buffer: *harf_buzz.buffer_t, _language: *harf_buzz.language_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.language_t) callconv(.c) void, .{ .name = "hb_buffer_set_language" });
    const ret = cFn(_buffer, _language);
    return ret;
}
pub fn bufferSetLength(_buffer: *harf_buzz.buffer_t, _length: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) i32, .{ .name = "hb_buffer_set_length" });
    const ret = cFn(_buffer, _length);
    return ret;
}
pub fn bufferSetMessageFunc(_buffer: *harf_buzz.buffer_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.buffer_t, *harf_buzz.font_t, [*:0]const u8 });
    const _func: *const fn (_buffer: *harf_buzz.buffer_t, _font: *harf_buzz.font_t, _message: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *const fn (_buffer: *harf_buzz.buffer_t, _font: *harf_buzz.font_t, _message: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_buffer_set_message_func" });
    const ret = cFn(_buffer, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn bufferSetNotFoundGlyph(_buffer: *harf_buzz.buffer_t, _not_found: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) void, .{ .name = "hb_buffer_set_not_found_glyph" });
    const ret = cFn(_buffer, _not_found);
    return ret;
}
pub fn bufferSetRandomState(_buffer: *harf_buzz.buffer_t, _state: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) void, .{ .name = "hb_buffer_set_random_state" });
    const ret = cFn(_buffer, _state);
    return ret;
}
pub fn bufferSetReplacementCodepoint(_buffer: *harf_buzz.buffer_t, _replacement: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, u32) callconv(.c) void, .{ .name = "hb_buffer_set_replacement_codepoint" });
    const ret = cFn(_buffer, _replacement);
    return ret;
}
pub fn bufferSetScript(_buffer: *harf_buzz.buffer_t, _script: harf_buzz.script_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, harf_buzz.script_t) callconv(.c) void, .{ .name = "hb_buffer_set_script" });
    const ret = cFn(_buffer, _script);
    return ret;
}
pub fn bufferSetSegmentProperties(_buffer: *harf_buzz.buffer_t, _props: *harf_buzz.segment_properties_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.segment_properties_t) callconv(.c) void, .{ .name = "hb_buffer_set_segment_properties" });
    const ret = cFn(_buffer, _props);
    return ret;
}
pub fn bufferSetUnicodeFuncs(_buffer: *harf_buzz.buffer_t, _unicode_funcs: *harf_buzz.unicode_funcs_t) void {
    const cFn = @extern(*const fn (*harf_buzz.buffer_t, *harf_buzz.unicode_funcs_t) callconv(.c) void, .{ .name = "hb_buffer_set_unicode_funcs" });
    const ret = cFn(_buffer, _unicode_funcs);
    return ret;
}
pub const buffer_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_buffer_get_type" });
        return cFn();
    }
};
pub fn colorGetAlpha(_color: u32) u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) u8, .{ .name = "hb_color_get_alpha" });
    const ret = cFn(_color);
    return ret;
}
pub fn colorGetBlue(_color: u32) u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) u8, .{ .name = "hb_color_get_blue" });
    const ret = cFn(_color);
    return ret;
}
pub fn colorGetGreen(_color: u32) u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) u8, .{ .name = "hb_color_get_green" });
    const ret = cFn(_color);
    return ret;
}
pub fn colorGetRed(_color: u32) u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) u8, .{ .name = "hb_color_get_red" });
    const ret = cFn(_color);
    return ret;
}
pub fn colorLineGetColorStops(_color_line: *harf_buzz.color_line_t, _start: u32, _color_stopss: ?[]harf_buzz.color_stop_t) struct {
    ret: u32,
} {
    const _color_stops = if (_color_stopss) |some| some.ptr else null;
    var count_out: u32 = undefined;
    const _count = &count_out;
    const cFn = @extern(*const fn (*harf_buzz.color_line_t, u32, ?*u32, [*]harf_buzz.color_stop_t) callconv(.c) u32, .{ .name = "hb_color_line_get_color_stops" });
    const ret = cFn(_color_line, _start, _count, _color_stops);
    return .{ .ret = ret };
}
pub const color_line_get_color_stops_func_t = *const fn (_color_line: *harf_buzz.color_line_t, _color_line_data: ?*anyopaque, _start: u32, _count: ?*u32, _color_stops: [*]harf_buzz.color_stop_t, _user_data: ?*anyopaque) callconv(.c) u32;
pub fn colorLineGetExtend(_color_line: *harf_buzz.color_line_t) harf_buzz.paint_extend_t {
    const cFn = @extern(*const fn (*harf_buzz.color_line_t) callconv(.c) harf_buzz.paint_extend_t, .{ .name = "hb_color_line_get_extend" });
    const ret = cFn(_color_line);
    return ret;
}
pub const color_line_get_extend_func_t = *const fn (_color_line: *harf_buzz.color_line_t, _color_line_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) harf_buzz.paint_extend_t;
pub const color_line_t = extern struct {
    data: ?*anyopaque,
    get_color_stops: ?*const fn (_color_line: *harf_buzz.color_line_t, _color_line_data: ?*anyopaque, _start: u32, _count: ?*u32, _color_stops: [*]harf_buzz.color_stop_t, _user_data: ?*anyopaque) callconv(.c) u32,
    get_color_stops_user_data: ?*anyopaque,
    get_extend: ?*const fn (_color_line: *harf_buzz.color_line_t, _color_line_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) harf_buzz.paint_extend_t,
    get_extend_user_data: ?*anyopaque,
    reserved0: ?*anyopaque,
    reserved1: ?*anyopaque,
    reserved2: ?*anyopaque,
    reserved3: ?*anyopaque,
    reserved5: ?*anyopaque,
    reserved6: ?*anyopaque,
    reserved7: ?*anyopaque,
    reserved8: ?*anyopaque,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_color_line_get_type" });
        return cFn();
    }
};
pub const color_stop_t = extern struct {
    offset: f32,
    is_foreground: i32,
    color: u32,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_color_stop_get_type" });
        return cFn();
    }
};
pub const destroy_func_t = *const fn (_user_data: ?*anyopaque) callconv(.c) void;
pub fn directionFromString(_strs: []u8) harf_buzz.direction_t {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) harf_buzz.direction_t, .{ .name = "hb_direction_from_string" });
    const ret = cFn(_str, _len);
    return ret;
}
pub const direction_t = enum(u32) {
    invalid = 0,
    ltr = 4,
    rtl = 5,
    ttb = 6,
    btt = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_direction_get_type" });
        return cFn();
    }
};
pub fn directionToString(_direction: harf_buzz.direction_t) [*:0]u8 {
    const cFn = @extern(*const fn (harf_buzz.direction_t) callconv(.c) [*:0]u8, .{ .name = "hb_direction_to_string" });
    const ret = cFn(_direction);
    return ret;
}
pub fn drawClosePath(_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t) callconv(.c) void, .{ .name = "hb_draw_close_path" });
    const ret = cFn(_dfuncs, @ptrCast(_draw_data), _st);
    return ret;
}
pub const draw_close_path_func_t = *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _user_data: ?*anyopaque) callconv(.c) void;
pub fn drawCubicTo(_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control1_x: f32, _control1_y: f32, _control2_x: f32, _control2_y: f32, _to_x: f32, _to_y: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_draw_cubic_to" });
    const ret = cFn(_dfuncs, @ptrCast(_draw_data), _st, _control1_x, _control1_y, _control2_x, _control2_y, _to_x, _to_y);
    return ret;
}
pub const draw_cubic_to_func_t = *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control1_x: f32, _control1_y: f32, _control2_x: f32, _control2_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn drawFuncsCreate() *harf_buzz.draw_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.draw_funcs_t, .{ .name = "hb_draw_funcs_create" });
    const ret = cFn();
    return ret;
}
pub fn drawFuncsGetEmpty() *harf_buzz.draw_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.draw_funcs_t, .{ .name = "hb_draw_funcs_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn drawFuncsIsImmutable(_dfuncs: *harf_buzz.draw_funcs_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t) callconv(.c) i32, .{ .name = "hb_draw_funcs_is_immutable" });
    const ret = cFn(_dfuncs);
    return ret;
}
pub fn drawFuncsMakeImmutable(_dfuncs: *harf_buzz.draw_funcs_t) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t) callconv(.c) void, .{ .name = "hb_draw_funcs_make_immutable" });
    const ret = cFn(_dfuncs);
    return ret;
}
pub fn drawFuncsSetClosePathFunc(_dfuncs: *harf_buzz.draw_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t });
    const _func: *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_draw_funcs_set_close_path_func" });
    const ret = cFn(_dfuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn drawFuncsSetCubicToFunc(_dfuncs: *harf_buzz.draw_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32, f32, f32, f32, f32 });
    const _func: *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control1_x: f32, _control1_y: f32, _control2_x: f32, _control2_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control1_x: f32, _control1_y: f32, _control2_x: f32, _control2_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_draw_funcs_set_cubic_to_func" });
    const ret = cFn(_dfuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn drawFuncsSetLineToFunc(_dfuncs: *harf_buzz.draw_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32 });
    const _func: *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_draw_funcs_set_line_to_func" });
    const ret = cFn(_dfuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn drawFuncsSetMoveToFunc(_dfuncs: *harf_buzz.draw_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32 });
    const _func: *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_draw_funcs_set_move_to_func" });
    const ret = cFn(_dfuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn drawFuncsSetQuadraticToFunc(_dfuncs: *harf_buzz.draw_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32, f32, f32 });
    const _func: *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control_x: f32, _control_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control_x: f32, _control_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_draw_funcs_set_quadratic_to_func" });
    const ret = cFn(_dfuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const draw_funcs_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_draw_funcs_get_type" });
        return cFn();
    }
};
pub fn drawLineTo(_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32) callconv(.c) void, .{ .name = "hb_draw_line_to" });
    const ret = cFn(_dfuncs, @ptrCast(_draw_data), _st, _to_x, _to_y);
    return ret;
}
pub const draw_line_to_func_t = *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn drawMoveTo(_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32) callconv(.c) void, .{ .name = "hb_draw_move_to" });
    const ret = cFn(_dfuncs, @ptrCast(_draw_data), _st, _to_x, _to_y);
    return ret;
}
pub const draw_move_to_func_t = *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn drawQuadraticTo(_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control_x: f32, _control_y: f32, _to_x: f32, _to_y: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.draw_funcs_t, ?*anyopaque, *harf_buzz.draw_state_t, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_draw_quadratic_to" });
    const ret = cFn(_dfuncs, @ptrCast(_draw_data), _st, _control_x, _control_y, _to_x, _to_y);
    return ret;
}
pub const draw_quadratic_to_func_t = *const fn (_dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _st: *harf_buzz.draw_state_t, _control_x: f32, _control_y: f32, _to_x: f32, _to_y: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub const draw_state_t = extern struct {
    path_open: i32,
    path_start_x: f32,
    path_start_y: f32,
    current_x: f32,
    current_y: f32,
    reserved1: harf_buzz.var_num_t,
    reserved2: harf_buzz.var_num_t,
    reserved3: harf_buzz.var_num_t,
    reserved4: harf_buzz.var_num_t,
    reserved5: harf_buzz.var_num_t,
    reserved6: harf_buzz.var_num_t,
    reserved7: harf_buzz.var_num_t,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_draw_state_get_type" });
        return cFn();
    }
};
pub fn faceBuilderAddTable(_face: *harf_buzz.face_t, _tag: u32, _blob: *harf_buzz.blob_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.blob_t) callconv(.c) i32, .{ .name = "hb_face_builder_add_table" });
    const ret = cFn(_face, _tag, _blob);
    return ret;
}
pub fn faceBuilderCreate() *harf_buzz.face_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.face_t, .{ .name = "hb_face_builder_create" });
    const ret = cFn();
    return ret;
}
pub fn faceBuilderSortTables(_face: *harf_buzz.face_t, _tags: [*:0]u32) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, [*:0]u32) callconv(.c) void, .{ .name = "hb_face_builder_sort_tables" });
    const ret = cFn(_face, _tags);
    return ret;
}
pub fn faceCollectNominalGlyphMapping(_face: *harf_buzz.face_t, _mapping: *harf_buzz.map_t, _unicodes: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.map_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_face_collect_nominal_glyph_mapping" });
    const ret = cFn(_face, _mapping, _unicodes);
    return ret;
}
pub fn faceCollectUnicodes(_face: *harf_buzz.face_t, _out: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_face_collect_unicodes" });
    const ret = cFn(_face, _out);
    return ret;
}
pub fn faceCollectVariationSelectors(_face: *harf_buzz.face_t, _out: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_face_collect_variation_selectors" });
    const ret = cFn(_face, _out);
    return ret;
}
pub fn faceCollectVariationUnicodes(_face: *harf_buzz.face_t, _variation_selector: u32, _out: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_face_collect_variation_unicodes" });
    const ret = cFn(_face, _variation_selector, _out);
    return ret;
}
pub fn faceCount(_blob: *harf_buzz.blob_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.blob_t) callconv(.c) u32, .{ .name = "hb_face_count" });
    const ret = cFn(_blob);
    return ret;
}
pub fn faceCreate(_blob: *harf_buzz.blob_t, _index: u32) *harf_buzz.face_t {
    const cFn = @extern(*const fn (*harf_buzz.blob_t, u32) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_face_create" });
    const ret = cFn(_blob, _index);
    return ret;
}
pub fn faceCreateForTables(reference_table_func: anytype, reference_table_func_args: anytype) *harf_buzz.face_t {
    var closure_reference_table_func = core.zig_closure(reference_table_func, reference_table_func_args, &.{ *harf_buzz.blob_t, *harf_buzz.face_t, u32 });
    const _reference_table_func: *const fn (_face: *harf_buzz.face_t, _tag: u32, _user_data: ?*anyopaque) callconv(.c) *harf_buzz.blob_t = @ptrCast(closure_reference_table_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_reference_table_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_reference_table_func.c_destroy());
    const cFn = @extern(*const fn (*const fn (_face: *harf_buzz.face_t, _tag: u32, _user_data: ?*anyopaque) callconv(.c) *harf_buzz.blob_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_face_create_for_tables" });
    const ret = cFn(_reference_table_func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn faceGetEmpty() *harf_buzz.face_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.face_t, .{ .name = "hb_face_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn faceGetGlyphCount(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_face_get_glyph_count" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceGetIndex(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_face_get_index" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceGetTableTags(_face: *harf_buzz.face_t, _start_offset: u32) struct {
    ret: u32,
    table_tags: []u32,
} {
    var table_count_out: u32 = undefined;
    const _table_count = &table_count_out;
    var table_tags_out: [*]u32 = undefined;
    const _table_tags = &table_tags_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_face_get_table_tags" });
    const ret = cFn(_face, _start_offset, _table_count, _table_tags);
    return .{ .ret = ret, .table_tags = table_tags_out[0..@intCast(table_count_out)] };
}
pub fn faceGetUpem(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_face_get_upem" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceIsImmutable(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_face_is_immutable" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceMakeImmutable(_face: *harf_buzz.face_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) void, .{ .name = "hb_face_make_immutable" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceReferenceBlob(_face: *harf_buzz.face_t) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_face_reference_blob" });
    const ret = cFn(_face);
    return ret;
}
pub fn faceReferenceTable(_face: *harf_buzz.face_t, _tag: u32) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_face_reference_table" });
    const ret = cFn(_face, _tag);
    return ret;
}
pub fn faceSetGlyphCount(_face: *harf_buzz.face_t, _glyph_count: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) void, .{ .name = "hb_face_set_glyph_count" });
    const ret = cFn(_face, _glyph_count);
    return ret;
}
pub fn faceSetIndex(_face: *harf_buzz.face_t, _index: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) void, .{ .name = "hb_face_set_index" });
    const ret = cFn(_face, _index);
    return ret;
}
pub fn faceSetUpem(_face: *harf_buzz.face_t, _upem: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) void, .{ .name = "hb_face_set_upem" });
    const ret = cFn(_face, _upem);
    return ret;
}
pub const face_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_face_get_type" });
        return cFn();
    }
};
pub fn featureFromString(_strs: []u8, _feature: *harf_buzz.feature_t) i32 {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32, *harf_buzz.feature_t) callconv(.c) i32, .{ .name = "hb_feature_from_string" });
    const ret = cFn(_str, _len, _feature);
    return ret;
}
pub const feature_t = extern struct {
    tag: u32,
    value: u32,
    start: u32,
    end: u32,
    pub fn String(self: *feature_t) struct {
        ret: void,
        buf: [][*:0]const u8,
    } {
        var buf_out: [*][*:0]const u8 = undefined;
        const _buf = &buf_out;
        var size_out: u32 = undefined;
        const _size = &size_out;
        const cFn = @extern(*const fn (*feature_t, *[*][*:0]const u8, *u32) callconv(.c) void, .{ .name = "hb_feature_to_string" });
        const ret = cFn(self, _buf, _size);
        return .{ .ret = ret, .buf = buf_out[0..@intCast(size_out)] };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_feature_get_type" });
        return cFn();
    }
};
pub fn featureToString(_feature: *harf_buzz.feature_t) struct {
    ret: void,
    buf: [][*:0]const u8,
} {
    var buf_out: [*][*:0]const u8 = undefined;
    const _buf = &buf_out;
    var size_out: u32 = undefined;
    const _size = &size_out;
    const cFn = @extern(*const fn (*harf_buzz.feature_t, *[*][*:0]const u8, *u32) callconv(.c) void, .{ .name = "hb_feature_to_string" });
    const ret = cFn(_feature, _buf, _size);
    return .{ .ret = ret, .buf = buf_out[0..@intCast(size_out)] };
}
pub fn fontAddGlyphOriginForDirection(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t, _x: *i32, _y: *i32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_add_glyph_origin_for_direction" });
    const ret = cFn(_font, _glyph, _direction, _x, _y);
    return ret;
}
pub fn fontChanged(_font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_font_changed" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontCreate(_face: *harf_buzz.face_t) *harf_buzz.font_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) *harf_buzz.font_t, .{ .name = "hb_font_create" });
    const ret = cFn(_face);
    return ret;
}
pub fn fontCreateSubFont(_parent: *harf_buzz.font_t) *harf_buzz.font_t {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) *harf_buzz.font_t, .{ .name = "hb_font_create_sub_font" });
    const ret = cFn(_parent);
    return ret;
}
pub fn fontDrawGlyph(_font: *harf_buzz.font_t, _glyph: u32, _dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *harf_buzz.draw_funcs_t, ?*anyopaque) callconv(.c) void, .{ .name = "hb_font_draw_glyph" });
    const ret = cFn(_font, _glyph, _dfuncs, @ptrCast(_draw_data));
    return ret;
}
pub const font_draw_glyph_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
pub const font_extents_t = extern struct {
    ascender: i32,
    descender: i32,
    line_gap: i32,
    reserved9: i32,
    reserved8: i32,
    reserved7: i32,
    reserved6: i32,
    reserved5: i32,
    reserved4: i32,
    reserved3: i32,
    reserved2: i32,
    reserved1: i32,
};
pub fn fontFuncsCreate() *harf_buzz.font_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.font_funcs_t, .{ .name = "hb_font_funcs_create" });
    const ret = cFn();
    return ret;
}
pub fn fontFuncsGetEmpty() *harf_buzz.font_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.font_funcs_t, .{ .name = "hb_font_funcs_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn fontFuncsIsImmutable(_ffuncs: *harf_buzz.font_funcs_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t) callconv(.c) i32, .{ .name = "hb_font_funcs_is_immutable" });
    const ret = cFn(_ffuncs);
    return ret;
}
pub fn fontFuncsMakeImmutable(_ffuncs: *harf_buzz.font_funcs_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t) callconv(.c) void, .{ .name = "hb_font_funcs_make_immutable" });
    const ret = cFn(_ffuncs);
    return ret;
}
pub fn fontFuncsSetDrawGlyphFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.font_t, ?*anyopaque, u32, *harf_buzz.draw_funcs_t, ?*anyopaque });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_draw_glyph_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetFontHExtentsFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, *harf_buzz.font_extents_t });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _extents: *harf_buzz.font_extents_t, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _extents: *harf_buzz.font_extents_t, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_font_h_extents_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetFontVExtentsFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, *harf_buzz.font_extents_t });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _extents: *harf_buzz.font_extents_t, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _extents: *harf_buzz.font_extents_t, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_font_v_extents_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphContourPointFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, u32, *i32, *i32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _point_index: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _point_index: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_contour_point_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphExtentsFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, *harf_buzz.glyph_extents_t });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _extents: *harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _extents: *harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_extents_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphFromNameFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, [*][*:0]const u8, i32, *u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _name: [*][*:0]const u8, _len: i32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _name: [*][*:0]const u8, _len: i32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_from_name_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const fontFuncsSetGlyphFunc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn fontFuncsSetGlyphFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, u32, *u32 });
        const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_func" });
        const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
        return ret;
    }
}.fontFuncsSetGlyphFunc;
pub fn fontFuncsSetGlyphHAdvanceFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_h_advance_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphHAdvancesFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.font_t, ?*anyopaque, u32, *u32, u32, *i32, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _first_advance: *i32, _advance_stride: u32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _first_advance: *i32, _advance_stride: u32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_h_advances_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphHKerningFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _first_glyph: u32, _second_glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _first_glyph: u32, _second_glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_h_kerning_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphHOriginFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, *i32, *i32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_h_origin_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphNameFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, *[*][*:0]const u8, *u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _name: *[*][*:0]const u8, _size: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _name: *[*][*:0]const u8, _size: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_name_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const fontFuncsSetGlyphShapeFunc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn fontFuncsSetGlyphShapeFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.font_t, ?*anyopaque, u32, *harf_buzz.draw_funcs_t, ?*anyopaque });
        const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_shape_func" });
        const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
        return ret;
    }
}.fontFuncsSetGlyphShapeFunc;
pub fn fontFuncsSetGlyphVAdvanceFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_v_advance_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetGlyphVAdvancesFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.font_t, ?*anyopaque, u32, *u32, u32, *i32, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _first_advance: *i32, _advance_stride: u32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _first_advance: *i32, _advance_stride: u32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_v_advances_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const fontFuncsSetGlyphVKerningFunc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn fontFuncsSetGlyphVKerningFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, u32 });
        const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _first_glyph: u32, _second_glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _first_glyph: u32, _second_glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_v_kerning_func" });
        const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
        return ret;
    }
}.fontFuncsSetGlyphVKerningFunc;
pub fn fontFuncsSetGlyphVOriginFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, *i32, *i32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_glyph_v_origin_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetNominalGlyphFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, *u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_nominal_glyph_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetNominalGlyphsFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ u32, *harf_buzz.font_t, ?*anyopaque, u32, *u32, u32, *u32, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_unicode: *u32, _unicode_stride: u32, _first_glyph: *u32, _glyph_stride: u32, _user_data: ?*anyopaque) callconv(.c) u32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_unicode: *u32, _unicode_stride: u32, _first_glyph: *u32, _glyph_stride: u32, _user_data: ?*anyopaque) callconv(.c) u32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_nominal_glyphs_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetPaintGlyphFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.font_t, ?*anyopaque, u32, *harf_buzz.paint_funcs_t, ?*anyopaque, u32, u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _paint_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _palette_index: u32, _foreground: u32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _paint_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _palette_index: u32, _foreground: u32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_paint_glyph_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn fontFuncsSetVariationGlyphFunc(_ffuncs: *harf_buzz.font_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.font_t, ?*anyopaque, u32, u32, *u32 });
    const _func: *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_funcs_t, *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_funcs_set_variation_glyph_func" });
    const ret = cFn(_ffuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const font_funcs_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_font_funcs_get_type" });
        return cFn();
    }
};
pub fn fontGetEmpty() *harf_buzz.font_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.font_t, .{ .name = "hb_font_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn fontGetExtentsForDirection(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t, _extents: *harf_buzz.font_extents_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t, *harf_buzz.font_extents_t) callconv(.c) void, .{ .name = "hb_font_get_extents_for_direction" });
    const ret = cFn(_font, _direction, _extents);
    return ret;
}
pub fn fontGetFace(_font: *harf_buzz.font_t) *harf_buzz.face_t {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_font_get_face" });
    const ret = cFn(_font);
    return ret;
}
pub const font_get_font_extents_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _extents: *harf_buzz.font_extents_t, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyph(_font: *harf_buzz.font_t, _unicode: u32, _variation_selector: u32) struct {
    ret: i32,
    glyph: u32,
} {
    var glyph_out: u32 = undefined;
    const _glyph = &glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph" });
    const ret = cFn(_font, _unicode, _variation_selector, _glyph);
    return .{ .ret = ret, .glyph = glyph_out };
}
pub fn fontGetGlyphAdvanceForDirection(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t) struct {
    ret: void,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_get_glyph_advance_for_direction" });
    const ret = cFn(_font, _glyph, _direction, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub const font_get_glyph_advance_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphAdvancesForDirection(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t, _count: u32, _first_glyph: *u32, _glyph_stride: u32) struct {
    ret: void,
    first_advance: i32,
    advance_stride: u32,
} {
    var first_advance_out: i32 = undefined;
    const _first_advance = &first_advance_out;
    var advance_stride_out: u32 = undefined;
    const _advance_stride = &advance_stride_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t, u32, *u32, u32, *i32, *u32) callconv(.c) void, .{ .name = "hb_font_get_glyph_advances_for_direction" });
    const ret = cFn(_font, _direction, _count, _first_glyph, _glyph_stride, _first_advance, _advance_stride);
    return .{ .ret = ret, .first_advance = first_advance_out, .advance_stride = advance_stride_out };
}
pub const font_get_glyph_advances_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _first_advance: *i32, _advance_stride: u32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn fontGetGlyphContourPoint(_font: *harf_buzz.font_t, _glyph: u32, _point_index: u32) struct {
    ret: i32,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32, *i32, *i32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_contour_point" });
    const ret = cFn(_font, _glyph, _point_index, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub fn fontGetGlyphContourPointForOrigin(_font: *harf_buzz.font_t, _glyph: u32, _point_index: u32, _direction: harf_buzz.direction_t) struct {
    ret: i32,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_contour_point_for_origin" });
    const ret = cFn(_font, _glyph, _point_index, _direction, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub const font_get_glyph_contour_point_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _point_index: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphExtents(_font: *harf_buzz.font_t, _glyph: u32, _extents: *harf_buzz.glyph_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *harf_buzz.glyph_extents_t) callconv(.c) i32, .{ .name = "hb_font_get_glyph_extents" });
    const ret = cFn(_font, _glyph, _extents);
    return ret;
}
pub fn fontGetGlyphExtentsForOrigin(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t, _extents: *harf_buzz.glyph_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, *harf_buzz.glyph_extents_t) callconv(.c) i32, .{ .name = "hb_font_get_glyph_extents_for_origin" });
    const ret = cFn(_font, _glyph, _direction, _extents);
    return ret;
}
pub const font_get_glyph_extents_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _extents: *harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphFromName(_font: *harf_buzz.font_t, _names: [][*:0]const u8) struct {
    ret: i32,
    glyph: u32,
} {
    const _name = _names.ptr;
    const _len: i32 = @intCast(_names.len);
    var glyph_out: u32 = undefined;
    const _glyph = &glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, [*][*:0]const u8, i32, *u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_from_name" });
    const ret = cFn(_font, _name, _len, _glyph);
    return .{ .ret = ret, .glyph = glyph_out };
}
pub const font_get_glyph_from_name_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _name: [*][*:0]const u8, _len: i32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub const font_get_glyph_func_t = if (config.disable_deprecated) core.Deprecated else *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphHAdvance(_font: *harf_buzz.font_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_h_advance" });
    const ret = cFn(_font, _glyph);
    return ret;
}
pub fn fontGetGlyphHAdvances(_font: *harf_buzz.font_t, _count: u32, _first_glyph: *u32, _glyph_stride: u32, _advance_stride: u32) struct {
    ret: void,
    first_advance: i32,
} {
    var first_advance_out: i32 = undefined;
    const _first_advance = &first_advance_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *u32, u32, *i32, u32) callconv(.c) void, .{ .name = "hb_font_get_glyph_h_advances" });
    const ret = cFn(_font, _count, _first_glyph, _glyph_stride, _first_advance, _advance_stride);
    return .{ .ret = ret, .first_advance = first_advance_out };
}
pub fn fontGetGlyphHKerning(_font: *harf_buzz.font_t, _left_glyph: u32, _right_glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_h_kerning" });
    const ret = cFn(_font, _left_glyph, _right_glyph);
    return ret;
}
pub fn fontGetGlyphHOrigin(_font: *harf_buzz.font_t, _glyph: u32) struct {
    ret: i32,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *i32, *i32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_h_origin" });
    const ret = cFn(_font, _glyph, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub fn fontGetGlyphKerningForDirection(_font: *harf_buzz.font_t, _first_glyph: u32, _second_glyph: u32, _direction: harf_buzz.direction_t) struct {
    ret: void,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_get_glyph_kerning_for_direction" });
    const ret = cFn(_font, _first_glyph, _second_glyph, _direction, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub const font_get_glyph_kerning_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _first_glyph: u32, _second_glyph: u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphName(_font: *harf_buzz.font_t, _glyph: u32) struct {
    ret: i32,
    name: [][*:0]const u8,
} {
    var name_out: [*][*:0]const u8 = undefined;
    const _name = &name_out;
    var size_out: u32 = undefined;
    const _size = &size_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *[*][*:0]const u8, *u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_name" });
    const ret = cFn(_font, _glyph, _name, _size);
    return .{ .ret = ret, .name = name_out[0..@intCast(size_out)] };
}
pub const font_get_glyph_name_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _name: *[*][*:0]const u8, _size: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetGlyphOriginForDirection(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t) struct {
    ret: void,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_get_glyph_origin_for_direction" });
    const ret = cFn(_font, _glyph, _direction, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub const font_get_glyph_origin_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _x: *i32, _y: *i32, _user_data: ?*anyopaque) callconv(.c) i32;
pub const fontGetGlyphShape = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn fontGetGlyphShape(_font: *harf_buzz.font_t, _glyph: u32, _dfuncs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *harf_buzz.draw_funcs_t, ?*anyopaque) callconv(.c) void, .{ .name = "hb_font_get_glyph_shape" });
        const ret = cFn(_font, _glyph, _dfuncs, @ptrCast(_draw_data));
        return ret;
    }
}.fontGetGlyphShape;
pub const font_get_glyph_shape_func_t = if (config.disable_deprecated) core.Deprecated else *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _draw_funcs: *harf_buzz.draw_funcs_t, _draw_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
pub fn fontGetGlyphVAdvance(_font: *harf_buzz.font_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_v_advance" });
    const ret = cFn(_font, _glyph);
    return ret;
}
pub fn fontGetGlyphVAdvances(_font: *harf_buzz.font_t, _count: u32, _first_glyph: *u32, _glyph_stride: u32) struct {
    ret: void,
    first_advance: i32,
    advance_stride: u32,
} {
    var first_advance_out: i32 = undefined;
    const _first_advance = &first_advance_out;
    var advance_stride_out: u32 = undefined;
    const _advance_stride = &advance_stride_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *u32, u32, *i32, *u32) callconv(.c) void, .{ .name = "hb_font_get_glyph_v_advances" });
    const ret = cFn(_font, _count, _first_glyph, _glyph_stride, _first_advance, _advance_stride);
    return .{ .ret = ret, .first_advance = first_advance_out, .advance_stride = advance_stride_out };
}
pub const fontGetGlyphVKerning = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn fontGetGlyphVKerning(_font: *harf_buzz.font_t, _top_glyph: u32, _bottom_glyph: u32) i32 {
        const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_v_kerning" });
        const ret = cFn(_font, _top_glyph, _bottom_glyph);
        return ret;
    }
}.fontGetGlyphVKerning;
pub fn fontGetGlyphVOrigin(_font: *harf_buzz.font_t, _glyph: u32) struct {
    ret: i32,
    x: i32,
    y: i32,
} {
    var x_out: i32 = undefined;
    const _x = &x_out;
    var y_out: i32 = undefined;
    const _y = &y_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *i32, *i32) callconv(.c) i32, .{ .name = "hb_font_get_glyph_v_origin" });
    const ret = cFn(_font, _glyph, _x, _y);
    return .{ .ret = ret, .x = x_out, .y = y_out };
}
pub fn fontGetHExtents(_font: *harf_buzz.font_t, _extents: *harf_buzz.font_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.font_extents_t) callconv(.c) i32, .{ .name = "hb_font_get_h_extents" });
    const ret = cFn(_font, _extents);
    return ret;
}
pub fn fontGetNominalGlyph(_font: *harf_buzz.font_t, _unicode: u32) struct {
    ret: i32,
    glyph: u32,
} {
    var glyph_out: u32 = undefined;
    const _glyph = &glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *u32) callconv(.c) i32, .{ .name = "hb_font_get_nominal_glyph" });
    const ret = cFn(_font, _unicode, _glyph);
    return .{ .ret = ret, .glyph = glyph_out };
}
pub const font_get_nominal_glyph_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGetNominalGlyphs(_font: *harf_buzz.font_t, _count: u32, _first_unicode: *u32, _unicode_stride: u32, _glyph_stride: u32) struct {
    ret: u32,
    first_glyph: u32,
} {
    var first_glyph_out: u32 = undefined;
    const _first_glyph = &first_glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *u32, u32, *u32, u32) callconv(.c) u32, .{ .name = "hb_font_get_nominal_glyphs" });
    const ret = cFn(_font, _count, _first_unicode, _unicode_stride, _first_glyph, _glyph_stride);
    return .{ .ret = ret, .first_glyph = first_glyph_out };
}
pub const font_get_nominal_glyphs_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _count: u32, _first_unicode: *u32, _unicode_stride: u32, _first_glyph: *u32, _glyph_stride: u32, _user_data: ?*anyopaque) callconv(.c) u32;
pub fn fontGetParent(_font: *harf_buzz.font_t) *harf_buzz.font_t {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) *harf_buzz.font_t, .{ .name = "hb_font_get_parent" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontGetPpem(_font: *harf_buzz.font_t) struct {
    ret: void,
    x_ppem: u32,
    y_ppem: u32,
} {
    var x_ppem_out: u32 = undefined;
    const _x_ppem = &x_ppem_out;
    var y_ppem_out: u32 = undefined;
    const _y_ppem = &y_ppem_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *u32, *u32) callconv(.c) void, .{ .name = "hb_font_get_ppem" });
    const ret = cFn(_font, _x_ppem, _y_ppem);
    return .{ .ret = ret, .x_ppem = x_ppem_out, .y_ppem = y_ppem_out };
}
pub fn fontGetPtem(_font: *harf_buzz.font_t) f32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) f32, .{ .name = "hb_font_get_ptem" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontGetScale(_font: *harf_buzz.font_t) struct {
    ret: void,
    x_scale: i32,
    y_scale: i32,
} {
    var x_scale_out: i32 = undefined;
    const _x_scale = &x_scale_out;
    var y_scale_out: i32 = undefined;
    const _y_scale = &y_scale_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_get_scale" });
    const ret = cFn(_font, _x_scale, _y_scale);
    return .{ .ret = ret, .x_scale = x_scale_out, .y_scale = y_scale_out };
}
pub fn fontGetSerial(_font: *harf_buzz.font_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) u32, .{ .name = "hb_font_get_serial" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontGetSyntheticBold(_font: *harf_buzz.font_t) struct {
    ret: void,
    x_embolden: f32,
    y_embolden: f32,
    in_place: i32,
} {
    var x_embolden_out: f32 = undefined;
    const _x_embolden = &x_embolden_out;
    var y_embolden_out: f32 = undefined;
    const _y_embolden = &y_embolden_out;
    var in_place_out: i32 = undefined;
    const _in_place = &in_place_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *f32, *f32, *i32) callconv(.c) void, .{ .name = "hb_font_get_synthetic_bold" });
    const ret = cFn(_font, _x_embolden, _y_embolden, _in_place);
    return .{ .ret = ret, .x_embolden = x_embolden_out, .y_embolden = y_embolden_out, .in_place = in_place_out };
}
pub fn fontGetSyntheticSlant(_font: *harf_buzz.font_t) f32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) f32, .{ .name = "hb_font_get_synthetic_slant" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontGetVExtents(_font: *harf_buzz.font_t, _extents: *harf_buzz.font_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.font_extents_t) callconv(.c) i32, .{ .name = "hb_font_get_v_extents" });
    const ret = cFn(_font, _extents);
    return ret;
}
pub fn fontGetVarCoordsDesign(_font: *harf_buzz.font_t) struct {
    ret: *f32,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *u32) callconv(.c) *f32, .{ .name = "hb_font_get_var_coords_design" });
    const ret = cFn(_font, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn fontGetVarCoordsNormalized(_font: *harf_buzz.font_t) struct {
    ret: *i32,
    length: u32,
} {
    var length_out: u32 = undefined;
    const _length = &length_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *u32) callconv(.c) *i32, .{ .name = "hb_font_get_var_coords_normalized" });
    const ret = cFn(_font, _length);
    return .{ .ret = ret, .length = length_out };
}
pub fn fontGetVarNamedInstance(_font: *harf_buzz.font_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) u32, .{ .name = "hb_font_get_var_named_instance" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontGetVariationGlyph(_font: *harf_buzz.font_t, _unicode: u32, _variation_selector: u32) struct {
    ret: i32,
    glyph: u32,
} {
    var glyph_out: u32 = undefined;
    const _glyph = &glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_font_get_variation_glyph" });
    const ret = cFn(_font, _unicode, _variation_selector, _glyph);
    return .{ .ret = ret, .glyph = glyph_out };
}
pub const font_get_variation_glyph_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _unicode: u32, _variation_selector: u32, _glyph: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn fontGlyphFromString(_font: *harf_buzz.font_t, _ss: []u8) struct {
    ret: i32,
    glyph: u32,
} {
    const _s = _ss.ptr;
    const _len: i32 = @intCast(_ss.len);
    var glyph_out: u32 = undefined;
    const _glyph = &glyph_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, [*]u8, i32, *u32) callconv(.c) i32, .{ .name = "hb_font_glyph_from_string" });
    const ret = cFn(_font, _s, _len, _glyph);
    return .{ .ret = ret, .glyph = glyph_out };
}
pub fn fontGlyphToString(_font: *harf_buzz.font_t, _glyph: u32) struct {
    ret: void,
    s: [][*:0]const u8,
} {
    var s_out: [*][*:0]const u8 = undefined;
    const _s = &s_out;
    var size_out: u32 = undefined;
    const _size = &size_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *[*][*:0]const u8, *u32) callconv(.c) void, .{ .name = "hb_font_glyph_to_string" });
    const ret = cFn(_font, _glyph, _s, _size);
    return .{ .ret = ret, .s = s_out[0..@intCast(size_out)] };
}
pub fn fontIsImmutable(_font: *harf_buzz.font_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) i32, .{ .name = "hb_font_is_immutable" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontMakeImmutable(_font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_font_make_immutable" });
    const ret = cFn(_font);
    return ret;
}
pub fn fontPaintGlyph(_font: *harf_buzz.font_t, _glyph: u32, _pfuncs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _palette_index: u32, _foreground: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, *harf_buzz.paint_funcs_t, ?*anyopaque, u32, u32) callconv(.c) void, .{ .name = "hb_font_paint_glyph" });
    const ret = cFn(_font, _glyph, _pfuncs, @ptrCast(_paint_data), _palette_index, _foreground);
    return ret;
}
pub const font_paint_glyph_func_t = *const fn (_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _glyph: u32, _paint_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _palette_index: u32, _foreground: u32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn fontSetFace(_font: *harf_buzz.font_t, _face: *harf_buzz.face_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.face_t) callconv(.c) void, .{ .name = "hb_font_set_face" });
    const ret = cFn(_font, _face);
    return ret;
}
pub fn fontSetFuncs(_font: *harf_buzz.font_t, klass: anytype, klass_args: anytype) void {
    var closure_klass = core.zig_closure(klass, klass_args, &.{void});
    const _klass: *harf_buzz.font_funcs_t = @ptrCast(closure_klass.c_closure());
    const _font_data: ?*anyopaque = @ptrCast(closure_klass.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_klass.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.font_funcs_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_set_funcs" });
    const ret = cFn(_font, _klass, @ptrCast(_font_data), _destroy);
    return ret;
}
pub fn fontSetFuncsData(_font: *harf_buzz.font_t, _font_data: ?*anyopaque, _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_font_set_funcs_data" });
    const ret = cFn(_font, @ptrCast(_font_data), _destroy);
    return ret;
}
pub fn fontSetParent(_font: *harf_buzz.font_t, _parent: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_font_set_parent" });
    const ret = cFn(_font, _parent);
    return ret;
}
pub fn fontSetPpem(_font: *harf_buzz.font_t, _x_ppem: u32, _y_ppem: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, u32) callconv(.c) void, .{ .name = "hb_font_set_ppem" });
    const ret = cFn(_font, _x_ppem, _y_ppem);
    return ret;
}
pub fn fontSetPtem(_font: *harf_buzz.font_t, _ptem: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, f32) callconv(.c) void, .{ .name = "hb_font_set_ptem" });
    const ret = cFn(_font, _ptem);
    return ret;
}
pub fn fontSetScale(_font: *harf_buzz.font_t, _x_scale: i32, _y_scale: i32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, i32, i32) callconv(.c) void, .{ .name = "hb_font_set_scale" });
    const ret = cFn(_font, _x_scale, _y_scale);
    return ret;
}
pub fn fontSetSyntheticBold(_font: *harf_buzz.font_t, _x_embolden: f32, _y_embolden: f32, _in_place: i32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, f32, f32, i32) callconv(.c) void, .{ .name = "hb_font_set_synthetic_bold" });
    const ret = cFn(_font, _x_embolden, _y_embolden, _in_place);
    return ret;
}
pub fn fontSetSyntheticSlant(_font: *harf_buzz.font_t, _slant: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, f32) callconv(.c) void, .{ .name = "hb_font_set_synthetic_slant" });
    const ret = cFn(_font, _slant);
    return ret;
}
pub fn fontSetVarCoordsDesign(_font: *harf_buzz.font_t, _coordss: []f32) void {
    const _coords = _coordss.ptr;
    const _coords_length: u32 = @intCast(_coordss.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, [*]f32, u32) callconv(.c) void, .{ .name = "hb_font_set_var_coords_design" });
    const ret = cFn(_font, _coords, _coords_length);
    return ret;
}
pub fn fontSetVarCoordsNormalized(_font: *harf_buzz.font_t, _coordss: []i32) void {
    const _coords = _coordss.ptr;
    const _coords_length: u32 = @intCast(_coordss.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, [*]i32, u32) callconv(.c) void, .{ .name = "hb_font_set_var_coords_normalized" });
    const ret = cFn(_font, _coords, _coords_length);
    return ret;
}
pub fn fontSetVarNamedInstance(_font: *harf_buzz.font_t, _instance_index: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) void, .{ .name = "hb_font_set_var_named_instance" });
    const ret = cFn(_font, _instance_index);
    return ret;
}
pub fn fontSetVariation(_font: *harf_buzz.font_t, _tag: u32, _value: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, f32) callconv(.c) void, .{ .name = "hb_font_set_variation" });
    const ret = cFn(_font, _tag, _value);
    return ret;
}
pub fn fontSetVariations(_font: *harf_buzz.font_t, _variationss: []harf_buzz.variation_t) void {
    const _variations = _variationss.ptr;
    const _variations_length: u32 = @intCast(_variationss.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, [*]harf_buzz.variation_t, u32) callconv(.c) void, .{ .name = "hb_font_set_variations" });
    const ret = cFn(_font, _variations, _variations_length);
    return ret;
}
pub fn fontSubtractGlyphOriginForDirection(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t, _x: *i32, _y: *i32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, *i32, *i32) callconv(.c) void, .{ .name = "hb_font_subtract_glyph_origin_for_direction" });
    const ret = cFn(_font, _glyph, _direction, _x, _y);
    return ret;
}
pub const font_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_font_get_type" });
        return cFn();
    }
};
pub fn ftFaceCreate(_ft_face: freetype2.Face, _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) *harf_buzz.face_t {
    const cFn = @extern(*const fn (freetype2.Face, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_ft_face_create" });
    const ret = cFn(_ft_face, _destroy);
    return ret;
}
pub fn ftFaceCreateCached(_ft_face: freetype2.Face) *harf_buzz.face_t {
    const cFn = @extern(*const fn (freetype2.Face) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_ft_face_create_cached" });
    const ret = cFn(_ft_face);
    return ret;
}
pub fn ftFaceCreateReferenced(_ft_face: freetype2.Face) *harf_buzz.face_t {
    const cFn = @extern(*const fn (freetype2.Face) callconv(.c) *harf_buzz.face_t, .{ .name = "hb_ft_face_create_referenced" });
    const ret = cFn(_ft_face);
    return ret;
}
pub fn ftFontChanged(_font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_ft_font_changed" });
    const ret = cFn(_font);
    return ret;
}
pub fn ftFontCreate(_ft_face: freetype2.Face, _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) *harf_buzz.font_t {
    const cFn = @extern(*const fn (freetype2.Face, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) *harf_buzz.font_t, .{ .name = "hb_ft_font_create" });
    const ret = cFn(_ft_face, _destroy);
    return ret;
}
pub fn ftFontCreateReferenced(_ft_face: freetype2.Face) *harf_buzz.font_t {
    const cFn = @extern(*const fn (freetype2.Face) callconv(.c) *harf_buzz.font_t, .{ .name = "hb_ft_font_create_referenced" });
    const ret = cFn(_ft_face);
    return ret;
}
pub fn ftFontGetLoadFlags(_font: *harf_buzz.font_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) i32, .{ .name = "hb_ft_font_get_load_flags" });
    const ret = cFn(_font);
    return ret;
}
pub fn ftFontSetFuncs(_font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_ft_font_set_funcs" });
    const ret = cFn(_font);
    return ret;
}
pub fn ftFontSetLoadFlags(_font: *harf_buzz.font_t, _load_flags: i32) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t, i32) callconv(.c) void, .{ .name = "hb_ft_font_set_load_flags" });
    const ret = cFn(_font, _load_flags);
    return ret;
}
pub fn ftHbFontChanged(_font: *harf_buzz.font_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) i32, .{ .name = "hb_ft_hb_font_changed" });
    const ret = cFn(_font);
    return ret;
}
pub fn glibBlobCreate(_gbytes: *glib.Bytes) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*glib.Bytes) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_glib_blob_create" });
    const ret = cFn(_gbytes);
    return ret;
}
pub fn glibGetUnicodeFuncs() *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_glib_get_unicode_funcs" });
    const ret = cFn();
    return ret;
}
pub fn glibScriptFromScript(_script: harf_buzz.script_t) glib.UnicodeScript {
    const cFn = @extern(*const fn (harf_buzz.script_t) callconv(.c) glib.UnicodeScript, .{ .name = "hb_glib_script_from_script" });
    const ret = cFn(_script);
    return ret;
}
pub fn glibScriptToScript(_script: glib.UnicodeScript) harf_buzz.script_t {
    const cFn = @extern(*const fn (glib.UnicodeScript) callconv(.c) harf_buzz.script_t, .{ .name = "hb_glib_script_to_script" });
    const ret = cFn(_script);
    return ret;
}
pub const glyph_extents_t = extern struct {
    x_bearing: i32,
    y_bearing: i32,
    width: i32,
    height: i32,
};
pub const glyph_flags_t = packed struct(u32) {
    unsafe_to_break: bool = false,
    unsafe_to_concat: bool = false,
    safe_to_insert_tatweel: bool = false,
    _: u29 = 0,
    pub const defined: @This() = @bitCast(@as(u32, 7));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_glyph_flags_get_type" });
        return cFn();
    }
};
pub fn glyphInfoGetGlyphFlags(_info: *harf_buzz.glyph_info_t) harf_buzz.glyph_flags_t {
    const cFn = @extern(*const fn (*harf_buzz.glyph_info_t) callconv(.c) harf_buzz.glyph_flags_t, .{ .name = "hb_glyph_info_get_glyph_flags" });
    const ret = cFn(_info);
    return ret;
}
pub const glyph_info_t = extern struct {
    codepoint: u32,
    mask: u32,
    cluster: u32,
    var1: harf_buzz.var_int_t,
    var2: harf_buzz.var_int_t,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_glyph_info_get_type" });
        return cFn();
    }
};
pub const glyph_position_t = extern struct {
    x_advance: i32,
    y_advance: i32,
    x_offset: i32,
    y_offset: i32,
    @"var": harf_buzz.var_int_t,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_glyph_position_get_type" });
        return cFn();
    }
};
pub fn languageFromString(_strs: []u8) *harf_buzz.language_t {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) *harf_buzz.language_t, .{ .name = "hb_language_from_string" });
    const ret = cFn(_str, _len);
    return ret;
}
pub fn languageGetDefault() *harf_buzz.language_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.language_t, .{ .name = "hb_language_get_default" });
    const ret = cFn();
    return ret;
}
pub fn languageMatches(_language: *harf_buzz.language_t, _specific: *harf_buzz.language_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.language_t, *harf_buzz.language_t) callconv(.c) i32, .{ .name = "hb_language_matches" });
    const ret = cFn(_language, _specific);
    return ret;
}
pub const language_t = opaque {
    pub fn String(self: *language_t) [*:0]u8 {
        const cFn = @extern(*const fn (*language_t) callconv(.c) [*:0]u8, .{ .name = "hb_language_to_string" });
        const ret = cFn(self);
        return ret;
    }
};
pub fn languageToString(_language: *harf_buzz.language_t) [*:0]u8 {
    const cFn = @extern(*const fn (*harf_buzz.language_t) callconv(.c) [*:0]u8, .{ .name = "hb_language_to_string" });
    const ret = cFn(_language);
    return ret;
}
pub fn mapAllocationSuccessful(_map: *harf_buzz.map_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) i32, .{ .name = "hb_map_allocation_successful" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapClear(_map: *harf_buzz.map_t) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) void, .{ .name = "hb_map_clear" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapCopy(_map: *harf_buzz.map_t) *harf_buzz.map_t {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) *harf_buzz.map_t, .{ .name = "hb_map_copy" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapCreate() *harf_buzz.map_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.map_t, .{ .name = "hb_map_create" });
    const ret = cFn();
    return ret;
}
pub fn mapDel(_map: *harf_buzz.map_t, _key: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t, u32) callconv(.c) void, .{ .name = "hb_map_del" });
    const ret = cFn(_map, _key);
    return ret;
}
pub fn mapGet(_map: *harf_buzz.map_t, _key: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t, u32) callconv(.c) u32, .{ .name = "hb_map_get" });
    const ret = cFn(_map, _key);
    return ret;
}
pub fn mapGetEmpty() *harf_buzz.map_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.map_t, .{ .name = "hb_map_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn mapGetPopulation(_map: *harf_buzz.map_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) u32, .{ .name = "hb_map_get_population" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapHas(_map: *harf_buzz.map_t, _key: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t, u32) callconv(.c) i32, .{ .name = "hb_map_has" });
    const ret = cFn(_map, _key);
    return ret;
}
pub fn mapHash(_map: *harf_buzz.map_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) u32, .{ .name = "hb_map_hash" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapIsEmpty(_map: *harf_buzz.map_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t) callconv(.c) i32, .{ .name = "hb_map_is_empty" });
    const ret = cFn(_map);
    return ret;
}
pub fn mapIsEqual(_map: *harf_buzz.map_t, _other: *harf_buzz.map_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.map_t, *harf_buzz.map_t) callconv(.c) i32, .{ .name = "hb_map_is_equal" });
    const ret = cFn(_map, _other);
    return ret;
}
pub fn mapKeys(_map: *harf_buzz.map_t, _keys: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_map_keys" });
    const ret = cFn(_map, _keys);
    return ret;
}
pub fn mapNext(_map: *harf_buzz.map_t, _idx: *i32) struct {
    ret: i32,
    key: u32,
    value: u32,
} {
    var key_out: u32 = undefined;
    const _key = &key_out;
    var value_out: u32 = undefined;
    const _value = &value_out;
    const cFn = @extern(*const fn (*harf_buzz.map_t, *i32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_map_next" });
    const ret = cFn(_map, _idx, _key, _value);
    return .{ .ret = ret, .key = key_out, .value = value_out };
}
pub fn mapSet(_map: *harf_buzz.map_t, _key: u32, _value: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t, u32, u32) callconv(.c) void, .{ .name = "hb_map_set" });
    const ret = cFn(_map, _key, _value);
    return ret;
}
pub const map_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_map_get_type" });
        return cFn();
    }
};
pub fn mapUpdate(_map: *harf_buzz.map_t, _other: *harf_buzz.map_t) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t, *harf_buzz.map_t) callconv(.c) void, .{ .name = "hb_map_update" });
    const ret = cFn(_map, _other);
    return ret;
}
pub fn mapValues(_map: *harf_buzz.map_t, _values: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.map_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_map_values" });
    const ret = cFn(_map, _values);
    return ret;
}
pub const memory_mode_t = enum(u32) {
    duplicate = 0,
    readonly = 1,
    writable = 2,
    readonly_may_make_writable = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_memory_mode_get_type" });
        return cFn();
    }
};
pub fn otColorGlyphGetLayers(_face: *harf_buzz.face_t, _glyph: u32, _start_offset: u32, _layerss: []harf_buzz.ot_color_layer_t) struct {
    ret: u32,
} {
    const _layers = _layerss.ptr;
    var layer_count_out: u32 = undefined;
    const _layer_count = &layer_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, ?[*]harf_buzz.ot_color_layer_t) callconv(.c) u32, .{ .name = "hb_ot_color_glyph_get_layers" });
    const ret = cFn(_face, _glyph, _start_offset, _layer_count, _layers);
    return .{ .ret = ret };
}
pub fn otColorGlyphHasPaint(_face: *harf_buzz.face_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) i32, .{ .name = "hb_ot_color_glyph_has_paint" });
    const ret = cFn(_face, _glyph);
    return ret;
}
pub fn otColorGlyphReferencePng(_font: *harf_buzz.font_t, _glyph: u32) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_ot_color_glyph_reference_png" });
    const ret = cFn(_font, _glyph);
    return ret;
}
pub fn otColorGlyphReferenceSvg(_face: *harf_buzz.face_t, _glyph: u32) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_ot_color_glyph_reference_svg" });
    const ret = cFn(_face, _glyph);
    return ret;
}
pub fn otColorHasLayers(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_color_has_layers" });
    const ret = cFn(_face);
    return ret;
}
pub fn otColorHasPaint(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_color_has_paint" });
    const ret = cFn(_face);
    return ret;
}
pub fn otColorHasPalettes(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_color_has_palettes" });
    const ret = cFn(_face);
    return ret;
}
pub fn otColorHasPng(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_color_has_png" });
    const ret = cFn(_face);
    return ret;
}
pub fn otColorHasSvg(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_color_has_svg" });
    const ret = cFn(_face);
    return ret;
}
pub const ot_color_layer_t = extern struct {
    glyph: u32,
    color_index: u32,
};
pub fn otColorPaletteColorGetNameId(_face: *harf_buzz.face_t, _color_index: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) u32, .{ .name = "hb_ot_color_palette_color_get_name_id" });
    const ret = cFn(_face, _color_index);
    return ret;
}
pub const ot_color_palette_flags_t = packed struct(u32) {
    usable_with_light_background: bool = false,
    usable_with_dark_background: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_color_palette_flags_get_type" });
        return cFn();
    }
};
pub fn otColorPaletteGetColors(_face: *harf_buzz.face_t, _palette_index: u32, _start_offset: u32) struct {
    ret: u32,
    colors: []u32,
} {
    var color_count_out: u32 = undefined;
    const _color_count = &color_count_out;
    var colors_out: ?[*]u32 = undefined;
    const _colors = &colors_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, *?[*]u32) callconv(.c) u32, .{ .name = "hb_ot_color_palette_get_colors" });
    const ret = cFn(_face, _palette_index, _start_offset, _color_count, _colors);
    return .{ .ret = ret, .colors = colors_out[0..@intCast(color_count_out)] };
}
pub fn otColorPaletteGetCount(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_ot_color_palette_get_count" });
    const ret = cFn(_face);
    return ret;
}
pub fn otColorPaletteGetFlags(_face: *harf_buzz.face_t, _palette_index: u32) harf_buzz.ot_color_palette_flags_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) harf_buzz.ot_color_palette_flags_t, .{ .name = "hb_ot_color_palette_get_flags" });
    const ret = cFn(_face, _palette_index);
    return ret;
}
pub fn otColorPaletteGetNameId(_face: *harf_buzz.face_t, _palette_index: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) u32, .{ .name = "hb_ot_color_palette_get_name_id" });
    const ret = cFn(_face, _palette_index);
    return ret;
}
pub fn otFontSetFuncs(_font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_ot_font_set_funcs" });
    const ret = cFn(_font);
    return ret;
}
pub const ot_layout_baseline_tag_t = enum(u32) {
    roman = 1919905134,
    hanging = 1751215719,
    ideo_face_bottom_or_left = 1768121954,
    ideo_face_top_or_right = 1768121972,
    ideo_face_central = 1231251043,
    ideo_embox_bottom_or_left = 1768187247,
    ideo_embox_top_or_right = 1768191088,
    ideo_embox_central = 1231315813,
    math = 1835103336,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_layout_baseline_tag_get_type" });
        return cFn();
    }
};
pub fn otLayoutCollectFeatures(_face: *harf_buzz.face_t, _table_tag: u32, _scripts: ?[*:0]u32, _languages: ?[*:0]u32, _features: ?[*:0]u32, _feature_indexes: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?[*:0]u32, ?[*:0]u32, ?[*:0]u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_collect_features" });
    const ret = cFn(_face, _table_tag, _scripts, _languages, _features, _feature_indexes);
    return ret;
}
pub fn otLayoutCollectFeaturesMap(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32, _feature_map: *harf_buzz.map_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *harf_buzz.map_t) callconv(.c) void, .{ .name = "hb_ot_layout_collect_features_map" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _feature_map);
    return ret;
}
pub fn otLayoutCollectLookups(_face: *harf_buzz.face_t, _table_tag: u32, _scripts: ?[*:0]u32, _languages: ?[*:0]u32, _features: ?[*:0]u32, _lookup_indexes: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?[*:0]u32, ?[*:0]u32, ?[*:0]u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_collect_lookups" });
    const ret = cFn(_face, _table_tag, _scripts, _languages, _features, _lookup_indexes);
    return ret;
}
pub fn otLayoutFeatureGetCharacters(_face: *harf_buzz.face_t, _table_tag: u32, _feature_index: u32, _start_offset: u32, _characterss: []u32) struct {
    ret: u32,
} {
    const _characters = _characterss.ptr;
    var char_count_out: u32 = undefined;
    const _char_count = &char_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, ?*u32, [*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_feature_get_characters" });
    const ret = cFn(_face, _table_tag, _feature_index, _start_offset, _char_count, _characters);
    return .{ .ret = ret };
}
pub fn otLayoutFeatureGetLookups(_face: *harf_buzz.face_t, _table_tag: u32, _feature_index: u32, _start_offset: u32) struct {
    ret: u32,
    lookup_indexes: []u32,
} {
    var lookup_count_out: u32 = undefined;
    const _lookup_count = &lookup_count_out;
    var lookup_indexes_out: [*]u32 = undefined;
    const _lookup_indexes = &lookup_indexes_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_feature_get_lookups" });
    const ret = cFn(_face, _table_tag, _feature_index, _start_offset, _lookup_count, _lookup_indexes);
    return .{ .ret = ret, .lookup_indexes = lookup_indexes_out[0..@intCast(lookup_count_out)] };
}
pub fn otLayoutFeatureGetNameIds(_face: *harf_buzz.face_t, _table_tag: u32, _feature_index: u32) struct {
    ret: i32,
    label_id: u32,
    tooltip_id: u32,
    sample_id: u32,
    num_named_parameters: u32,
    first_param_id: u32,
} {
    var label_id_out: u32 = undefined;
    const _label_id = &label_id_out;
    var tooltip_id_out: u32 = undefined;
    const _tooltip_id = &tooltip_id_out;
    var sample_id_out: u32 = undefined;
    const _sample_id = &sample_id_out;
    var num_named_parameters_out: u32 = undefined;
    const _num_named_parameters = &num_named_parameters_out;
    var first_param_id_out: u32 = undefined;
    const _first_param_id = &first_param_id_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, ?*u32, ?*u32, ?*u32, ?*u32) callconv(.c) i32, .{ .name = "hb_ot_layout_feature_get_name_ids" });
    const ret = cFn(_face, _table_tag, _feature_index, _label_id, _tooltip_id, _sample_id, _num_named_parameters, _first_param_id);
    return .{ .ret = ret, .label_id = label_id_out, .tooltip_id = tooltip_id_out, .sample_id = sample_id_out, .num_named_parameters = num_named_parameters_out, .first_param_id = first_param_id_out };
}
pub fn otLayoutFeatureWithVariationsGetLookups(_face: *harf_buzz.face_t, _table_tag: u32, _feature_index: u32, _variations_index: u32, _start_offset: u32) struct {
    ret: u32,
    lookup_indexes: []u32,
} {
    var lookup_count_out: u32 = undefined;
    const _lookup_count = &lookup_count_out;
    var lookup_indexes_out: [*]u32 = undefined;
    const _lookup_indexes = &lookup_indexes_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_feature_with_variations_get_lookups" });
    const ret = cFn(_face, _table_tag, _feature_index, _variations_index, _start_offset, _lookup_count, _lookup_indexes);
    return .{ .ret = ret, .lookup_indexes = lookup_indexes_out[0..@intCast(lookup_count_out)] };
}
pub fn otLayoutGetAttachPoints(_face: *harf_buzz.face_t, _glyph: u32, _start_offset: u32) struct {
    ret: u32,
    point_array: []u32,
} {
    var point_count_out: u32 = undefined;
    const _point_count = &point_count_out;
    var point_array_out: [*]u32 = undefined;
    const _point_array = &point_array_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_get_attach_points" });
    const ret = cFn(_face, _glyph, _start_offset, _point_count, _point_array);
    return .{ .ret = ret, .point_array = point_array_out[0..@intCast(point_count_out)] };
}
pub fn otLayoutGetBaseline(_font: *harf_buzz.font_t, _baseline_tag: harf_buzz.ot_layout_baseline_tag_t, _direction: harf_buzz.direction_t, _script_tag: u32, _language_tag: u32) struct {
    ret: i32,
    coord: i32,
} {
    var coord_out: i32 = undefined;
    const _coord = &coord_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_layout_baseline_tag_t, harf_buzz.direction_t, u32, u32, *i32) callconv(.c) i32, .{ .name = "hb_ot_layout_get_baseline" });
    const ret = cFn(_font, _baseline_tag, _direction, _script_tag, _language_tag, _coord);
    return .{ .ret = ret, .coord = coord_out };
}
pub fn otLayoutGetBaseline2(_font: *harf_buzz.font_t, _baseline_tag: harf_buzz.ot_layout_baseline_tag_t, _direction: harf_buzz.direction_t, _script: harf_buzz.script_t, _language: ?*harf_buzz.language_t) struct {
    ret: i32,
    coord: i32,
} {
    var coord_out: i32 = undefined;
    const _coord = &coord_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_layout_baseline_tag_t, harf_buzz.direction_t, harf_buzz.script_t, ?*harf_buzz.language_t, *i32) callconv(.c) i32, .{ .name = "hb_ot_layout_get_baseline2" });
    const ret = cFn(_font, _baseline_tag, _direction, _script, _language, _coord);
    return .{ .ret = ret, .coord = coord_out };
}
pub fn otLayoutGetBaselineWithFallback(_font: *harf_buzz.font_t, _baseline_tag: harf_buzz.ot_layout_baseline_tag_t, _direction: harf_buzz.direction_t, _script_tag: u32, _language_tag: u32) struct {
    ret: void,
    coord: i32,
} {
    var coord_out: i32 = undefined;
    const _coord = &coord_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_layout_baseline_tag_t, harf_buzz.direction_t, u32, u32, *i32) callconv(.c) void, .{ .name = "hb_ot_layout_get_baseline_with_fallback" });
    const ret = cFn(_font, _baseline_tag, _direction, _script_tag, _language_tag, _coord);
    return .{ .ret = ret, .coord = coord_out };
}
pub fn otLayoutGetBaselineWithFallback2(_font: *harf_buzz.font_t, _baseline_tag: harf_buzz.ot_layout_baseline_tag_t, _direction: harf_buzz.direction_t, _script: harf_buzz.script_t, _language: ?*harf_buzz.language_t) struct {
    ret: void,
    coord: i32,
} {
    var coord_out: i32 = undefined;
    const _coord = &coord_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_layout_baseline_tag_t, harf_buzz.direction_t, harf_buzz.script_t, ?*harf_buzz.language_t, *i32) callconv(.c) void, .{ .name = "hb_ot_layout_get_baseline_with_fallback2" });
    const ret = cFn(_font, _baseline_tag, _direction, _script, _language, _coord);
    return .{ .ret = ret, .coord = coord_out };
}
pub fn otLayoutGetFontExtents(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t, _script_tag: u32, _language_tag: u32, _extents: *harf_buzz.font_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t, u32, u32, *harf_buzz.font_extents_t) callconv(.c) i32, .{ .name = "hb_ot_layout_get_font_extents" });
    const ret = cFn(_font, _direction, _script_tag, _language_tag, _extents);
    return ret;
}
pub fn otLayoutGetFontExtents2(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t, _script: harf_buzz.script_t, _language: ?*harf_buzz.language_t, _extents: *harf_buzz.font_extents_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t, harf_buzz.script_t, ?*harf_buzz.language_t, *harf_buzz.font_extents_t) callconv(.c) i32, .{ .name = "hb_ot_layout_get_font_extents2" });
    const ret = cFn(_font, _direction, _script, _language, _extents);
    return ret;
}
pub fn otLayoutGetGlyphClass(_face: *harf_buzz.face_t, _glyph: u32) harf_buzz.ot_layout_glyph_class_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) harf_buzz.ot_layout_glyph_class_t, .{ .name = "hb_ot_layout_get_glyph_class" });
    const ret = cFn(_face, _glyph);
    return ret;
}
pub fn otLayoutGetGlyphsInClass(_face: *harf_buzz.face_t, _klass: harf_buzz.ot_layout_glyph_class_t, _glyphs: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, harf_buzz.ot_layout_glyph_class_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_get_glyphs_in_class" });
    const ret = cFn(_face, _klass, _glyphs);
    return ret;
}
pub fn otLayoutGetHorizontalBaselineTagForScript(_script: harf_buzz.script_t) harf_buzz.ot_layout_baseline_tag_t {
    const cFn = @extern(*const fn (harf_buzz.script_t) callconv(.c) harf_buzz.ot_layout_baseline_tag_t, .{ .name = "hb_ot_layout_get_horizontal_baseline_tag_for_script" });
    const ret = cFn(_script);
    return ret;
}
pub fn otLayoutGetLigatureCarets(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t, _glyph: u32, _start_offset: u32) struct {
    ret: u32,
    caret_array: []i32,
} {
    var caret_count_out: u32 = undefined;
    const _caret_count = &caret_count_out;
    var caret_array_out: [*]i32 = undefined;
    const _caret_array = &caret_array_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t, u32, u32, ?*u32, *[*]i32) callconv(.c) u32, .{ .name = "hb_ot_layout_get_ligature_carets" });
    const ret = cFn(_font, _direction, _glyph, _start_offset, _caret_count, _caret_array);
    return .{ .ret = ret, .caret_array = caret_array_out[0..@intCast(caret_count_out)] };
}
pub fn otLayoutGetSizeParams(_face: *harf_buzz.face_t) struct {
    ret: i32,
    design_size: u32,
    subfamily_id: u32,
    subfamily_name_id: u32,
    range_start: u32,
    range_end: u32,
} {
    var design_size_out: u32 = undefined;
    const _design_size = &design_size_out;
    var subfamily_id_out: u32 = undefined;
    const _subfamily_id = &subfamily_id_out;
    var subfamily_name_id_out: u32 = undefined;
    const _subfamily_name_id = &subfamily_name_id_out;
    var range_start_out: u32 = undefined;
    const _range_start = &range_start_out;
    var range_end_out: u32 = undefined;
    const _range_end = &range_end_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, *u32, *u32, *u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_get_size_params" });
    const ret = cFn(_face, _design_size, _subfamily_id, _subfamily_name_id, _range_start, _range_end);
    return .{ .ret = ret, .design_size = design_size_out, .subfamily_id = subfamily_id_out, .subfamily_name_id = subfamily_name_id_out, .range_start = range_start_out, .range_end = range_end_out };
}
pub const ot_layout_glyph_class_t = enum(u32) {
    unclassified = 0,
    base_glyph = 1,
    ligature = 2,
    mark = 3,
    component = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_layout_glyph_class_get_type" });
        return cFn();
    }
};
pub fn otLayoutHasGlyphClasses(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_layout_has_glyph_classes" });
    const ret = cFn(_face);
    return ret;
}
pub fn otLayoutHasPositioning(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_layout_has_positioning" });
    const ret = cFn(_face);
    return ret;
}
pub fn otLayoutHasSubstitution(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_layout_has_substitution" });
    const ret = cFn(_face);
    return ret;
}
pub fn otLayoutLanguageFindFeature(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32, _feature_tag: u32) struct {
    ret: i32,
    feature_index: u32,
} {
    var feature_index_out: u32 = undefined;
    const _feature_index = &feature_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_language_find_feature" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _feature_tag, _feature_index);
    return .{ .ret = ret, .feature_index = feature_index_out };
}
pub fn otLayoutLanguageGetFeatureIndexes(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32, _start_offset: u32) struct {
    ret: u32,
    feature_indexes: []u32,
} {
    var feature_count_out: u32 = undefined;
    const _feature_count = &feature_count_out;
    var feature_indexes_out: [*]u32 = undefined;
    const _feature_indexes = &feature_indexes_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_language_get_feature_indexes" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _start_offset, _feature_count, _feature_indexes);
    return .{ .ret = ret, .feature_indexes = feature_indexes_out[0..@intCast(feature_count_out)] };
}
pub fn otLayoutLanguageGetFeatureTags(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32, _start_offset: u32) struct {
    ret: u32,
    feature_tags: []u32,
} {
    var feature_count_out: u32 = undefined;
    const _feature_count = &feature_count_out;
    var feature_tags_out: [*]u32 = undefined;
    const _feature_tags = &feature_tags_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_language_get_feature_tags" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _start_offset, _feature_count, _feature_tags);
    return .{ .ret = ret, .feature_tags = feature_tags_out[0..@intCast(feature_count_out)] };
}
pub fn otLayoutLanguageGetRequiredFeature(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32) struct {
    ret: i32,
    feature_index: u32,
    feature_tag: u32,
} {
    var feature_index_out: u32 = undefined;
    const _feature_index = &feature_index_out;
    var feature_tag_out: u32 = undefined;
    const _feature_tag = &feature_tag_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_language_get_required_feature" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _feature_index, _feature_tag);
    return .{ .ret = ret, .feature_index = feature_index_out, .feature_tag = feature_tag_out };
}
pub fn otLayoutLanguageGetRequiredFeatureIndex(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_index: u32) struct {
    ret: i32,
    feature_index: u32,
} {
    var feature_index_out: u32 = undefined;
    const _feature_index = &feature_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_language_get_required_feature_index" });
    const ret = cFn(_face, _table_tag, _script_index, _language_index, _feature_index);
    return .{ .ret = ret, .feature_index = feature_index_out };
}
pub fn otLayoutLookupCollectGlyphs(_face: *harf_buzz.face_t, _table_tag: u32, _lookup_index: u32, _glyphs_before: *harf_buzz.set_t, _glyphs_input: *harf_buzz.set_t, _glyphs_after: *harf_buzz.set_t, _glyphs_output: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, *harf_buzz.set_t, *harf_buzz.set_t, *harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_lookup_collect_glyphs" });
    const ret = cFn(_face, _table_tag, _lookup_index, _glyphs_before, _glyphs_input, _glyphs_after, _glyphs_output);
    return ret;
}
pub fn otLayoutLookupGetGlyphAlternates(_face: *harf_buzz.face_t, _lookup_index: u32, _glyph: u32, _start_offset: u32, _alternate_glyphss: []u32) struct {
    ret: u32,
} {
    const _alternate_glyphs = _alternate_glyphss.ptr;
    var alternate_count_out: u32 = undefined;
    const _alternate_count = &alternate_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, ?*u32, [*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_lookup_get_glyph_alternates" });
    const ret = cFn(_face, _lookup_index, _glyph, _start_offset, _alternate_count, _alternate_glyphs);
    return .{ .ret = ret };
}
pub fn otLayoutLookupGetOpticalBound(_font: *harf_buzz.font_t, _lookup_index: u32, _direction: harf_buzz.direction_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, u32) callconv(.c) i32, .{ .name = "hb_ot_layout_lookup_get_optical_bound" });
    const ret = cFn(_font, _lookup_index, _direction, _glyph);
    return ret;
}
pub fn otLayoutLookupSubstituteClosure(_face: *harf_buzz.face_t, _lookup_index: u32, _glyphs: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_lookup_substitute_closure" });
    const ret = cFn(_face, _lookup_index, _glyphs);
    return ret;
}
pub fn otLayoutLookupWouldSubstitute(_face: *harf_buzz.face_t, _lookup_index: u32, _glyphs: *u32, _glyphs_length: u32, _zero_context: i32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *u32, u32, i32) callconv(.c) i32, .{ .name = "hb_ot_layout_lookup_would_substitute" });
    const ret = cFn(_face, _lookup_index, _glyphs, _glyphs_length, _zero_context);
    return ret;
}
pub fn otLayoutLookupsSubstituteClosure(_face: *harf_buzz.face_t, _lookups: *harf_buzz.set_t, _glyphs: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_layout_lookups_substitute_closure" });
    const ret = cFn(_face, _lookups, _glyphs);
    return ret;
}
pub const otLayoutScriptFindLanguage = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn otLayoutScriptFindLanguage(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_tag: u32, _language_index: *u32) i32 {
        const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_script_find_language" });
        const ret = cFn(_face, _table_tag, _script_index, _language_tag, _language_index);
        return ret;
    }
}.otLayoutScriptFindLanguage;
pub fn otLayoutScriptGetLanguageTags(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _start_offset: u32) struct {
    ret: u32,
    language_tags: []u32,
} {
    var language_count_out: u32 = undefined;
    const _language_count = &language_count_out;
    var language_tags_out: [*]u32 = undefined;
    const _language_tags = &language_tags_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_script_get_language_tags" });
    const ret = cFn(_face, _table_tag, _script_index, _start_offset, _language_count, _language_tags);
    return .{ .ret = ret, .language_tags = language_tags_out[0..@intCast(language_count_out)] };
}
pub fn otLayoutScriptSelectLanguage(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_count: u32, _language_tags: *u32) struct {
    ret: i32,
    language_index: u32,
} {
    var language_index_out: u32 = undefined;
    const _language_index = &language_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_script_select_language" });
    const ret = cFn(_face, _table_tag, _script_index, _language_count, _language_tags, _language_index);
    return .{ .ret = ret, .language_index = language_index_out };
}
pub fn otLayoutScriptSelectLanguage2(_face: *harf_buzz.face_t, _table_tag: u32, _script_index: u32, _language_count: u32, _language_tags: *u32) struct {
    ret: i32,
    language_index: u32,
    chosen_language: u32,
} {
    var language_index_out: u32 = undefined;
    const _language_index = &language_index_out;
    var chosen_language_out: u32 = undefined;
    const _chosen_language = &chosen_language_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, u32, *u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_script_select_language2" });
    const ret = cFn(_face, _table_tag, _script_index, _language_count, _language_tags, _language_index, _chosen_language);
    return .{ .ret = ret, .language_index = language_index_out, .chosen_language = chosen_language_out };
}
pub fn otLayoutTableChooseScript(_face: *harf_buzz.face_t, _table_tag: u32, _script_tags: *u32) struct {
    ret: i32,
    script_index: u32,
    chosen_script: u32,
} {
    var script_index_out: u32 = undefined;
    const _script_index = &script_index_out;
    var chosen_script_out: u32 = undefined;
    const _chosen_script = &chosen_script_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_table_choose_script" });
    const ret = cFn(_face, _table_tag, _script_tags, _script_index, _chosen_script);
    return .{ .ret = ret, .script_index = script_index_out, .chosen_script = chosen_script_out };
}
pub fn otLayoutTableFindFeatureVariations(_face: *harf_buzz.face_t, _table_tag: u32, _coords: *i32, _num_coords: u32) struct {
    ret: i32,
    variations_index: u32,
} {
    var variations_index_out: u32 = undefined;
    const _variations_index = &variations_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *i32, u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_table_find_feature_variations" });
    const ret = cFn(_face, _table_tag, _coords, _num_coords, _variations_index);
    return .{ .ret = ret, .variations_index = variations_index_out };
}
pub fn otLayoutTableFindScript(_face: *harf_buzz.face_t, _table_tag: u32, _script_tag: u32) struct {
    ret: i32,
    script_index: u32,
} {
    var script_index_out: u32 = undefined;
    const _script_index = &script_index_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_ot_layout_table_find_script" });
    const ret = cFn(_face, _table_tag, _script_tag, _script_index);
    return .{ .ret = ret, .script_index = script_index_out };
}
pub fn otLayoutTableGetFeatureTags(_face: *harf_buzz.face_t, _table_tag: u32, _start_offset: u32) struct {
    ret: u32,
    feature_tags: []u32,
} {
    var feature_count_out: u32 = undefined;
    const _feature_count = &feature_count_out;
    var feature_tags_out: [*]u32 = undefined;
    const _feature_tags = &feature_tags_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_table_get_feature_tags" });
    const ret = cFn(_face, _table_tag, _start_offset, _feature_count, _feature_tags);
    return .{ .ret = ret, .feature_tags = feature_tags_out[0..@intCast(feature_count_out)] };
}
pub fn otLayoutTableGetLookupCount(_face: *harf_buzz.face_t, _table_tag: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) u32, .{ .name = "hb_ot_layout_table_get_lookup_count" });
    const ret = cFn(_face, _table_tag);
    return ret;
}
pub fn otLayoutTableGetScriptTags(_face: *harf_buzz.face_t, _table_tag: u32, _start_offset: u32) struct {
    ret: u32,
    script_tags: []u32,
} {
    var script_count_out: u32 = undefined;
    const _script_count = &script_count_out;
    var script_tags_out: [*]u32 = undefined;
    const _script_tags = &script_tags_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, ?*u32, *[*]u32) callconv(.c) u32, .{ .name = "hb_ot_layout_table_get_script_tags" });
    const ret = cFn(_face, _table_tag, _start_offset, _script_count, _script_tags);
    return .{ .ret = ret, .script_tags = script_tags_out[0..@intCast(script_count_out)] };
}
pub fn otLayoutTableSelectScript(_face: *harf_buzz.face_t, _table_tag: u32, _script_count: u32, _script_tags: *u32) struct {
    ret: i32,
    script_index: u32,
    chosen_script: u32,
} {
    var script_index_out: u32 = undefined;
    const _script_index = &script_index_out;
    var chosen_script_out: u32 = undefined;
    const _chosen_script = &chosen_script_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, u32, *u32, ?*u32, ?*u32) callconv(.c) i32, .{ .name = "hb_ot_layout_table_select_script" });
    const ret = cFn(_face, _table_tag, _script_count, _script_tags, _script_index, _chosen_script);
    return .{ .ret = ret, .script_index = script_index_out, .chosen_script = chosen_script_out };
}
pub const ot_math_constant_t = enum(u32) {
    script_percent_scale_down = 0,
    script_script_percent_scale_down = 1,
    delimited_sub_formula_min_height = 2,
    display_operator_min_height = 3,
    math_leading = 4,
    axis_height = 5,
    accent_base_height = 6,
    flattened_accent_base_height = 7,
    subscript_shift_down = 8,
    subscript_top_max = 9,
    subscript_baseline_drop_min = 10,
    superscript_shift_up = 11,
    superscript_shift_up_cramped = 12,
    superscript_bottom_min = 13,
    superscript_baseline_drop_max = 14,
    sub_superscript_gap_min = 15,
    superscript_bottom_max_with_subscript = 16,
    space_after_script = 17,
    upper_limit_gap_min = 18,
    upper_limit_baseline_rise_min = 19,
    lower_limit_gap_min = 20,
    lower_limit_baseline_drop_min = 21,
    stack_top_shift_up = 22,
    stack_top_display_style_shift_up = 23,
    stack_bottom_shift_down = 24,
    stack_bottom_display_style_shift_down = 25,
    stack_gap_min = 26,
    stack_display_style_gap_min = 27,
    stretch_stack_top_shift_up = 28,
    stretch_stack_bottom_shift_down = 29,
    stretch_stack_gap_above_min = 30,
    stretch_stack_gap_below_min = 31,
    fraction_numerator_shift_up = 32,
    fraction_numerator_display_style_shift_up = 33,
    fraction_denominator_shift_down = 34,
    fraction_denominator_display_style_shift_down = 35,
    fraction_numerator_gap_min = 36,
    fraction_num_display_style_gap_min = 37,
    fraction_rule_thickness = 38,
    fraction_denominator_gap_min = 39,
    fraction_denom_display_style_gap_min = 40,
    skewed_fraction_horizontal_gap = 41,
    skewed_fraction_vertical_gap = 42,
    overbar_vertical_gap = 43,
    overbar_rule_thickness = 44,
    overbar_extra_ascender = 45,
    underbar_vertical_gap = 46,
    underbar_rule_thickness = 47,
    underbar_extra_descender = 48,
    radical_vertical_gap = 49,
    radical_display_style_vertical_gap = 50,
    radical_rule_thickness = 51,
    radical_extra_ascender = 52,
    radical_kern_before_degree = 53,
    radical_kern_after_degree = 54,
    radical_degree_bottom_raise_percent = 55,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_math_constant_get_type" });
        return cFn();
    }
};
pub fn otMathGetConstant(_font: *harf_buzz.font_t, _constant: harf_buzz.ot_math_constant_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_math_constant_t) callconv(.c) i32, .{ .name = "hb_ot_math_get_constant" });
    const ret = cFn(_font, _constant);
    return ret;
}
pub fn otMathGetGlyphAssembly(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t, _start_offset: u32, _partss: []harf_buzz.ot_math_glyph_part_t) struct {
    ret: u32,
    italics_correction: i32,
} {
    const _parts = _partss.ptr;
    var parts_count_out: u32 = undefined;
    const _parts_count = &parts_count_out;
    var italics_correction_out: i32 = undefined;
    const _italics_correction = &italics_correction_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, u32, *u32, [*]harf_buzz.ot_math_glyph_part_t, *i32) callconv(.c) u32, .{ .name = "hb_ot_math_get_glyph_assembly" });
    const ret = cFn(_font, _glyph, _direction, _start_offset, _parts_count, _parts, _italics_correction);
    return .{ .ret = ret, .italics_correction = italics_correction_out };
}
pub fn otMathGetGlyphItalicsCorrection(_font: *harf_buzz.font_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) i32, .{ .name = "hb_ot_math_get_glyph_italics_correction" });
    const ret = cFn(_font, _glyph);
    return ret;
}
pub fn otMathGetGlyphKerning(_font: *harf_buzz.font_t, _glyph: u32, _kern: harf_buzz.ot_math_kern_t, _correction_height: i32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.ot_math_kern_t, i32) callconv(.c) i32, .{ .name = "hb_ot_math_get_glyph_kerning" });
    const ret = cFn(_font, _glyph, _kern, _correction_height);
    return ret;
}
pub fn otMathGetGlyphKernings(_font: *harf_buzz.font_t, _glyph: u32, _kern: harf_buzz.ot_math_kern_t, _start_offset: u32, _kern_entriess: []harf_buzz.ot_math_kern_entry_t) struct {
    ret: u32,
} {
    const _kern_entries = _kern_entriess.ptr;
    var entries_count_out: u32 = undefined;
    const _entries_count = &entries_count_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.ot_math_kern_t, u32, ?*u32, [*]harf_buzz.ot_math_kern_entry_t) callconv(.c) u32, .{ .name = "hb_ot_math_get_glyph_kernings" });
    const ret = cFn(_font, _glyph, _kern, _start_offset, _entries_count, _kern_entries);
    return .{ .ret = ret };
}
pub fn otMathGetGlyphTopAccentAttachment(_font: *harf_buzz.font_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32) callconv(.c) i32, .{ .name = "hb_ot_math_get_glyph_top_accent_attachment" });
    const ret = cFn(_font, _glyph);
    return ret;
}
pub fn otMathGetGlyphVariants(_font: *harf_buzz.font_t, _glyph: u32, _direction: harf_buzz.direction_t, _start_offset: u32, _variantss: []harf_buzz.ot_math_glyph_variant_t) struct {
    ret: u32,
} {
    const _variants = _variantss.ptr;
    var variants_count_out: u32 = undefined;
    const _variants_count = &variants_count_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, u32, harf_buzz.direction_t, u32, *u32, [*]harf_buzz.ot_math_glyph_variant_t) callconv(.c) u32, .{ .name = "hb_ot_math_get_glyph_variants" });
    const ret = cFn(_font, _glyph, _direction, _start_offset, _variants_count, _variants);
    return .{ .ret = ret };
}
pub fn otMathGetMinConnectorOverlap(_font: *harf_buzz.font_t, _direction: harf_buzz.direction_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.direction_t) callconv(.c) i32, .{ .name = "hb_ot_math_get_min_connector_overlap" });
    const ret = cFn(_font, _direction);
    return ret;
}
pub const ot_math_glyph_part_flags_t = packed struct(u32) {
    extender: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_math_glyph_part_flags_get_type" });
        return cFn();
    }
};
pub const ot_math_glyph_part_t = extern struct {
    glyph: u32,
    start_connector_length: i32,
    end_connector_length: i32,
    full_advance: i32,
    flags: harf_buzz.ot_math_glyph_part_flags_t,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_math_glyph_part_get_type" });
        return cFn();
    }
};
pub const ot_math_glyph_variant_t = extern struct {
    glyph: u32,
    advance: i32,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_math_glyph_variant_get_type" });
        return cFn();
    }
};
pub fn otMathHasData(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_math_has_data" });
    const ret = cFn(_face);
    return ret;
}
pub fn otMathIsGlyphExtendedShape(_face: *harf_buzz.face_t, _glyph: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) i32, .{ .name = "hb_ot_math_is_glyph_extended_shape" });
    const ret = cFn(_face, _glyph);
    return ret;
}
pub const ot_math_kern_entry_t = extern struct {
    max_correction_height: i32,
    kern_value: i32,
};
pub const ot_math_kern_t = enum(u32) {
    top_right = 0,
    top_left = 1,
    bottom_right = 2,
    bottom_left = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_math_kern_get_type" });
        return cFn();
    }
};
pub fn otMetaGetEntryTags(_face: *harf_buzz.face_t, _start_offset: u32, _entriess: []harf_buzz.ot_meta_tag_t) struct {
    ret: u32,
} {
    const _entries = _entriess.ptr;
    var entries_count_out: u32 = undefined;
    const _entries_count = &entries_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?*u32, [*]harf_buzz.ot_meta_tag_t) callconv(.c) u32, .{ .name = "hb_ot_meta_get_entry_tags" });
    const ret = cFn(_face, _start_offset, _entries_count, _entries);
    return .{ .ret = ret };
}
pub fn otMetaReferenceEntry(_face: *harf_buzz.face_t, _meta_tag: harf_buzz.ot_meta_tag_t) *harf_buzz.blob_t {
    const cFn = @extern(*const fn (*harf_buzz.face_t, harf_buzz.ot_meta_tag_t) callconv(.c) *harf_buzz.blob_t, .{ .name = "hb_ot_meta_reference_entry" });
    const ret = cFn(_face, _meta_tag);
    return ret;
}
pub const ot_meta_tag_t = enum(u32) {
    design_languages = 1684827751,
    supported_languages = 1936485991,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_meta_tag_get_type" });
        return cFn();
    }
};
pub fn otMetricsGetPosition(_font: *harf_buzz.font_t, _metrics_tag: harf_buzz.ot_metrics_tag_t) struct {
    ret: i32,
    position: i32,
} {
    var position_out: i32 = undefined;
    const _position = &position_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_metrics_tag_t, ?*i32) callconv(.c) i32, .{ .name = "hb_ot_metrics_get_position" });
    const ret = cFn(_font, _metrics_tag, _position);
    return .{ .ret = ret, .position = position_out };
}
pub fn otMetricsGetPositionWithFallback(_font: *harf_buzz.font_t, _metrics_tag: harf_buzz.ot_metrics_tag_t) struct {
    ret: void,
    position: i32,
} {
    var position_out: i32 = undefined;
    const _position = &position_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_metrics_tag_t, ?*i32) callconv(.c) void, .{ .name = "hb_ot_metrics_get_position_with_fallback" });
    const ret = cFn(_font, _metrics_tag, _position);
    return .{ .ret = ret, .position = position_out };
}
pub fn otMetricsGetVariation(_font: *harf_buzz.font_t, _metrics_tag: harf_buzz.ot_metrics_tag_t) f32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_metrics_tag_t) callconv(.c) f32, .{ .name = "hb_ot_metrics_get_variation" });
    const ret = cFn(_font, _metrics_tag);
    return ret;
}
pub fn otMetricsGetXVariation(_font: *harf_buzz.font_t, _metrics_tag: harf_buzz.ot_metrics_tag_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_metrics_tag_t) callconv(.c) i32, .{ .name = "hb_ot_metrics_get_x_variation" });
    const ret = cFn(_font, _metrics_tag);
    return ret;
}
pub fn otMetricsGetYVariation(_font: *harf_buzz.font_t, _metrics_tag: harf_buzz.ot_metrics_tag_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.ot_metrics_tag_t) callconv(.c) i32, .{ .name = "hb_ot_metrics_get_y_variation" });
    const ret = cFn(_font, _metrics_tag);
    return ret;
}
pub const ot_metrics_tag_t = enum(u32) {
    horizontal_ascender = 1751216995,
    horizontal_descender = 1751413603,
    horizontal_line_gap = 1751934832,
    horizontal_clipping_ascent = 1751346273,
    horizontal_clipping_descent = 1751346276,
    vertical_ascender = 1986098019,
    vertical_descender = 1986294627,
    vertical_line_gap = 1986815856,
    horizontal_caret_rise = 1751347827,
    horizontal_caret_run = 1751347822,
    horizontal_caret_offset = 1751347046,
    vertical_caret_rise = 1986228851,
    vertical_caret_run = 1986228846,
    vertical_caret_offset = 1986228070,
    x_height = 2020108148,
    cap_height = 1668311156,
    subscript_em_x_size = 1935833203,
    subscript_em_y_size = 1935833459,
    subscript_em_x_offset = 1935833199,
    subscript_em_y_offset = 1935833455,
    superscript_em_x_size = 1936750707,
    superscript_em_y_size = 1936750963,
    superscript_em_x_offset = 1936750703,
    superscript_em_y_offset = 1936750959,
    strikeout_size = 1937011315,
    strikeout_offset = 1937011311,
    underline_size = 1970168947,
    underline_offset = 1970168943,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_metrics_tag_get_type" });
        return cFn();
    }
};
pub const ot_name_entry_t = extern struct {
    name_id: u32,
    @"var": harf_buzz.var_int_t,
    language: ?*harf_buzz.language_t,
};
pub fn otNameGetUtf16(_face: *harf_buzz.face_t, _name_id: u32, _language: *harf_buzz.language_t, _texts: []u16) struct {
    ret: u32,
} {
    const _text = _texts.ptr;
    var text_size_out: u32 = undefined;
    const _text_size = &text_size_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.language_t, ?*u32, [*]u16) callconv(.c) u32, .{ .name = "hb_ot_name_get_utf16" });
    const ret = cFn(_face, _name_id, _language, _text_size, _text);
    return .{ .ret = ret };
}
pub fn otNameGetUtf32(_face: *harf_buzz.face_t, _name_id: u32, _language: *harf_buzz.language_t, _texts: []u32) struct {
    ret: u32,
} {
    const _text = _texts.ptr;
    var text_size_out: u32 = undefined;
    const _text_size = &text_size_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.language_t, ?*u32, [*]u32) callconv(.c) u32, .{ .name = "hb_ot_name_get_utf32" });
    const ret = cFn(_face, _name_id, _language, _text_size, _text);
    return .{ .ret = ret };
}
pub fn otNameGetUtf8(_face: *harf_buzz.face_t, _name_id: u32, _language: *harf_buzz.language_t, _texts: [][*:0]const u8) struct {
    ret: u32,
} {
    const _text = _texts.ptr;
    var text_size_out: u32 = undefined;
    const _text_size = &text_size_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.language_t, ?*u32, [*][*:0]const u8) callconv(.c) u32, .{ .name = "hb_ot_name_get_utf8" });
    const ret = cFn(_face, _name_id, _language, _text_size, _text);
    return .{ .ret = ret };
}
pub const ot_name_id_predefined_t = enum(u32) {
    copyright = 0,
    font_family = 1,
    font_subfamily = 2,
    unique_id = 3,
    full_name = 4,
    version_string = 5,
    postscript_name = 6,
    trademark = 7,
    manufacturer = 8,
    designer = 9,
    description = 10,
    vendor_url = 11,
    designer_url = 12,
    license = 13,
    license_url = 14,
    typographic_family = 16,
    typographic_subfamily = 17,
    mac_full_name = 18,
    sample_text = 19,
    cid_findfont_name = 20,
    wws_family = 21,
    wws_subfamily = 22,
    light_background = 23,
    dark_background = 24,
    variations_ps_prefix = 25,
    invalid = 65535,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_name_id_predefined_get_type" });
        return cFn();
    }
};
pub fn otNameListNames(_face: *harf_buzz.face_t) struct {
    ret: [*]harf_buzz.ot_name_entry_t,
    num_entries: u32,
} {
    var num_entries_out: u32 = undefined;
    const _num_entries = &num_entries_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, ?*u32) callconv(.c) [*]harf_buzz.ot_name_entry_t, .{ .name = "hb_ot_name_list_names" });
    const ret = cFn(_face, _num_entries);
    return .{ .ret = ret, .num_entries = num_entries_out };
}
pub fn otShapeGlyphsClosure(_font: *harf_buzz.font_t, _buffer: *harf_buzz.buffer_t, _featuress: []harf_buzz.feature_t, _glyphs: *harf_buzz.set_t) void {
    const _features = _featuress.ptr;
    const _num_features: u32 = @intCast(_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.buffer_t, [*]harf_buzz.feature_t, u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_shape_glyphs_closure" });
    const ret = cFn(_font, _buffer, _features, _num_features, _glyphs);
    return ret;
}
pub fn otShapePlanCollectLookups(_shape_plan: *harf_buzz.shape_plan_t, _table_tag: u32, _lookup_indexes: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.shape_plan_t, u32, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_ot_shape_plan_collect_lookups" });
    const ret = cFn(_shape_plan, _table_tag, _lookup_indexes);
    return ret;
}
pub const otTagFromLanguage = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn otTagFromLanguage(_language: *harf_buzz.language_t) u32 {
        const cFn = @extern(*const fn (*harf_buzz.language_t) callconv(.c) u32, .{ .name = "hb_ot_tag_from_language" });
        const ret = cFn(_language);
        return ret;
    }
}.otTagFromLanguage;
pub fn otTagToLanguage(_tag: u32) ?*harf_buzz.language_t {
    const cFn = @extern(*const fn (u32) callconv(.c) ?*harf_buzz.language_t, .{ .name = "hb_ot_tag_to_language" });
    const ret = cFn(_tag);
    return ret;
}
pub fn otTagToScript(_tag: u32) harf_buzz.script_t {
    const cFn = @extern(*const fn (u32) callconv(.c) harf_buzz.script_t, .{ .name = "hb_ot_tag_to_script" });
    const ret = cFn(_tag);
    return ret;
}
pub const otTagsFromScript = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn otTagsFromScript(_script: harf_buzz.script_t) struct {
        ret: void,
        script_tag_1: u32,
        script_tag_2: u32,
    } {
        var script_tag_1_out: u32 = undefined;
        const _script_tag_1 = &script_tag_1_out;
        var script_tag_2_out: u32 = undefined;
        const _script_tag_2 = &script_tag_2_out;
        const cFn = @extern(*const fn (harf_buzz.script_t, *u32, *u32) callconv(.c) void, .{ .name = "hb_ot_tags_from_script" });
        const ret = cFn(_script, _script_tag_1, _script_tag_2);
        return .{ .ret = ret, .script_tag_1 = script_tag_1_out, .script_tag_2 = script_tag_2_out };
    }
}.otTagsFromScript;
pub fn otTagsFromScriptAndLanguage(_script: harf_buzz.script_t, _language: ?*harf_buzz.language_t, _script_count: ?*u32, _language_count: ?*u32) struct {
    ret: void,
    script_tags: u32,
    language_tags: u32,
} {
    var script_tags_out: u32 = undefined;
    const _script_tags = &script_tags_out;
    var language_tags_out: u32 = undefined;
    const _language_tags = &language_tags_out;
    const cFn = @extern(*const fn (harf_buzz.script_t, ?*harf_buzz.language_t, ?*u32, ?*u32, ?*u32, ?*u32) callconv(.c) void, .{ .name = "hb_ot_tags_from_script_and_language" });
    const ret = cFn(_script, _language, _script_count, _script_tags, _language_count, _language_tags);
    return .{ .ret = ret, .script_tags = script_tags_out, .language_tags = language_tags_out };
}
pub fn otTagsToScriptAndLanguage(_script_tag: u32, _language_tag: u32, _language: ?**harf_buzz.language_t) struct {
    ret: void,
    script: harf_buzz.script_t,
} {
    var script_out: harf_buzz.script_t = undefined;
    const _script = &script_out;
    const cFn = @extern(*const fn (u32, u32, ?*harf_buzz.script_t, ?**harf_buzz.language_t) callconv(.c) void, .{ .name = "hb_ot_tags_to_script_and_language" });
    const ret = cFn(_script_tag, _language_tag, _script, _language);
    return .{ .ret = ret, .script = script_out };
}
pub const ot_var_axis_flags_t = packed struct(u32) {
    hidden: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_var_axis_flags_get_type" });
        return cFn();
    }
};
pub const ot_var_axis_info_t = extern struct {
    axis_index: u32,
    tag: u32,
    name_id: u32,
    flags: harf_buzz.ot_var_axis_flags_t,
    min_value: f32,
    default_value: f32,
    max_value: f32,
    reserved: u32,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_ot_var_axis_info_get_type" });
        return cFn();
    }
};
pub const ot_var_axis_t = if (config.disable_deprecated) core.Deprecated else extern struct {
    tag: u32,
    name_id: u32,
    min_value: f32,
    default_value: f32,
    max_value: f32,
};
pub const otVarFindAxis = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn otVarFindAxis(_face: *harf_buzz.face_t, _axis_tag: u32, _axis_index: *u32, _axis_info: *harf_buzz.ot_var_axis_t) i32 {
        const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *u32, *harf_buzz.ot_var_axis_t) callconv(.c) i32, .{ .name = "hb_ot_var_find_axis" });
        const ret = cFn(_face, _axis_tag, _axis_index, _axis_info);
        return ret;
    }
}.otVarFindAxis;
pub fn otVarFindAxisInfo(_face: *harf_buzz.face_t, _axis_tag: u32, _axis_info: *harf_buzz.ot_var_axis_info_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *harf_buzz.ot_var_axis_info_t) callconv(.c) i32, .{ .name = "hb_ot_var_find_axis_info" });
    const ret = cFn(_face, _axis_tag, _axis_info);
    return ret;
}
pub const otVarGetAxes = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn otVarGetAxes(_face: *harf_buzz.face_t, _start_offset: u32, _axes_arrays: []harf_buzz.ot_var_axis_t) struct {
        ret: u32,
    } {
        const _axes_array = _axes_arrays.ptr;
        var axes_count_out: u32 = undefined;
        const _axes_count = &axes_count_out;
        const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?*u32, [*]harf_buzz.ot_var_axis_t) callconv(.c) u32, .{ .name = "hb_ot_var_get_axes" });
        const ret = cFn(_face, _start_offset, _axes_count, _axes_array);
        return .{ .ret = ret };
    }
}.otVarGetAxes;
pub fn otVarGetAxisCount(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_ot_var_get_axis_count" });
    const ret = cFn(_face);
    return ret;
}
pub fn otVarGetAxisInfos(_face: *harf_buzz.face_t, _start_offset: u32, _axes_arrays: []harf_buzz.ot_var_axis_info_t) struct {
    ret: u32,
} {
    const _axes_array = _axes_arrays.ptr;
    var axes_count_out: u32 = undefined;
    const _axes_count = &axes_count_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?*u32, [*]harf_buzz.ot_var_axis_info_t) callconv(.c) u32, .{ .name = "hb_ot_var_get_axis_infos" });
    const ret = cFn(_face, _start_offset, _axes_count, _axes_array);
    return .{ .ret = ret };
}
pub fn otVarGetNamedInstanceCount(_face: *harf_buzz.face_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) u32, .{ .name = "hb_ot_var_get_named_instance_count" });
    const ret = cFn(_face);
    return ret;
}
pub fn otVarHasData(_face: *harf_buzz.face_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t) callconv(.c) i32, .{ .name = "hb_ot_var_has_data" });
    const ret = cFn(_face);
    return ret;
}
pub fn otVarNamedInstanceGetDesignCoords(_face: *harf_buzz.face_t, _instance_index: u32) struct {
    ret: u32,
    coords: []f32,
} {
    var coords_length_out: u32 = undefined;
    const _coords_length = &coords_length_out;
    var coords_out: [*]f32 = undefined;
    const _coords = &coords_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, ?*u32, *[*]f32) callconv(.c) u32, .{ .name = "hb_ot_var_named_instance_get_design_coords" });
    const ret = cFn(_face, _instance_index, _coords_length, _coords);
    return .{ .ret = ret, .coords = coords_out[0..@intCast(coords_length_out)] };
}
pub fn otVarNamedInstanceGetPostscriptNameId(_face: *harf_buzz.face_t, _instance_index: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) u32, .{ .name = "hb_ot_var_named_instance_get_postscript_name_id" });
    const ret = cFn(_face, _instance_index);
    return ret;
}
pub fn otVarNamedInstanceGetSubfamilyNameId(_face: *harf_buzz.face_t, _instance_index: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32) callconv(.c) u32, .{ .name = "hb_ot_var_named_instance_get_subfamily_name_id" });
    const ret = cFn(_face, _instance_index);
    return ret;
}
pub fn otVarNormalizeCoords(_face: *harf_buzz.face_t, _coords_length: u32, _design_coords: *f32) struct {
    ret: void,
    normalized_coords: i32,
} {
    var normalized_coords_out: i32 = undefined;
    const _normalized_coords = &normalized_coords_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, u32, *f32, *i32) callconv(.c) void, .{ .name = "hb_ot_var_normalize_coords" });
    const ret = cFn(_face, _coords_length, _design_coords, _normalized_coords);
    return .{ .ret = ret, .normalized_coords = normalized_coords_out };
}
pub fn otVarNormalizeVariations(_face: *harf_buzz.face_t, _variations: *harf_buzz.variation_t, _variations_length: u32) struct {
    ret: void,
    coords: []i32,
} {
    var coords_out: [*]i32 = undefined;
    const _coords = &coords_out;
    var coords_length_out: u32 = undefined;
    const _coords_length = &coords_length_out;
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.variation_t, u32, *[*]i32, *u32) callconv(.c) void, .{ .name = "hb_ot_var_normalize_variations" });
    const ret = cFn(_face, _variations, _variations_length, _coords, _coords_length);
    return .{ .ret = ret, .coords = coords_out[0..@intCast(coords_length_out)] };
}
pub fn paintColor(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _is_foreground: i32, _color: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, i32, u32) callconv(.c) void, .{ .name = "hb_paint_color" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _is_foreground, _color);
    return ret;
}
pub const paint_color_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _is_foreground: i32, _color: u32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintColorGlyph(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, u32, *harf_buzz.font_t) callconv(.c) i32, .{ .name = "hb_paint_color_glyph" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _glyph, _font);
    return ret;
}
pub const paint_color_glyph_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) i32;
pub const paint_composite_mode_t = enum(u32) {
    clear = 0,
    src = 1,
    dest = 2,
    src_over = 3,
    dest_over = 4,
    src_in = 5,
    dest_in = 6,
    src_out = 7,
    dest_out = 8,
    src_atop = 9,
    dest_atop = 10,
    xor = 11,
    plus = 12,
    screen = 13,
    overlay = 14,
    darken = 15,
    lighten = 16,
    color_dodge = 17,
    color_burn = 18,
    hard_light = 19,
    soft_light = 20,
    difference = 21,
    exclusion = 22,
    multiply = 23,
    hsl_hue = 24,
    hsl_saturation = 25,
    hsl_color = 26,
    hsl_luminosity = 27,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_paint_composite_mode_get_type" });
        return cFn();
    }
};
pub fn paintCustomPaletteColor(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_index: u32) struct {
    ret: i32,
    color: u32,
} {
    var color_out: u32 = undefined;
    const _color = &color_out;
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, u32, *u32) callconv(.c) i32, .{ .name = "hb_paint_custom_palette_color" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _color_index, _color);
    return .{ .ret = ret, .color = color_out };
}
pub const paint_custom_palette_color_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_index: u32, _color: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub const paint_extend_t = enum(u32) {
    pad = 0,
    repeat = 1,
    reflect = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_paint_extend_get_type" });
        return cFn();
    }
};
pub fn paintFuncsCreate() *harf_buzz.paint_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.paint_funcs_t, .{ .name = "hb_paint_funcs_create" });
    const ret = cFn();
    return ret;
}
pub fn paintFuncsGetEmpty() *harf_buzz.paint_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.paint_funcs_t, .{ .name = "hb_paint_funcs_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn paintFuncsIsImmutable(_funcs: *harf_buzz.paint_funcs_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t) callconv(.c) i32, .{ .name = "hb_paint_funcs_is_immutable" });
    const ret = cFn(_funcs);
    return ret;
}
pub fn paintFuncsMakeImmutable(_funcs: *harf_buzz.paint_funcs_t) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t) callconv(.c) void, .{ .name = "hb_paint_funcs_make_immutable" });
    const ret = cFn(_funcs);
    return ret;
}
pub fn paintFuncsSetColorFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, i32, u32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _is_foreground: i32, _color: u32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _is_foreground: i32, _color: u32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_color_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetColorGlyphFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.paint_funcs_t, ?*anyopaque, u32, *harf_buzz.font_t });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_color_glyph_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetCustomPaletteColorFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.paint_funcs_t, ?*anyopaque, u32, *u32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_index: u32, _color: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_index: u32, _color: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_custom_palette_color_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetImageFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.blob_t, u32, u32, u32, f32, ?*harf_buzz.glyph_extents_t });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _image: *harf_buzz.blob_t, _width: u32, _height: u32, _format: u32, _slant: f32, _extents: ?*harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _image: *harf_buzz.blob_t, _width: u32, _height: u32, _format: u32, _slant: f32, _extents: ?*harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_image_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetLinearGradientFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32, f32, f32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _x1: f32, _y1: f32, _x2: f32, _y2: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _x1: f32, _y1: f32, _x2: f32, _y2: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_linear_gradient_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPopClipFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_pop_clip_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPopGroupFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, harf_buzz.paint_composite_mode_t });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _mode: harf_buzz.paint_composite_mode_t, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _mode: harf_buzz.paint_composite_mode_t, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_pop_group_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPopTransformFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_pop_transform_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPushClipGlyphFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, u32, *harf_buzz.font_t });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_push_clip_glyph_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPushClipRectangleFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, f32, f32, f32, f32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xmin: f32, _ymin: f32, _xmax: f32, _ymax: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xmin: f32, _ymin: f32, _xmax: f32, _ymax: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_push_clip_rectangle_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPushGroupFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_push_group_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetPushTransformFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, f32, f32, f32, f32, f32, f32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xx: f32, _yx: f32, _xy: f32, _yy: f32, _dx: f32, _dy: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xx: f32, _yx: f32, _xy: f32, _yy: f32, _dx: f32, _dy: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_push_transform_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetRadialGradientFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32, f32, f32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _r0: f32, _x1: f32, _y1: f32, _r1: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _r0: f32, _x1: f32, _y1: f32, _r1: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_radial_gradient_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn paintFuncsSetSweepGradientFunc(_funcs: *harf_buzz.paint_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ void, *harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32 });
    const _func: *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _start_angle: f32, _end_angle: f32, _user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _start_angle: f32, _end_angle: f32, _user_data: ?*anyopaque) callconv(.c) void, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_paint_funcs_set_sweep_gradient_func" });
    const ret = cFn(_funcs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const paint_funcs_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_paint_funcs_get_type" });
        return cFn();
    }
};
pub fn paintImage(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _image: *harf_buzz.blob_t, _width: u32, _height: u32, _format: u32, _slant: f32, _extents: ?*harf_buzz.glyph_extents_t) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.blob_t, u32, u32, u32, f32, ?*harf_buzz.glyph_extents_t) callconv(.c) void, .{ .name = "hb_paint_image" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _image, _width, _height, _format, _slant, _extents);
    return ret;
}
pub const paint_image_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _image: *harf_buzz.blob_t, _width: u32, _height: u32, _format: u32, _slant: f32, _extents: ?*harf_buzz.glyph_extents_t, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn paintLinearGradient(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _x1: f32, _y1: f32, _x2: f32, _y2: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_paint_linear_gradient" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _color_line, _x0, _y0, _x1, _y1, _x2, _y2);
    return ret;
}
pub const paint_linear_gradient_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _x1: f32, _y1: f32, _x2: f32, _y2: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPopClip(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque) callconv(.c) void, .{ .name = "hb_paint_pop_clip" });
    const ret = cFn(_funcs, @ptrCast(_paint_data));
    return ret;
}
pub const paint_pop_clip_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPopGroup(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _mode: harf_buzz.paint_composite_mode_t) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, harf_buzz.paint_composite_mode_t) callconv(.c) void, .{ .name = "hb_paint_pop_group" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _mode);
    return ret;
}
pub const paint_pop_group_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _mode: harf_buzz.paint_composite_mode_t, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPopTransform(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque) callconv(.c) void, .{ .name = "hb_paint_pop_transform" });
    const ret = cFn(_funcs, @ptrCast(_paint_data));
    return ret;
}
pub const paint_pop_transform_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPushClipGlyph(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, u32, *harf_buzz.font_t) callconv(.c) void, .{ .name = "hb_paint_push_clip_glyph" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _glyph, _font);
    return ret;
}
pub const paint_push_clip_glyph_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _glyph: u32, _font: *harf_buzz.font_t, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPushClipRectangle(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xmin: f32, _ymin: f32, _xmax: f32, _ymax: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_paint_push_clip_rectangle" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _xmin, _ymin, _xmax, _ymax);
    return ret;
}
pub const paint_push_clip_rectangle_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xmin: f32, _ymin: f32, _xmax: f32, _ymax: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPushGroup(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque) callconv(.c) void, .{ .name = "hb_paint_push_group" });
    const ret = cFn(_funcs, @ptrCast(_paint_data));
    return ret;
}
pub const paint_push_group_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintPushTransform(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xx: f32, _yx: f32, _xy: f32, _yy: f32, _dx: f32, _dy: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, f32, f32, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_paint_push_transform" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _xx, _yx, _xy, _yy, _dx, _dy);
    return ret;
}
pub const paint_push_transform_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _xx: f32, _yx: f32, _xy: f32, _yy: f32, _dx: f32, _dy: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintRadialGradient(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _r0: f32, _x1: f32, _y1: f32, _r1: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_paint_radial_gradient" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _color_line, _x0, _y0, _r0, _x1, _y1, _r1);
    return ret;
}
pub const paint_radial_gradient_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _r0: f32, _x1: f32, _y1: f32, _r1: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub fn paintSweepGradient(_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _start_angle: f32, _end_angle: f32) void {
    const cFn = @extern(*const fn (*harf_buzz.paint_funcs_t, ?*anyopaque, *harf_buzz.color_line_t, f32, f32, f32, f32) callconv(.c) void, .{ .name = "hb_paint_sweep_gradient" });
    const ret = cFn(_funcs, @ptrCast(_paint_data), _color_line, _x0, _y0, _start_angle, _end_angle);
    return ret;
}
pub const paint_sweep_gradient_func_t = *const fn (_funcs: *harf_buzz.paint_funcs_t, _paint_data: ?*anyopaque, _color_line: *harf_buzz.color_line_t, _x0: f32, _y0: f32, _start_angle: f32, _end_angle: f32, _user_data: ?*anyopaque) callconv(.c) void;
pub const reference_table_func_t = *const fn (_face: *harf_buzz.face_t, _tag: u32, _user_data: ?*anyopaque) callconv(.c) *harf_buzz.blob_t;
pub fn scriptFromIso15924Tag(_tag: u32) harf_buzz.script_t {
    const cFn = @extern(*const fn (u32) callconv(.c) harf_buzz.script_t, .{ .name = "hb_script_from_iso15924_tag" });
    const ret = cFn(_tag);
    return ret;
}
pub fn scriptFromString(_strs: []u8) harf_buzz.script_t {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) harf_buzz.script_t, .{ .name = "hb_script_from_string" });
    const ret = cFn(_str, _len);
    return ret;
}
pub fn scriptGetHorizontalDirection(_script: harf_buzz.script_t) harf_buzz.direction_t {
    const cFn = @extern(*const fn (harf_buzz.script_t) callconv(.c) harf_buzz.direction_t, .{ .name = "hb_script_get_horizontal_direction" });
    const ret = cFn(_script);
    return ret;
}
pub const script_t = enum(u32) {
    common = 1517910393,
    inherited = 1516858984,
    unknown = 1517976186,
    arabic = 1098015074,
    armenian = 1098018158,
    bengali = 1113943655,
    cyrillic = 1132032620,
    devanagari = 1147500129,
    georgian = 1197830002,
    greek = 1198679403,
    gujarati = 1198877298,
    gurmukhi = 1198879349,
    hangul = 1214344807,
    han = 1214344809,
    hebrew = 1214603890,
    hiragana = 1214870113,
    kannada = 1265525857,
    katakana = 1264676449,
    lao = 1281453935,
    latin = 1281455214,
    malayalam = 1298954605,
    oriya = 1332902241,
    tamil = 1415671148,
    telugu = 1415933045,
    thai = 1416126825,
    tibetan = 1416192628,
    bopomofo = 1114599535,
    braille = 1114792297,
    canadian_syllabics = 1130458739,
    cherokee = 1130915186,
    ethiopic = 1165256809,
    khmer = 1265134962,
    mongolian = 1299148391,
    myanmar = 1299803506,
    ogham = 1332175213,
    runic = 1383427698,
    sinhala = 1399418472,
    syriac = 1400468067,
    thaana = 1416126817,
    yi = 1500080489,
    deseret = 1148416628,
    gothic = 1198486632,
    old_italic = 1232363884,
    buhid = 1114990692,
    hanunoo = 1214344815,
    tagalog = 1416064103,
    tagbanwa = 1415669602,
    cypriot = 1131442804,
    limbu = 1281977698,
    linear_b = 1281977954,
    osmanya = 1332964705,
    shavian = 1399349623,
    tai_le = 1415670885,
    ugaritic = 1432838514,
    buginese = 1114990441,
    coptic = 1131376756,
    glagolitic = 1198285159,
    kharoshthi = 1265131890,
    new_tai_lue = 1415670901,
    old_persian = 1483761007,
    syloti_nagri = 1400466543,
    tifinagh = 1415999079,
    balinese = 1113681001,
    cuneiform = 1483961720,
    nko = 1315663727,
    phags_pa = 1349017959,
    phoenician = 1349021304,
    carian = 1130459753,
    cham = 1130914157,
    kayah_li = 1264675945,
    lepcha = 1281716323,
    lycian = 1283023721,
    lydian = 1283023977,
    ol_chiki = 1332503403,
    rejang = 1382706791,
    saurashtra = 1398895986,
    sundanese = 1400204900,
    vai = 1449224553,
    avestan = 1098281844,
    bamum = 1113681269,
    egyptian_hieroglyphs = 1164409200,
    imperial_aramaic = 1098018153,
    inscriptional_pahlavi = 1349020777,
    inscriptional_parthian = 1349678185,
    javanese = 1247901281,
    kaithi = 1265920105,
    lisu = 1281979253,
    meetei_mayek = 1299473769,
    old_south_arabian = 1398895202,
    old_turkic = 1332898664,
    samaritan = 1398893938,
    tai_tham = 1281453665,
    tai_viet = 1415673460,
    batak = 1113683051,
    brahmi = 1114792296,
    mandaic = 1298230884,
    chakma = 1130457965,
    meroitic_cursive = 1298494051,
    meroitic_hieroglyphs = 1298494063,
    miao = 1349284452,
    sharada = 1399353956,
    sora_sompeng = 1399812705,
    takri = 1415670642,
    bassa_vah = 1113682803,
    caucasian_albanian = 1097295970,
    duployan = 1148547180,
    elbasan = 1164730977,
    grantha = 1198678382,
    khojki = 1265135466,
    khudawadi = 1399418468,
    linear_a = 1281977953,
    mahajani = 1298229354,
    manichaean = 1298230889,
    mende_kikakui = 1298493028,
    modi = 1299145833,
    mro = 1299345263,
    nabataean = 1315070324,
    old_north_arabian = 1315009122,
    old_permic = 1348825709,
    pahawh_hmong = 1215131239,
    palmyrene = 1348562029,
    pau_cin_hau = 1348564323,
    psalter_pahlavi = 1349020784,
    siddham = 1399415908,
    tirhuta = 1416196712,
    warang_citi = 1466004065,
    ahom = 1097363309,
    anatolian_hieroglyphs = 1215067511,
    hatran = 1214346354,
    multani = 1299541108,
    old_hungarian = 1215655527,
    signwriting = 1399287415,
    adlam = 1097100397,
    bhaiksuki = 1114139507,
    marchen = 1298231907,
    osage = 1332963173,
    tangut = 1415671399,
    newa = 1315272545,
    masaram_gondi = 1198485101,
    nushu = 1316186229,
    soyombo = 1399814511,
    zanabazar_square = 1516334690,
    dogra = 1148151666,
    gunjala_gondi = 1198485095,
    hanifi_rohingya = 1383032935,
    makasar = 1298230113,
    medefaidrin = 1298490470,
    old_sogdian = 1399809903,
    sogdian = 1399809892,
    elymaic = 1164736877,
    nandinagari = 1315008100,
    nyiakeng_puachue_hmong = 1215131248,
    wancho = 1466132591,
    chorasmian = 1130918515,
    dives_akuru = 1147756907,
    khitan_small_script = 1265202291,
    yezidi = 1499822697,
    cypro_minoan = 1131441518,
    old_uyghur = 1333094258,
    tangsa = 1416524641,
    toto = 1416590447,
    vithkuqi = 1449751656,
    math = 1517122664,
    kawi = 1264678761,
    nag_mundari = 1315006317,
    invalid = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_script_get_type" });
        return cFn();
    }
};
pub fn scriptToIso15924Tag(_script: harf_buzz.script_t) u32 {
    const cFn = @extern(*const fn (harf_buzz.script_t) callconv(.c) u32, .{ .name = "hb_script_to_iso15924_tag" });
    const ret = cFn(_script);
    return ret;
}
pub fn segmentPropertiesEqual(_a: *harf_buzz.segment_properties_t, _b: *harf_buzz.segment_properties_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.segment_properties_t, *harf_buzz.segment_properties_t) callconv(.c) i32, .{ .name = "hb_segment_properties_equal" });
    const ret = cFn(_a, _b);
    return ret;
}
pub fn segmentPropertiesHash(_p: *harf_buzz.segment_properties_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.segment_properties_t) callconv(.c) u32, .{ .name = "hb_segment_properties_hash" });
    const ret = cFn(_p);
    return ret;
}
pub fn segmentPropertiesOverlay(_p: *harf_buzz.segment_properties_t, _src: *harf_buzz.segment_properties_t) void {
    const cFn = @extern(*const fn (*harf_buzz.segment_properties_t, *harf_buzz.segment_properties_t) callconv(.c) void, .{ .name = "hb_segment_properties_overlay" });
    const ret = cFn(_p, _src);
    return ret;
}
pub const segment_properties_t = extern struct {
    direction: harf_buzz.direction_t,
    script: harf_buzz.script_t,
    language: ?*harf_buzz.language_t,
    reserved1: ?*anyopaque,
    reserved2: ?*anyopaque,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_segment_properties_get_type" });
        return cFn();
    }
};
pub fn setAdd(_set: *harf_buzz.set_t, _codepoint: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32) callconv(.c) void, .{ .name = "hb_set_add" });
    const ret = cFn(_set, _codepoint);
    return ret;
}
pub fn setAddRange(_set: *harf_buzz.set_t, _first: u32, _last: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32, u32) callconv(.c) void, .{ .name = "hb_set_add_range" });
    const ret = cFn(_set, _first, _last);
    return ret;
}
pub fn setAddSortedArray(_set: *harf_buzz.set_t, _sorted_codepointss: []u32) void {
    const _sorted_codepoints = _sorted_codepointss.ptr;
    const _num_codepoints: u32 = @intCast(_sorted_codepointss.len);
    const cFn = @extern(*const fn (*harf_buzz.set_t, [*]u32, u32) callconv(.c) void, .{ .name = "hb_set_add_sorted_array" });
    const ret = cFn(_set, _sorted_codepoints, _num_codepoints);
    return ret;
}
pub fn setAllocationSuccessful(_set: *harf_buzz.set_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) i32, .{ .name = "hb_set_allocation_successful" });
    const ret = cFn(_set);
    return ret;
}
pub fn setClear(_set: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_clear" });
    const ret = cFn(_set);
    return ret;
}
pub fn setCopy(_set: *harf_buzz.set_t) *harf_buzz.set_t {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) *harf_buzz.set_t, .{ .name = "hb_set_copy" });
    const ret = cFn(_set);
    return ret;
}
pub fn setCreate() *harf_buzz.set_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.set_t, .{ .name = "hb_set_create" });
    const ret = cFn();
    return ret;
}
pub fn setDel(_set: *harf_buzz.set_t, _codepoint: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32) callconv(.c) void, .{ .name = "hb_set_del" });
    const ret = cFn(_set, _codepoint);
    return ret;
}
pub fn setDelRange(_set: *harf_buzz.set_t, _first: u32, _last: u32) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32, u32) callconv(.c) void, .{ .name = "hb_set_del_range" });
    const ret = cFn(_set, _first, _last);
    return ret;
}
pub fn setGetEmpty() *harf_buzz.set_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.set_t, .{ .name = "hb_set_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn setGetMax(_set: *harf_buzz.set_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) u32, .{ .name = "hb_set_get_max" });
    const ret = cFn(_set);
    return ret;
}
pub fn setGetMin(_set: *harf_buzz.set_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) u32, .{ .name = "hb_set_get_min" });
    const ret = cFn(_set);
    return ret;
}
pub fn setGetPopulation(_set: *harf_buzz.set_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) u32, .{ .name = "hb_set_get_population" });
    const ret = cFn(_set);
    return ret;
}
pub fn setHas(_set: *harf_buzz.set_t, _codepoint: u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32) callconv(.c) i32, .{ .name = "hb_set_has" });
    const ret = cFn(_set, _codepoint);
    return ret;
}
pub fn setHash(_set: *harf_buzz.set_t) u32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) u32, .{ .name = "hb_set_hash" });
    const ret = cFn(_set);
    return ret;
}
pub fn setIntersect(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_intersect" });
    const ret = cFn(_set, _other);
    return ret;
}
pub fn setInvert(_set: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_invert" });
    const ret = cFn(_set);
    return ret;
}
pub fn setIsEmpty(_set: *harf_buzz.set_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) i32, .{ .name = "hb_set_is_empty" });
    const ret = cFn(_set);
    return ret;
}
pub fn setIsEqual(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) i32, .{ .name = "hb_set_is_equal" });
    const ret = cFn(_set, _other);
    return ret;
}
pub fn setIsInverted(_set: *harf_buzz.set_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t) callconv(.c) i32, .{ .name = "hb_set_is_inverted" });
    const ret = cFn(_set);
    return ret;
}
pub fn setIsSubset(_set: *harf_buzz.set_t, _larger_set: *harf_buzz.set_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) i32, .{ .name = "hb_set_is_subset" });
    const ret = cFn(_set, _larger_set);
    return ret;
}
pub fn setNext(_set: *harf_buzz.set_t, _codepoint: *u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *u32) callconv(.c) i32, .{ .name = "hb_set_next" });
    const ret = cFn(_set, _codepoint);
    return ret;
}
pub fn setNextMany(_set: *harf_buzz.set_t, _codepoint: u32, _outs: []u32) u32 {
    const _out = _outs.ptr;
    const _size: u32 = @intCast(_outs.len);
    const cFn = @extern(*const fn (*harf_buzz.set_t, u32, [*]u32, u32) callconv(.c) u32, .{ .name = "hb_set_next_many" });
    const ret = cFn(_set, _codepoint, _out, _size);
    return ret;
}
pub fn setNextRange(_set: *harf_buzz.set_t, _last: *u32) struct {
    ret: i32,
    first: u32,
} {
    var first_out: u32 = undefined;
    const _first = &first_out;
    const cFn = @extern(*const fn (*harf_buzz.set_t, *u32, *u32) callconv(.c) i32, .{ .name = "hb_set_next_range" });
    const ret = cFn(_set, _first, _last);
    return .{ .ret = ret, .first = first_out };
}
pub fn setPrevious(_set: *harf_buzz.set_t, _codepoint: *u32) i32 {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *u32) callconv(.c) i32, .{ .name = "hb_set_previous" });
    const ret = cFn(_set, _codepoint);
    return ret;
}
pub fn setPreviousRange(_set: *harf_buzz.set_t, _first: *u32) struct {
    ret: i32,
    last: u32,
} {
    var last_out: u32 = undefined;
    const _last = &last_out;
    const cFn = @extern(*const fn (*harf_buzz.set_t, *u32, *u32) callconv(.c) i32, .{ .name = "hb_set_previous_range" });
    const ret = cFn(_set, _first, _last);
    return .{ .ret = ret, .last = last_out };
}
pub fn setSet(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_set" });
    const ret = cFn(_set, _other);
    return ret;
}
pub fn setSubtract(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_subtract" });
    const ret = cFn(_set, _other);
    return ret;
}
pub fn setSymmetricDifference(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_symmetric_difference" });
    const ret = cFn(_set, _other);
    return ret;
}
pub const set_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_set_get_type" });
        return cFn();
    }
};
pub fn setUnion(_set: *harf_buzz.set_t, _other: *harf_buzz.set_t) void {
    const cFn = @extern(*const fn (*harf_buzz.set_t, *harf_buzz.set_t) callconv(.c) void, .{ .name = "hb_set_union" });
    const ret = cFn(_set, _other);
    return ret;
}
pub fn shape(_font: *harf_buzz.font_t, _buffer: *harf_buzz.buffer_t, _featuress: []harf_buzz.feature_t) void {
    const _features = _featuress.ptr;
    const _num_features: u32 = @intCast(_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.buffer_t, ?[*]harf_buzz.feature_t, u32) callconv(.c) void, .{ .name = "hb_shape" });
    const ret = cFn(_font, _buffer, _features, _num_features);
    return ret;
}
pub fn shapeFull(_font: *harf_buzz.font_t, _buffer: *harf_buzz.buffer_t, _featuress: []harf_buzz.feature_t, _shaper_list: ?[*:null]?[*:0]const u8) i32 {
    const _features = _featuress.ptr;
    const _num_features: u32 = @intCast(_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.buffer_t, ?[*]harf_buzz.feature_t, u32, ?[*:null]?[*:0]const u8) callconv(.c) i32, .{ .name = "hb_shape_full" });
    const ret = cFn(_font, _buffer, _features, _num_features, _shaper_list);
    return ret;
}
pub fn shapeJustify(_font: *harf_buzz.font_t, _buffer: *harf_buzz.buffer_t, _featuress: []harf_buzz.feature_t, _shaper_list: ?[*:null]?[*:0]const u8, _min_target_advance: f32, _max_target_advance: f32, _advance: *f32) struct {
    ret: i32,
    var_tag: u32,
    var_value: f32,
} {
    const _features = _featuress.ptr;
    const _num_features: u32 = @intCast(_featuress.len);
    var var_tag_out: u32 = undefined;
    const _var_tag = &var_tag_out;
    var var_value_out: f32 = undefined;
    const _var_value = &var_value_out;
    const cFn = @extern(*const fn (*harf_buzz.font_t, *harf_buzz.buffer_t, ?[*]harf_buzz.feature_t, u32, ?[*:null]?[*:0]const u8, f32, f32, *f32, *u32, *f32) callconv(.c) i32, .{ .name = "hb_shape_justify" });
    const ret = cFn(_font, _buffer, _features, _num_features, _shaper_list, _min_target_advance, _max_target_advance, _advance, _var_tag, _var_value);
    return .{ .ret = ret, .var_tag = var_tag_out, .var_value = var_value_out };
}
pub fn shapeListShapers() [*:null]?[*:0]const u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:null]?[*:0]const u8, .{ .name = "hb_shape_list_shapers" });
    const ret = cFn();
    return ret;
}
pub fn shapePlanCreate(_face: *harf_buzz.face_t, _props: *harf_buzz.segment_properties_t, _user_featuress: []harf_buzz.feature_t, _shaper_list: [*:null]?[*:0]const u8) *harf_buzz.shape_plan_t {
    const _user_features = _user_featuress.ptr;
    const _num_user_features: u32 = @intCast(_user_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.segment_properties_t, [*]harf_buzz.feature_t, u32, [*:null]?[*:0]const u8) callconv(.c) *harf_buzz.shape_plan_t, .{ .name = "hb_shape_plan_create" });
    const ret = cFn(_face, _props, _user_features, _num_user_features, _shaper_list);
    return ret;
}
pub fn shapePlanCreate2(_face: *harf_buzz.face_t, _props: *harf_buzz.segment_properties_t, _user_featuress: []harf_buzz.feature_t, _coordss: []i32, _shaper_list: [*:null]?[*:0]const u8) *harf_buzz.shape_plan_t {
    const _user_features = _user_featuress.ptr;
    const _num_user_features: u32 = @intCast(_user_featuress.len);
    const _coords = _coordss.ptr;
    const _num_coords: u32 = @intCast(_coordss.len);
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.segment_properties_t, [*]harf_buzz.feature_t, u32, [*]i32, u32, [*:null]?[*:0]const u8) callconv(.c) *harf_buzz.shape_plan_t, .{ .name = "hb_shape_plan_create2" });
    const ret = cFn(_face, _props, _user_features, _num_user_features, _coords, _num_coords, _shaper_list);
    return ret;
}
pub fn shapePlanCreateCached(_face: *harf_buzz.face_t, _props: *harf_buzz.segment_properties_t, _user_featuress: []harf_buzz.feature_t, _shaper_list: [*:null]?[*:0]const u8) *harf_buzz.shape_plan_t {
    const _user_features = _user_featuress.ptr;
    const _num_user_features: u32 = @intCast(_user_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.segment_properties_t, [*]harf_buzz.feature_t, u32, [*:null]?[*:0]const u8) callconv(.c) *harf_buzz.shape_plan_t, .{ .name = "hb_shape_plan_create_cached" });
    const ret = cFn(_face, _props, _user_features, _num_user_features, _shaper_list);
    return ret;
}
pub fn shapePlanCreateCached2(_face: *harf_buzz.face_t, _props: *harf_buzz.segment_properties_t, _user_featuress: []harf_buzz.feature_t, _coordss: []i32, _shaper_list: [*:null]?[*:0]const u8) *harf_buzz.shape_plan_t {
    const _user_features = _user_featuress.ptr;
    const _num_user_features: u32 = @intCast(_user_featuress.len);
    const _coords = _coordss.ptr;
    const _num_coords: u32 = @intCast(_coordss.len);
    const cFn = @extern(*const fn (*harf_buzz.face_t, *harf_buzz.segment_properties_t, [*]harf_buzz.feature_t, u32, [*]i32, u32, [*:null]?[*:0]const u8) callconv(.c) *harf_buzz.shape_plan_t, .{ .name = "hb_shape_plan_create_cached2" });
    const ret = cFn(_face, _props, _user_features, _num_user_features, _coords, _num_coords, _shaper_list);
    return ret;
}
pub fn shapePlanExecute(_shape_plan: *harf_buzz.shape_plan_t, _font: *harf_buzz.font_t, _buffer: *harf_buzz.buffer_t, _featuress: []harf_buzz.feature_t) i32 {
    const _features = _featuress.ptr;
    const _num_features: u32 = @intCast(_featuress.len);
    const cFn = @extern(*const fn (*harf_buzz.shape_plan_t, *harf_buzz.font_t, *harf_buzz.buffer_t, [*]harf_buzz.feature_t, u32) callconv(.c) i32, .{ .name = "hb_shape_plan_execute" });
    const ret = cFn(_shape_plan, _font, _buffer, _features, _num_features);
    return ret;
}
pub fn shapePlanGetEmpty() *harf_buzz.shape_plan_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.shape_plan_t, .{ .name = "hb_shape_plan_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn shapePlanGetShaper(_shape_plan: *harf_buzz.shape_plan_t) [*:0]u8 {
    const cFn = @extern(*const fn (*harf_buzz.shape_plan_t) callconv(.c) [*:0]u8, .{ .name = "hb_shape_plan_get_shaper" });
    const ret = cFn(_shape_plan);
    return ret;
}
pub const shape_plan_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_shape_plan_get_type" });
        return cFn();
    }
};
pub fn styleGetValue(_font: *harf_buzz.font_t, _style_tag: harf_buzz.style_tag_t) f32 {
    const cFn = @extern(*const fn (*harf_buzz.font_t, harf_buzz.style_tag_t) callconv(.c) f32, .{ .name = "hb_style_get_value" });
    const ret = cFn(_font, _style_tag);
    return ret;
}
pub const style_tag_t = enum(u32) {
    italic = 1769234796,
    optical_size = 1869640570,
    slant_angle = 1936486004,
    slant_ratio = 1399615092,
    width = 2003072104,
    weight = 2003265652,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_style_tag_get_type" });
        return cFn();
    }
};
pub fn tagFromString(_strs: []u8) u32 {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32) callconv(.c) u32, .{ .name = "hb_tag_from_string" });
    const ret = cFn(_str, _len);
    return ret;
}
pub fn tagToString(_tag: u32, _buf: *[4]u8) void {
    const cFn = @extern(*const fn (u32, *[4]u8) callconv(.c) void, .{ .name = "hb_tag_to_string" });
    const ret = cFn(_tag, _buf);
    return ret;
}
pub fn unicodeCombiningClass(_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32) harf_buzz.unicode_combining_class_t {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32) callconv(.c) harf_buzz.unicode_combining_class_t, .{ .name = "hb_unicode_combining_class" });
    const ret = cFn(_ufuncs, _unicode);
    return ret;
}
pub const unicode_combining_class_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_combining_class_t;
pub const unicode_combining_class_t = enum(u32) {
    not_reordered = 0,
    overlay = 1,
    nukta = 7,
    kana_voicing = 8,
    virama = 9,
    ccc10 = 10,
    ccc11 = 11,
    ccc12 = 12,
    ccc13 = 13,
    ccc14 = 14,
    ccc15 = 15,
    ccc16 = 16,
    ccc17 = 17,
    ccc18 = 18,
    ccc19 = 19,
    ccc20 = 20,
    ccc21 = 21,
    ccc22 = 22,
    ccc23 = 23,
    ccc24 = 24,
    ccc25 = 25,
    ccc26 = 26,
    ccc27 = 27,
    ccc28 = 28,
    ccc29 = 29,
    ccc30 = 30,
    ccc31 = 31,
    ccc32 = 32,
    ccc33 = 33,
    ccc34 = 34,
    ccc35 = 35,
    ccc36 = 36,
    ccc84 = 84,
    ccc91 = 91,
    ccc103 = 103,
    ccc107 = 107,
    ccc118 = 118,
    ccc122 = 122,
    ccc129 = 129,
    ccc130 = 130,
    ccc132 = 132,
    attached_below_left = 200,
    attached_below = 202,
    attached_above = 214,
    attached_above_right = 216,
    below_left = 218,
    below = 220,
    below_right = 222,
    left = 224,
    right = 226,
    above_left = 228,
    above = 230,
    above_right = 232,
    double_below = 233,
    double_above = 234,
    iota_subscript = 240,
    invalid = 255,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_unicode_combining_class_get_type" });
        return cFn();
    }
};
pub fn unicodeCompose(_ufuncs: *harf_buzz.unicode_funcs_t, _a: u32, _b: u32) struct {
    ret: i32,
    ab: u32,
} {
    var ab_out: u32 = undefined;
    const _ab = &ab_out;
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32, u32, *u32) callconv(.c) i32, .{ .name = "hb_unicode_compose" });
    const ret = cFn(_ufuncs, _a, _b, _ab);
    return .{ .ret = ret, .ab = ab_out };
}
pub const unicode_compose_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _a: u32, _b: u32, _ab: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub fn unicodeDecompose(_ufuncs: *harf_buzz.unicode_funcs_t, _ab: u32) struct {
    ret: i32,
    a: u32,
    b: u32,
} {
    var a_out: u32 = undefined;
    const _a = &a_out;
    var b_out: u32 = undefined;
    const _b = &b_out;
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32, *u32, *u32) callconv(.c) i32, .{ .name = "hb_unicode_decompose" });
    const ret = cFn(_ufuncs, _ab, _a, _b);
    return .{ .ret = ret, .a = a_out, .b = b_out };
}
pub const unicodeDecomposeCompatibility = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn unicodeDecomposeCompatibility(_ufuncs: *harf_buzz.unicode_funcs_t, _u: u32) struct {
        ret: u32,
        decomposed: u32,
    } {
        var decomposed_out: u32 = undefined;
        const _decomposed = &decomposed_out;
        const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32, *u32) callconv(.c) u32, .{ .name = "hb_unicode_decompose_compatibility" });
        const ret = cFn(_ufuncs, _u, _decomposed);
        return .{ .ret = ret, .decomposed = decomposed_out };
    }
}.unicodeDecomposeCompatibility;
pub const unicode_decompose_compatibility_func_t = if (config.disable_deprecated) core.Deprecated else *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _u: u32, _decomposed: *u32, _user_data: ?*anyopaque) callconv(.c) u32;
pub const unicode_decompose_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _ab: u32, _a: *u32, _b: *u32, _user_data: ?*anyopaque) callconv(.c) i32;
pub const unicodeEastasianWidth = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn unicodeEastasianWidth(_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32) u32 {
        const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32) callconv(.c) u32, .{ .name = "hb_unicode_eastasian_width" });
        const ret = cFn(_ufuncs, _unicode);
        return ret;
    }
}.unicodeEastasianWidth;
pub const unicode_eastasian_width_func_t = if (config.disable_deprecated) core.Deprecated else *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32;
pub fn unicodeFuncsCreate(_parent: ?*harf_buzz.unicode_funcs_t) *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn (?*harf_buzz.unicode_funcs_t) callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_unicode_funcs_create" });
    const ret = cFn(_parent);
    return ret;
}
pub fn unicodeFuncsGetDefault() *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_unicode_funcs_get_default" });
    const ret = cFn();
    return ret;
}
pub fn unicodeFuncsGetEmpty() *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn () callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_unicode_funcs_get_empty" });
    const ret = cFn();
    return ret;
}
pub fn unicodeFuncsGetParent(_ufuncs: *harf_buzz.unicode_funcs_t) *harf_buzz.unicode_funcs_t {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t) callconv(.c) *harf_buzz.unicode_funcs_t, .{ .name = "hb_unicode_funcs_get_parent" });
    const ret = cFn(_ufuncs);
    return ret;
}
pub fn unicodeFuncsIsImmutable(_ufuncs: *harf_buzz.unicode_funcs_t) i32 {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t) callconv(.c) i32, .{ .name = "hb_unicode_funcs_is_immutable" });
    const ret = cFn(_ufuncs);
    return ret;
}
pub fn unicodeFuncsMakeImmutable(_ufuncs: *harf_buzz.unicode_funcs_t) void {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t) callconv(.c) void, .{ .name = "hb_unicode_funcs_make_immutable" });
    const ret = cFn(_ufuncs);
    return ret;
}
pub fn unicodeFuncsSetCombiningClassFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ harf_buzz.unicode_combining_class_t, *harf_buzz.unicode_funcs_t, u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_combining_class_t = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_combining_class_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_combining_class_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn unicodeFuncsSetComposeFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.unicode_funcs_t, u32, u32, *u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _a: u32, _b: u32, _ab: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _a: u32, _b: u32, _ab: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_compose_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const unicodeFuncsSetDecomposeCompatibilityFunc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn unicodeFuncsSetDecomposeCompatibilityFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ u32, *harf_buzz.unicode_funcs_t, u32, *u32 });
        const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _u: u32, _decomposed: *u32, _user_data: ?*anyopaque) callconv(.c) u32 = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _u: u32, _decomposed: *u32, _user_data: ?*anyopaque) callconv(.c) u32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_decompose_compatibility_func" });
        const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
        return ret;
    }
}.unicodeFuncsSetDecomposeCompatibilityFunc;
pub fn unicodeFuncsSetDecomposeFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ i32, *harf_buzz.unicode_funcs_t, u32, *u32, *u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _ab: u32, _a: *u32, _b: *u32, _user_data: ?*anyopaque) callconv(.c) i32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _ab: u32, _a: *u32, _b: *u32, _user_data: ?*anyopaque) callconv(.c) i32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_decompose_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const unicodeFuncsSetEastasianWidthFunc = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn unicodeFuncsSetEastasianWidthFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ u32, *harf_buzz.unicode_funcs_t, u32 });
        const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32 = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_eastasian_width_func" });
        const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
        return ret;
    }
}.unicodeFuncsSetEastasianWidthFunc;
pub fn unicodeFuncsSetGeneralCategoryFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ harf_buzz.unicode_general_category_t, *harf_buzz.unicode_funcs_t, u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_general_category_t = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_general_category_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_general_category_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn unicodeFuncsSetMirroringFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ u32, *harf_buzz.unicode_funcs_t, u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32 = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_mirroring_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub fn unicodeFuncsSetScriptFunc(_ufuncs: *harf_buzz.unicode_funcs_t, func: anytype, func_args: anytype) void {
    var closure_func = core.zig_closure(func, func_args, &.{ harf_buzz.script_t, *harf_buzz.unicode_funcs_t, u32 });
    const _func: *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.script_t = @ptrCast(closure_func.c_closure());
    const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: ?*const fn (_user_data: ?*anyopaque) callconv(.c) void = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.script_t, ?*anyopaque, ?*const fn (_user_data: ?*anyopaque) callconv(.c) void) callconv(.c) void, .{ .name = "hb_unicode_funcs_set_script_func" });
    const ret = cFn(_ufuncs, _func, @ptrCast(_user_data), _destroy);
    return ret;
}
pub const unicode_funcs_t = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_unicode_funcs_get_type" });
        return cFn();
    }
};
pub fn unicodeGeneralCategory(_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32) harf_buzz.unicode_general_category_t {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32) callconv(.c) harf_buzz.unicode_general_category_t, .{ .name = "hb_unicode_general_category" });
    const ret = cFn(_ufuncs, _unicode);
    return ret;
}
pub const unicode_general_category_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.unicode_general_category_t;
pub const unicode_general_category_t = enum(u32) {
    control = 0,
    format = 1,
    unassigned = 2,
    private_use = 3,
    surrogate = 4,
    lowercase_letter = 5,
    modifier_letter = 6,
    other_letter = 7,
    titlecase_letter = 8,
    uppercase_letter = 9,
    spacing_mark = 10,
    enclosing_mark = 11,
    non_spacing_mark = 12,
    decimal_number = 13,
    letter_number = 14,
    other_number = 15,
    connect_punctuation = 16,
    dash_punctuation = 17,
    close_punctuation = 18,
    final_punctuation = 19,
    initial_punctuation = 20,
    other_punctuation = 21,
    open_punctuation = 22,
    currency_symbol = 23,
    modifier_symbol = 24,
    math_symbol = 25,
    other_symbol = 26,
    line_separator = 27,
    paragraph_separator = 28,
    space_separator = 29,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_unicode_general_category_get_type" });
        return cFn();
    }
};
pub fn unicodeMirroring(_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32) u32 {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32) callconv(.c) u32, .{ .name = "hb_unicode_mirroring" });
    const ret = cFn(_ufuncs, _unicode);
    return ret;
}
pub const unicode_mirroring_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) u32;
pub fn unicodeScript(_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32) harf_buzz.script_t {
    const cFn = @extern(*const fn (*harf_buzz.unicode_funcs_t, u32) callconv(.c) harf_buzz.script_t, .{ .name = "hb_unicode_script" });
    const ret = cFn(_ufuncs, _unicode);
    return ret;
}
pub const unicode_script_func_t = *const fn (_ufuncs: *harf_buzz.unicode_funcs_t, _unicode: u32, _user_data: ?*anyopaque) callconv(.c) harf_buzz.script_t;
pub const user_data_key_t = extern struct {
    unused: i8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "hb_gobject_user_data_key_get_type" });
        return cFn();
    }
};
pub const var_int_t = extern union {
    u32: u32,
    i32: i32,
    u16: [2]u16,
    i16: [2]i16,
    u8: [4]u8,
    i8: [4]i8,
};
pub const var_num_t = extern union {
    f: f32,
    u32: u32,
    i32: i32,
    u16: [2]u16,
    i16: [2]i16,
    u8: [4]u8,
    i8: [4]i8,
};
pub fn variationFromString(_strs: []u8, _variation: *harf_buzz.variation_t) i32 {
    const _str = _strs.ptr;
    const _len: i32 = @intCast(_strs.len);
    const cFn = @extern(*const fn ([*]u8, i32, *harf_buzz.variation_t) callconv(.c) i32, .{ .name = "hb_variation_from_string" });
    const ret = cFn(_str, _len, _variation);
    return ret;
}
pub const variation_t = extern struct {
    tag: u32,
    value: f32,
    pub fn String(self: *variation_t, _bufs: [][*:0]const u8) struct {
        ret: void,
    } {
        const _buf = _bufs.ptr;
        var size_out: u32 = undefined;
        const _size = &size_out;
        const cFn = @extern(*const fn (*variation_t, [*][*:0]const u8, *u32) callconv(.c) void, .{ .name = "hb_variation_to_string" });
        const ret = cFn(self, _buf, _size);
        return .{ .ret = ret };
    }
};
pub fn variationToString(_variation: *harf_buzz.variation_t, _bufs: [][*:0]const u8) struct {
    ret: void,
} {
    const _buf = _bufs.ptr;
    var size_out: u32 = undefined;
    const _size = &size_out;
    const cFn = @extern(*const fn (*harf_buzz.variation_t, [*][*:0]const u8, *u32) callconv(.c) void, .{ .name = "hb_variation_to_string" });
    const ret = cFn(_variation, _buf, _size);
    return .{ .ret = ret };
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
