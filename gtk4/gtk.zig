// This file is auto-generated by zig-gir-ffi
const gtk = @This();
pub const pango_cairo = @import("pango_cairo");
pub const freetype2 = @import("freetype2");
pub const glib = @import("glib");
pub const gdk_pixbuf = @import("gdk_pixbuf");
pub const harf_buzz = @import("harf_buzz");
pub const gmodule = @import("gmodule");
pub const cairo = @import("cairo");
pub const graphene = @import("graphene");
pub const gsk = @import("gsk");
pub const gobject = @import("gobject");
pub const gdk = @import("gdk");
pub const gio = @import("gio");
pub const pango = @import("pango");
pub const core = @import("core");
pub const template = @import("template");
const std = @import("std");
const config = core.config;
/// const [ACCESSIBLE_ATTRIBUTE_BACKGROUND](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_BACKGROUND.html)
pub const ACCESSIBLE_ATTRIBUTE_BACKGROUND = "bg-color";
/// const [ACCESSIBLE_ATTRIBUTE_FAMILY](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_FAMILY.html)
pub const ACCESSIBLE_ATTRIBUTE_FAMILY = "family-name";
/// const [ACCESSIBLE_ATTRIBUTE_FOREGROUND](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_FOREGROUND.html)
pub const ACCESSIBLE_ATTRIBUTE_FOREGROUND = "fg-color";
/// const [ACCESSIBLE_ATTRIBUTE_OVERLINE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_OVERLINE.html)
pub const ACCESSIBLE_ATTRIBUTE_OVERLINE = "overline";
/// const [ACCESSIBLE_ATTRIBUTE_OVERLINE_NONE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_OVERLINE_NONE.html)
pub const ACCESSIBLE_ATTRIBUTE_OVERLINE_NONE = "none";
/// const [ACCESSIBLE_ATTRIBUTE_OVERLINE_SINGLE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_OVERLINE_SINGLE.html)
pub const ACCESSIBLE_ATTRIBUTE_OVERLINE_SINGLE = "single";
/// const [ACCESSIBLE_ATTRIBUTE_SIZE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_SIZE.html)
pub const ACCESSIBLE_ATTRIBUTE_SIZE = "size";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH = "stretch";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_CONDENSED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_CONDENSED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_CONDENSED = "condensed";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_EXPANDED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_EXPANDED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_EXPANDED = "expanded";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_CONDENSED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_CONDENSED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_CONDENSED = "extra_condensed";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_EXPANDED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_EXPANDED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_EXTRA_EXPANDED = "extra_expanded";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_NORMAL](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_NORMAL.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_NORMAL = "normal";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_CONDENSED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_CONDENSED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_CONDENSED = "semi_condensed";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_EXPANDED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_EXPANDED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_SEMI_EXPANDED = "semi_expanded";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_CONDENSED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_CONDENSED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_CONDENSED = "ultra_condensed";
/// const [ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_EXPANDED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_EXPANDED.html)
pub const ACCESSIBLE_ATTRIBUTE_STRETCH_ULTRA_EXPANDED = "ultra_expanded";
/// const [ACCESSIBLE_ATTRIBUTE_STRIKETHROUGH](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STRIKETHROUGH.html)
pub const ACCESSIBLE_ATTRIBUTE_STRIKETHROUGH = "strikethrough";
/// const [ACCESSIBLE_ATTRIBUTE_STYLE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STYLE.html)
pub const ACCESSIBLE_ATTRIBUTE_STYLE = "style";
/// const [ACCESSIBLE_ATTRIBUTE_STYLE_ITALIC](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STYLE_ITALIC.html)
pub const ACCESSIBLE_ATTRIBUTE_STYLE_ITALIC = "italic";
/// const [ACCESSIBLE_ATTRIBUTE_STYLE_NORMAL](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STYLE_NORMAL.html)
pub const ACCESSIBLE_ATTRIBUTE_STYLE_NORMAL = "normal";
/// const [ACCESSIBLE_ATTRIBUTE_STYLE_OBLIQUE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_STYLE_OBLIQUE.html)
pub const ACCESSIBLE_ATTRIBUTE_STYLE_OBLIQUE = "oblique";
/// const [ACCESSIBLE_ATTRIBUTE_UNDERLINE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_UNDERLINE.html)
pub const ACCESSIBLE_ATTRIBUTE_UNDERLINE = "underline";
/// const [ACCESSIBLE_ATTRIBUTE_UNDERLINE_DOUBLE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_UNDERLINE_DOUBLE.html)
pub const ACCESSIBLE_ATTRIBUTE_UNDERLINE_DOUBLE = "double";
/// const [ACCESSIBLE_ATTRIBUTE_UNDERLINE_ERROR](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_UNDERLINE_ERROR.html)
pub const ACCESSIBLE_ATTRIBUTE_UNDERLINE_ERROR = "error";
/// const [ACCESSIBLE_ATTRIBUTE_UNDERLINE_NONE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_UNDERLINE_NONE.html)
pub const ACCESSIBLE_ATTRIBUTE_UNDERLINE_NONE = "none";
/// const [ACCESSIBLE_ATTRIBUTE_UNDERLINE_SINGLE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_UNDERLINE_SINGLE.html)
pub const ACCESSIBLE_ATTRIBUTE_UNDERLINE_SINGLE = "single";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT = "variant";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_PETITE_CAPS](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_PETITE_CAPS.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_PETITE_CAPS = "all-petite-caps";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_SMALL_CAPS](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_SMALL_CAPS.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_ALL_SMALL_CAPS = "all-small-caps";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_PETITE_CAPS](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_PETITE_CAPS.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_PETITE_CAPS = "petite-caps";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_SMALL_CAPS](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_SMALL_CAPS.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_SMALL_CAPS = "small-caps";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_TITLE_CAPS](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_TITLE_CAPS.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_TITLE_CAPS = "title-caps";
/// const [ACCESSIBLE_ATTRIBUTE_VARIANT_UNICASE](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_VARIANT_UNICASE.html)
pub const ACCESSIBLE_ATTRIBUTE_VARIANT_UNICASE = "unicase";
/// const [ACCESSIBLE_ATTRIBUTE_WEIGHT](https://docs.gtk.org/gtk4/const.ACCESSIBLE_ATTRIBUTE_WEIGHT.html)
pub const ACCESSIBLE_ATTRIBUTE_WEIGHT = "weight";
/// const [ACCESSIBLE_VALUE_UNDEFINED](https://docs.gtk.org/gtk4/const.ACCESSIBLE_VALUE_UNDEFINED.html)
pub const ACCESSIBLE_VALUE_UNDEFINED = -1;
/// Class [ATContext](https://docs.gtk.org/gtk4/class.ATContext.html)
/// - property [accessible](https://docs.gtk.org/gtk4/property.ATContext.accessible.html): (r-) `gtk.Accessible`
/// - property [accessible-role](https://docs.gtk.org/gtk4/property.ATContext.accessible-role.html): (rw) `gtk.AccessibleRole`
/// - property [display](https://docs.gtk.org/gtk4/property.ATContext.display.html): (rw) `gdk.Display`
pub const ATContext = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ATContextClass;
    /// ctor [create](https://docs.gtk.org/gtk4/ctor.ATContext.create.html)
    pub fn create(_accessible_role: gtk.AccessibleRole, _accessible: *gtk.Accessible, _display: *gdk.Display) ?*ATContext {
        const cFn = @extern(*const fn (gtk.AccessibleRole, *gtk.Accessible, *gdk.Display) callconv(.c) ?*ATContext, .{ .name = "gtk_at_context_create" });
        const ret = cFn(_accessible_role, _accessible, _display);
        return ret;
    }
    /// method [get_accessible](https://docs.gtk.org/gtk4/method.ATContext.get_accessible.html)
    pub fn getAccessible(self: *ATContext) *gtk.Accessible {
        const cFn = @extern(*const fn (*ATContext) callconv(.c) *gtk.Accessible, .{ .name = "gtk_at_context_get_accessible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_accessible_role](https://docs.gtk.org/gtk4/method.ATContext.get_accessible_role.html)
    pub fn getAccessibleRole(self: *ATContext) gtk.AccessibleRole {
        const cFn = @extern(*const fn (*ATContext) callconv(.c) gtk.AccessibleRole, .{ .name = "gtk_at_context_get_accessible_role" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [state-change](https://docs.gtk.org/gtk4/signal.ATContext.state-change.html)
    pub fn connectStateChange(self: *ATContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("state-change", handler, args, flags, &.{ void, *ATContext });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_at_context_get_type" });
        return cFn();
    }
};
pub const ATContextClass = opaque {};
/// Class [AboutDialog](https://docs.gtk.org/gtk4/class.AboutDialog.html)
/// - property [artists](https://docs.gtk.org/gtk4/property.AboutDialog.artists.html): (rw) `[*:null]?[*:0]const u8`
/// - property [authors](https://docs.gtk.org/gtk4/property.AboutDialog.authors.html): (rw) `[*:null]?[*:0]const u8`
/// - property [comments](https://docs.gtk.org/gtk4/property.AboutDialog.comments.html): (rw) `[*:0]const u8`
/// - property [copyright](https://docs.gtk.org/gtk4/property.AboutDialog.copyright.html): (rw) `[*:0]const u8`
/// - property [documenters](https://docs.gtk.org/gtk4/property.AboutDialog.documenters.html): (rw) `[*:null]?[*:0]const u8`
/// - property [license](https://docs.gtk.org/gtk4/property.AboutDialog.license.html): (rw) `[*:0]const u8`
/// - property [license-type](https://docs.gtk.org/gtk4/property.AboutDialog.license-type.html): (rw) `gtk.License`
/// - property [logo](https://docs.gtk.org/gtk4/property.AboutDialog.logo.html): (rw) `gdk.Paintable`
/// - property [logo-icon-name](https://docs.gtk.org/gtk4/property.AboutDialog.logo-icon-name.html): (rw) `[*:0]const u8`
/// - property [program-name](https://docs.gtk.org/gtk4/property.AboutDialog.program-name.html): (rw) `[*:0]const u8`
/// - property [system-information](https://docs.gtk.org/gtk4/property.AboutDialog.system-information.html): (rw) `[*:0]const u8`
/// - property [translator-credits](https://docs.gtk.org/gtk4/property.AboutDialog.translator-credits.html): (rw) `[*:0]const u8`
/// - property [version](https://docs.gtk.org/gtk4/property.AboutDialog.version.html): (rw) `[*:0]const u8`
/// - property [website](https://docs.gtk.org/gtk4/property.AboutDialog.website.html): (rw) `[*:0]const u8`
/// - property [website-label](https://docs.gtk.org/gtk4/property.AboutDialog.website-label.html): (rw) `[*:0]const u8`
/// - property [wrap-license](https://docs.gtk.org/gtk4/property.AboutDialog.wrap-license.html): (rw) `bool`
pub const AboutDialog = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Window;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AboutDialog.new.html)
    pub fn new() *AboutDialog {
        const cFn = @extern(*const fn () callconv(.c) *AboutDialog, .{ .name = "gtk_about_dialog_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_credit_section](https://docs.gtk.org/gtk4/method.AboutDialog.add_credit_section.html)
    pub fn addCreditSection(self: *AboutDialog, _section_name: [*:0]const u8, _people: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, [*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_add_credit_section" });
        const ret = cFn(self, _section_name, _people);
        return ret;
    }
    /// method [get_artists](https://docs.gtk.org/gtk4/method.AboutDialog.get_artists.html)
    pub fn getArtists(self: *AboutDialog) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_about_dialog_get_artists" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_authors](https://docs.gtk.org/gtk4/method.AboutDialog.get_authors.html)
    pub fn getAuthors(self: *AboutDialog) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_about_dialog_get_authors" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_comments](https://docs.gtk.org/gtk4/method.AboutDialog.get_comments.html)
    pub fn getComments(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_comments" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_copyright](https://docs.gtk.org/gtk4/method.AboutDialog.get_copyright.html)
    pub fn getCopyright(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_copyright" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_documenters](https://docs.gtk.org/gtk4/method.AboutDialog.get_documenters.html)
    pub fn getDocumenters(self: *AboutDialog) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_about_dialog_get_documenters" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_license](https://docs.gtk.org/gtk4/method.AboutDialog.get_license.html)
    pub fn getLicense(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_license" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_license_type](https://docs.gtk.org/gtk4/method.AboutDialog.get_license_type.html)
    pub fn getLicenseType(self: *AboutDialog) gtk.License {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) gtk.License, .{ .name = "gtk_about_dialog_get_license_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_logo](https://docs.gtk.org/gtk4/method.AboutDialog.get_logo.html)
    pub fn getLogo(self: *AboutDialog) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_about_dialog_get_logo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_logo_icon_name](https://docs.gtk.org/gtk4/method.AboutDialog.get_logo_icon_name.html)
    pub fn getLogoIconName(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_logo_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_program_name](https://docs.gtk.org/gtk4/method.AboutDialog.get_program_name.html)
    pub fn getProgramName(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_program_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_system_information](https://docs.gtk.org/gtk4/method.AboutDialog.get_system_information.html)
    pub fn getSystemInformation(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_system_information" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_translator_credits](https://docs.gtk.org/gtk4/method.AboutDialog.get_translator_credits.html)
    pub fn getTranslatorCredits(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_translator_credits" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_version](https://docs.gtk.org/gtk4/method.AboutDialog.get_version.html)
    pub fn getVersion(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_version" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_website](https://docs.gtk.org/gtk4/method.AboutDialog.get_website.html)
    pub fn getWebsite(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_website" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_website_label](https://docs.gtk.org/gtk4/method.AboutDialog.get_website_label.html)
    pub fn getWebsiteLabel(self: *AboutDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_about_dialog_get_website_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap_license](https://docs.gtk.org/gtk4/method.AboutDialog.get_wrap_license.html)
    pub fn getWrapLicense(self: *AboutDialog) bool {
        const cFn = @extern(*const fn (*AboutDialog) callconv(.c) bool, .{ .name = "gtk_about_dialog_get_wrap_license" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_artists](https://docs.gtk.org/gtk4/method.AboutDialog.set_artists.html)
    pub fn setArtists(self: *AboutDialog, _artists: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_artists" });
        const ret = cFn(self, _artists);
        return ret;
    }
    /// method [set_authors](https://docs.gtk.org/gtk4/method.AboutDialog.set_authors.html)
    pub fn setAuthors(self: *AboutDialog, _authors: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_authors" });
        const ret = cFn(self, _authors);
        return ret;
    }
    /// method [set_comments](https://docs.gtk.org/gtk4/method.AboutDialog.set_comments.html)
    pub fn setComments(self: *AboutDialog, _comments: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_comments" });
        const ret = cFn(self, _comments);
        return ret;
    }
    /// method [set_copyright](https://docs.gtk.org/gtk4/method.AboutDialog.set_copyright.html)
    pub fn setCopyright(self: *AboutDialog, _copyright: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_copyright" });
        const ret = cFn(self, _copyright);
        return ret;
    }
    /// method [set_documenters](https://docs.gtk.org/gtk4/method.AboutDialog.set_documenters.html)
    pub fn setDocumenters(self: *AboutDialog, _documenters: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_documenters" });
        const ret = cFn(self, _documenters);
        return ret;
    }
    /// method [set_license](https://docs.gtk.org/gtk4/method.AboutDialog.set_license.html)
    pub fn setLicense(self: *AboutDialog, _license: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_license" });
        const ret = cFn(self, _license);
        return ret;
    }
    /// method [set_license_type](https://docs.gtk.org/gtk4/method.AboutDialog.set_license_type.html)
    pub fn setLicenseType(self: *AboutDialog, _license_type: gtk.License) void {
        const cFn = @extern(*const fn (*AboutDialog, gtk.License) callconv(.c) void, .{ .name = "gtk_about_dialog_set_license_type" });
        const ret = cFn(self, _license_type);
        return ret;
    }
    /// method [set_logo](https://docs.gtk.org/gtk4/method.AboutDialog.set_logo.html)
    pub fn setLogo(self: *AboutDialog, _logo: ?*gdk.Paintable) void {
        const cFn = @extern(*const fn (*AboutDialog, ?*gdk.Paintable) callconv(.c) void, .{ .name = "gtk_about_dialog_set_logo" });
        const ret = cFn(self, _logo);
        return ret;
    }
    /// method [set_logo_icon_name](https://docs.gtk.org/gtk4/method.AboutDialog.set_logo_icon_name.html)
    pub fn setLogoIconName(self: *AboutDialog, _icon_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_logo_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_program_name](https://docs.gtk.org/gtk4/method.AboutDialog.set_program_name.html)
    pub fn setProgramName(self: *AboutDialog, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_program_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_system_information](https://docs.gtk.org/gtk4/method.AboutDialog.set_system_information.html)
    pub fn setSystemInformation(self: *AboutDialog, _system_information: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_system_information" });
        const ret = cFn(self, _system_information);
        return ret;
    }
    /// method [set_translator_credits](https://docs.gtk.org/gtk4/method.AboutDialog.set_translator_credits.html)
    pub fn setTranslatorCredits(self: *AboutDialog, _translator_credits: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_translator_credits" });
        const ret = cFn(self, _translator_credits);
        return ret;
    }
    /// method [set_version](https://docs.gtk.org/gtk4/method.AboutDialog.set_version.html)
    pub fn setVersion(self: *AboutDialog, _version: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_version" });
        const ret = cFn(self, _version);
        return ret;
    }
    /// method [set_website](https://docs.gtk.org/gtk4/method.AboutDialog.set_website.html)
    pub fn setWebsite(self: *AboutDialog, _website: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_website" });
        const ret = cFn(self, _website);
        return ret;
    }
    /// method [set_website_label](https://docs.gtk.org/gtk4/method.AboutDialog.set_website_label.html)
    pub fn setWebsiteLabel(self: *AboutDialog, _website_label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AboutDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_about_dialog_set_website_label" });
        const ret = cFn(self, _website_label);
        return ret;
    }
    /// method [set_wrap_license](https://docs.gtk.org/gtk4/method.AboutDialog.set_wrap_license.html)
    pub fn setWrapLicense(self: *AboutDialog, _wrap_license: bool) void {
        const cFn = @extern(*const fn (*AboutDialog, bool) callconv(.c) void, .{ .name = "gtk_about_dialog_set_wrap_license" });
        const ret = cFn(self, _wrap_license);
        return ret;
    }
    /// signal [activate-link](https://docs.gtk.org/gtk4/signal.AboutDialog.activate-link.html)
    pub fn connectActivateLink(self: *AboutDialog, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-link", handler, args, flags, &.{ bool, *AboutDialog, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_about_dialog_get_type" });
        return cFn();
    }
};
/// Iface [Accessible](https://docs.gtk.org/gtk4/iface.Accessible.html)
/// - property [accessible-role](https://docs.gtk.org/gtk4/property.Accessible.accessible-role.html): (rw) `gtk.AccessibleRole`
pub const Accessible = opaque {
    /// method [announce](https://docs.gtk.org/gtk4/method.Accessible.announce.html)
    pub fn announce(self: *Accessible, _message: [*:0]const u8, _priority: gtk.AccessibleAnnouncementPriority) void {
        const cFn = @extern(*const fn (*Accessible, [*:0]const u8, gtk.AccessibleAnnouncementPriority) callconv(.c) void, .{ .name = "gtk_accessible_announce" });
        const ret = cFn(self, _message, _priority);
        return ret;
    }
    /// method [get_accessible_parent](https://docs.gtk.org/gtk4/method.Accessible.get_accessible_parent.html)
    pub fn getAccessibleParent(self: *Accessible) ?*gtk.Accessible {
        const cFn = @extern(*const fn (*Accessible) callconv(.c) ?*gtk.Accessible, .{ .name = "gtk_accessible_get_accessible_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_accessible_role](https://docs.gtk.org/gtk4/method.Accessible.get_accessible_role.html)
    pub fn getAccessibleRole(self: *Accessible) gtk.AccessibleRole {
        const cFn = @extern(*const fn (*Accessible) callconv(.c) gtk.AccessibleRole, .{ .name = "gtk_accessible_get_accessible_role" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_at_context](https://docs.gtk.org/gtk4/method.Accessible.get_at_context.html)
    pub fn getAtContext(self: *Accessible) *gtk.ATContext {
        const cFn = @extern(*const fn (*Accessible) callconv(.c) *gtk.ATContext, .{ .name = "gtk_accessible_get_at_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bounds](https://docs.gtk.org/gtk4/method.Accessible.get_bounds.html)
    pub fn getBounds(self: *Accessible) ?struct {
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    } {
        var x_out: i32 = undefined;
        const _x = &x_out;
        var y_out: i32 = undefined;
        const _y = &y_out;
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Accessible, *i32, *i32, *i32, *i32) callconv(.c) bool, .{ .name = "gtk_accessible_get_bounds" });
        const ret = cFn(self, _x, _y, _width, _height);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out, .width = width_out, .height = height_out };
    }
    /// method [get_first_accessible_child](https://docs.gtk.org/gtk4/method.Accessible.get_first_accessible_child.html)
    pub fn getFirstAccessibleChild(self: *Accessible) ?*gtk.Accessible {
        const cFn = @extern(*const fn (*Accessible) callconv(.c) ?*gtk.Accessible, .{ .name = "gtk_accessible_get_first_accessible_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_next_accessible_sibling](https://docs.gtk.org/gtk4/method.Accessible.get_next_accessible_sibling.html)
    pub fn getNextAccessibleSibling(self: *Accessible) ?*gtk.Accessible {
        const cFn = @extern(*const fn (*Accessible) callconv(.c) ?*gtk.Accessible, .{ .name = "gtk_accessible_get_next_accessible_sibling" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_platform_state](https://docs.gtk.org/gtk4/method.Accessible.get_platform_state.html)
    pub fn getPlatformState(self: *Accessible, _state: gtk.AccessiblePlatformState) bool {
        const cFn = @extern(*const fn (*Accessible, gtk.AccessiblePlatformState) callconv(.c) bool, .{ .name = "gtk_accessible_get_platform_state" });
        const ret = cFn(self, _state);
        return ret;
    }
    /// method [reset_property](https://docs.gtk.org/gtk4/method.Accessible.reset_property.html)
    pub fn resetProperty(self: *Accessible, _property: gtk.AccessibleProperty) void {
        const cFn = @extern(*const fn (*Accessible, gtk.AccessibleProperty) callconv(.c) void, .{ .name = "gtk_accessible_reset_property" });
        const ret = cFn(self, _property);
        return ret;
    }
    /// method [reset_relation](https://docs.gtk.org/gtk4/method.Accessible.reset_relation.html)
    pub fn resetRelation(self: *Accessible, _relation: gtk.AccessibleRelation) void {
        const cFn = @extern(*const fn (*Accessible, gtk.AccessibleRelation) callconv(.c) void, .{ .name = "gtk_accessible_reset_relation" });
        const ret = cFn(self, _relation);
        return ret;
    }
    /// method [reset_state](https://docs.gtk.org/gtk4/method.Accessible.reset_state.html)
    pub fn resetState(self: *Accessible, _state: gtk.AccessibleState) void {
        const cFn = @extern(*const fn (*Accessible, gtk.AccessibleState) callconv(.c) void, .{ .name = "gtk_accessible_reset_state" });
        const ret = cFn(self, _state);
        return ret;
    }
    /// method [set_accessible_parent](https://docs.gtk.org/gtk4/method.Accessible.set_accessible_parent.html)
    pub fn setAccessibleParent(self: *Accessible, _parent: ?*gtk.Accessible, _next_sibling: ?*gtk.Accessible) void {
        const cFn = @extern(*const fn (*Accessible, ?*gtk.Accessible, ?*gtk.Accessible) callconv(.c) void, .{ .name = "gtk_accessible_set_accessible_parent" });
        const ret = cFn(self, _parent, _next_sibling);
        return ret;
    }
    /// method [update_next_accessible_sibling](https://docs.gtk.org/gtk4/method.Accessible.update_next_accessible_sibling.html)
    pub fn updateNextAccessibleSibling(self: *Accessible, _new_sibling: ?*gtk.Accessible) void {
        const cFn = @extern(*const fn (*Accessible, ?*gtk.Accessible) callconv(.c) void, .{ .name = "gtk_accessible_update_next_accessible_sibling" });
        const ret = cFn(self, _new_sibling);
        return ret;
    }
    /// method [update_property](https://docs.gtk.org/gtk4/method.Accessible.update_property.html)
    pub fn updateProperty(self: *Accessible, _propertiess: []gtk.AccessibleProperty, _valuess: []gobject.Value) void {
        const _n_properties: i32 = @intCast(_propertiess.len);
        const _properties = _propertiess.ptr;
        const _values = _valuess.ptr;
        const cFn = @extern(*const fn (*Accessible, i32, [*]gtk.AccessibleProperty, [*]gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_update_property_value" });
        const ret = cFn(self, _n_properties, _properties, _values);
        return ret;
    }
    /// method [update_relation](https://docs.gtk.org/gtk4/method.Accessible.update_relation.html)
    pub fn updateRelation(self: *Accessible, _relationss: []gtk.AccessibleRelation, _valuess: []gobject.Value) void {
        const _n_relations: i32 = @intCast(_relationss.len);
        const _relations = _relationss.ptr;
        const _values = _valuess.ptr;
        const cFn = @extern(*const fn (*Accessible, i32, [*]gtk.AccessibleRelation, [*]gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_update_relation_value" });
        const ret = cFn(self, _n_relations, _relations, _values);
        return ret;
    }
    /// method [update_state](https://docs.gtk.org/gtk4/method.Accessible.update_state.html)
    pub fn updateState(self: *Accessible, _statess: []gtk.AccessibleState, _valuess: []gobject.Value) void {
        const _n_states: i32 = @intCast(_statess.len);
        const _states = _statess.ptr;
        const _values = _valuess.ptr;
        const cFn = @extern(*const fn (*Accessible, i32, [*]gtk.AccessibleState, [*]gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_update_state_value" });
        const ret = cFn(self, _n_states, _states, _values);
        return ret;
    }
    /// vfunc [get_accessible_parent](https://docs.gtk.org/gtk4/vfunc.Accessible.get_accessible_parent.html)
    pub fn getAccessibleParentV(self: *Accessible) ?*gtk.Accessible {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_accessible_parent.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_at_context](https://docs.gtk.org/gtk4/vfunc.Accessible.get_at_context.html)
    pub fn getAtContextV(self: *Accessible) ?*gtk.ATContext {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_at_context.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_bounds](https://docs.gtk.org/gtk4/vfunc.Accessible.get_bounds.html)
    pub fn getBoundsV(self: *Accessible, _x: *i32, _y: *i32, _width: *i32, _height: *i32) bool {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_bounds.?;
        const ret = vFn(self, _x, _y, _width, _height);
        return ret;
    }
    /// vfunc [get_first_accessible_child](https://docs.gtk.org/gtk4/vfunc.Accessible.get_first_accessible_child.html)
    pub fn getFirstAccessibleChildV(self: *Accessible) ?*gtk.Accessible {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_first_accessible_child.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_next_accessible_sibling](https://docs.gtk.org/gtk4/vfunc.Accessible.get_next_accessible_sibling.html)
    pub fn getNextAccessibleSiblingV(self: *Accessible) ?*gtk.Accessible {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_next_accessible_sibling.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_platform_state](https://docs.gtk.org/gtk4/vfunc.Accessible.get_platform_state.html)
    pub fn getPlatformStateV(self: *Accessible, _state: gtk.AccessiblePlatformState) bool {
        const class: *AccessibleInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_platform_state.?;
        const ret = vFn(self, _state);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleAnnouncementPriority](https://docs.gtk.org/gtk4/enum.AccessibleAnnouncementPriority.html)
pub const AccessibleAnnouncementPriority = enum(u32) {
    low = 0,
    medium = 1,
    high = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_announcement_priority_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleAutocomplete](https://docs.gtk.org/gtk4/enum.AccessibleAutocomplete.html)
pub const AccessibleAutocomplete = enum(u32) {
    none = 0,
    @"inline" = 1,
    list = 2,
    both = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_autocomplete_get_type" });
        return cFn();
    }
};
pub const AccessibleInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_at_context: ?*const fn (_self: *gtk.Accessible) callconv(.c) ?*gtk.ATContext,
    get_platform_state: ?*const fn (_self: *gtk.Accessible, _state: gtk.AccessiblePlatformState) callconv(.c) bool,
    get_accessible_parent: ?*const fn (_self: *gtk.Accessible) callconv(.c) ?*gtk.Accessible,
    get_first_accessible_child: ?*const fn (_self: *gtk.Accessible) callconv(.c) ?*gtk.Accessible,
    get_next_accessible_sibling: ?*const fn (_self: *gtk.Accessible) callconv(.c) ?*gtk.Accessible,
    get_bounds: ?*const fn (_self: *gtk.Accessible, _x: *i32, _y: *i32, _width: *i32, _height: *i32) callconv(.c) bool,
};
/// Enum [AccessibleInvalidState](https://docs.gtk.org/gtk4/enum.AccessibleInvalidState.html)
pub const AccessibleInvalidState = enum(u32) {
    false = 0,
    true = 1,
    grammar = 2,
    spelling = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_invalid_state_get_type" });
        return cFn();
    }
};
/// Struct [AccessibleList](https://docs.gtk.org/gtk4/struct.AccessibleList.html)
pub const AccessibleList = opaque {
    /// ctor [new_from_array](https://docs.gtk.org/gtk4/ctor.AccessibleList.new_from_array.html)
    pub fn newFromArray(_accessibless: []*gtk.Accessible) *AccessibleList {
        const _accessibles = _accessibless.ptr;
        const _n_accessibles: u64 = @intCast(_accessibless.len);
        const cFn = @extern(*const fn ([*]*gtk.Accessible, u64) callconv(.c) *AccessibleList, .{ .name = "gtk_accessible_list_new_from_array" });
        const ret = cFn(_accessibles, _n_accessibles);
        return ret;
    }
    /// ctor [new_from_list](https://docs.gtk.org/gtk4/ctor.AccessibleList.new_from_list.html)
    pub fn newFromList(_list: *core.List) *AccessibleList {
        const cFn = @extern(*const fn (*core.List) callconv(.c) *AccessibleList, .{ .name = "gtk_accessible_list_new_from_list" });
        const ret = cFn(_list);
        return ret;
    }
    /// method [get_objects](https://docs.gtk.org/gtk4/method.AccessibleList.get_objects.html)
    pub fn getObjects(self: *AccessibleList) ?*core.List {
        const cFn = @extern(*const fn (*AccessibleList) callconv(.c) ?*core.List, .{ .name = "gtk_accessible_list_get_objects" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_list_get_type" });
        return cFn();
    }
};
/// Enum [AccessiblePlatformState](https://docs.gtk.org/gtk4/enum.AccessiblePlatformState.html)
pub const AccessiblePlatformState = enum(u32) {
    focusable = 0,
    focused = 1,
    active = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_platform_state_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleProperty](https://docs.gtk.org/gtk4/enum.AccessibleProperty.html)
pub const AccessibleProperty = enum(u32) {
    autocomplete = 0,
    description = 1,
    has_popup = 2,
    key_shortcuts = 3,
    label = 4,
    level = 5,
    modal = 6,
    multi_line = 7,
    multi_selectable = 8,
    orientation = 9,
    placeholder = 10,
    read_only = 11,
    required = 12,
    role_description = 13,
    sort = 14,
    value_max = 15,
    value_min = 16,
    value_now = 17,
    value_text = 18,

    /// type func [init_value](https://docs.gtk.org/gtk4/type_func.AccessibleProperty.init_value.html)
    pub fn initValue(_property: gtk.AccessibleProperty, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (gtk.AccessibleProperty, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_property_init_value" });
        const ret = cFn(_property, _value);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_property_get_type" });
        return cFn();
    }
};
/// Iface [AccessibleRange](https://docs.gtk.org/gtk4/iface.AccessibleRange.html)
pub const AccessibleRange = opaque {
    pub const Prerequisites = [_]type{gtk.Accessible};
    /// vfunc [set_current_value](https://docs.gtk.org/gtk4/vfunc.AccessibleRange.set_current_value.html)
    pub fn setCurrentValueV(self: *AccessibleRange, _value: f64) bool {
        const class: *AccessibleRangeInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_current_value.?;
        const ret = vFn(self, _value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_range_get_type" });
        return cFn();
    }
};
pub const AccessibleRangeInterface = extern struct {
    g_iface: gobject.TypeInterface,
    set_current_value: ?*const fn (_self: *gtk.AccessibleRange, _value: f64) callconv(.c) bool,
};
/// Enum [AccessibleRelation](https://docs.gtk.org/gtk4/enum.AccessibleRelation.html)
pub const AccessibleRelation = enum(u32) {
    active_descendant = 0,
    col_count = 1,
    col_index = 2,
    col_index_text = 3,
    col_span = 4,
    controls = 5,
    described_by = 6,
    details = 7,
    error_message = 8,
    flow_to = 9,
    labelled_by = 10,
    owns = 11,
    pos_in_set = 12,
    row_count = 13,
    row_index = 14,
    row_index_text = 15,
    row_span = 16,
    set_size = 17,

    /// type func [init_value](https://docs.gtk.org/gtk4/type_func.AccessibleRelation.init_value.html)
    pub fn initValue(_relation: gtk.AccessibleRelation, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (gtk.AccessibleRelation, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_relation_init_value" });
        const ret = cFn(_relation, _value);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_relation_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleRole](https://docs.gtk.org/gtk4/enum.AccessibleRole.html)
pub const AccessibleRole = enum(u32) {
    alert = 0,
    alert_dialog = 1,
    banner = 2,
    button = 3,
    caption = 4,
    cell = 5,
    checkbox = 6,
    column_header = 7,
    combo_box = 8,
    command = 9,
    composite = 10,
    dialog = 11,
    document = 12,
    feed = 13,
    form = 14,
    generic = 15,
    grid = 16,
    grid_cell = 17,
    group = 18,
    heading = 19,
    img = 20,
    input = 21,
    label = 22,
    landmark = 23,
    legend = 24,
    link = 25,
    list = 26,
    list_box = 27,
    list_item = 28,
    log = 29,
    main = 30,
    marquee = 31,
    math = 32,
    meter = 33,
    menu = 34,
    menu_bar = 35,
    menu_item = 36,
    menu_item_checkbox = 37,
    menu_item_radio = 38,
    navigation = 39,
    none = 40,
    note = 41,
    option = 42,
    presentation = 43,
    progress_bar = 44,
    radio = 45,
    radio_group = 46,
    range = 47,
    region = 48,
    row = 49,
    row_group = 50,
    row_header = 51,
    scrollbar = 52,
    search = 53,
    search_box = 54,
    section = 55,
    section_head = 56,
    select = 57,
    separator = 58,
    slider = 59,
    spin_button = 60,
    status = 61,
    structure = 62,
    @"switch" = 63,
    tab = 64,
    table = 65,
    tab_list = 66,
    tab_panel = 67,
    text_box = 68,
    time = 69,
    timer = 70,
    toolbar = 71,
    tooltip = 72,
    tree = 73,
    tree_grid = 74,
    tree_item = 75,
    widget = 76,
    window = 77,
    toggle_button = 78,
    application = 79,
    paragraph = 80,
    block_quote = 81,
    article = 82,
    comment = 83,
    terminal = 84,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_role_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleSort](https://docs.gtk.org/gtk4/enum.AccessibleSort.html)
pub const AccessibleSort = enum(u32) {
    none = 0,
    ascending = 1,
    descending = 2,
    other = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_sort_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleState](https://docs.gtk.org/gtk4/enum.AccessibleState.html)
pub const AccessibleState = enum(u32) {
    busy = 0,
    checked = 1,
    disabled = 2,
    expanded = 3,
    hidden = 4,
    invalid = 5,
    pressed = 6,
    selected = 7,
    visited = 8,

    /// type func [init_value](https://docs.gtk.org/gtk4/type_func.AccessibleState.init_value.html)
    pub fn initValue(_state: gtk.AccessibleState, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (gtk.AccessibleState, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_state_init_value" });
        const ret = cFn(_state, _value);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_state_get_type" });
        return cFn();
    }
};
/// Iface [AccessibleText](https://docs.gtk.org/gtk4/iface.AccessibleText.html)
pub const AccessibleText = opaque {
    pub const Prerequisites = [_]type{gtk.Accessible};
    /// method [update_caret_position](https://docs.gtk.org/gtk4/method.AccessibleText.update_caret_position.html)
    pub fn updateCaretPosition(self: *AccessibleText) void {
        const cFn = @extern(*const fn (*AccessibleText) callconv(.c) void, .{ .name = "gtk_accessible_text_update_caret_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [update_contents](https://docs.gtk.org/gtk4/method.AccessibleText.update_contents.html)
    pub fn updateContents(self: *AccessibleText, _change: gtk.AccessibleTextContentChange, _start: u32, _end: u32) void {
        const cFn = @extern(*const fn (*AccessibleText, gtk.AccessibleTextContentChange, u32, u32) callconv(.c) void, .{ .name = "gtk_accessible_text_update_contents" });
        const ret = cFn(self, _change, _start, _end);
        return ret;
    }
    /// method [update_selection_bound](https://docs.gtk.org/gtk4/method.AccessibleText.update_selection_bound.html)
    pub fn updateSelectionBound(self: *AccessibleText) void {
        const cFn = @extern(*const fn (*AccessibleText) callconv(.c) void, .{ .name = "gtk_accessible_text_update_selection_bound" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [get_attributes](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_attributes.html)
    pub fn getAttributesV(self: *AccessibleText, _offset: u32, _n_ranges: *u64, _ranges: ?*[*]gtk.AccessibleTextRange, _attribute_names: ?*[*:null]?[*:0]const u8, _attribute_values: ?*[*:null]?[*:0]const u8) bool {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_attributes.?;
        const ret = vFn(self, _offset, _n_ranges, _ranges, _attribute_names, _attribute_values);
        return ret;
    }
    /// vfunc [get_caret_position](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_caret_position.html)
    pub fn getCaretPositionV(self: *AccessibleText) u32 {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_caret_position.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_contents](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_contents.html)
    pub fn getContentsV(self: *AccessibleText, _start: u32, _end: u32) *glib.Bytes {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_contents.?;
        const ret = vFn(self, _start, _end);
        return ret;
    }
    /// vfunc [get_contents_at](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_contents_at.html)
    pub fn getContentsAtV(self: *AccessibleText, _offset: u32, _granularity: gtk.AccessibleTextGranularity, _start: *u32, _end: *u32) *glib.Bytes {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_contents_at.?;
        const ret = vFn(self, _offset, _granularity, _start, _end);
        return ret;
    }
    /// vfunc [get_default_attributes](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_default_attributes.html)
    pub fn getDefaultAttributesV(self: *AccessibleText, _attribute_names: ?*[*:null]?[*:0]const u8, _attribute_values: ?*[*:null]?[*:0]const u8) void {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_default_attributes.?;
        const ret = vFn(self, _attribute_names, _attribute_values);
        return ret;
    }
    /// vfunc [get_selection](https://docs.gtk.org/gtk4/vfunc.AccessibleText.get_selection.html)
    pub fn getSelectionV(self: *AccessibleText, _n_ranges: *u64, _ranges: ?*[*]gtk.AccessibleTextRange) bool {
        const class: *AccessibleTextInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_selection.?;
        const ret = vFn(self, _n_ranges, _ranges);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_text_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleTextContentChange](https://docs.gtk.org/gtk4/enum.AccessibleTextContentChange.html)
pub const AccessibleTextContentChange = enum(u32) {
    insert = 0,
    remove = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_text_content_change_get_type" });
        return cFn();
    }
};
/// Enum [AccessibleTextGranularity](https://docs.gtk.org/gtk4/enum.AccessibleTextGranularity.html)
pub const AccessibleTextGranularity = enum(u32) {
    character = 0,
    word = 1,
    sentence = 2,
    line = 3,
    paragraph = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_text_granularity_get_type" });
        return cFn();
    }
};
pub const AccessibleTextInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_contents: ?*const fn (_self: *gtk.AccessibleText, _start: u32, _end: u32) callconv(.c) *glib.Bytes,
    get_contents_at: ?*const fn (_self: *gtk.AccessibleText, _offset: u32, _granularity: gtk.AccessibleTextGranularity, _start: *u32, _end: *u32) callconv(.c) *glib.Bytes,
    get_caret_position: ?*const fn (_self: *gtk.AccessibleText) callconv(.c) u32,
    get_selection: ?*const fn (_self: *gtk.AccessibleText, _n_ranges: *u64, _ranges: ?*[*]gtk.AccessibleTextRange) callconv(.c) bool,
    get_attributes: ?*const fn (_self: *gtk.AccessibleText, _offset: u32, _n_ranges: *u64, _ranges: ?*[*]gtk.AccessibleTextRange, _attribute_names: ?*[*:null]?[*:0]const u8, _attribute_values: ?*[*:null]?[*:0]const u8) callconv(.c) bool,
    get_default_attributes: ?*const fn (_self: *gtk.AccessibleText, _attribute_names: ?*[*:null]?[*:0]const u8, _attribute_values: ?*[*:null]?[*:0]const u8) callconv(.c) void,
};
/// Struct [AccessibleTextRange](https://docs.gtk.org/gtk4/struct.AccessibleTextRange.html)
pub const AccessibleTextRange = extern struct {
    start: u64,
    length: u64,
};
/// Enum [AccessibleTristate](https://docs.gtk.org/gtk4/enum.AccessibleTristate.html)
pub const AccessibleTristate = enum(u32) {
    false = 0,
    true = 1,
    mixed = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_accessible_tristate_get_type" });
        return cFn();
    }
};
/// Class [ActionBar](https://docs.gtk.org/gtk4/class.ActionBar.html)
/// - property [revealed](https://docs.gtk.org/gtk4/property.ActionBar.revealed.html): (rw) `bool`
pub const ActionBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ActionBar.new.html)
    pub fn new() *ActionBar {
        const cFn = @extern(*const fn () callconv(.c) *ActionBar, .{ .name = "gtk_action_bar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_center_widget](https://docs.gtk.org/gtk4/method.ActionBar.get_center_widget.html)
    pub fn getCenterWidget(self: *ActionBar) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ActionBar) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_action_bar_get_center_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_revealed](https://docs.gtk.org/gtk4/method.ActionBar.get_revealed.html)
    pub fn getRevealed(self: *ActionBar) bool {
        const cFn = @extern(*const fn (*ActionBar) callconv(.c) bool, .{ .name = "gtk_action_bar_get_revealed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pack_end](https://docs.gtk.org/gtk4/method.ActionBar.pack_end.html)
    pub fn packEnd(self: *ActionBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ActionBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_action_bar_pack_end" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [pack_start](https://docs.gtk.org/gtk4/method.ActionBar.pack_start.html)
    pub fn packStart(self: *ActionBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ActionBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_action_bar_pack_start" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.ActionBar.remove.html)
    pub fn remove(self: *ActionBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ActionBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_action_bar_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_center_widget](https://docs.gtk.org/gtk4/method.ActionBar.set_center_widget.html)
    pub fn setCenterWidget(self: *ActionBar, _center_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ActionBar, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_action_bar_set_center_widget" });
        const ret = cFn(self, _center_widget);
        return ret;
    }
    /// method [set_revealed](https://docs.gtk.org/gtk4/method.ActionBar.set_revealed.html)
    pub fn setRevealed(self: *ActionBar, _revealed: bool) void {
        const cFn = @extern(*const fn (*ActionBar, bool) callconv(.c) void, .{ .name = "gtk_action_bar_set_revealed" });
        const ret = cFn(self, _revealed);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_action_bar_get_type" });
        return cFn();
    }
};
/// Iface [Actionable](https://docs.gtk.org/gtk4/iface.Actionable.html)
/// - property [action-name](https://docs.gtk.org/gtk4/property.Actionable.action-name.html): (rw) `[*:0]const u8`
/// - property [action-target](https://docs.gtk.org/gtk4/property.Actionable.action-target.html): (rw) `glib.Variant`
pub const Actionable = opaque {
    pub const Prerequisites = [_]type{gtk.Widget};
    /// method [get_action_name](https://docs.gtk.org/gtk4/method.Actionable.get_action_name.html)
    pub fn getActionName(self: *Actionable) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Actionable) callconv(.c) ?[*:0]u8, .{ .name = "gtk_actionable_get_action_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_action_target_value](https://docs.gtk.org/gtk4/method.Actionable.get_action_target_value.html)
    pub fn getActionTargetValue(self: *Actionable) ?*glib.Variant {
        const cFn = @extern(*const fn (*Actionable) callconv(.c) ?*glib.Variant, .{ .name = "gtk_actionable_get_action_target_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_action_name](https://docs.gtk.org/gtk4/method.Actionable.set_action_name.html)
    pub fn setActionName(self: *Actionable, _action_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Actionable, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_actionable_set_action_name" });
        const ret = cFn(self, _action_name);
        return ret;
    }
    /// method [set_action_target_value](https://docs.gtk.org/gtk4/method.Actionable.set_action_target_value.html)
    pub fn setActionTargetValue(self: *Actionable, _target_value: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Actionable, ?*glib.Variant) callconv(.c) void, .{ .name = "gtk_actionable_set_action_target_value" });
        const ret = cFn(self, _target_value);
        return ret;
    }
    /// method [set_detailed_action_name](https://docs.gtk.org/gtk4/method.Actionable.set_detailed_action_name.html)
    pub fn setDetailedActionName(self: *Actionable, _detailed_action_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Actionable, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_actionable_set_detailed_action_name" });
        const ret = cFn(self, _detailed_action_name);
        return ret;
    }
    /// vfunc [get_action_name](https://docs.gtk.org/gtk4/vfunc.Actionable.get_action_name.html)
    pub fn getActionNameV(self: *Actionable) ?[*:0]u8 {
        const class: *ActionableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_name.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_action_target_value](https://docs.gtk.org/gtk4/vfunc.Actionable.get_action_target_value.html)
    pub fn getActionTargetValueV(self: *Actionable) ?*glib.Variant {
        const class: *ActionableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_action_target_value.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_action_name](https://docs.gtk.org/gtk4/vfunc.Actionable.set_action_name.html)
    pub fn setActionNameV(self: *Actionable, _action_name: ?[*:0]const u8) void {
        const class: *ActionableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_action_name.?;
        const ret = vFn(self, _action_name);
        return ret;
    }
    /// vfunc [set_action_target_value](https://docs.gtk.org/gtk4/vfunc.Actionable.set_action_target_value.html)
    pub fn setActionTargetValueV(self: *Actionable, _target_value: ?*glib.Variant) void {
        const class: *ActionableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_action_target_value.?;
        const ret = vFn(self, _target_value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_actionable_get_type" });
        return cFn();
    }
};
pub const ActionableInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_action_name: ?*const fn (_actionable: *gtk.Actionable) callconv(.c) ?[*:0]u8,
    set_action_name: ?*const fn (_actionable: *gtk.Actionable, _action_name: ?[*:0]const u8) callconv(.c) void,
    get_action_target_value: ?*const fn (_actionable: *gtk.Actionable) callconv(.c) ?*glib.Variant,
    set_action_target_value: ?*const fn (_actionable: *gtk.Actionable, _target_value: ?*glib.Variant) callconv(.c) void,
};
/// Class [ActivateAction](https://docs.gtk.org/gtk4/class.ActivateAction.html)
pub const ActivateAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.ActivateActionClass;
    /// type func [get](https://docs.gtk.org/gtk4/type_func.ActivateAction.get.html)
    pub fn get() *gtk.ActivateAction {
        const cFn = @extern(*const fn () callconv(.c) *gtk.ActivateAction, .{ .name = "gtk_activate_action_get" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_activate_action_get_type" });
        return cFn();
    }
};
pub const ActivateActionClass = opaque {};
/// Class [Adjustment](https://docs.gtk.org/gtk4/class.Adjustment.html)
/// - property [lower](https://docs.gtk.org/gtk4/property.Adjustment.lower.html): (rw) `f64`
/// - property [page-increment](https://docs.gtk.org/gtk4/property.Adjustment.page-increment.html): (rw) `f64`
/// - property [page-size](https://docs.gtk.org/gtk4/property.Adjustment.page-size.html): (rw) `f64`
/// - property [step-increment](https://docs.gtk.org/gtk4/property.Adjustment.step-increment.html): (rw) `f64`
/// - property [upper](https://docs.gtk.org/gtk4/property.Adjustment.upper.html): (rw) `f64`
/// - property [value](https://docs.gtk.org/gtk4/property.Adjustment.value.html): (rw) `f64`
pub const Adjustment = extern struct {
    parent_instance: gobject.InitiallyUnowned,
    pub const Parent = gobject.InitiallyUnowned;
    pub const Class = gtk.AdjustmentClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Adjustment.new.html)
    pub fn new(_value: f64, _lower: f64, _upper: f64, _step_increment: f64, _page_increment: f64, _page_size: f64) *Adjustment {
        const cFn = @extern(*const fn (f64, f64, f64, f64, f64, f64) callconv(.c) *Adjustment, .{ .name = "gtk_adjustment_new" });
        const ret = cFn(_value, _lower, _upper, _step_increment, _page_increment, _page_size);
        return ret;
    }
    /// method [clamp_page](https://docs.gtk.org/gtk4/method.Adjustment.clamp_page.html)
    pub fn clampPage(self: *Adjustment, _lower: f64, _upper: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64, f64) callconv(.c) void, .{ .name = "gtk_adjustment_clamp_page" });
        const ret = cFn(self, _lower, _upper);
        return ret;
    }
    /// method [configure](https://docs.gtk.org/gtk4/method.Adjustment.configure.html)
    pub fn configure(self: *Adjustment, _value: f64, _lower: f64, _upper: f64, _step_increment: f64, _page_increment: f64, _page_size: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64, f64, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_adjustment_configure" });
        const ret = cFn(self, _value, _lower, _upper, _step_increment, _page_increment, _page_size);
        return ret;
    }
    /// method [get_lower](https://docs.gtk.org/gtk4/method.Adjustment.get_lower.html)
    pub fn getLower(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_lower" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_minimum_increment](https://docs.gtk.org/gtk4/method.Adjustment.get_minimum_increment.html)
    pub fn getMinimumIncrement(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_minimum_increment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_increment](https://docs.gtk.org/gtk4/method.Adjustment.get_page_increment.html)
    pub fn getPageIncrement(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_page_increment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_size](https://docs.gtk.org/gtk4/method.Adjustment.get_page_size.html)
    pub fn getPageSize(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_page_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_step_increment](https://docs.gtk.org/gtk4/method.Adjustment.get_step_increment.html)
    pub fn getStepIncrement(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_step_increment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_upper](https://docs.gtk.org/gtk4/method.Adjustment.get_upper.html)
    pub fn getUpper(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_upper" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.Adjustment.get_value.html)
    pub fn getValue(self: *Adjustment) f64 {
        const cFn = @extern(*const fn (*Adjustment) callconv(.c) f64, .{ .name = "gtk_adjustment_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_lower](https://docs.gtk.org/gtk4/method.Adjustment.set_lower.html)
    pub fn setLower(self: *Adjustment, _lower: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_lower" });
        const ret = cFn(self, _lower);
        return ret;
    }
    /// method [set_page_increment](https://docs.gtk.org/gtk4/method.Adjustment.set_page_increment.html)
    pub fn setPageIncrement(self: *Adjustment, _page_increment: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_page_increment" });
        const ret = cFn(self, _page_increment);
        return ret;
    }
    /// method [set_page_size](https://docs.gtk.org/gtk4/method.Adjustment.set_page_size.html)
    pub fn setPageSize(self: *Adjustment, _page_size: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_page_size" });
        const ret = cFn(self, _page_size);
        return ret;
    }
    /// method [set_step_increment](https://docs.gtk.org/gtk4/method.Adjustment.set_step_increment.html)
    pub fn setStepIncrement(self: *Adjustment, _step_increment: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_step_increment" });
        const ret = cFn(self, _step_increment);
        return ret;
    }
    /// method [set_upper](https://docs.gtk.org/gtk4/method.Adjustment.set_upper.html)
    pub fn setUpper(self: *Adjustment, _upper: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_upper" });
        const ret = cFn(self, _upper);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gtk4/method.Adjustment.set_value.html)
    pub fn setValue(self: *Adjustment, _value: f64) void {
        const cFn = @extern(*const fn (*Adjustment, f64) callconv(.c) void, .{ .name = "gtk_adjustment_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.Adjustment.changed.html)
    pub fn changedV(self: *Adjustment) void {
        const class: *AdjustmentClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [value_changed](https://docs.gtk.org/gtk4/vfunc.Adjustment.value_changed.html)
    pub fn valueChangedV(self: *Adjustment) void {
        const class: *AdjustmentClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.Adjustment.changed.html)
    pub fn connectChanged(self: *Adjustment, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Adjustment });
    }
    /// signal [value-changed](https://docs.gtk.org/gtk4/signal.Adjustment.value-changed.html)
    pub fn connectValueChanged(self: *Adjustment, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("value-changed", handler, args, flags, &.{ void, *Adjustment });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_adjustment_get_type" });
        return cFn();
    }
};
pub const AdjustmentClass = extern struct {
    parent_class: gobject.InitiallyUnownedClass,
    changed: ?*const fn (_adjustment: *gtk.Adjustment) callconv(.c) void,
    value_changed: ?*const fn (_adjustment: *gtk.Adjustment) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
/// Class [AlertDialog](https://docs.gtk.org/gtk4/class.AlertDialog.html)
/// - property [buttons](https://docs.gtk.org/gtk4/property.AlertDialog.buttons.html): (rw) `[*:null]?[*:0]const u8`
/// - property [cancel-button](https://docs.gtk.org/gtk4/property.AlertDialog.cancel-button.html): (rw) `i32`
/// - property [default-button](https://docs.gtk.org/gtk4/property.AlertDialog.default-button.html): (rw) `i32`
/// - property [detail](https://docs.gtk.org/gtk4/property.AlertDialog.detail.html): (rw) `[*:0]const u8`
/// - property [message](https://docs.gtk.org/gtk4/property.AlertDialog.message.html): (rw) `[*:0]const u8`
/// - property [modal](https://docs.gtk.org/gtk4/property.AlertDialog.modal.html): (rw) `bool`
pub const AlertDialog = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.AlertDialogClass;
    /// method [choose](https://docs.gtk.org/gtk4/method.AlertDialog.choose.html)
    pub fn choose(self: *AlertDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*AlertDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_alert_dialog_choose" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_finish](https://docs.gtk.org/gtk4/method.AlertDialog.choose_finish.html)
    pub fn chooseFinish(self: *AlertDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*AlertDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) i32, .{ .name = "gtk_alert_dialog_choose_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_buttons](https://docs.gtk.org/gtk4/method.AlertDialog.get_buttons.html)
    pub fn getButtons(self: *AlertDialog) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gtk_alert_dialog_get_buttons" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cancel_button](https://docs.gtk.org/gtk4/method.AlertDialog.get_cancel_button.html)
    pub fn getCancelButton(self: *AlertDialog) i32 {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) i32, .{ .name = "gtk_alert_dialog_get_cancel_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_button](https://docs.gtk.org/gtk4/method.AlertDialog.get_default_button.html)
    pub fn getDefaultButton(self: *AlertDialog) i32 {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) i32, .{ .name = "gtk_alert_dialog_get_default_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_detail](https://docs.gtk.org/gtk4/method.AlertDialog.get_detail.html)
    pub fn getDetail(self: *AlertDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_alert_dialog_get_detail" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_message](https://docs.gtk.org/gtk4/method.AlertDialog.get_message.html)
    pub fn getMessage(self: *AlertDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_alert_dialog_get_message" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.AlertDialog.get_modal.html)
    pub fn getModal(self: *AlertDialog) bool {
        const cFn = @extern(*const fn (*AlertDialog) callconv(.c) bool, .{ .name = "gtk_alert_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_buttons](https://docs.gtk.org/gtk4/method.AlertDialog.set_buttons.html)
    pub fn setButtons(self: *AlertDialog, _labels: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*AlertDialog, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_buttons" });
        const ret = cFn(self, _labels);
        return ret;
    }
    /// method [set_cancel_button](https://docs.gtk.org/gtk4/method.AlertDialog.set_cancel_button.html)
    pub fn setCancelButton(self: *AlertDialog, _button: i32) void {
        const cFn = @extern(*const fn (*AlertDialog, i32) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_cancel_button" });
        const ret = cFn(self, _button);
        return ret;
    }
    /// method [set_default_button](https://docs.gtk.org/gtk4/method.AlertDialog.set_default_button.html)
    pub fn setDefaultButton(self: *AlertDialog, _button: i32) void {
        const cFn = @extern(*const fn (*AlertDialog, i32) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_default_button" });
        const ret = cFn(self, _button);
        return ret;
    }
    /// method [set_detail](https://docs.gtk.org/gtk4/method.AlertDialog.set_detail.html)
    pub fn setDetail(self: *AlertDialog, _detail: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AlertDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_detail" });
        const ret = cFn(self, _detail);
        return ret;
    }
    /// method [set_message](https://docs.gtk.org/gtk4/method.AlertDialog.set_message.html)
    pub fn setMessage(self: *AlertDialog, _message: [*:0]const u8) void {
        const cFn = @extern(*const fn (*AlertDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_message" });
        const ret = cFn(self, _message);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.AlertDialog.set_modal.html)
    pub fn setModal(self: *AlertDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*AlertDialog, bool) callconv(.c) void, .{ .name = "gtk_alert_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [show](https://docs.gtk.org/gtk4/method.AlertDialog.show.html)
    pub fn show(self: *AlertDialog, _parent: ?*gtk.Window) void {
        const cFn = @extern(*const fn (*AlertDialog, ?*gtk.Window) callconv(.c) void, .{ .name = "gtk_alert_dialog_show" });
        const ret = cFn(self, _parent);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_alert_dialog_get_type" });
        return cFn();
    }
};
pub const AlertDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [Align](https://docs.gtk.org/gtk4/enum.Align.html)
pub const Align = enum(u32) {
    fill = 0,
    start = 1,
    end = 2,
    center = 3,
    baseline_fill = 4,
    baseline_center = 5,
    pub const baseline: @This() = @enumFromInt(4);
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_align_get_type" });
        return cFn();
    }
};
/// Class [AlternativeTrigger](https://docs.gtk.org/gtk4/class.AlternativeTrigger.html)
/// - property [first](https://docs.gtk.org/gtk4/property.AlternativeTrigger.first.html): (r-) `gtk.ShortcutTrigger`
/// - property [second](https://docs.gtk.org/gtk4/property.AlternativeTrigger.second.html): (r-) `gtk.ShortcutTrigger`
pub const AlternativeTrigger = opaque {
    pub const Parent = gtk.ShortcutTrigger;
    pub const Class = gtk.AlternativeTriggerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AlternativeTrigger.new.html)
    pub fn new(_first: *gtk.ShortcutTrigger, _second: *gtk.ShortcutTrigger) *AlternativeTrigger {
        const cFn = @extern(*const fn (*gtk.ShortcutTrigger, *gtk.ShortcutTrigger) callconv(.c) *AlternativeTrigger, .{ .name = "gtk_alternative_trigger_new" });
        const ret = cFn(_first, _second);
        return ret;
    }
    /// method [get_first](https://docs.gtk.org/gtk4/method.AlternativeTrigger.get_first.html)
    pub fn getFirst(self: *AlternativeTrigger) *gtk.ShortcutTrigger {
        const cFn = @extern(*const fn (*AlternativeTrigger) callconv(.c) *gtk.ShortcutTrigger, .{ .name = "gtk_alternative_trigger_get_first" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_second](https://docs.gtk.org/gtk4/method.AlternativeTrigger.get_second.html)
    pub fn getSecond(self: *AlternativeTrigger) *gtk.ShortcutTrigger {
        const cFn = @extern(*const fn (*AlternativeTrigger) callconv(.c) *gtk.ShortcutTrigger, .{ .name = "gtk_alternative_trigger_get_second" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_alternative_trigger_get_type" });
        return cFn();
    }
};
pub const AlternativeTriggerClass = opaque {};
/// Class [AnyFilter](https://docs.gtk.org/gtk4/class.AnyFilter.html)
pub const AnyFilter = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gtk.MultiFilter;
    pub const Class = gtk.AnyFilterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AnyFilter.new.html)
    pub fn new() *AnyFilter {
        const cFn = @extern(*const fn () callconv(.c) *AnyFilter, .{ .name = "gtk_any_filter_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_any_filter_get_type" });
        return cFn();
    }
};
pub const AnyFilterClass = opaque {};
/// Deprecated:
/// Iface [AppChooser](https://docs.gtk.org/gtk4/iface.AppChooser.html)
/// - property [content-type](https://docs.gtk.org/gtk4/property.AppChooser.content-type.html): (r-) `[*:0]const u8`
pub const AppChooser = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Prerequisites = [_]type{gtk.Widget};
    /// Deprecated:
    /// method [get_app_info](https://docs.gtk.org/gtk4/method.AppChooser.get_app_info.html)
    pub const getAppInfo = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAppInfo(self: *AppChooser) ?*gio.AppInfo {
            const cFn = @extern(*const fn (*AppChooser) callconv(.c) ?*gio.AppInfo, .{ .name = "gtk_app_chooser_get_app_info" });
            const ret = cFn(self);
            return ret;
        }
    }.getAppInfo;
    /// Deprecated:
    /// method [get_content_type](https://docs.gtk.org/gtk4/method.AppChooser.get_content_type.html)
    pub const getContentType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getContentType(self: *AppChooser) [*:0]u8 {
            const cFn = @extern(*const fn (*AppChooser) callconv(.c) [*:0]u8, .{ .name = "gtk_app_chooser_get_content_type" });
            const ret = cFn(self);
            return ret;
        }
    }.getContentType;
    /// Deprecated:
    /// method [refresh](https://docs.gtk.org/gtk4/method.AppChooser.refresh.html)
    pub const refresh = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn refresh(self: *AppChooser) void {
            const cFn = @extern(*const fn (*AppChooser) callconv(.c) void, .{ .name = "gtk_app_chooser_refresh" });
            const ret = cFn(self);
            return ret;
        }
    }.refresh;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_app_chooser_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [AppChooserButton](https://docs.gtk.org/gtk4/class.AppChooserButton.html)
/// - property [heading](https://docs.gtk.org/gtk4/property.AppChooserButton.heading.html): (rw) `[*:0]const u8`
/// - property [modal](https://docs.gtk.org/gtk4/property.AppChooserButton.modal.html): (rw) `bool`
/// - property [show-default-item](https://docs.gtk.org/gtk4/property.AppChooserButton.show-default-item.html): (rw) `bool`
/// - property [show-dialog-item](https://docs.gtk.org/gtk4/property.AppChooserButton.show-dialog-item.html): (rw) `bool`
pub const AppChooserButton = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AppChooser, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AppChooserButton.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_content_type: [*:0]const u8) *AppChooserButton {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *AppChooserButton, .{ .name = "gtk_app_chooser_button_new" });
            const ret = cFn(_content_type);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [append_custom_item](https://docs.gtk.org/gtk4/method.AppChooserButton.append_custom_item.html)
    pub const appendCustomItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendCustomItem(self: *AppChooserButton, _name: [*:0]const u8, _label: [*:0]const u8, _icon: *gio.Icon) void {
            const cFn = @extern(*const fn (*AppChooserButton, [*:0]const u8, [*:0]const u8, *gio.Icon) callconv(.c) void, .{ .name = "gtk_app_chooser_button_append_custom_item" });
            const ret = cFn(self, _name, _label, _icon);
            return ret;
        }
    }.appendCustomItem;
    /// Deprecated:
    /// method [append_separator](https://docs.gtk.org/gtk4/method.AppChooserButton.append_separator.html)
    pub const appendSeparator = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendSeparator(self: *AppChooserButton) void {
            const cFn = @extern(*const fn (*AppChooserButton) callconv(.c) void, .{ .name = "gtk_app_chooser_button_append_separator" });
            const ret = cFn(self);
            return ret;
        }
    }.appendSeparator;
    /// Deprecated:
    /// method [get_heading](https://docs.gtk.org/gtk4/method.AppChooserButton.get_heading.html)
    pub const getHeading = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHeading(self: *AppChooserButton) ?[*:0]u8 {
            const cFn = @extern(*const fn (*AppChooserButton) callconv(.c) ?[*:0]u8, .{ .name = "gtk_app_chooser_button_get_heading" });
            const ret = cFn(self);
            return ret;
        }
    }.getHeading;
    /// Deprecated:
    /// method [get_modal](https://docs.gtk.org/gtk4/method.AppChooserButton.get_modal.html)
    pub const getModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModal(self: *AppChooserButton) bool {
            const cFn = @extern(*const fn (*AppChooserButton) callconv(.c) bool, .{ .name = "gtk_app_chooser_button_get_modal" });
            const ret = cFn(self);
            return ret;
        }
    }.getModal;
    /// Deprecated:
    /// method [get_show_default_item](https://docs.gtk.org/gtk4/method.AppChooserButton.get_show_default_item.html)
    pub const getShowDefaultItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowDefaultItem(self: *AppChooserButton) bool {
            const cFn = @extern(*const fn (*AppChooserButton) callconv(.c) bool, .{ .name = "gtk_app_chooser_button_get_show_default_item" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowDefaultItem;
    /// Deprecated:
    /// method [get_show_dialog_item](https://docs.gtk.org/gtk4/method.AppChooserButton.get_show_dialog_item.html)
    pub const getShowDialogItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowDialogItem(self: *AppChooserButton) bool {
            const cFn = @extern(*const fn (*AppChooserButton) callconv(.c) bool, .{ .name = "gtk_app_chooser_button_get_show_dialog_item" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowDialogItem;
    /// Deprecated:
    /// method [set_active_custom_item](https://docs.gtk.org/gtk4/method.AppChooserButton.set_active_custom_item.html)
    pub const setActiveCustomItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActiveCustomItem(self: *AppChooserButton, _name: [*:0]const u8) void {
            const cFn = @extern(*const fn (*AppChooserButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_app_chooser_button_set_active_custom_item" });
            const ret = cFn(self, _name);
            return ret;
        }
    }.setActiveCustomItem;
    /// Deprecated:
    /// method [set_heading](https://docs.gtk.org/gtk4/method.AppChooserButton.set_heading.html)
    pub const setHeading = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHeading(self: *AppChooserButton, _heading: [*:0]const u8) void {
            const cFn = @extern(*const fn (*AppChooserButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_app_chooser_button_set_heading" });
            const ret = cFn(self, _heading);
            return ret;
        }
    }.setHeading;
    /// Deprecated:
    /// method [set_modal](https://docs.gtk.org/gtk4/method.AppChooserButton.set_modal.html)
    pub const setModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModal(self: *AppChooserButton, _modal: bool) void {
            const cFn = @extern(*const fn (*AppChooserButton, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_button_set_modal" });
            const ret = cFn(self, _modal);
            return ret;
        }
    }.setModal;
    /// Deprecated:
    /// method [set_show_default_item](https://docs.gtk.org/gtk4/method.AppChooserButton.set_show_default_item.html)
    pub const setShowDefaultItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowDefaultItem(self: *AppChooserButton, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserButton, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_button_set_show_default_item" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowDefaultItem;
    /// Deprecated:
    /// method [set_show_dialog_item](https://docs.gtk.org/gtk4/method.AppChooserButton.set_show_dialog_item.html)
    pub const setShowDialogItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowDialogItem(self: *AppChooserButton, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserButton, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_button_set_show_dialog_item" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowDialogItem;
    /// signal [activate](https://docs.gtk.org/gtk4/signal.AppChooserButton.activate.html)
    pub fn connectActivate(self: *AppChooserButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *AppChooserButton });
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.AppChooserButton.changed.html)
    pub fn connectChanged(self: *AppChooserButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *AppChooserButton });
    }
    /// signal [custom-item-activated](https://docs.gtk.org/gtk4/signal.AppChooserButton.custom-item-activated.html)
    pub fn connectCustomItemActivated(self: *AppChooserButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("custom-item-activated", handler, args, flags, &.{ void, *AppChooserButton, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_app_chooser_button_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [AppChooserDialog](https://docs.gtk.org/gtk4/class.AppChooserDialog.html)
/// - property [gfile](https://docs.gtk.org/gtk4/property.AppChooserDialog.gfile.html): (r-) `gio.File`
/// - property [heading](https://docs.gtk.org/gtk4/property.AppChooserDialog.heading.html): (rw) `[*:0]const u8`
pub const AppChooserDialog = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AppChooser, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AppChooserDialog.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_parent: ?*gtk.Window, _flags: gtk.DialogFlags, _file: *gio.File) *AppChooserDialog {
            const cFn = @extern(*const fn (?*gtk.Window, gtk.DialogFlags, *gio.File) callconv(.c) *AppChooserDialog, .{ .name = "gtk_app_chooser_dialog_new" });
            const ret = cFn(_parent, _flags, _file);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_for_content_type](https://docs.gtk.org/gtk4/ctor.AppChooserDialog.new_for_content_type.html)
    pub const newForContentType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newForContentType(_parent: ?*gtk.Window, _flags: gtk.DialogFlags, _content_type: [*:0]const u8) *AppChooserDialog {
            const cFn = @extern(*const fn (?*gtk.Window, gtk.DialogFlags, [*:0]const u8) callconv(.c) *AppChooserDialog, .{ .name = "gtk_app_chooser_dialog_new_for_content_type" });
            const ret = cFn(_parent, _flags, _content_type);
            return ret;
        }
    }.newForContentType;
    /// Deprecated:
    /// method [get_heading](https://docs.gtk.org/gtk4/method.AppChooserDialog.get_heading.html)
    pub const getHeading = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHeading(self: *AppChooserDialog) ?[*:0]u8 {
            const cFn = @extern(*const fn (*AppChooserDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_app_chooser_dialog_get_heading" });
            const ret = cFn(self);
            return ret;
        }
    }.getHeading;
    /// Deprecated:
    /// method [get_widget](https://docs.gtk.org/gtk4/method.AppChooserDialog.get_widget.html)
    pub const getWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getWidget(self: *AppChooserDialog) *gtk.Widget {
            const cFn = @extern(*const fn (*AppChooserDialog) callconv(.c) *gtk.Widget, .{ .name = "gtk_app_chooser_dialog_get_widget" });
            const ret = cFn(self);
            return ret;
        }
    }.getWidget;
    /// Deprecated:
    /// method [set_heading](https://docs.gtk.org/gtk4/method.AppChooserDialog.set_heading.html)
    pub const setHeading = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHeading(self: *AppChooserDialog, _heading: [*:0]const u8) void {
            const cFn = @extern(*const fn (*AppChooserDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_app_chooser_dialog_set_heading" });
            const ret = cFn(self, _heading);
            return ret;
        }
    }.setHeading;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_app_chooser_dialog_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [AppChooserWidget](https://docs.gtk.org/gtk4/class.AppChooserWidget.html)
/// - property [default-text](https://docs.gtk.org/gtk4/property.AppChooserWidget.default-text.html): (rw) `[*:0]const u8`
/// - property [show-all](https://docs.gtk.org/gtk4/property.AppChooserWidget.show-all.html): (rw) `bool`
/// - property [show-default](https://docs.gtk.org/gtk4/property.AppChooserWidget.show-default.html): (rw) `bool`
/// - property [show-fallback](https://docs.gtk.org/gtk4/property.AppChooserWidget.show-fallback.html): (rw) `bool`
/// - property [show-other](https://docs.gtk.org/gtk4/property.AppChooserWidget.show-other.html): (rw) `bool`
/// - property [show-recommended](https://docs.gtk.org/gtk4/property.AppChooserWidget.show-recommended.html): (rw) `bool`
pub const AppChooserWidget = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AppChooser, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AppChooserWidget.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_content_type: [*:0]const u8) *AppChooserWidget {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *AppChooserWidget, .{ .name = "gtk_app_chooser_widget_new" });
            const ret = cFn(_content_type);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_default_text](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_default_text.html)
    pub const getDefaultText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDefaultText(self: *AppChooserWidget) ?[*:0]u8 {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) ?[*:0]u8, .{ .name = "gtk_app_chooser_widget_get_default_text" });
            const ret = cFn(self);
            return ret;
        }
    }.getDefaultText;
    /// Deprecated:
    /// method [get_show_all](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_show_all.html)
    pub const getShowAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowAll(self: *AppChooserWidget) bool {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) bool, .{ .name = "gtk_app_chooser_widget_get_show_all" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowAll;
    /// Deprecated:
    /// method [get_show_default](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_show_default.html)
    pub const getShowDefault = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowDefault(self: *AppChooserWidget) bool {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) bool, .{ .name = "gtk_app_chooser_widget_get_show_default" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowDefault;
    /// Deprecated:
    /// method [get_show_fallback](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_show_fallback.html)
    pub const getShowFallback = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowFallback(self: *AppChooserWidget) bool {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) bool, .{ .name = "gtk_app_chooser_widget_get_show_fallback" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowFallback;
    /// Deprecated:
    /// method [get_show_other](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_show_other.html)
    pub const getShowOther = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowOther(self: *AppChooserWidget) bool {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) bool, .{ .name = "gtk_app_chooser_widget_get_show_other" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowOther;
    /// Deprecated:
    /// method [get_show_recommended](https://docs.gtk.org/gtk4/method.AppChooserWidget.get_show_recommended.html)
    pub const getShowRecommended = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowRecommended(self: *AppChooserWidget) bool {
            const cFn = @extern(*const fn (*AppChooserWidget) callconv(.c) bool, .{ .name = "gtk_app_chooser_widget_get_show_recommended" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowRecommended;
    /// Deprecated:
    /// method [set_default_text](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_default_text.html)
    pub const setDefaultText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDefaultText(self: *AppChooserWidget, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*AppChooserWidget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_default_text" });
            const ret = cFn(self, _text);
            return ret;
        }
    }.setDefaultText;
    /// Deprecated:
    /// method [set_show_all](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_show_all.html)
    pub const setShowAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowAll(self: *AppChooserWidget, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserWidget, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_show_all" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowAll;
    /// Deprecated:
    /// method [set_show_default](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_show_default.html)
    pub const setShowDefault = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowDefault(self: *AppChooserWidget, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserWidget, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_show_default" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowDefault;
    /// Deprecated:
    /// method [set_show_fallback](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_show_fallback.html)
    pub const setShowFallback = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowFallback(self: *AppChooserWidget, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserWidget, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_show_fallback" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowFallback;
    /// Deprecated:
    /// method [set_show_other](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_show_other.html)
    pub const setShowOther = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowOther(self: *AppChooserWidget, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserWidget, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_show_other" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowOther;
    /// Deprecated:
    /// method [set_show_recommended](https://docs.gtk.org/gtk4/method.AppChooserWidget.set_show_recommended.html)
    pub const setShowRecommended = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowRecommended(self: *AppChooserWidget, _setting: bool) void {
            const cFn = @extern(*const fn (*AppChooserWidget, bool) callconv(.c) void, .{ .name = "gtk_app_chooser_widget_set_show_recommended" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowRecommended;
    /// signal [application-activated](https://docs.gtk.org/gtk4/signal.AppChooserWidget.application-activated.html)
    pub fn connectApplicationActivated(self: *AppChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("application-activated", handler, args, flags, &.{ void, *AppChooserWidget, *gio.AppInfo });
    }
    /// signal [application-selected](https://docs.gtk.org/gtk4/signal.AppChooserWidget.application-selected.html)
    pub fn connectApplicationSelected(self: *AppChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("application-selected", handler, args, flags, &.{ void, *AppChooserWidget, *gio.AppInfo });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_app_chooser_widget_get_type" });
        return cFn();
    }
};
/// Class [Application](https://docs.gtk.org/gtk4/class.Application.html)
/// - property [active-window](https://docs.gtk.org/gtk4/property.Application.active-window.html): (r-) `gtk.Window`
/// - property [menubar](https://docs.gtk.org/gtk4/property.Application.menubar.html): (rw) `gio.MenuModel`
/// - property [register-session](https://docs.gtk.org/gtk4/property.Application.register-session.html): (rw) `bool`
/// - property [screensaver-active](https://docs.gtk.org/gtk4/property.Application.screensaver-active.html): (r-) `bool`
pub const Application = extern struct {
    parent_instance: gio.Application,
    pub const Interfaces = [_]type{ gio.ActionGroup, gio.ActionMap };
    pub const Parent = gio.Application;
    pub const Class = gtk.ApplicationClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Application.new.html)
    pub fn new(_application_id: ?[*:0]const u8, _flags: gio.ApplicationFlags) *Application {
        const cFn = @extern(*const fn (?[*:0]const u8, gio.ApplicationFlags) callconv(.c) *Application, .{ .name = "gtk_application_new" });
        const ret = cFn(_application_id, _flags);
        return ret;
    }
    /// method [add_window](https://docs.gtk.org/gtk4/method.Application.add_window.html)
    pub fn addWindow(self: *Application, _window: *gtk.Window) void {
        const cFn = @extern(*const fn (*Application, *gtk.Window) callconv(.c) void, .{ .name = "gtk_application_add_window" });
        const ret = cFn(self, _window);
        return ret;
    }
    /// method [get_accels_for_action](https://docs.gtk.org/gtk4/method.Application.get_accels_for_action.html)
    pub fn getAccelsForAction(self: *Application, _detailed_action_name: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Application, [*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_application_get_accels_for_action" });
        const ret = cFn(self, _detailed_action_name);
        return ret;
    }
    /// method [get_actions_for_accel](https://docs.gtk.org/gtk4/method.Application.get_actions_for_accel.html)
    pub fn getActionsForAccel(self: *Application, _accel: [*:0]const u8) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Application, [*:0]const u8) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_application_get_actions_for_accel" });
        const ret = cFn(self, _accel);
        return ret;
    }
    /// method [get_active_window](https://docs.gtk.org/gtk4/method.Application.get_active_window.html)
    pub fn getActiveWindow(self: *Application) ?*gtk.Window {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?*gtk.Window, .{ .name = "gtk_application_get_active_window" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_menu_by_id](https://docs.gtk.org/gtk4/method.Application.get_menu_by_id.html)
    pub fn getMenuById(self: *Application, _id: [*:0]const u8) ?*gio.Menu {
        const cFn = @extern(*const fn (*Application, [*:0]const u8) callconv(.c) ?*gio.Menu, .{ .name = "gtk_application_get_menu_by_id" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// method [get_menubar](https://docs.gtk.org/gtk4/method.Application.get_menubar.html)
    pub fn getMenubar(self: *Application) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_application_get_menubar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_window_by_id](https://docs.gtk.org/gtk4/method.Application.get_window_by_id.html)
    pub fn getWindowById(self: *Application, _id: u32) ?*gtk.Window {
        const cFn = @extern(*const fn (*Application, u32) callconv(.c) ?*gtk.Window, .{ .name = "gtk_application_get_window_by_id" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// method [get_windows](https://docs.gtk.org/gtk4/method.Application.get_windows.html)
    pub fn getWindows(self: *Application) ?*core.List {
        const cFn = @extern(*const fn (*Application) callconv(.c) ?*core.List, .{ .name = "gtk_application_get_windows" });
        const ret = cFn(self);
        return ret;
    }
    /// method [inhibit](https://docs.gtk.org/gtk4/method.Application.inhibit.html)
    pub fn inhibit(self: *Application, _window: ?*gtk.Window, _flags: gtk.ApplicationInhibitFlags, _reason: ?[*:0]const u8) u32 {
        const cFn = @extern(*const fn (*Application, ?*gtk.Window, gtk.ApplicationInhibitFlags, ?[*:0]const u8) callconv(.c) u32, .{ .name = "gtk_application_inhibit" });
        const ret = cFn(self, _window, _flags, _reason);
        return ret;
    }
    /// method [list_action_descriptions](https://docs.gtk.org/gtk4/method.Application.list_action_descriptions.html)
    pub fn listActionDescriptions(self: *Application) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Application) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_application_list_action_descriptions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_window](https://docs.gtk.org/gtk4/method.Application.remove_window.html)
    pub fn removeWindow(self: *Application, _window: *gtk.Window) void {
        const cFn = @extern(*const fn (*Application, *gtk.Window) callconv(.c) void, .{ .name = "gtk_application_remove_window" });
        const ret = cFn(self, _window);
        return ret;
    }
    /// method [set_accels_for_action](https://docs.gtk.org/gtk4/method.Application.set_accels_for_action.html)
    pub fn setAccelsForAction(self: *Application, _detailed_action_name: [*:0]const u8, _accels: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Application, [*:0]const u8, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_application_set_accels_for_action" });
        const ret = cFn(self, _detailed_action_name, _accels);
        return ret;
    }
    /// method [set_menubar](https://docs.gtk.org/gtk4/method.Application.set_menubar.html)
    pub fn setMenubar(self: *Application, _menubar: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*Application, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_application_set_menubar" });
        const ret = cFn(self, _menubar);
        return ret;
    }
    /// method [uninhibit](https://docs.gtk.org/gtk4/method.Application.uninhibit.html)
    pub fn uninhibit(self: *Application, _cookie: u32) void {
        const cFn = @extern(*const fn (*Application, u32) callconv(.c) void, .{ .name = "gtk_application_uninhibit" });
        const ret = cFn(self, _cookie);
        return ret;
    }
    /// vfunc [window_added](https://docs.gtk.org/gtk4/vfunc.Application.window_added.html)
    pub fn windowAddedV(self: *Application, _window: *gtk.Window) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.window_added.?;
        const ret = vFn(self, _window);
        return ret;
    }
    /// vfunc [window_removed](https://docs.gtk.org/gtk4/vfunc.Application.window_removed.html)
    pub fn windowRemovedV(self: *Application, _window: *gtk.Window) void {
        const class: *ApplicationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.window_removed.?;
        const ret = vFn(self, _window);
        return ret;
    }
    /// signal [query-end](https://docs.gtk.org/gtk4/signal.Application.query-end.html)
    pub fn connectQueryEnd(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("query-end", handler, args, flags, &.{ void, *Application });
    }
    /// signal [window-added](https://docs.gtk.org/gtk4/signal.Application.window-added.html)
    pub fn connectWindowAdded(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("window-added", handler, args, flags, &.{ void, *Application, *gtk.Window });
    }
    /// signal [window-removed](https://docs.gtk.org/gtk4/signal.Application.window-removed.html)
    pub fn connectWindowRemoved(self: *Application, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("window-removed", handler, args, flags, &.{ void, *Application, *gtk.Window });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_application_get_type" });
        return cFn();
    }
};
pub const ApplicationClass = extern struct {
    parent_class: gio.ApplicationClass,
    window_added: ?*const fn (_application: *gtk.Application, _window: *gtk.Window) callconv(.c) void,
    window_removed: ?*const fn (_application: *gtk.Application, _window: *gtk.Window) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Flags [ApplicationInhibitFlags](https://docs.gtk.org/gtk4/flags.ApplicationInhibitFlags.html)
pub const ApplicationInhibitFlags = packed struct(u32) {
    logout: bool = false,
    @"switch": bool = false,
    @"suspend": bool = false,
    idle: bool = false,
    _: u28 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_application_inhibit_flags_get_type" });
        return cFn();
    }
};
/// Class [ApplicationWindow](https://docs.gtk.org/gtk4/class.ApplicationWindow.html)
/// - property [show-menubar](https://docs.gtk.org/gtk4/property.ApplicationWindow.show-menubar.html): (rw) `bool`
pub const ApplicationWindow = extern struct {
    parent_instance: gtk.Window,
    pub const Interfaces = [_]type{ gio.ActionGroup, gio.ActionMap, gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Window;
    pub const Class = gtk.ApplicationWindowClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ApplicationWindow.new.html)
    pub fn new(_application: *gtk.Application) *ApplicationWindow {
        const cFn = @extern(*const fn (*gtk.Application) callconv(.c) *ApplicationWindow, .{ .name = "gtk_application_window_new" });
        const ret = cFn(_application);
        return ret;
    }
    /// method [get_help_overlay](https://docs.gtk.org/gtk4/method.ApplicationWindow.get_help_overlay.html)
    pub fn getHelpOverlay(self: *ApplicationWindow) ?*gtk.ShortcutsWindow {
        const cFn = @extern(*const fn (*ApplicationWindow) callconv(.c) ?*gtk.ShortcutsWindow, .{ .name = "gtk_application_window_get_help_overlay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_id](https://docs.gtk.org/gtk4/method.ApplicationWindow.get_id.html)
    pub fn getId(self: *ApplicationWindow) u32 {
        const cFn = @extern(*const fn (*ApplicationWindow) callconv(.c) u32, .{ .name = "gtk_application_window_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_menubar](https://docs.gtk.org/gtk4/method.ApplicationWindow.get_show_menubar.html)
    pub fn getShowMenubar(self: *ApplicationWindow) bool {
        const cFn = @extern(*const fn (*ApplicationWindow) callconv(.c) bool, .{ .name = "gtk_application_window_get_show_menubar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_help_overlay](https://docs.gtk.org/gtk4/method.ApplicationWindow.set_help_overlay.html)
    pub fn setHelpOverlay(self: *ApplicationWindow, _help_overlay: ?*gtk.ShortcutsWindow) void {
        const cFn = @extern(*const fn (*ApplicationWindow, ?*gtk.ShortcutsWindow) callconv(.c) void, .{ .name = "gtk_application_window_set_help_overlay" });
        const ret = cFn(self, _help_overlay);
        return ret;
    }
    /// method [set_show_menubar](https://docs.gtk.org/gtk4/method.ApplicationWindow.set_show_menubar.html)
    pub fn setShowMenubar(self: *ApplicationWindow, _show_menubar: bool) void {
        const cFn = @extern(*const fn (*ApplicationWindow, bool) callconv(.c) void, .{ .name = "gtk_application_window_set_show_menubar" });
        const ret = cFn(self, _show_menubar);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_application_window_get_type" });
        return cFn();
    }
};
pub const ApplicationWindowClass = extern struct {
    parent_class: gtk.WindowClass,
    padding: [8]?*anyopaque,
};
/// Enum [ArrowType](https://docs.gtk.org/gtk4/enum.ArrowType.html)
pub const ArrowType = enum(u32) {
    up = 0,
    down = 1,
    left = 2,
    right = 3,
    none = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_arrow_type_get_type" });
        return cFn();
    }
};
/// Class [AspectFrame](https://docs.gtk.org/gtk4/class.AspectFrame.html)
/// - property [child](https://docs.gtk.org/gtk4/property.AspectFrame.child.html): (rw) `gtk.Widget`
/// - property [obey-child](https://docs.gtk.org/gtk4/property.AspectFrame.obey-child.html): (rw) `bool`
/// - property [ratio](https://docs.gtk.org/gtk4/property.AspectFrame.ratio.html): (rw) `f32`
/// - property [xalign](https://docs.gtk.org/gtk4/property.AspectFrame.xalign.html): (rw) `f32`
/// - property [yalign](https://docs.gtk.org/gtk4/property.AspectFrame.yalign.html): (rw) `f32`
pub const AspectFrame = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.AspectFrame.new.html)
    pub fn new(_xalign: f32, _yalign: f32, _ratio: f32, _obey_child: bool) *AspectFrame {
        const cFn = @extern(*const fn (f32, f32, f32, bool) callconv(.c) *AspectFrame, .{ .name = "gtk_aspect_frame_new" });
        const ret = cFn(_xalign, _yalign, _ratio, _obey_child);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.AspectFrame.get_child.html)
    pub fn getChild(self: *AspectFrame) ?*gtk.Widget {
        const cFn = @extern(*const fn (*AspectFrame) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_aspect_frame_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_obey_child](https://docs.gtk.org/gtk4/method.AspectFrame.get_obey_child.html)
    pub fn getObeyChild(self: *AspectFrame) bool {
        const cFn = @extern(*const fn (*AspectFrame) callconv(.c) bool, .{ .name = "gtk_aspect_frame_get_obey_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ratio](https://docs.gtk.org/gtk4/method.AspectFrame.get_ratio.html)
    pub fn getRatio(self: *AspectFrame) f32 {
        const cFn = @extern(*const fn (*AspectFrame) callconv(.c) f32, .{ .name = "gtk_aspect_frame_get_ratio" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_xalign](https://docs.gtk.org/gtk4/method.AspectFrame.get_xalign.html)
    pub fn getXalign(self: *AspectFrame) f32 {
        const cFn = @extern(*const fn (*AspectFrame) callconv(.c) f32, .{ .name = "gtk_aspect_frame_get_xalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_yalign](https://docs.gtk.org/gtk4/method.AspectFrame.get_yalign.html)
    pub fn getYalign(self: *AspectFrame) f32 {
        const cFn = @extern(*const fn (*AspectFrame) callconv(.c) f32, .{ .name = "gtk_aspect_frame_get_yalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.AspectFrame.set_child.html)
    pub fn setChild(self: *AspectFrame, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*AspectFrame, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_aspect_frame_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_obey_child](https://docs.gtk.org/gtk4/method.AspectFrame.set_obey_child.html)
    pub fn setObeyChild(self: *AspectFrame, _obey_child: bool) void {
        const cFn = @extern(*const fn (*AspectFrame, bool) callconv(.c) void, .{ .name = "gtk_aspect_frame_set_obey_child" });
        const ret = cFn(self, _obey_child);
        return ret;
    }
    /// method [set_ratio](https://docs.gtk.org/gtk4/method.AspectFrame.set_ratio.html)
    pub fn setRatio(self: *AspectFrame, _ratio: f32) void {
        const cFn = @extern(*const fn (*AspectFrame, f32) callconv(.c) void, .{ .name = "gtk_aspect_frame_set_ratio" });
        const ret = cFn(self, _ratio);
        return ret;
    }
    /// method [set_xalign](https://docs.gtk.org/gtk4/method.AspectFrame.set_xalign.html)
    pub fn setXalign(self: *AspectFrame, _xalign: f32) void {
        const cFn = @extern(*const fn (*AspectFrame, f32) callconv(.c) void, .{ .name = "gtk_aspect_frame_set_xalign" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_yalign](https://docs.gtk.org/gtk4/method.AspectFrame.set_yalign.html)
    pub fn setYalign(self: *AspectFrame, _yalign: f32) void {
        const cFn = @extern(*const fn (*AspectFrame, f32) callconv(.c) void, .{ .name = "gtk_aspect_frame_set_yalign" });
        const ret = cFn(self, _yalign);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_aspect_frame_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [Assistant](https://docs.gtk.org/gtk4/class.Assistant.html)
/// - property [pages](https://docs.gtk.org/gtk4/property.Assistant.pages.html): (r-) `gio.ListModel`
/// - property [use-header-bar](https://docs.gtk.org/gtk4/property.Assistant.use-header-bar.html): (r-) `i32`
pub const Assistant = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Window;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Assistant.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *Assistant {
            const cFn = @extern(*const fn () callconv(.c) *Assistant, .{ .name = "gtk_assistant_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [add_action_widget](https://docs.gtk.org/gtk4/method.Assistant.add_action_widget.html)
    pub const addActionWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addActionWidget(self: *Assistant, _child: *gtk.Widget) void {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_assistant_add_action_widget" });
            const ret = cFn(self, _child);
            return ret;
        }
    }.addActionWidget;
    /// Deprecated:
    /// method [append_page](https://docs.gtk.org/gtk4/method.Assistant.append_page.html)
    pub const appendPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendPage(self: *Assistant, _page: *gtk.Widget) i32 {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) i32, .{ .name = "gtk_assistant_append_page" });
            const ret = cFn(self, _page);
            return ret;
        }
    }.appendPage;
    /// Deprecated:
    /// method [commit](https://docs.gtk.org/gtk4/method.Assistant.commit.html)
    pub const commit = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn commit(self: *Assistant) void {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) void, .{ .name = "gtk_assistant_commit" });
            const ret = cFn(self);
            return ret;
        }
    }.commit;
    /// Deprecated:
    /// method [get_current_page](https://docs.gtk.org/gtk4/method.Assistant.get_current_page.html)
    pub const getCurrentPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCurrentPage(self: *Assistant) i32 {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) i32, .{ .name = "gtk_assistant_get_current_page" });
            const ret = cFn(self);
            return ret;
        }
    }.getCurrentPage;
    /// Deprecated:
    /// method [get_n_pages](https://docs.gtk.org/gtk4/method.Assistant.get_n_pages.html)
    pub const getNPages = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getNPages(self: *Assistant) i32 {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) i32, .{ .name = "gtk_assistant_get_n_pages" });
            const ret = cFn(self);
            return ret;
        }
    }.getNPages;
    /// Deprecated:
    /// method [get_nth_page](https://docs.gtk.org/gtk4/method.Assistant.get_nth_page.html)
    pub const getNthPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getNthPage(self: *Assistant, _page_num: i32) ?*gtk.Widget {
            const cFn = @extern(*const fn (*Assistant, i32) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_assistant_get_nth_page" });
            const ret = cFn(self, _page_num);
            return ret;
        }
    }.getNthPage;
    /// Deprecated:
    /// method [get_page](https://docs.gtk.org/gtk4/method.Assistant.get_page.html)
    pub const getPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPage(self: *Assistant, _child: *gtk.Widget) *gtk.AssistantPage {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) *gtk.AssistantPage, .{ .name = "gtk_assistant_get_page" });
            const ret = cFn(self, _child);
            return ret;
        }
    }.getPage;
    /// Deprecated:
    /// method [get_page_complete](https://docs.gtk.org/gtk4/method.Assistant.get_page_complete.html)
    pub const getPageComplete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPageComplete(self: *Assistant, _page: *gtk.Widget) bool {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_assistant_get_page_complete" });
            const ret = cFn(self, _page);
            return ret;
        }
    }.getPageComplete;
    /// Deprecated:
    /// method [get_page_title](https://docs.gtk.org/gtk4/method.Assistant.get_page_title.html)
    pub const getPageTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPageTitle(self: *Assistant, _page: *gtk.Widget) [*:0]u8 {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) [*:0]u8, .{ .name = "gtk_assistant_get_page_title" });
            const ret = cFn(self, _page);
            return ret;
        }
    }.getPageTitle;
    /// Deprecated:
    /// method [get_page_type](https://docs.gtk.org/gtk4/method.Assistant.get_page_type.html)
    pub const getPageType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPageType(self: *Assistant, _page: *gtk.Widget) gtk.AssistantPageType {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) gtk.AssistantPageType, .{ .name = "gtk_assistant_get_page_type" });
            const ret = cFn(self, _page);
            return ret;
        }
    }.getPageType;
    /// Deprecated:
    /// method [get_pages](https://docs.gtk.org/gtk4/method.Assistant.get_pages.html)
    pub const getPages = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPages(self: *Assistant) *gio.ListModel {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) *gio.ListModel, .{ .name = "gtk_assistant_get_pages" });
            const ret = cFn(self);
            return ret;
        }
    }.getPages;
    /// Deprecated:
    /// method [insert_page](https://docs.gtk.org/gtk4/method.Assistant.insert_page.html)
    pub const insertPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertPage(self: *Assistant, _page: *gtk.Widget, _position: i32) i32 {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget, i32) callconv(.c) i32, .{ .name = "gtk_assistant_insert_page" });
            const ret = cFn(self, _page, _position);
            return ret;
        }
    }.insertPage;
    /// Deprecated:
    /// method [next_page](https://docs.gtk.org/gtk4/method.Assistant.next_page.html)
    pub const nextPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn nextPage(self: *Assistant) void {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) void, .{ .name = "gtk_assistant_next_page" });
            const ret = cFn(self);
            return ret;
        }
    }.nextPage;
    /// Deprecated:
    /// method [prepend_page](https://docs.gtk.org/gtk4/method.Assistant.prepend_page.html)
    pub const prependPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prependPage(self: *Assistant, _page: *gtk.Widget) i32 {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) i32, .{ .name = "gtk_assistant_prepend_page" });
            const ret = cFn(self, _page);
            return ret;
        }
    }.prependPage;
    /// Deprecated:
    /// method [previous_page](https://docs.gtk.org/gtk4/method.Assistant.previous_page.html)
    pub const previousPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn previousPage(self: *Assistant) void {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) void, .{ .name = "gtk_assistant_previous_page" });
            const ret = cFn(self);
            return ret;
        }
    }.previousPage;
    /// Deprecated:
    /// method [remove_action_widget](https://docs.gtk.org/gtk4/method.Assistant.remove_action_widget.html)
    pub const removeActionWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeActionWidget(self: *Assistant, _child: *gtk.Widget) void {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_assistant_remove_action_widget" });
            const ret = cFn(self, _child);
            return ret;
        }
    }.removeActionWidget;
    /// Deprecated:
    /// method [remove_page](https://docs.gtk.org/gtk4/method.Assistant.remove_page.html)
    pub const removePage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removePage(self: *Assistant, _page_num: i32) void {
            const cFn = @extern(*const fn (*Assistant, i32) callconv(.c) void, .{ .name = "gtk_assistant_remove_page" });
            const ret = cFn(self, _page_num);
            return ret;
        }
    }.removePage;
    /// Deprecated:
    /// method [set_current_page](https://docs.gtk.org/gtk4/method.Assistant.set_current_page.html)
    pub const setCurrentPage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCurrentPage(self: *Assistant, _page_num: i32) void {
            const cFn = @extern(*const fn (*Assistant, i32) callconv(.c) void, .{ .name = "gtk_assistant_set_current_page" });
            const ret = cFn(self, _page_num);
            return ret;
        }
    }.setCurrentPage;
    /// Deprecated:
    /// method [set_forward_page_func](https://docs.gtk.org/gtk4/method.Assistant.set_forward_page_func.html)
    pub const setForwardPageFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setForwardPageFunc(self: *Assistant, page_func: anytype, page_func_args: anytype) void {
            var closure_page_func = core.zig_closure(page_func, page_func_args, &.{ i32, i32 });
            const _page_func: ?gtk.AssistantPageFunc = @ptrCast(closure_page_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_page_func.c_data());
            const _destroy: glib.DestroyNotify = @ptrCast(closure_page_func.c_destroy());
            const cFn = @extern(*const fn (*Assistant, ?gtk.AssistantPageFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_assistant_set_forward_page_func" });
            const ret = cFn(self, _page_func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setForwardPageFunc;
    /// Deprecated:
    /// method [set_page_complete](https://docs.gtk.org/gtk4/method.Assistant.set_page_complete.html)
    pub const setPageComplete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPageComplete(self: *Assistant, _page: *gtk.Widget, _complete: bool) void {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget, bool) callconv(.c) void, .{ .name = "gtk_assistant_set_page_complete" });
            const ret = cFn(self, _page, _complete);
            return ret;
        }
    }.setPageComplete;
    /// Deprecated:
    /// method [set_page_title](https://docs.gtk.org/gtk4/method.Assistant.set_page_title.html)
    pub const setPageTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPageTitle(self: *Assistant, _page: *gtk.Widget, _title: [*:0]const u8) void {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_assistant_set_page_title" });
            const ret = cFn(self, _page, _title);
            return ret;
        }
    }.setPageTitle;
    /// Deprecated:
    /// method [set_page_type](https://docs.gtk.org/gtk4/method.Assistant.set_page_type.html)
    pub const setPageType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPageType(self: *Assistant, _page: *gtk.Widget, _type: gtk.AssistantPageType) void {
            const cFn = @extern(*const fn (*Assistant, *gtk.Widget, gtk.AssistantPageType) callconv(.c) void, .{ .name = "gtk_assistant_set_page_type" });
            const ret = cFn(self, _page, _type);
            return ret;
        }
    }.setPageType;
    /// Deprecated:
    /// method [update_buttons_state](https://docs.gtk.org/gtk4/method.Assistant.update_buttons_state.html)
    pub const updateButtonsState = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn updateButtonsState(self: *Assistant) void {
            const cFn = @extern(*const fn (*Assistant) callconv(.c) void, .{ .name = "gtk_assistant_update_buttons_state" });
            const ret = cFn(self);
            return ret;
        }
    }.updateButtonsState;
    /// signal [apply](https://docs.gtk.org/gtk4/signal.Assistant.apply.html)
    pub fn connectApply(self: *Assistant, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("apply", handler, args, flags, &.{ void, *Assistant });
    }
    /// signal [cancel](https://docs.gtk.org/gtk4/signal.Assistant.cancel.html)
    pub fn connectCancel(self: *Assistant, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancel", handler, args, flags, &.{ void, *Assistant });
    }
    /// signal [close](https://docs.gtk.org/gtk4/signal.Assistant.close.html)
    pub fn connectClose(self: *Assistant, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("close", handler, args, flags, &.{ void, *Assistant });
    }
    /// signal [escape](https://docs.gtk.org/gtk4/signal.Assistant.escape.html)
    pub fn connectEscape(self: *Assistant, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("escape", handler, args, flags, &.{ void, *Assistant });
    }
    /// signal [prepare](https://docs.gtk.org/gtk4/signal.Assistant.prepare.html)
    pub fn connectPrepare(self: *Assistant, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("prepare", handler, args, flags, &.{ void, *Assistant, *gtk.Widget });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_assistant_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [AssistantPage](https://docs.gtk.org/gtk4/class.AssistantPage.html)
/// - property [child](https://docs.gtk.org/gtk4/property.AssistantPage.child.html): (r-) `gtk.Widget`
/// - property [complete](https://docs.gtk.org/gtk4/property.AssistantPage.complete.html): (rw) `bool`
/// - property [page-type](https://docs.gtk.org/gtk4/property.AssistantPage.page-type.html): (rw) `gtk.AssistantPageType`
/// - property [title](https://docs.gtk.org/gtk4/property.AssistantPage.title.html): (rw) `[*:0]const u8`
pub const AssistantPage = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gobject.Object;
    /// Deprecated:
    /// method [get_child](https://docs.gtk.org/gtk4/method.AssistantPage.get_child.html)
    pub const getChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getChild(self: *AssistantPage) *gtk.Widget {
            const cFn = @extern(*const fn (*AssistantPage) callconv(.c) *gtk.Widget, .{ .name = "gtk_assistant_page_get_child" });
            const ret = cFn(self);
            return ret;
        }
    }.getChild;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_assistant_page_get_type" });
        return cFn();
    }
};
/// callback [AssistantPageFunc](https://docs.gtk.org/gtk4/callback.AssistantPageFunc.html)
pub const AssistantPageFunc = *const fn (_current_page: i32, _data: ?*anyopaque) callconv(.c) i32;
/// Enum [AssistantPageType](https://docs.gtk.org/gtk4/enum.AssistantPageType.html)
pub const AssistantPageType = enum(u32) {
    content = 0,
    intro = 1,
    confirm = 2,
    summary = 3,
    progress = 4,
    custom = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_assistant_page_type_get_type" });
        return cFn();
    }
};
/// const [BINARY_AGE](https://docs.gtk.org/gtk4/const.BINARY_AGE.html)
pub const BINARY_AGE = 1405;
/// Enum [BaselinePosition](https://docs.gtk.org/gtk4/enum.BaselinePosition.html)
pub const BaselinePosition = enum(u32) {
    top = 0,
    center = 1,
    bottom = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_baseline_position_get_type" });
        return cFn();
    }
};
/// Class [BinLayout](https://docs.gtk.org/gtk4/class.BinLayout.html)
pub const BinLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.BinLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.BinLayout.new.html)
    pub fn new() *BinLayout {
        const cFn = @extern(*const fn () callconv(.c) *BinLayout, .{ .name = "gtk_bin_layout_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_bin_layout_get_type" });
        return cFn();
    }
};
pub const BinLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Struct [Bitset](https://docs.gtk.org/gtk4/struct.Bitset.html)
pub const Bitset = opaque {
    /// ctor [new_empty](https://docs.gtk.org/gtk4/ctor.Bitset.new_empty.html)
    pub fn newEmpty() *Bitset {
        const cFn = @extern(*const fn () callconv(.c) *Bitset, .{ .name = "gtk_bitset_new_empty" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_range](https://docs.gtk.org/gtk4/ctor.Bitset.new_range.html)
    pub fn newRange(_start: u32, _n_items: u32) *Bitset {
        const cFn = @extern(*const fn (u32, u32) callconv(.c) *Bitset, .{ .name = "gtk_bitset_new_range" });
        const ret = cFn(_start, _n_items);
        return ret;
    }
    /// method [add](https://docs.gtk.org/gtk4/method.Bitset.add.html)
    pub fn add(self: *Bitset, _value: u32) bool {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) bool, .{ .name = "gtk_bitset_add" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [add_range](https://docs.gtk.org/gtk4/method.Bitset.add_range.html)
    pub fn addRange(self: *Bitset, _start: u32, _n_items: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_add_range" });
        const ret = cFn(self, _start, _n_items);
        return ret;
    }
    /// method [add_range_closed](https://docs.gtk.org/gtk4/method.Bitset.add_range_closed.html)
    pub fn addRangeClosed(self: *Bitset, _first: u32, _last: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_add_range_closed" });
        const ret = cFn(self, _first, _last);
        return ret;
    }
    /// method [add_rectangle](https://docs.gtk.org/gtk4/method.Bitset.add_rectangle.html)
    pub fn addRectangle(self: *Bitset, _start: u32, _width: u32, _height: u32, _stride: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_add_rectangle" });
        const ret = cFn(self, _start, _width, _height, _stride);
        return ret;
    }
    /// method [contains](https://docs.gtk.org/gtk4/method.Bitset.contains.html)
    pub fn contains(self: *Bitset, _value: u32) bool {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) bool, .{ .name = "gtk_bitset_contains" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.Bitset.copy.html)
    pub fn copy(self: *Bitset) *gtk.Bitset {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) *gtk.Bitset, .{ .name = "gtk_bitset_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [difference](https://docs.gtk.org/gtk4/method.Bitset.difference.html)
    pub fn difference(self: *Bitset, _other: *gtk.Bitset) void {
        const cFn = @extern(*const fn (*Bitset, *gtk.Bitset) callconv(.c) void, .{ .name = "gtk_bitset_difference" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [equals](https://docs.gtk.org/gtk4/method.Bitset.equals.html)
    pub fn equals(self: *Bitset, _other: *gtk.Bitset) bool {
        const cFn = @extern(*const fn (*Bitset, *gtk.Bitset) callconv(.c) bool, .{ .name = "gtk_bitset_equals" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [get_maximum](https://docs.gtk.org/gtk4/method.Bitset.get_maximum.html)
    pub fn getMaximum(self: *Bitset) u32 {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) u32, .{ .name = "gtk_bitset_get_maximum" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_minimum](https://docs.gtk.org/gtk4/method.Bitset.get_minimum.html)
    pub fn getMinimum(self: *Bitset) u32 {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) u32, .{ .name = "gtk_bitset_get_minimum" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nth](https://docs.gtk.org/gtk4/method.Bitset.get_nth.html)
    pub fn getNth(self: *Bitset, _nth: u32) u32 {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) u32, .{ .name = "gtk_bitset_get_nth" });
        const ret = cFn(self, _nth);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gtk4/method.Bitset.get_size.html)
    pub fn getSize(self: *Bitset) u64 {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) u64, .{ .name = "gtk_bitset_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size_in_range](https://docs.gtk.org/gtk4/method.Bitset.get_size_in_range.html)
    pub fn getSizeInRange(self: *Bitset, _first: u32, _last: u32) u64 {
        const cFn = @extern(*const fn (*Bitset, u32, u32) callconv(.c) u64, .{ .name = "gtk_bitset_get_size_in_range" });
        const ret = cFn(self, _first, _last);
        return ret;
    }
    /// method [intersect](https://docs.gtk.org/gtk4/method.Bitset.intersect.html)
    pub fn intersect(self: *Bitset, _other: *gtk.Bitset) void {
        const cFn = @extern(*const fn (*Bitset, *gtk.Bitset) callconv(.c) void, .{ .name = "gtk_bitset_intersect" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [is_empty](https://docs.gtk.org/gtk4/method.Bitset.is_empty.html)
    pub fn isEmpty(self: *Bitset) bool {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) bool, .{ .name = "gtk_bitset_is_empty" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.Bitset.ref.html)
    pub fn ref(self: *Bitset) *gtk.Bitset {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) *gtk.Bitset, .{ .name = "gtk_bitset_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.Bitset.remove.html)
    pub fn remove(self: *Bitset, _value: u32) bool {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) bool, .{ .name = "gtk_bitset_remove" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/gtk4/method.Bitset.remove_all.html)
    pub fn removeAll(self: *Bitset) void {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) void, .{ .name = "gtk_bitset_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_range](https://docs.gtk.org/gtk4/method.Bitset.remove_range.html)
    pub fn removeRange(self: *Bitset, _start: u32, _n_items: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_remove_range" });
        const ret = cFn(self, _start, _n_items);
        return ret;
    }
    /// method [remove_range_closed](https://docs.gtk.org/gtk4/method.Bitset.remove_range_closed.html)
    pub fn removeRangeClosed(self: *Bitset, _first: u32, _last: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_remove_range_closed" });
        const ret = cFn(self, _first, _last);
        return ret;
    }
    /// method [remove_rectangle](https://docs.gtk.org/gtk4/method.Bitset.remove_rectangle.html)
    pub fn removeRectangle(self: *Bitset, _start: u32, _width: u32, _height: u32, _stride: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_remove_rectangle" });
        const ret = cFn(self, _start, _width, _height, _stride);
        return ret;
    }
    /// method [shift_left](https://docs.gtk.org/gtk4/method.Bitset.shift_left.html)
    pub fn shiftLeft(self: *Bitset, _amount: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) void, .{ .name = "gtk_bitset_shift_left" });
        const ret = cFn(self, _amount);
        return ret;
    }
    /// method [shift_right](https://docs.gtk.org/gtk4/method.Bitset.shift_right.html)
    pub fn shiftRight(self: *Bitset, _amount: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32) callconv(.c) void, .{ .name = "gtk_bitset_shift_right" });
        const ret = cFn(self, _amount);
        return ret;
    }
    /// method [splice](https://docs.gtk.org/gtk4/method.Bitset.splice.html)
    pub fn splice(self: *Bitset, _position: u32, _removed: u32, _added: u32) void {
        const cFn = @extern(*const fn (*Bitset, u32, u32, u32) callconv(.c) void, .{ .name = "gtk_bitset_splice" });
        const ret = cFn(self, _position, _removed, _added);
        return ret;
    }
    /// method [subtract](https://docs.gtk.org/gtk4/method.Bitset.subtract.html)
    pub fn subtract(self: *Bitset, _other: *gtk.Bitset) void {
        const cFn = @extern(*const fn (*Bitset, *gtk.Bitset) callconv(.c) void, .{ .name = "gtk_bitset_subtract" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [union](https://docs.gtk.org/gtk4/method.Bitset.union.html)
    pub fn @"union"(self: *Bitset, _other: *gtk.Bitset) void {
        const cFn = @extern(*const fn (*Bitset, *gtk.Bitset) callconv(.c) void, .{ .name = "gtk_bitset_union" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.Bitset.unref.html)
    pub fn unref(self: *Bitset) void {
        const cFn = @extern(*const fn (*Bitset) callconv(.c) void, .{ .name = "gtk_bitset_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_bitset_get_type" });
        return cFn();
    }
};
/// Struct [BitsetIter](https://docs.gtk.org/gtk4/struct.BitsetIter.html)
pub const BitsetIter = extern struct {
    private_data: [10]?*anyopaque,
    /// method [get_value](https://docs.gtk.org/gtk4/method.BitsetIter.get_value.html)
    pub fn getValue(self: *BitsetIter) u32 {
        const cFn = @extern(*const fn (*BitsetIter) callconv(.c) u32, .{ .name = "gtk_bitset_iter_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_valid](https://docs.gtk.org/gtk4/method.BitsetIter.is_valid.html)
    pub fn isValid(self: *BitsetIter) bool {
        const cFn = @extern(*const fn (*BitsetIter) callconv(.c) bool, .{ .name = "gtk_bitset_iter_is_valid" });
        const ret = cFn(self);
        return ret;
    }
    /// method [next](https://docs.gtk.org/gtk4/method.BitsetIter.next.html)
    pub fn next(self: *BitsetIter) struct {
        ret: bool,
        value: u32,
    } {
        var value_out: u32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*BitsetIter, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_next" });
        const ret = cFn(self, _value);
        return .{ .ret = ret, .value = value_out };
    }
    /// method [previous](https://docs.gtk.org/gtk4/method.BitsetIter.previous.html)
    pub fn previous(self: *BitsetIter) struct {
        ret: bool,
        value: u32,
    } {
        var value_out: u32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*BitsetIter, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_previous" });
        const ret = cFn(self, _value);
        return .{ .ret = ret, .value = value_out };
    }
    /// type func [init_at](https://docs.gtk.org/gtk4/type_func.BitsetIter.init_at.html)
    pub fn initAt(_iter: *gtk.BitsetIter, _set: *gtk.Bitset, _target: u32) struct {
        ret: bool,
        value: u32,
    } {
        var value_out: u32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, u32, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_at" });
        const ret = cFn(_iter, _set, _target, _value);
        return .{ .ret = ret, .value = value_out };
    }
    /// type func [init_first](https://docs.gtk.org/gtk4/type_func.BitsetIter.init_first.html)
    pub fn initFirst(_iter: *gtk.BitsetIter, _set: *gtk.Bitset) struct {
        ret: bool,
        value: u32,
    } {
        var value_out: u32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_first" });
        const ret = cFn(_iter, _set, _value);
        return .{ .ret = ret, .value = value_out };
    }
    /// type func [init_last](https://docs.gtk.org/gtk4/type_func.BitsetIter.init_last.html)
    pub fn initLast(_iter: *gtk.BitsetIter, _set: *gtk.Bitset) struct {
        ret: bool,
        value: u32,
    } {
        var value_out: u32 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_last" });
        const ret = cFn(_iter, _set, _value);
        return .{ .ret = ret, .value = value_out };
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_bitset_iter_get_type" });
        return cFn();
    }
};
/// Class [BookmarkList](https://docs.gtk.org/gtk4/class.BookmarkList.html)
/// - property [attributes](https://docs.gtk.org/gtk4/property.BookmarkList.attributes.html): (rw) `[*:0]const u8`
/// - property [filename](https://docs.gtk.org/gtk4/property.BookmarkList.filename.html): (r-) `[*:0]const u8`
/// - property [io-priority](https://docs.gtk.org/gtk4/property.BookmarkList.io-priority.html): (rw) `i32`
/// - property [item-type](https://docs.gtk.org/gtk4/property.BookmarkList.item-type.html): (r-) `core.Type`
/// - property [loading](https://docs.gtk.org/gtk4/property.BookmarkList.loading.html): (r-) `bool`
/// - property [n-items](https://docs.gtk.org/gtk4/property.BookmarkList.n-items.html): (r-) `u32`
pub const BookmarkList = opaque {
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = gtk.BookmarkListClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.BookmarkList.new.html)
    pub fn new(_filename: ?[*:0]const u8, _attributes: ?[*:0]const u8) *BookmarkList {
        const cFn = @extern(*const fn (?[*:0]const u8, ?[*:0]const u8) callconv(.c) *BookmarkList, .{ .name = "gtk_bookmark_list_new" });
        const ret = cFn(_filename, _attributes);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.BookmarkList.get_attributes.html)
    pub fn getAttributes(self: *BookmarkList) ?[*:0]u8 {
        const cFn = @extern(*const fn (*BookmarkList) callconv(.c) ?[*:0]u8, .{ .name = "gtk_bookmark_list_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_filename](https://docs.gtk.org/gtk4/method.BookmarkList.get_filename.html)
    pub fn getFilename(self: *BookmarkList) [*:0]u8 {
        const cFn = @extern(*const fn (*BookmarkList) callconv(.c) [*:0]u8, .{ .name = "gtk_bookmark_list_get_filename" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_io_priority](https://docs.gtk.org/gtk4/method.BookmarkList.get_io_priority.html)
    pub fn getIoPriority(self: *BookmarkList) i32 {
        const cFn = @extern(*const fn (*BookmarkList) callconv(.c) i32, .{ .name = "gtk_bookmark_list_get_io_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_loading](https://docs.gtk.org/gtk4/method.BookmarkList.is_loading.html)
    pub fn isLoading(self: *BookmarkList) bool {
        const cFn = @extern(*const fn (*BookmarkList) callconv(.c) bool, .{ .name = "gtk_bookmark_list_is_loading" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.BookmarkList.set_attributes.html)
    pub fn setAttributes(self: *BookmarkList, _attributes: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*BookmarkList, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_bookmark_list_set_attributes" });
        const ret = cFn(self, _attributes);
        return ret;
    }
    /// method [set_io_priority](https://docs.gtk.org/gtk4/method.BookmarkList.set_io_priority.html)
    pub fn setIoPriority(self: *BookmarkList, _io_priority: i32) void {
        const cFn = @extern(*const fn (*BookmarkList, i32) callconv(.c) void, .{ .name = "gtk_bookmark_list_set_io_priority" });
        const ret = cFn(self, _io_priority);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_bookmark_list_get_type" });
        return cFn();
    }
};
pub const BookmarkListClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [BoolFilter](https://docs.gtk.org/gtk4/class.BoolFilter.html)
/// - property [expression](https://docs.gtk.org/gtk4/property.BoolFilter.expression.html): (rw) `gtk.Expression`
/// - property [invert](https://docs.gtk.org/gtk4/property.BoolFilter.invert.html): (rw) `bool`
pub const BoolFilter = opaque {
    pub const Parent = gtk.Filter;
    pub const Class = gtk.BoolFilterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.BoolFilter.new.html)
    pub fn new(_expression: ?*gtk.Expression) *BoolFilter {
        const cFn = @extern(*const fn (?*gtk.Expression) callconv(.c) *BoolFilter, .{ .name = "gtk_bool_filter_new" });
        const ret = cFn(_expression);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.BoolFilter.get_expression.html)
    pub fn getExpression(self: *BoolFilter) ?*gtk.Expression {
        const cFn = @extern(*const fn (*BoolFilter) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_bool_filter_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_invert](https://docs.gtk.org/gtk4/method.BoolFilter.get_invert.html)
    pub fn getInvert(self: *BoolFilter) bool {
        const cFn = @extern(*const fn (*BoolFilter) callconv(.c) bool, .{ .name = "gtk_bool_filter_get_invert" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_expression](https://docs.gtk.org/gtk4/method.BoolFilter.set_expression.html)
    pub fn setExpression(self: *BoolFilter, _expression: ?*gtk.Expression) void {
        const cFn = @extern(*const fn (*BoolFilter, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_bool_filter_set_expression" });
        const ret = cFn(self, _expression);
        return ret;
    }
    /// method [set_invert](https://docs.gtk.org/gtk4/method.BoolFilter.set_invert.html)
    pub fn setInvert(self: *BoolFilter, _invert: bool) void {
        const cFn = @extern(*const fn (*BoolFilter, bool) callconv(.c) void, .{ .name = "gtk_bool_filter_set_invert" });
        const ret = cFn(self, _invert);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_bool_filter_get_type" });
        return cFn();
    }
};
pub const BoolFilterClass = extern struct {
    parent_class: gtk.FilterClass,
};
/// Struct [Border](https://docs.gtk.org/gtk4/struct.Border.html)
pub const Border = extern struct {
    left: i16,
    right: i16,
    top: i16,
    bottom: i16,
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Border.new.html)
    pub fn new() *Border {
        const cFn = @extern(*const fn () callconv(.c) *Border, .{ .name = "gtk_border_new" });
        const ret = cFn();
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.Border.copy.html)
    pub fn copy(self: *Border) *gtk.Border {
        const cFn = @extern(*const fn (*Border) callconv(.c) *gtk.Border, .{ .name = "gtk_border_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gtk4/method.Border.free.html)
    pub fn free(self: *Border) void {
        const cFn = @extern(*const fn (*Border) callconv(.c) void, .{ .name = "gtk_border_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_border_get_type" });
        return cFn();
    }
};
/// Enum [BorderStyle](https://docs.gtk.org/gtk4/enum.BorderStyle.html)
pub const BorderStyle = enum(u32) {
    none = 0,
    hidden = 1,
    solid = 2,
    inset = 3,
    outset = 4,
    dotted = 5,
    dashed = 6,
    double = 7,
    groove = 8,
    ridge = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_border_style_get_type" });
        return cFn();
    }
};
/// Class [Box](https://docs.gtk.org/gtk4/class.Box.html)
/// - property [baseline-child](https://docs.gtk.org/gtk4/property.Box.baseline-child.html): (rw) `i32`
/// - property [baseline-position](https://docs.gtk.org/gtk4/property.Box.baseline-position.html): (rw) `gtk.BaselinePosition`
/// - property [homogeneous](https://docs.gtk.org/gtk4/property.Box.homogeneous.html): (rw) `bool`
/// - property [spacing](https://docs.gtk.org/gtk4/property.Box.spacing.html): (rw) `i32`
pub const Box = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.BoxClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Box.new.html)
    pub fn new(_orientation: gtk.Orientation, _spacing: i32) *Box {
        const cFn = @extern(*const fn (gtk.Orientation, i32) callconv(.c) *Box, .{ .name = "gtk_box_new" });
        const ret = cFn(_orientation, _spacing);
        return ret;
    }
    /// method [append](https://docs.gtk.org/gtk4/method.Box.append.html)
    pub fn append(self: *Box, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Box, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_box_append" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_baseline_child](https://docs.gtk.org/gtk4/method.Box.get_baseline_child.html)
    pub fn getBaselineChild(self: *Box) i32 {
        const cFn = @extern(*const fn (*Box) callconv(.c) i32, .{ .name = "gtk_box_get_baseline_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_baseline_position](https://docs.gtk.org/gtk4/method.Box.get_baseline_position.html)
    pub fn getBaselinePosition(self: *Box) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*Box) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_box_get_baseline_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_homogeneous](https://docs.gtk.org/gtk4/method.Box.get_homogeneous.html)
    pub fn getHomogeneous(self: *Box) bool {
        const cFn = @extern(*const fn (*Box) callconv(.c) bool, .{ .name = "gtk_box_get_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_spacing](https://docs.gtk.org/gtk4/method.Box.get_spacing.html)
    pub fn getSpacing(self: *Box) i32 {
        const cFn = @extern(*const fn (*Box) callconv(.c) i32, .{ .name = "gtk_box_get_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_child_after](https://docs.gtk.org/gtk4/method.Box.insert_child_after.html)
    pub fn insertChildAfter(self: *Box, _child: *gtk.Widget, _sibling: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Box, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_box_insert_child_after" });
        const ret = cFn(self, _child, _sibling);
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/gtk4/method.Box.prepend.html)
    pub fn prepend(self: *Box, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Box, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_box_prepend" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.Box.remove.html)
    pub fn remove(self: *Box, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Box, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_box_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [reorder_child_after](https://docs.gtk.org/gtk4/method.Box.reorder_child_after.html)
    pub fn reorderChildAfter(self: *Box, _child: *gtk.Widget, _sibling: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Box, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_box_reorder_child_after" });
        const ret = cFn(self, _child, _sibling);
        return ret;
    }
    /// method [set_baseline_child](https://docs.gtk.org/gtk4/method.Box.set_baseline_child.html)
    pub fn setBaselineChild(self: *Box, _child: i32) void {
        const cFn = @extern(*const fn (*Box, i32) callconv(.c) void, .{ .name = "gtk_box_set_baseline_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_baseline_position](https://docs.gtk.org/gtk4/method.Box.set_baseline_position.html)
    pub fn setBaselinePosition(self: *Box, _position: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*Box, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_box_set_baseline_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_homogeneous](https://docs.gtk.org/gtk4/method.Box.set_homogeneous.html)
    pub fn setHomogeneous(self: *Box, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*Box, bool) callconv(.c) void, .{ .name = "gtk_box_set_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_spacing](https://docs.gtk.org/gtk4/method.Box.set_spacing.html)
    pub fn setSpacing(self: *Box, _spacing: i32) void {
        const cFn = @extern(*const fn (*Box, i32) callconv(.c) void, .{ .name = "gtk_box_set_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_box_get_type" });
        return cFn();
    }
};
pub const BoxClass = extern struct {
    parent_class: gtk.WidgetClass,
    padding: [8]?*anyopaque,
};
/// Class [BoxLayout](https://docs.gtk.org/gtk4/class.BoxLayout.html)
/// - property [baseline-child](https://docs.gtk.org/gtk4/property.BoxLayout.baseline-child.html): (rw) `i32`
/// - property [baseline-position](https://docs.gtk.org/gtk4/property.BoxLayout.baseline-position.html): (rw) `gtk.BaselinePosition`
/// - property [homogeneous](https://docs.gtk.org/gtk4/property.BoxLayout.homogeneous.html): (rw) `bool`
/// - property [spacing](https://docs.gtk.org/gtk4/property.BoxLayout.spacing.html): (rw) `i32`
pub const BoxLayout = opaque {
    pub const Interfaces = [_]type{gtk.Orientable};
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.BoxLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.BoxLayout.new.html)
    pub fn new(_orientation: gtk.Orientation) *BoxLayout {
        const cFn = @extern(*const fn (gtk.Orientation) callconv(.c) *BoxLayout, .{ .name = "gtk_box_layout_new" });
        const ret = cFn(_orientation);
        return ret;
    }
    /// method [get_baseline_child](https://docs.gtk.org/gtk4/method.BoxLayout.get_baseline_child.html)
    pub fn getBaselineChild(self: *BoxLayout) i32 {
        const cFn = @extern(*const fn (*BoxLayout) callconv(.c) i32, .{ .name = "gtk_box_layout_get_baseline_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_baseline_position](https://docs.gtk.org/gtk4/method.BoxLayout.get_baseline_position.html)
    pub fn getBaselinePosition(self: *BoxLayout) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*BoxLayout) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_box_layout_get_baseline_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_homogeneous](https://docs.gtk.org/gtk4/method.BoxLayout.get_homogeneous.html)
    pub fn getHomogeneous(self: *BoxLayout) bool {
        const cFn = @extern(*const fn (*BoxLayout) callconv(.c) bool, .{ .name = "gtk_box_layout_get_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_spacing](https://docs.gtk.org/gtk4/method.BoxLayout.get_spacing.html)
    pub fn getSpacing(self: *BoxLayout) u32 {
        const cFn = @extern(*const fn (*BoxLayout) callconv(.c) u32, .{ .name = "gtk_box_layout_get_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_baseline_child](https://docs.gtk.org/gtk4/method.BoxLayout.set_baseline_child.html)
    pub fn setBaselineChild(self: *BoxLayout, _child: i32) void {
        const cFn = @extern(*const fn (*BoxLayout, i32) callconv(.c) void, .{ .name = "gtk_box_layout_set_baseline_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_baseline_position](https://docs.gtk.org/gtk4/method.BoxLayout.set_baseline_position.html)
    pub fn setBaselinePosition(self: *BoxLayout, _position: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*BoxLayout, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_box_layout_set_baseline_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_homogeneous](https://docs.gtk.org/gtk4/method.BoxLayout.set_homogeneous.html)
    pub fn setHomogeneous(self: *BoxLayout, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*BoxLayout, bool) callconv(.c) void, .{ .name = "gtk_box_layout_set_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_spacing](https://docs.gtk.org/gtk4/method.BoxLayout.set_spacing.html)
    pub fn setSpacing(self: *BoxLayout, _spacing: u32) void {
        const cFn = @extern(*const fn (*BoxLayout, u32) callconv(.c) void, .{ .name = "gtk_box_layout_set_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_box_layout_get_type" });
        return cFn();
    }
};
pub const BoxLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Iface [Buildable](https://docs.gtk.org/gtk4/iface.Buildable.html)
pub const Buildable = opaque {
    /// method [get_buildable_id](https://docs.gtk.org/gtk4/method.Buildable.get_buildable_id.html)
    pub fn getBuildableId(self: *Buildable) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Buildable) callconv(.c) ?[*:0]u8, .{ .name = "gtk_buildable_get_buildable_id" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [add_child](https://docs.gtk.org/gtk4/vfunc.Buildable.add_child.html)
    pub fn addChildV(self: *Buildable, _builder: *gtk.Builder, _child: *gobject.Object, _type: ?[*:0]const u8) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_child.?;
        const ret = vFn(self, _builder, _child, _type);
        return ret;
    }
    /// vfunc [custom_finished](https://docs.gtk.org/gtk4/vfunc.Buildable.custom_finished.html)
    pub fn customFinishedV(self: *Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _data: ?*anyopaque) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.custom_finished.?;
        const ret = vFn(self, _builder, _child, _tagname, @ptrCast(_data));
        return ret;
    }
    /// vfunc [custom_tag_end](https://docs.gtk.org/gtk4/vfunc.Buildable.custom_tag_end.html)
    pub fn customTagEndV(self: *Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _data: ?*anyopaque) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.custom_tag_end.?;
        const ret = vFn(self, _builder, _child, _tagname, @ptrCast(_data));
        return ret;
    }
    /// vfunc [custom_tag_start](https://docs.gtk.org/gtk4/vfunc.Buildable.custom_tag_start.html)
    pub fn customTagStartV(self: *Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _parser: *gtk.BuildableParser, _data: *anyopaque) bool {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.custom_tag_start.?;
        const ret = vFn(self, _builder, _child, _tagname, _parser, @ptrCast(_data));
        return ret;
    }
    /// vfunc [get_id](https://docs.gtk.org/gtk4/vfunc.Buildable.get_id.html)
    pub fn getIdV(self: *Buildable) [*:0]u8 {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_id.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_internal_child](https://docs.gtk.org/gtk4/vfunc.Buildable.get_internal_child.html)
    pub fn getInternalChildV(self: *Buildable, _builder: *gtk.Builder, _childname: [*:0]const u8) *gobject.Object {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_internal_child.?;
        const ret = vFn(self, _builder, _childname);
        return ret;
    }
    /// vfunc [parser_finished](https://docs.gtk.org/gtk4/vfunc.Buildable.parser_finished.html)
    pub fn parserFinishedV(self: *Buildable, _builder: *gtk.Builder) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.parser_finished.?;
        const ret = vFn(self, _builder);
        return ret;
    }
    /// vfunc [set_buildable_property](https://docs.gtk.org/gtk4/vfunc.Buildable.set_buildable_property.html)
    pub fn setBuildablePropertyV(self: *Buildable, _builder: *gtk.Builder, _name: [*:0]const u8, _value: *gobject.Value) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_buildable_property.?;
        const ret = vFn(self, _builder, _name, _value);
        return ret;
    }
    /// vfunc [set_id](https://docs.gtk.org/gtk4/vfunc.Buildable.set_id.html)
    pub fn setIdV(self: *Buildable, _id: [*:0]const u8) void {
        const class: *BuildableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_id.?;
        const ret = vFn(self, _id);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_buildable_get_type" });
        return cFn();
    }
};
/// Struct [BuildableIface](https://docs.gtk.org/gtk4/struct.BuildableIface.html)
pub const BuildableIface = extern struct {
    g_iface: gobject.TypeInterface,
    set_id: ?*const fn (_buildable: *gtk.Buildable, _id: [*:0]const u8) callconv(.c) void,
    get_id: ?*const fn (_buildable: *gtk.Buildable) callconv(.c) [*:0]u8,
    add_child: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _child: *gobject.Object, _type: ?[*:0]const u8) callconv(.c) void,
    set_buildable_property: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _name: [*:0]const u8, _value: *gobject.Value) callconv(.c) void,
    construct_child: ?*anyopaque,
    custom_tag_start: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _parser: *gtk.BuildableParser, _data: *anyopaque) callconv(.c) bool,
    custom_tag_end: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _data: ?*anyopaque) callconv(.c) void,
    custom_finished: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _child: ?*gobject.Object, _tagname: [*:0]const u8, _data: ?*anyopaque) callconv(.c) void,
    parser_finished: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder) callconv(.c) void,
    get_internal_child: ?*const fn (_buildable: *gtk.Buildable, _builder: *gtk.Builder, _childname: [*:0]const u8) callconv(.c) *gobject.Object,
};
/// Struct [BuildableParseContext](https://docs.gtk.org/gtk4/struct.BuildableParseContext.html)
pub const BuildableParseContext = opaque {
    /// method [get_element](https://docs.gtk.org/gtk4/method.BuildableParseContext.get_element.html)
    pub fn getElement(self: *BuildableParseContext) ?[*:0]u8 {
        const cFn = @extern(*const fn (*BuildableParseContext) callconv(.c) ?[*:0]u8, .{ .name = "gtk_buildable_parse_context_get_element" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_element_stack](https://docs.gtk.org/gtk4/method.BuildableParseContext.get_element_stack.html)
    pub fn getElementStack(self: *BuildableParseContext) *core.PtrArray {
        const cFn = @extern(*const fn (*BuildableParseContext) callconv(.c) *core.PtrArray, .{ .name = "gtk_buildable_parse_context_get_element_stack" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.BuildableParseContext.get_position.html)
    pub fn getPosition(self: *BuildableParseContext) struct {
        ret: void,
        line_number: i32,
        char_number: i32,
    } {
        var line_number_out: i32 = undefined;
        const _line_number = &line_number_out;
        var char_number_out: i32 = undefined;
        const _char_number = &char_number_out;
        const cFn = @extern(*const fn (*BuildableParseContext, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_buildable_parse_context_get_position" });
        const ret = cFn(self, _line_number, _char_number);
        return .{ .ret = ret, .line_number = line_number_out, .char_number = char_number_out };
    }
    /// method [pop](https://docs.gtk.org/gtk4/method.BuildableParseContext.pop.html)
    pub fn pop(self: *BuildableParseContext) ?*anyopaque {
        const cFn = @extern(*const fn (*BuildableParseContext) callconv(.c) ?*anyopaque, .{ .name = "gtk_buildable_parse_context_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push](https://docs.gtk.org/gtk4/method.BuildableParseContext.push.html)
    pub fn push(self: *BuildableParseContext, _parser: *gtk.BuildableParser, _user_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*BuildableParseContext, *gtk.BuildableParser, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_buildable_parse_context_push" });
        const ret = cFn(self, _parser, @ptrCast(_user_data));
        return ret;
    }
};
/// Struct [BuildableParser](https://docs.gtk.org/gtk4/struct.BuildableParser.html)
pub const BuildableParser = extern struct {
    start_element: ?*const fn (_context: *gtk.BuildableParseContext, _element_name: [*:0]const u8, _attribute_names: [*:0]const u8, _attribute_values: [*:0]const u8, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    end_element: ?*const fn (_context: *gtk.BuildableParseContext, _element_name: [*:0]const u8, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    text: ?*const fn (_context: *gtk.BuildableParseContext, _text: [*:0]const u8, _text_len: u64, _user_data: ?*anyopaque, _error: *?*core.Error) callconv(.c) void,
    @"error": ?*const fn (_context: *gtk.BuildableParseContext, _error: *core.Error, _user_data: ?*anyopaque) callconv(.c) void,
    padding: [4]?*anyopaque,
};
/// Class [Builder](https://docs.gtk.org/gtk4/class.Builder.html)
/// - property [current-object](https://docs.gtk.org/gtk4/property.Builder.current-object.html): (rw) `gobject.Object`
/// - property [scope](https://docs.gtk.org/gtk4/property.Builder.scope.html): (rw) `gtk.BuilderScope`
/// - property [translation-domain](https://docs.gtk.org/gtk4/property.Builder.translation-domain.html): (rw) `[*:0]const u8`
pub const Builder = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.BuilderClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Builder.new.html)
    pub fn new() *Builder {
        const cFn = @extern(*const fn () callconv(.c) *Builder, .{ .name = "gtk_builder_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gtk4/ctor.Builder.new_from_file.html)
    pub fn newFromFile(_filename: [*:0]const u8) *Builder {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Builder, .{ .name = "gtk_builder_new_from_file" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_from_resource](https://docs.gtk.org/gtk4/ctor.Builder.new_from_resource.html)
    pub fn newFromResource(_resource_path: [*:0]const u8) *Builder {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Builder, .{ .name = "gtk_builder_new_from_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// ctor [new_from_string](https://docs.gtk.org/gtk4/ctor.Builder.new_from_string.html)
    pub fn newFromString(_string: [*:0]const u8, _length: i64) *Builder {
        const cFn = @extern(*const fn ([*:0]const u8, i64) callconv(.c) *Builder, .{ .name = "gtk_builder_new_from_string" });
        const ret = cFn(_string, _length);
        return ret;
    }
    /// method [add_from_file](https://docs.gtk.org/gtk4/method.Builder.add_from_file.html)
    pub fn addFromFile(self: *Builder, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_from_file" });
        const ret = cFn(self, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_from_resource](https://docs.gtk.org/gtk4/method.Builder.add_from_resource.html)
    pub fn addFromResource(self: *Builder, _resource_path: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_from_resource" });
        const ret = cFn(self, _resource_path, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_from_string](https://docs.gtk.org/gtk4/method.Builder.add_from_string.html)
    pub fn addFromString(self: *Builder, _buffer: [*:0]const u8, _length: i64, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, i64, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_from_string" });
        const ret = cFn(self, _buffer, _length, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_objects_from_file](https://docs.gtk.org/gtk4/method.Builder.add_objects_from_file.html)
    pub fn addObjectsFromFile(self: *Builder, _filename: [*:0]const u8, _object_ids: [*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, [*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_objects_from_file" });
        const ret = cFn(self, _filename, _object_ids, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_objects_from_resource](https://docs.gtk.org/gtk4/method.Builder.add_objects_from_resource.html)
    pub fn addObjectsFromResource(self: *Builder, _resource_path: [*:0]const u8, _object_ids: [*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, [*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_objects_from_resource" });
        const ret = cFn(self, _resource_path, _object_ids, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_objects_from_string](https://docs.gtk.org/gtk4/method.Builder.add_objects_from_string.html)
    pub fn addObjectsFromString(self: *Builder, _buffer: [*:0]const u8, _length: i64, _object_ids: [*:null]?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, i64, [*:null]?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_add_objects_from_string" });
        const ret = cFn(self, _buffer, _length, _object_ids, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [create_closure](https://docs.gtk.org/gtk4/method.Builder.create_closure.html)
    pub fn createClosure(self: *Builder, _function_name: [*:0]const u8, _flags: gtk.BuilderClosureFlags, _object: ?*gobject.Object, _error: *?*core.Error) error{GError}!?*gobject.Closure {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, gtk.BuilderClosureFlags, ?*gobject.Object, *?*core.Error) callconv(.c) ?*gobject.Closure, .{ .name = "gtk_builder_create_closure" });
        const ret = cFn(self, _function_name, _flags, _object, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [expose_object](https://docs.gtk.org/gtk4/method.Builder.expose_object.html)
    pub fn exposeObject(self: *Builder, _name: [*:0]const u8, _object: *gobject.Object) void {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8, *gobject.Object) callconv(.c) void, .{ .name = "gtk_builder_expose_object" });
        const ret = cFn(self, _name, _object);
        return ret;
    }
    /// method [extend_with_template](https://docs.gtk.org/gtk4/method.Builder.extend_with_template.html)
    pub fn extendWithTemplate(self: *Builder, _object: *gobject.Object, _template_type: core.Type, _buffer: [*:0]const u8, _length: i64, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, *gobject.Object, core.Type, [*:0]const u8, i64, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_extend_with_template" });
        const ret = cFn(self, _object, _template_type, _buffer, _length, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_current_object](https://docs.gtk.org/gtk4/method.Builder.get_current_object.html)
    pub fn getCurrentObject(self: *Builder) ?*gobject.Object {
        const cFn = @extern(*const fn (*Builder) callconv(.c) ?*gobject.Object, .{ .name = "gtk_builder_get_current_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object](https://docs.gtk.org/gtk4/method.Builder.get_object.html)
    pub fn getObject(self: *Builder, _name: [*:0]const u8) ?*gobject.Object {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8) callconv(.c) ?*gobject.Object, .{ .name = "gtk_builder_get_object" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_objects](https://docs.gtk.org/gtk4/method.Builder.get_objects.html)
    pub fn getObjects(self: *Builder) ?*core.SList {
        const cFn = @extern(*const fn (*Builder) callconv(.c) ?*core.SList, .{ .name = "gtk_builder_get_objects" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scope](https://docs.gtk.org/gtk4/method.Builder.get_scope.html)
    pub fn getScope(self: *Builder) *gtk.BuilderScope {
        const cFn = @extern(*const fn (*Builder) callconv(.c) *gtk.BuilderScope, .{ .name = "gtk_builder_get_scope" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_translation_domain](https://docs.gtk.org/gtk4/method.Builder.get_translation_domain.html)
    pub fn getTranslationDomain(self: *Builder) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Builder) callconv(.c) ?[*:0]u8, .{ .name = "gtk_builder_get_translation_domain" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_type_from_name](https://docs.gtk.org/gtk4/method.Builder.get_type_from_name.html)
    pub fn getTypeFromName(self: *Builder, _type_name: [*:0]const u8) core.Type {
        const cFn = @extern(*const fn (*Builder, [*:0]const u8) callconv(.c) core.Type, .{ .name = "gtk_builder_get_type_from_name" });
        const ret = cFn(self, _type_name);
        return ret;
    }
    /// method [set_current_object](https://docs.gtk.org/gtk4/method.Builder.set_current_object.html)
    pub fn setCurrentObject(self: *Builder, _current_object: ?*gobject.Object) void {
        const cFn = @extern(*const fn (*Builder, ?*gobject.Object) callconv(.c) void, .{ .name = "gtk_builder_set_current_object" });
        const ret = cFn(self, _current_object);
        return ret;
    }
    /// method [set_scope](https://docs.gtk.org/gtk4/method.Builder.set_scope.html)
    pub fn setScope(self: *Builder, _scope: ?*gtk.BuilderScope) void {
        const cFn = @extern(*const fn (*Builder, ?*gtk.BuilderScope) callconv(.c) void, .{ .name = "gtk_builder_set_scope" });
        const ret = cFn(self, _scope);
        return ret;
    }
    /// method [set_translation_domain](https://docs.gtk.org/gtk4/method.Builder.set_translation_domain.html)
    pub fn setTranslationDomain(self: *Builder, _domain: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Builder, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_builder_set_translation_domain" });
        const ret = cFn(self, _domain);
        return ret;
    }
    /// method [value_from_string](https://docs.gtk.org/gtk4/method.Builder.value_from_string.html)
    pub fn valueFromString(self: *Builder, _pspec: *gobject.ParamSpec, _string: [*:0]const u8, _value: *gobject.Value, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, *gobject.ParamSpec, [*:0]const u8, *gobject.Value, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_value_from_string" });
        const ret = cFn(self, _pspec, _string, _value, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [value_from_string_type](https://docs.gtk.org/gtk4/method.Builder.value_from_string_type.html)
    pub fn valueFromStringType(self: *Builder, _type: core.Type, _string: [*:0]const u8, _value: *gobject.Value, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*Builder, core.Type, [*:0]const u8, *gobject.Value, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_builder_value_from_string_type" });
        const ret = cFn(self, _type, _string, _value, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_get_type" });
        return cFn();
    }
};
/// Class [BuilderCScope](https://docs.gtk.org/gtk4/class.BuilderCScope.html)
pub const BuilderCScope = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gtk.BuilderScope};
    pub const Parent = gobject.Object;
    pub const Class = gtk.BuilderCScopeClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.BuilderCScope.new.html)
    pub fn new() *BuilderCScope {
        const cFn = @extern(*const fn () callconv(.c) *BuilderCScope, .{ .name = "gtk_builder_cscope_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_callback_symbol](https://docs.gtk.org/gtk4/method.BuilderCScope.add_callback_symbol.html)
    pub fn addCallbackSymbol(self: *BuilderCScope, _callback_name: [*:0]const u8, _callback_symbol: gobject.Callback) void {
        const cFn = @extern(*const fn (*BuilderCScope, [*:0]const u8, gobject.Callback) callconv(.c) void, .{ .name = "gtk_builder_cscope_add_callback_symbol" });
        const ret = cFn(self, _callback_name, _callback_symbol);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_cscope_get_type" });
        return cFn();
    }
};
pub const BuilderCScopeClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const BuilderClass = opaque {};
/// Flags [BuilderClosureFlags](https://docs.gtk.org/gtk4/flags.BuilderClosureFlags.html)
pub const BuilderClosureFlags = packed struct(u32) {
    swapped: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_closure_flags_get_type" });
        return cFn();
    }
};
/// Error [BuilderError](https://docs.gtk.org/gtk4/error.BuilderError.html)
pub const BuilderError = enum(u32) {
    invalid_type_function = 0,
    unhandled_tag = 1,
    missing_attribute = 2,
    invalid_attribute = 3,
    invalid_tag = 4,
    missing_property_value = 5,
    invalid_value = 6,
    version_mismatch = 7,
    duplicate_id = 8,
    object_type_refused = 9,
    template_mismatch = 10,
    invalid_property = 11,
    invalid_signal = 12,
    invalid_id = 13,
    invalid_function = 14,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.BuilderError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_builder_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_error_get_type" });
        return cFn();
    }
};
/// Class [BuilderListItemFactory](https://docs.gtk.org/gtk4/class.BuilderListItemFactory.html)
/// - property [bytes](https://docs.gtk.org/gtk4/property.BuilderListItemFactory.bytes.html): (r-) `glib.Bytes`
/// - property [resource](https://docs.gtk.org/gtk4/property.BuilderListItemFactory.resource.html): (r-) `[*:0]const u8`
/// - property [scope](https://docs.gtk.org/gtk4/property.BuilderListItemFactory.scope.html): (r-) `gtk.BuilderScope`
pub const BuilderListItemFactory = opaque {
    pub const Parent = gtk.ListItemFactory;
    pub const Class = gtk.BuilderListItemFactoryClass;
    /// ctor [new_from_bytes](https://docs.gtk.org/gtk4/ctor.BuilderListItemFactory.new_from_bytes.html)
    pub fn newFromBytes(_scope: ?*gtk.BuilderScope, _bytes: *glib.Bytes) *BuilderListItemFactory {
        const cFn = @extern(*const fn (?*gtk.BuilderScope, *glib.Bytes) callconv(.c) *BuilderListItemFactory, .{ .name = "gtk_builder_list_item_factory_new_from_bytes" });
        const ret = cFn(_scope, _bytes);
        return ret;
    }
    /// ctor [new_from_resource](https://docs.gtk.org/gtk4/ctor.BuilderListItemFactory.new_from_resource.html)
    pub fn newFromResource(_scope: ?*gtk.BuilderScope, _resource_path: [*:0]const u8) *BuilderListItemFactory {
        const cFn = @extern(*const fn (?*gtk.BuilderScope, [*:0]const u8) callconv(.c) *BuilderListItemFactory, .{ .name = "gtk_builder_list_item_factory_new_from_resource" });
        const ret = cFn(_scope, _resource_path);
        return ret;
    }
    /// method [get_bytes](https://docs.gtk.org/gtk4/method.BuilderListItemFactory.get_bytes.html)
    pub fn getBytes(self: *BuilderListItemFactory) *glib.Bytes {
        const cFn = @extern(*const fn (*BuilderListItemFactory) callconv(.c) *glib.Bytes, .{ .name = "gtk_builder_list_item_factory_get_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resource](https://docs.gtk.org/gtk4/method.BuilderListItemFactory.get_resource.html)
    pub fn getResource(self: *BuilderListItemFactory) ?[*:0]u8 {
        const cFn = @extern(*const fn (*BuilderListItemFactory) callconv(.c) ?[*:0]u8, .{ .name = "gtk_builder_list_item_factory_get_resource" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scope](https://docs.gtk.org/gtk4/method.BuilderListItemFactory.get_scope.html)
    pub fn getScope(self: *BuilderListItemFactory) ?*gtk.BuilderScope {
        const cFn = @extern(*const fn (*BuilderListItemFactory) callconv(.c) ?*gtk.BuilderScope, .{ .name = "gtk_builder_list_item_factory_get_scope" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_list_item_factory_get_type" });
        return cFn();
    }
};
pub const BuilderListItemFactoryClass = opaque {};
/// Iface [BuilderScope](https://docs.gtk.org/gtk4/iface.BuilderScope.html)
pub const BuilderScope = opaque {
    /// vfunc [create_closure](https://docs.gtk.org/gtk4/vfunc.BuilderScope.create_closure.html)
    pub fn createClosureV(self: *BuilderScope, _builder: *gtk.Builder, _function_name: [*:0]const u8, _flags: gtk.BuilderClosureFlags, _object: *gobject.Object, _error: *?*core.Error) *gobject.Closure {
        const class: *BuilderScopeInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_closure.?;
        const ret = vFn(self, _builder, _function_name, _flags, _object, _error);
        return ret;
    }
    /// vfunc [get_type_from_function](https://docs.gtk.org/gtk4/vfunc.BuilderScope.get_type_from_function.html)
    pub fn getTypeFromFunctionV(self: *BuilderScope, _builder: *gtk.Builder, _function_name: [*:0]const u8) core.Type {
        const class: *BuilderScopeInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_type_from_function.?;
        const ret = vFn(self, _builder, _function_name);
        return ret;
    }
    /// vfunc [get_type_from_name](https://docs.gtk.org/gtk4/vfunc.BuilderScope.get_type_from_name.html)
    pub fn getTypeFromNameV(self: *BuilderScope, _builder: *gtk.Builder, _type_name: [*:0]const u8) core.Type {
        const class: *BuilderScopeInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_type_from_name.?;
        const ret = vFn(self, _builder, _type_name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_builder_scope_get_type" });
        return cFn();
    }
};
pub const BuilderScopeInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_type_from_name: ?*const fn (_self: *gtk.BuilderScope, _builder: *gtk.Builder, _type_name: [*:0]const u8) callconv(.c) core.Type,
    get_type_from_function: ?*const fn (_self: *gtk.BuilderScope, _builder: *gtk.Builder, _function_name: [*:0]const u8) callconv(.c) core.Type,
    create_closure: ?*const fn (_self: *gtk.BuilderScope, _builder: *gtk.Builder, _function_name: [*:0]const u8, _flags: gtk.BuilderClosureFlags, _object: *gobject.Object, _error: *?*core.Error) callconv(.c) *gobject.Closure,
};
/// Class [Button](https://docs.gtk.org/gtk4/class.Button.html)
/// - property [can-shrink](https://docs.gtk.org/gtk4/property.Button.can-shrink.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.Button.child.html): (rw) `gtk.Widget`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.Button.has-frame.html): (rw) `bool`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.Button.icon-name.html): (rw) `[*:0]const u8`
/// - property [label](https://docs.gtk.org/gtk4/property.Button.label.html): (rw) `[*:0]const u8`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.Button.use-underline.html): (rw) `bool`
pub const Button = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Button.new.html)
    pub fn new() *Button {
        const cFn = @extern(*const fn () callconv(.c) *Button, .{ .name = "gtk_button_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_icon_name](https://docs.gtk.org/gtk4/ctor.Button.new_from_icon_name.html)
    pub fn newFromIconName(_icon_name: [*:0]const u8) *Button {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Button, .{ .name = "gtk_button_new_from_icon_name" });
        const ret = cFn(_icon_name);
        return ret;
    }
    /// ctor [new_with_label](https://docs.gtk.org/gtk4/ctor.Button.new_with_label.html)
    pub fn newWithLabel(_label: [*:0]const u8) *Button {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Button, .{ .name = "gtk_button_new_with_label" });
        const ret = cFn(_label);
        return ret;
    }
    /// ctor [new_with_mnemonic](https://docs.gtk.org/gtk4/ctor.Button.new_with_mnemonic.html)
    pub fn newWithMnemonic(_label: [*:0]const u8) *Button {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Button, .{ .name = "gtk_button_new_with_mnemonic" });
        const ret = cFn(_label);
        return ret;
    }
    /// method [get_can_shrink](https://docs.gtk.org/gtk4/method.Button.get_can_shrink.html)
    pub fn getCanShrink(self: *Button) bool {
        const cFn = @extern(*const fn (*Button) callconv(.c) bool, .{ .name = "gtk_button_get_can_shrink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Button.get_child.html)
    pub fn getChild(self: *Button) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Button) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_button_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_frame](https://docs.gtk.org/gtk4/method.Button.get_has_frame.html)
    pub fn getHasFrame(self: *Button) bool {
        const cFn = @extern(*const fn (*Button) callconv(.c) bool, .{ .name = "gtk_button_get_has_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.Button.get_icon_name.html)
    pub fn getIconName(self: *Button) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Button) callconv(.c) ?[*:0]u8, .{ .name = "gtk_button_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.Button.get_label.html)
    pub fn getLabel(self: *Button) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Button) callconv(.c) ?[*:0]u8, .{ .name = "gtk_button_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.Button.get_use_underline.html)
    pub fn getUseUnderline(self: *Button) bool {
        const cFn = @extern(*const fn (*Button) callconv(.c) bool, .{ .name = "gtk_button_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_can_shrink](https://docs.gtk.org/gtk4/method.Button.set_can_shrink.html)
    pub fn setCanShrink(self: *Button, _can_shrink: bool) void {
        const cFn = @extern(*const fn (*Button, bool) callconv(.c) void, .{ .name = "gtk_button_set_can_shrink" });
        const ret = cFn(self, _can_shrink);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Button.set_child.html)
    pub fn setChild(self: *Button, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Button, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_button_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_has_frame](https://docs.gtk.org/gtk4/method.Button.set_has_frame.html)
    pub fn setHasFrame(self: *Button, _has_frame: bool) void {
        const cFn = @extern(*const fn (*Button, bool) callconv(.c) void, .{ .name = "gtk_button_set_has_frame" });
        const ret = cFn(self, _has_frame);
        return ret;
    }
    /// method [set_icon_name](https://docs.gtk.org/gtk4/method.Button.set_icon_name.html)
    pub fn setIconName(self: *Button, _icon_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Button, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_button_set_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.Button.set_label.html)
    pub fn setLabel(self: *Button, _label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Button, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_button_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.Button.set_use_underline.html)
    pub fn setUseUnderline(self: *Button, _use_underline: bool) void {
        const cFn = @extern(*const fn (*Button, bool) callconv(.c) void, .{ .name = "gtk_button_set_use_underline" });
        const ret = cFn(self, _use_underline);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.Button.activate.html)
    pub fn activateV(self: *Button) void {
        const class: *ButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [clicked](https://docs.gtk.org/gtk4/vfunc.Button.clicked.html)
    pub fn clickedV(self: *Button) void {
        const class: *ButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.clicked.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.Button.activate.html)
    pub fn connectActivate(self: *Button, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Button });
    }
    /// signal [clicked](https://docs.gtk.org/gtk4/signal.Button.clicked.html)
    pub fn connectClicked(self: *Button, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("clicked", handler, args, flags, &.{ void, *Button });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_button_get_type" });
        return cFn();
    }
};
pub const ButtonClass = extern struct {
    parent_class: gtk.WidgetClass,
    clicked: ?*const fn (_button: *gtk.Button) callconv(.c) void,
    activate: ?*const fn (_button: *gtk.Button) callconv(.c) void,
    padding: [8]?*anyopaque,
};
pub const ButtonPrivate = opaque {};
/// Enum [ButtonsType](https://docs.gtk.org/gtk4/enum.ButtonsType.html)
pub const ButtonsType = enum(u32) {
    none = 0,
    ok = 1,
    close = 2,
    cancel = 3,
    yes_no = 4,
    ok_cancel = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_buttons_type_get_type" });
        return cFn();
    }
};
/// Class [CClosureExpression](https://docs.gtk.org/gtk4/class.CClosureExpression.html)
pub const CClosureExpression = opaque {
    pub const Parent = gtk.Expression;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CClosureExpression.new.html)
    pub fn new(_value_type: core.Type, _marshal: ?gobject.ClosureMarshal, _paramss: []*gtk.Expression, callback_func: anytype, callback_func_args: anytype) *CClosureExpression {
        const _n_params: u32 = @intCast(_paramss.len);
        const _params = _paramss.ptr;
        var closure_callback_func = core.zig_closure(callback_func, callback_func_args, &.{void});
        const _callback_func: gobject.Callback = @ptrCast(closure_callback_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback_func.c_data());
        const _user_destroy: ?gobject.ClosureNotify = @ptrCast(closure_callback_func.c_destroy());
        const cFn = @extern(*const fn (core.Type, ?gobject.ClosureMarshal, u32, [*]*gtk.Expression, gobject.Callback, ?*anyopaque, ?gobject.ClosureNotify) callconv(.c) *CClosureExpression, .{ .name = "gtk_cclosure_expression_new" });
        const ret = cFn(_value_type, _marshal, _n_params, _params, _callback_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cclosure_expression_get_type" });
        return cFn();
    }
};
/// Class [Calendar](https://docs.gtk.org/gtk4/class.Calendar.html)
/// - property [day](https://docs.gtk.org/gtk4/property.Calendar.day.html): (rw) `i32`
/// - property [month](https://docs.gtk.org/gtk4/property.Calendar.month.html): (rw) `i32`
/// - property [show-day-names](https://docs.gtk.org/gtk4/property.Calendar.show-day-names.html): (rw) `bool`
/// - property [show-heading](https://docs.gtk.org/gtk4/property.Calendar.show-heading.html): (rw) `bool`
/// - property [show-week-numbers](https://docs.gtk.org/gtk4/property.Calendar.show-week-numbers.html): (rw) `bool`
/// - property [year](https://docs.gtk.org/gtk4/property.Calendar.year.html): (rw) `i32`
pub const Calendar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Calendar.new.html)
    pub fn new() *Calendar {
        const cFn = @extern(*const fn () callconv(.c) *Calendar, .{ .name = "gtk_calendar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [clear_marks](https://docs.gtk.org/gtk4/method.Calendar.clear_marks.html)
    pub fn clearMarks(self: *Calendar) void {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) void, .{ .name = "gtk_calendar_clear_marks" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_date](https://docs.gtk.org/gtk4/method.Calendar.get_date.html)
    pub fn getDate(self: *Calendar) *glib.DateTime {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) *glib.DateTime, .{ .name = "gtk_calendar_get_date" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day](https://docs.gtk.org/gtk4/method.Calendar.get_day.html)
    pub fn getDay(self: *Calendar) i32 {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) i32, .{ .name = "gtk_calendar_get_day" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_day_is_marked](https://docs.gtk.org/gtk4/method.Calendar.get_day_is_marked.html)
    pub fn getDayIsMarked(self: *Calendar, _day: u32) bool {
        const cFn = @extern(*const fn (*Calendar, u32) callconv(.c) bool, .{ .name = "gtk_calendar_get_day_is_marked" });
        const ret = cFn(self, _day);
        return ret;
    }
    /// method [get_month](https://docs.gtk.org/gtk4/method.Calendar.get_month.html)
    pub fn getMonth(self: *Calendar) i32 {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) i32, .{ .name = "gtk_calendar_get_month" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_day_names](https://docs.gtk.org/gtk4/method.Calendar.get_show_day_names.html)
    pub fn getShowDayNames(self: *Calendar) bool {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) bool, .{ .name = "gtk_calendar_get_show_day_names" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_heading](https://docs.gtk.org/gtk4/method.Calendar.get_show_heading.html)
    pub fn getShowHeading(self: *Calendar) bool {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) bool, .{ .name = "gtk_calendar_get_show_heading" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_week_numbers](https://docs.gtk.org/gtk4/method.Calendar.get_show_week_numbers.html)
    pub fn getShowWeekNumbers(self: *Calendar) bool {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) bool, .{ .name = "gtk_calendar_get_show_week_numbers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_year](https://docs.gtk.org/gtk4/method.Calendar.get_year.html)
    pub fn getYear(self: *Calendar) i32 {
        const cFn = @extern(*const fn (*Calendar) callconv(.c) i32, .{ .name = "gtk_calendar_get_year" });
        const ret = cFn(self);
        return ret;
    }
    /// method [mark_day](https://docs.gtk.org/gtk4/method.Calendar.mark_day.html)
    pub fn markDay(self: *Calendar, _day: u32) void {
        const cFn = @extern(*const fn (*Calendar, u32) callconv(.c) void, .{ .name = "gtk_calendar_mark_day" });
        const ret = cFn(self, _day);
        return ret;
    }
    /// method [select_day](https://docs.gtk.org/gtk4/method.Calendar.select_day.html)
    pub fn selectDay(self: *Calendar, _date: *glib.DateTime) void {
        const cFn = @extern(*const fn (*Calendar, *glib.DateTime) callconv(.c) void, .{ .name = "gtk_calendar_select_day" });
        const ret = cFn(self, _date);
        return ret;
    }
    /// method [set_day](https://docs.gtk.org/gtk4/method.Calendar.set_day.html)
    pub fn setDay(self: *Calendar, _day: i32) void {
        const cFn = @extern(*const fn (*Calendar, i32) callconv(.c) void, .{ .name = "gtk_calendar_set_day" });
        const ret = cFn(self, _day);
        return ret;
    }
    /// method [set_month](https://docs.gtk.org/gtk4/method.Calendar.set_month.html)
    pub fn setMonth(self: *Calendar, _month: i32) void {
        const cFn = @extern(*const fn (*Calendar, i32) callconv(.c) void, .{ .name = "gtk_calendar_set_month" });
        const ret = cFn(self, _month);
        return ret;
    }
    /// method [set_show_day_names](https://docs.gtk.org/gtk4/method.Calendar.set_show_day_names.html)
    pub fn setShowDayNames(self: *Calendar, _value: bool) void {
        const cFn = @extern(*const fn (*Calendar, bool) callconv(.c) void, .{ .name = "gtk_calendar_set_show_day_names" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_show_heading](https://docs.gtk.org/gtk4/method.Calendar.set_show_heading.html)
    pub fn setShowHeading(self: *Calendar, _value: bool) void {
        const cFn = @extern(*const fn (*Calendar, bool) callconv(.c) void, .{ .name = "gtk_calendar_set_show_heading" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_show_week_numbers](https://docs.gtk.org/gtk4/method.Calendar.set_show_week_numbers.html)
    pub fn setShowWeekNumbers(self: *Calendar, _value: bool) void {
        const cFn = @extern(*const fn (*Calendar, bool) callconv(.c) void, .{ .name = "gtk_calendar_set_show_week_numbers" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_year](https://docs.gtk.org/gtk4/method.Calendar.set_year.html)
    pub fn setYear(self: *Calendar, _year: i32) void {
        const cFn = @extern(*const fn (*Calendar, i32) callconv(.c) void, .{ .name = "gtk_calendar_set_year" });
        const ret = cFn(self, _year);
        return ret;
    }
    /// method [unmark_day](https://docs.gtk.org/gtk4/method.Calendar.unmark_day.html)
    pub fn unmarkDay(self: *Calendar, _day: u32) void {
        const cFn = @extern(*const fn (*Calendar, u32) callconv(.c) void, .{ .name = "gtk_calendar_unmark_day" });
        const ret = cFn(self, _day);
        return ret;
    }
    /// signal [day-selected](https://docs.gtk.org/gtk4/signal.Calendar.day-selected.html)
    pub fn connectDaySelected(self: *Calendar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("day-selected", handler, args, flags, &.{ void, *Calendar });
    }
    /// signal [next-month](https://docs.gtk.org/gtk4/signal.Calendar.next-month.html)
    pub fn connectNextMonth(self: *Calendar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("next-month", handler, args, flags, &.{ void, *Calendar });
    }
    /// signal [next-year](https://docs.gtk.org/gtk4/signal.Calendar.next-year.html)
    pub fn connectNextYear(self: *Calendar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("next-year", handler, args, flags, &.{ void, *Calendar });
    }
    /// signal [prev-month](https://docs.gtk.org/gtk4/signal.Calendar.prev-month.html)
    pub fn connectPrevMonth(self: *Calendar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("prev-month", handler, args, flags, &.{ void, *Calendar });
    }
    /// signal [prev-year](https://docs.gtk.org/gtk4/signal.Calendar.prev-year.html)
    pub fn connectPrevYear(self: *Calendar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("prev-year", handler, args, flags, &.{ void, *Calendar });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_calendar_get_type" });
        return cFn();
    }
};
/// Class [CallbackAction](https://docs.gtk.org/gtk4/class.CallbackAction.html)
pub const CallbackAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.CallbackActionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CallbackAction.new.html)
    pub fn new(callback: anytype, callback_args: anytype) *CallbackAction {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ bool, *gtk.Widget, ?*glib.Variant });
        const _callback: ?gtk.ShortcutFunc = @ptrCast(closure_callback.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_callback.c_destroy());
        const cFn = @extern(*const fn (?gtk.ShortcutFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) *CallbackAction, .{ .name = "gtk_callback_action_new" });
        const ret = cFn(_callback, @ptrCast(_data), _destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_callback_action_get_type" });
        return cFn();
    }
};
pub const CallbackActionClass = opaque {};
/// callback [CellAllocCallback](https://docs.gtk.org/gtk4/callback.CellAllocCallback.html)
pub const CellAllocCallback = *const fn (_renderer: *gtk.CellRenderer, _cell_area: *gdk.Rectangle, _cell_background: *gdk.Rectangle, _data: ?*anyopaque) callconv(.c) bool;
/// Deprecated:
/// Class [CellArea](https://docs.gtk.org/gtk4/class.CellArea.html)
/// - property [edit-widget](https://docs.gtk.org/gtk4/property.CellArea.edit-widget.html): (r-) `gtk.CellEditable`
/// - property [edited-cell](https://docs.gtk.org/gtk4/property.CellArea.edited-cell.html): (r-) `gtk.CellRenderer`
/// - property [focus-cell](https://docs.gtk.org/gtk4/property.CellArea.focus-cell.html): (rw) `gtk.CellRenderer`
pub const CellArea = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gobject.InitiallyUnowned,
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.CellLayout };
    pub const Parent = gobject.InitiallyUnowned;
    pub const Class = gtk.CellAreaClass;
    /// Deprecated:
    /// method [activate](https://docs.gtk.org/gtk4/method.CellArea.activate.html)
    pub const activate = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn activate(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _edit_only: bool) bool {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gdk.Rectangle, gtk.CellRendererState, bool) callconv(.c) bool, .{ .name = "gtk_cell_area_activate" });
            const ret = cFn(self, _context, _widget, _cell_area, _flags, _edit_only);
            return ret;
        }
    }.activate;
    /// Deprecated:
    /// method [activate_cell](https://docs.gtk.org/gtk4/method.CellArea.activate_cell.html)
    pub const activateCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn activateCell(self: *CellArea, _widget: *gtk.Widget, _renderer: *gtk.CellRenderer, _event: *gdk.Event, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) bool {
            const cFn = @extern(*const fn (*CellArea, *gtk.Widget, *gtk.CellRenderer, *gdk.Event, *gdk.Rectangle, gtk.CellRendererState) callconv(.c) bool, .{ .name = "gtk_cell_area_activate_cell" });
            const ret = cFn(self, _widget, _renderer, _event, _cell_area, _flags);
            return ret;
        }
    }.activateCell;
    /// Deprecated:
    /// method [add](https://docs.gtk.org/gtk4/method.CellArea.add.html)
    pub const add = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn add(self: *CellArea, _renderer: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_area_add" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.add;
    /// Deprecated:
    /// method [add_focus_sibling](https://docs.gtk.org/gtk4/method.CellArea.add_focus_sibling.html)
    pub const addFocusSibling = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addFocusSibling(self: *CellArea, _renderer: *gtk.CellRenderer, _sibling: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_area_add_focus_sibling" });
            const ret = cFn(self, _renderer, _sibling);
            return ret;
        }
    }.addFocusSibling;
    /// Deprecated:
    /// method [apply_attributes](https://docs.gtk.org/gtk4/method.CellArea.apply_attributes.html)
    pub const applyAttributes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn applyAttributes(self: *CellArea, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _is_expander: bool, _is_expanded: bool) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.TreeModel, *gtk.TreeIter, bool, bool) callconv(.c) void, .{ .name = "gtk_cell_area_apply_attributes" });
            const ret = cFn(self, _tree_model, _iter, _is_expander, _is_expanded);
            return ret;
        }
    }.applyAttributes;
    /// Deprecated:
    /// method [attribute_connect](https://docs.gtk.org/gtk4/method.CellArea.attribute_connect.html)
    pub const attributeConnect = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn attributeConnect(self: *CellArea, _renderer: *gtk.CellRenderer, _attribute: [*:0]const u8, _column: i32) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_cell_area_attribute_connect" });
            const ret = cFn(self, _renderer, _attribute, _column);
            return ret;
        }
    }.attributeConnect;
    /// Deprecated:
    /// method [attribute_disconnect](https://docs.gtk.org/gtk4/method.CellArea.attribute_disconnect.html)
    pub const attributeDisconnect = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn attributeDisconnect(self: *CellArea, _renderer: *gtk.CellRenderer, _attribute: [*:0]const u8) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_cell_area_attribute_disconnect" });
            const ret = cFn(self, _renderer, _attribute);
            return ret;
        }
    }.attributeDisconnect;
    /// Deprecated:
    /// method [attribute_get_column](https://docs.gtk.org/gtk4/method.CellArea.attribute_get_column.html)
    pub const attributeGetColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn attributeGetColumn(self: *CellArea, _renderer: *gtk.CellRenderer, _attribute: [*:0]const u8) i32 {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, [*:0]const u8) callconv(.c) i32, .{ .name = "gtk_cell_area_attribute_get_column" });
            const ret = cFn(self, _renderer, _attribute);
            return ret;
        }
    }.attributeGetColumn;
    /// Deprecated:
    /// method [cell_get_property](https://docs.gtk.org/gtk4/method.CellArea.cell_get_property.html)
    pub const cellGetProperty = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellGetProperty(self: *CellArea, _renderer: *gtk.CellRenderer, _property_name: [*:0]const u8, _value: *gobject.Value) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, [*:0]const u8, *gobject.Value) callconv(.c) void, .{ .name = "gtk_cell_area_cell_get_property" });
            const ret = cFn(self, _renderer, _property_name, _value);
            return ret;
        }
    }.cellGetProperty;
    /// Deprecated:
    /// method [cell_set_property](https://docs.gtk.org/gtk4/method.CellArea.cell_set_property.html)
    pub const cellSetProperty = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellSetProperty(self: *CellArea, _renderer: *gtk.CellRenderer, _property_name: [*:0]const u8, _value: *gobject.Value) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, [*:0]const u8, *gobject.Value) callconv(.c) void, .{ .name = "gtk_cell_area_cell_set_property" });
            const ret = cFn(self, _renderer, _property_name, _value);
            return ret;
        }
    }.cellSetProperty;
    /// Deprecated:
    /// method [copy_context](https://docs.gtk.org/gtk4/method.CellArea.copy_context.html)
    pub const copyContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn copyContext(self: *CellArea, _context: *gtk.CellAreaContext) *gtk.CellAreaContext {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext) callconv(.c) *gtk.CellAreaContext, .{ .name = "gtk_cell_area_copy_context" });
            const ret = cFn(self, _context);
            return ret;
        }
    }.copyContext;
    /// Deprecated:
    /// method [create_context](https://docs.gtk.org/gtk4/method.CellArea.create_context.html)
    pub const createContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn createContext(self: *CellArea) *gtk.CellAreaContext {
            const cFn = @extern(*const fn (*CellArea) callconv(.c) *gtk.CellAreaContext, .{ .name = "gtk_cell_area_create_context" });
            const ret = cFn(self);
            return ret;
        }
    }.createContext;
    /// Deprecated:
    /// method [event](https://docs.gtk.org/gtk4/method.CellArea.event.html)
    pub const event = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn event(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _event: *gdk.Event, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) i32 {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gdk.Event, *gdk.Rectangle, gtk.CellRendererState) callconv(.c) i32, .{ .name = "gtk_cell_area_event" });
            const ret = cFn(self, _context, _widget, _event, _cell_area, _flags);
            return ret;
        }
    }.event;
    /// Deprecated:
    /// method [focus](https://docs.gtk.org/gtk4/method.CellArea.focus.html)
    pub const focus = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn focus(self: *CellArea, _direction: gtk.DirectionType) bool {
            const cFn = @extern(*const fn (*CellArea, gtk.DirectionType) callconv(.c) bool, .{ .name = "gtk_cell_area_focus" });
            const ret = cFn(self, _direction);
            return ret;
        }
    }.focus;
    /// Deprecated:
    /// method [foreach](https://docs.gtk.org/gtk4/method.CellArea.foreach.html)
    pub const foreach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn foreach(self: *CellArea, callback: anytype, callback_args: anytype) void {
            var closure_callback = core.zig_closure(callback, callback_args, &.{ bool, *gtk.CellRenderer });
            defer closure_callback.deinit();
            const _callback: gtk.CellCallback = @ptrCast(closure_callback.c_closure());
            const _callback_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
            const cFn = @extern(*const fn (*CellArea, gtk.CellCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_cell_area_foreach" });
            const ret = cFn(self, _callback, @ptrCast(_callback_data));
            return ret;
        }
    }.foreach;
    /// method [foreach_alloc](https://docs.gtk.org/gtk4/method.CellArea.foreach_alloc.html)
    pub fn foreachAlloc(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _background_area: *gdk.Rectangle, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ bool, *gtk.CellRenderer, *gdk.Rectangle, *gdk.Rectangle });
        defer closure_callback.deinit();
        const _callback: gtk.CellAllocCallback = @ptrCast(closure_callback.c_closure());
        const _callback_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gdk.Rectangle, *gdk.Rectangle, gtk.CellAllocCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_cell_area_foreach_alloc" });
        const ret = cFn(self, _context, _widget, _cell_area, _background_area, _callback, @ptrCast(_callback_data));
        return ret;
    }
    /// Deprecated:
    /// method [get_cell_allocation](https://docs.gtk.org/gtk4/method.CellArea.get_cell_allocation.html)
    pub const getCellAllocation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCellAllocation(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _renderer: *gtk.CellRenderer, _cell_area: *gdk.Rectangle, _allocation: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gtk.CellRenderer, *gdk.Rectangle, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_cell_area_get_cell_allocation" });
            const ret = cFn(self, _context, _widget, _renderer, _cell_area, _allocation);
            return ret;
        }
    }.getCellAllocation;
    /// Deprecated:
    /// method [get_cell_at_position](https://docs.gtk.org/gtk4/method.CellArea.get_cell_at_position.html)
    pub const getCellAtPosition = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCellAtPosition(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _x: i32, _y: i32, _alloc_area: ?*gdk.Rectangle) *gtk.CellRenderer {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gdk.Rectangle, i32, i32, ?*gdk.Rectangle) callconv(.c) *gtk.CellRenderer, .{ .name = "gtk_cell_area_get_cell_at_position" });
            const ret = cFn(self, _context, _widget, _cell_area, _x, _y, _alloc_area);
            return ret;
        }
    }.getCellAtPosition;
    /// method [get_current_path_string](https://docs.gtk.org/gtk4/method.CellArea.get_current_path_string.html)
    pub fn getCurrentPathString(self: *CellArea) [*:0]u8 {
        const cFn = @extern(*const fn (*CellArea) callconv(.c) [*:0]u8, .{ .name = "gtk_cell_area_get_current_path_string" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_edit_widget](https://docs.gtk.org/gtk4/method.CellArea.get_edit_widget.html)
    pub const getEditWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEditWidget(self: *CellArea) ?*gtk.CellEditable {
            const cFn = @extern(*const fn (*CellArea) callconv(.c) ?*gtk.CellEditable, .{ .name = "gtk_cell_area_get_edit_widget" });
            const ret = cFn(self);
            return ret;
        }
    }.getEditWidget;
    /// Deprecated:
    /// method [get_edited_cell](https://docs.gtk.org/gtk4/method.CellArea.get_edited_cell.html)
    pub const getEditedCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEditedCell(self: *CellArea) ?*gtk.CellRenderer {
            const cFn = @extern(*const fn (*CellArea) callconv(.c) ?*gtk.CellRenderer, .{ .name = "gtk_cell_area_get_edited_cell" });
            const ret = cFn(self);
            return ret;
        }
    }.getEditedCell;
    /// Deprecated:
    /// method [get_focus_cell](https://docs.gtk.org/gtk4/method.CellArea.get_focus_cell.html)
    pub const getFocusCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFocusCell(self: *CellArea) ?*gtk.CellRenderer {
            const cFn = @extern(*const fn (*CellArea) callconv(.c) ?*gtk.CellRenderer, .{ .name = "gtk_cell_area_get_focus_cell" });
            const ret = cFn(self);
            return ret;
        }
    }.getFocusCell;
    /// Deprecated:
    /// method [get_focus_from_sibling](https://docs.gtk.org/gtk4/method.CellArea.get_focus_from_sibling.html)
    pub const getFocusFromSibling = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFocusFromSibling(self: *CellArea, _renderer: *gtk.CellRenderer) ?*gtk.CellRenderer {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer) callconv(.c) ?*gtk.CellRenderer, .{ .name = "gtk_cell_area_get_focus_from_sibling" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.getFocusFromSibling;
    /// Deprecated:
    /// method [get_focus_siblings](https://docs.gtk.org/gtk4/method.CellArea.get_focus_siblings.html)
    pub const getFocusSiblings = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFocusSiblings(self: *CellArea, _renderer: *gtk.CellRenderer) ?*core.List {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer) callconv(.c) ?*core.List, .{ .name = "gtk_cell_area_get_focus_siblings" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.getFocusSiblings;
    /// Deprecated:
    /// method [get_preferred_height](https://docs.gtk.org/gtk4/method.CellArea.get_preferred_height.html)
    pub const getPreferredHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeight(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget) struct {
            ret: void,
            minimum_height: i32,
            natural_height: i32,
        } {
            var minimum_height_out: i32 = undefined;
            const _minimum_height = &minimum_height_out;
            var natural_height_out: i32 = undefined;
            const _natural_height = &natural_height_out;
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_get_preferred_height" });
            const ret = cFn(self, _context, _widget, _minimum_height, _natural_height);
            return .{ .ret = ret, .minimum_height = minimum_height_out, .natural_height = natural_height_out };
        }
    }.getPreferredHeight;
    /// Deprecated:
    /// method [get_preferred_height_for_width](https://docs.gtk.org/gtk4/method.CellArea.get_preferred_height_for_width.html)
    pub const getPreferredHeightForWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeightForWidth(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _width: i32) struct {
            ret: void,
            minimum_height: i32,
            natural_height: i32,
        } {
            var minimum_height_out: i32 = undefined;
            const _minimum_height = &minimum_height_out;
            var natural_height_out: i32 = undefined;
            const _natural_height = &natural_height_out;
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_get_preferred_height_for_width" });
            const ret = cFn(self, _context, _widget, _width, _minimum_height, _natural_height);
            return .{ .ret = ret, .minimum_height = minimum_height_out, .natural_height = natural_height_out };
        }
    }.getPreferredHeightForWidth;
    /// Deprecated:
    /// method [get_preferred_width](https://docs.gtk.org/gtk4/method.CellArea.get_preferred_width.html)
    pub const getPreferredWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidth(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget) struct {
            ret: void,
            minimum_width: i32,
            natural_width: i32,
        } {
            var minimum_width_out: i32 = undefined;
            const _minimum_width = &minimum_width_out;
            var natural_width_out: i32 = undefined;
            const _natural_width = &natural_width_out;
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_get_preferred_width" });
            const ret = cFn(self, _context, _widget, _minimum_width, _natural_width);
            return .{ .ret = ret, .minimum_width = minimum_width_out, .natural_width = natural_width_out };
        }
    }.getPreferredWidth;
    /// Deprecated:
    /// method [get_preferred_width_for_height](https://docs.gtk.org/gtk4/method.CellArea.get_preferred_width_for_height.html)
    pub const getPreferredWidthForHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidthForHeight(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _height: i32) struct {
            ret: void,
            minimum_width: i32,
            natural_width: i32,
        } {
            var minimum_width_out: i32 = undefined;
            const _minimum_width = &minimum_width_out;
            var natural_width_out: i32 = undefined;
            const _natural_width = &natural_width_out;
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_get_preferred_width_for_height" });
            const ret = cFn(self, _context, _widget, _height, _minimum_width, _natural_width);
            return .{ .ret = ret, .minimum_width = minimum_width_out, .natural_width = natural_width_out };
        }
    }.getPreferredWidthForHeight;
    /// method [get_request_mode](https://docs.gtk.org/gtk4/method.CellArea.get_request_mode.html)
    pub fn getRequestMode(self: *CellArea) gtk.SizeRequestMode {
        const cFn = @extern(*const fn (*CellArea) callconv(.c) gtk.SizeRequestMode, .{ .name = "gtk_cell_area_get_request_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [has_renderer](https://docs.gtk.org/gtk4/method.CellArea.has_renderer.html)
    pub const hasRenderer = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn hasRenderer(self: *CellArea, _renderer: *gtk.CellRenderer) bool {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_area_has_renderer" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.hasRenderer;
    /// Deprecated:
    /// method [inner_cell_area](https://docs.gtk.org/gtk4/method.CellArea.inner_cell_area.html)
    pub const innerCellArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn innerCellArea(self: *CellArea, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _inner_area: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.Widget, *gdk.Rectangle, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_cell_area_inner_cell_area" });
            const ret = cFn(self, _widget, _cell_area, _inner_area);
            return ret;
        }
    }.innerCellArea;
    /// Deprecated:
    /// method [is_activatable](https://docs.gtk.org/gtk4/method.CellArea.is_activatable.html)
    pub const isActivatable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isActivatable(self: *CellArea) bool {
            const cFn = @extern(*const fn (*CellArea) callconv(.c) bool, .{ .name = "gtk_cell_area_is_activatable" });
            const ret = cFn(self);
            return ret;
        }
    }.isActivatable;
    /// Deprecated:
    /// method [is_focus_sibling](https://docs.gtk.org/gtk4/method.CellArea.is_focus_sibling.html)
    pub const isFocusSibling = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isFocusSibling(self: *CellArea, _renderer: *gtk.CellRenderer, _sibling: *gtk.CellRenderer) bool {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, *gtk.CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_area_is_focus_sibling" });
            const ret = cFn(self, _renderer, _sibling);
            return ret;
        }
    }.isFocusSibling;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gtk4/method.CellArea.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *CellArea, _renderer: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_area_remove" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [remove_focus_sibling](https://docs.gtk.org/gtk4/method.CellArea.remove_focus_sibling.html)
    pub const removeFocusSibling = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeFocusSibling(self: *CellArea, _renderer: *gtk.CellRenderer, _sibling: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_area_remove_focus_sibling" });
            const ret = cFn(self, _renderer, _sibling);
            return ret;
        }
    }.removeFocusSibling;
    /// Deprecated:
    /// method [request_renderer](https://docs.gtk.org/gtk4/method.CellArea.request_renderer.html)
    pub const requestRenderer = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn requestRenderer(self: *CellArea, _renderer: *gtk.CellRenderer, _orientation: gtk.Orientation, _widget: *gtk.Widget, _for_size: i32) struct {
            ret: void,
            minimum_size: i32,
            natural_size: i32,
        } {
            var minimum_size_out: i32 = undefined;
            const _minimum_size = &minimum_size_out;
            var natural_size_out: i32 = undefined;
            const _natural_size = &natural_size_out;
            const cFn = @extern(*const fn (*CellArea, *gtk.CellRenderer, gtk.Orientation, *gtk.Widget, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_request_renderer" });
            const ret = cFn(self, _renderer, _orientation, _widget, _for_size, _minimum_size, _natural_size);
            return .{ .ret = ret, .minimum_size = minimum_size_out, .natural_size = natural_size_out };
        }
    }.requestRenderer;
    /// Deprecated:
    /// method [set_focus_cell](https://docs.gtk.org/gtk4/method.CellArea.set_focus_cell.html)
    pub const setFocusCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFocusCell(self: *CellArea, _renderer: ?*gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellArea, ?*gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_area_set_focus_cell" });
            const ret = cFn(self, _renderer);
            return ret;
        }
    }.setFocusCell;
    /// Deprecated:
    /// method [snapshot](https://docs.gtk.org/gtk4/method.CellArea.snapshot.html)
    pub const snapshot = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn snapshot(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _snapshot: *gtk.Snapshot, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _paint_focus: bool) void {
            const cFn = @extern(*const fn (*CellArea, *gtk.CellAreaContext, *gtk.Widget, *gtk.Snapshot, *gdk.Rectangle, *gdk.Rectangle, gtk.CellRendererState, bool) callconv(.c) void, .{ .name = "gtk_cell_area_snapshot" });
            const ret = cFn(self, _context, _widget, _snapshot, _background_area, _cell_area, _flags, _paint_focus);
            return ret;
        }
    }.snapshot;
    /// Deprecated:
    /// method [stop_editing](https://docs.gtk.org/gtk4/method.CellArea.stop_editing.html)
    pub const stopEditing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn stopEditing(self: *CellArea, _canceled: bool) void {
            const cFn = @extern(*const fn (*CellArea, bool) callconv(.c) void, .{ .name = "gtk_cell_area_stop_editing" });
            const ret = cFn(self, _canceled);
            return ret;
        }
    }.stopEditing;
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.CellArea.activate.html)
    pub fn activateV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _edit_only: bool) bool {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self, _context, _widget, _cell_area, _flags, _edit_only);
        return ret;
    }
    /// vfunc [add](https://docs.gtk.org/gtk4/vfunc.CellArea.add.html)
    pub fn addV(self: *CellArea, _renderer: *gtk.CellRenderer) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add.?;
        const ret = vFn(self, _renderer);
        return ret;
    }
    /// vfunc [apply_attributes](https://docs.gtk.org/gtk4/vfunc.CellArea.apply_attributes.html)
    pub fn applyAttributesV(self: *CellArea, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _is_expander: bool, _is_expanded: bool) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.apply_attributes.?;
        const ret = vFn(self, _tree_model, _iter, _is_expander, _is_expanded);
        return ret;
    }
    /// vfunc [copy_context](https://docs.gtk.org/gtk4/vfunc.CellArea.copy_context.html)
    pub fn copyContextV(self: *CellArea, _context: *gtk.CellAreaContext) *gtk.CellAreaContext {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy_context.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [create_context](https://docs.gtk.org/gtk4/vfunc.CellArea.create_context.html)
    pub fn createContextV(self: *CellArea) *gtk.CellAreaContext {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_context.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [event](https://docs.gtk.org/gtk4/vfunc.CellArea.event.html)
    pub fn eventV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _event: *gdk.Event, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) i32 {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.event.?;
        const ret = vFn(self, _context, _widget, _event, _cell_area, _flags);
        return ret;
    }
    /// vfunc [focus](https://docs.gtk.org/gtk4/vfunc.CellArea.focus.html)
    pub fn focusV(self: *CellArea, _direction: gtk.DirectionType) bool {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.focus.?;
        const ret = vFn(self, _direction);
        return ret;
    }
    /// vfunc [foreach](https://docs.gtk.org/gtk4/vfunc.CellArea.foreach.html)
    pub fn foreachV(self: *CellArea, _callback: gtk.CellCallback, _callback_data: ?*anyopaque) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.foreach.?;
        const ret = vFn(self, _callback, @ptrCast(_callback_data));
        return ret;
    }
    /// vfunc [foreach_alloc](https://docs.gtk.org/gtk4/vfunc.CellArea.foreach_alloc.html)
    pub fn foreachAllocV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _background_area: *gdk.Rectangle, _callback: gtk.CellAllocCallback, _callback_data: ?*anyopaque) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.foreach_alloc.?;
        const ret = vFn(self, _context, _widget, _cell_area, _background_area, _callback, @ptrCast(_callback_data));
        return ret;
    }
    /// vfunc [get_cell_property](https://docs.gtk.org/gtk4/vfunc.CellArea.get_cell_property.html)
    pub fn getCellPropertyV(self: *CellArea, _renderer: *gtk.CellRenderer, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_cell_property.?;
        const ret = vFn(self, _renderer, _property_id, _value, _pspec);
        return ret;
    }
    /// vfunc [get_preferred_height](https://docs.gtk.org/gtk4/vfunc.CellArea.get_preferred_height.html)
    pub fn getPreferredHeightV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _minimum_height: ?*i32, _natural_height: ?*i32) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_height.?;
        const ret = vFn(self, _context, _widget, _minimum_height, _natural_height);
        return ret;
    }
    /// vfunc [get_preferred_height_for_width](https://docs.gtk.org/gtk4/vfunc.CellArea.get_preferred_height_for_width.html)
    pub fn getPreferredHeightForWidthV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_height_for_width.?;
        const ret = vFn(self, _context, _widget, _width, _minimum_height, _natural_height);
        return ret;
    }
    /// vfunc [get_preferred_width](https://docs.gtk.org/gtk4/vfunc.CellArea.get_preferred_width.html)
    pub fn getPreferredWidthV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _minimum_width: ?*i32, _natural_width: ?*i32) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_width.?;
        const ret = vFn(self, _context, _widget, _minimum_width, _natural_width);
        return ret;
    }
    /// vfunc [get_preferred_width_for_height](https://docs.gtk.org/gtk4/vfunc.CellArea.get_preferred_width_for_height.html)
    pub fn getPreferredWidthForHeightV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_width_for_height.?;
        const ret = vFn(self, _context, _widget, _height, _minimum_width, _natural_width);
        return ret;
    }
    /// vfunc [get_request_mode](https://docs.gtk.org/gtk4/vfunc.CellArea.get_request_mode.html)
    pub fn getRequestModeV(self: *CellArea) gtk.SizeRequestMode {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_request_mode.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [is_activatable](https://docs.gtk.org/gtk4/vfunc.CellArea.is_activatable.html)
    pub fn isActivatableV(self: *CellArea) bool {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_activatable.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [remove](https://docs.gtk.org/gtk4/vfunc.CellArea.remove.html)
    pub fn removeV(self: *CellArea, _renderer: *gtk.CellRenderer) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove.?;
        const ret = vFn(self, _renderer);
        return ret;
    }
    /// vfunc [set_cell_property](https://docs.gtk.org/gtk4/vfunc.CellArea.set_cell_property.html)
    pub fn setCellPropertyV(self: *CellArea, _renderer: *gtk.CellRenderer, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_cell_property.?;
        const ret = vFn(self, _renderer, _property_id, _value, _pspec);
        return ret;
    }
    /// vfunc [snapshot](https://docs.gtk.org/gtk4/vfunc.CellArea.snapshot.html)
    pub fn snapshotV(self: *CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _snapshot: *gtk.Snapshot, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _paint_focus: bool) void {
        const class: *CellAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot.?;
        const ret = vFn(self, _context, _widget, _snapshot, _background_area, _cell_area, _flags, _paint_focus);
        return ret;
    }
    /// signal [add-editable](https://docs.gtk.org/gtk4/signal.CellArea.add-editable.html)
    pub fn connectAddEditable(self: *CellArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("add-editable", handler, args, flags, &.{ void, *CellArea, *gtk.CellRenderer, *gtk.CellEditable, *gdk.Rectangle, [*:0]const u8 });
    }
    /// signal [apply-attributes](https://docs.gtk.org/gtk4/signal.CellArea.apply-attributes.html)
    pub fn connectApplyAttributes(self: *CellArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("apply-attributes", handler, args, flags, &.{ void, *CellArea, *gtk.TreeModel, *gtk.TreeIter, bool, bool });
    }
    /// signal [focus-changed](https://docs.gtk.org/gtk4/signal.CellArea.focus-changed.html)
    pub fn connectFocusChanged(self: *CellArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("focus-changed", handler, args, flags, &.{ void, *CellArea, *gtk.CellRenderer, [*:0]const u8 });
    }
    /// signal [remove-editable](https://docs.gtk.org/gtk4/signal.CellArea.remove-editable.html)
    pub fn connectRemoveEditable(self: *CellArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("remove-editable", handler, args, flags, &.{ void, *CellArea, *gtk.CellRenderer, *gtk.CellEditable });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_area_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellAreaBox](https://docs.gtk.org/gtk4/class.CellAreaBox.html)
/// - property [spacing](https://docs.gtk.org/gtk4/property.CellAreaBox.spacing.html): (rw) `i32`
pub const CellAreaBox = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.CellLayout, gtk.Orientable };
    pub const Parent = gtk.CellArea;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellAreaBox.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellAreaBox {
            const cFn = @extern(*const fn () callconv(.c) *CellAreaBox, .{ .name = "gtk_cell_area_box_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_spacing](https://docs.gtk.org/gtk4/method.CellAreaBox.get_spacing.html)
    pub const getSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSpacing(self: *CellAreaBox) i32 {
            const cFn = @extern(*const fn (*CellAreaBox) callconv(.c) i32, .{ .name = "gtk_cell_area_box_get_spacing" });
            const ret = cFn(self);
            return ret;
        }
    }.getSpacing;
    /// Deprecated:
    /// method [pack_end](https://docs.gtk.org/gtk4/method.CellAreaBox.pack_end.html)
    pub const packEnd = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packEnd(self: *CellAreaBox, _renderer: *gtk.CellRenderer, _expand: bool, _align: bool, _fixed: bool) void {
            const cFn = @extern(*const fn (*CellAreaBox, *gtk.CellRenderer, bool, bool, bool) callconv(.c) void, .{ .name = "gtk_cell_area_box_pack_end" });
            const ret = cFn(self, _renderer, _expand, _align, _fixed);
            return ret;
        }
    }.packEnd;
    /// Deprecated:
    /// method [pack_start](https://docs.gtk.org/gtk4/method.CellAreaBox.pack_start.html)
    pub const packStart = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packStart(self: *CellAreaBox, _renderer: *gtk.CellRenderer, _expand: bool, _align: bool, _fixed: bool) void {
            const cFn = @extern(*const fn (*CellAreaBox, *gtk.CellRenderer, bool, bool, bool) callconv(.c) void, .{ .name = "gtk_cell_area_box_pack_start" });
            const ret = cFn(self, _renderer, _expand, _align, _fixed);
            return ret;
        }
    }.packStart;
    /// Deprecated:
    /// method [set_spacing](https://docs.gtk.org/gtk4/method.CellAreaBox.set_spacing.html)
    pub const setSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSpacing(self: *CellAreaBox, _spacing: i32) void {
            const cFn = @extern(*const fn (*CellAreaBox, i32) callconv(.c) void, .{ .name = "gtk_cell_area_box_set_spacing" });
            const ret = cFn(self, _spacing);
            return ret;
        }
    }.setSpacing;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_area_box_get_type" });
        return cFn();
    }
};
pub const CellAreaClass = extern struct {
    parent_class: gobject.InitiallyUnownedClass,
    add: ?*const fn (_area: *gtk.CellArea, _renderer: *gtk.CellRenderer) callconv(.c) void,
    remove: ?*const fn (_area: *gtk.CellArea, _renderer: *gtk.CellRenderer) callconv(.c) void,
    foreach: ?*const fn (_area: *gtk.CellArea, _callback: gtk.CellCallback, _callback_data: ?*anyopaque) callconv(.c) void,
    foreach_alloc: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _background_area: *gdk.Rectangle, _callback: gtk.CellAllocCallback, _callback_data: ?*anyopaque) callconv(.c) void,
    event: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _event: *gdk.Event, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) callconv(.c) i32,
    snapshot: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _snapshot: *gtk.Snapshot, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _paint_focus: bool) callconv(.c) void,
    apply_attributes: ?*const fn (_area: *gtk.CellArea, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _is_expander: bool, _is_expanded: bool) callconv(.c) void,
    create_context: ?*const fn (_area: *gtk.CellArea) callconv(.c) *gtk.CellAreaContext,
    copy_context: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext) callconv(.c) *gtk.CellAreaContext,
    get_request_mode: ?*const fn (_area: *gtk.CellArea) callconv(.c) gtk.SizeRequestMode,
    get_preferred_width: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _minimum_width: ?*i32, _natural_width: ?*i32) callconv(.c) void,
    get_preferred_height_for_width: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) callconv(.c) void,
    get_preferred_height: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _minimum_height: ?*i32, _natural_height: ?*i32) callconv(.c) void,
    get_preferred_width_for_height: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) callconv(.c) void,
    set_cell_property: ?*const fn (_area: *gtk.CellArea, _renderer: *gtk.CellRenderer, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    get_cell_property: ?*const fn (_area: *gtk.CellArea, _renderer: *gtk.CellRenderer, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    focus: ?*const fn (_area: *gtk.CellArea, _direction: gtk.DirectionType) callconv(.c) bool,
    is_activatable: ?*const fn (_area: *gtk.CellArea) callconv(.c) bool,
    activate: ?*const fn (_area: *gtk.CellArea, _context: *gtk.CellAreaContext, _widget: *gtk.Widget, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState, _edit_only: bool) callconv(.c) bool,
    padding: [8]?*anyopaque,
    /// Deprecated:
    /// class method [find_cell_property](https://docs.gtk.org/gtk4/class_method.CellAreaClass.find_cell_property.html)
    pub const findCellProperty = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn findCellProperty(self: *CellAreaClass, _property_name: [*:0]const u8) *gobject.ParamSpec {
            const cFn = @extern(*const fn (*CellAreaClass, [*:0]const u8) callconv(.c) *gobject.ParamSpec, .{ .name = "gtk_cell_area_class_find_cell_property" });
            const ret = cFn(self, _property_name);
            return ret;
        }
    }.findCellProperty;
    /// Deprecated:
    /// class method [install_cell_property](https://docs.gtk.org/gtk4/class_method.CellAreaClass.install_cell_property.html)
    pub const installCellProperty = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn installCellProperty(self: *CellAreaClass, _property_id: u32, _pspec: *gobject.ParamSpec) void {
            const cFn = @extern(*const fn (*CellAreaClass, u32, *gobject.ParamSpec) callconv(.c) void, .{ .name = "gtk_cell_area_class_install_cell_property" });
            const ret = cFn(self, _property_id, _pspec);
            return ret;
        }
    }.installCellProperty;
    /// Deprecated:
    /// class method [list_cell_properties](https://docs.gtk.org/gtk4/class_method.CellAreaClass.list_cell_properties.html)
    pub const listCellProperties = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn listCellProperties(self: *CellAreaClass) struct {
            ret: [*]*gobject.ParamSpec,
            n_properties: u32,
        } {
            var n_properties_out: u32 = undefined;
            const _n_properties = &n_properties_out;
            const cFn = @extern(*const fn (*CellAreaClass, *u32) callconv(.c) [*]*gobject.ParamSpec, .{ .name = "gtk_cell_area_class_list_cell_properties" });
            const ret = cFn(self, _n_properties);
            return .{ .ret = ret, .n_properties = n_properties_out };
        }
    }.listCellProperties;
};
/// Deprecated:
/// Class [CellAreaContext](https://docs.gtk.org/gtk4/class.CellAreaContext.html)
/// - property [area](https://docs.gtk.org/gtk4/property.CellAreaContext.area.html): (r-) `gtk.CellArea`
/// - property [minimum-height](https://docs.gtk.org/gtk4/property.CellAreaContext.minimum-height.html): (r-) `i32`
/// - property [minimum-width](https://docs.gtk.org/gtk4/property.CellAreaContext.minimum-width.html): (r-) `i32`
/// - property [natural-height](https://docs.gtk.org/gtk4/property.CellAreaContext.natural-height.html): (r-) `i32`
/// - property [natural-width](https://docs.gtk.org/gtk4/property.CellAreaContext.natural-width.html): (r-) `i32`
pub const CellAreaContext = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.CellAreaContextClass;
    /// Deprecated:
    /// method [allocate](https://docs.gtk.org/gtk4/method.CellAreaContext.allocate.html)
    pub const allocate = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn allocate(self: *CellAreaContext, _width: i32, _height: i32) void {
            const cFn = @extern(*const fn (*CellAreaContext, i32, i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_allocate" });
            const ret = cFn(self, _width, _height);
            return ret;
        }
    }.allocate;
    /// Deprecated:
    /// method [get_allocation](https://docs.gtk.org/gtk4/method.CellAreaContext.get_allocation.html)
    pub const getAllocation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAllocation(self: *CellAreaContext) struct {
            ret: void,
            width: i32,
            height: i32,
        } {
            var width_out: i32 = undefined;
            const _width = &width_out;
            var height_out: i32 = undefined;
            const _height = &height_out;
            const cFn = @extern(*const fn (*CellAreaContext, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_get_allocation" });
            const ret = cFn(self, _width, _height);
            return .{ .ret = ret, .width = width_out, .height = height_out };
        }
    }.getAllocation;
    /// Deprecated:
    /// method [get_area](https://docs.gtk.org/gtk4/method.CellAreaContext.get_area.html)
    pub const getArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getArea(self: *CellAreaContext) *gtk.CellArea {
            const cFn = @extern(*const fn (*CellAreaContext) callconv(.c) *gtk.CellArea, .{ .name = "gtk_cell_area_context_get_area" });
            const ret = cFn(self);
            return ret;
        }
    }.getArea;
    /// Deprecated:
    /// method [get_preferred_height](https://docs.gtk.org/gtk4/method.CellAreaContext.get_preferred_height.html)
    pub const getPreferredHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeight(self: *CellAreaContext) struct {
            ret: void,
            minimum_height: i32,
            natural_height: i32,
        } {
            var minimum_height_out: i32 = undefined;
            const _minimum_height = &minimum_height_out;
            var natural_height_out: i32 = undefined;
            const _natural_height = &natural_height_out;
            const cFn = @extern(*const fn (*CellAreaContext, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_get_preferred_height" });
            const ret = cFn(self, _minimum_height, _natural_height);
            return .{ .ret = ret, .minimum_height = minimum_height_out, .natural_height = natural_height_out };
        }
    }.getPreferredHeight;
    /// Deprecated:
    /// method [get_preferred_height_for_width](https://docs.gtk.org/gtk4/method.CellAreaContext.get_preferred_height_for_width.html)
    pub const getPreferredHeightForWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeightForWidth(self: *CellAreaContext, _width: i32) struct {
            ret: void,
            minimum_height: i32,
            natural_height: i32,
        } {
            var minimum_height_out: i32 = undefined;
            const _minimum_height = &minimum_height_out;
            var natural_height_out: i32 = undefined;
            const _natural_height = &natural_height_out;
            const cFn = @extern(*const fn (*CellAreaContext, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_get_preferred_height_for_width" });
            const ret = cFn(self, _width, _minimum_height, _natural_height);
            return .{ .ret = ret, .minimum_height = minimum_height_out, .natural_height = natural_height_out };
        }
    }.getPreferredHeightForWidth;
    /// Deprecated:
    /// method [get_preferred_width](https://docs.gtk.org/gtk4/method.CellAreaContext.get_preferred_width.html)
    pub const getPreferredWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidth(self: *CellAreaContext) struct {
            ret: void,
            minimum_width: i32,
            natural_width: i32,
        } {
            var minimum_width_out: i32 = undefined;
            const _minimum_width = &minimum_width_out;
            var natural_width_out: i32 = undefined;
            const _natural_width = &natural_width_out;
            const cFn = @extern(*const fn (*CellAreaContext, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_get_preferred_width" });
            const ret = cFn(self, _minimum_width, _natural_width);
            return .{ .ret = ret, .minimum_width = minimum_width_out, .natural_width = natural_width_out };
        }
    }.getPreferredWidth;
    /// Deprecated:
    /// method [get_preferred_width_for_height](https://docs.gtk.org/gtk4/method.CellAreaContext.get_preferred_width_for_height.html)
    pub const getPreferredWidthForHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidthForHeight(self: *CellAreaContext, _height: i32) struct {
            ret: void,
            minimum_width: i32,
            natural_width: i32,
        } {
            var minimum_width_out: i32 = undefined;
            const _minimum_width = &minimum_width_out;
            var natural_width_out: i32 = undefined;
            const _natural_width = &natural_width_out;
            const cFn = @extern(*const fn (*CellAreaContext, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_get_preferred_width_for_height" });
            const ret = cFn(self, _height, _minimum_width, _natural_width);
            return .{ .ret = ret, .minimum_width = minimum_width_out, .natural_width = natural_width_out };
        }
    }.getPreferredWidthForHeight;
    /// Deprecated:
    /// method [push_preferred_height](https://docs.gtk.org/gtk4/method.CellAreaContext.push_preferred_height.html)
    pub const pushPreferredHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pushPreferredHeight(self: *CellAreaContext, _minimum_height: i32, _natural_height: i32) void {
            const cFn = @extern(*const fn (*CellAreaContext, i32, i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_push_preferred_height" });
            const ret = cFn(self, _minimum_height, _natural_height);
            return ret;
        }
    }.pushPreferredHeight;
    /// Deprecated:
    /// method [push_preferred_width](https://docs.gtk.org/gtk4/method.CellAreaContext.push_preferred_width.html)
    pub const pushPreferredWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pushPreferredWidth(self: *CellAreaContext, _minimum_width: i32, _natural_width: i32) void {
            const cFn = @extern(*const fn (*CellAreaContext, i32, i32) callconv(.c) void, .{ .name = "gtk_cell_area_context_push_preferred_width" });
            const ret = cFn(self, _minimum_width, _natural_width);
            return ret;
        }
    }.pushPreferredWidth;
    /// Deprecated:
    /// method [reset](https://docs.gtk.org/gtk4/method.CellAreaContext.reset.html)
    pub const reset = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn reset(self: *CellAreaContext) void {
            const cFn = @extern(*const fn (*CellAreaContext) callconv(.c) void, .{ .name = "gtk_cell_area_context_reset" });
            const ret = cFn(self);
            return ret;
        }
    }.reset;
    /// vfunc [allocate](https://docs.gtk.org/gtk4/vfunc.CellAreaContext.allocate.html)
    pub fn allocateV(self: *CellAreaContext, _width: i32, _height: i32) void {
        const class: *CellAreaContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.allocate.?;
        const ret = vFn(self, _width, _height);
        return ret;
    }
    /// vfunc [get_preferred_height_for_width](https://docs.gtk.org/gtk4/vfunc.CellAreaContext.get_preferred_height_for_width.html)
    pub fn getPreferredHeightForWidthV(self: *CellAreaContext, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) void {
        const class: *CellAreaContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_height_for_width.?;
        const ret = vFn(self, _width, _minimum_height, _natural_height);
        return ret;
    }
    /// vfunc [get_preferred_width_for_height](https://docs.gtk.org/gtk4/vfunc.CellAreaContext.get_preferred_width_for_height.html)
    pub fn getPreferredWidthForHeightV(self: *CellAreaContext, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) void {
        const class: *CellAreaContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_width_for_height.?;
        const ret = vFn(self, _height, _minimum_width, _natural_width);
        return ret;
    }
    /// vfunc [reset](https://docs.gtk.org/gtk4/vfunc.CellAreaContext.reset.html)
    pub fn resetV(self: *CellAreaContext) void {
        const class: *CellAreaContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reset.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_area_context_get_type" });
        return cFn();
    }
};
pub const CellAreaContextClass = extern struct {
    parent_class: gobject.ObjectClass,
    allocate: ?*const fn (_context: *gtk.CellAreaContext, _width: i32, _height: i32) callconv(.c) void,
    reset: ?*const fn (_context: *gtk.CellAreaContext) callconv(.c) void,
    get_preferred_height_for_width: ?*const fn (_context: *gtk.CellAreaContext, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) callconv(.c) void,
    get_preferred_width_for_height: ?*const fn (_context: *gtk.CellAreaContext, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) callconv(.c) void,
    padding: [8]?*anyopaque,
};
pub const CellAreaContextPrivate = opaque {};
/// callback [CellCallback](https://docs.gtk.org/gtk4/callback.CellCallback.html)
pub const CellCallback = *const fn (_renderer: *gtk.CellRenderer, _data: ?*anyopaque) callconv(.c) bool;
/// Deprecated:
/// Iface [CellEditable](https://docs.gtk.org/gtk4/iface.CellEditable.html)
/// - property [editing-canceled](https://docs.gtk.org/gtk4/property.CellEditable.editing-canceled.html): (rw) `bool`
pub const CellEditable = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Prerequisites = [_]type{gtk.Widget};
    /// Deprecated:
    /// method [editing_done](https://docs.gtk.org/gtk4/method.CellEditable.editing_done.html)
    pub const editingDone = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn editingDone(self: *CellEditable) void {
            const cFn = @extern(*const fn (*CellEditable) callconv(.c) void, .{ .name = "gtk_cell_editable_editing_done" });
            const ret = cFn(self);
            return ret;
        }
    }.editingDone;
    /// Deprecated:
    /// method [remove_widget](https://docs.gtk.org/gtk4/method.CellEditable.remove_widget.html)
    pub const removeWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeWidget(self: *CellEditable) void {
            const cFn = @extern(*const fn (*CellEditable) callconv(.c) void, .{ .name = "gtk_cell_editable_remove_widget" });
            const ret = cFn(self);
            return ret;
        }
    }.removeWidget;
    /// method [start_editing](https://docs.gtk.org/gtk4/method.CellEditable.start_editing.html)
    pub fn startEditing(self: *CellEditable, _event: ?*gdk.Event) void {
        const cFn = @extern(*const fn (*CellEditable, ?*gdk.Event) callconv(.c) void, .{ .name = "gtk_cell_editable_start_editing" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// vfunc [editing_done](https://docs.gtk.org/gtk4/vfunc.CellEditable.editing_done.html)
    pub fn editingDoneV(self: *CellEditable) void {
        const class: *CellEditableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.editing_done.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [remove_widget](https://docs.gtk.org/gtk4/vfunc.CellEditable.remove_widget.html)
    pub fn removeWidgetV(self: *CellEditable) void {
        const class: *CellEditableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove_widget.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [start_editing](https://docs.gtk.org/gtk4/vfunc.CellEditable.start_editing.html)
    pub fn startEditingV(self: *CellEditable, _event: ?*gdk.Event) void {
        const class: *CellEditableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_editing.?;
        const ret = vFn(self, _event);
        return ret;
    }
    /// signal [editing-done](https://docs.gtk.org/gtk4/signal.CellEditable.editing-done.html)
    pub fn connectEditingDone(self: *CellEditable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("editing-done", handler, args, flags, &.{ void, *CellEditable });
    }
    /// signal [remove-widget](https://docs.gtk.org/gtk4/signal.CellEditable.remove-widget.html)
    pub fn connectRemoveWidget(self: *CellEditable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("remove-widget", handler, args, flags, &.{ void, *CellEditable });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_editable_get_type" });
        return cFn();
    }
};
/// Struct [CellEditableIface](https://docs.gtk.org/gtk4/struct.CellEditableIface.html)
pub const CellEditableIface = extern struct {
    g_iface: gobject.TypeInterface,
    editing_done: ?*const fn (_cell_editable: *gtk.CellEditable) callconv(.c) void,
    remove_widget: ?*const fn (_cell_editable: *gtk.CellEditable) callconv(.c) void,
    start_editing: ?*const fn (_cell_editable: *gtk.CellEditable, _event: ?*gdk.Event) callconv(.c) void,
};
/// Deprecated:
/// Iface [CellLayout](https://docs.gtk.org/gtk4/iface.CellLayout.html)
pub const CellLayout = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [add_attribute](https://docs.gtk.org/gtk4/method.CellLayout.add_attribute.html)
    pub const addAttribute = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addAttribute(self: *CellLayout, _cell: *gtk.CellRenderer, _attribute: [*:0]const u8, _column: i32) void {
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_cell_layout_add_attribute" });
            const ret = cFn(self, _cell, _attribute, _column);
            return ret;
        }
    }.addAttribute;
    /// Deprecated:
    /// method [clear](https://docs.gtk.org/gtk4/method.CellLayout.clear.html)
    pub const clear = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clear(self: *CellLayout) void {
            const cFn = @extern(*const fn (*CellLayout) callconv(.c) void, .{ .name = "gtk_cell_layout_clear" });
            const ret = cFn(self);
            return ret;
        }
    }.clear;
    /// Deprecated:
    /// method [clear_attributes](https://docs.gtk.org/gtk4/method.CellLayout.clear_attributes.html)
    pub const clearAttributes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clearAttributes(self: *CellLayout, _cell: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_cell_layout_clear_attributes" });
            const ret = cFn(self, _cell);
            return ret;
        }
    }.clearAttributes;
    /// Deprecated:
    /// method [get_area](https://docs.gtk.org/gtk4/method.CellLayout.get_area.html)
    pub const getArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getArea(self: *CellLayout) ?*gtk.CellArea {
            const cFn = @extern(*const fn (*CellLayout) callconv(.c) ?*gtk.CellArea, .{ .name = "gtk_cell_layout_get_area" });
            const ret = cFn(self);
            return ret;
        }
    }.getArea;
    /// Deprecated:
    /// method [get_cells](https://docs.gtk.org/gtk4/method.CellLayout.get_cells.html)
    pub const getCells = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCells(self: *CellLayout) ?*core.List {
            const cFn = @extern(*const fn (*CellLayout) callconv(.c) ?*core.List, .{ .name = "gtk_cell_layout_get_cells" });
            const ret = cFn(self);
            return ret;
        }
    }.getCells;
    /// Deprecated:
    /// method [pack_end](https://docs.gtk.org/gtk4/method.CellLayout.pack_end.html)
    pub const packEnd = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packEnd(self: *CellLayout, _cell: *gtk.CellRenderer, _expand: bool) void {
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_layout_pack_end" });
            const ret = cFn(self, _cell, _expand);
            return ret;
        }
    }.packEnd;
    /// Deprecated:
    /// method [pack_start](https://docs.gtk.org/gtk4/method.CellLayout.pack_start.html)
    pub const packStart = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packStart(self: *CellLayout, _cell: *gtk.CellRenderer, _expand: bool) void {
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_layout_pack_start" });
            const ret = cFn(self, _cell, _expand);
            return ret;
        }
    }.packStart;
    /// Deprecated:
    /// method [reorder](https://docs.gtk.org/gtk4/method.CellLayout.reorder.html)
    pub const reorder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn reorder(self: *CellLayout, _cell: *gtk.CellRenderer, _position: i32) void {
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer, i32) callconv(.c) void, .{ .name = "gtk_cell_layout_reorder" });
            const ret = cFn(self, _cell, _position);
            return ret;
        }
    }.reorder;
    /// Deprecated:
    /// method [set_cell_data_func](https://docs.gtk.org/gtk4/method.CellLayout.set_cell_data_func.html)
    pub const setCellDataFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCellDataFunc(self: *CellLayout, _cell: *gtk.CellRenderer, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.CellLayout, *gtk.CellRenderer, *gtk.TreeModel, *gtk.TreeIter });
            const _func: ?gtk.CellLayoutDataFunc = @ptrCast(closure_func.c_closure());
            const _func_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*CellLayout, *gtk.CellRenderer, ?gtk.CellLayoutDataFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_cell_layout_set_cell_data_func" });
            const ret = cFn(self, _cell, _func, @ptrCast(_func_data), _destroy);
            return ret;
        }
    }.setCellDataFunc;
    /// vfunc [add_attribute](https://docs.gtk.org/gtk4/vfunc.CellLayout.add_attribute.html)
    pub fn addAttributeV(self: *CellLayout, _cell: *gtk.CellRenderer, _attribute: [*:0]const u8, _column: i32) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_attribute.?;
        const ret = vFn(self, _cell, _attribute, _column);
        return ret;
    }
    /// vfunc [clear](https://docs.gtk.org/gtk4/vfunc.CellLayout.clear.html)
    pub fn clearV(self: *CellLayout) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.clear.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [clear_attributes](https://docs.gtk.org/gtk4/vfunc.CellLayout.clear_attributes.html)
    pub fn clearAttributesV(self: *CellLayout, _cell: *gtk.CellRenderer) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.clear_attributes.?;
        const ret = vFn(self, _cell);
        return ret;
    }
    /// vfunc [get_area](https://docs.gtk.org/gtk4/vfunc.CellLayout.get_area.html)
    pub fn getAreaV(self: *CellLayout) ?*gtk.CellArea {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_area.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_cells](https://docs.gtk.org/gtk4/vfunc.CellLayout.get_cells.html)
    pub fn getCellsV(self: *CellLayout) ?*core.List {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_cells.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [pack_end](https://docs.gtk.org/gtk4/vfunc.CellLayout.pack_end.html)
    pub fn packEndV(self: *CellLayout, _cell: *gtk.CellRenderer, _expand: bool) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.pack_end.?;
        const ret = vFn(self, _cell, _expand);
        return ret;
    }
    /// vfunc [pack_start](https://docs.gtk.org/gtk4/vfunc.CellLayout.pack_start.html)
    pub fn packStartV(self: *CellLayout, _cell: *gtk.CellRenderer, _expand: bool) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.pack_start.?;
        const ret = vFn(self, _cell, _expand);
        return ret;
    }
    /// vfunc [reorder](https://docs.gtk.org/gtk4/vfunc.CellLayout.reorder.html)
    pub fn reorderV(self: *CellLayout, _cell: *gtk.CellRenderer, _position: i32) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reorder.?;
        const ret = vFn(self, _cell, _position);
        return ret;
    }
    /// vfunc [set_cell_data_func](https://docs.gtk.org/gtk4/vfunc.CellLayout.set_cell_data_func.html)
    pub fn setCellDataFuncV(self: *CellLayout, _cell: *gtk.CellRenderer, _func: ?gtk.CellLayoutDataFunc, _func_data: ?*anyopaque, _destroy: glib.DestroyNotify) void {
        const class: *CellLayoutIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_cell_data_func.?;
        const ret = vFn(self, _cell, _func, @ptrCast(_func_data), _destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_layout_get_type" });
        return cFn();
    }
};
/// callback [CellLayoutDataFunc](https://docs.gtk.org/gtk4/callback.CellLayoutDataFunc.html)
pub const CellLayoutDataFunc = *const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) void;
/// Struct [CellLayoutIface](https://docs.gtk.org/gtk4/struct.CellLayoutIface.html)
pub const CellLayoutIface = extern struct {
    g_iface: gobject.TypeInterface,
    pack_start: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _expand: bool) callconv(.c) void,
    pack_end: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _expand: bool) callconv(.c) void,
    clear: ?*const fn (_cell_layout: *gtk.CellLayout) callconv(.c) void,
    add_attribute: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _attribute: [*:0]const u8, _column: i32) callconv(.c) void,
    set_cell_data_func: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _func: ?gtk.CellLayoutDataFunc, _func_data: ?*anyopaque, _destroy: glib.DestroyNotify) callconv(.c) void,
    clear_attributes: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer) callconv(.c) void,
    reorder: ?*const fn (_cell_layout: *gtk.CellLayout, _cell: *gtk.CellRenderer, _position: i32) callconv(.c) void,
    get_cells: ?*const fn (_cell_layout: *gtk.CellLayout) callconv(.c) ?*core.List,
    get_area: ?*const fn (_cell_layout: *gtk.CellLayout) callconv(.c) ?*gtk.CellArea,
};
/// Deprecated:
/// Class [CellRenderer](https://docs.gtk.org/gtk4/class.CellRenderer.html)
/// - property [cell-background](https://docs.gtk.org/gtk4/property.CellRenderer.cell-background.html): (-w) `[*:0]const u8`
/// - property [cell-background-rgba](https://docs.gtk.org/gtk4/property.CellRenderer.cell-background-rgba.html): (rw) `gdk.RGBA`
/// - property [cell-background-set](https://docs.gtk.org/gtk4/property.CellRenderer.cell-background-set.html): (rw) `bool`
/// - property [editing](https://docs.gtk.org/gtk4/property.CellRenderer.editing.html): (r-) `bool`
/// - property [height](https://docs.gtk.org/gtk4/property.CellRenderer.height.html): (rw) `i32`
/// - property [is-expanded](https://docs.gtk.org/gtk4/property.CellRenderer.is-expanded.html): (rw) `bool`
/// - property [is-expander](https://docs.gtk.org/gtk4/property.CellRenderer.is-expander.html): (rw) `bool`
/// - property [mode](https://docs.gtk.org/gtk4/property.CellRenderer.mode.html): (rw) `gtk.CellRendererMode`
/// - property [sensitive](https://docs.gtk.org/gtk4/property.CellRenderer.sensitive.html): (rw) `bool`
/// - property [visible](https://docs.gtk.org/gtk4/property.CellRenderer.visible.html): (rw) `bool`
/// - property [width](https://docs.gtk.org/gtk4/property.CellRenderer.width.html): (rw) `i32`
/// - property [xalign](https://docs.gtk.org/gtk4/property.CellRenderer.xalign.html): (rw) `f32`
/// - property [xpad](https://docs.gtk.org/gtk4/property.CellRenderer.xpad.html): (rw) `u32`
/// - property [yalign](https://docs.gtk.org/gtk4/property.CellRenderer.yalign.html): (rw) `f32`
/// - property [ypad](https://docs.gtk.org/gtk4/property.CellRenderer.ypad.html): (rw) `u32`
pub const CellRenderer = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gobject.InitiallyUnowned,
    priv: ?*gtk.CellRendererPrivate,
    pub const Parent = gobject.InitiallyUnowned;
    pub const Class = gtk.CellRendererClass;
    /// Deprecated:
    /// method [activate](https://docs.gtk.org/gtk4/method.CellRenderer.activate.html)
    pub const activate = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn activate(self: *CellRenderer, _event: *gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) bool {
            const cFn = @extern(*const fn (*CellRenderer, *gdk.Event, *gtk.Widget, [*:0]const u8, *gdk.Rectangle, *gdk.Rectangle, gtk.CellRendererState) callconv(.c) bool, .{ .name = "gtk_cell_renderer_activate" });
            const ret = cFn(self, _event, _widget, _path, _background_area, _cell_area, _flags);
            return ret;
        }
    }.activate;
    /// Deprecated:
    /// method [get_aligned_area](https://docs.gtk.org/gtk4/method.CellRenderer.get_aligned_area.html)
    pub const getAlignedArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAlignedArea(self: *CellRenderer, _widget: *gtk.Widget, _flags: gtk.CellRendererState, _cell_area: *gdk.Rectangle, _aligned_area: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, gtk.CellRendererState, *gdk.Rectangle, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_aligned_area" });
            const ret = cFn(self, _widget, _flags, _cell_area, _aligned_area);
            return ret;
        }
    }.getAlignedArea;
    /// Deprecated:
    /// method [get_alignment](https://docs.gtk.org/gtk4/method.CellRenderer.get_alignment.html)
    pub const getAlignment = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAlignment(self: *CellRenderer) struct {
            ret: void,
            xalign: f32,
            yalign: f32,
        } {
            var xalign_out: f32 = undefined;
            const _xalign = &xalign_out;
            var yalign_out: f32 = undefined;
            const _yalign = &yalign_out;
            const cFn = @extern(*const fn (*CellRenderer, ?*f32, ?*f32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_alignment" });
            const ret = cFn(self, _xalign, _yalign);
            return .{ .ret = ret, .xalign = xalign_out, .yalign = yalign_out };
        }
    }.getAlignment;
    /// Deprecated:
    /// method [get_fixed_size](https://docs.gtk.org/gtk4/method.CellRenderer.get_fixed_size.html)
    pub const getFixedSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFixedSize(self: *CellRenderer) struct {
            ret: void,
            width: i32,
            height: i32,
        } {
            var width_out: i32 = undefined;
            const _width = &width_out;
            var height_out: i32 = undefined;
            const _height = &height_out;
            const cFn = @extern(*const fn (*CellRenderer, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_fixed_size" });
            const ret = cFn(self, _width, _height);
            return .{ .ret = ret, .width = width_out, .height = height_out };
        }
    }.getFixedSize;
    /// Deprecated:
    /// method [get_is_expanded](https://docs.gtk.org/gtk4/method.CellRenderer.get_is_expanded.html)
    pub const getIsExpanded = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIsExpanded(self: *CellRenderer) bool {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_renderer_get_is_expanded" });
            const ret = cFn(self);
            return ret;
        }
    }.getIsExpanded;
    /// Deprecated:
    /// method [get_is_expander](https://docs.gtk.org/gtk4/method.CellRenderer.get_is_expander.html)
    pub const getIsExpander = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIsExpander(self: *CellRenderer) bool {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_renderer_get_is_expander" });
            const ret = cFn(self);
            return ret;
        }
    }.getIsExpander;
    /// Deprecated:
    /// method [get_padding](https://docs.gtk.org/gtk4/method.CellRenderer.get_padding.html)
    pub const getPadding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPadding(self: *CellRenderer) struct {
            ret: void,
            xpad: i32,
            ypad: i32,
        } {
            var xpad_out: i32 = undefined;
            const _xpad = &xpad_out;
            var ypad_out: i32 = undefined;
            const _ypad = &ypad_out;
            const cFn = @extern(*const fn (*CellRenderer, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_padding" });
            const ret = cFn(self, _xpad, _ypad);
            return .{ .ret = ret, .xpad = xpad_out, .ypad = ypad_out };
        }
    }.getPadding;
    /// Deprecated:
    /// method [get_preferred_height](https://docs.gtk.org/gtk4/method.CellRenderer.get_preferred_height.html)
    pub const getPreferredHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeight(self: *CellRenderer, _widget: *gtk.Widget) struct {
            ret: void,
            minimum_size: i32,
            natural_size: i32,
        } {
            var minimum_size_out: i32 = undefined;
            const _minimum_size = &minimum_size_out;
            var natural_size_out: i32 = undefined;
            const _natural_size = &natural_size_out;
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_preferred_height" });
            const ret = cFn(self, _widget, _minimum_size, _natural_size);
            return .{ .ret = ret, .minimum_size = minimum_size_out, .natural_size = natural_size_out };
        }
    }.getPreferredHeight;
    /// Deprecated:
    /// method [get_preferred_height_for_width](https://docs.gtk.org/gtk4/method.CellRenderer.get_preferred_height_for_width.html)
    pub const getPreferredHeightForWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredHeightForWidth(self: *CellRenderer, _widget: *gtk.Widget, _width: i32) struct {
            ret: void,
            minimum_height: i32,
            natural_height: i32,
        } {
            var minimum_height_out: i32 = undefined;
            const _minimum_height = &minimum_height_out;
            var natural_height_out: i32 = undefined;
            const _natural_height = &natural_height_out;
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_preferred_height_for_width" });
            const ret = cFn(self, _widget, _width, _minimum_height, _natural_height);
            return .{ .ret = ret, .minimum_height = minimum_height_out, .natural_height = natural_height_out };
        }
    }.getPreferredHeightForWidth;
    /// Deprecated:
    /// method [get_preferred_size](https://docs.gtk.org/gtk4/method.CellRenderer.get_preferred_size.html)
    pub const getPreferredSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredSize(self: *CellRenderer, _widget: *gtk.Widget, _minimum_size: ?*gtk.Requisition, _natural_size: ?*gtk.Requisition) void {
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, ?*gtk.Requisition, ?*gtk.Requisition) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_preferred_size" });
            const ret = cFn(self, _widget, _minimum_size, _natural_size);
            return ret;
        }
    }.getPreferredSize;
    /// Deprecated:
    /// method [get_preferred_width](https://docs.gtk.org/gtk4/method.CellRenderer.get_preferred_width.html)
    pub const getPreferredWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidth(self: *CellRenderer, _widget: *gtk.Widget) struct {
            ret: void,
            minimum_size: i32,
            natural_size: i32,
        } {
            var minimum_size_out: i32 = undefined;
            const _minimum_size = &minimum_size_out;
            var natural_size_out: i32 = undefined;
            const _natural_size = &natural_size_out;
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_preferred_width" });
            const ret = cFn(self, _widget, _minimum_size, _natural_size);
            return .{ .ret = ret, .minimum_size = minimum_size_out, .natural_size = natural_size_out };
        }
    }.getPreferredWidth;
    /// Deprecated:
    /// method [get_preferred_width_for_height](https://docs.gtk.org/gtk4/method.CellRenderer.get_preferred_width_for_height.html)
    pub const getPreferredWidthForHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreferredWidthForHeight(self: *CellRenderer, _widget: *gtk.Widget, _height: i32) struct {
            ret: void,
            minimum_width: i32,
            natural_width: i32,
        } {
            var minimum_width_out: i32 = undefined;
            const _minimum_width = &minimum_width_out;
            var natural_width_out: i32 = undefined;
            const _natural_width = &natural_width_out;
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Widget, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_get_preferred_width_for_height" });
            const ret = cFn(self, _widget, _height, _minimum_width, _natural_width);
            return .{ .ret = ret, .minimum_width = minimum_width_out, .natural_width = natural_width_out };
        }
    }.getPreferredWidthForHeight;
    /// Deprecated:
    /// method [get_request_mode](https://docs.gtk.org/gtk4/method.CellRenderer.get_request_mode.html)
    pub const getRequestMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRequestMode(self: *CellRenderer) gtk.SizeRequestMode {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) gtk.SizeRequestMode, .{ .name = "gtk_cell_renderer_get_request_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getRequestMode;
    /// Deprecated:
    /// method [get_sensitive](https://docs.gtk.org/gtk4/method.CellRenderer.get_sensitive.html)
    pub const getSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSensitive(self: *CellRenderer) bool {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_renderer_get_sensitive" });
            const ret = cFn(self);
            return ret;
        }
    }.getSensitive;
    /// Deprecated:
    /// method [get_state](https://docs.gtk.org/gtk4/method.CellRenderer.get_state.html)
    pub const getState = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getState(self: *CellRenderer, _widget: ?*gtk.Widget, _cell_state: gtk.CellRendererState) gtk.StateFlags {
            const cFn = @extern(*const fn (*CellRenderer, ?*gtk.Widget, gtk.CellRendererState) callconv(.c) gtk.StateFlags, .{ .name = "gtk_cell_renderer_get_state" });
            const ret = cFn(self, _widget, _cell_state);
            return ret;
        }
    }.getState;
    /// Deprecated:
    /// method [get_visible](https://docs.gtk.org/gtk4/method.CellRenderer.get_visible.html)
    pub const getVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisible(self: *CellRenderer) bool {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_renderer_get_visible" });
            const ret = cFn(self);
            return ret;
        }
    }.getVisible;
    /// Deprecated:
    /// method [is_activatable](https://docs.gtk.org/gtk4/method.CellRenderer.is_activatable.html)
    pub const isActivatable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isActivatable(self: *CellRenderer) bool {
            const cFn = @extern(*const fn (*CellRenderer) callconv(.c) bool, .{ .name = "gtk_cell_renderer_is_activatable" });
            const ret = cFn(self);
            return ret;
        }
    }.isActivatable;
    /// Deprecated:
    /// method [set_alignment](https://docs.gtk.org/gtk4/method.CellRenderer.set_alignment.html)
    pub const setAlignment = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAlignment(self: *CellRenderer, _xalign: f32, _yalign: f32) void {
            const cFn = @extern(*const fn (*CellRenderer, f32, f32) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_alignment" });
            const ret = cFn(self, _xalign, _yalign);
            return ret;
        }
    }.setAlignment;
    /// Deprecated:
    /// method [set_fixed_size](https://docs.gtk.org/gtk4/method.CellRenderer.set_fixed_size.html)
    pub const setFixedSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFixedSize(self: *CellRenderer, _width: i32, _height: i32) void {
            const cFn = @extern(*const fn (*CellRenderer, i32, i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_fixed_size" });
            const ret = cFn(self, _width, _height);
            return ret;
        }
    }.setFixedSize;
    /// Deprecated:
    /// method [set_is_expanded](https://docs.gtk.org/gtk4/method.CellRenderer.set_is_expanded.html)
    pub const setIsExpanded = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setIsExpanded(self: *CellRenderer, _is_expanded: bool) void {
            const cFn = @extern(*const fn (*CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_is_expanded" });
            const ret = cFn(self, _is_expanded);
            return ret;
        }
    }.setIsExpanded;
    /// Deprecated:
    /// method [set_is_expander](https://docs.gtk.org/gtk4/method.CellRenderer.set_is_expander.html)
    pub const setIsExpander = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setIsExpander(self: *CellRenderer, _is_expander: bool) void {
            const cFn = @extern(*const fn (*CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_is_expander" });
            const ret = cFn(self, _is_expander);
            return ret;
        }
    }.setIsExpander;
    /// Deprecated:
    /// method [set_padding](https://docs.gtk.org/gtk4/method.CellRenderer.set_padding.html)
    pub const setPadding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPadding(self: *CellRenderer, _xpad: i32, _ypad: i32) void {
            const cFn = @extern(*const fn (*CellRenderer, i32, i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_padding" });
            const ret = cFn(self, _xpad, _ypad);
            return ret;
        }
    }.setPadding;
    /// Deprecated:
    /// method [set_sensitive](https://docs.gtk.org/gtk4/method.CellRenderer.set_sensitive.html)
    pub const setSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSensitive(self: *CellRenderer, _sensitive: bool) void {
            const cFn = @extern(*const fn (*CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_sensitive" });
            const ret = cFn(self, _sensitive);
            return ret;
        }
    }.setSensitive;
    /// Deprecated:
    /// method [set_visible](https://docs.gtk.org/gtk4/method.CellRenderer.set_visible.html)
    pub const setVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setVisible(self: *CellRenderer, _visible: bool) void {
            const cFn = @extern(*const fn (*CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_set_visible" });
            const ret = cFn(self, _visible);
            return ret;
        }
    }.setVisible;
    /// Deprecated:
    /// method [snapshot](https://docs.gtk.org/gtk4/method.CellRenderer.snapshot.html)
    pub const snapshot = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn snapshot(self: *CellRenderer, _snapshot: *gtk.Snapshot, _widget: *gtk.Widget, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) void {
            const cFn = @extern(*const fn (*CellRenderer, *gtk.Snapshot, *gtk.Widget, *gdk.Rectangle, *gdk.Rectangle, gtk.CellRendererState) callconv(.c) void, .{ .name = "gtk_cell_renderer_snapshot" });
            const ret = cFn(self, _snapshot, _widget, _background_area, _cell_area, _flags);
            return ret;
        }
    }.snapshot;
    /// Deprecated:
    /// method [start_editing](https://docs.gtk.org/gtk4/method.CellRenderer.start_editing.html)
    pub const startEditing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn startEditing(self: *CellRenderer, _event: ?*gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) ?*gtk.CellEditable {
            const cFn = @extern(*const fn (*CellRenderer, ?*gdk.Event, *gtk.Widget, [*:0]const u8, *gdk.Rectangle, *gdk.Rectangle, gtk.CellRendererState) callconv(.c) ?*gtk.CellEditable, .{ .name = "gtk_cell_renderer_start_editing" });
            const ret = cFn(self, _event, _widget, _path, _background_area, _cell_area, _flags);
            return ret;
        }
    }.startEditing;
    /// Deprecated:
    /// method [stop_editing](https://docs.gtk.org/gtk4/method.CellRenderer.stop_editing.html)
    pub const stopEditing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn stopEditing(self: *CellRenderer, _canceled: bool) void {
            const cFn = @extern(*const fn (*CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_stop_editing" });
            const ret = cFn(self, _canceled);
            return ret;
        }
    }.stopEditing;
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.CellRenderer.activate.html)
    pub fn activateV(self: *CellRenderer, _event: *gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) bool {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self, _event, _widget, _path, _background_area, _cell_area, _flags);
        return ret;
    }
    /// vfunc [editing_canceled](https://docs.gtk.org/gtk4/vfunc.CellRenderer.editing_canceled.html)
    pub fn editingCanceledV(self: *CellRenderer) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.editing_canceled.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [editing_started](https://docs.gtk.org/gtk4/vfunc.CellRenderer.editing_started.html)
    pub fn editingStartedV(self: *CellRenderer, _editable: *gtk.CellEditable, _path: [*:0]const u8) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.editing_started.?;
        const ret = vFn(self, _editable, _path);
        return ret;
    }
    /// vfunc [get_aligned_area](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_aligned_area.html)
    pub fn getAlignedAreaV(self: *CellRenderer, _widget: *gtk.Widget, _flags: gtk.CellRendererState, _cell_area: *gdk.Rectangle, _aligned_area: *gdk.Rectangle) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_aligned_area.?;
        const ret = vFn(self, _widget, _flags, _cell_area, _aligned_area);
        return ret;
    }
    /// vfunc [get_preferred_height](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_preferred_height.html)
    pub fn getPreferredHeightV(self: *CellRenderer, _widget: *gtk.Widget, _minimum_size: ?*i32, _natural_size: ?*i32) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_height.?;
        const ret = vFn(self, _widget, _minimum_size, _natural_size);
        return ret;
    }
    /// vfunc [get_preferred_height_for_width](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_preferred_height_for_width.html)
    pub fn getPreferredHeightForWidthV(self: *CellRenderer, _widget: *gtk.Widget, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_height_for_width.?;
        const ret = vFn(self, _widget, _width, _minimum_height, _natural_height);
        return ret;
    }
    /// vfunc [get_preferred_width](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_preferred_width.html)
    pub fn getPreferredWidthV(self: *CellRenderer, _widget: *gtk.Widget, _minimum_size: ?*i32, _natural_size: ?*i32) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_width.?;
        const ret = vFn(self, _widget, _minimum_size, _natural_size);
        return ret;
    }
    /// vfunc [get_preferred_width_for_height](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_preferred_width_for_height.html)
    pub fn getPreferredWidthForHeightV(self: *CellRenderer, _widget: *gtk.Widget, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preferred_width_for_height.?;
        const ret = vFn(self, _widget, _height, _minimum_width, _natural_width);
        return ret;
    }
    /// vfunc [get_request_mode](https://docs.gtk.org/gtk4/vfunc.CellRenderer.get_request_mode.html)
    pub fn getRequestModeV(self: *CellRenderer) gtk.SizeRequestMode {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_request_mode.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [snapshot](https://docs.gtk.org/gtk4/vfunc.CellRenderer.snapshot.html)
    pub fn snapshotV(self: *CellRenderer, _snapshot: *gtk.Snapshot, _widget: *gtk.Widget, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) void {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot.?;
        const ret = vFn(self, _snapshot, _widget, _background_area, _cell_area, _flags);
        return ret;
    }
    /// vfunc [start_editing](https://docs.gtk.org/gtk4/vfunc.CellRenderer.start_editing.html)
    pub fn startEditingV(self: *CellRenderer, _event: ?*gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) ?*gtk.CellEditable {
        const class: *CellRendererClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_editing.?;
        const ret = vFn(self, _event, _widget, _path, _background_area, _cell_area, _flags);
        return ret;
    }
    /// signal [editing-canceled](https://docs.gtk.org/gtk4/signal.CellRenderer.editing-canceled.html)
    pub fn connectEditingCanceled(self: *CellRenderer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("editing-canceled", handler, args, flags, &.{ void, *CellRenderer });
    }
    /// signal [editing-started](https://docs.gtk.org/gtk4/signal.CellRenderer.editing-started.html)
    pub fn connectEditingStarted(self: *CellRenderer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("editing-started", handler, args, flags, &.{ void, *CellRenderer, *gtk.CellEditable, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellRendererAccel](https://docs.gtk.org/gtk4/class.CellRendererAccel.html)
/// - property [accel-key](https://docs.gtk.org/gtk4/property.CellRendererAccel.accel-key.html): (rw) `u32`
/// - property [accel-mode](https://docs.gtk.org/gtk4/property.CellRendererAccel.accel-mode.html): (rw) `gtk.CellRendererAccelMode`
/// - property [accel-mods](https://docs.gtk.org/gtk4/property.CellRendererAccel.accel-mods.html): (rw) `gdk.ModifierType`
/// - property [keycode](https://docs.gtk.org/gtk4/property.CellRendererAccel.keycode.html): (rw) `u32`
pub const CellRendererAccel = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRendererText;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererAccel.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererAccel {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererAccel, .{ .name = "gtk_cell_renderer_accel_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// signal [accel-cleared](https://docs.gtk.org/gtk4/signal.CellRendererAccel.accel-cleared.html)
    pub fn connectAccelCleared(self: *CellRendererAccel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accel-cleared", handler, args, flags, &.{ void, *CellRendererAccel, [*:0]const u8 });
    }
    /// signal [accel-edited](https://docs.gtk.org/gtk4/signal.CellRendererAccel.accel-edited.html)
    pub fn connectAccelEdited(self: *CellRendererAccel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accel-edited", handler, args, flags, &.{ void, *CellRendererAccel, [*:0]const u8, u32, gdk.ModifierType, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_accel_get_type" });
        return cFn();
    }
};
/// Enum [CellRendererAccelMode](https://docs.gtk.org/gtk4/enum.CellRendererAccelMode.html)
pub const CellRendererAccelMode = enum(u32) {
    gtk = 0,
    other = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_accel_mode_get_type" });
        return cFn();
    }
};
pub const CellRendererClass = extern struct {
    parent_class: gobject.InitiallyUnownedClass,
    get_request_mode: ?*const fn (_cell: *gtk.CellRenderer) callconv(.c) gtk.SizeRequestMode,
    get_preferred_width: ?*const fn (_cell: *gtk.CellRenderer, _widget: *gtk.Widget, _minimum_size: ?*i32, _natural_size: ?*i32) callconv(.c) void,
    get_preferred_height_for_width: ?*const fn (_cell: *gtk.CellRenderer, _widget: *gtk.Widget, _width: i32, _minimum_height: ?*i32, _natural_height: ?*i32) callconv(.c) void,
    get_preferred_height: ?*const fn (_cell: *gtk.CellRenderer, _widget: *gtk.Widget, _minimum_size: ?*i32, _natural_size: ?*i32) callconv(.c) void,
    get_preferred_width_for_height: ?*const fn (_cell: *gtk.CellRenderer, _widget: *gtk.Widget, _height: i32, _minimum_width: ?*i32, _natural_width: ?*i32) callconv(.c) void,
    get_aligned_area: ?*const fn (_cell: *gtk.CellRenderer, _widget: *gtk.Widget, _flags: gtk.CellRendererState, _cell_area: *gdk.Rectangle, _aligned_area: *gdk.Rectangle) callconv(.c) void,
    snapshot: ?*const fn (_cell: *gtk.CellRenderer, _snapshot: *gtk.Snapshot, _widget: *gtk.Widget, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) callconv(.c) void,
    activate: ?*const fn (_cell: *gtk.CellRenderer, _event: *gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) callconv(.c) bool,
    start_editing: ?*const fn (_cell: *gtk.CellRenderer, _event: ?*gdk.Event, _widget: *gtk.Widget, _path: [*:0]const u8, _background_area: *gdk.Rectangle, _cell_area: *gdk.Rectangle, _flags: gtk.CellRendererState) callconv(.c) ?*gtk.CellEditable,
    editing_canceled: ?*const fn (_cell: *gtk.CellRenderer) callconv(.c) void,
    editing_started: ?*const fn (_cell: *gtk.CellRenderer, _editable: *gtk.CellEditable, _path: [*:0]const u8) callconv(.c) void,
    padding: [8]?*anyopaque,
};
pub const CellRendererClassPrivate = opaque {};
/// Deprecated:
/// Class [CellRendererCombo](https://docs.gtk.org/gtk4/class.CellRendererCombo.html)
/// - property [has-entry](https://docs.gtk.org/gtk4/property.CellRendererCombo.has-entry.html): (rw) `bool`
/// - property [model](https://docs.gtk.org/gtk4/property.CellRendererCombo.model.html): (rw) `gtk.TreeModel`
/// - property [text-column](https://docs.gtk.org/gtk4/property.CellRendererCombo.text-column.html): (rw) `i32`
pub const CellRendererCombo = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRendererText;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererCombo.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererCombo {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererCombo, .{ .name = "gtk_cell_renderer_combo_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// signal [changed](https://docs.gtk.org/gtk4/signal.CellRendererCombo.changed.html)
    pub fn connectChanged(self: *CellRendererCombo, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *CellRendererCombo, [*:0]const u8, *gtk.TreeIter });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_combo_get_type" });
        return cFn();
    }
};
/// Enum [CellRendererMode](https://docs.gtk.org/gtk4/enum.CellRendererMode.html)
pub const CellRendererMode = enum(u32) {
    inert = 0,
    activatable = 1,
    editable = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_mode_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellRendererPixbuf](https://docs.gtk.org/gtk4/class.CellRendererPixbuf.html)
/// - property [gicon](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.gicon.html): (rw) `gio.Icon`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.icon-name.html): (rw) `[*:0]const u8`
/// - property [icon-size](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.icon-size.html): (rw) `gtk.IconSize`
/// - property [pixbuf](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.pixbuf.html): (-w) `gdk_pixbuf.Pixbuf`
/// - property [pixbuf-expander-closed](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.pixbuf-expander-closed.html): (rw) `gdk_pixbuf.Pixbuf`
/// - property [pixbuf-expander-open](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.pixbuf-expander-open.html): (rw) `gdk_pixbuf.Pixbuf`
/// - property [texture](https://docs.gtk.org/gtk4/property.CellRendererPixbuf.texture.html): (rw) `gdk.Texture`
pub const CellRendererPixbuf = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRenderer;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererPixbuf.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererPixbuf {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererPixbuf, .{ .name = "gtk_cell_renderer_pixbuf_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_pixbuf_get_type" });
        return cFn();
    }
};
pub const CellRendererPrivate = opaque {};
/// Deprecated:
/// Class [CellRendererProgress](https://docs.gtk.org/gtk4/class.CellRendererProgress.html)
/// - property [inverted](https://docs.gtk.org/gtk4/property.CellRendererProgress.inverted.html): (rw) `bool`
/// - property [pulse](https://docs.gtk.org/gtk4/property.CellRendererProgress.pulse.html): (rw) `i32`
/// - property [text](https://docs.gtk.org/gtk4/property.CellRendererProgress.text.html): (rw) `[*:0]const u8`
/// - property [text-xalign](https://docs.gtk.org/gtk4/property.CellRendererProgress.text-xalign.html): (rw) `f32`
/// - property [text-yalign](https://docs.gtk.org/gtk4/property.CellRendererProgress.text-yalign.html): (rw) `f32`
/// - property [value](https://docs.gtk.org/gtk4/property.CellRendererProgress.value.html): (rw) `i32`
pub const CellRendererProgress = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{gtk.Orientable};
    pub const Parent = gtk.CellRenderer;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererProgress.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererProgress {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererProgress, .{ .name = "gtk_cell_renderer_progress_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_progress_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellRendererSpin](https://docs.gtk.org/gtk4/class.CellRendererSpin.html)
/// - property [adjustment](https://docs.gtk.org/gtk4/property.CellRendererSpin.adjustment.html): (rw) `gtk.Adjustment`
/// - property [climb-rate](https://docs.gtk.org/gtk4/property.CellRendererSpin.climb-rate.html): (rw) `f64`
/// - property [digits](https://docs.gtk.org/gtk4/property.CellRendererSpin.digits.html): (rw) `u32`
pub const CellRendererSpin = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRendererText;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererSpin.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererSpin {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererSpin, .{ .name = "gtk_cell_renderer_spin_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_spin_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellRendererSpinner](https://docs.gtk.org/gtk4/class.CellRendererSpinner.html)
/// - property [active](https://docs.gtk.org/gtk4/property.CellRendererSpinner.active.html): (rw) `bool`
/// - property [pulse](https://docs.gtk.org/gtk4/property.CellRendererSpinner.pulse.html): (rw) `u32`
/// - property [size](https://docs.gtk.org/gtk4/property.CellRendererSpinner.size.html): (rw) `gtk.IconSize`
pub const CellRendererSpinner = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRenderer;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererSpinner.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererSpinner {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererSpinner, .{ .name = "gtk_cell_renderer_spinner_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_spinner_get_type" });
        return cFn();
    }
};
/// Flags [CellRendererState](https://docs.gtk.org/gtk4/flags.CellRendererState.html)
pub const CellRendererState = packed struct(u32) {
    selected: bool = false,
    prelit: bool = false,
    insensitive: bool = false,
    sorted: bool = false,
    focused: bool = false,
    expandable: bool = false,
    expanded: bool = false,
    _: u25 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_state_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellRendererText](https://docs.gtk.org/gtk4/class.CellRendererText.html)
/// - property [align-set](https://docs.gtk.org/gtk4/property.CellRendererText.align-set.html): (rw) `bool`
/// - property [alignment](https://docs.gtk.org/gtk4/property.CellRendererText.alignment.html): (rw) `pango.Alignment`
/// - property [attributes](https://docs.gtk.org/gtk4/property.CellRendererText.attributes.html): (rw) `pango.AttrList`
/// - property [background](https://docs.gtk.org/gtk4/property.CellRendererText.background.html): (-w) `[*:0]const u8`
/// - property [background-rgba](https://docs.gtk.org/gtk4/property.CellRendererText.background-rgba.html): (rw) `gdk.RGBA`
/// - property [background-set](https://docs.gtk.org/gtk4/property.CellRendererText.background-set.html): (rw) `bool`
/// - property [editable](https://docs.gtk.org/gtk4/property.CellRendererText.editable.html): (rw) `bool`
/// - property [editable-set](https://docs.gtk.org/gtk4/property.CellRendererText.editable-set.html): (rw) `bool`
/// - property [ellipsize](https://docs.gtk.org/gtk4/property.CellRendererText.ellipsize.html): (rw) `pango.EllipsizeMode`
/// - property [ellipsize-set](https://docs.gtk.org/gtk4/property.CellRendererText.ellipsize-set.html): (rw) `bool`
/// - property [family](https://docs.gtk.org/gtk4/property.CellRendererText.family.html): (rw) `[*:0]const u8`
/// - property [family-set](https://docs.gtk.org/gtk4/property.CellRendererText.family-set.html): (rw) `bool`
/// - property [font](https://docs.gtk.org/gtk4/property.CellRendererText.font.html): (rw) `[*:0]const u8`
/// - property [font-desc](https://docs.gtk.org/gtk4/property.CellRendererText.font-desc.html): (rw) `pango.FontDescription`
/// - property [foreground](https://docs.gtk.org/gtk4/property.CellRendererText.foreground.html): (-w) `[*:0]const u8`
/// - property [foreground-rgba](https://docs.gtk.org/gtk4/property.CellRendererText.foreground-rgba.html): (rw) `gdk.RGBA`
/// - property [foreground-set](https://docs.gtk.org/gtk4/property.CellRendererText.foreground-set.html): (rw) `bool`
/// - property [language](https://docs.gtk.org/gtk4/property.CellRendererText.language.html): (rw) `[*:0]const u8`
/// - property [language-set](https://docs.gtk.org/gtk4/property.CellRendererText.language-set.html): (rw) `bool`
/// - property [markup](https://docs.gtk.org/gtk4/property.CellRendererText.markup.html): (-w) `[*:0]const u8`
/// - property [max-width-chars](https://docs.gtk.org/gtk4/property.CellRendererText.max-width-chars.html): (rw) `i32`
/// - property [placeholder-text](https://docs.gtk.org/gtk4/property.CellRendererText.placeholder-text.html): (rw) `[*:0]const u8`
/// - property [rise](https://docs.gtk.org/gtk4/property.CellRendererText.rise.html): (rw) `i32`
/// - property [rise-set](https://docs.gtk.org/gtk4/property.CellRendererText.rise-set.html): (rw) `bool`
/// - property [scale](https://docs.gtk.org/gtk4/property.CellRendererText.scale.html): (rw) `f64`
/// - property [scale-set](https://docs.gtk.org/gtk4/property.CellRendererText.scale-set.html): (rw) `bool`
/// - property [single-paragraph-mode](https://docs.gtk.org/gtk4/property.CellRendererText.single-paragraph-mode.html): (rw) `bool`
/// - property [size](https://docs.gtk.org/gtk4/property.CellRendererText.size.html): (rw) `i32`
/// - property [size-points](https://docs.gtk.org/gtk4/property.CellRendererText.size-points.html): (rw) `f64`
/// - property [size-set](https://docs.gtk.org/gtk4/property.CellRendererText.size-set.html): (rw) `bool`
/// - property [stretch](https://docs.gtk.org/gtk4/property.CellRendererText.stretch.html): (rw) `pango.Stretch`
/// - property [stretch-set](https://docs.gtk.org/gtk4/property.CellRendererText.stretch-set.html): (rw) `bool`
/// - property [strikethrough](https://docs.gtk.org/gtk4/property.CellRendererText.strikethrough.html): (rw) `bool`
/// - property [strikethrough-set](https://docs.gtk.org/gtk4/property.CellRendererText.strikethrough-set.html): (rw) `bool`
/// - property [style](https://docs.gtk.org/gtk4/property.CellRendererText.style.html): (rw) `pango.Style`
/// - property [style-set](https://docs.gtk.org/gtk4/property.CellRendererText.style-set.html): (rw) `bool`
/// - property [text](https://docs.gtk.org/gtk4/property.CellRendererText.text.html): (rw) `[*:0]const u8`
/// - property [underline](https://docs.gtk.org/gtk4/property.CellRendererText.underline.html): (rw) `pango.Underline`
/// - property [underline-set](https://docs.gtk.org/gtk4/property.CellRendererText.underline-set.html): (rw) `bool`
/// - property [variant](https://docs.gtk.org/gtk4/property.CellRendererText.variant.html): (rw) `pango.Variant`
/// - property [variant-set](https://docs.gtk.org/gtk4/property.CellRendererText.variant-set.html): (rw) `bool`
/// - property [weight](https://docs.gtk.org/gtk4/property.CellRendererText.weight.html): (rw) `i32`
/// - property [weight-set](https://docs.gtk.org/gtk4/property.CellRendererText.weight-set.html): (rw) `bool`
/// - property [width-chars](https://docs.gtk.org/gtk4/property.CellRendererText.width-chars.html): (rw) `i32`
/// - property [wrap-mode](https://docs.gtk.org/gtk4/property.CellRendererText.wrap-mode.html): (rw) `pango.WrapMode`
/// - property [wrap-width](https://docs.gtk.org/gtk4/property.CellRendererText.wrap-width.html): (rw) `i32`
pub const CellRendererText = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gtk.CellRenderer,
    pub const Parent = gtk.CellRenderer;
    pub const Class = gtk.CellRendererTextClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererText.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererText {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererText, .{ .name = "gtk_cell_renderer_text_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [set_fixed_height_from_font](https://docs.gtk.org/gtk4/method.CellRendererText.set_fixed_height_from_font.html)
    pub const setFixedHeightFromFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFixedHeightFromFont(self: *CellRendererText, _number_of_rows: i32) void {
            const cFn = @extern(*const fn (*CellRendererText, i32) callconv(.c) void, .{ .name = "gtk_cell_renderer_text_set_fixed_height_from_font" });
            const ret = cFn(self, _number_of_rows);
            return ret;
        }
    }.setFixedHeightFromFont;
    /// vfunc [edited](https://docs.gtk.org/gtk4/vfunc.CellRendererText.edited.html)
    pub fn editedV(self: *CellRendererText, _path: [*:0]const u8, _new_text: [*:0]const u8) void {
        const class: *CellRendererTextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.edited.?;
        const ret = vFn(self, _path, _new_text);
        return ret;
    }
    /// signal [edited](https://docs.gtk.org/gtk4/signal.CellRendererText.edited.html)
    pub fn connectEdited(self: *CellRendererText, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("edited", handler, args, flags, &.{ void, *CellRendererText, [*:0]const u8, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_text_get_type" });
        return cFn();
    }
};
pub const CellRendererTextClass = extern struct {
    parent_class: gtk.CellRendererClass,
    edited: ?*const fn (_cell_renderer_text: *gtk.CellRendererText, _path: [*:0]const u8, _new_text: [*:0]const u8) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Deprecated:
/// Class [CellRendererToggle](https://docs.gtk.org/gtk4/class.CellRendererToggle.html)
/// - property [activatable](https://docs.gtk.org/gtk4/property.CellRendererToggle.activatable.html): (rw) `bool`
/// - property [active](https://docs.gtk.org/gtk4/property.CellRendererToggle.active.html): (rw) `bool`
/// - property [inconsistent](https://docs.gtk.org/gtk4/property.CellRendererToggle.inconsistent.html): (rw) `bool`
/// - property [radio](https://docs.gtk.org/gtk4/property.CellRendererToggle.radio.html): (rw) `bool`
pub const CellRendererToggle = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gtk.CellRenderer;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellRendererToggle.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellRendererToggle {
            const cFn = @extern(*const fn () callconv(.c) *CellRendererToggle, .{ .name = "gtk_cell_renderer_toggle_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_activatable](https://docs.gtk.org/gtk4/method.CellRendererToggle.get_activatable.html)
    pub const getActivatable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActivatable(self: *CellRendererToggle) bool {
            const cFn = @extern(*const fn (*CellRendererToggle) callconv(.c) bool, .{ .name = "gtk_cell_renderer_toggle_get_activatable" });
            const ret = cFn(self);
            return ret;
        }
    }.getActivatable;
    /// Deprecated:
    /// method [get_active](https://docs.gtk.org/gtk4/method.CellRendererToggle.get_active.html)
    pub const getActive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActive(self: *CellRendererToggle) bool {
            const cFn = @extern(*const fn (*CellRendererToggle) callconv(.c) bool, .{ .name = "gtk_cell_renderer_toggle_get_active" });
            const ret = cFn(self);
            return ret;
        }
    }.getActive;
    /// Deprecated:
    /// method [get_radio](https://docs.gtk.org/gtk4/method.CellRendererToggle.get_radio.html)
    pub const getRadio = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRadio(self: *CellRendererToggle) bool {
            const cFn = @extern(*const fn (*CellRendererToggle) callconv(.c) bool, .{ .name = "gtk_cell_renderer_toggle_get_radio" });
            const ret = cFn(self);
            return ret;
        }
    }.getRadio;
    /// Deprecated:
    /// method [set_activatable](https://docs.gtk.org/gtk4/method.CellRendererToggle.set_activatable.html)
    pub const setActivatable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActivatable(self: *CellRendererToggle, _setting: bool) void {
            const cFn = @extern(*const fn (*CellRendererToggle, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_toggle_set_activatable" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setActivatable;
    /// Deprecated:
    /// method [set_active](https://docs.gtk.org/gtk4/method.CellRendererToggle.set_active.html)
    pub const setActive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActive(self: *CellRendererToggle, _setting: bool) void {
            const cFn = @extern(*const fn (*CellRendererToggle, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_toggle_set_active" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setActive;
    /// Deprecated:
    /// method [set_radio](https://docs.gtk.org/gtk4/method.CellRendererToggle.set_radio.html)
    pub const setRadio = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRadio(self: *CellRendererToggle, _radio: bool) void {
            const cFn = @extern(*const fn (*CellRendererToggle, bool) callconv(.c) void, .{ .name = "gtk_cell_renderer_toggle_set_radio" });
            const ret = cFn(self, _radio);
            return ret;
        }
    }.setRadio;
    /// signal [toggled](https://docs.gtk.org/gtk4/signal.CellRendererToggle.toggled.html)
    pub fn connectToggled(self: *CellRendererToggle, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggled", handler, args, flags, &.{ void, *CellRendererToggle, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_renderer_toggle_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [CellView](https://docs.gtk.org/gtk4/class.CellView.html)
/// - property [cell-area](https://docs.gtk.org/gtk4/property.CellView.cell-area.html): (r-) `gtk.CellArea`
/// - property [cell-area-context](https://docs.gtk.org/gtk4/property.CellView.cell-area-context.html): (r-) `gtk.CellAreaContext`
/// - property [draw-sensitive](https://docs.gtk.org/gtk4/property.CellView.draw-sensitive.html): (rw) `bool`
/// - property [fit-model](https://docs.gtk.org/gtk4/property.CellView.fit-model.html): (rw) `bool`
/// - property [model](https://docs.gtk.org/gtk4/property.CellView.model.html): (rw) `gtk.TreeModel`
pub const CellView = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.CellLayout, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CellView.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *CellView {
            const cFn = @extern(*const fn () callconv(.c) *CellView, .{ .name = "gtk_cell_view_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_context](https://docs.gtk.org/gtk4/ctor.CellView.new_with_context.html)
    pub const newWithContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithContext(_area: *gtk.CellArea, _context: *gtk.CellAreaContext) *CellView {
            const cFn = @extern(*const fn (*gtk.CellArea, *gtk.CellAreaContext) callconv(.c) *CellView, .{ .name = "gtk_cell_view_new_with_context" });
            const ret = cFn(_area, _context);
            return ret;
        }
    }.newWithContext;
    /// Deprecated:
    /// ctor [new_with_markup](https://docs.gtk.org/gtk4/ctor.CellView.new_with_markup.html)
    pub const newWithMarkup = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithMarkup(_markup: [*:0]const u8) *CellView {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *CellView, .{ .name = "gtk_cell_view_new_with_markup" });
            const ret = cFn(_markup);
            return ret;
        }
    }.newWithMarkup;
    /// Deprecated:
    /// ctor [new_with_text](https://docs.gtk.org/gtk4/ctor.CellView.new_with_text.html)
    pub const newWithText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithText(_text: [*:0]const u8) *CellView {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *CellView, .{ .name = "gtk_cell_view_new_with_text" });
            const ret = cFn(_text);
            return ret;
        }
    }.newWithText;
    /// Deprecated:
    /// ctor [new_with_texture](https://docs.gtk.org/gtk4/ctor.CellView.new_with_texture.html)
    pub const newWithTexture = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithTexture(_texture: *gdk.Texture) *CellView {
            const cFn = @extern(*const fn (*gdk.Texture) callconv(.c) *CellView, .{ .name = "gtk_cell_view_new_with_texture" });
            const ret = cFn(_texture);
            return ret;
        }
    }.newWithTexture;
    /// Deprecated:
    /// method [get_displayed_row](https://docs.gtk.org/gtk4/method.CellView.get_displayed_row.html)
    pub const getDisplayedRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDisplayedRow(self: *CellView) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*CellView) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_cell_view_get_displayed_row" });
            const ret = cFn(self);
            return ret;
        }
    }.getDisplayedRow;
    /// Deprecated:
    /// method [get_draw_sensitive](https://docs.gtk.org/gtk4/method.CellView.get_draw_sensitive.html)
    pub const getDrawSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDrawSensitive(self: *CellView) bool {
            const cFn = @extern(*const fn (*CellView) callconv(.c) bool, .{ .name = "gtk_cell_view_get_draw_sensitive" });
            const ret = cFn(self);
            return ret;
        }
    }.getDrawSensitive;
    /// Deprecated:
    /// method [get_fit_model](https://docs.gtk.org/gtk4/method.CellView.get_fit_model.html)
    pub const getFitModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFitModel(self: *CellView) bool {
            const cFn = @extern(*const fn (*CellView) callconv(.c) bool, .{ .name = "gtk_cell_view_get_fit_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getFitModel;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.CellView.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *CellView) ?*gtk.TreeModel {
            const cFn = @extern(*const fn (*CellView) callconv(.c) ?*gtk.TreeModel, .{ .name = "gtk_cell_view_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [set_displayed_row](https://docs.gtk.org/gtk4/method.CellView.set_displayed_row.html)
    pub const setDisplayedRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDisplayedRow(self: *CellView, _path: ?*gtk.TreePath) void {
            const cFn = @extern(*const fn (*CellView, ?*gtk.TreePath) callconv(.c) void, .{ .name = "gtk_cell_view_set_displayed_row" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.setDisplayedRow;
    /// Deprecated:
    /// method [set_draw_sensitive](https://docs.gtk.org/gtk4/method.CellView.set_draw_sensitive.html)
    pub const setDrawSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDrawSensitive(self: *CellView, _draw_sensitive: bool) void {
            const cFn = @extern(*const fn (*CellView, bool) callconv(.c) void, .{ .name = "gtk_cell_view_set_draw_sensitive" });
            const ret = cFn(self, _draw_sensitive);
            return ret;
        }
    }.setDrawSensitive;
    /// Deprecated:
    /// method [set_fit_model](https://docs.gtk.org/gtk4/method.CellView.set_fit_model.html)
    pub const setFitModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFitModel(self: *CellView, _fit_model: bool) void {
            const cFn = @extern(*const fn (*CellView, bool) callconv(.c) void, .{ .name = "gtk_cell_view_set_fit_model" });
            const ret = cFn(self, _fit_model);
            return ret;
        }
    }.setFitModel;
    /// Deprecated:
    /// method [set_model](https://docs.gtk.org/gtk4/method.CellView.set_model.html)
    pub const setModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModel(self: *CellView, _model: ?*gtk.TreeModel) void {
            const cFn = @extern(*const fn (*CellView, ?*gtk.TreeModel) callconv(.c) void, .{ .name = "gtk_cell_view_set_model" });
            const ret = cFn(self, _model);
            return ret;
        }
    }.setModel;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_cell_view_get_type" });
        return cFn();
    }
};
/// Class [CenterBox](https://docs.gtk.org/gtk4/class.CenterBox.html)
/// - property [baseline-position](https://docs.gtk.org/gtk4/property.CenterBox.baseline-position.html): (rw) `gtk.BaselinePosition`
/// - property [center-widget](https://docs.gtk.org/gtk4/property.CenterBox.center-widget.html): (rw) `gtk.Widget`
/// - property [end-widget](https://docs.gtk.org/gtk4/property.CenterBox.end-widget.html): (rw) `gtk.Widget`
/// - property [shrink-center-last](https://docs.gtk.org/gtk4/property.CenterBox.shrink-center-last.html): (rw) `bool`
/// - property [start-widget](https://docs.gtk.org/gtk4/property.CenterBox.start-widget.html): (rw) `gtk.Widget`
pub const CenterBox = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.CenterBoxClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CenterBox.new.html)
    pub fn new() *CenterBox {
        const cFn = @extern(*const fn () callconv(.c) *CenterBox, .{ .name = "gtk_center_box_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_baseline_position](https://docs.gtk.org/gtk4/method.CenterBox.get_baseline_position.html)
    pub fn getBaselinePosition(self: *CenterBox) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*CenterBox) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_center_box_get_baseline_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_center_widget](https://docs.gtk.org/gtk4/method.CenterBox.get_center_widget.html)
    pub fn getCenterWidget(self: *CenterBox) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterBox) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_box_get_center_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_end_widget](https://docs.gtk.org/gtk4/method.CenterBox.get_end_widget.html)
    pub fn getEndWidget(self: *CenterBox) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterBox) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_box_get_end_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_shrink_center_last](https://docs.gtk.org/gtk4/method.CenterBox.get_shrink_center_last.html)
    pub fn getShrinkCenterLast(self: *CenterBox) bool {
        const cFn = @extern(*const fn (*CenterBox) callconv(.c) bool, .{ .name = "gtk_center_box_get_shrink_center_last" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_widget](https://docs.gtk.org/gtk4/method.CenterBox.get_start_widget.html)
    pub fn getStartWidget(self: *CenterBox) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterBox) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_box_get_start_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_baseline_position](https://docs.gtk.org/gtk4/method.CenterBox.set_baseline_position.html)
    pub fn setBaselinePosition(self: *CenterBox, _position: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*CenterBox, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_center_box_set_baseline_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_center_widget](https://docs.gtk.org/gtk4/method.CenterBox.set_center_widget.html)
    pub fn setCenterWidget(self: *CenterBox, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterBox, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_box_set_center_widget" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_end_widget](https://docs.gtk.org/gtk4/method.CenterBox.set_end_widget.html)
    pub fn setEndWidget(self: *CenterBox, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterBox, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_box_set_end_widget" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_shrink_center_last](https://docs.gtk.org/gtk4/method.CenterBox.set_shrink_center_last.html)
    pub fn setShrinkCenterLast(self: *CenterBox, _shrink_center_last: bool) void {
        const cFn = @extern(*const fn (*CenterBox, bool) callconv(.c) void, .{ .name = "gtk_center_box_set_shrink_center_last" });
        const ret = cFn(self, _shrink_center_last);
        return ret;
    }
    /// method [set_start_widget](https://docs.gtk.org/gtk4/method.CenterBox.set_start_widget.html)
    pub fn setStartWidget(self: *CenterBox, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterBox, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_box_set_start_widget" });
        const ret = cFn(self, _child);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_center_box_get_type" });
        return cFn();
    }
};
pub const CenterBoxClass = opaque {};
/// Class [CenterLayout](https://docs.gtk.org/gtk4/class.CenterLayout.html)
/// - property [shrink-center-last](https://docs.gtk.org/gtk4/property.CenterLayout.shrink-center-last.html): (rw) `bool`
pub const CenterLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.CenterLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CenterLayout.new.html)
    pub fn new() *CenterLayout {
        const cFn = @extern(*const fn () callconv(.c) *CenterLayout, .{ .name = "gtk_center_layout_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_baseline_position](https://docs.gtk.org/gtk4/method.CenterLayout.get_baseline_position.html)
    pub fn getBaselinePosition(self: *CenterLayout) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_center_layout_get_baseline_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_center_widget](https://docs.gtk.org/gtk4/method.CenterLayout.get_center_widget.html)
    pub fn getCenterWidget(self: *CenterLayout) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_layout_get_center_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_end_widget](https://docs.gtk.org/gtk4/method.CenterLayout.get_end_widget.html)
    pub fn getEndWidget(self: *CenterLayout) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_layout_get_end_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_orientation](https://docs.gtk.org/gtk4/method.CenterLayout.get_orientation.html)
    pub fn getOrientation(self: *CenterLayout) gtk.Orientation {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) gtk.Orientation, .{ .name = "gtk_center_layout_get_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_shrink_center_last](https://docs.gtk.org/gtk4/method.CenterLayout.get_shrink_center_last.html)
    pub fn getShrinkCenterLast(self: *CenterLayout) bool {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) bool, .{ .name = "gtk_center_layout_get_shrink_center_last" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_widget](https://docs.gtk.org/gtk4/method.CenterLayout.get_start_widget.html)
    pub fn getStartWidget(self: *CenterLayout) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CenterLayout) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_center_layout_get_start_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_baseline_position](https://docs.gtk.org/gtk4/method.CenterLayout.set_baseline_position.html)
    pub fn setBaselinePosition(self: *CenterLayout, _baseline_position: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*CenterLayout, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_center_layout_set_baseline_position" });
        const ret = cFn(self, _baseline_position);
        return ret;
    }
    /// method [set_center_widget](https://docs.gtk.org/gtk4/method.CenterLayout.set_center_widget.html)
    pub fn setCenterWidget(self: *CenterLayout, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterLayout, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_layout_set_center_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_end_widget](https://docs.gtk.org/gtk4/method.CenterLayout.set_end_widget.html)
    pub fn setEndWidget(self: *CenterLayout, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterLayout, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_layout_set_end_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_orientation](https://docs.gtk.org/gtk4/method.CenterLayout.set_orientation.html)
    pub fn setOrientation(self: *CenterLayout, _orientation: gtk.Orientation) void {
        const cFn = @extern(*const fn (*CenterLayout, gtk.Orientation) callconv(.c) void, .{ .name = "gtk_center_layout_set_orientation" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// method [set_shrink_center_last](https://docs.gtk.org/gtk4/method.CenterLayout.set_shrink_center_last.html)
    pub fn setShrinkCenterLast(self: *CenterLayout, _shrink_center_last: bool) void {
        const cFn = @extern(*const fn (*CenterLayout, bool) callconv(.c) void, .{ .name = "gtk_center_layout_set_shrink_center_last" });
        const ret = cFn(self, _shrink_center_last);
        return ret;
    }
    /// method [set_start_widget](https://docs.gtk.org/gtk4/method.CenterLayout.set_start_widget.html)
    pub fn setStartWidget(self: *CenterLayout, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CenterLayout, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_center_layout_set_start_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_center_layout_get_type" });
        return cFn();
    }
};
pub const CenterLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Class [CheckButton](https://docs.gtk.org/gtk4/class.CheckButton.html)
/// - property [active](https://docs.gtk.org/gtk4/property.CheckButton.active.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.CheckButton.child.html): (rw) `gtk.Widget`
/// - property [group](https://docs.gtk.org/gtk4/property.CheckButton.group.html): (-w) `gtk.CheckButton`
/// - property [inconsistent](https://docs.gtk.org/gtk4/property.CheckButton.inconsistent.html): (rw) `bool`
/// - property [label](https://docs.gtk.org/gtk4/property.CheckButton.label.html): (rw) `[*:0]const u8`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.CheckButton.use-underline.html): (rw) `bool`
pub const CheckButton = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.CheckButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CheckButton.new.html)
    pub fn new() *CheckButton {
        const cFn = @extern(*const fn () callconv(.c) *CheckButton, .{ .name = "gtk_check_button_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_label](https://docs.gtk.org/gtk4/ctor.CheckButton.new_with_label.html)
    pub fn newWithLabel(_label: ?[*:0]const u8) *CheckButton {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *CheckButton, .{ .name = "gtk_check_button_new_with_label" });
        const ret = cFn(_label);
        return ret;
    }
    /// ctor [new_with_mnemonic](https://docs.gtk.org/gtk4/ctor.CheckButton.new_with_mnemonic.html)
    pub fn newWithMnemonic(_label: ?[*:0]const u8) *CheckButton {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *CheckButton, .{ .name = "gtk_check_button_new_with_mnemonic" });
        const ret = cFn(_label);
        return ret;
    }
    /// method [get_active](https://docs.gtk.org/gtk4/method.CheckButton.get_active.html)
    pub fn getActive(self: *CheckButton) bool {
        const cFn = @extern(*const fn (*CheckButton) callconv(.c) bool, .{ .name = "gtk_check_button_get_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.CheckButton.get_child.html)
    pub fn getChild(self: *CheckButton) ?*gtk.Widget {
        const cFn = @extern(*const fn (*CheckButton) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_check_button_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_inconsistent](https://docs.gtk.org/gtk4/method.CheckButton.get_inconsistent.html)
    pub fn getInconsistent(self: *CheckButton) bool {
        const cFn = @extern(*const fn (*CheckButton) callconv(.c) bool, .{ .name = "gtk_check_button_get_inconsistent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.CheckButton.get_label.html)
    pub fn getLabel(self: *CheckButton) ?[*:0]u8 {
        const cFn = @extern(*const fn (*CheckButton) callconv(.c) ?[*:0]u8, .{ .name = "gtk_check_button_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.CheckButton.get_use_underline.html)
    pub fn getUseUnderline(self: *CheckButton) bool {
        const cFn = @extern(*const fn (*CheckButton) callconv(.c) bool, .{ .name = "gtk_check_button_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_active](https://docs.gtk.org/gtk4/method.CheckButton.set_active.html)
    pub fn setActive(self: *CheckButton, _setting: bool) void {
        const cFn = @extern(*const fn (*CheckButton, bool) callconv(.c) void, .{ .name = "gtk_check_button_set_active" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.CheckButton.set_child.html)
    pub fn setChild(self: *CheckButton, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*CheckButton, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_check_button_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_group](https://docs.gtk.org/gtk4/method.CheckButton.set_group.html)
    pub fn setGroup(self: *CheckButton, _group: ?*gtk.CheckButton) void {
        const cFn = @extern(*const fn (*CheckButton, ?*gtk.CheckButton) callconv(.c) void, .{ .name = "gtk_check_button_set_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// method [set_inconsistent](https://docs.gtk.org/gtk4/method.CheckButton.set_inconsistent.html)
    pub fn setInconsistent(self: *CheckButton, _inconsistent: bool) void {
        const cFn = @extern(*const fn (*CheckButton, bool) callconv(.c) void, .{ .name = "gtk_check_button_set_inconsistent" });
        const ret = cFn(self, _inconsistent);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.CheckButton.set_label.html)
    pub fn setLabel(self: *CheckButton, _label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*CheckButton, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_check_button_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.CheckButton.set_use_underline.html)
    pub fn setUseUnderline(self: *CheckButton, _setting: bool) void {
        const cFn = @extern(*const fn (*CheckButton, bool) callconv(.c) void, .{ .name = "gtk_check_button_set_use_underline" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.CheckButton.activate.html)
    pub fn activateV(self: *CheckButton) void {
        const class: *CheckButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [toggled](https://docs.gtk.org/gtk4/vfunc.CheckButton.toggled.html)
    pub fn toggledV(self: *CheckButton) void {
        const class: *CheckButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.toggled.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.CheckButton.activate.html)
    pub fn connectActivate(self: *CheckButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *CheckButton });
    }
    /// signal [toggled](https://docs.gtk.org/gtk4/signal.CheckButton.toggled.html)
    pub fn connectToggled(self: *CheckButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggled", handler, args, flags, &.{ void, *CheckButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_check_button_get_type" });
        return cFn();
    }
};
pub const CheckButtonClass = extern struct {
    parent_class: gtk.WidgetClass,
    toggled: ?*const fn (_check_button: *gtk.CheckButton) callconv(.c) void,
    activate: ?*const fn (_check_button: *gtk.CheckButton) callconv(.c) void,
    padding: [7]?*anyopaque,
};
/// Class [ClosureExpression](https://docs.gtk.org/gtk4/class.ClosureExpression.html)
pub const ClosureExpression = opaque {
    pub const Parent = gtk.Expression;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ClosureExpression.new.html)
    pub fn new(_value_type: core.Type, _closure: *gobject.Closure, _paramss: []*gtk.Expression) *ClosureExpression {
        const _n_params: u32 = @intCast(_paramss.len);
        const _params = _paramss.ptr;
        const cFn = @extern(*const fn (core.Type, *gobject.Closure, u32, ?[*]*gtk.Expression) callconv(.c) *ClosureExpression, .{ .name = "gtk_closure_expression_new" });
        const ret = cFn(_value_type, _closure, _n_params, _params);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_closure_expression_get_type" });
        return cFn();
    }
};
/// Enum [Collation](https://docs.gtk.org/gtk4/enum.Collation.html)
pub const Collation = enum(u32) {
    none = 0,
    unicode = 1,
    filename = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_collation_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [ColorButton](https://docs.gtk.org/gtk4/class.ColorButton.html)
/// - property [modal](https://docs.gtk.org/gtk4/property.ColorButton.modal.html): (rw) `bool`
/// - property [show-editor](https://docs.gtk.org/gtk4/property.ColorButton.show-editor.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.ColorButton.title.html): (rw) `[*:0]const u8`
pub const ColorButton = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ColorChooser, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColorButton.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *ColorButton {
            const cFn = @extern(*const fn () callconv(.c) *ColorButton, .{ .name = "gtk_color_button_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// ctor [new_with_rgba](https://docs.gtk.org/gtk4/ctor.ColorButton.new_with_rgba.html)
    pub fn newWithRgba(_rgba: *gdk.RGBA) *ColorButton {
        const cFn = @extern(*const fn (*gdk.RGBA) callconv(.c) *ColorButton, .{ .name = "gtk_color_button_new_with_rgba" });
        const ret = cFn(_rgba);
        return ret;
    }
    /// Deprecated:
    /// method [get_modal](https://docs.gtk.org/gtk4/method.ColorButton.get_modal.html)
    pub const getModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModal(self: *ColorButton) bool {
            const cFn = @extern(*const fn (*ColorButton) callconv(.c) bool, .{ .name = "gtk_color_button_get_modal" });
            const ret = cFn(self);
            return ret;
        }
    }.getModal;
    /// Deprecated:
    /// method [get_title](https://docs.gtk.org/gtk4/method.ColorButton.get_title.html)
    pub const getTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTitle(self: *ColorButton) [*:0]u8 {
            const cFn = @extern(*const fn (*ColorButton) callconv(.c) [*:0]u8, .{ .name = "gtk_color_button_get_title" });
            const ret = cFn(self);
            return ret;
        }
    }.getTitle;
    /// Deprecated:
    /// method [set_modal](https://docs.gtk.org/gtk4/method.ColorButton.set_modal.html)
    pub const setModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModal(self: *ColorButton, _modal: bool) void {
            const cFn = @extern(*const fn (*ColorButton, bool) callconv(.c) void, .{ .name = "gtk_color_button_set_modal" });
            const ret = cFn(self, _modal);
            return ret;
        }
    }.setModal;
    /// Deprecated:
    /// method [set_title](https://docs.gtk.org/gtk4/method.ColorButton.set_title.html)
    pub const setTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTitle(self: *ColorButton, _title: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ColorButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_color_button_set_title" });
            const ret = cFn(self, _title);
            return ret;
        }
    }.setTitle;
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ColorButton.activate.html)
    pub fn connectActivate(self: *ColorButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ColorButton });
    }
    /// signal [color-set](https://docs.gtk.org/gtk4/signal.ColorButton.color-set.html)
    pub fn connectColorSet(self: *ColorButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("color-set", handler, args, flags, &.{ void, *ColorButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_button_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Iface [ColorChooser](https://docs.gtk.org/gtk4/iface.ColorChooser.html)
/// - property [rgba](https://docs.gtk.org/gtk4/property.ColorChooser.rgba.html): (rw) `gdk.RGBA`
/// - property [use-alpha](https://docs.gtk.org/gtk4/property.ColorChooser.use-alpha.html): (rw) `bool`
pub const ColorChooser = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [add_palette](https://docs.gtk.org/gtk4/method.ColorChooser.add_palette.html)
    pub const addPalette = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addPalette(self: *ColorChooser, _orientation: gtk.Orientation, _colors_per_line: i32, _colorss: []gdk.RGBA) void {
            const _n_colors: i32 = @intCast(_colorss.len);
            const _colors = _colorss.ptr;
            const cFn = @extern(*const fn (*ColorChooser, gtk.Orientation, i32, i32, ?[*]gdk.RGBA) callconv(.c) void, .{ .name = "gtk_color_chooser_add_palette" });
            const ret = cFn(self, _orientation, _colors_per_line, _n_colors, _colors);
            return ret;
        }
    }.addPalette;
    /// Deprecated:
    /// method [get_rgba](https://docs.gtk.org/gtk4/method.ColorChooser.get_rgba.html)
    pub const getRgba = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRgba(self: *ColorChooser, _color: *gdk.RGBA) void {
            const cFn = @extern(*const fn (*ColorChooser, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_color_chooser_get_rgba" });
            const ret = cFn(self, _color);
            return ret;
        }
    }.getRgba;
    /// Deprecated:
    /// method [get_use_alpha](https://docs.gtk.org/gtk4/method.ColorChooser.get_use_alpha.html)
    pub const getUseAlpha = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseAlpha(self: *ColorChooser) bool {
            const cFn = @extern(*const fn (*ColorChooser) callconv(.c) bool, .{ .name = "gtk_color_chooser_get_use_alpha" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseAlpha;
    /// Deprecated:
    /// method [set_rgba](https://docs.gtk.org/gtk4/method.ColorChooser.set_rgba.html)
    pub const setRgba = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRgba(self: *ColorChooser, _color: *gdk.RGBA) void {
            const cFn = @extern(*const fn (*ColorChooser, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_color_chooser_set_rgba" });
            const ret = cFn(self, _color);
            return ret;
        }
    }.setRgba;
    /// Deprecated:
    /// method [set_use_alpha](https://docs.gtk.org/gtk4/method.ColorChooser.set_use_alpha.html)
    pub const setUseAlpha = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseAlpha(self: *ColorChooser, _use_alpha: bool) void {
            const cFn = @extern(*const fn (*ColorChooser, bool) callconv(.c) void, .{ .name = "gtk_color_chooser_set_use_alpha" });
            const ret = cFn(self, _use_alpha);
            return ret;
        }
    }.setUseAlpha;
    /// vfunc [add_palette](https://docs.gtk.org/gtk4/vfunc.ColorChooser.add_palette.html)
    pub fn addPaletteV(self: *ColorChooser, _orientation: gtk.Orientation, _colors_per_line: i32, _n_colors: i32, _colors: ?[*]gdk.RGBA) void {
        const class: *ColorChooserInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_palette.?;
        const ret = vFn(self, _orientation, _colors_per_line, _n_colors, _colors);
        return ret;
    }
    /// vfunc [color_activated](https://docs.gtk.org/gtk4/vfunc.ColorChooser.color_activated.html)
    pub fn colorActivatedV(self: *ColorChooser, _color: *gdk.RGBA) void {
        const class: *ColorChooserInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.color_activated.?;
        const ret = vFn(self, _color);
        return ret;
    }
    /// vfunc [get_rgba](https://docs.gtk.org/gtk4/vfunc.ColorChooser.get_rgba.html)
    pub fn getRgbaV(self: *ColorChooser, _color: *gdk.RGBA) void {
        const class: *ColorChooserInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_rgba.?;
        const ret = vFn(self, _color);
        return ret;
    }
    /// vfunc [set_rgba](https://docs.gtk.org/gtk4/vfunc.ColorChooser.set_rgba.html)
    pub fn setRgbaV(self: *ColorChooser, _color: *gdk.RGBA) void {
        const class: *ColorChooserInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_rgba.?;
        const ret = vFn(self, _color);
        return ret;
    }
    /// signal [color-activated](https://docs.gtk.org/gtk4/signal.ColorChooser.color-activated.html)
    pub fn connectColorActivated(self: *ColorChooser, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("color-activated", handler, args, flags, &.{ void, *ColorChooser, *gdk.RGBA });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_chooser_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [ColorChooserDialog](https://docs.gtk.org/gtk4/class.ColorChooserDialog.html)
/// - property [show-editor](https://docs.gtk.org/gtk4/property.ColorChooserDialog.show-editor.html): (rw) `bool`
pub const ColorChooserDialog = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ColorChooser, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColorChooserDialog.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_title: ?[*:0]const u8, _parent: ?*gtk.Window) *ColorChooserDialog {
            const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.Window) callconv(.c) *ColorChooserDialog, .{ .name = "gtk_color_chooser_dialog_new" });
            const ret = cFn(_title, _parent);
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_chooser_dialog_get_type" });
        return cFn();
    }
};
pub const ColorChooserInterface = extern struct {
    base_interface: gobject.TypeInterface,
    get_rgba: ?*const fn (_chooser: *gtk.ColorChooser, _color: *gdk.RGBA) callconv(.c) void,
    set_rgba: ?*const fn (_chooser: *gtk.ColorChooser, _color: *gdk.RGBA) callconv(.c) void,
    add_palette: ?*const fn (_chooser: *gtk.ColorChooser, _orientation: gtk.Orientation, _colors_per_line: i32, _n_colors: i32, _colors: ?[*]gdk.RGBA) callconv(.c) void,
    color_activated: ?*const fn (_chooser: *gtk.ColorChooser, _color: *gdk.RGBA) callconv(.c) void,
    padding: [12]?*anyopaque,
};
/// Deprecated:
/// Class [ColorChooserWidget](https://docs.gtk.org/gtk4/class.ColorChooserWidget.html)
/// - property [show-editor](https://docs.gtk.org/gtk4/property.ColorChooserWidget.show-editor.html): (rw) `bool`
pub const ColorChooserWidget = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ColorChooser, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColorChooserWidget.new.html)
    pub fn new() *ColorChooserWidget {
        const cFn = @extern(*const fn () callconv(.c) *ColorChooserWidget, .{ .name = "gtk_color_chooser_widget_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_chooser_widget_get_type" });
        return cFn();
    }
};
/// Class [ColorDialog](https://docs.gtk.org/gtk4/class.ColorDialog.html)
/// - property [modal](https://docs.gtk.org/gtk4/property.ColorDialog.modal.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.ColorDialog.title.html): (rw) `[*:0]const u8`
/// - property [with-alpha](https://docs.gtk.org/gtk4/property.ColorDialog.with-alpha.html): (rw) `bool`
pub const ColorDialog = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ColorDialogClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColorDialog.new.html)
    pub fn new() *ColorDialog {
        const cFn = @extern(*const fn () callconv(.c) *ColorDialog, .{ .name = "gtk_color_dialog_new" });
        const ret = cFn();
        return ret;
    }
    /// method [choose_rgba](https://docs.gtk.org/gtk4/method.ColorDialog.choose_rgba.html)
    pub fn chooseRgba(self: *ColorDialog, _parent: ?*gtk.Window, _initial_color: ?*gdk.RGBA, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*ColorDialog, ?*gtk.Window, ?*gdk.RGBA, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_color_dialog_choose_rgba" });
        const ret = cFn(self, _parent, _initial_color, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_rgba_finish](https://docs.gtk.org/gtk4/method.ColorDialog.choose_rgba_finish.html)
    pub fn chooseRgbaFinish(self: *ColorDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gdk.RGBA {
        const cFn = @extern(*const fn (*ColorDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gdk.RGBA, .{ .name = "gtk_color_dialog_choose_rgba_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.ColorDialog.get_modal.html)
    pub fn getModal(self: *ColorDialog) bool {
        const cFn = @extern(*const fn (*ColorDialog) callconv(.c) bool, .{ .name = "gtk_color_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.ColorDialog.get_title.html)
    pub fn getTitle(self: *ColorDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*ColorDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_color_dialog_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_with_alpha](https://docs.gtk.org/gtk4/method.ColorDialog.get_with_alpha.html)
    pub fn getWithAlpha(self: *ColorDialog) bool {
        const cFn = @extern(*const fn (*ColorDialog) callconv(.c) bool, .{ .name = "gtk_color_dialog_get_with_alpha" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.ColorDialog.set_modal.html)
    pub fn setModal(self: *ColorDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*ColorDialog, bool) callconv(.c) void, .{ .name = "gtk_color_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.ColorDialog.set_title.html)
    pub fn setTitle(self: *ColorDialog, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ColorDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_color_dialog_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [set_with_alpha](https://docs.gtk.org/gtk4/method.ColorDialog.set_with_alpha.html)
    pub fn setWithAlpha(self: *ColorDialog, _with_alpha: bool) void {
        const cFn = @extern(*const fn (*ColorDialog, bool) callconv(.c) void, .{ .name = "gtk_color_dialog_set_with_alpha" });
        const ret = cFn(self, _with_alpha);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_dialog_get_type" });
        return cFn();
    }
};
/// Class [ColorDialogButton](https://docs.gtk.org/gtk4/class.ColorDialogButton.html)
/// - property [dialog](https://docs.gtk.org/gtk4/property.ColorDialogButton.dialog.html): (rw) `gtk.ColorDialog`
/// - property [rgba](https://docs.gtk.org/gtk4/property.ColorDialogButton.rgba.html): (rw) `gdk.RGBA`
pub const ColorDialogButton = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ColorDialogButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColorDialogButton.new.html)
    pub fn new(_dialog: ?*gtk.ColorDialog) *ColorDialogButton {
        const cFn = @extern(*const fn (?*gtk.ColorDialog) callconv(.c) *ColorDialogButton, .{ .name = "gtk_color_dialog_button_new" });
        const ret = cFn(_dialog);
        return ret;
    }
    /// method [get_dialog](https://docs.gtk.org/gtk4/method.ColorDialogButton.get_dialog.html)
    pub fn getDialog(self: *ColorDialogButton) ?*gtk.ColorDialog {
        const cFn = @extern(*const fn (*ColorDialogButton) callconv(.c) ?*gtk.ColorDialog, .{ .name = "gtk_color_dialog_button_get_dialog" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_rgba](https://docs.gtk.org/gtk4/method.ColorDialogButton.get_rgba.html)
    pub fn getRgba(self: *ColorDialogButton) *gdk.RGBA {
        const cFn = @extern(*const fn (*ColorDialogButton) callconv(.c) *gdk.RGBA, .{ .name = "gtk_color_dialog_button_get_rgba" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_dialog](https://docs.gtk.org/gtk4/method.ColorDialogButton.set_dialog.html)
    pub fn setDialog(self: *ColorDialogButton, _dialog: *gtk.ColorDialog) void {
        const cFn = @extern(*const fn (*ColorDialogButton, *gtk.ColorDialog) callconv(.c) void, .{ .name = "gtk_color_dialog_button_set_dialog" });
        const ret = cFn(self, _dialog);
        return ret;
    }
    /// method [set_rgba](https://docs.gtk.org/gtk4/method.ColorDialogButton.set_rgba.html)
    pub fn setRgba(self: *ColorDialogButton, _color: *gdk.RGBA) void {
        const cFn = @extern(*const fn (*ColorDialogButton, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_color_dialog_button_set_rgba" });
        const ret = cFn(self, _color);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ColorDialogButton.activate.html)
    pub fn connectActivate(self: *ColorDialogButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ColorDialogButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_color_dialog_button_get_type" });
        return cFn();
    }
};
pub const ColorDialogButtonClass = extern struct {
    parent_class: gtk.WidgetClass,
};
pub const ColorDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [ColumnView](https://docs.gtk.org/gtk4/class.ColumnView.html)
/// - property [columns](https://docs.gtk.org/gtk4/property.ColumnView.columns.html): (r-) `gio.ListModel`
/// - property [enable-rubberband](https://docs.gtk.org/gtk4/property.ColumnView.enable-rubberband.html): (rw) `bool`
/// - property [header-factory](https://docs.gtk.org/gtk4/property.ColumnView.header-factory.html): (rw) `gtk.ListItemFactory`
/// - property [model](https://docs.gtk.org/gtk4/property.ColumnView.model.html): (rw) `gtk.SelectionModel`
/// - property [reorderable](https://docs.gtk.org/gtk4/property.ColumnView.reorderable.html): (rw) `bool`
/// - property [row-factory](https://docs.gtk.org/gtk4/property.ColumnView.row-factory.html): (rw) `gtk.ListItemFactory`
/// - property [show-column-separators](https://docs.gtk.org/gtk4/property.ColumnView.show-column-separators.html): (rw) `bool`
/// - property [show-row-separators](https://docs.gtk.org/gtk4/property.ColumnView.show-row-separators.html): (rw) `bool`
/// - property [single-click-activate](https://docs.gtk.org/gtk4/property.ColumnView.single-click-activate.html): (rw) `bool`
/// - property [sorter](https://docs.gtk.org/gtk4/property.ColumnView.sorter.html): (r-) `gtk.Sorter`
/// - property [tab-behavior](https://docs.gtk.org/gtk4/property.ColumnView.tab-behavior.html): (rw) `gtk.ListTabBehavior`
pub const ColumnView = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ColumnViewClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColumnView.new.html)
    pub fn new(_model: ?*gtk.SelectionModel) *ColumnView {
        const cFn = @extern(*const fn (?*gtk.SelectionModel) callconv(.c) *ColumnView, .{ .name = "gtk_column_view_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [append_column](https://docs.gtk.org/gtk4/method.ColumnView.append_column.html)
    pub fn appendColumn(self: *ColumnView, _column: *gtk.ColumnViewColumn) void {
        const cFn = @extern(*const fn (*ColumnView, *gtk.ColumnViewColumn) callconv(.c) void, .{ .name = "gtk_column_view_append_column" });
        const ret = cFn(self, _column);
        return ret;
    }
    /// method [get_columns](https://docs.gtk.org/gtk4/method.ColumnView.get_columns.html)
    pub fn getColumns(self: *ColumnView) *gio.ListModel {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) *gio.ListModel, .{ .name = "gtk_column_view_get_columns" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enable_rubberband](https://docs.gtk.org/gtk4/method.ColumnView.get_enable_rubberband.html)
    pub fn getEnableRubberband(self: *ColumnView) bool {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) bool, .{ .name = "gtk_column_view_get_enable_rubberband" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header_factory](https://docs.gtk.org/gtk4/method.ColumnView.get_header_factory.html)
    pub fn getHeaderFactory(self: *ColumnView) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_column_view_get_header_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.ColumnView.get_model.html)
    pub fn getModel(self: *ColumnView) ?*gtk.SelectionModel {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) ?*gtk.SelectionModel, .{ .name = "gtk_column_view_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_reorderable](https://docs.gtk.org/gtk4/method.ColumnView.get_reorderable.html)
    pub fn getReorderable(self: *ColumnView) bool {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) bool, .{ .name = "gtk_column_view_get_reorderable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_factory](https://docs.gtk.org/gtk4/method.ColumnView.get_row_factory.html)
    pub fn getRowFactory(self: *ColumnView) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_column_view_get_row_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_column_separators](https://docs.gtk.org/gtk4/method.ColumnView.get_show_column_separators.html)
    pub fn getShowColumnSeparators(self: *ColumnView) bool {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) bool, .{ .name = "gtk_column_view_get_show_column_separators" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_row_separators](https://docs.gtk.org/gtk4/method.ColumnView.get_show_row_separators.html)
    pub fn getShowRowSeparators(self: *ColumnView) bool {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) bool, .{ .name = "gtk_column_view_get_show_row_separators" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_single_click_activate](https://docs.gtk.org/gtk4/method.ColumnView.get_single_click_activate.html)
    pub fn getSingleClickActivate(self: *ColumnView) bool {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) bool, .{ .name = "gtk_column_view_get_single_click_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sorter](https://docs.gtk.org/gtk4/method.ColumnView.get_sorter.html)
    pub fn getSorter(self: *ColumnView) ?*gtk.Sorter {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) ?*gtk.Sorter, .{ .name = "gtk_column_view_get_sorter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab_behavior](https://docs.gtk.org/gtk4/method.ColumnView.get_tab_behavior.html)
    pub fn getTabBehavior(self: *ColumnView) gtk.ListTabBehavior {
        const cFn = @extern(*const fn (*ColumnView) callconv(.c) gtk.ListTabBehavior, .{ .name = "gtk_column_view_get_tab_behavior" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_column](https://docs.gtk.org/gtk4/method.ColumnView.insert_column.html)
    pub fn insertColumn(self: *ColumnView, _position: u32, _column: *gtk.ColumnViewColumn) void {
        const cFn = @extern(*const fn (*ColumnView, u32, *gtk.ColumnViewColumn) callconv(.c) void, .{ .name = "gtk_column_view_insert_column" });
        const ret = cFn(self, _position, _column);
        return ret;
    }
    /// method [remove_column](https://docs.gtk.org/gtk4/method.ColumnView.remove_column.html)
    pub fn removeColumn(self: *ColumnView, _column: *gtk.ColumnViewColumn) void {
        const cFn = @extern(*const fn (*ColumnView, *gtk.ColumnViewColumn) callconv(.c) void, .{ .name = "gtk_column_view_remove_column" });
        const ret = cFn(self, _column);
        return ret;
    }
    /// method [scroll_to](https://docs.gtk.org/gtk4/method.ColumnView.scroll_to.html)
    pub fn scrollTo(self: *ColumnView, _pos: u32, _column: ?*gtk.ColumnViewColumn, _flags: gtk.ListScrollFlags, _scroll: ?*gtk.ScrollInfo) void {
        const cFn = @extern(*const fn (*ColumnView, u32, ?*gtk.ColumnViewColumn, gtk.ListScrollFlags, ?*gtk.ScrollInfo) callconv(.c) void, .{ .name = "gtk_column_view_scroll_to" });
        const ret = cFn(self, _pos, _column, _flags, _scroll);
        return ret;
    }
    /// method [set_enable_rubberband](https://docs.gtk.org/gtk4/method.ColumnView.set_enable_rubberband.html)
    pub fn setEnableRubberband(self: *ColumnView, _enable_rubberband: bool) void {
        const cFn = @extern(*const fn (*ColumnView, bool) callconv(.c) void, .{ .name = "gtk_column_view_set_enable_rubberband" });
        const ret = cFn(self, _enable_rubberband);
        return ret;
    }
    /// method [set_header_factory](https://docs.gtk.org/gtk4/method.ColumnView.set_header_factory.html)
    pub fn setHeaderFactory(self: *ColumnView, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*ColumnView, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_column_view_set_header_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.ColumnView.set_model.html)
    pub fn setModel(self: *ColumnView, _model: ?*gtk.SelectionModel) void {
        const cFn = @extern(*const fn (*ColumnView, ?*gtk.SelectionModel) callconv(.c) void, .{ .name = "gtk_column_view_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_reorderable](https://docs.gtk.org/gtk4/method.ColumnView.set_reorderable.html)
    pub fn setReorderable(self: *ColumnView, _reorderable: bool) void {
        const cFn = @extern(*const fn (*ColumnView, bool) callconv(.c) void, .{ .name = "gtk_column_view_set_reorderable" });
        const ret = cFn(self, _reorderable);
        return ret;
    }
    /// method [set_row_factory](https://docs.gtk.org/gtk4/method.ColumnView.set_row_factory.html)
    pub fn setRowFactory(self: *ColumnView, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*ColumnView, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_column_view_set_row_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_show_column_separators](https://docs.gtk.org/gtk4/method.ColumnView.set_show_column_separators.html)
    pub fn setShowColumnSeparators(self: *ColumnView, _show_column_separators: bool) void {
        const cFn = @extern(*const fn (*ColumnView, bool) callconv(.c) void, .{ .name = "gtk_column_view_set_show_column_separators" });
        const ret = cFn(self, _show_column_separators);
        return ret;
    }
    /// method [set_show_row_separators](https://docs.gtk.org/gtk4/method.ColumnView.set_show_row_separators.html)
    pub fn setShowRowSeparators(self: *ColumnView, _show_row_separators: bool) void {
        const cFn = @extern(*const fn (*ColumnView, bool) callconv(.c) void, .{ .name = "gtk_column_view_set_show_row_separators" });
        const ret = cFn(self, _show_row_separators);
        return ret;
    }
    /// method [set_single_click_activate](https://docs.gtk.org/gtk4/method.ColumnView.set_single_click_activate.html)
    pub fn setSingleClickActivate(self: *ColumnView, _single_click_activate: bool) void {
        const cFn = @extern(*const fn (*ColumnView, bool) callconv(.c) void, .{ .name = "gtk_column_view_set_single_click_activate" });
        const ret = cFn(self, _single_click_activate);
        return ret;
    }
    /// method [set_tab_behavior](https://docs.gtk.org/gtk4/method.ColumnView.set_tab_behavior.html)
    pub fn setTabBehavior(self: *ColumnView, _tab_behavior: gtk.ListTabBehavior) void {
        const cFn = @extern(*const fn (*ColumnView, gtk.ListTabBehavior) callconv(.c) void, .{ .name = "gtk_column_view_set_tab_behavior" });
        const ret = cFn(self, _tab_behavior);
        return ret;
    }
    /// method [sort_by_column](https://docs.gtk.org/gtk4/method.ColumnView.sort_by_column.html)
    pub fn sortByColumn(self: *ColumnView, _column: ?*gtk.ColumnViewColumn, _direction: gtk.SortType) void {
        const cFn = @extern(*const fn (*ColumnView, ?*gtk.ColumnViewColumn, gtk.SortType) callconv(.c) void, .{ .name = "gtk_column_view_sort_by_column" });
        const ret = cFn(self, _column, _direction);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ColumnView.activate.html)
    pub fn connectActivate(self: *ColumnView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ColumnView, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_column_view_get_type" });
        return cFn();
    }
};
/// Class [ColumnViewCell](https://docs.gtk.org/gtk4/class.ColumnViewCell.html)
/// - property [child](https://docs.gtk.org/gtk4/property.ColumnViewCell.child.html): (rw) `gtk.Widget`
/// - property [focusable](https://docs.gtk.org/gtk4/property.ColumnViewCell.focusable.html): (rw) `bool`
/// - property [item](https://docs.gtk.org/gtk4/property.ColumnViewCell.item.html): (r-) `gobject.Object`
/// - property [position](https://docs.gtk.org/gtk4/property.ColumnViewCell.position.html): (r-) `u32`
/// - property [selected](https://docs.gtk.org/gtk4/property.ColumnViewCell.selected.html): (r-) `bool`
pub const ColumnViewCell = opaque {
    pub const Parent = gtk.ListItem;
    pub const Class = gtk.ColumnViewCellClass;
    /// method [get_child](https://docs.gtk.org/gtk4/method.ColumnViewCell.get_child.html)
    pub fn getChild(self: *ColumnViewCell) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ColumnViewCell) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_column_view_cell_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focusable](https://docs.gtk.org/gtk4/method.ColumnViewCell.get_focusable.html)
    pub fn getFocusable(self: *ColumnViewCell) bool {
        const cFn = @extern(*const fn (*ColumnViewCell) callconv(.c) bool, .{ .name = "gtk_column_view_cell_get_focusable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.ColumnViewCell.get_item.html)
    pub fn getItem(self: *ColumnViewCell) ?*gobject.Object {
        const cFn = @extern(*const fn (*ColumnViewCell) callconv(.c) ?*gobject.Object, .{ .name = "gtk_column_view_cell_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.ColumnViewCell.get_position.html)
    pub fn getPosition(self: *ColumnViewCell) u32 {
        const cFn = @extern(*const fn (*ColumnViewCell) callconv(.c) u32, .{ .name = "gtk_column_view_cell_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected](https://docs.gtk.org/gtk4/method.ColumnViewCell.get_selected.html)
    pub fn getSelected(self: *ColumnViewCell) bool {
        const cFn = @extern(*const fn (*ColumnViewCell) callconv(.c) bool, .{ .name = "gtk_column_view_cell_get_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.ColumnViewCell.set_child.html)
    pub fn setChild(self: *ColumnViewCell, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ColumnViewCell, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_column_view_cell_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_focusable](https://docs.gtk.org/gtk4/method.ColumnViewCell.set_focusable.html)
    pub fn setFocusable(self: *ColumnViewCell, _focusable: bool) void {
        const cFn = @extern(*const fn (*ColumnViewCell, bool) callconv(.c) void, .{ .name = "gtk_column_view_cell_set_focusable" });
        const ret = cFn(self, _focusable);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_column_view_cell_get_type" });
        return cFn();
    }
};
pub const ColumnViewCellClass = opaque {};
pub const ColumnViewClass = opaque {};
/// Class [ColumnViewColumn](https://docs.gtk.org/gtk4/class.ColumnViewColumn.html)
/// - property [column-view](https://docs.gtk.org/gtk4/property.ColumnViewColumn.column-view.html): (r-) `gtk.ColumnView`
/// - property [expand](https://docs.gtk.org/gtk4/property.ColumnViewColumn.expand.html): (rw) `bool`
/// - property [factory](https://docs.gtk.org/gtk4/property.ColumnViewColumn.factory.html): (rw) `gtk.ListItemFactory`
/// - property [fixed-width](https://docs.gtk.org/gtk4/property.ColumnViewColumn.fixed-width.html): (rw) `i32`
/// - property [header-menu](https://docs.gtk.org/gtk4/property.ColumnViewColumn.header-menu.html): (rw) `gio.MenuModel`
/// - property [id](https://docs.gtk.org/gtk4/property.ColumnViewColumn.id.html): (rw) `[*:0]const u8`
/// - property [resizable](https://docs.gtk.org/gtk4/property.ColumnViewColumn.resizable.html): (rw) `bool`
/// - property [sorter](https://docs.gtk.org/gtk4/property.ColumnViewColumn.sorter.html): (rw) `gtk.Sorter`
/// - property [title](https://docs.gtk.org/gtk4/property.ColumnViewColumn.title.html): (rw) `[*:0]const u8`
/// - property [visible](https://docs.gtk.org/gtk4/property.ColumnViewColumn.visible.html): (rw) `bool`
pub const ColumnViewColumn = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ColumnViewColumnClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ColumnViewColumn.new.html)
    pub fn new(_title: ?[*:0]const u8, _factory: ?*gtk.ListItemFactory) *ColumnViewColumn {
        const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.ListItemFactory) callconv(.c) *ColumnViewColumn, .{ .name = "gtk_column_view_column_new" });
        const ret = cFn(_title, _factory);
        return ret;
    }
    /// method [get_column_view](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_column_view.html)
    pub fn getColumnView(self: *ColumnViewColumn) ?*gtk.ColumnView {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?*gtk.ColumnView, .{ .name = "gtk_column_view_column_get_column_view" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_expand](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_expand.html)
    pub fn getExpand(self: *ColumnViewColumn) bool {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) bool, .{ .name = "gtk_column_view_column_get_expand" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_factory](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_factory.html)
    pub fn getFactory(self: *ColumnViewColumn) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_column_view_column_get_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fixed_width](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_fixed_width.html)
    pub fn getFixedWidth(self: *ColumnViewColumn) i32 {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) i32, .{ .name = "gtk_column_view_column_get_fixed_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header_menu](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_header_menu.html)
    pub fn getHeaderMenu(self: *ColumnViewColumn) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_column_view_column_get_header_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_id](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_id.html)
    pub fn getId(self: *ColumnViewColumn) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?[*:0]u8, .{ .name = "gtk_column_view_column_get_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resizable](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_resizable.html)
    pub fn getResizable(self: *ColumnViewColumn) bool {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) bool, .{ .name = "gtk_column_view_column_get_resizable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sorter](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_sorter.html)
    pub fn getSorter(self: *ColumnViewColumn) ?*gtk.Sorter {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?*gtk.Sorter, .{ .name = "gtk_column_view_column_get_sorter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_title.html)
    pub fn getTitle(self: *ColumnViewColumn) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) ?[*:0]u8, .{ .name = "gtk_column_view_column_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible](https://docs.gtk.org/gtk4/method.ColumnViewColumn.get_visible.html)
    pub fn getVisible(self: *ColumnViewColumn) bool {
        const cFn = @extern(*const fn (*ColumnViewColumn) callconv(.c) bool, .{ .name = "gtk_column_view_column_get_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_expand](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_expand.html)
    pub fn setExpand(self: *ColumnViewColumn, _expand: bool) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, bool) callconv(.c) void, .{ .name = "gtk_column_view_column_set_expand" });
        const ret = cFn(self, _expand);
        return ret;
    }
    /// method [set_factory](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_factory.html)
    pub fn setFactory(self: *ColumnViewColumn, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_column_view_column_set_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_fixed_width](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_fixed_width.html)
    pub fn setFixedWidth(self: *ColumnViewColumn, _fixed_width: i32) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, i32) callconv(.c) void, .{ .name = "gtk_column_view_column_set_fixed_width" });
        const ret = cFn(self, _fixed_width);
        return ret;
    }
    /// method [set_header_menu](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_header_menu.html)
    pub fn setHeaderMenu(self: *ColumnViewColumn, _menu: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_column_view_column_set_header_menu" });
        const ret = cFn(self, _menu);
        return ret;
    }
    /// method [set_id](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_id.html)
    pub fn setId(self: *ColumnViewColumn, _id: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_column_view_column_set_id" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// method [set_resizable](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_resizable.html)
    pub fn setResizable(self: *ColumnViewColumn, _resizable: bool) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, bool) callconv(.c) void, .{ .name = "gtk_column_view_column_set_resizable" });
        const ret = cFn(self, _resizable);
        return ret;
    }
    /// method [set_sorter](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_sorter.html)
    pub fn setSorter(self: *ColumnViewColumn, _sorter: ?*gtk.Sorter) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, ?*gtk.Sorter) callconv(.c) void, .{ .name = "gtk_column_view_column_set_sorter" });
        const ret = cFn(self, _sorter);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_title.html)
    pub fn setTitle(self: *ColumnViewColumn, _title: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_column_view_column_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [set_visible](https://docs.gtk.org/gtk4/method.ColumnViewColumn.set_visible.html)
    pub fn setVisible(self: *ColumnViewColumn, _visible: bool) void {
        const cFn = @extern(*const fn (*ColumnViewColumn, bool) callconv(.c) void, .{ .name = "gtk_column_view_column_set_visible" });
        const ret = cFn(self, _visible);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_column_view_column_get_type" });
        return cFn();
    }
};
pub const ColumnViewColumnClass = opaque {};
/// Class [ColumnViewRow](https://docs.gtk.org/gtk4/class.ColumnViewRow.html)
/// - property [accessible-description](https://docs.gtk.org/gtk4/property.ColumnViewRow.accessible-description.html): (rw) `[*:0]const u8`
/// - property [accessible-label](https://docs.gtk.org/gtk4/property.ColumnViewRow.accessible-label.html): (rw) `[*:0]const u8`
/// - property [activatable](https://docs.gtk.org/gtk4/property.ColumnViewRow.activatable.html): (rw) `bool`
/// - property [focusable](https://docs.gtk.org/gtk4/property.ColumnViewRow.focusable.html): (rw) `bool`
/// - property [item](https://docs.gtk.org/gtk4/property.ColumnViewRow.item.html): (r-) `gobject.Object`
/// - property [position](https://docs.gtk.org/gtk4/property.ColumnViewRow.position.html): (r-) `u32`
/// - property [selectable](https://docs.gtk.org/gtk4/property.ColumnViewRow.selectable.html): (rw) `bool`
/// - property [selected](https://docs.gtk.org/gtk4/property.ColumnViewRow.selected.html): (r-) `bool`
pub const ColumnViewRow = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ColumnViewRowClass;
    /// method [get_accessible_description](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_accessible_description.html)
    pub fn getAccessibleDescription(self: *ColumnViewRow) [*:0]u8 {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) [*:0]u8, .{ .name = "gtk_column_view_row_get_accessible_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_accessible_label](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_accessible_label.html)
    pub fn getAccessibleLabel(self: *ColumnViewRow) [*:0]u8 {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) [*:0]u8, .{ .name = "gtk_column_view_row_get_accessible_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_activatable](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_activatable.html)
    pub fn getActivatable(self: *ColumnViewRow) bool {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) bool, .{ .name = "gtk_column_view_row_get_activatable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focusable](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_focusable.html)
    pub fn getFocusable(self: *ColumnViewRow) bool {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) bool, .{ .name = "gtk_column_view_row_get_focusable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_item.html)
    pub fn getItem(self: *ColumnViewRow) ?*gobject.Object {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) ?*gobject.Object, .{ .name = "gtk_column_view_row_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_position.html)
    pub fn getPosition(self: *ColumnViewRow) u32 {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) u32, .{ .name = "gtk_column_view_row_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selectable](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_selectable.html)
    pub fn getSelectable(self: *ColumnViewRow) bool {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) bool, .{ .name = "gtk_column_view_row_get_selectable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected](https://docs.gtk.org/gtk4/method.ColumnViewRow.get_selected.html)
    pub fn getSelected(self: *ColumnViewRow) bool {
        const cFn = @extern(*const fn (*ColumnViewRow) callconv(.c) bool, .{ .name = "gtk_column_view_row_get_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_accessible_description](https://docs.gtk.org/gtk4/method.ColumnViewRow.set_accessible_description.html)
    pub fn setAccessibleDescription(self: *ColumnViewRow, _description: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ColumnViewRow, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_column_view_row_set_accessible_description" });
        const ret = cFn(self, _description);
        return ret;
    }
    /// method [set_accessible_label](https://docs.gtk.org/gtk4/method.ColumnViewRow.set_accessible_label.html)
    pub fn setAccessibleLabel(self: *ColumnViewRow, _label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ColumnViewRow, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_column_view_row_set_accessible_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_activatable](https://docs.gtk.org/gtk4/method.ColumnViewRow.set_activatable.html)
    pub fn setActivatable(self: *ColumnViewRow, _activatable: bool) void {
        const cFn = @extern(*const fn (*ColumnViewRow, bool) callconv(.c) void, .{ .name = "gtk_column_view_row_set_activatable" });
        const ret = cFn(self, _activatable);
        return ret;
    }
    /// method [set_focusable](https://docs.gtk.org/gtk4/method.ColumnViewRow.set_focusable.html)
    pub fn setFocusable(self: *ColumnViewRow, _focusable: bool) void {
        const cFn = @extern(*const fn (*ColumnViewRow, bool) callconv(.c) void, .{ .name = "gtk_column_view_row_set_focusable" });
        const ret = cFn(self, _focusable);
        return ret;
    }
    /// method [set_selectable](https://docs.gtk.org/gtk4/method.ColumnViewRow.set_selectable.html)
    pub fn setSelectable(self: *ColumnViewRow, _selectable: bool) void {
        const cFn = @extern(*const fn (*ColumnViewRow, bool) callconv(.c) void, .{ .name = "gtk_column_view_row_set_selectable" });
        const ret = cFn(self, _selectable);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_column_view_row_get_type" });
        return cFn();
    }
};
pub const ColumnViewRowClass = opaque {};
/// Class [ColumnViewSorter](https://docs.gtk.org/gtk4/class.ColumnViewSorter.html)
/// - property [primary-sort-column](https://docs.gtk.org/gtk4/property.ColumnViewSorter.primary-sort-column.html): (r-) `gtk.ColumnViewColumn`
/// - property [primary-sort-order](https://docs.gtk.org/gtk4/property.ColumnViewSorter.primary-sort-order.html): (r-) `gtk.SortType`
pub const ColumnViewSorter = opaque {
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.ColumnViewSorterClass;
    /// method [get_n_sort_columns](https://docs.gtk.org/gtk4/method.ColumnViewSorter.get_n_sort_columns.html)
    pub fn getNSortColumns(self: *ColumnViewSorter) u32 {
        const cFn = @extern(*const fn (*ColumnViewSorter) callconv(.c) u32, .{ .name = "gtk_column_view_sorter_get_n_sort_columns" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nth_sort_column](https://docs.gtk.org/gtk4/method.ColumnViewSorter.get_nth_sort_column.html)
    pub fn getNthSortColumn(self: *ColumnViewSorter, _position: u32) struct {
        ret: ?*gtk.ColumnViewColumn,
        sort_order: gtk.SortType,
    } {
        var sort_order_out: gtk.SortType = undefined;
        const _sort_order = &sort_order_out;
        const cFn = @extern(*const fn (*ColumnViewSorter, u32, *gtk.SortType) callconv(.c) ?*gtk.ColumnViewColumn, .{ .name = "gtk_column_view_sorter_get_nth_sort_column" });
        const ret = cFn(self, _position, _sort_order);
        return .{ .ret = ret, .sort_order = sort_order_out };
    }
    /// method [get_primary_sort_column](https://docs.gtk.org/gtk4/method.ColumnViewSorter.get_primary_sort_column.html)
    pub fn getPrimarySortColumn(self: *ColumnViewSorter) ?*gtk.ColumnViewColumn {
        const cFn = @extern(*const fn (*ColumnViewSorter) callconv(.c) ?*gtk.ColumnViewColumn, .{ .name = "gtk_column_view_sorter_get_primary_sort_column" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_primary_sort_order](https://docs.gtk.org/gtk4/method.ColumnViewSorter.get_primary_sort_order.html)
    pub fn getPrimarySortOrder(self: *ColumnViewSorter) gtk.SortType {
        const cFn = @extern(*const fn (*ColumnViewSorter) callconv(.c) gtk.SortType, .{ .name = "gtk_column_view_sorter_get_primary_sort_order" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_column_view_sorter_get_type" });
        return cFn();
    }
};
pub const ColumnViewSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Deprecated:
/// Class [ComboBox](https://docs.gtk.org/gtk4/class.ComboBox.html)
/// - property [active](https://docs.gtk.org/gtk4/property.ComboBox.active.html): (rw) `i32`
/// - property [active-id](https://docs.gtk.org/gtk4/property.ComboBox.active-id.html): (rw) `[*:0]const u8`
/// - property [button-sensitivity](https://docs.gtk.org/gtk4/property.ComboBox.button-sensitivity.html): (rw) `gtk.SensitivityType`
/// - property [child](https://docs.gtk.org/gtk4/property.ComboBox.child.html): (rw) `gtk.Widget`
/// - property [entry-text-column](https://docs.gtk.org/gtk4/property.ComboBox.entry-text-column.html): (rw) `i32`
/// - property [has-entry](https://docs.gtk.org/gtk4/property.ComboBox.has-entry.html): (r-) `bool`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.ComboBox.has-frame.html): (rw) `bool`
/// - property [id-column](https://docs.gtk.org/gtk4/property.ComboBox.id-column.html): (rw) `i32`
/// - property [model](https://docs.gtk.org/gtk4/property.ComboBox.model.html): (rw) `gtk.TreeModel`
/// - property [popup-fixed-width](https://docs.gtk.org/gtk4/property.ComboBox.popup-fixed-width.html): (rw) `bool`
/// - property [popup-shown](https://docs.gtk.org/gtk4/property.ComboBox.popup-shown.html): (r-) `bool`
pub const ComboBox = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.CellEditable, gtk.CellLayout, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ComboBoxClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ComboBox.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *ComboBox {
            const cFn = @extern(*const fn () callconv(.c) *ComboBox, .{ .name = "gtk_combo_box_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_entry](https://docs.gtk.org/gtk4/ctor.ComboBox.new_with_entry.html)
    pub const newWithEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithEntry() *ComboBox {
            const cFn = @extern(*const fn () callconv(.c) *ComboBox, .{ .name = "gtk_combo_box_new_with_entry" });
            const ret = cFn();
            return ret;
        }
    }.newWithEntry;
    /// Deprecated:
    /// ctor [new_with_model](https://docs.gtk.org/gtk4/ctor.ComboBox.new_with_model.html)
    pub const newWithModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithModel(_model: *gtk.TreeModel) *ComboBox {
            const cFn = @extern(*const fn (*gtk.TreeModel) callconv(.c) *ComboBox, .{ .name = "gtk_combo_box_new_with_model" });
            const ret = cFn(_model);
            return ret;
        }
    }.newWithModel;
    /// Deprecated:
    /// ctor [new_with_model_and_entry](https://docs.gtk.org/gtk4/ctor.ComboBox.new_with_model_and_entry.html)
    pub const newWithModelAndEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithModelAndEntry(_model: *gtk.TreeModel) *ComboBox {
            const cFn = @extern(*const fn (*gtk.TreeModel) callconv(.c) *ComboBox, .{ .name = "gtk_combo_box_new_with_model_and_entry" });
            const ret = cFn(_model);
            return ret;
        }
    }.newWithModelAndEntry;
    /// Deprecated:
    /// method [get_active](https://docs.gtk.org/gtk4/method.ComboBox.get_active.html)
    pub const getActive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActive(self: *ComboBox) i32 {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) i32, .{ .name = "gtk_combo_box_get_active" });
            const ret = cFn(self);
            return ret;
        }
    }.getActive;
    /// Deprecated:
    /// method [get_active_id](https://docs.gtk.org/gtk4/method.ComboBox.get_active_id.html)
    pub const getActiveId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActiveId(self: *ComboBox) ?[*:0]u8 {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) ?[*:0]u8, .{ .name = "gtk_combo_box_get_active_id" });
            const ret = cFn(self);
            return ret;
        }
    }.getActiveId;
    /// Deprecated:
    /// method [get_active_iter](https://docs.gtk.org/gtk4/method.ComboBox.get_active_iter.html)
    pub const getActiveIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActiveIter(self: *ComboBox, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*ComboBox, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_combo_box_get_active_iter" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.getActiveIter;
    /// Deprecated:
    /// method [get_button_sensitivity](https://docs.gtk.org/gtk4/method.ComboBox.get_button_sensitivity.html)
    pub const getButtonSensitivity = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getButtonSensitivity(self: *ComboBox) gtk.SensitivityType {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) gtk.SensitivityType, .{ .name = "gtk_combo_box_get_button_sensitivity" });
            const ret = cFn(self);
            return ret;
        }
    }.getButtonSensitivity;
    /// Deprecated:
    /// method [get_child](https://docs.gtk.org/gtk4/method.ComboBox.get_child.html)
    pub const getChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getChild(self: *ComboBox) ?*gtk.Widget {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_combo_box_get_child" });
            const ret = cFn(self);
            return ret;
        }
    }.getChild;
    /// Deprecated:
    /// method [get_entry_text_column](https://docs.gtk.org/gtk4/method.ComboBox.get_entry_text_column.html)
    pub const getEntryTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEntryTextColumn(self: *ComboBox) i32 {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) i32, .{ .name = "gtk_combo_box_get_entry_text_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getEntryTextColumn;
    /// Deprecated:
    /// method [get_has_entry](https://docs.gtk.org/gtk4/method.ComboBox.get_has_entry.html)
    pub const getHasEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHasEntry(self: *ComboBox) bool {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) bool, .{ .name = "gtk_combo_box_get_has_entry" });
            const ret = cFn(self);
            return ret;
        }
    }.getHasEntry;
    /// Deprecated:
    /// method [get_id_column](https://docs.gtk.org/gtk4/method.ComboBox.get_id_column.html)
    pub const getIdColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIdColumn(self: *ComboBox) i32 {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) i32, .{ .name = "gtk_combo_box_get_id_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getIdColumn;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.ComboBox.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *ComboBox) ?*gtk.TreeModel {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) ?*gtk.TreeModel, .{ .name = "gtk_combo_box_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [get_popup_fixed_width](https://docs.gtk.org/gtk4/method.ComboBox.get_popup_fixed_width.html)
    pub const getPopupFixedWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPopupFixedWidth(self: *ComboBox) bool {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) bool, .{ .name = "gtk_combo_box_get_popup_fixed_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getPopupFixedWidth;
    /// Deprecated:
    /// method [popdown](https://docs.gtk.org/gtk4/method.ComboBox.popdown.html)
    pub const popdown = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn popdown(self: *ComboBox) void {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) void, .{ .name = "gtk_combo_box_popdown" });
            const ret = cFn(self);
            return ret;
        }
    }.popdown;
    /// Deprecated:
    /// method [popup](https://docs.gtk.org/gtk4/method.ComboBox.popup.html)
    pub const popup = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn popup(self: *ComboBox) void {
            const cFn = @extern(*const fn (*ComboBox) callconv(.c) void, .{ .name = "gtk_combo_box_popup" });
            const ret = cFn(self);
            return ret;
        }
    }.popup;
    /// Deprecated:
    /// method [popup_for_device](https://docs.gtk.org/gtk4/method.ComboBox.popup_for_device.html)
    pub const popupForDevice = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn popupForDevice(self: *ComboBox, _device: *gdk.Device) void {
            const cFn = @extern(*const fn (*ComboBox, *gdk.Device) callconv(.c) void, .{ .name = "gtk_combo_box_popup_for_device" });
            const ret = cFn(self, _device);
            return ret;
        }
    }.popupForDevice;
    /// Deprecated:
    /// method [set_active](https://docs.gtk.org/gtk4/method.ComboBox.set_active.html)
    pub const setActive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActive(self: *ComboBox, _index_: i32) void {
            const cFn = @extern(*const fn (*ComboBox, i32) callconv(.c) void, .{ .name = "gtk_combo_box_set_active" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.setActive;
    /// Deprecated:
    /// method [set_active_id](https://docs.gtk.org/gtk4/method.ComboBox.set_active_id.html)
    pub const setActiveId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActiveId(self: *ComboBox, _active_id: ?[*:0]const u8) bool {
            const cFn = @extern(*const fn (*ComboBox, ?[*:0]const u8) callconv(.c) bool, .{ .name = "gtk_combo_box_set_active_id" });
            const ret = cFn(self, _active_id);
            return ret;
        }
    }.setActiveId;
    /// Deprecated:
    /// method [set_active_iter](https://docs.gtk.org/gtk4/method.ComboBox.set_active_iter.html)
    pub const setActiveIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActiveIter(self: *ComboBox, _iter: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ComboBox, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_combo_box_set_active_iter" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.setActiveIter;
    /// Deprecated:
    /// method [set_button_sensitivity](https://docs.gtk.org/gtk4/method.ComboBox.set_button_sensitivity.html)
    pub const setButtonSensitivity = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setButtonSensitivity(self: *ComboBox, _sensitivity: gtk.SensitivityType) void {
            const cFn = @extern(*const fn (*ComboBox, gtk.SensitivityType) callconv(.c) void, .{ .name = "gtk_combo_box_set_button_sensitivity" });
            const ret = cFn(self, _sensitivity);
            return ret;
        }
    }.setButtonSensitivity;
    /// Deprecated:
    /// method [set_child](https://docs.gtk.org/gtk4/method.ComboBox.set_child.html)
    pub const setChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setChild(self: *ComboBox, _child: ?*gtk.Widget) void {
            const cFn = @extern(*const fn (*ComboBox, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_combo_box_set_child" });
            const ret = cFn(self, _child);
            return ret;
        }
    }.setChild;
    /// Deprecated:
    /// method [set_entry_text_column](https://docs.gtk.org/gtk4/method.ComboBox.set_entry_text_column.html)
    pub const setEntryTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setEntryTextColumn(self: *ComboBox, _text_column: i32) void {
            const cFn = @extern(*const fn (*ComboBox, i32) callconv(.c) void, .{ .name = "gtk_combo_box_set_entry_text_column" });
            const ret = cFn(self, _text_column);
            return ret;
        }
    }.setEntryTextColumn;
    /// Deprecated:
    /// method [set_id_column](https://docs.gtk.org/gtk4/method.ComboBox.set_id_column.html)
    pub const setIdColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setIdColumn(self: *ComboBox, _id_column: i32) void {
            const cFn = @extern(*const fn (*ComboBox, i32) callconv(.c) void, .{ .name = "gtk_combo_box_set_id_column" });
            const ret = cFn(self, _id_column);
            return ret;
        }
    }.setIdColumn;
    /// Deprecated:
    /// method [set_model](https://docs.gtk.org/gtk4/method.ComboBox.set_model.html)
    pub const setModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModel(self: *ComboBox, _model: ?*gtk.TreeModel) void {
            const cFn = @extern(*const fn (*ComboBox, ?*gtk.TreeModel) callconv(.c) void, .{ .name = "gtk_combo_box_set_model" });
            const ret = cFn(self, _model);
            return ret;
        }
    }.setModel;
    /// Deprecated:
    /// method [set_popup_fixed_width](https://docs.gtk.org/gtk4/method.ComboBox.set_popup_fixed_width.html)
    pub const setPopupFixedWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPopupFixedWidth(self: *ComboBox, _fixed: bool) void {
            const cFn = @extern(*const fn (*ComboBox, bool) callconv(.c) void, .{ .name = "gtk_combo_box_set_popup_fixed_width" });
            const ret = cFn(self, _fixed);
            return ret;
        }
    }.setPopupFixedWidth;
    /// Deprecated:
    /// method [set_row_separator_func](https://docs.gtk.org/gtk4/method.ComboBox.set_row_separator_func.html)
    pub const setRowSeparatorFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRowSeparatorFunc(self: *ComboBox, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeModel, *gtk.TreeIter });
            const _func: ?gtk.TreeViewRowSeparatorFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*ComboBox, ?gtk.TreeViewRowSeparatorFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_combo_box_set_row_separator_func" });
            const ret = cFn(self, _func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setRowSeparatorFunc;
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.ComboBox.activate.html)
    pub fn activateV(self: *ComboBox) void {
        const class: *ComboBoxClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.ComboBox.changed.html)
    pub fn changedV(self: *ComboBox) void {
        const class: *ComboBoxClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [format_entry_text](https://docs.gtk.org/gtk4/vfunc.ComboBox.format_entry_text.html)
    pub fn formatEntryTextV(self: *ComboBox, _path: [*:0]const u8) [*:0]u8 {
        const class: *ComboBoxClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.format_entry_text.?;
        const ret = vFn(self, _path);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ComboBox.activate.html)
    pub fn connectActivate(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ComboBox });
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.ComboBox.changed.html)
    pub fn connectChanged(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *ComboBox });
    }
    /// signal [format-entry-text](https://docs.gtk.org/gtk4/signal.ComboBox.format-entry-text.html)
    pub fn connectFormatEntryText(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("format-entry-text", handler, args, flags, &.{ [*:0]u8, *ComboBox, [*:0]const u8 });
    }
    /// signal [move-active](https://docs.gtk.org/gtk4/signal.ComboBox.move-active.html)
    pub fn connectMoveActive(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-active", handler, args, flags, &.{ void, *ComboBox, gtk.ScrollType });
    }
    /// signal [popdown](https://docs.gtk.org/gtk4/signal.ComboBox.popdown.html)
    pub fn connectPopdown(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("popdown", handler, args, flags, &.{ bool, *ComboBox });
    }
    /// signal [popup](https://docs.gtk.org/gtk4/signal.ComboBox.popup.html)
    pub fn connectPopup(self: *ComboBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("popup", handler, args, flags, &.{ void, *ComboBox });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_combo_box_get_type" });
        return cFn();
    }
};
pub const ComboBoxClass = extern struct {
    parent_class: gtk.WidgetClass,
    changed: ?*const fn (_combo_box: *gtk.ComboBox) callconv(.c) void,
    format_entry_text: ?*const fn (_combo_box: *gtk.ComboBox, _path: [*:0]const u8) callconv(.c) [*:0]u8,
    activate: ?*const fn (_combo_box: *gtk.ComboBox) callconv(.c) void,
    padding: [7]?*anyopaque,
};
/// Deprecated:
/// Class [ComboBoxText](https://docs.gtk.org/gtk4/class.ComboBoxText.html)
pub const ComboBoxText = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.CellEditable, gtk.CellLayout, gtk.ConstraintTarget };
    pub const Parent = gtk.ComboBox;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ComboBoxText.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *ComboBoxText {
            const cFn = @extern(*const fn () callconv(.c) *ComboBoxText, .{ .name = "gtk_combo_box_text_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_entry](https://docs.gtk.org/gtk4/ctor.ComboBoxText.new_with_entry.html)
    pub const newWithEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithEntry() *ComboBoxText {
            const cFn = @extern(*const fn () callconv(.c) *ComboBoxText, .{ .name = "gtk_combo_box_text_new_with_entry" });
            const ret = cFn();
            return ret;
        }
    }.newWithEntry;
    /// Deprecated:
    /// method [append](https://docs.gtk.org/gtk4/method.ComboBoxText.append.html)
    pub const append = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn append(self: *ComboBoxText, _id: ?[*:0]const u8, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_append" });
            const ret = cFn(self, _id, _text);
            return ret;
        }
    }.append;
    /// Deprecated:
    /// method [append_text](https://docs.gtk.org/gtk4/method.ComboBoxText.append_text.html)
    pub const appendText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendText(self: *ComboBoxText, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_append_text" });
            const ret = cFn(self, _text);
            return ret;
        }
    }.appendText;
    /// Deprecated:
    /// method [get_active_text](https://docs.gtk.org/gtk4/method.ComboBoxText.get_active_text.html)
    pub const getActiveText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActiveText(self: *ComboBoxText) ?[*:0]u8 {
            const cFn = @extern(*const fn (*ComboBoxText) callconv(.c) ?[*:0]u8, .{ .name = "gtk_combo_box_text_get_active_text" });
            const ret = cFn(self);
            return ret;
        }
    }.getActiveText;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/gtk4/method.ComboBoxText.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *ComboBoxText, _position: i32, _id: ?[*:0]const u8, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, i32, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_insert" });
            const ret = cFn(self, _position, _id, _text);
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [insert_text](https://docs.gtk.org/gtk4/method.ComboBoxText.insert_text.html)
    pub const insertText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertText(self: *ComboBoxText, _position: i32, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, i32, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_insert_text" });
            const ret = cFn(self, _position, _text);
            return ret;
        }
    }.insertText;
    /// Deprecated:
    /// method [prepend](https://docs.gtk.org/gtk4/method.ComboBoxText.prepend.html)
    pub const prepend = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prepend(self: *ComboBoxText, _id: ?[*:0]const u8, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, ?[*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_prepend" });
            const ret = cFn(self, _id, _text);
            return ret;
        }
    }.prepend;
    /// Deprecated:
    /// method [prepend_text](https://docs.gtk.org/gtk4/method.ComboBoxText.prepend_text.html)
    pub const prependText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prependText(self: *ComboBoxText, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*ComboBoxText, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_combo_box_text_prepend_text" });
            const ret = cFn(self, _text);
            return ret;
        }
    }.prependText;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gtk4/method.ComboBoxText.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *ComboBoxText, _position: i32) void {
            const cFn = @extern(*const fn (*ComboBoxText, i32) callconv(.c) void, .{ .name = "gtk_combo_box_text_remove" });
            const ret = cFn(self, _position);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [remove_all](https://docs.gtk.org/gtk4/method.ComboBoxText.remove_all.html)
    pub const removeAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeAll(self: *ComboBoxText) void {
            const cFn = @extern(*const fn (*ComboBoxText) callconv(.c) void, .{ .name = "gtk_combo_box_text_remove_all" });
            const ret = cFn(self);
            return ret;
        }
    }.removeAll;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_combo_box_text_get_type" });
        return cFn();
    }
};
/// Class [ConstantExpression](https://docs.gtk.org/gtk4/class.ConstantExpression.html)
pub const ConstantExpression = opaque {
    pub const Parent = gtk.Expression;
    /// ctor [new_for_value](https://docs.gtk.org/gtk4/ctor.ConstantExpression.new_for_value.html)
    pub fn newForValue(_value: *gobject.Value) *ConstantExpression {
        const cFn = @extern(*const fn (*gobject.Value) callconv(.c) *ConstantExpression, .{ .name = "gtk_constant_expression_new_for_value" });
        const ret = cFn(_value);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.ConstantExpression.get_value.html)
    pub fn getValue(self: *ConstantExpression) *gobject.Value {
        const cFn = @extern(*const fn (*ConstantExpression) callconv(.c) *gobject.Value, .{ .name = "gtk_constant_expression_get_value" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constant_expression_get_type" });
        return cFn();
    }
};
/// Class [Constraint](https://docs.gtk.org/gtk4/class.Constraint.html)
/// - property [constant](https://docs.gtk.org/gtk4/property.Constraint.constant.html): (r-) `f64`
/// - property [multiplier](https://docs.gtk.org/gtk4/property.Constraint.multiplier.html): (r-) `f64`
/// - property [relation](https://docs.gtk.org/gtk4/property.Constraint.relation.html): (r-) `gtk.ConstraintRelation`
/// - property [source](https://docs.gtk.org/gtk4/property.Constraint.source.html): (r-) `gtk.ConstraintTarget`
/// - property [source-attribute](https://docs.gtk.org/gtk4/property.Constraint.source-attribute.html): (r-) `gtk.ConstraintAttribute`
/// - property [strength](https://docs.gtk.org/gtk4/property.Constraint.strength.html): (r-) `i32`
/// - property [target](https://docs.gtk.org/gtk4/property.Constraint.target.html): (r-) `gtk.ConstraintTarget`
/// - property [target-attribute](https://docs.gtk.org/gtk4/property.Constraint.target-attribute.html): (r-) `gtk.ConstraintAttribute`
pub const Constraint = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ConstraintClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Constraint.new.html)
    pub fn new(_target: ?*gtk.ConstraintTarget, _target_attribute: gtk.ConstraintAttribute, _relation: gtk.ConstraintRelation, _source: ?*gtk.ConstraintTarget, _source_attribute: gtk.ConstraintAttribute, _multiplier: f64, _constant: f64, _strength: i32) *Constraint {
        const cFn = @extern(*const fn (?*gtk.ConstraintTarget, gtk.ConstraintAttribute, gtk.ConstraintRelation, ?*gtk.ConstraintTarget, gtk.ConstraintAttribute, f64, f64, i32) callconv(.c) *Constraint, .{ .name = "gtk_constraint_new" });
        const ret = cFn(_target, _target_attribute, _relation, _source, _source_attribute, _multiplier, _constant, _strength);
        return ret;
    }
    /// ctor [new_constant](https://docs.gtk.org/gtk4/ctor.Constraint.new_constant.html)
    pub fn newConstant(_target: ?*gtk.ConstraintTarget, _target_attribute: gtk.ConstraintAttribute, _relation: gtk.ConstraintRelation, _constant: f64, _strength: i32) *Constraint {
        const cFn = @extern(*const fn (?*gtk.ConstraintTarget, gtk.ConstraintAttribute, gtk.ConstraintRelation, f64, i32) callconv(.c) *Constraint, .{ .name = "gtk_constraint_new_constant" });
        const ret = cFn(_target, _target_attribute, _relation, _constant, _strength);
        return ret;
    }
    /// method [get_constant](https://docs.gtk.org/gtk4/method.Constraint.get_constant.html)
    pub fn getConstant(self: *Constraint) f64 {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) f64, .{ .name = "gtk_constraint_get_constant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_multiplier](https://docs.gtk.org/gtk4/method.Constraint.get_multiplier.html)
    pub fn getMultiplier(self: *Constraint) f64 {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) f64, .{ .name = "gtk_constraint_get_multiplier" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_relation](https://docs.gtk.org/gtk4/method.Constraint.get_relation.html)
    pub fn getRelation(self: *Constraint) gtk.ConstraintRelation {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) gtk.ConstraintRelation, .{ .name = "gtk_constraint_get_relation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_source](https://docs.gtk.org/gtk4/method.Constraint.get_source.html)
    pub fn getSource(self: *Constraint) ?*gtk.ConstraintTarget {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) ?*gtk.ConstraintTarget, .{ .name = "gtk_constraint_get_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_source_attribute](https://docs.gtk.org/gtk4/method.Constraint.get_source_attribute.html)
    pub fn getSourceAttribute(self: *Constraint) gtk.ConstraintAttribute {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) gtk.ConstraintAttribute, .{ .name = "gtk_constraint_get_source_attribute" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_strength](https://docs.gtk.org/gtk4/method.Constraint.get_strength.html)
    pub fn getStrength(self: *Constraint) i32 {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) i32, .{ .name = "gtk_constraint_get_strength" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_target](https://docs.gtk.org/gtk4/method.Constraint.get_target.html)
    pub fn getTarget(self: *Constraint) ?*gtk.ConstraintTarget {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) ?*gtk.ConstraintTarget, .{ .name = "gtk_constraint_get_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_target_attribute](https://docs.gtk.org/gtk4/method.Constraint.get_target_attribute.html)
    pub fn getTargetAttribute(self: *Constraint) gtk.ConstraintAttribute {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) gtk.ConstraintAttribute, .{ .name = "gtk_constraint_get_target_attribute" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_attached](https://docs.gtk.org/gtk4/method.Constraint.is_attached.html)
    pub fn isAttached(self: *Constraint) bool {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) bool, .{ .name = "gtk_constraint_is_attached" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_constant](https://docs.gtk.org/gtk4/method.Constraint.is_constant.html)
    pub fn isConstant(self: *Constraint) bool {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) bool, .{ .name = "gtk_constraint_is_constant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_required](https://docs.gtk.org/gtk4/method.Constraint.is_required.html)
    pub fn isRequired(self: *Constraint) bool {
        const cFn = @extern(*const fn (*Constraint) callconv(.c) bool, .{ .name = "gtk_constraint_is_required" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_get_type" });
        return cFn();
    }
};
/// Enum [ConstraintAttribute](https://docs.gtk.org/gtk4/enum.ConstraintAttribute.html)
pub const ConstraintAttribute = enum(u32) {
    none = 0,
    left = 1,
    right = 2,
    top = 3,
    bottom = 4,
    start = 5,
    end = 6,
    width = 7,
    height = 8,
    center_x = 9,
    center_y = 10,
    baseline = 11,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_attribute_get_type" });
        return cFn();
    }
};
pub const ConstraintClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [ConstraintGuide](https://docs.gtk.org/gtk4/class.ConstraintGuide.html)
/// - property [max-height](https://docs.gtk.org/gtk4/property.ConstraintGuide.max-height.html): (rw) `i32`
/// - property [max-width](https://docs.gtk.org/gtk4/property.ConstraintGuide.max-width.html): (rw) `i32`
/// - property [min-height](https://docs.gtk.org/gtk4/property.ConstraintGuide.min-height.html): (rw) `i32`
/// - property [min-width](https://docs.gtk.org/gtk4/property.ConstraintGuide.min-width.html): (rw) `i32`
/// - property [name](https://docs.gtk.org/gtk4/property.ConstraintGuide.name.html): (rw) `[*:0]const u8`
/// - property [nat-height](https://docs.gtk.org/gtk4/property.ConstraintGuide.nat-height.html): (rw) `i32`
/// - property [nat-width](https://docs.gtk.org/gtk4/property.ConstraintGuide.nat-width.html): (rw) `i32`
/// - property [strength](https://docs.gtk.org/gtk4/property.ConstraintGuide.strength.html): (rw) `gtk.ConstraintStrength`
pub const ConstraintGuide = opaque {
    pub const Interfaces = [_]type{gtk.ConstraintTarget};
    pub const Parent = gobject.Object;
    pub const Class = gtk.ConstraintGuideClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ConstraintGuide.new.html)
    pub fn new() *ConstraintGuide {
        const cFn = @extern(*const fn () callconv(.c) *ConstraintGuide, .{ .name = "gtk_constraint_guide_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_max_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.get_max_size.html)
    pub fn getMaxSize(self: *ConstraintGuide) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*ConstraintGuide, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_get_max_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_min_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.get_min_size.html)
    pub fn getMinSize(self: *ConstraintGuide) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*ConstraintGuide, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_get_min_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.ConstraintGuide.get_name.html)
    pub fn getName(self: *ConstraintGuide) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ConstraintGuide) callconv(.c) ?[*:0]u8, .{ .name = "gtk_constraint_guide_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nat_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.get_nat_size.html)
    pub fn getNatSize(self: *ConstraintGuide) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*ConstraintGuide, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_get_nat_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_strength](https://docs.gtk.org/gtk4/method.ConstraintGuide.get_strength.html)
    pub fn getStrength(self: *ConstraintGuide) gtk.ConstraintStrength {
        const cFn = @extern(*const fn (*ConstraintGuide) callconv(.c) gtk.ConstraintStrength, .{ .name = "gtk_constraint_guide_get_strength" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_max_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.set_max_size.html)
    pub fn setMaxSize(self: *ConstraintGuide, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*ConstraintGuide, i32, i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_set_max_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [set_min_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.set_min_size.html)
    pub fn setMinSize(self: *ConstraintGuide, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*ConstraintGuide, i32, i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_set_min_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gtk4/method.ConstraintGuide.set_name.html)
    pub fn setName(self: *ConstraintGuide, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*ConstraintGuide, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_constraint_guide_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_nat_size](https://docs.gtk.org/gtk4/method.ConstraintGuide.set_nat_size.html)
    pub fn setNatSize(self: *ConstraintGuide, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*ConstraintGuide, i32, i32) callconv(.c) void, .{ .name = "gtk_constraint_guide_set_nat_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [set_strength](https://docs.gtk.org/gtk4/method.ConstraintGuide.set_strength.html)
    pub fn setStrength(self: *ConstraintGuide, _strength: gtk.ConstraintStrength) void {
        const cFn = @extern(*const fn (*ConstraintGuide, gtk.ConstraintStrength) callconv(.c) void, .{ .name = "gtk_constraint_guide_set_strength" });
        const ret = cFn(self, _strength);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_guide_get_type" });
        return cFn();
    }
};
pub const ConstraintGuideClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [ConstraintLayout](https://docs.gtk.org/gtk4/class.ConstraintLayout.html)
pub const ConstraintLayout = opaque {
    pub const Interfaces = [_]type{gtk.Buildable};
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.ConstraintLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ConstraintLayout.new.html)
    pub fn new() *ConstraintLayout {
        const cFn = @extern(*const fn () callconv(.c) *ConstraintLayout, .{ .name = "gtk_constraint_layout_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_constraint](https://docs.gtk.org/gtk4/method.ConstraintLayout.add_constraint.html)
    pub fn addConstraint(self: *ConstraintLayout, _constraint: *gtk.Constraint) void {
        const cFn = @extern(*const fn (*ConstraintLayout, *gtk.Constraint) callconv(.c) void, .{ .name = "gtk_constraint_layout_add_constraint" });
        const ret = cFn(self, _constraint);
        return ret;
    }
    /// method [add_constraints_from_description](https://docs.gtk.org/gtk4/method.ConstraintLayout.add_constraints_from_description.html)
    pub fn addConstraintsFromDescription(self: *ConstraintLayout, _liness: [][*:0]const u8, _hspacing: i32, _vspacing: i32, _views: *core.HashTable, _error: *?*core.Error) error{GError}!?*core.List {
        const _lines = _liness.ptr;
        const _n_lines: u64 = @intCast(_liness.len);
        const cFn = @extern(*const fn (*ConstraintLayout, [*][*:0]const u8, u64, i32, i32, *core.HashTable, *?*core.Error) callconv(.c) ?*core.List, .{ .name = "gtk_constraint_layout_add_constraints_from_descriptionv" });
        const ret = cFn(self, _lines, _n_lines, _hspacing, _vspacing, _views, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [add_guide](https://docs.gtk.org/gtk4/method.ConstraintLayout.add_guide.html)
    pub fn addGuide(self: *ConstraintLayout, _guide: *gtk.ConstraintGuide) void {
        const cFn = @extern(*const fn (*ConstraintLayout, *gtk.ConstraintGuide) callconv(.c) void, .{ .name = "gtk_constraint_layout_add_guide" });
        const ret = cFn(self, _guide);
        return ret;
    }
    /// method [observe_constraints](https://docs.gtk.org/gtk4/method.ConstraintLayout.observe_constraints.html)
    pub fn observeConstraints(self: *ConstraintLayout) *gio.ListModel {
        const cFn = @extern(*const fn (*ConstraintLayout) callconv(.c) *gio.ListModel, .{ .name = "gtk_constraint_layout_observe_constraints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [observe_guides](https://docs.gtk.org/gtk4/method.ConstraintLayout.observe_guides.html)
    pub fn observeGuides(self: *ConstraintLayout) *gio.ListModel {
        const cFn = @extern(*const fn (*ConstraintLayout) callconv(.c) *gio.ListModel, .{ .name = "gtk_constraint_layout_observe_guides" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_all_constraints](https://docs.gtk.org/gtk4/method.ConstraintLayout.remove_all_constraints.html)
    pub fn removeAllConstraints(self: *ConstraintLayout) void {
        const cFn = @extern(*const fn (*ConstraintLayout) callconv(.c) void, .{ .name = "gtk_constraint_layout_remove_all_constraints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_constraint](https://docs.gtk.org/gtk4/method.ConstraintLayout.remove_constraint.html)
    pub fn removeConstraint(self: *ConstraintLayout, _constraint: *gtk.Constraint) void {
        const cFn = @extern(*const fn (*ConstraintLayout, *gtk.Constraint) callconv(.c) void, .{ .name = "gtk_constraint_layout_remove_constraint" });
        const ret = cFn(self, _constraint);
        return ret;
    }
    /// method [remove_guide](https://docs.gtk.org/gtk4/method.ConstraintLayout.remove_guide.html)
    pub fn removeGuide(self: *ConstraintLayout, _guide: *gtk.ConstraintGuide) void {
        const cFn = @extern(*const fn (*ConstraintLayout, *gtk.ConstraintGuide) callconv(.c) void, .{ .name = "gtk_constraint_layout_remove_guide" });
        const ret = cFn(self, _guide);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_layout_get_type" });
        return cFn();
    }
};
/// Class [ConstraintLayoutChild](https://docs.gtk.org/gtk4/class.ConstraintLayoutChild.html)
pub const ConstraintLayoutChild = opaque {
    pub const Parent = gtk.LayoutChild;
    pub const Class = gtk.ConstraintLayoutChildClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_layout_child_get_type" });
        return cFn();
    }
};
pub const ConstraintLayoutChildClass = extern struct {
    parent_class: gtk.LayoutChildClass,
};
pub const ConstraintLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Enum [ConstraintRelation](https://docs.gtk.org/gtk4/enum.ConstraintRelation.html)
pub const ConstraintRelation = enum(i32) {
    le = -1,
    eq = 0,
    ge = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_relation_get_type" });
        return cFn();
    }
};
/// Enum [ConstraintStrength](https://docs.gtk.org/gtk4/enum.ConstraintStrength.html)
pub const ConstraintStrength = enum(u32) {
    required = 1001001000,
    strong = 1000000000,
    medium = 1000,
    weak = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_strength_get_type" });
        return cFn();
    }
};
/// Iface [ConstraintTarget](https://docs.gtk.org/gtk4/iface.ConstraintTarget.html)
pub const ConstraintTarget = opaque {
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_target_get_type" });
        return cFn();
    }
};
pub const ConstraintTargetInterface = opaque {};
/// Error [ConstraintVflParserError](https://docs.gtk.org/gtk4/error.ConstraintVflParserError.html)
pub const ConstraintVflParserError = enum(u32) {
    symbol = 0,
    attribute = 1,
    view = 2,
    metric = 3,
    priority = 4,
    relation = 5,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.ConstraintVflParserError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_constraint_vfl_parser_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_constraint_vfl_parser_error_get_type" });
        return cFn();
    }
};
/// Enum [ContentFit](https://docs.gtk.org/gtk4/enum.ContentFit.html)
pub const ContentFit = enum(u32) {
    fill = 0,
    contain = 1,
    cover = 2,
    scale_down = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_content_fit_get_type" });
        return cFn();
    }
};
/// Enum [CornerType](https://docs.gtk.org/gtk4/enum.CornerType.html)
pub const CornerType = enum(u32) {
    top_left = 0,
    bottom_left = 1,
    top_right = 2,
    bottom_right = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_corner_type_get_type" });
        return cFn();
    }
};
/// Struct [CssLocation](https://docs.gtk.org/gtk4/struct.CssLocation.html)
pub const CssLocation = extern struct {
    bytes: u64,
    chars: u64,
    lines: u64,
    line_bytes: u64,
    line_chars: u64,
};
/// Error [CssParserError](https://docs.gtk.org/gtk4/error.CssParserError.html)
pub const CssParserError = enum(u32) {
    failed = 0,
    syntax = 1,
    import = 2,
    name = 3,
    unknown_value = 4,
};
/// Enum [CssParserWarning](https://docs.gtk.org/gtk4/enum.CssParserWarning.html)
pub const CssParserWarning = enum(u32) {
    deprecated = 0,
    syntax = 1,
    unimplemented = 2,
};
/// Class [CssProvider](https://docs.gtk.org/gtk4/class.CssProvider.html)
pub const CssProvider = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gtk.StyleProvider};
    pub const Parent = gobject.Object;
    pub const Class = gtk.CssProviderClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CssProvider.new.html)
    pub fn new() *CssProvider {
        const cFn = @extern(*const fn () callconv(.c) *CssProvider, .{ .name = "gtk_css_provider_new" });
        const ret = cFn();
        return ret;
    }
    /// method [load_from_bytes](https://docs.gtk.org/gtk4/method.CssProvider.load_from_bytes.html)
    pub fn loadFromBytes(self: *CssProvider, _data: *glib.Bytes) void {
        const cFn = @extern(*const fn (*CssProvider, *glib.Bytes) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_bytes" });
        const ret = cFn(self, _data);
        return ret;
    }
    /// Deprecated:
    /// method [load_from_data](https://docs.gtk.org/gtk4/method.CssProvider.load_from_data.html)
    pub const loadFromData = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn loadFromData(self: *CssProvider, _data: [*:0]const u8, _length: i64) void {
            const cFn = @extern(*const fn (*CssProvider, [*:0]const u8, i64) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_data" });
            const ret = cFn(self, _data, _length);
            return ret;
        }
    }.loadFromData;
    /// method [load_from_file](https://docs.gtk.org/gtk4/method.CssProvider.load_from_file.html)
    pub fn loadFromFile(self: *CssProvider, _file: *gio.File) void {
        const cFn = @extern(*const fn (*CssProvider, *gio.File) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [load_from_path](https://docs.gtk.org/gtk4/method.CssProvider.load_from_path.html)
    pub fn loadFromPath(self: *CssProvider, _path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*CssProvider, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [load_from_resource](https://docs.gtk.org/gtk4/method.CssProvider.load_from_resource.html)
    pub fn loadFromResource(self: *CssProvider, _resource_path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*CssProvider, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_resource" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    /// method [load_from_string](https://docs.gtk.org/gtk4/method.CssProvider.load_from_string.html)
    pub fn loadFromString(self: *CssProvider, _string: [*:0]const u8) void {
        const cFn = @extern(*const fn (*CssProvider, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_css_provider_load_from_string" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [load_named](https://docs.gtk.org/gtk4/method.CssProvider.load_named.html)
    pub fn loadNamed(self: *CssProvider, _name: [*:0]const u8, _variant: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*CssProvider, [*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_css_provider_load_named" });
        const ret = cFn(self, _name, _variant);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gtk4/method.CssProvider.to_string.html)
    pub fn toString(self: *CssProvider) [*:0]u8 {
        const cFn = @extern(*const fn (*CssProvider) callconv(.c) [*:0]u8, .{ .name = "gtk_css_provider_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [parsing-error](https://docs.gtk.org/gtk4/signal.CssProvider.parsing-error.html)
    pub fn connectParsingError(self: *CssProvider, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("parsing-error", handler, args, flags, &.{ void, *CssProvider, *gtk.CssSection, *core.Error });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_css_provider_get_type" });
        return cFn();
    }
};
pub const CssProviderClass = opaque {};
pub const CssProviderPrivate = opaque {};
/// Struct [CssSection](https://docs.gtk.org/gtk4/struct.CssSection.html)
pub const CssSection = opaque {
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CssSection.new.html)
    pub fn new(_file: ?*gio.File, _start: *gtk.CssLocation, _end: *gtk.CssLocation) *CssSection {
        const cFn = @extern(*const fn (?*gio.File, *gtk.CssLocation, *gtk.CssLocation) callconv(.c) *CssSection, .{ .name = "gtk_css_section_new" });
        const ret = cFn(_file, _start, _end);
        return ret;
    }
    /// method [get_end_location](https://docs.gtk.org/gtk4/method.CssSection.get_end_location.html)
    pub fn getEndLocation(self: *CssSection) *gtk.CssLocation {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) *gtk.CssLocation, .{ .name = "gtk_css_section_get_end_location" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.CssSection.get_file.html)
    pub fn getFile(self: *CssSection) ?*gio.File {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) ?*gio.File, .{ .name = "gtk_css_section_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gtk4/method.CssSection.get_parent.html)
    pub fn getParent(self: *CssSection) ?*gtk.CssSection {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) ?*gtk.CssSection, .{ .name = "gtk_css_section_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_location](https://docs.gtk.org/gtk4/method.CssSection.get_start_location.html)
    pub fn getStartLocation(self: *CssSection) *gtk.CssLocation {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) *gtk.CssLocation, .{ .name = "gtk_css_section_get_start_location" });
        const ret = cFn(self);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gtk4/method.CssSection.print.html)
    pub fn print(self: *CssSection, _string: *glib.String) void {
        const cFn = @extern(*const fn (*CssSection, *glib.String) callconv(.c) void, .{ .name = "gtk_css_section_print" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.CssSection.ref.html)
    pub fn ref(self: *CssSection) *gtk.CssSection {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) *gtk.CssSection, .{ .name = "gtk_css_section_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gtk4/method.CssSection.to_string.html)
    pub fn toString(self: *CssSection) [*:0]u8 {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) [*:0]u8, .{ .name = "gtk_css_section_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.CssSection.unref.html)
    pub fn unref(self: *CssSection) void {
        const cFn = @extern(*const fn (*CssSection) callconv(.c) void, .{ .name = "gtk_css_section_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_css_section_get_type" });
        return cFn();
    }
};
/// Struct [CssStyleChange](https://docs.gtk.org/gtk4/struct.CssStyleChange.html)
pub const CssStyleChange = opaque {};
/// callback [CustomAllocateFunc](https://docs.gtk.org/gtk4/callback.CustomAllocateFunc.html)
pub const CustomAllocateFunc = *const fn (_widget: *gtk.Widget, _width: i32, _height: i32, _baseline: i32) callconv(.c) void;
/// Class [CustomFilter](https://docs.gtk.org/gtk4/class.CustomFilter.html)
pub const CustomFilter = opaque {
    pub const Parent = gtk.Filter;
    pub const Class = gtk.CustomFilterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CustomFilter.new.html)
    pub fn new(match_func: anytype, match_func_args: anytype) *CustomFilter {
        var closure_match_func = core.zig_closure(match_func, match_func_args, &.{ bool, *gobject.Object });
        const _match_func: ?gtk.CustomFilterFunc = @ptrCast(closure_match_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_match_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_match_func.c_destroy());
        const cFn = @extern(*const fn (?gtk.CustomFilterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) *CustomFilter, .{ .name = "gtk_custom_filter_new" });
        const ret = cFn(_match_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    /// method [set_filter_func](https://docs.gtk.org/gtk4/method.CustomFilter.set_filter_func.html)
    pub fn setFilterFunc(self: *CustomFilter, match_func: anytype, match_func_args: anytype) void {
        var closure_match_func = core.zig_closure(match_func, match_func_args, &.{ bool, *gobject.Object });
        const _match_func: ?gtk.CustomFilterFunc = @ptrCast(closure_match_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_match_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_match_func.c_destroy());
        const cFn = @extern(*const fn (*CustomFilter, ?gtk.CustomFilterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_custom_filter_set_filter_func" });
        const ret = cFn(self, _match_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_custom_filter_get_type" });
        return cFn();
    }
};
pub const CustomFilterClass = extern struct {
    parent_class: gtk.FilterClass,
};
/// callback [CustomFilterFunc](https://docs.gtk.org/gtk4/callback.CustomFilterFunc.html)
pub const CustomFilterFunc = *const fn (_item: *gobject.Object, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [CustomLayout](https://docs.gtk.org/gtk4/class.CustomLayout.html)
pub const CustomLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.CustomLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CustomLayout.new.html)
    pub fn new(_request_mode: ?gtk.CustomRequestModeFunc, _measure: gtk.CustomMeasureFunc, _allocate: gtk.CustomAllocateFunc) *CustomLayout {
        const cFn = @extern(*const fn (?gtk.CustomRequestModeFunc, gtk.CustomMeasureFunc, gtk.CustomAllocateFunc) callconv(.c) *CustomLayout, .{ .name = "gtk_custom_layout_new" });
        const ret = cFn(_request_mode, _measure, _allocate);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_custom_layout_get_type" });
        return cFn();
    }
};
pub const CustomLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// callback [CustomMeasureFunc](https://docs.gtk.org/gtk4/callback.CustomMeasureFunc.html)
pub const CustomMeasureFunc = *const fn (_widget: *gtk.Widget, _orientation: gtk.Orientation, _for_size: i32, _minimum: *i32, _natural: *i32, _minimum_baseline: *i32, _natural_baseline: *i32) callconv(.c) void;
/// callback [CustomRequestModeFunc](https://docs.gtk.org/gtk4/callback.CustomRequestModeFunc.html)
pub const CustomRequestModeFunc = *const fn (_widget: *gtk.Widget) callconv(.c) gtk.SizeRequestMode;
/// Class [CustomSorter](https://docs.gtk.org/gtk4/class.CustomSorter.html)
pub const CustomSorter = opaque {
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.CustomSorterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.CustomSorter.new.html)
    pub fn new(sort_func: anytype, sort_func_args: anytype) *CustomSorter {
        var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        const _sort_func: ?glib.CompareDataFunc = @ptrCast(closure_sort_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
        const _user_destroy: ?glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
        const cFn = @extern(*const fn (?glib.CompareDataFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) *CustomSorter, .{ .name = "gtk_custom_sorter_new" });
        const ret = cFn(_sort_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    /// method [set_sort_func](https://docs.gtk.org/gtk4/method.CustomSorter.set_sort_func.html)
    pub fn setSortFunc(self: *CustomSorter, sort_func: anytype, sort_func_args: anytype) void {
        var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
        const _sort_func: ?glib.CompareDataFunc = @ptrCast(closure_sort_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
        const cFn = @extern(*const fn (*CustomSorter, ?glib.CompareDataFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_custom_sorter_set_sort_func" });
        const ret = cFn(self, _sort_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_custom_sorter_get_type" });
        return cFn();
    }
};
pub const CustomSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Flags [DebugFlags](https://docs.gtk.org/gtk4/flags.DebugFlags.html)
pub const DebugFlags = packed struct(u32) {
    text: bool = false,
    tree: bool = false,
    keybindings: bool = false,
    modules: bool = false,
    geometry: bool = false,
    icontheme: bool = false,
    printing: bool = false,
    builder: bool = false,
    size_request: bool = false,
    no_css_cache: bool = false,
    interactive: bool = false,
    _11: u1 = 0,
    actions: bool = false,
    layout: bool = false,
    snapshot: bool = false,
    constraints: bool = false,
    builder_objects: bool = false,
    a11y: bool = false,
    iconfallback: bool = false,
    invert_text_dir: bool = false,
    _: u12 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_debug_flags_get_type" });
        return cFn();
    }
};
/// Enum [DeleteType](https://docs.gtk.org/gtk4/enum.DeleteType.html)
pub const DeleteType = enum(u32) {
    chars = 0,
    word_ends = 1,
    words = 2,
    display_lines = 3,
    display_line_ends = 4,
    paragraph_ends = 5,
    paragraphs = 6,
    whitespace = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_delete_type_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [Dialog](https://docs.gtk.org/gtk4/class.Dialog.html)
/// - property [use-header-bar](https://docs.gtk.org/gtk4/property.Dialog.use-header-bar.html): (r-) `i32`
pub const Dialog = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gtk.Window,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Window;
    pub const Class = gtk.DialogClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Dialog.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *Dialog {
            const cFn = @extern(*const fn () callconv(.c) *Dialog, .{ .name = "gtk_dialog_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [add_action_widget](https://docs.gtk.org/gtk4/method.Dialog.add_action_widget.html)
    pub const addActionWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addActionWidget(self: *Dialog, _child: *gtk.Widget, _response_id: i32) void {
            const cFn = @extern(*const fn (*Dialog, *gtk.Widget, i32) callconv(.c) void, .{ .name = "gtk_dialog_add_action_widget" });
            const ret = cFn(self, _child, _response_id);
            return ret;
        }
    }.addActionWidget;
    /// Deprecated:
    /// method [add_button](https://docs.gtk.org/gtk4/method.Dialog.add_button.html)
    pub const addButton = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addButton(self: *Dialog, _button_text: [*:0]const u8, _response_id: i32) *gtk.Widget {
            const cFn = @extern(*const fn (*Dialog, [*:0]const u8, i32) callconv(.c) *gtk.Widget, .{ .name = "gtk_dialog_add_button" });
            const ret = cFn(self, _button_text, _response_id);
            return ret;
        }
    }.addButton;
    /// Deprecated:
    /// method [get_content_area](https://docs.gtk.org/gtk4/method.Dialog.get_content_area.html)
    pub const getContentArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getContentArea(self: *Dialog) *gtk.Box {
            const cFn = @extern(*const fn (*Dialog) callconv(.c) *gtk.Box, .{ .name = "gtk_dialog_get_content_area" });
            const ret = cFn(self);
            return ret;
        }
    }.getContentArea;
    /// Deprecated:
    /// method [get_header_bar](https://docs.gtk.org/gtk4/method.Dialog.get_header_bar.html)
    pub const getHeaderBar = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHeaderBar(self: *Dialog) *gtk.HeaderBar {
            const cFn = @extern(*const fn (*Dialog) callconv(.c) *gtk.HeaderBar, .{ .name = "gtk_dialog_get_header_bar" });
            const ret = cFn(self);
            return ret;
        }
    }.getHeaderBar;
    /// Deprecated:
    /// method [get_response_for_widget](https://docs.gtk.org/gtk4/method.Dialog.get_response_for_widget.html)
    pub const getResponseForWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getResponseForWidget(self: *Dialog, _widget: *gtk.Widget) i32 {
            const cFn = @extern(*const fn (*Dialog, *gtk.Widget) callconv(.c) i32, .{ .name = "gtk_dialog_get_response_for_widget" });
            const ret = cFn(self, _widget);
            return ret;
        }
    }.getResponseForWidget;
    /// Deprecated:
    /// method [get_widget_for_response](https://docs.gtk.org/gtk4/method.Dialog.get_widget_for_response.html)
    pub const getWidgetForResponse = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getWidgetForResponse(self: *Dialog, _response_id: i32) ?*gtk.Widget {
            const cFn = @extern(*const fn (*Dialog, i32) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_dialog_get_widget_for_response" });
            const ret = cFn(self, _response_id);
            return ret;
        }
    }.getWidgetForResponse;
    /// Deprecated:
    /// method [response](https://docs.gtk.org/gtk4/method.Dialog.response.html)
    pub const response = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn response(self: *Dialog, _response_id: i32) void {
            const cFn = @extern(*const fn (*Dialog, i32) callconv(.c) void, .{ .name = "gtk_dialog_response" });
            const ret = cFn(self, _response_id);
            return ret;
        }
    }.response;
    /// Deprecated:
    /// method [set_default_response](https://docs.gtk.org/gtk4/method.Dialog.set_default_response.html)
    pub const setDefaultResponse = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDefaultResponse(self: *Dialog, _response_id: i32) void {
            const cFn = @extern(*const fn (*Dialog, i32) callconv(.c) void, .{ .name = "gtk_dialog_set_default_response" });
            const ret = cFn(self, _response_id);
            return ret;
        }
    }.setDefaultResponse;
    /// Deprecated:
    /// method [set_response_sensitive](https://docs.gtk.org/gtk4/method.Dialog.set_response_sensitive.html)
    pub const setResponseSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setResponseSensitive(self: *Dialog, _response_id: i32, _setting: bool) void {
            const cFn = @extern(*const fn (*Dialog, i32, bool) callconv(.c) void, .{ .name = "gtk_dialog_set_response_sensitive" });
            const ret = cFn(self, _response_id, _setting);
            return ret;
        }
    }.setResponseSensitive;
    /// vfunc [close](https://docs.gtk.org/gtk4/vfunc.Dialog.close.html)
    pub fn closeV(self: *Dialog) void {
        const class: *DialogClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [response](https://docs.gtk.org/gtk4/vfunc.Dialog.response.html)
    pub fn responseV(self: *Dialog, _response_id: i32) void {
        const class: *DialogClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.response.?;
        const ret = vFn(self, _response_id);
        return ret;
    }
    /// signal [close](https://docs.gtk.org/gtk4/signal.Dialog.close.html)
    pub fn connectClose(self: *Dialog, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("close", handler, args, flags, &.{ void, *Dialog });
    }
    /// signal [response](https://docs.gtk.org/gtk4/signal.Dialog.response.html)
    pub fn connectResponse(self: *Dialog, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("response", handler, args, flags, &.{ void, *Dialog, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_dialog_get_type" });
        return cFn();
    }
};
pub const DialogClass = extern struct {
    parent_class: gtk.WindowClass,
    response: ?*const fn (_dialog: *gtk.Dialog, _response_id: i32) callconv(.c) void,
    close: ?*const fn (_dialog: *gtk.Dialog) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Error [DialogError](https://docs.gtk.org/gtk4/error.DialogError.html)
pub const DialogError = enum(u32) {
    failed = 0,
    cancelled = 1,
    dismissed = 2,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.DialogError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_dialog_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_dialog_error_get_type" });
        return cFn();
    }
};
/// Flags [DialogFlags](https://docs.gtk.org/gtk4/flags.DialogFlags.html)
pub const DialogFlags = packed struct(u32) {
    modal: bool = false,
    destroy_with_parent: bool = false,
    use_header_bar: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_dialog_flags_get_type" });
        return cFn();
    }
};
/// Enum [DirectionType](https://docs.gtk.org/gtk4/enum.DirectionType.html)
pub const DirectionType = enum(u32) {
    tab_forward = 0,
    tab_backward = 1,
    up = 2,
    down = 3,
    left = 4,
    right = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_direction_type_get_type" });
        return cFn();
    }
};
/// Class [DirectoryList](https://docs.gtk.org/gtk4/class.DirectoryList.html)
/// - property [attributes](https://docs.gtk.org/gtk4/property.DirectoryList.attributes.html): (rw) `[*:0]const u8`
/// - property [error](https://docs.gtk.org/gtk4/property.DirectoryList.error.html): (r-) `*core.Error`
/// - property [file](https://docs.gtk.org/gtk4/property.DirectoryList.file.html): (rw) `gio.File`
/// - property [io-priority](https://docs.gtk.org/gtk4/property.DirectoryList.io-priority.html): (rw) `i32`
/// - property [item-type](https://docs.gtk.org/gtk4/property.DirectoryList.item-type.html): (r-) `core.Type`
/// - property [loading](https://docs.gtk.org/gtk4/property.DirectoryList.loading.html): (r-) `bool`
/// - property [monitored](https://docs.gtk.org/gtk4/property.DirectoryList.monitored.html): (rw) `bool`
/// - property [n-items](https://docs.gtk.org/gtk4/property.DirectoryList.n-items.html): (r-) `u32`
pub const DirectoryList = opaque {
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = gtk.DirectoryListClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DirectoryList.new.html)
    pub fn new(_attributes: ?[*:0]const u8, _file: ?*gio.File) *DirectoryList {
        const cFn = @extern(*const fn (?[*:0]const u8, ?*gio.File) callconv(.c) *DirectoryList, .{ .name = "gtk_directory_list_new" });
        const ret = cFn(_attributes, _file);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.DirectoryList.get_attributes.html)
    pub fn getAttributes(self: *DirectoryList) ?[*:0]u8 {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) ?[*:0]u8, .{ .name = "gtk_directory_list_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_error](https://docs.gtk.org/gtk4/method.DirectoryList.get_error.html)
    pub fn getError(self: *DirectoryList) ?*core.Error {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) ?*core.Error, .{ .name = "gtk_directory_list_get_error" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.DirectoryList.get_file.html)
    pub fn getFile(self: *DirectoryList) ?*gio.File {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) ?*gio.File, .{ .name = "gtk_directory_list_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_io_priority](https://docs.gtk.org/gtk4/method.DirectoryList.get_io_priority.html)
    pub fn getIoPriority(self: *DirectoryList) i32 {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) i32, .{ .name = "gtk_directory_list_get_io_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_monitored](https://docs.gtk.org/gtk4/method.DirectoryList.get_monitored.html)
    pub fn getMonitored(self: *DirectoryList) bool {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) bool, .{ .name = "gtk_directory_list_get_monitored" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_loading](https://docs.gtk.org/gtk4/method.DirectoryList.is_loading.html)
    pub fn isLoading(self: *DirectoryList) bool {
        const cFn = @extern(*const fn (*DirectoryList) callconv(.c) bool, .{ .name = "gtk_directory_list_is_loading" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.DirectoryList.set_attributes.html)
    pub fn setAttributes(self: *DirectoryList, _attributes: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*DirectoryList, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_directory_list_set_attributes" });
        const ret = cFn(self, _attributes);
        return ret;
    }
    /// method [set_file](https://docs.gtk.org/gtk4/method.DirectoryList.set_file.html)
    pub fn setFile(self: *DirectoryList, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*DirectoryList, ?*gio.File) callconv(.c) void, .{ .name = "gtk_directory_list_set_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_io_priority](https://docs.gtk.org/gtk4/method.DirectoryList.set_io_priority.html)
    pub fn setIoPriority(self: *DirectoryList, _io_priority: i32) void {
        const cFn = @extern(*const fn (*DirectoryList, i32) callconv(.c) void, .{ .name = "gtk_directory_list_set_io_priority" });
        const ret = cFn(self, _io_priority);
        return ret;
    }
    /// method [set_monitored](https://docs.gtk.org/gtk4/method.DirectoryList.set_monitored.html)
    pub fn setMonitored(self: *DirectoryList, _monitored: bool) void {
        const cFn = @extern(*const fn (*DirectoryList, bool) callconv(.c) void, .{ .name = "gtk_directory_list_set_monitored" });
        const ret = cFn(self, _monitored);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_directory_list_get_type" });
        return cFn();
    }
};
pub const DirectoryListClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [DragIcon](https://docs.gtk.org/gtk4/class.DragIcon.html)
/// - property [child](https://docs.gtk.org/gtk4/property.DragIcon.child.html): (rw) `gtk.Widget`
pub const DragIcon = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.DragIconClass;
    /// type func [create_widget_for_value](https://docs.gtk.org/gtk4/type_func.DragIcon.create_widget_for_value.html)
    pub fn createWidgetForValue(_value: *gobject.Value) ?*gtk.Widget {
        const cFn = @extern(*const fn (*gobject.Value) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_drag_icon_create_widget_for_value" });
        const ret = cFn(_value);
        return ret;
    }
    /// type func [get_for_drag](https://docs.gtk.org/gtk4/type_func.DragIcon.get_for_drag.html)
    pub fn getForDrag(_drag: *gdk.Drag) *gtk.Widget {
        const cFn = @extern(*const fn (*gdk.Drag) callconv(.c) *gtk.Widget, .{ .name = "gtk_drag_icon_get_for_drag" });
        const ret = cFn(_drag);
        return ret;
    }
    /// type func [set_from_paintable](https://docs.gtk.org/gtk4/type_func.DragIcon.set_from_paintable.html)
    pub fn setFromPaintable(_drag: *gdk.Drag, _paintable: *gdk.Paintable, _hot_x: i32, _hot_y: i32) void {
        const cFn = @extern(*const fn (*gdk.Drag, *gdk.Paintable, i32, i32) callconv(.c) void, .{ .name = "gtk_drag_icon_set_from_paintable" });
        const ret = cFn(_drag, _paintable, _hot_x, _hot_y);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.DragIcon.get_child.html)
    pub fn getChild(self: *DragIcon) ?*gtk.Widget {
        const cFn = @extern(*const fn (*DragIcon) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_drag_icon_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.DragIcon.set_child.html)
    pub fn setChild(self: *DragIcon, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*DragIcon, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_drag_icon_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drag_icon_get_type" });
        return cFn();
    }
};
pub const DragIconClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Class [DragSource](https://docs.gtk.org/gtk4/class.DragSource.html)
/// - property [actions](https://docs.gtk.org/gtk4/property.DragSource.actions.html): (rw) `gdk.DragAction`
/// - property [content](https://docs.gtk.org/gtk4/property.DragSource.content.html): (rw) `gdk.ContentProvider`
pub const DragSource = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.DragSourceClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DragSource.new.html)
    pub fn new() *DragSource {
        const cFn = @extern(*const fn () callconv(.c) *DragSource, .{ .name = "gtk_drag_source_new" });
        const ret = cFn();
        return ret;
    }
    /// method [drag_cancel](https://docs.gtk.org/gtk4/method.DragSource.drag_cancel.html)
    pub fn dragCancel(self: *DragSource) void {
        const cFn = @extern(*const fn (*DragSource) callconv(.c) void, .{ .name = "gtk_drag_source_drag_cancel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_actions](https://docs.gtk.org/gtk4/method.DragSource.get_actions.html)
    pub fn getActions(self: *DragSource) gdk.DragAction {
        const cFn = @extern(*const fn (*DragSource) callconv(.c) gdk.DragAction, .{ .name = "gtk_drag_source_get_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_content](https://docs.gtk.org/gtk4/method.DragSource.get_content.html)
    pub fn getContent(self: *DragSource) ?*gdk.ContentProvider {
        const cFn = @extern(*const fn (*DragSource) callconv(.c) ?*gdk.ContentProvider, .{ .name = "gtk_drag_source_get_content" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drag](https://docs.gtk.org/gtk4/method.DragSource.get_drag.html)
    pub fn getDrag(self: *DragSource) ?*gdk.Drag {
        const cFn = @extern(*const fn (*DragSource) callconv(.c) ?*gdk.Drag, .{ .name = "gtk_drag_source_get_drag" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_actions](https://docs.gtk.org/gtk4/method.DragSource.set_actions.html)
    pub fn setActions(self: *DragSource, _actions: gdk.DragAction) void {
        const cFn = @extern(*const fn (*DragSource, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_drag_source_set_actions" });
        const ret = cFn(self, _actions);
        return ret;
    }
    /// method [set_content](https://docs.gtk.org/gtk4/method.DragSource.set_content.html)
    pub fn setContent(self: *DragSource, _content: ?*gdk.ContentProvider) void {
        const cFn = @extern(*const fn (*DragSource, ?*gdk.ContentProvider) callconv(.c) void, .{ .name = "gtk_drag_source_set_content" });
        const ret = cFn(self, _content);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gtk4/method.DragSource.set_icon.html)
    pub fn setIcon(self: *DragSource, _paintable: ?*gdk.Paintable, _hot_x: i32, _hot_y: i32) void {
        const cFn = @extern(*const fn (*DragSource, ?*gdk.Paintable, i32, i32) callconv(.c) void, .{ .name = "gtk_drag_source_set_icon" });
        const ret = cFn(self, _paintable, _hot_x, _hot_y);
        return ret;
    }
    /// signal [drag-begin](https://docs.gtk.org/gtk4/signal.DragSource.drag-begin.html)
    pub fn connectDragBegin(self: *DragSource, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-begin", handler, args, flags, &.{ void, *DragSource, *gdk.Drag });
    }
    /// signal [drag-cancel](https://docs.gtk.org/gtk4/signal.DragSource.drag-cancel.html)
    pub fn connectDragCancel(self: *DragSource, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-cancel", handler, args, flags, &.{ bool, *DragSource, *gdk.Drag, gdk.DragCancelReason });
    }
    /// signal [drag-end](https://docs.gtk.org/gtk4/signal.DragSource.drag-end.html)
    pub fn connectDragEnd(self: *DragSource, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-end", handler, args, flags, &.{ void, *DragSource, *gdk.Drag, bool });
    }
    /// signal [prepare](https://docs.gtk.org/gtk4/signal.DragSource.prepare.html)
    pub fn connectPrepare(self: *DragSource, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("prepare", handler, args, flags, &.{ gdk.ContentProvider, *DragSource, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drag_source_get_type" });
        return cFn();
    }
};
pub const DragSourceClass = opaque {};
/// Class [DrawingArea](https://docs.gtk.org/gtk4/class.DrawingArea.html)
/// - property [content-height](https://docs.gtk.org/gtk4/property.DrawingArea.content-height.html): (rw) `i32`
/// - property [content-width](https://docs.gtk.org/gtk4/property.DrawingArea.content-width.html): (rw) `i32`
pub const DrawingArea = extern struct {
    widget: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.DrawingAreaClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DrawingArea.new.html)
    pub fn new() *DrawingArea {
        const cFn = @extern(*const fn () callconv(.c) *DrawingArea, .{ .name = "gtk_drawing_area_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_content_height](https://docs.gtk.org/gtk4/method.DrawingArea.get_content_height.html)
    pub fn getContentHeight(self: *DrawingArea) i32 {
        const cFn = @extern(*const fn (*DrawingArea) callconv(.c) i32, .{ .name = "gtk_drawing_area_get_content_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_content_width](https://docs.gtk.org/gtk4/method.DrawingArea.get_content_width.html)
    pub fn getContentWidth(self: *DrawingArea) i32 {
        const cFn = @extern(*const fn (*DrawingArea) callconv(.c) i32, .{ .name = "gtk_drawing_area_get_content_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_content_height](https://docs.gtk.org/gtk4/method.DrawingArea.set_content_height.html)
    pub fn setContentHeight(self: *DrawingArea, _height: i32) void {
        const cFn = @extern(*const fn (*DrawingArea, i32) callconv(.c) void, .{ .name = "gtk_drawing_area_set_content_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_content_width](https://docs.gtk.org/gtk4/method.DrawingArea.set_content_width.html)
    pub fn setContentWidth(self: *DrawingArea, _width: i32) void {
        const cFn = @extern(*const fn (*DrawingArea, i32) callconv(.c) void, .{ .name = "gtk_drawing_area_set_content_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    /// method [set_draw_func](https://docs.gtk.org/gtk4/method.DrawingArea.set_draw_func.html)
    pub fn setDrawFunc(self: *DrawingArea, draw_func: anytype, draw_func_args: anytype) void {
        var closure_draw_func = core.zig_closure(draw_func, draw_func_args, &.{ void, *gtk.DrawingArea, *cairo.Context, i32, i32 });
        const _draw_func: ?gtk.DrawingAreaDrawFunc = @ptrCast(closure_draw_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_draw_func.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_draw_func.c_destroy());
        const cFn = @extern(*const fn (*DrawingArea, ?gtk.DrawingAreaDrawFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_drawing_area_set_draw_func" });
        const ret = cFn(self, _draw_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// vfunc [resize](https://docs.gtk.org/gtk4/vfunc.DrawingArea.resize.html)
    pub fn resizeV(self: *DrawingArea, _width: i32, _height: i32) void {
        const class: *DrawingAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.resize.?;
        const ret = vFn(self, _width, _height);
        return ret;
    }
    /// signal [resize](https://docs.gtk.org/gtk4/signal.DrawingArea.resize.html)
    pub fn connectResize(self: *DrawingArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("resize", handler, args, flags, &.{ void, *DrawingArea, i32, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drawing_area_get_type" });
        return cFn();
    }
};
pub const DrawingAreaClass = extern struct {
    parent_class: gtk.WidgetClass,
    resize: ?*const fn (_area: *gtk.DrawingArea, _width: i32, _height: i32) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// callback [DrawingAreaDrawFunc](https://docs.gtk.org/gtk4/callback.DrawingAreaDrawFunc.html)
pub const DrawingAreaDrawFunc = *const fn (_drawing_area: *gtk.DrawingArea, _cr: *cairo.Context, _width: i32, _height: i32, _user_data: ?*anyopaque) callconv(.c) void;
/// Class [DropControllerMotion](https://docs.gtk.org/gtk4/class.DropControllerMotion.html)
/// - property [contains-pointer](https://docs.gtk.org/gtk4/property.DropControllerMotion.contains-pointer.html): (r-) `bool`
/// - property [drop](https://docs.gtk.org/gtk4/property.DropControllerMotion.drop.html): (r-) `gdk.Drop`
/// - property [is-pointer](https://docs.gtk.org/gtk4/property.DropControllerMotion.is-pointer.html): (r-) `bool`
pub const DropControllerMotion = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.DropControllerMotionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DropControllerMotion.new.html)
    pub fn new() *DropControllerMotion {
        const cFn = @extern(*const fn () callconv(.c) *DropControllerMotion, .{ .name = "gtk_drop_controller_motion_new" });
        const ret = cFn();
        return ret;
    }
    /// method [contains_pointer](https://docs.gtk.org/gtk4/method.DropControllerMotion.contains_pointer.html)
    pub fn containsPointer(self: *DropControllerMotion) bool {
        const cFn = @extern(*const fn (*DropControllerMotion) callconv(.c) bool, .{ .name = "gtk_drop_controller_motion_contains_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_drop](https://docs.gtk.org/gtk4/method.DropControllerMotion.get_drop.html)
    pub fn getDrop(self: *DropControllerMotion) ?*gdk.Drop {
        const cFn = @extern(*const fn (*DropControllerMotion) callconv(.c) ?*gdk.Drop, .{ .name = "gtk_drop_controller_motion_get_drop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_pointer](https://docs.gtk.org/gtk4/method.DropControllerMotion.is_pointer.html)
    pub fn isPointer(self: *DropControllerMotion) bool {
        const cFn = @extern(*const fn (*DropControllerMotion) callconv(.c) bool, .{ .name = "gtk_drop_controller_motion_is_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [enter](https://docs.gtk.org/gtk4/signal.DropControllerMotion.enter.html)
    pub fn connectEnter(self: *DropControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enter", handler, args, flags, &.{ void, *DropControllerMotion, f64, f64 });
    }
    /// signal [leave](https://docs.gtk.org/gtk4/signal.DropControllerMotion.leave.html)
    pub fn connectLeave(self: *DropControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("leave", handler, args, flags, &.{ void, *DropControllerMotion });
    }
    /// signal [motion](https://docs.gtk.org/gtk4/signal.DropControllerMotion.motion.html)
    pub fn connectMotion(self: *DropControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("motion", handler, args, flags, &.{ void, *DropControllerMotion, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drop_controller_motion_get_type" });
        return cFn();
    }
};
pub const DropControllerMotionClass = opaque {};
/// Class [DropDown](https://docs.gtk.org/gtk4/class.DropDown.html)
/// - property [enable-search](https://docs.gtk.org/gtk4/property.DropDown.enable-search.html): (rw) `bool`
/// - property [expression](https://docs.gtk.org/gtk4/property.DropDown.expression.html): (rw) `gtk.Expression`
/// - property [factory](https://docs.gtk.org/gtk4/property.DropDown.factory.html): (rw) `gtk.ListItemFactory`
/// - property [header-factory](https://docs.gtk.org/gtk4/property.DropDown.header-factory.html): (rw) `gtk.ListItemFactory`
/// - property [list-factory](https://docs.gtk.org/gtk4/property.DropDown.list-factory.html): (rw) `gtk.ListItemFactory`
/// - property [model](https://docs.gtk.org/gtk4/property.DropDown.model.html): (rw) `gio.ListModel`
/// - property [search-match-mode](https://docs.gtk.org/gtk4/property.DropDown.search-match-mode.html): (rw) `gtk.StringFilterMatchMode`
/// - property [selected](https://docs.gtk.org/gtk4/property.DropDown.selected.html): (rw) `u32`
/// - property [selected-item](https://docs.gtk.org/gtk4/property.DropDown.selected-item.html): (r-) `gobject.Object`
/// - property [show-arrow](https://docs.gtk.org/gtk4/property.DropDown.show-arrow.html): (rw) `bool`
pub const DropDown = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.DropDownClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DropDown.new.html)
    pub fn new(_model: ?*gio.ListModel, _expression: ?*gtk.Expression) *DropDown {
        const cFn = @extern(*const fn (?*gio.ListModel, ?*gtk.Expression) callconv(.c) *DropDown, .{ .name = "gtk_drop_down_new" });
        const ret = cFn(_model, _expression);
        return ret;
    }
    /// ctor [new_from_strings](https://docs.gtk.org/gtk4/ctor.DropDown.new_from_strings.html)
    pub fn newFromStrings(_strings: [*:null]?[*:0]const u8) *DropDown {
        const cFn = @extern(*const fn ([*:null]?[*:0]const u8) callconv(.c) *DropDown, .{ .name = "gtk_drop_down_new_from_strings" });
        const ret = cFn(_strings);
        return ret;
    }
    /// method [get_enable_search](https://docs.gtk.org/gtk4/method.DropDown.get_enable_search.html)
    pub fn getEnableSearch(self: *DropDown) bool {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) bool, .{ .name = "gtk_drop_down_get_enable_search" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.DropDown.get_expression.html)
    pub fn getExpression(self: *DropDown) ?*gtk.Expression {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_drop_down_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_factory](https://docs.gtk.org/gtk4/method.DropDown.get_factory.html)
    pub fn getFactory(self: *DropDown) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_drop_down_get_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header_factory](https://docs.gtk.org/gtk4/method.DropDown.get_header_factory.html)
    pub fn getHeaderFactory(self: *DropDown) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_drop_down_get_header_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_list_factory](https://docs.gtk.org/gtk4/method.DropDown.get_list_factory.html)
    pub fn getListFactory(self: *DropDown) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_drop_down_get_list_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.DropDown.get_model.html)
    pub fn getModel(self: *DropDown) ?*gio.ListModel {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_drop_down_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_search_match_mode](https://docs.gtk.org/gtk4/method.DropDown.get_search_match_mode.html)
    pub fn getSearchMatchMode(self: *DropDown) gtk.StringFilterMatchMode {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) gtk.StringFilterMatchMode, .{ .name = "gtk_drop_down_get_search_match_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected](https://docs.gtk.org/gtk4/method.DropDown.get_selected.html)
    pub fn getSelected(self: *DropDown) u32 {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) u32, .{ .name = "gtk_drop_down_get_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_item](https://docs.gtk.org/gtk4/method.DropDown.get_selected_item.html)
    pub fn getSelectedItem(self: *DropDown) ?*gobject.Object {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) ?*gobject.Object, .{ .name = "gtk_drop_down_get_selected_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_arrow](https://docs.gtk.org/gtk4/method.DropDown.get_show_arrow.html)
    pub fn getShowArrow(self: *DropDown) bool {
        const cFn = @extern(*const fn (*DropDown) callconv(.c) bool, .{ .name = "gtk_drop_down_get_show_arrow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_enable_search](https://docs.gtk.org/gtk4/method.DropDown.set_enable_search.html)
    pub fn setEnableSearch(self: *DropDown, _enable_search: bool) void {
        const cFn = @extern(*const fn (*DropDown, bool) callconv(.c) void, .{ .name = "gtk_drop_down_set_enable_search" });
        const ret = cFn(self, _enable_search);
        return ret;
    }
    /// method [set_expression](https://docs.gtk.org/gtk4/method.DropDown.set_expression.html)
    pub fn setExpression(self: *DropDown, _expression: ?*gtk.Expression) void {
        const cFn = @extern(*const fn (*DropDown, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_drop_down_set_expression" });
        const ret = cFn(self, _expression);
        return ret;
    }
    /// method [set_factory](https://docs.gtk.org/gtk4/method.DropDown.set_factory.html)
    pub fn setFactory(self: *DropDown, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*DropDown, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_drop_down_set_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_header_factory](https://docs.gtk.org/gtk4/method.DropDown.set_header_factory.html)
    pub fn setHeaderFactory(self: *DropDown, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*DropDown, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_drop_down_set_header_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_list_factory](https://docs.gtk.org/gtk4/method.DropDown.set_list_factory.html)
    pub fn setListFactory(self: *DropDown, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*DropDown, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_drop_down_set_list_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.DropDown.set_model.html)
    pub fn setModel(self: *DropDown, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*DropDown, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_drop_down_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_search_match_mode](https://docs.gtk.org/gtk4/method.DropDown.set_search_match_mode.html)
    pub fn setSearchMatchMode(self: *DropDown, _search_match_mode: gtk.StringFilterMatchMode) void {
        const cFn = @extern(*const fn (*DropDown, gtk.StringFilterMatchMode) callconv(.c) void, .{ .name = "gtk_drop_down_set_search_match_mode" });
        const ret = cFn(self, _search_match_mode);
        return ret;
    }
    /// method [set_selected](https://docs.gtk.org/gtk4/method.DropDown.set_selected.html)
    pub fn setSelected(self: *DropDown, _position: u32) void {
        const cFn = @extern(*const fn (*DropDown, u32) callconv(.c) void, .{ .name = "gtk_drop_down_set_selected" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_show_arrow](https://docs.gtk.org/gtk4/method.DropDown.set_show_arrow.html)
    pub fn setShowArrow(self: *DropDown, _show_arrow: bool) void {
        const cFn = @extern(*const fn (*DropDown, bool) callconv(.c) void, .{ .name = "gtk_drop_down_set_show_arrow" });
        const ret = cFn(self, _show_arrow);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.DropDown.activate.html)
    pub fn connectActivate(self: *DropDown, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *DropDown });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drop_down_get_type" });
        return cFn();
    }
};
pub const DropDownClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Class [DropTarget](https://docs.gtk.org/gtk4/class.DropTarget.html)
/// - property [actions](https://docs.gtk.org/gtk4/property.DropTarget.actions.html): (rw) `gdk.DragAction`
/// - property [current-drop](https://docs.gtk.org/gtk4/property.DropTarget.current-drop.html): (r-) `gdk.Drop`
/// - property [formats](https://docs.gtk.org/gtk4/property.DropTarget.formats.html): (r-) `gdk.ContentFormats`
/// - property [preload](https://docs.gtk.org/gtk4/property.DropTarget.preload.html): (rw) `bool`
/// - property [value](https://docs.gtk.org/gtk4/property.DropTarget.value.html): (r-) `gobject.Value`
pub const DropTarget = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.DropTargetClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DropTarget.new.html)
    pub fn new(_type: core.Type, _actions: gdk.DragAction) *DropTarget {
        const cFn = @extern(*const fn (core.Type, gdk.DragAction) callconv(.c) *DropTarget, .{ .name = "gtk_drop_target_new" });
        const ret = cFn(_type, _actions);
        return ret;
    }
    /// method [get_actions](https://docs.gtk.org/gtk4/method.DropTarget.get_actions.html)
    pub fn getActions(self: *DropTarget) gdk.DragAction {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) gdk.DragAction, .{ .name = "gtk_drop_target_get_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_drop](https://docs.gtk.org/gtk4/method.DropTarget.get_current_drop.html)
    pub fn getCurrentDrop(self: *DropTarget) ?*gdk.Drop {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) ?*gdk.Drop, .{ .name = "gtk_drop_target_get_current_drop" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_drop](https://docs.gtk.org/gtk4/method.DropTarget.get_drop.html)
    pub const getDrop = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDrop(self: *DropTarget) ?*gdk.Drop {
            const cFn = @extern(*const fn (*DropTarget) callconv(.c) ?*gdk.Drop, .{ .name = "gtk_drop_target_get_drop" });
            const ret = cFn(self);
            return ret;
        }
    }.getDrop;
    /// method [get_formats](https://docs.gtk.org/gtk4/method.DropTarget.get_formats.html)
    pub fn getFormats(self: *DropTarget) ?*gdk.ContentFormats {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) ?*gdk.ContentFormats, .{ .name = "gtk_drop_target_get_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gtypes](https://docs.gtk.org/gtk4/method.DropTarget.get_gtypes.html)
    pub fn getGtypes(self: *DropTarget) struct {
        ret: ?[*]core.Type,
        n_types: u64,
    } {
        var n_types_out: u64 = undefined;
        const _n_types = &n_types_out;
        const cFn = @extern(*const fn (*DropTarget, ?*u64) callconv(.c) ?[*]core.Type, .{ .name = "gtk_drop_target_get_gtypes" });
        const ret = cFn(self, _n_types);
        return .{ .ret = ret, .n_types = n_types_out };
    }
    /// method [get_preload](https://docs.gtk.org/gtk4/method.DropTarget.get_preload.html)
    pub fn getPreload(self: *DropTarget) bool {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) bool, .{ .name = "gtk_drop_target_get_preload" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.DropTarget.get_value.html)
    pub fn getValue(self: *DropTarget) ?*gobject.Value {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) ?*gobject.Value, .{ .name = "gtk_drop_target_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reject](https://docs.gtk.org/gtk4/method.DropTarget.reject.html)
    pub fn reject(self: *DropTarget) void {
        const cFn = @extern(*const fn (*DropTarget) callconv(.c) void, .{ .name = "gtk_drop_target_reject" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_actions](https://docs.gtk.org/gtk4/method.DropTarget.set_actions.html)
    pub fn setActions(self: *DropTarget, _actions: gdk.DragAction) void {
        const cFn = @extern(*const fn (*DropTarget, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_drop_target_set_actions" });
        const ret = cFn(self, _actions);
        return ret;
    }
    /// method [set_gtypes](https://docs.gtk.org/gtk4/method.DropTarget.set_gtypes.html)
    pub fn setGtypes(self: *DropTarget, _typess: []core.Type) void {
        const _types = _typess.ptr;
        const _n_types: u64 = @intCast(_typess.len);
        const cFn = @extern(*const fn (*DropTarget, ?[*]core.Type, u64) callconv(.c) void, .{ .name = "gtk_drop_target_set_gtypes" });
        const ret = cFn(self, _types, _n_types);
        return ret;
    }
    /// method [set_preload](https://docs.gtk.org/gtk4/method.DropTarget.set_preload.html)
    pub fn setPreload(self: *DropTarget, _preload: bool) void {
        const cFn = @extern(*const fn (*DropTarget, bool) callconv(.c) void, .{ .name = "gtk_drop_target_set_preload" });
        const ret = cFn(self, _preload);
        return ret;
    }
    /// signal [accept](https://docs.gtk.org/gtk4/signal.DropTarget.accept.html)
    pub fn connectAccept(self: *DropTarget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accept", handler, args, flags, &.{ bool, *DropTarget, *gdk.Drop });
    }
    /// signal [drop](https://docs.gtk.org/gtk4/signal.DropTarget.drop.html)
    pub fn connectDrop(self: *DropTarget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drop", handler, args, flags, &.{ bool, *DropTarget, *gobject.Value, f64, f64 });
    }
    /// signal [enter](https://docs.gtk.org/gtk4/signal.DropTarget.enter.html)
    pub fn connectEnter(self: *DropTarget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enter", handler, args, flags, &.{ gdk.DragAction, *DropTarget, f64, f64 });
    }
    /// signal [leave](https://docs.gtk.org/gtk4/signal.DropTarget.leave.html)
    pub fn connectLeave(self: *DropTarget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("leave", handler, args, flags, &.{ void, *DropTarget });
    }
    /// signal [motion](https://docs.gtk.org/gtk4/signal.DropTarget.motion.html)
    pub fn connectMotion(self: *DropTarget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("motion", handler, args, flags, &.{ gdk.DragAction, *DropTarget, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drop_target_get_type" });
        return cFn();
    }
};
/// Class [DropTargetAsync](https://docs.gtk.org/gtk4/class.DropTargetAsync.html)
/// - property [actions](https://docs.gtk.org/gtk4/property.DropTargetAsync.actions.html): (rw) `gdk.DragAction`
/// - property [formats](https://docs.gtk.org/gtk4/property.DropTargetAsync.formats.html): (rw) `gdk.ContentFormats`
pub const DropTargetAsync = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.DropTargetAsyncClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.DropTargetAsync.new.html)
    pub fn new(_formats: ?*gdk.ContentFormats, _actions: gdk.DragAction) *DropTargetAsync {
        const cFn = @extern(*const fn (?*gdk.ContentFormats, gdk.DragAction) callconv(.c) *DropTargetAsync, .{ .name = "gtk_drop_target_async_new" });
        const ret = cFn(_formats, _actions);
        return ret;
    }
    /// method [get_actions](https://docs.gtk.org/gtk4/method.DropTargetAsync.get_actions.html)
    pub fn getActions(self: *DropTargetAsync) gdk.DragAction {
        const cFn = @extern(*const fn (*DropTargetAsync) callconv(.c) gdk.DragAction, .{ .name = "gtk_drop_target_async_get_actions" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_formats](https://docs.gtk.org/gtk4/method.DropTargetAsync.get_formats.html)
    pub fn getFormats(self: *DropTargetAsync) ?*gdk.ContentFormats {
        const cFn = @extern(*const fn (*DropTargetAsync) callconv(.c) ?*gdk.ContentFormats, .{ .name = "gtk_drop_target_async_get_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reject_drop](https://docs.gtk.org/gtk4/method.DropTargetAsync.reject_drop.html)
    pub fn rejectDrop(self: *DropTargetAsync, _drop: *gdk.Drop) void {
        const cFn = @extern(*const fn (*DropTargetAsync, *gdk.Drop) callconv(.c) void, .{ .name = "gtk_drop_target_async_reject_drop" });
        const ret = cFn(self, _drop);
        return ret;
    }
    /// method [set_actions](https://docs.gtk.org/gtk4/method.DropTargetAsync.set_actions.html)
    pub fn setActions(self: *DropTargetAsync, _actions: gdk.DragAction) void {
        const cFn = @extern(*const fn (*DropTargetAsync, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_drop_target_async_set_actions" });
        const ret = cFn(self, _actions);
        return ret;
    }
    /// method [set_formats](https://docs.gtk.org/gtk4/method.DropTargetAsync.set_formats.html)
    pub fn setFormats(self: *DropTargetAsync, _formats: ?*gdk.ContentFormats) void {
        const cFn = @extern(*const fn (*DropTargetAsync, ?*gdk.ContentFormats) callconv(.c) void, .{ .name = "gtk_drop_target_async_set_formats" });
        const ret = cFn(self, _formats);
        return ret;
    }
    /// signal [accept](https://docs.gtk.org/gtk4/signal.DropTargetAsync.accept.html)
    pub fn connectAccept(self: *DropTargetAsync, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accept", handler, args, flags, &.{ bool, *DropTargetAsync, *gdk.Drop });
    }
    /// signal [drag-enter](https://docs.gtk.org/gtk4/signal.DropTargetAsync.drag-enter.html)
    pub fn connectDragEnter(self: *DropTargetAsync, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-enter", handler, args, flags, &.{ gdk.DragAction, *DropTargetAsync, *gdk.Drop, f64, f64 });
    }
    /// signal [drag-leave](https://docs.gtk.org/gtk4/signal.DropTargetAsync.drag-leave.html)
    pub fn connectDragLeave(self: *DropTargetAsync, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-leave", handler, args, flags, &.{ void, *DropTargetAsync, *gdk.Drop });
    }
    /// signal [drag-motion](https://docs.gtk.org/gtk4/signal.DropTargetAsync.drag-motion.html)
    pub fn connectDragMotion(self: *DropTargetAsync, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-motion", handler, args, flags, &.{ gdk.DragAction, *DropTargetAsync, *gdk.Drop, f64, f64 });
    }
    /// signal [drop](https://docs.gtk.org/gtk4/signal.DropTargetAsync.drop.html)
    pub fn connectDrop(self: *DropTargetAsync, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drop", handler, args, flags, &.{ bool, *DropTargetAsync, *gdk.Drop, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_drop_target_async_get_type" });
        return cFn();
    }
};
pub const DropTargetAsyncClass = opaque {};
pub const DropTargetClass = opaque {};
/// Iface [Editable](https://docs.gtk.org/gtk4/iface.Editable.html)
/// - property [cursor-position](https://docs.gtk.org/gtk4/property.Editable.cursor-position.html): (r-) `i32`
/// - property [editable](https://docs.gtk.org/gtk4/property.Editable.editable.html): (rw) `bool`
/// - property [enable-undo](https://docs.gtk.org/gtk4/property.Editable.enable-undo.html): (rw) `bool`
/// - property [max-width-chars](https://docs.gtk.org/gtk4/property.Editable.max-width-chars.html): (rw) `i32`
/// - property [selection-bound](https://docs.gtk.org/gtk4/property.Editable.selection-bound.html): (r-) `i32`
/// - property [text](https://docs.gtk.org/gtk4/property.Editable.text.html): (rw) `[*:0]const u8`
/// - property [width-chars](https://docs.gtk.org/gtk4/property.Editable.width-chars.html): (rw) `i32`
/// - property [xalign](https://docs.gtk.org/gtk4/property.Editable.xalign.html): (rw) `f32`
pub const Editable = opaque {
    pub const Prerequisites = [_]type{gtk.Widget};
    /// type func [delegate_get_property](https://docs.gtk.org/gtk4/type_func.Editable.delegate_get_property.html)
    pub fn delegateGetProperty(_object: *gobject.Object, _prop_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) bool {
        const cFn = @extern(*const fn (*gobject.Object, u32, *gobject.Value, *gobject.ParamSpec) callconv(.c) bool, .{ .name = "gtk_editable_delegate_get_property" });
        const ret = cFn(_object, _prop_id, _value, _pspec);
        return ret;
    }
    /// type func [delegate_set_property](https://docs.gtk.org/gtk4/type_func.Editable.delegate_set_property.html)
    pub fn delegateSetProperty(_object: *gobject.Object, _prop_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) bool {
        const cFn = @extern(*const fn (*gobject.Object, u32, *gobject.Value, *gobject.ParamSpec) callconv(.c) bool, .{ .name = "gtk_editable_delegate_set_property" });
        const ret = cFn(_object, _prop_id, _value, _pspec);
        return ret;
    }
    /// type func [install_properties](https://docs.gtk.org/gtk4/type_func.Editable.install_properties.html)
    pub fn installProperties(_object_class: *gobject.ObjectClass, _first_prop: u32) u32 {
        const cFn = @extern(*const fn (*gobject.ObjectClass, u32) callconv(.c) u32, .{ .name = "gtk_editable_install_properties" });
        const ret = cFn(_object_class, _first_prop);
        return ret;
    }
    /// method [delegate_get_accessible_platform_state](https://docs.gtk.org/gtk4/method.Editable.delegate_get_accessible_platform_state.html)
    pub fn delegateGetAccessiblePlatformState(self: *Editable, _state: gtk.AccessiblePlatformState) bool {
        const cFn = @extern(*const fn (*Editable, gtk.AccessiblePlatformState) callconv(.c) bool, .{ .name = "gtk_editable_delegate_get_accessible_platform_state" });
        const ret = cFn(self, _state);
        return ret;
    }
    /// method [delete_selection](https://docs.gtk.org/gtk4/method.Editable.delete_selection.html)
    pub fn deleteSelection(self: *Editable) void {
        const cFn = @extern(*const fn (*Editable) callconv(.c) void, .{ .name = "gtk_editable_delete_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [delete_text](https://docs.gtk.org/gtk4/method.Editable.delete_text.html)
    pub fn deleteText(self: *Editable, _start_pos: i32, _end_pos: i32) void {
        const cFn = @extern(*const fn (*Editable, i32, i32) callconv(.c) void, .{ .name = "gtk_editable_delete_text" });
        const ret = cFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// method [finish_delegate](https://docs.gtk.org/gtk4/method.Editable.finish_delegate.html)
    pub fn finishDelegate(self: *Editable) void {
        const cFn = @extern(*const fn (*Editable) callconv(.c) void, .{ .name = "gtk_editable_finish_delegate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_alignment](https://docs.gtk.org/gtk4/method.Editable.get_alignment.html)
    pub fn getAlignment(self: *Editable) f32 {
        const cFn = @extern(*const fn (*Editable) callconv(.c) f32, .{ .name = "gtk_editable_get_alignment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_chars](https://docs.gtk.org/gtk4/method.Editable.get_chars.html)
    pub fn getChars(self: *Editable, _start_pos: i32, _end_pos: i32) [*:0]u8 {
        const cFn = @extern(*const fn (*Editable, i32, i32) callconv(.c) [*:0]u8, .{ .name = "gtk_editable_get_chars" });
        const ret = cFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// method [get_delegate](https://docs.gtk.org/gtk4/method.Editable.get_delegate.html)
    pub fn getDelegate(self: *Editable) ?*gtk.Editable {
        const cFn = @extern(*const fn (*Editable) callconv(.c) ?*gtk.Editable, .{ .name = "gtk_editable_get_delegate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_editable](https://docs.gtk.org/gtk4/method.Editable.get_editable.html)
    pub fn getEditable(self: *Editable) bool {
        const cFn = @extern(*const fn (*Editable) callconv(.c) bool, .{ .name = "gtk_editable_get_editable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enable_undo](https://docs.gtk.org/gtk4/method.Editable.get_enable_undo.html)
    pub fn getEnableUndo(self: *Editable) bool {
        const cFn = @extern(*const fn (*Editable) callconv(.c) bool, .{ .name = "gtk_editable_get_enable_undo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_width_chars](https://docs.gtk.org/gtk4/method.Editable.get_max_width_chars.html)
    pub fn getMaxWidthChars(self: *Editable) i32 {
        const cFn = @extern(*const fn (*Editable) callconv(.c) i32, .{ .name = "gtk_editable_get_max_width_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.Editable.get_position.html)
    pub fn getPosition(self: *Editable) i32 {
        const cFn = @extern(*const fn (*Editable) callconv(.c) i32, .{ .name = "gtk_editable_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_bounds](https://docs.gtk.org/gtk4/method.Editable.get_selection_bounds.html)
    pub fn getSelectionBounds(self: *Editable) ?struct {
        start_pos: i32,
        end_pos: i32,
    } {
        var start_pos_out: i32 = undefined;
        const _start_pos = &start_pos_out;
        var end_pos_out: i32 = undefined;
        const _end_pos = &end_pos_out;
        const cFn = @extern(*const fn (*Editable, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "gtk_editable_get_selection_bounds" });
        const ret = cFn(self, _start_pos, _end_pos);
        if (!ret) return null;
        return .{ .start_pos = start_pos_out, .end_pos = end_pos_out };
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.Editable.get_text.html)
    pub fn getText(self: *Editable) [*:0]u8 {
        const cFn = @extern(*const fn (*Editable) callconv(.c) [*:0]u8, .{ .name = "gtk_editable_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width_chars](https://docs.gtk.org/gtk4/method.Editable.get_width_chars.html)
    pub fn getWidthChars(self: *Editable) i32 {
        const cFn = @extern(*const fn (*Editable) callconv(.c) i32, .{ .name = "gtk_editable_get_width_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init_delegate](https://docs.gtk.org/gtk4/method.Editable.init_delegate.html)
    pub fn initDelegate(self: *Editable) void {
        const cFn = @extern(*const fn (*Editable) callconv(.c) void, .{ .name = "gtk_editable_init_delegate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_text](https://docs.gtk.org/gtk4/method.Editable.insert_text.html)
    pub fn insertText(self: *Editable, _text: [*:0]const u8, _length: i32, _position: *i32) void {
        const cFn = @extern(*const fn (*Editable, [*:0]const u8, i32, *i32) callconv(.c) void, .{ .name = "gtk_editable_insert_text" });
        const ret = cFn(self, _text, _length, _position);
        return ret;
    }
    /// method [select_region](https://docs.gtk.org/gtk4/method.Editable.select_region.html)
    pub fn selectRegion(self: *Editable, _start_pos: i32, _end_pos: i32) void {
        const cFn = @extern(*const fn (*Editable, i32, i32) callconv(.c) void, .{ .name = "gtk_editable_select_region" });
        const ret = cFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// method [set_alignment](https://docs.gtk.org/gtk4/method.Editable.set_alignment.html)
    pub fn setAlignment(self: *Editable, _xalign: f32) void {
        const cFn = @extern(*const fn (*Editable, f32) callconv(.c) void, .{ .name = "gtk_editable_set_alignment" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_editable](https://docs.gtk.org/gtk4/method.Editable.set_editable.html)
    pub fn setEditable(self: *Editable, _is_editable: bool) void {
        const cFn = @extern(*const fn (*Editable, bool) callconv(.c) void, .{ .name = "gtk_editable_set_editable" });
        const ret = cFn(self, _is_editable);
        return ret;
    }
    /// method [set_enable_undo](https://docs.gtk.org/gtk4/method.Editable.set_enable_undo.html)
    pub fn setEnableUndo(self: *Editable, _enable_undo: bool) void {
        const cFn = @extern(*const fn (*Editable, bool) callconv(.c) void, .{ .name = "gtk_editable_set_enable_undo" });
        const ret = cFn(self, _enable_undo);
        return ret;
    }
    /// method [set_max_width_chars](https://docs.gtk.org/gtk4/method.Editable.set_max_width_chars.html)
    pub fn setMaxWidthChars(self: *Editable, _n_chars: i32) void {
        const cFn = @extern(*const fn (*Editable, i32) callconv(.c) void, .{ .name = "gtk_editable_set_max_width_chars" });
        const ret = cFn(self, _n_chars);
        return ret;
    }
    /// method [set_position](https://docs.gtk.org/gtk4/method.Editable.set_position.html)
    pub fn setPosition(self: *Editable, _position: i32) void {
        const cFn = @extern(*const fn (*Editable, i32) callconv(.c) void, .{ .name = "gtk_editable_set_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.Editable.set_text.html)
    pub fn setText(self: *Editable, _text: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Editable, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_editable_set_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_width_chars](https://docs.gtk.org/gtk4/method.Editable.set_width_chars.html)
    pub fn setWidthChars(self: *Editable, _n_chars: i32) void {
        const cFn = @extern(*const fn (*Editable, i32) callconv(.c) void, .{ .name = "gtk_editable_set_width_chars" });
        const ret = cFn(self, _n_chars);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.Editable.changed.html)
    pub fn changedV(self: *Editable) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [delete_text](https://docs.gtk.org/gtk4/vfunc.Editable.delete_text.html)
    pub fn deleteTextV(self: *Editable, _start_pos: i32, _end_pos: i32) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_text.?;
        const ret = vFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// vfunc [do_delete_text](https://docs.gtk.org/gtk4/vfunc.Editable.do_delete_text.html)
    pub fn doDeleteTextV(self: *Editable, _start_pos: i32, _end_pos: i32) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.do_delete_text.?;
        const ret = vFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// vfunc [do_insert_text](https://docs.gtk.org/gtk4/vfunc.Editable.do_insert_text.html)
    pub fn doInsertTextV(self: *Editable, _text: [*:0]const u8, _length: i32, _position: *i32) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.do_insert_text.?;
        const ret = vFn(self, _text, _length, _position);
        return ret;
    }
    /// vfunc [get_delegate](https://docs.gtk.org/gtk4/vfunc.Editable.get_delegate.html)
    pub fn getDelegateV(self: *Editable) ?*gtk.Editable {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_delegate.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_selection_bounds](https://docs.gtk.org/gtk4/vfunc.Editable.get_selection_bounds.html)
    pub fn getSelectionBoundsV(self: *Editable, _start_pos: ?*i32, _end_pos: ?*i32) bool {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_selection_bounds.?;
        const ret = vFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// vfunc [get_text](https://docs.gtk.org/gtk4/vfunc.Editable.get_text.html)
    pub fn getTextV(self: *Editable) [*:0]u8 {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_text.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [insert_text](https://docs.gtk.org/gtk4/vfunc.Editable.insert_text.html)
    pub fn insertTextV(self: *Editable, _text: [*:0]const u8, _length: i32, _position: *i32) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_text.?;
        const ret = vFn(self, _text, _length, _position);
        return ret;
    }
    /// vfunc [set_selection_bounds](https://docs.gtk.org/gtk4/vfunc.Editable.set_selection_bounds.html)
    pub fn setSelectionBoundsV(self: *Editable, _start_pos: i32, _end_pos: i32) void {
        const class: *EditableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_selection_bounds.?;
        const ret = vFn(self, _start_pos, _end_pos);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.Editable.changed.html)
    pub fn connectChanged(self: *Editable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Editable });
    }
    /// signal [delete-text](https://docs.gtk.org/gtk4/signal.Editable.delete-text.html)
    pub fn connectDeleteText(self: *Editable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("delete-text", handler, args, flags, &.{ void, *Editable, i32, i32 });
    }
    /// signal [insert-text](https://docs.gtk.org/gtk4/signal.Editable.insert-text.html)
    pub fn connectInsertText(self: *Editable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-text", handler, args, flags, &.{ void, *Editable, [*:0]const u8, i32, *i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_editable_get_type" });
        return cFn();
    }
};
pub const EditableInterface = extern struct {
    base_iface: gobject.TypeInterface,
    insert_text: ?*const fn (_editable: *gtk.Editable, _text: [*:0]const u8, _length: i32, _position: *i32) callconv(.c) void,
    delete_text: ?*const fn (_editable: *gtk.Editable, _start_pos: i32, _end_pos: i32) callconv(.c) void,
    changed: ?*const fn (_editable: *gtk.Editable) callconv(.c) void,
    get_text: ?*const fn (_editable: *gtk.Editable) callconv(.c) [*:0]u8,
    do_insert_text: ?*const fn (_editable: *gtk.Editable, _text: [*:0]const u8, _length: i32, _position: *i32) callconv(.c) void,
    do_delete_text: ?*const fn (_editable: *gtk.Editable, _start_pos: i32, _end_pos: i32) callconv(.c) void,
    get_selection_bounds: ?*const fn (_editable: *gtk.Editable, _start_pos: ?*i32, _end_pos: ?*i32) callconv(.c) bool,
    set_selection_bounds: ?*const fn (_editable: *gtk.Editable, _start_pos: i32, _end_pos: i32) callconv(.c) void,
    get_delegate: ?*const fn (_editable: *gtk.Editable) callconv(.c) ?*gtk.Editable,
};
/// Class [EditableLabel](https://docs.gtk.org/gtk4/class.EditableLabel.html)
/// - property [editing](https://docs.gtk.org/gtk4/property.EditableLabel.editing.html): (rw) `bool`
pub const EditableLabel = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Editable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.EditableLabelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EditableLabel.new.html)
    pub fn new(_str: [*:0]const u8) *EditableLabel {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *EditableLabel, .{ .name = "gtk_editable_label_new" });
        const ret = cFn(_str);
        return ret;
    }
    /// method [get_editing](https://docs.gtk.org/gtk4/method.EditableLabel.get_editing.html)
    pub fn getEditing(self: *EditableLabel) bool {
        const cFn = @extern(*const fn (*EditableLabel) callconv(.c) bool, .{ .name = "gtk_editable_label_get_editing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [start_editing](https://docs.gtk.org/gtk4/method.EditableLabel.start_editing.html)
    pub fn startEditing(self: *EditableLabel) void {
        const cFn = @extern(*const fn (*EditableLabel) callconv(.c) void, .{ .name = "gtk_editable_label_start_editing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop_editing](https://docs.gtk.org/gtk4/method.EditableLabel.stop_editing.html)
    pub fn stopEditing(self: *EditableLabel, _commit: bool) void {
        const cFn = @extern(*const fn (*EditableLabel, bool) callconv(.c) void, .{ .name = "gtk_editable_label_stop_editing" });
        const ret = cFn(self, _commit);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_editable_label_get_type" });
        return cFn();
    }
};
pub const EditableLabelClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Enum [EditableProperties](https://docs.gtk.org/gtk4/enum.EditableProperties.html)
pub const EditableProperties = enum(u32) {
    prop_text = 0,
    prop_cursor_position = 1,
    prop_selection_bound = 2,
    prop_editable = 3,
    prop_width_chars = 4,
    prop_max_width_chars = 5,
    prop_xalign = 6,
    prop_enable_undo = 7,
    num_properties = 8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_editable_properties_get_type" });
        return cFn();
    }
};
/// Class [EmojiChooser](https://docs.gtk.org/gtk4/class.EmojiChooser.html)
pub const EmojiChooser = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.ShortcutManager };
    pub const Parent = gtk.Popover;
    pub const Class = gtk.EmojiChooserClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EmojiChooser.new.html)
    pub fn new() *EmojiChooser {
        const cFn = @extern(*const fn () callconv(.c) *EmojiChooser, .{ .name = "gtk_emoji_chooser_new" });
        const ret = cFn();
        return ret;
    }
    /// signal [emoji-picked](https://docs.gtk.org/gtk4/signal.EmojiChooser.emoji-picked.html)
    pub fn connectEmojiPicked(self: *EmojiChooser, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("emoji-picked", handler, args, flags, &.{ void, *EmojiChooser, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_emoji_chooser_get_type" });
        return cFn();
    }
};
pub const EmojiChooserClass = opaque {};
/// Class [Entry](https://docs.gtk.org/gtk4/class.Entry.html)
/// - property [activates-default](https://docs.gtk.org/gtk4/property.Entry.activates-default.html): (rw) `bool`
/// - property [attributes](https://docs.gtk.org/gtk4/property.Entry.attributes.html): (rw) `pango.AttrList`
/// - property [buffer](https://docs.gtk.org/gtk4/property.Entry.buffer.html): (rw) `gtk.EntryBuffer`
/// - property [completion](https://docs.gtk.org/gtk4/property.Entry.completion.html): (rw) `gtk.EntryCompletion`
/// - property [enable-emoji-completion](https://docs.gtk.org/gtk4/property.Entry.enable-emoji-completion.html): (rw) `bool`
/// - property [extra-menu](https://docs.gtk.org/gtk4/property.Entry.extra-menu.html): (rw) `gio.MenuModel`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.Entry.has-frame.html): (rw) `bool`
/// - property [im-module](https://docs.gtk.org/gtk4/property.Entry.im-module.html): (rw) `[*:0]const u8`
/// - property [input-hints](https://docs.gtk.org/gtk4/property.Entry.input-hints.html): (rw) `gtk.InputHints`
/// - property [input-purpose](https://docs.gtk.org/gtk4/property.Entry.input-purpose.html): (rw) `gtk.InputPurpose`
/// - property [invisible-char](https://docs.gtk.org/gtk4/property.Entry.invisible-char.html): (rw) `u32`
/// - property [invisible-char-set](https://docs.gtk.org/gtk4/property.Entry.invisible-char-set.html): (rw) `bool`
/// - property [max-length](https://docs.gtk.org/gtk4/property.Entry.max-length.html): (rw) `i32`
/// - property [overwrite-mode](https://docs.gtk.org/gtk4/property.Entry.overwrite-mode.html): (rw) `bool`
/// - property [placeholder-text](https://docs.gtk.org/gtk4/property.Entry.placeholder-text.html): (rw) `[*:0]const u8`
/// - property [primary-icon-activatable](https://docs.gtk.org/gtk4/property.Entry.primary-icon-activatable.html): (rw) `bool`
/// - property [primary-icon-gicon](https://docs.gtk.org/gtk4/property.Entry.primary-icon-gicon.html): (rw) `gio.Icon`
/// - property [primary-icon-name](https://docs.gtk.org/gtk4/property.Entry.primary-icon-name.html): (rw) `[*:0]const u8`
/// - property [primary-icon-paintable](https://docs.gtk.org/gtk4/property.Entry.primary-icon-paintable.html): (rw) `gdk.Paintable`
/// - property [primary-icon-sensitive](https://docs.gtk.org/gtk4/property.Entry.primary-icon-sensitive.html): (rw) `bool`
/// - property [primary-icon-storage-type](https://docs.gtk.org/gtk4/property.Entry.primary-icon-storage-type.html): (r-) `gtk.ImageType`
/// - property [primary-icon-tooltip-markup](https://docs.gtk.org/gtk4/property.Entry.primary-icon-tooltip-markup.html): (rw) `[*:0]const u8`
/// - property [primary-icon-tooltip-text](https://docs.gtk.org/gtk4/property.Entry.primary-icon-tooltip-text.html): (rw) `[*:0]const u8`
/// - property [progress-fraction](https://docs.gtk.org/gtk4/property.Entry.progress-fraction.html): (rw) `f64`
/// - property [progress-pulse-step](https://docs.gtk.org/gtk4/property.Entry.progress-pulse-step.html): (rw) `f64`
/// - property [scroll-offset](https://docs.gtk.org/gtk4/property.Entry.scroll-offset.html): (r-) `i32`
/// - property [secondary-icon-activatable](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-activatable.html): (rw) `bool`
/// - property [secondary-icon-gicon](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-gicon.html): (rw) `gio.Icon`
/// - property [secondary-icon-name](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-name.html): (rw) `[*:0]const u8`
/// - property [secondary-icon-paintable](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-paintable.html): (rw) `gdk.Paintable`
/// - property [secondary-icon-sensitive](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-sensitive.html): (rw) `bool`
/// - property [secondary-icon-storage-type](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-storage-type.html): (r-) `gtk.ImageType`
/// - property [secondary-icon-tooltip-markup](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-tooltip-markup.html): (rw) `[*:0]const u8`
/// - property [secondary-icon-tooltip-text](https://docs.gtk.org/gtk4/property.Entry.secondary-icon-tooltip-text.html): (rw) `[*:0]const u8`
/// - property [show-emoji-icon](https://docs.gtk.org/gtk4/property.Entry.show-emoji-icon.html): (rw) `bool`
/// - property [tabs](https://docs.gtk.org/gtk4/property.Entry.tabs.html): (rw) `pango.TabArray`
/// - property [text-length](https://docs.gtk.org/gtk4/property.Entry.text-length.html): (r-) `u32`
/// - property [truncate-multiline](https://docs.gtk.org/gtk4/property.Entry.truncate-multiline.html): (rw) `bool`
/// - property [visibility](https://docs.gtk.org/gtk4/property.Entry.visibility.html): (rw) `bool`
pub const Entry = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.CellEditable, gtk.ConstraintTarget, gtk.Editable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.EntryClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Entry.new.html)
    pub fn new() *Entry {
        const cFn = @extern(*const fn () callconv(.c) *Entry, .{ .name = "gtk_entry_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_buffer](https://docs.gtk.org/gtk4/ctor.Entry.new_with_buffer.html)
    pub fn newWithBuffer(_buffer: *gtk.EntryBuffer) *Entry {
        const cFn = @extern(*const fn (*gtk.EntryBuffer) callconv(.c) *Entry, .{ .name = "gtk_entry_new_with_buffer" });
        const ret = cFn(_buffer);
        return ret;
    }
    /// method [get_activates_default](https://docs.gtk.org/gtk4/method.Entry.get_activates_default.html)
    pub fn getActivatesDefault(self: *Entry) bool {
        const cFn = @extern(*const fn (*Entry) callconv(.c) bool, .{ .name = "gtk_entry_get_activates_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_alignment](https://docs.gtk.org/gtk4/method.Entry.get_alignment.html)
    pub fn getAlignment(self: *Entry) f32 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) f32, .{ .name = "gtk_entry_get_alignment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.Entry.get_attributes.html)
    pub fn getAttributes(self: *Entry) ?*pango.AttrList {
        const cFn = @extern(*const fn (*Entry) callconv(.c) ?*pango.AttrList, .{ .name = "gtk_entry_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer](https://docs.gtk.org/gtk4/method.Entry.get_buffer.html)
    pub fn getBuffer(self: *Entry) *gtk.EntryBuffer {
        const cFn = @extern(*const fn (*Entry) callconv(.c) *gtk.EntryBuffer, .{ .name = "gtk_entry_get_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_completion](https://docs.gtk.org/gtk4/method.Entry.get_completion.html)
    pub const getCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCompletion(self: *Entry) ?*gtk.EntryCompletion {
            const cFn = @extern(*const fn (*Entry) callconv(.c) ?*gtk.EntryCompletion, .{ .name = "gtk_entry_get_completion" });
            const ret = cFn(self);
            return ret;
        }
    }.getCompletion;
    /// method [get_current_icon_drag_source](https://docs.gtk.org/gtk4/method.Entry.get_current_icon_drag_source.html)
    pub fn getCurrentIconDragSource(self: *Entry) i32 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) i32, .{ .name = "gtk_entry_get_current_icon_drag_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extra_menu](https://docs.gtk.org/gtk4/method.Entry.get_extra_menu.html)
    pub fn getExtraMenu(self: *Entry) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*Entry) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_entry_get_extra_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_frame](https://docs.gtk.org/gtk4/method.Entry.get_has_frame.html)
    pub fn getHasFrame(self: *Entry) bool {
        const cFn = @extern(*const fn (*Entry) callconv(.c) bool, .{ .name = "gtk_entry_get_has_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_activatable](https://docs.gtk.org/gtk4/method.Entry.get_icon_activatable.html)
    pub fn getIconActivatable(self: *Entry, _icon_pos: gtk.EntryIconPosition) bool {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) bool, .{ .name = "gtk_entry_get_icon_activatable" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_area](https://docs.gtk.org/gtk4/method.Entry.get_icon_area.html)
    pub fn getIconArea(self: *Entry, _icon_pos: gtk.EntryIconPosition, _icon_area: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_entry_get_icon_area" });
        const ret = cFn(self, _icon_pos, _icon_area);
        return ret;
    }
    /// method [get_icon_at_pos](https://docs.gtk.org/gtk4/method.Entry.get_icon_at_pos.html)
    pub fn getIconAtPos(self: *Entry, _x: i32, _y: i32) i32 {
        const cFn = @extern(*const fn (*Entry, i32, i32) callconv(.c) i32, .{ .name = "gtk_entry_get_icon_at_pos" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    /// method [get_icon_gicon](https://docs.gtk.org/gtk4/method.Entry.get_icon_gicon.html)
    pub fn getIconGicon(self: *Entry, _icon_pos: gtk.EntryIconPosition) ?*gio.Icon {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) ?*gio.Icon, .{ .name = "gtk_entry_get_icon_gicon" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.Entry.get_icon_name.html)
    pub fn getIconName(self: *Entry, _icon_pos: gtk.EntryIconPosition) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_get_icon_name" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_paintable](https://docs.gtk.org/gtk4/method.Entry.get_icon_paintable.html)
    pub fn getIconPaintable(self: *Entry, _icon_pos: gtk.EntryIconPosition) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_entry_get_icon_paintable" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_sensitive](https://docs.gtk.org/gtk4/method.Entry.get_icon_sensitive.html)
    pub fn getIconSensitive(self: *Entry, _icon_pos: gtk.EntryIconPosition) bool {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) bool, .{ .name = "gtk_entry_get_icon_sensitive" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_storage_type](https://docs.gtk.org/gtk4/method.Entry.get_icon_storage_type.html)
    pub fn getIconStorageType(self: *Entry, _icon_pos: gtk.EntryIconPosition) gtk.ImageType {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) gtk.ImageType, .{ .name = "gtk_entry_get_icon_storage_type" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_tooltip_markup](https://docs.gtk.org/gtk4/method.Entry.get_icon_tooltip_markup.html)
    pub fn getIconTooltipMarkup(self: *Entry, _icon_pos: gtk.EntryIconPosition) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_get_icon_tooltip_markup" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_icon_tooltip_text](https://docs.gtk.org/gtk4/method.Entry.get_icon_tooltip_text.html)
    pub fn getIconTooltipText(self: *Entry, _icon_pos: gtk.EntryIconPosition) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_get_icon_tooltip_text" });
        const ret = cFn(self, _icon_pos);
        return ret;
    }
    /// method [get_input_hints](https://docs.gtk.org/gtk4/method.Entry.get_input_hints.html)
    pub fn getInputHints(self: *Entry) gtk.InputHints {
        const cFn = @extern(*const fn (*Entry) callconv(.c) gtk.InputHints, .{ .name = "gtk_entry_get_input_hints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_purpose](https://docs.gtk.org/gtk4/method.Entry.get_input_purpose.html)
    pub fn getInputPurpose(self: *Entry) gtk.InputPurpose {
        const cFn = @extern(*const fn (*Entry) callconv(.c) gtk.InputPurpose, .{ .name = "gtk_entry_get_input_purpose" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_invisible_char](https://docs.gtk.org/gtk4/method.Entry.get_invisible_char.html)
    pub fn getInvisibleChar(self: *Entry) core.Unichar {
        const cFn = @extern(*const fn (*Entry) callconv(.c) core.Unichar, .{ .name = "gtk_entry_get_invisible_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_length](https://docs.gtk.org/gtk4/method.Entry.get_max_length.html)
    pub fn getMaxLength(self: *Entry) i32 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) i32, .{ .name = "gtk_entry_get_max_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_overwrite_mode](https://docs.gtk.org/gtk4/method.Entry.get_overwrite_mode.html)
    pub fn getOverwriteMode(self: *Entry) bool {
        const cFn = @extern(*const fn (*Entry) callconv(.c) bool, .{ .name = "gtk_entry_get_overwrite_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_placeholder_text](https://docs.gtk.org/gtk4/method.Entry.get_placeholder_text.html)
    pub fn getPlaceholderText(self: *Entry) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_get_placeholder_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_progress_fraction](https://docs.gtk.org/gtk4/method.Entry.get_progress_fraction.html)
    pub fn getProgressFraction(self: *Entry) f64 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) f64, .{ .name = "gtk_entry_get_progress_fraction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_progress_pulse_step](https://docs.gtk.org/gtk4/method.Entry.get_progress_pulse_step.html)
    pub fn getProgressPulseStep(self: *Entry) f64 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) f64, .{ .name = "gtk_entry_get_progress_pulse_step" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tabs](https://docs.gtk.org/gtk4/method.Entry.get_tabs.html)
    pub fn getTabs(self: *Entry) ?*pango.TabArray {
        const cFn = @extern(*const fn (*Entry) callconv(.c) ?*pango.TabArray, .{ .name = "gtk_entry_get_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text_length](https://docs.gtk.org/gtk4/method.Entry.get_text_length.html)
    pub fn getTextLength(self: *Entry) u16 {
        const cFn = @extern(*const fn (*Entry) callconv(.c) u16, .{ .name = "gtk_entry_get_text_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visibility](https://docs.gtk.org/gtk4/method.Entry.get_visibility.html)
    pub fn getVisibility(self: *Entry) bool {
        const cFn = @extern(*const fn (*Entry) callconv(.c) bool, .{ .name = "gtk_entry_get_visibility" });
        const ret = cFn(self);
        return ret;
    }
    /// method [grab_focus_without_selecting](https://docs.gtk.org/gtk4/method.Entry.grab_focus_without_selecting.html)
    pub fn grabFocusWithoutSelecting(self: *Entry) bool {
        const cFn = @extern(*const fn (*Entry) callconv(.c) bool, .{ .name = "gtk_entry_grab_focus_without_selecting" });
        const ret = cFn(self);
        return ret;
    }
    /// method [progress_pulse](https://docs.gtk.org/gtk4/method.Entry.progress_pulse.html)
    pub fn progressPulse(self: *Entry) void {
        const cFn = @extern(*const fn (*Entry) callconv(.c) void, .{ .name = "gtk_entry_progress_pulse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset_im_context](https://docs.gtk.org/gtk4/method.Entry.reset_im_context.html)
    pub fn resetImContext(self: *Entry) void {
        const cFn = @extern(*const fn (*Entry) callconv(.c) void, .{ .name = "gtk_entry_reset_im_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_activates_default](https://docs.gtk.org/gtk4/method.Entry.set_activates_default.html)
    pub fn setActivatesDefault(self: *Entry, _setting: bool) void {
        const cFn = @extern(*const fn (*Entry, bool) callconv(.c) void, .{ .name = "gtk_entry_set_activates_default" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_alignment](https://docs.gtk.org/gtk4/method.Entry.set_alignment.html)
    pub fn setAlignment(self: *Entry, _xalign: f32) void {
        const cFn = @extern(*const fn (*Entry, f32) callconv(.c) void, .{ .name = "gtk_entry_set_alignment" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.Entry.set_attributes.html)
    pub fn setAttributes(self: *Entry, _attrs: *pango.AttrList) void {
        const cFn = @extern(*const fn (*Entry, *pango.AttrList) callconv(.c) void, .{ .name = "gtk_entry_set_attributes" });
        const ret = cFn(self, _attrs);
        return ret;
    }
    /// method [set_buffer](https://docs.gtk.org/gtk4/method.Entry.set_buffer.html)
    pub fn setBuffer(self: *Entry, _buffer: *gtk.EntryBuffer) void {
        const cFn = @extern(*const fn (*Entry, *gtk.EntryBuffer) callconv(.c) void, .{ .name = "gtk_entry_set_buffer" });
        const ret = cFn(self, _buffer);
        return ret;
    }
    /// Deprecated:
    /// method [set_completion](https://docs.gtk.org/gtk4/method.Entry.set_completion.html)
    pub const setCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCompletion(self: *Entry, _completion: ?*gtk.EntryCompletion) void {
            const cFn = @extern(*const fn (*Entry, ?*gtk.EntryCompletion) callconv(.c) void, .{ .name = "gtk_entry_set_completion" });
            const ret = cFn(self, _completion);
            return ret;
        }
    }.setCompletion;
    /// method [set_extra_menu](https://docs.gtk.org/gtk4/method.Entry.set_extra_menu.html)
    pub fn setExtraMenu(self: *Entry, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*Entry, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_entry_set_extra_menu" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_has_frame](https://docs.gtk.org/gtk4/method.Entry.set_has_frame.html)
    pub fn setHasFrame(self: *Entry, _setting: bool) void {
        const cFn = @extern(*const fn (*Entry, bool) callconv(.c) void, .{ .name = "gtk_entry_set_has_frame" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_icon_activatable](https://docs.gtk.org/gtk4/method.Entry.set_icon_activatable.html)
    pub fn setIconActivatable(self: *Entry, _icon_pos: gtk.EntryIconPosition, _activatable: bool) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, bool) callconv(.c) void, .{ .name = "gtk_entry_set_icon_activatable" });
        const ret = cFn(self, _icon_pos, _activatable);
        return ret;
    }
    /// method [set_icon_drag_source](https://docs.gtk.org/gtk4/method.Entry.set_icon_drag_source.html)
    pub fn setIconDragSource(self: *Entry, _icon_pos: gtk.EntryIconPosition, _provider: *gdk.ContentProvider, _actions: gdk.DragAction) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, *gdk.ContentProvider, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_entry_set_icon_drag_source" });
        const ret = cFn(self, _icon_pos, _provider, _actions);
        return ret;
    }
    /// method [set_icon_from_gicon](https://docs.gtk.org/gtk4/method.Entry.set_icon_from_gicon.html)
    pub fn setIconFromGicon(self: *Entry, _icon_pos: gtk.EntryIconPosition, _icon: ?*gio.Icon) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, ?*gio.Icon) callconv(.c) void, .{ .name = "gtk_entry_set_icon_from_gicon" });
        const ret = cFn(self, _icon_pos, _icon);
        return ret;
    }
    /// method [set_icon_from_icon_name](https://docs.gtk.org/gtk4/method.Entry.set_icon_from_icon_name.html)
    pub fn setIconFromIconName(self: *Entry, _icon_pos: gtk.EntryIconPosition, _icon_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_entry_set_icon_from_icon_name" });
        const ret = cFn(self, _icon_pos, _icon_name);
        return ret;
    }
    /// method [set_icon_from_paintable](https://docs.gtk.org/gtk4/method.Entry.set_icon_from_paintable.html)
    pub fn setIconFromPaintable(self: *Entry, _icon_pos: gtk.EntryIconPosition, _paintable: ?*gdk.Paintable) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, ?*gdk.Paintable) callconv(.c) void, .{ .name = "gtk_entry_set_icon_from_paintable" });
        const ret = cFn(self, _icon_pos, _paintable);
        return ret;
    }
    /// method [set_icon_sensitive](https://docs.gtk.org/gtk4/method.Entry.set_icon_sensitive.html)
    pub fn setIconSensitive(self: *Entry, _icon_pos: gtk.EntryIconPosition, _sensitive: bool) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, bool) callconv(.c) void, .{ .name = "gtk_entry_set_icon_sensitive" });
        const ret = cFn(self, _icon_pos, _sensitive);
        return ret;
    }
    /// method [set_icon_tooltip_markup](https://docs.gtk.org/gtk4/method.Entry.set_icon_tooltip_markup.html)
    pub fn setIconTooltipMarkup(self: *Entry, _icon_pos: gtk.EntryIconPosition, _tooltip: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_entry_set_icon_tooltip_markup" });
        const ret = cFn(self, _icon_pos, _tooltip);
        return ret;
    }
    /// method [set_icon_tooltip_text](https://docs.gtk.org/gtk4/method.Entry.set_icon_tooltip_text.html)
    pub fn setIconTooltipText(self: *Entry, _icon_pos: gtk.EntryIconPosition, _tooltip: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Entry, gtk.EntryIconPosition, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_entry_set_icon_tooltip_text" });
        const ret = cFn(self, _icon_pos, _tooltip);
        return ret;
    }
    /// method [set_input_hints](https://docs.gtk.org/gtk4/method.Entry.set_input_hints.html)
    pub fn setInputHints(self: *Entry, _hints: gtk.InputHints) void {
        const cFn = @extern(*const fn (*Entry, gtk.InputHints) callconv(.c) void, .{ .name = "gtk_entry_set_input_hints" });
        const ret = cFn(self, _hints);
        return ret;
    }
    /// method [set_input_purpose](https://docs.gtk.org/gtk4/method.Entry.set_input_purpose.html)
    pub fn setInputPurpose(self: *Entry, _purpose: gtk.InputPurpose) void {
        const cFn = @extern(*const fn (*Entry, gtk.InputPurpose) callconv(.c) void, .{ .name = "gtk_entry_set_input_purpose" });
        const ret = cFn(self, _purpose);
        return ret;
    }
    /// method [set_invisible_char](https://docs.gtk.org/gtk4/method.Entry.set_invisible_char.html)
    pub fn setInvisibleChar(self: *Entry, _ch: core.Unichar) void {
        const cFn = @extern(*const fn (*Entry, core.Unichar) callconv(.c) void, .{ .name = "gtk_entry_set_invisible_char" });
        const ret = cFn(self, _ch);
        return ret;
    }
    /// method [set_max_length](https://docs.gtk.org/gtk4/method.Entry.set_max_length.html)
    pub fn setMaxLength(self: *Entry, _max: i32) void {
        const cFn = @extern(*const fn (*Entry, i32) callconv(.c) void, .{ .name = "gtk_entry_set_max_length" });
        const ret = cFn(self, _max);
        return ret;
    }
    /// method [set_overwrite_mode](https://docs.gtk.org/gtk4/method.Entry.set_overwrite_mode.html)
    pub fn setOverwriteMode(self: *Entry, _overwrite: bool) void {
        const cFn = @extern(*const fn (*Entry, bool) callconv(.c) void, .{ .name = "gtk_entry_set_overwrite_mode" });
        const ret = cFn(self, _overwrite);
        return ret;
    }
    /// method [set_placeholder_text](https://docs.gtk.org/gtk4/method.Entry.set_placeholder_text.html)
    pub fn setPlaceholderText(self: *Entry, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Entry, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_entry_set_placeholder_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_progress_fraction](https://docs.gtk.org/gtk4/method.Entry.set_progress_fraction.html)
    pub fn setProgressFraction(self: *Entry, _fraction: f64) void {
        const cFn = @extern(*const fn (*Entry, f64) callconv(.c) void, .{ .name = "gtk_entry_set_progress_fraction" });
        const ret = cFn(self, _fraction);
        return ret;
    }
    /// method [set_progress_pulse_step](https://docs.gtk.org/gtk4/method.Entry.set_progress_pulse_step.html)
    pub fn setProgressPulseStep(self: *Entry, _fraction: f64) void {
        const cFn = @extern(*const fn (*Entry, f64) callconv(.c) void, .{ .name = "gtk_entry_set_progress_pulse_step" });
        const ret = cFn(self, _fraction);
        return ret;
    }
    /// method [set_tabs](https://docs.gtk.org/gtk4/method.Entry.set_tabs.html)
    pub fn setTabs(self: *Entry, _tabs: ?*pango.TabArray) void {
        const cFn = @extern(*const fn (*Entry, ?*pango.TabArray) callconv(.c) void, .{ .name = "gtk_entry_set_tabs" });
        const ret = cFn(self, _tabs);
        return ret;
    }
    /// method [set_visibility](https://docs.gtk.org/gtk4/method.Entry.set_visibility.html)
    pub fn setVisibility(self: *Entry, _visible: bool) void {
        const cFn = @extern(*const fn (*Entry, bool) callconv(.c) void, .{ .name = "gtk_entry_set_visibility" });
        const ret = cFn(self, _visible);
        return ret;
    }
    /// method [unset_invisible_char](https://docs.gtk.org/gtk4/method.Entry.unset_invisible_char.html)
    pub fn unsetInvisibleChar(self: *Entry) void {
        const cFn = @extern(*const fn (*Entry) callconv(.c) void, .{ .name = "gtk_entry_unset_invisible_char" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.Entry.activate.html)
    pub fn activateV(self: *Entry) void {
        const class: *EntryClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.Entry.activate.html)
    pub fn connectActivate(self: *Entry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Entry });
    }
    /// signal [icon-press](https://docs.gtk.org/gtk4/signal.Entry.icon-press.html)
    pub fn connectIconPress(self: *Entry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("icon-press", handler, args, flags, &.{ void, *Entry, gtk.EntryIconPosition });
    }
    /// signal [icon-release](https://docs.gtk.org/gtk4/signal.Entry.icon-release.html)
    pub fn connectIconRelease(self: *Entry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("icon-release", handler, args, flags, &.{ void, *Entry, gtk.EntryIconPosition });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_entry_get_type" });
        return cFn();
    }
};
/// Class [EntryBuffer](https://docs.gtk.org/gtk4/class.EntryBuffer.html)
/// - property [length](https://docs.gtk.org/gtk4/property.EntryBuffer.length.html): (r-) `u32`
/// - property [max-length](https://docs.gtk.org/gtk4/property.EntryBuffer.max-length.html): (rw) `i32`
/// - property [text](https://docs.gtk.org/gtk4/property.EntryBuffer.text.html): (rw) `[*:0]const u8`
pub const EntryBuffer = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.EntryBufferClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EntryBuffer.new.html)
    pub fn new(_initial_chars: ?[*:0]const u8, _n_initial_chars: i32) *EntryBuffer {
        const cFn = @extern(*const fn (?[*:0]const u8, i32) callconv(.c) *EntryBuffer, .{ .name = "gtk_entry_buffer_new" });
        const ret = cFn(_initial_chars, _n_initial_chars);
        return ret;
    }
    /// method [delete_text](https://docs.gtk.org/gtk4/method.EntryBuffer.delete_text.html)
    pub fn deleteText(self: *EntryBuffer, _position: u32, _n_chars: i32) u32 {
        const cFn = @extern(*const fn (*EntryBuffer, u32, i32) callconv(.c) u32, .{ .name = "gtk_entry_buffer_delete_text" });
        const ret = cFn(self, _position, _n_chars);
        return ret;
    }
    /// method [emit_deleted_text](https://docs.gtk.org/gtk4/method.EntryBuffer.emit_deleted_text.html)
    pub fn emitDeletedText(self: *EntryBuffer, _position: u32, _n_chars: u32) void {
        const cFn = @extern(*const fn (*EntryBuffer, u32, u32) callconv(.c) void, .{ .name = "gtk_entry_buffer_emit_deleted_text" });
        const ret = cFn(self, _position, _n_chars);
        return ret;
    }
    /// method [emit_inserted_text](https://docs.gtk.org/gtk4/method.EntryBuffer.emit_inserted_text.html)
    pub fn emitInsertedText(self: *EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: u32) void {
        const cFn = @extern(*const fn (*EntryBuffer, u32, [*:0]const u8, u32) callconv(.c) void, .{ .name = "gtk_entry_buffer_emit_inserted_text" });
        const ret = cFn(self, _position, _chars, _n_chars);
        return ret;
    }
    /// method [get_bytes](https://docs.gtk.org/gtk4/method.EntryBuffer.get_bytes.html)
    pub fn getBytes(self: *EntryBuffer) u64 {
        const cFn = @extern(*const fn (*EntryBuffer) callconv(.c) u64, .{ .name = "gtk_entry_buffer_get_bytes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/gtk4/method.EntryBuffer.get_length.html)
    pub fn getLength(self: *EntryBuffer) u32 {
        const cFn = @extern(*const fn (*EntryBuffer) callconv(.c) u32, .{ .name = "gtk_entry_buffer_get_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_length](https://docs.gtk.org/gtk4/method.EntryBuffer.get_max_length.html)
    pub fn getMaxLength(self: *EntryBuffer) i32 {
        const cFn = @extern(*const fn (*EntryBuffer) callconv(.c) i32, .{ .name = "gtk_entry_buffer_get_max_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.EntryBuffer.get_text.html)
    pub fn getText(self: *EntryBuffer) [*:0]u8 {
        const cFn = @extern(*const fn (*EntryBuffer) callconv(.c) [*:0]u8, .{ .name = "gtk_entry_buffer_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_text](https://docs.gtk.org/gtk4/method.EntryBuffer.insert_text.html)
    pub fn insertText(self: *EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: i32) u32 {
        const cFn = @extern(*const fn (*EntryBuffer, u32, [*:0]const u8, i32) callconv(.c) u32, .{ .name = "gtk_entry_buffer_insert_text" });
        const ret = cFn(self, _position, _chars, _n_chars);
        return ret;
    }
    /// method [set_max_length](https://docs.gtk.org/gtk4/method.EntryBuffer.set_max_length.html)
    pub fn setMaxLength(self: *EntryBuffer, _max_length: i32) void {
        const cFn = @extern(*const fn (*EntryBuffer, i32) callconv(.c) void, .{ .name = "gtk_entry_buffer_set_max_length" });
        const ret = cFn(self, _max_length);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.EntryBuffer.set_text.html)
    pub fn setText(self: *EntryBuffer, _chars: [*:0]const u8, _n_chars: i32) void {
        const cFn = @extern(*const fn (*EntryBuffer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_entry_buffer_set_text" });
        const ret = cFn(self, _chars, _n_chars);
        return ret;
    }
    /// vfunc [delete_text](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.delete_text.html)
    pub fn deleteTextV(self: *EntryBuffer, _position: u32, _n_chars: u32) u32 {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_text.?;
        const ret = vFn(self, _position, _n_chars);
        return ret;
    }
    /// vfunc [deleted_text](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.deleted_text.html)
    pub fn deletedTextV(self: *EntryBuffer, _position: u32, _n_chars: u32) void {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.deleted_text.?;
        const ret = vFn(self, _position, _n_chars);
        return ret;
    }
    /// vfunc [get_length](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.get_length.html)
    pub fn getLengthV(self: *EntryBuffer) u32 {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_length.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_text](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.get_text.html)
    pub fn getTextV(self: *EntryBuffer, _n_bytes: *u64) [*:0]u8 {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_text.?;
        const ret = vFn(self, _n_bytes);
        return ret;
    }
    /// vfunc [insert_text](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.insert_text.html)
    pub fn insertTextV(self: *EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: u32) u32 {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_text.?;
        const ret = vFn(self, _position, _chars, _n_chars);
        return ret;
    }
    /// vfunc [inserted_text](https://docs.gtk.org/gtk4/vfunc.EntryBuffer.inserted_text.html)
    pub fn insertedTextV(self: *EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: u32) void {
        const class: *EntryBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.inserted_text.?;
        const ret = vFn(self, _position, _chars, _n_chars);
        return ret;
    }
    /// signal [deleted-text](https://docs.gtk.org/gtk4/signal.EntryBuffer.deleted-text.html)
    pub fn connectDeletedText(self: *EntryBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("deleted-text", handler, args, flags, &.{ void, *EntryBuffer, u32, u32 });
    }
    /// signal [inserted-text](https://docs.gtk.org/gtk4/signal.EntryBuffer.inserted-text.html)
    pub fn connectInsertedText(self: *EntryBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("inserted-text", handler, args, flags, &.{ void, *EntryBuffer, u32, [*:0]const u8, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_entry_buffer_get_type" });
        return cFn();
    }
};
pub const EntryBufferClass = extern struct {
    parent_class: gobject.ObjectClass,
    inserted_text: ?*const fn (_buffer: *gtk.EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: u32) callconv(.c) void,
    deleted_text: ?*const fn (_buffer: *gtk.EntryBuffer, _position: u32, _n_chars: u32) callconv(.c) void,
    get_text: ?*const fn (_buffer: *gtk.EntryBuffer, _n_bytes: *u64) callconv(.c) [*:0]u8,
    get_length: ?*const fn (_buffer: *gtk.EntryBuffer) callconv(.c) u32,
    insert_text: ?*const fn (_buffer: *gtk.EntryBuffer, _position: u32, _chars: [*:0]const u8, _n_chars: u32) callconv(.c) u32,
    delete_text: ?*const fn (_buffer: *gtk.EntryBuffer, _position: u32, _n_chars: u32) callconv(.c) u32,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
    _gtk_reserved5: ?*anyopaque,
    _gtk_reserved6: ?*anyopaque,
    _gtk_reserved7: ?*anyopaque,
    _gtk_reserved8: ?*anyopaque,
};
pub const EntryClass = extern struct {
    parent_class: gtk.WidgetClass,
    activate: ?*const fn (_entry: *gtk.Entry) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Deprecated:
/// Class [EntryCompletion](https://docs.gtk.org/gtk4/class.EntryCompletion.html)
/// - property [cell-area](https://docs.gtk.org/gtk4/property.EntryCompletion.cell-area.html): (r-) `gtk.CellArea`
/// - property [inline-completion](https://docs.gtk.org/gtk4/property.EntryCompletion.inline-completion.html): (rw) `bool`
/// - property [inline-selection](https://docs.gtk.org/gtk4/property.EntryCompletion.inline-selection.html): (rw) `bool`
/// - property [minimum-key-length](https://docs.gtk.org/gtk4/property.EntryCompletion.minimum-key-length.html): (rw) `i32`
/// - property [model](https://docs.gtk.org/gtk4/property.EntryCompletion.model.html): (rw) `gtk.TreeModel`
/// - property [popup-completion](https://docs.gtk.org/gtk4/property.EntryCompletion.popup-completion.html): (rw) `bool`
/// - property [popup-set-width](https://docs.gtk.org/gtk4/property.EntryCompletion.popup-set-width.html): (rw) `bool`
/// - property [popup-single-match](https://docs.gtk.org/gtk4/property.EntryCompletion.popup-single-match.html): (rw) `bool`
/// - property [text-column](https://docs.gtk.org/gtk4/property.EntryCompletion.text-column.html): (rw) `i32`
pub const EntryCompletion = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.CellLayout };
    pub const Parent = gobject.Object;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EntryCompletion.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *EntryCompletion {
            const cFn = @extern(*const fn () callconv(.c) *EntryCompletion, .{ .name = "gtk_entry_completion_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_area](https://docs.gtk.org/gtk4/ctor.EntryCompletion.new_with_area.html)
    pub const newWithArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithArea(_area: *gtk.CellArea) *EntryCompletion {
            const cFn = @extern(*const fn (*gtk.CellArea) callconv(.c) *EntryCompletion, .{ .name = "gtk_entry_completion_new_with_area" });
            const ret = cFn(_area);
            return ret;
        }
    }.newWithArea;
    /// Deprecated:
    /// method [complete](https://docs.gtk.org/gtk4/method.EntryCompletion.complete.html)
    pub const complete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn complete(self: *EntryCompletion) void {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) void, .{ .name = "gtk_entry_completion_complete" });
            const ret = cFn(self);
            return ret;
        }
    }.complete;
    /// Deprecated:
    /// method [compute_prefix](https://docs.gtk.org/gtk4/method.EntryCompletion.compute_prefix.html)
    pub const computePrefix = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn computePrefix(self: *EntryCompletion, _key: [*:0]const u8) ?[*:0]u8 {
            const cFn = @extern(*const fn (*EntryCompletion, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_completion_compute_prefix" });
            const ret = cFn(self, _key);
            return ret;
        }
    }.computePrefix;
    /// Deprecated:
    /// method [get_completion_prefix](https://docs.gtk.org/gtk4/method.EntryCompletion.get_completion_prefix.html)
    pub const getCompletionPrefix = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCompletionPrefix(self: *EntryCompletion) ?[*:0]u8 {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) ?[*:0]u8, .{ .name = "gtk_entry_completion_get_completion_prefix" });
            const ret = cFn(self);
            return ret;
        }
    }.getCompletionPrefix;
    /// Deprecated:
    /// method [get_entry](https://docs.gtk.org/gtk4/method.EntryCompletion.get_entry.html)
    pub const getEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEntry(self: *EntryCompletion) *gtk.Widget {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) *gtk.Widget, .{ .name = "gtk_entry_completion_get_entry" });
            const ret = cFn(self);
            return ret;
        }
    }.getEntry;
    /// Deprecated:
    /// method [get_inline_completion](https://docs.gtk.org/gtk4/method.EntryCompletion.get_inline_completion.html)
    pub const getInlineCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getInlineCompletion(self: *EntryCompletion) bool {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) bool, .{ .name = "gtk_entry_completion_get_inline_completion" });
            const ret = cFn(self);
            return ret;
        }
    }.getInlineCompletion;
    /// Deprecated:
    /// method [get_inline_selection](https://docs.gtk.org/gtk4/method.EntryCompletion.get_inline_selection.html)
    pub const getInlineSelection = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getInlineSelection(self: *EntryCompletion) bool {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) bool, .{ .name = "gtk_entry_completion_get_inline_selection" });
            const ret = cFn(self);
            return ret;
        }
    }.getInlineSelection;
    /// Deprecated:
    /// method [get_minimum_key_length](https://docs.gtk.org/gtk4/method.EntryCompletion.get_minimum_key_length.html)
    pub const getMinimumKeyLength = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMinimumKeyLength(self: *EntryCompletion) i32 {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) i32, .{ .name = "gtk_entry_completion_get_minimum_key_length" });
            const ret = cFn(self);
            return ret;
        }
    }.getMinimumKeyLength;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.EntryCompletion.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *EntryCompletion) ?*gtk.TreeModel {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) ?*gtk.TreeModel, .{ .name = "gtk_entry_completion_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [get_popup_completion](https://docs.gtk.org/gtk4/method.EntryCompletion.get_popup_completion.html)
    pub const getPopupCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPopupCompletion(self: *EntryCompletion) bool {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) bool, .{ .name = "gtk_entry_completion_get_popup_completion" });
            const ret = cFn(self);
            return ret;
        }
    }.getPopupCompletion;
    /// Deprecated:
    /// method [get_popup_set_width](https://docs.gtk.org/gtk4/method.EntryCompletion.get_popup_set_width.html)
    pub const getPopupSetWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPopupSetWidth(self: *EntryCompletion) bool {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) bool, .{ .name = "gtk_entry_completion_get_popup_set_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getPopupSetWidth;
    /// Deprecated:
    /// method [get_popup_single_match](https://docs.gtk.org/gtk4/method.EntryCompletion.get_popup_single_match.html)
    pub const getPopupSingleMatch = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPopupSingleMatch(self: *EntryCompletion) bool {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) bool, .{ .name = "gtk_entry_completion_get_popup_single_match" });
            const ret = cFn(self);
            return ret;
        }
    }.getPopupSingleMatch;
    /// Deprecated:
    /// method [get_text_column](https://docs.gtk.org/gtk4/method.EntryCompletion.get_text_column.html)
    pub const getTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTextColumn(self: *EntryCompletion) i32 {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) i32, .{ .name = "gtk_entry_completion_get_text_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getTextColumn;
    /// Deprecated:
    /// method [insert_prefix](https://docs.gtk.org/gtk4/method.EntryCompletion.insert_prefix.html)
    pub const insertPrefix = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertPrefix(self: *EntryCompletion) void {
            const cFn = @extern(*const fn (*EntryCompletion) callconv(.c) void, .{ .name = "gtk_entry_completion_insert_prefix" });
            const ret = cFn(self);
            return ret;
        }
    }.insertPrefix;
    /// Deprecated:
    /// method [set_inline_completion](https://docs.gtk.org/gtk4/method.EntryCompletion.set_inline_completion.html)
    pub const setInlineCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setInlineCompletion(self: *EntryCompletion, _inline_completion: bool) void {
            const cFn = @extern(*const fn (*EntryCompletion, bool) callconv(.c) void, .{ .name = "gtk_entry_completion_set_inline_completion" });
            const ret = cFn(self, _inline_completion);
            return ret;
        }
    }.setInlineCompletion;
    /// Deprecated:
    /// method [set_inline_selection](https://docs.gtk.org/gtk4/method.EntryCompletion.set_inline_selection.html)
    pub const setInlineSelection = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setInlineSelection(self: *EntryCompletion, _inline_selection: bool) void {
            const cFn = @extern(*const fn (*EntryCompletion, bool) callconv(.c) void, .{ .name = "gtk_entry_completion_set_inline_selection" });
            const ret = cFn(self, _inline_selection);
            return ret;
        }
    }.setInlineSelection;
    /// Deprecated:
    /// method [set_match_func](https://docs.gtk.org/gtk4/method.EntryCompletion.set_match_func.html)
    pub const setMatchFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMatchFunc(self: *EntryCompletion, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.EntryCompletion, [*:0]const u8, *gtk.TreeIter });
            const _func: gtk.EntryCompletionMatchFunc = @ptrCast(closure_func.c_closure());
            const _func_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _func_notify: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*EntryCompletion, gtk.EntryCompletionMatchFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_entry_completion_set_match_func" });
            const ret = cFn(self, _func, @ptrCast(_func_data), _func_notify);
            return ret;
        }
    }.setMatchFunc;
    /// Deprecated:
    /// method [set_minimum_key_length](https://docs.gtk.org/gtk4/method.EntryCompletion.set_minimum_key_length.html)
    pub const setMinimumKeyLength = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMinimumKeyLength(self: *EntryCompletion, _length: i32) void {
            const cFn = @extern(*const fn (*EntryCompletion, i32) callconv(.c) void, .{ .name = "gtk_entry_completion_set_minimum_key_length" });
            const ret = cFn(self, _length);
            return ret;
        }
    }.setMinimumKeyLength;
    /// Deprecated:
    /// method [set_model](https://docs.gtk.org/gtk4/method.EntryCompletion.set_model.html)
    pub const setModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModel(self: *EntryCompletion, _model: ?*gtk.TreeModel) void {
            const cFn = @extern(*const fn (*EntryCompletion, ?*gtk.TreeModel) callconv(.c) void, .{ .name = "gtk_entry_completion_set_model" });
            const ret = cFn(self, _model);
            return ret;
        }
    }.setModel;
    /// Deprecated:
    /// method [set_popup_completion](https://docs.gtk.org/gtk4/method.EntryCompletion.set_popup_completion.html)
    pub const setPopupCompletion = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPopupCompletion(self: *EntryCompletion, _popup_completion: bool) void {
            const cFn = @extern(*const fn (*EntryCompletion, bool) callconv(.c) void, .{ .name = "gtk_entry_completion_set_popup_completion" });
            const ret = cFn(self, _popup_completion);
            return ret;
        }
    }.setPopupCompletion;
    /// Deprecated:
    /// method [set_popup_set_width](https://docs.gtk.org/gtk4/method.EntryCompletion.set_popup_set_width.html)
    pub const setPopupSetWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPopupSetWidth(self: *EntryCompletion, _popup_set_width: bool) void {
            const cFn = @extern(*const fn (*EntryCompletion, bool) callconv(.c) void, .{ .name = "gtk_entry_completion_set_popup_set_width" });
            const ret = cFn(self, _popup_set_width);
            return ret;
        }
    }.setPopupSetWidth;
    /// Deprecated:
    /// method [set_popup_single_match](https://docs.gtk.org/gtk4/method.EntryCompletion.set_popup_single_match.html)
    pub const setPopupSingleMatch = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPopupSingleMatch(self: *EntryCompletion, _popup_single_match: bool) void {
            const cFn = @extern(*const fn (*EntryCompletion, bool) callconv(.c) void, .{ .name = "gtk_entry_completion_set_popup_single_match" });
            const ret = cFn(self, _popup_single_match);
            return ret;
        }
    }.setPopupSingleMatch;
    /// Deprecated:
    /// method [set_text_column](https://docs.gtk.org/gtk4/method.EntryCompletion.set_text_column.html)
    pub const setTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTextColumn(self: *EntryCompletion, _column: i32) void {
            const cFn = @extern(*const fn (*EntryCompletion, i32) callconv(.c) void, .{ .name = "gtk_entry_completion_set_text_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setTextColumn;
    /// signal [cursor-on-match](https://docs.gtk.org/gtk4/signal.EntryCompletion.cursor-on-match.html)
    pub fn connectCursorOnMatch(self: *EntryCompletion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cursor-on-match", handler, args, flags, &.{ bool, *EntryCompletion, *gtk.TreeModel, *gtk.TreeIter });
    }
    /// signal [insert-prefix](https://docs.gtk.org/gtk4/signal.EntryCompletion.insert-prefix.html)
    pub fn connectInsertPrefix(self: *EntryCompletion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-prefix", handler, args, flags, &.{ bool, *EntryCompletion, [*:0]const u8 });
    }
    /// signal [match-selected](https://docs.gtk.org/gtk4/signal.EntryCompletion.match-selected.html)
    pub fn connectMatchSelected(self: *EntryCompletion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("match-selected", handler, args, flags, &.{ bool, *EntryCompletion, *gtk.TreeModel, *gtk.TreeIter });
    }
    /// signal [no-matches](https://docs.gtk.org/gtk4/signal.EntryCompletion.no-matches.html)
    pub fn connectNoMatches(self: *EntryCompletion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("no-matches", handler, args, flags, &.{ void, *EntryCompletion });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_entry_completion_get_type" });
        return cFn();
    }
};
/// callback [EntryCompletionMatchFunc](https://docs.gtk.org/gtk4/callback.EntryCompletionMatchFunc.html)
pub const EntryCompletionMatchFunc = *const fn (_completion: *gtk.EntryCompletion, _key: [*:0]const u8, _iter: *gtk.TreeIter, _user_data: ?*anyopaque) callconv(.c) bool;
/// Enum [EntryIconPosition](https://docs.gtk.org/gtk4/enum.EntryIconPosition.html)
pub const EntryIconPosition = enum(u32) {
    primary = 0,
    secondary = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_entry_icon_position_get_type" });
        return cFn();
    }
};
/// Class [EventController](https://docs.gtk.org/gtk4/class.EventController.html)
/// - property [name](https://docs.gtk.org/gtk4/property.EventController.name.html): (rw) `[*:0]const u8`
/// - property [propagation-limit](https://docs.gtk.org/gtk4/property.EventController.propagation-limit.html): (rw) `gtk.PropagationLimit`
/// - property [propagation-phase](https://docs.gtk.org/gtk4/property.EventController.propagation-phase.html): (rw) `gtk.PropagationPhase`
/// - property [widget](https://docs.gtk.org/gtk4/property.EventController.widget.html): (r-) `gtk.Widget`
pub const EventController = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.EventControllerClass;
    /// method [get_current_event](https://docs.gtk.org/gtk4/method.EventController.get_current_event.html)
    pub fn getCurrentEvent(self: *EventController) ?*gdk.Event {
        const cFn = @extern(*const fn (*EventController) callconv(.c) ?*gdk.Event, .{ .name = "gtk_event_controller_get_current_event" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_event_device](https://docs.gtk.org/gtk4/method.EventController.get_current_event_device.html)
    pub fn getCurrentEventDevice(self: *EventController) ?*gdk.Device {
        const cFn = @extern(*const fn (*EventController) callconv(.c) ?*gdk.Device, .{ .name = "gtk_event_controller_get_current_event_device" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_event_state](https://docs.gtk.org/gtk4/method.EventController.get_current_event_state.html)
    pub fn getCurrentEventState(self: *EventController) gdk.ModifierType {
        const cFn = @extern(*const fn (*EventController) callconv(.c) gdk.ModifierType, .{ .name = "gtk_event_controller_get_current_event_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_event_time](https://docs.gtk.org/gtk4/method.EventController.get_current_event_time.html)
    pub fn getCurrentEventTime(self: *EventController) u32 {
        const cFn = @extern(*const fn (*EventController) callconv(.c) u32, .{ .name = "gtk_event_controller_get_current_event_time" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.EventController.get_name.html)
    pub fn getName(self: *EventController) ?[*:0]u8 {
        const cFn = @extern(*const fn (*EventController) callconv(.c) ?[*:0]u8, .{ .name = "gtk_event_controller_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_propagation_limit](https://docs.gtk.org/gtk4/method.EventController.get_propagation_limit.html)
    pub fn getPropagationLimit(self: *EventController) gtk.PropagationLimit {
        const cFn = @extern(*const fn (*EventController) callconv(.c) gtk.PropagationLimit, .{ .name = "gtk_event_controller_get_propagation_limit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_propagation_phase](https://docs.gtk.org/gtk4/method.EventController.get_propagation_phase.html)
    pub fn getPropagationPhase(self: *EventController) gtk.PropagationPhase {
        const cFn = @extern(*const fn (*EventController) callconv(.c) gtk.PropagationPhase, .{ .name = "gtk_event_controller_get_propagation_phase" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_widget](https://docs.gtk.org/gtk4/method.EventController.get_widget.html)
    pub fn getWidget(self: *EventController) *gtk.Widget {
        const cFn = @extern(*const fn (*EventController) callconv(.c) *gtk.Widget, .{ .name = "gtk_event_controller_get_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/gtk4/method.EventController.reset.html)
    pub fn reset(self: *EventController) void {
        const cFn = @extern(*const fn (*EventController) callconv(.c) void, .{ .name = "gtk_event_controller_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gtk4/method.EventController.set_name.html)
    pub fn setName(self: *EventController, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*EventController, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_event_controller_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_propagation_limit](https://docs.gtk.org/gtk4/method.EventController.set_propagation_limit.html)
    pub fn setPropagationLimit(self: *EventController, _limit: gtk.PropagationLimit) void {
        const cFn = @extern(*const fn (*EventController, gtk.PropagationLimit) callconv(.c) void, .{ .name = "gtk_event_controller_set_propagation_limit" });
        const ret = cFn(self, _limit);
        return ret;
    }
    /// method [set_propagation_phase](https://docs.gtk.org/gtk4/method.EventController.set_propagation_phase.html)
    pub fn setPropagationPhase(self: *EventController, _phase: gtk.PropagationPhase) void {
        const cFn = @extern(*const fn (*EventController, gtk.PropagationPhase) callconv(.c) void, .{ .name = "gtk_event_controller_set_propagation_phase" });
        const ret = cFn(self, _phase);
        return ret;
    }
    /// method [set_static_name](https://docs.gtk.org/gtk4/method.EventController.set_static_name.html)
    pub fn setStaticName(self: *EventController, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*EventController, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_event_controller_set_static_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_get_type" });
        return cFn();
    }
};
pub const EventControllerClass = opaque {};
/// Class [EventControllerFocus](https://docs.gtk.org/gtk4/class.EventControllerFocus.html)
/// - property [contains-focus](https://docs.gtk.org/gtk4/property.EventControllerFocus.contains-focus.html): (r-) `bool`
/// - property [is-focus](https://docs.gtk.org/gtk4/property.EventControllerFocus.is-focus.html): (r-) `bool`
pub const EventControllerFocus = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.EventControllerFocusClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EventControllerFocus.new.html)
    pub fn new() *EventControllerFocus {
        const cFn = @extern(*const fn () callconv(.c) *EventControllerFocus, .{ .name = "gtk_event_controller_focus_new" });
        const ret = cFn();
        return ret;
    }
    /// method [contains_focus](https://docs.gtk.org/gtk4/method.EventControllerFocus.contains_focus.html)
    pub fn containsFocus(self: *EventControllerFocus) bool {
        const cFn = @extern(*const fn (*EventControllerFocus) callconv(.c) bool, .{ .name = "gtk_event_controller_focus_contains_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_focus](https://docs.gtk.org/gtk4/method.EventControllerFocus.is_focus.html)
    pub fn isFocus(self: *EventControllerFocus) bool {
        const cFn = @extern(*const fn (*EventControllerFocus) callconv(.c) bool, .{ .name = "gtk_event_controller_focus_is_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [enter](https://docs.gtk.org/gtk4/signal.EventControllerFocus.enter.html)
    pub fn connectEnter(self: *EventControllerFocus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enter", handler, args, flags, &.{ void, *EventControllerFocus });
    }
    /// signal [leave](https://docs.gtk.org/gtk4/signal.EventControllerFocus.leave.html)
    pub fn connectLeave(self: *EventControllerFocus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("leave", handler, args, flags, &.{ void, *EventControllerFocus });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_focus_get_type" });
        return cFn();
    }
};
pub const EventControllerFocusClass = opaque {};
/// Class [EventControllerKey](https://docs.gtk.org/gtk4/class.EventControllerKey.html)
pub const EventControllerKey = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.EventControllerKeyClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EventControllerKey.new.html)
    pub fn new() *EventControllerKey {
        const cFn = @extern(*const fn () callconv(.c) *EventControllerKey, .{ .name = "gtk_event_controller_key_new" });
        const ret = cFn();
        return ret;
    }
    /// method [forward](https://docs.gtk.org/gtk4/method.EventControllerKey.forward.html)
    pub fn forward(self: *EventControllerKey, _widget: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*EventControllerKey, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_event_controller_key_forward" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [get_group](https://docs.gtk.org/gtk4/method.EventControllerKey.get_group.html)
    pub fn getGroup(self: *EventControllerKey) u32 {
        const cFn = @extern(*const fn (*EventControllerKey) callconv(.c) u32, .{ .name = "gtk_event_controller_key_get_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_im_context](https://docs.gtk.org/gtk4/method.EventControllerKey.get_im_context.html)
    pub fn getImContext(self: *EventControllerKey) ?*gtk.IMContext {
        const cFn = @extern(*const fn (*EventControllerKey) callconv(.c) ?*gtk.IMContext, .{ .name = "gtk_event_controller_key_get_im_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_im_context](https://docs.gtk.org/gtk4/method.EventControllerKey.set_im_context.html)
    pub fn setImContext(self: *EventControllerKey, _im_context: ?*gtk.IMContext) void {
        const cFn = @extern(*const fn (*EventControllerKey, ?*gtk.IMContext) callconv(.c) void, .{ .name = "gtk_event_controller_key_set_im_context" });
        const ret = cFn(self, _im_context);
        return ret;
    }
    /// signal [im-update](https://docs.gtk.org/gtk4/signal.EventControllerKey.im-update.html)
    pub fn connectImUpdate(self: *EventControllerKey, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("im-update", handler, args, flags, &.{ void, *EventControllerKey });
    }
    /// signal [key-pressed](https://docs.gtk.org/gtk4/signal.EventControllerKey.key-pressed.html)
    pub fn connectKeyPressed(self: *EventControllerKey, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("key-pressed", handler, args, flags, &.{ bool, *EventControllerKey, u32, u32, gdk.ModifierType });
    }
    /// signal [key-released](https://docs.gtk.org/gtk4/signal.EventControllerKey.key-released.html)
    pub fn connectKeyReleased(self: *EventControllerKey, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("key-released", handler, args, flags, &.{ void, *EventControllerKey, u32, u32, gdk.ModifierType });
    }
    /// signal [modifiers](https://docs.gtk.org/gtk4/signal.EventControllerKey.modifiers.html)
    pub fn connectModifiers(self: *EventControllerKey, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("modifiers", handler, args, flags, &.{ bool, *EventControllerKey, gdk.ModifierType });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_key_get_type" });
        return cFn();
    }
};
pub const EventControllerKeyClass = opaque {};
/// Class [EventControllerLegacy](https://docs.gtk.org/gtk4/class.EventControllerLegacy.html)
pub const EventControllerLegacy = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.EventControllerLegacyClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EventControllerLegacy.new.html)
    pub fn new() *EventControllerLegacy {
        const cFn = @extern(*const fn () callconv(.c) *EventControllerLegacy, .{ .name = "gtk_event_controller_legacy_new" });
        const ret = cFn();
        return ret;
    }
    /// signal [event](https://docs.gtk.org/gtk4/signal.EventControllerLegacy.event.html)
    pub fn connectEvent(self: *EventControllerLegacy, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("event", handler, args, flags, &.{ bool, *EventControllerLegacy, *gdk.Event });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_legacy_get_type" });
        return cFn();
    }
};
pub const EventControllerLegacyClass = opaque {};
/// Class [EventControllerMotion](https://docs.gtk.org/gtk4/class.EventControllerMotion.html)
/// - property [contains-pointer](https://docs.gtk.org/gtk4/property.EventControllerMotion.contains-pointer.html): (r-) `bool`
/// - property [is-pointer](https://docs.gtk.org/gtk4/property.EventControllerMotion.is-pointer.html): (r-) `bool`
pub const EventControllerMotion = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.EventControllerMotionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EventControllerMotion.new.html)
    pub fn new() *EventControllerMotion {
        const cFn = @extern(*const fn () callconv(.c) *EventControllerMotion, .{ .name = "gtk_event_controller_motion_new" });
        const ret = cFn();
        return ret;
    }
    /// method [contains_pointer](https://docs.gtk.org/gtk4/method.EventControllerMotion.contains_pointer.html)
    pub fn containsPointer(self: *EventControllerMotion) bool {
        const cFn = @extern(*const fn (*EventControllerMotion) callconv(.c) bool, .{ .name = "gtk_event_controller_motion_contains_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_pointer](https://docs.gtk.org/gtk4/method.EventControllerMotion.is_pointer.html)
    pub fn isPointer(self: *EventControllerMotion) bool {
        const cFn = @extern(*const fn (*EventControllerMotion) callconv(.c) bool, .{ .name = "gtk_event_controller_motion_is_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [enter](https://docs.gtk.org/gtk4/signal.EventControllerMotion.enter.html)
    pub fn connectEnter(self: *EventControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enter", handler, args, flags, &.{ void, *EventControllerMotion, f64, f64 });
    }
    /// signal [leave](https://docs.gtk.org/gtk4/signal.EventControllerMotion.leave.html)
    pub fn connectLeave(self: *EventControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("leave", handler, args, flags, &.{ void, *EventControllerMotion });
    }
    /// signal [motion](https://docs.gtk.org/gtk4/signal.EventControllerMotion.motion.html)
    pub fn connectMotion(self: *EventControllerMotion, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("motion", handler, args, flags, &.{ void, *EventControllerMotion, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_motion_get_type" });
        return cFn();
    }
};
pub const EventControllerMotionClass = opaque {};
/// Class [EventControllerScroll](https://docs.gtk.org/gtk4/class.EventControllerScroll.html)
/// - property [flags](https://docs.gtk.org/gtk4/property.EventControllerScroll.flags.html): (rw) `gtk.EventControllerScrollFlags`
pub const EventControllerScroll = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.EventControllerScrollClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EventControllerScroll.new.html)
    pub fn new(_flags: gtk.EventControllerScrollFlags) *EventControllerScroll {
        const cFn = @extern(*const fn (gtk.EventControllerScrollFlags) callconv(.c) *EventControllerScroll, .{ .name = "gtk_event_controller_scroll_new" });
        const ret = cFn(_flags);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gtk4/method.EventControllerScroll.get_flags.html)
    pub fn getFlags(self: *EventControllerScroll) gtk.EventControllerScrollFlags {
        const cFn = @extern(*const fn (*EventControllerScroll) callconv(.c) gtk.EventControllerScrollFlags, .{ .name = "gtk_event_controller_scroll_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_unit](https://docs.gtk.org/gtk4/method.EventControllerScroll.get_unit.html)
    pub fn getUnit(self: *EventControllerScroll) gdk.ScrollUnit {
        const cFn = @extern(*const fn (*EventControllerScroll) callconv(.c) gdk.ScrollUnit, .{ .name = "gtk_event_controller_scroll_get_unit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gtk4/method.EventControllerScroll.set_flags.html)
    pub fn setFlags(self: *EventControllerScroll, _flags: gtk.EventControllerScrollFlags) void {
        const cFn = @extern(*const fn (*EventControllerScroll, gtk.EventControllerScrollFlags) callconv(.c) void, .{ .name = "gtk_event_controller_scroll_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// signal [decelerate](https://docs.gtk.org/gtk4/signal.EventControllerScroll.decelerate.html)
    pub fn connectDecelerate(self: *EventControllerScroll, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("decelerate", handler, args, flags, &.{ void, *EventControllerScroll, f64, f64 });
    }
    /// signal [scroll](https://docs.gtk.org/gtk4/signal.EventControllerScroll.scroll.html)
    pub fn connectScroll(self: *EventControllerScroll, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("scroll", handler, args, flags, &.{ bool, *EventControllerScroll, f64, f64 });
    }
    /// signal [scroll-begin](https://docs.gtk.org/gtk4/signal.EventControllerScroll.scroll-begin.html)
    pub fn connectScrollBegin(self: *EventControllerScroll, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("scroll-begin", handler, args, flags, &.{ void, *EventControllerScroll });
    }
    /// signal [scroll-end](https://docs.gtk.org/gtk4/signal.EventControllerScroll.scroll-end.html)
    pub fn connectScrollEnd(self: *EventControllerScroll, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("scroll-end", handler, args, flags, &.{ void, *EventControllerScroll });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_scroll_get_type" });
        return cFn();
    }
};
pub const EventControllerScrollClass = opaque {};
/// Flags [EventControllerScrollFlags](https://docs.gtk.org/gtk4/flags.EventControllerScrollFlags.html)
pub const EventControllerScrollFlags = packed struct(u32) {
    vertical: bool = false,
    horizontal: bool = false,
    discrete: bool = false,
    kinetic: bool = false,
    _: u28 = 0,
    pub const both_axes: @This() = @bitCast(@as(u32, 3));
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_controller_scroll_flags_get_type" });
        return cFn();
    }
};
/// Enum [EventSequenceState](https://docs.gtk.org/gtk4/enum.EventSequenceState.html)
pub const EventSequenceState = enum(u32) {
    none = 0,
    claimed = 1,
    denied = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_event_sequence_state_get_type" });
        return cFn();
    }
};
/// Class [EveryFilter](https://docs.gtk.org/gtk4/class.EveryFilter.html)
pub const EveryFilter = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gtk.MultiFilter;
    pub const Class = gtk.EveryFilterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.EveryFilter.new.html)
    pub fn new() *EveryFilter {
        const cFn = @extern(*const fn () callconv(.c) *EveryFilter, .{ .name = "gtk_every_filter_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_every_filter_get_type" });
        return cFn();
    }
};
pub const EveryFilterClass = opaque {};
/// Class [Expander](https://docs.gtk.org/gtk4/class.Expander.html)
/// - property [child](https://docs.gtk.org/gtk4/property.Expander.child.html): (rw) `gtk.Widget`
/// - property [expanded](https://docs.gtk.org/gtk4/property.Expander.expanded.html): (rw) `bool`
/// - property [label](https://docs.gtk.org/gtk4/property.Expander.label.html): (rw) `[*:0]const u8`
/// - property [label-widget](https://docs.gtk.org/gtk4/property.Expander.label-widget.html): (rw) `gtk.Widget`
/// - property [resize-toplevel](https://docs.gtk.org/gtk4/property.Expander.resize-toplevel.html): (rw) `bool`
/// - property [use-markup](https://docs.gtk.org/gtk4/property.Expander.use-markup.html): (rw) `bool`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.Expander.use-underline.html): (rw) `bool`
pub const Expander = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Expander.new.html)
    pub fn new(_label: ?[*:0]const u8) *Expander {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Expander, .{ .name = "gtk_expander_new" });
        const ret = cFn(_label);
        return ret;
    }
    /// ctor [new_with_mnemonic](https://docs.gtk.org/gtk4/ctor.Expander.new_with_mnemonic.html)
    pub fn newWithMnemonic(_label: ?[*:0]const u8) *Expander {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Expander, .{ .name = "gtk_expander_new_with_mnemonic" });
        const ret = cFn(_label);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Expander.get_child.html)
    pub fn getChild(self: *Expander) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Expander) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_expander_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_expanded](https://docs.gtk.org/gtk4/method.Expander.get_expanded.html)
    pub fn getExpanded(self: *Expander) bool {
        const cFn = @extern(*const fn (*Expander) callconv(.c) bool, .{ .name = "gtk_expander_get_expanded" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.Expander.get_label.html)
    pub fn getLabel(self: *Expander) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Expander) callconv(.c) ?[*:0]u8, .{ .name = "gtk_expander_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label_widget](https://docs.gtk.org/gtk4/method.Expander.get_label_widget.html)
    pub fn getLabelWidget(self: *Expander) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Expander) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_expander_get_label_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resize_toplevel](https://docs.gtk.org/gtk4/method.Expander.get_resize_toplevel.html)
    pub fn getResizeToplevel(self: *Expander) bool {
        const cFn = @extern(*const fn (*Expander) callconv(.c) bool, .{ .name = "gtk_expander_get_resize_toplevel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_markup](https://docs.gtk.org/gtk4/method.Expander.get_use_markup.html)
    pub fn getUseMarkup(self: *Expander) bool {
        const cFn = @extern(*const fn (*Expander) callconv(.c) bool, .{ .name = "gtk_expander_get_use_markup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.Expander.get_use_underline.html)
    pub fn getUseUnderline(self: *Expander) bool {
        const cFn = @extern(*const fn (*Expander) callconv(.c) bool, .{ .name = "gtk_expander_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Expander.set_child.html)
    pub fn setChild(self: *Expander, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Expander, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_expander_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_expanded](https://docs.gtk.org/gtk4/method.Expander.set_expanded.html)
    pub fn setExpanded(self: *Expander, _expanded: bool) void {
        const cFn = @extern(*const fn (*Expander, bool) callconv(.c) void, .{ .name = "gtk_expander_set_expanded" });
        const ret = cFn(self, _expanded);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.Expander.set_label.html)
    pub fn setLabel(self: *Expander, _label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Expander, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_expander_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_label_widget](https://docs.gtk.org/gtk4/method.Expander.set_label_widget.html)
    pub fn setLabelWidget(self: *Expander, _label_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Expander, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_expander_set_label_widget" });
        const ret = cFn(self, _label_widget);
        return ret;
    }
    /// method [set_resize_toplevel](https://docs.gtk.org/gtk4/method.Expander.set_resize_toplevel.html)
    pub fn setResizeToplevel(self: *Expander, _resize_toplevel: bool) void {
        const cFn = @extern(*const fn (*Expander, bool) callconv(.c) void, .{ .name = "gtk_expander_set_resize_toplevel" });
        const ret = cFn(self, _resize_toplevel);
        return ret;
    }
    /// method [set_use_markup](https://docs.gtk.org/gtk4/method.Expander.set_use_markup.html)
    pub fn setUseMarkup(self: *Expander, _use_markup: bool) void {
        const cFn = @extern(*const fn (*Expander, bool) callconv(.c) void, .{ .name = "gtk_expander_set_use_markup" });
        const ret = cFn(self, _use_markup);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.Expander.set_use_underline.html)
    pub fn setUseUnderline(self: *Expander, _use_underline: bool) void {
        const cFn = @extern(*const fn (*Expander, bool) callconv(.c) void, .{ .name = "gtk_expander_set_use_underline" });
        const ret = cFn(self, _use_underline);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.Expander.activate.html)
    pub fn connectActivate(self: *Expander, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Expander });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_expander_get_type" });
        return cFn();
    }
};
/// Class [Expression](https://docs.gtk.org/gtk4/class.Expression.html)
pub const Expression = opaque {
    /// method [bind](https://docs.gtk.org/gtk4/method.Expression.bind.html)
    pub fn bind(self: *Expression, _target: *gobject.Object, _property: [*:0]const u8, _this_: ?*gobject.Object) *gtk.ExpressionWatch {
        const cFn = @extern(*const fn (*Expression, *gobject.Object, [*:0]const u8, ?*gobject.Object) callconv(.c) *gtk.ExpressionWatch, .{ .name = "gtk_expression_bind" });
        const ret = cFn(self, _target, _property, _this_);
        return ret;
    }
    /// method [evaluate](https://docs.gtk.org/gtk4/method.Expression.evaluate.html)
    pub fn evaluate(self: *Expression, _this_: ?*gobject.Object, _value: *gobject.Value) bool {
        const cFn = @extern(*const fn (*Expression, ?*gobject.Object, *gobject.Value) callconv(.c) bool, .{ .name = "gtk_expression_evaluate" });
        const ret = cFn(self, _this_, _value);
        return ret;
    }
    /// method [get_value_type](https://docs.gtk.org/gtk4/method.Expression.get_value_type.html)
    pub fn getValueType(self: *Expression) core.Type {
        const cFn = @extern(*const fn (*Expression) callconv(.c) core.Type, .{ .name = "gtk_expression_get_value_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_static](https://docs.gtk.org/gtk4/method.Expression.is_static.html)
    pub fn isStatic(self: *Expression) bool {
        const cFn = @extern(*const fn (*Expression) callconv(.c) bool, .{ .name = "gtk_expression_is_static" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.Expression.ref.html)
    pub fn ref(self: *Expression) *gtk.Expression {
        const cFn = @extern(*const fn (*Expression) callconv(.c) *gtk.Expression, .{ .name = "gtk_expression_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.Expression.unref.html)
    pub fn unref(self: *Expression) void {
        const cFn = @extern(*const fn (*Expression) callconv(.c) void, .{ .name = "gtk_expression_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [watch](https://docs.gtk.org/gtk4/method.Expression.watch.html)
    pub fn watch(self: *Expression, _this_: ?*gobject.Object, notify: anytype, notify_args: anytype) *gtk.ExpressionWatch {
        var closure_notify = core.zig_closure(notify, notify_args, &.{void});
        const _notify: gtk.ExpressionNotify = @ptrCast(closure_notify.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_notify.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_notify.c_destroy());
        const cFn = @extern(*const fn (*Expression, ?*gobject.Object, gtk.ExpressionNotify, ?*anyopaque, glib.DestroyNotify) callconv(.c) *gtk.ExpressionWatch, .{ .name = "gtk_expression_watch" });
        const ret = cFn(self, _this_, _notify, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_expression_get_type" });
        return cFn();
    }
};
/// callback [ExpressionNotify](https://docs.gtk.org/gtk4/callback.ExpressionNotify.html)
pub const ExpressionNotify = *const fn (_user_data: ?*anyopaque) callconv(.c) void;
/// Struct [ExpressionWatch](https://docs.gtk.org/gtk4/struct.ExpressionWatch.html)
pub const ExpressionWatch = opaque {
    /// method [evaluate](https://docs.gtk.org/gtk4/method.ExpressionWatch.evaluate.html)
    pub fn evaluate(self: *ExpressionWatch, _value: *gobject.Value) bool {
        const cFn = @extern(*const fn (*ExpressionWatch, *gobject.Value) callconv(.c) bool, .{ .name = "gtk_expression_watch_evaluate" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.ExpressionWatch.ref.html)
    pub fn ref(self: *ExpressionWatch) *gtk.ExpressionWatch {
        const cFn = @extern(*const fn (*ExpressionWatch) callconv(.c) *gtk.ExpressionWatch, .{ .name = "gtk_expression_watch_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.ExpressionWatch.unref.html)
    pub fn unref(self: *ExpressionWatch) void {
        const cFn = @extern(*const fn (*ExpressionWatch) callconv(.c) void, .{ .name = "gtk_expression_watch_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unwatch](https://docs.gtk.org/gtk4/method.ExpressionWatch.unwatch.html)
    pub fn unwatch(self: *ExpressionWatch) void {
        const cFn = @extern(*const fn (*ExpressionWatch) callconv(.c) void, .{ .name = "gtk_expression_watch_unwatch" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_expression_watch_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Iface [FileChooser](https://docs.gtk.org/gtk4/iface.FileChooser.html)
/// - property [action](https://docs.gtk.org/gtk4/property.FileChooser.action.html): (rw) `gtk.FileChooserAction`
/// - property [create-folders](https://docs.gtk.org/gtk4/property.FileChooser.create-folders.html): (rw) `bool`
/// - property [filter](https://docs.gtk.org/gtk4/property.FileChooser.filter.html): (rw) `gtk.FileFilter`
/// - property [filters](https://docs.gtk.org/gtk4/property.FileChooser.filters.html): (r-) `gio.ListModel`
/// - property [select-multiple](https://docs.gtk.org/gtk4/property.FileChooser.select-multiple.html): (rw) `bool`
/// - property [shortcut-folders](https://docs.gtk.org/gtk4/property.FileChooser.shortcut-folders.html): (r-) `gio.ListModel`
pub const FileChooser = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [add_choice](https://docs.gtk.org/gtk4/method.FileChooser.add_choice.html)
    pub const addChoice = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addChoice(self: *FileChooser, _id: [*:0]const u8, _label: [*:0]const u8, _options: ?[*:null]?[*:0]const u8, _option_labels: ?[*:null]?[*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooser, [*:0]const u8, [*:0]const u8, ?[*:null]?[*:0]const u8, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_add_choice" });
            const ret = cFn(self, _id, _label, _options, _option_labels);
            return ret;
        }
    }.addChoice;
    /// Deprecated:
    /// method [add_filter](https://docs.gtk.org/gtk4/method.FileChooser.add_filter.html)
    pub const addFilter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addFilter(self: *FileChooser, _filter: *gtk.FileFilter) void {
            const cFn = @extern(*const fn (*FileChooser, *gtk.FileFilter) callconv(.c) void, .{ .name = "gtk_file_chooser_add_filter" });
            const ret = cFn(self, _filter);
            return ret;
        }
    }.addFilter;
    /// Deprecated:
    /// method [add_shortcut_folder](https://docs.gtk.org/gtk4/method.FileChooser.add_shortcut_folder.html)
    pub const addShortcutFolder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addShortcutFolder(self: *FileChooser, _folder: *gio.File, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*FileChooser, *gio.File, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_chooser_add_shortcut_folder" });
            const ret = cFn(self, _folder, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.addShortcutFolder;
    /// Deprecated:
    /// method [get_action](https://docs.gtk.org/gtk4/method.FileChooser.get_action.html)
    pub const getAction = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAction(self: *FileChooser) gtk.FileChooserAction {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) gtk.FileChooserAction, .{ .name = "gtk_file_chooser_get_action" });
            const ret = cFn(self);
            return ret;
        }
    }.getAction;
    /// Deprecated:
    /// method [get_choice](https://docs.gtk.org/gtk4/method.FileChooser.get_choice.html)
    pub const getChoice = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getChoice(self: *FileChooser, _id: [*:0]const u8) ?[*:0]u8 {
            const cFn = @extern(*const fn (*FileChooser, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_chooser_get_choice" });
            const ret = cFn(self, _id);
            return ret;
        }
    }.getChoice;
    /// Deprecated:
    /// method [get_create_folders](https://docs.gtk.org/gtk4/method.FileChooser.get_create_folders.html)
    pub const getCreateFolders = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCreateFolders(self: *FileChooser) bool {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) bool, .{ .name = "gtk_file_chooser_get_create_folders" });
            const ret = cFn(self);
            return ret;
        }
    }.getCreateFolders;
    /// Deprecated:
    /// method [get_current_folder](https://docs.gtk.org/gtk4/method.FileChooser.get_current_folder.html)
    pub const getCurrentFolder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCurrentFolder(self: *FileChooser) ?*gio.File {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) ?*gio.File, .{ .name = "gtk_file_chooser_get_current_folder" });
            const ret = cFn(self);
            return ret;
        }
    }.getCurrentFolder;
    /// Deprecated:
    /// method [get_current_name](https://docs.gtk.org/gtk4/method.FileChooser.get_current_name.html)
    pub const getCurrentName = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCurrentName(self: *FileChooser) ?[*:0]u8 {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_chooser_get_current_name" });
            const ret = cFn(self);
            return ret;
        }
    }.getCurrentName;
    /// Deprecated:
    /// method [get_file](https://docs.gtk.org/gtk4/method.FileChooser.get_file.html)
    pub const getFile = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFile(self: *FileChooser) ?*gio.File {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) ?*gio.File, .{ .name = "gtk_file_chooser_get_file" });
            const ret = cFn(self);
            return ret;
        }
    }.getFile;
    /// Deprecated:
    /// method [get_files](https://docs.gtk.org/gtk4/method.FileChooser.get_files.html)
    pub const getFiles = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFiles(self: *FileChooser) *gio.ListModel {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) *gio.ListModel, .{ .name = "gtk_file_chooser_get_files" });
            const ret = cFn(self);
            return ret;
        }
    }.getFiles;
    /// Deprecated:
    /// method [get_filter](https://docs.gtk.org/gtk4/method.FileChooser.get_filter.html)
    pub const getFilter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFilter(self: *FileChooser) ?*gtk.FileFilter {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) ?*gtk.FileFilter, .{ .name = "gtk_file_chooser_get_filter" });
            const ret = cFn(self);
            return ret;
        }
    }.getFilter;
    /// Deprecated:
    /// method [get_filters](https://docs.gtk.org/gtk4/method.FileChooser.get_filters.html)
    pub const getFilters = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFilters(self: *FileChooser) *gio.ListModel {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) *gio.ListModel, .{ .name = "gtk_file_chooser_get_filters" });
            const ret = cFn(self);
            return ret;
        }
    }.getFilters;
    /// Deprecated:
    /// method [get_select_multiple](https://docs.gtk.org/gtk4/method.FileChooser.get_select_multiple.html)
    pub const getSelectMultiple = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelectMultiple(self: *FileChooser) bool {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) bool, .{ .name = "gtk_file_chooser_get_select_multiple" });
            const ret = cFn(self);
            return ret;
        }
    }.getSelectMultiple;
    /// Deprecated:
    /// method [get_shortcut_folders](https://docs.gtk.org/gtk4/method.FileChooser.get_shortcut_folders.html)
    pub const getShortcutFolders = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShortcutFolders(self: *FileChooser) *gio.ListModel {
            const cFn = @extern(*const fn (*FileChooser) callconv(.c) *gio.ListModel, .{ .name = "gtk_file_chooser_get_shortcut_folders" });
            const ret = cFn(self);
            return ret;
        }
    }.getShortcutFolders;
    /// Deprecated:
    /// method [remove_choice](https://docs.gtk.org/gtk4/method.FileChooser.remove_choice.html)
    pub const removeChoice = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeChoice(self: *FileChooser, _id: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooser, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_remove_choice" });
            const ret = cFn(self, _id);
            return ret;
        }
    }.removeChoice;
    /// Deprecated:
    /// method [remove_filter](https://docs.gtk.org/gtk4/method.FileChooser.remove_filter.html)
    pub const removeFilter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeFilter(self: *FileChooser, _filter: *gtk.FileFilter) void {
            const cFn = @extern(*const fn (*FileChooser, *gtk.FileFilter) callconv(.c) void, .{ .name = "gtk_file_chooser_remove_filter" });
            const ret = cFn(self, _filter);
            return ret;
        }
    }.removeFilter;
    /// Deprecated:
    /// method [remove_shortcut_folder](https://docs.gtk.org/gtk4/method.FileChooser.remove_shortcut_folder.html)
    pub const removeShortcutFolder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeShortcutFolder(self: *FileChooser, _folder: *gio.File, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*FileChooser, *gio.File, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_chooser_remove_shortcut_folder" });
            const ret = cFn(self, _folder, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.removeShortcutFolder;
    /// Deprecated:
    /// method [set_action](https://docs.gtk.org/gtk4/method.FileChooser.set_action.html)
    pub const setAction = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAction(self: *FileChooser, _action: gtk.FileChooserAction) void {
            const cFn = @extern(*const fn (*FileChooser, gtk.FileChooserAction) callconv(.c) void, .{ .name = "gtk_file_chooser_set_action" });
            const ret = cFn(self, _action);
            return ret;
        }
    }.setAction;
    /// Deprecated:
    /// method [set_choice](https://docs.gtk.org/gtk4/method.FileChooser.set_choice.html)
    pub const setChoice = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setChoice(self: *FileChooser, _id: [*:0]const u8, _option: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooser, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_set_choice" });
            const ret = cFn(self, _id, _option);
            return ret;
        }
    }.setChoice;
    /// Deprecated:
    /// method [set_create_folders](https://docs.gtk.org/gtk4/method.FileChooser.set_create_folders.html)
    pub const setCreateFolders = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCreateFolders(self: *FileChooser, _create_folders: bool) void {
            const cFn = @extern(*const fn (*FileChooser, bool) callconv(.c) void, .{ .name = "gtk_file_chooser_set_create_folders" });
            const ret = cFn(self, _create_folders);
            return ret;
        }
    }.setCreateFolders;
    /// Deprecated:
    /// method [set_current_folder](https://docs.gtk.org/gtk4/method.FileChooser.set_current_folder.html)
    pub const setCurrentFolder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCurrentFolder(self: *FileChooser, _file: ?*gio.File, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*FileChooser, ?*gio.File, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_chooser_set_current_folder" });
            const ret = cFn(self, _file, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.setCurrentFolder;
    /// Deprecated:
    /// method [set_current_name](https://docs.gtk.org/gtk4/method.FileChooser.set_current_name.html)
    pub const setCurrentName = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCurrentName(self: *FileChooser, _name: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooser, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_set_current_name" });
            const ret = cFn(self, _name);
            return ret;
        }
    }.setCurrentName;
    /// Deprecated:
    /// method [set_file](https://docs.gtk.org/gtk4/method.FileChooser.set_file.html)
    pub const setFile = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFile(self: *FileChooser, _file: *gio.File, _error: *?*core.Error) error{GError}!bool {
            const cFn = @extern(*const fn (*FileChooser, *gio.File, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_chooser_set_file" });
            const ret = cFn(self, _file, _error);
            if (_error.* != null) return error.GError;
            return ret;
        }
    }.setFile;
    /// Deprecated:
    /// method [set_filter](https://docs.gtk.org/gtk4/method.FileChooser.set_filter.html)
    pub const setFilter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFilter(self: *FileChooser, _filter: *gtk.FileFilter) void {
            const cFn = @extern(*const fn (*FileChooser, *gtk.FileFilter) callconv(.c) void, .{ .name = "gtk_file_chooser_set_filter" });
            const ret = cFn(self, _filter);
            return ret;
        }
    }.setFilter;
    /// Deprecated:
    /// method [set_select_multiple](https://docs.gtk.org/gtk4/method.FileChooser.set_select_multiple.html)
    pub const setSelectMultiple = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSelectMultiple(self: *FileChooser, _select_multiple: bool) void {
            const cFn = @extern(*const fn (*FileChooser, bool) callconv(.c) void, .{ .name = "gtk_file_chooser_set_select_multiple" });
            const ret = cFn(self, _select_multiple);
            return ret;
        }
    }.setSelectMultiple;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_get_type" });
        return cFn();
    }
};
/// Enum [FileChooserAction](https://docs.gtk.org/gtk4/enum.FileChooserAction.html)
pub const FileChooserAction = enum(u32) {
    open = 0,
    save = 1,
    select_folder = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_action_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [FileChooserDialog](https://docs.gtk.org/gtk4/class.FileChooserDialog.html)
pub const FileChooserDialog = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.FileChooser, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_dialog_get_type" });
        return cFn();
    }
};
/// Error [FileChooserError](https://docs.gtk.org/gtk4/error.FileChooserError.html)
pub const FileChooserError = enum(u32) {
    nonexistent = 0,
    bad_filename = 1,
    already_exists = 2,
    incomplete_hostname = 3,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.FileChooserError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_file_chooser_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_error_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [FileChooserNative](https://docs.gtk.org/gtk4/class.FileChooserNative.html)
/// - property [accept-label](https://docs.gtk.org/gtk4/property.FileChooserNative.accept-label.html): (rw) `[*:0]const u8`
/// - property [cancel-label](https://docs.gtk.org/gtk4/property.FileChooserNative.cancel-label.html): (rw) `[*:0]const u8`
pub const FileChooserNative = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{gtk.FileChooser};
    pub const Parent = gtk.NativeDialog;
    pub const Class = gtk.FileChooserNativeClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FileChooserNative.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_title: ?[*:0]const u8, _parent: ?*gtk.Window, _action: gtk.FileChooserAction, _accept_label: ?[*:0]const u8, _cancel_label: ?[*:0]const u8) *FileChooserNative {
            const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.Window, gtk.FileChooserAction, ?[*:0]const u8, ?[*:0]const u8) callconv(.c) *FileChooserNative, .{ .name = "gtk_file_chooser_native_new" });
            const ret = cFn(_title, _parent, _action, _accept_label, _cancel_label);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_accept_label](https://docs.gtk.org/gtk4/method.FileChooserNative.get_accept_label.html)
    pub const getAcceptLabel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAcceptLabel(self: *FileChooserNative) ?[*:0]u8 {
            const cFn = @extern(*const fn (*FileChooserNative) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_chooser_native_get_accept_label" });
            const ret = cFn(self);
            return ret;
        }
    }.getAcceptLabel;
    /// Deprecated:
    /// method [get_cancel_label](https://docs.gtk.org/gtk4/method.FileChooserNative.get_cancel_label.html)
    pub const getCancelLabel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCancelLabel(self: *FileChooserNative) ?[*:0]u8 {
            const cFn = @extern(*const fn (*FileChooserNative) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_chooser_native_get_cancel_label" });
            const ret = cFn(self);
            return ret;
        }
    }.getCancelLabel;
    /// Deprecated:
    /// method [set_accept_label](https://docs.gtk.org/gtk4/method.FileChooserNative.set_accept_label.html)
    pub const setAcceptLabel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAcceptLabel(self: *FileChooserNative, _accept_label: ?[*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooserNative, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_native_set_accept_label" });
            const ret = cFn(self, _accept_label);
            return ret;
        }
    }.setAcceptLabel;
    /// Deprecated:
    /// method [set_cancel_label](https://docs.gtk.org/gtk4/method.FileChooserNative.set_cancel_label.html)
    pub const setCancelLabel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCancelLabel(self: *FileChooserNative, _cancel_label: ?[*:0]const u8) void {
            const cFn = @extern(*const fn (*FileChooserNative, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_chooser_native_set_cancel_label" });
            const ret = cFn(self, _cancel_label);
            return ret;
        }
    }.setCancelLabel;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_native_get_type" });
        return cFn();
    }
};
pub const FileChooserNativeClass = extern struct {
    parent_class: gtk.NativeDialogClass,
};
/// Deprecated:
/// Class [FileChooserWidget](https://docs.gtk.org/gtk4/class.FileChooserWidget.html)
/// - property [search-mode](https://docs.gtk.org/gtk4/property.FileChooserWidget.search-mode.html): (rw) `bool`
/// - property [show-time](https://docs.gtk.org/gtk4/property.FileChooserWidget.show-time.html): (r-) `bool`
/// - property [subtitle](https://docs.gtk.org/gtk4/property.FileChooserWidget.subtitle.html): (r-) `[*:0]const u8`
pub const FileChooserWidget = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.FileChooser };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FileChooserWidget.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_action: gtk.FileChooserAction) *FileChooserWidget {
            const cFn = @extern(*const fn (gtk.FileChooserAction) callconv(.c) *FileChooserWidget, .{ .name = "gtk_file_chooser_widget_new" });
            const ret = cFn(_action);
            return ret;
        }
    }.new;
    /// signal [desktop-folder](https://docs.gtk.org/gtk4/signal.FileChooserWidget.desktop-folder.html)
    pub fn connectDesktopFolder(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("desktop-folder", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [down-folder](https://docs.gtk.org/gtk4/signal.FileChooserWidget.down-folder.html)
    pub fn connectDownFolder(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("down-folder", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [home-folder](https://docs.gtk.org/gtk4/signal.FileChooserWidget.home-folder.html)
    pub fn connectHomeFolder(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("home-folder", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [location-popup](https://docs.gtk.org/gtk4/signal.FileChooserWidget.location-popup.html)
    pub fn connectLocationPopup(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("location-popup", handler, args, flags, &.{ void, *FileChooserWidget, [*:0]const u8 });
    }
    /// signal [location-popup-on-paste](https://docs.gtk.org/gtk4/signal.FileChooserWidget.location-popup-on-paste.html)
    pub fn connectLocationPopupOnPaste(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("location-popup-on-paste", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [location-toggle-popup](https://docs.gtk.org/gtk4/signal.FileChooserWidget.location-toggle-popup.html)
    pub fn connectLocationTogglePopup(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("location-toggle-popup", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [places-shortcut](https://docs.gtk.org/gtk4/signal.FileChooserWidget.places-shortcut.html)
    pub fn connectPlacesShortcut(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("places-shortcut", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [quick-bookmark](https://docs.gtk.org/gtk4/signal.FileChooserWidget.quick-bookmark.html)
    pub fn connectQuickBookmark(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("quick-bookmark", handler, args, flags, &.{ void, *FileChooserWidget, i32 });
    }
    /// signal [recent-shortcut](https://docs.gtk.org/gtk4/signal.FileChooserWidget.recent-shortcut.html)
    pub fn connectRecentShortcut(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("recent-shortcut", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [search-shortcut](https://docs.gtk.org/gtk4/signal.FileChooserWidget.search-shortcut.html)
    pub fn connectSearchShortcut(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("search-shortcut", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [show-hidden](https://docs.gtk.org/gtk4/signal.FileChooserWidget.show-hidden.html)
    pub fn connectShowHidden(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("show-hidden", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    /// signal [up-folder](https://docs.gtk.org/gtk4/signal.FileChooserWidget.up-folder.html)
    pub fn connectUpFolder(self: *FileChooserWidget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("up-folder", handler, args, flags, &.{ void, *FileChooserWidget });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_chooser_widget_get_type" });
        return cFn();
    }
};
/// Class [FileDialog](https://docs.gtk.org/gtk4/class.FileDialog.html)
/// - property [accept-label](https://docs.gtk.org/gtk4/property.FileDialog.accept-label.html): (rw) `[*:0]const u8`
/// - property [default-filter](https://docs.gtk.org/gtk4/property.FileDialog.default-filter.html): (rw) `gtk.FileFilter`
/// - property [filters](https://docs.gtk.org/gtk4/property.FileDialog.filters.html): (rw) `gio.ListModel`
/// - property [initial-file](https://docs.gtk.org/gtk4/property.FileDialog.initial-file.html): (rw) `gio.File`
/// - property [initial-folder](https://docs.gtk.org/gtk4/property.FileDialog.initial-folder.html): (rw) `gio.File`
/// - property [initial-name](https://docs.gtk.org/gtk4/property.FileDialog.initial-name.html): (rw) `[*:0]const u8`
/// - property [modal](https://docs.gtk.org/gtk4/property.FileDialog.modal.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.FileDialog.title.html): (rw) `[*:0]const u8`
pub const FileDialog = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.FileDialogClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FileDialog.new.html)
    pub fn new() *FileDialog {
        const cFn = @extern(*const fn () callconv(.c) *FileDialog, .{ .name = "gtk_file_dialog_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_accept_label](https://docs.gtk.org/gtk4/method.FileDialog.get_accept_label.html)
    pub fn getAcceptLabel(self: *FileDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_dialog_get_accept_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_filter](https://docs.gtk.org/gtk4/method.FileDialog.get_default_filter.html)
    pub fn getDefaultFilter(self: *FileDialog) ?*gtk.FileFilter {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?*gtk.FileFilter, .{ .name = "gtk_file_dialog_get_default_filter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_filters](https://docs.gtk.org/gtk4/method.FileDialog.get_filters.html)
    pub fn getFilters(self: *FileDialog) ?*gio.ListModel {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_file_dialog_get_filters" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_initial_file](https://docs.gtk.org/gtk4/method.FileDialog.get_initial_file.html)
    pub fn getInitialFile(self: *FileDialog) ?*gio.File {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?*gio.File, .{ .name = "gtk_file_dialog_get_initial_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_initial_folder](https://docs.gtk.org/gtk4/method.FileDialog.get_initial_folder.html)
    pub fn getInitialFolder(self: *FileDialog) ?*gio.File {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?*gio.File, .{ .name = "gtk_file_dialog_get_initial_folder" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_initial_name](https://docs.gtk.org/gtk4/method.FileDialog.get_initial_name.html)
    pub fn getInitialName(self: *FileDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_dialog_get_initial_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.FileDialog.get_modal.html)
    pub fn getModal(self: *FileDialog) bool {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) bool, .{ .name = "gtk_file_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.FileDialog.get_title.html)
    pub fn getTitle(self: *FileDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*FileDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_file_dialog_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [open](https://docs.gtk.org/gtk4/method.FileDialog.open.html)
    pub fn open(self: *FileDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_dialog_open" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [open_finish](https://docs.gtk.org/gtk4/method.FileDialog.open_finish.html)
    pub fn openFinish(self: *FileDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.File {
        const cFn = @extern(*const fn (*FileDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.File, .{ .name = "gtk_file_dialog_open_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [open_multiple](https://docs.gtk.org/gtk4/method.FileDialog.open_multiple.html)
    pub fn openMultiple(self: *FileDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_dialog_open_multiple" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [open_multiple_finish](https://docs.gtk.org/gtk4/method.FileDialog.open_multiple_finish.html)
    pub fn openMultipleFinish(self: *FileDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.ListModel {
        const cFn = @extern(*const fn (*FileDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_file_dialog_open_multiple_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [save](https://docs.gtk.org/gtk4/method.FileDialog.save.html)
    pub fn save(self: *FileDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_dialog_save" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [save_finish](https://docs.gtk.org/gtk4/method.FileDialog.save_finish.html)
    pub fn saveFinish(self: *FileDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.File {
        const cFn = @extern(*const fn (*FileDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.File, .{ .name = "gtk_file_dialog_save_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [select_folder](https://docs.gtk.org/gtk4/method.FileDialog.select_folder.html)
    pub fn selectFolder(self: *FileDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_dialog_select_folder" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [select_folder_finish](https://docs.gtk.org/gtk4/method.FileDialog.select_folder_finish.html)
    pub fn selectFolderFinish(self: *FileDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.File {
        const cFn = @extern(*const fn (*FileDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.File, .{ .name = "gtk_file_dialog_select_folder_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [select_multiple_folders](https://docs.gtk.org/gtk4/method.FileDialog.select_multiple_folders.html)
    pub fn selectMultipleFolders(self: *FileDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_dialog_select_multiple_folders" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [select_multiple_folders_finish](https://docs.gtk.org/gtk4/method.FileDialog.select_multiple_folders_finish.html)
    pub fn selectMultipleFoldersFinish(self: *FileDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.ListModel {
        const cFn = @extern(*const fn (*FileDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_file_dialog_select_multiple_folders_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_accept_label](https://docs.gtk.org/gtk4/method.FileDialog.set_accept_label.html)
    pub fn setAcceptLabel(self: *FileDialog, _accept_label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FileDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_dialog_set_accept_label" });
        const ret = cFn(self, _accept_label);
        return ret;
    }
    /// method [set_default_filter](https://docs.gtk.org/gtk4/method.FileDialog.set_default_filter.html)
    pub fn setDefaultFilter(self: *FileDialog, _filter: ?*gtk.FileFilter) void {
        const cFn = @extern(*const fn (*FileDialog, ?*gtk.FileFilter) callconv(.c) void, .{ .name = "gtk_file_dialog_set_default_filter" });
        const ret = cFn(self, _filter);
        return ret;
    }
    /// method [set_filters](https://docs.gtk.org/gtk4/method.FileDialog.set_filters.html)
    pub fn setFilters(self: *FileDialog, _filters: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*FileDialog, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_file_dialog_set_filters" });
        const ret = cFn(self, _filters);
        return ret;
    }
    /// method [set_initial_file](https://docs.gtk.org/gtk4/method.FileDialog.set_initial_file.html)
    pub fn setInitialFile(self: *FileDialog, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*FileDialog, ?*gio.File) callconv(.c) void, .{ .name = "gtk_file_dialog_set_initial_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_initial_folder](https://docs.gtk.org/gtk4/method.FileDialog.set_initial_folder.html)
    pub fn setInitialFolder(self: *FileDialog, _folder: ?*gio.File) void {
        const cFn = @extern(*const fn (*FileDialog, ?*gio.File) callconv(.c) void, .{ .name = "gtk_file_dialog_set_initial_folder" });
        const ret = cFn(self, _folder);
        return ret;
    }
    /// method [set_initial_name](https://docs.gtk.org/gtk4/method.FileDialog.set_initial_name.html)
    pub fn setInitialName(self: *FileDialog, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FileDialog, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_dialog_set_initial_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.FileDialog.set_modal.html)
    pub fn setModal(self: *FileDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*FileDialog, bool) callconv(.c) void, .{ .name = "gtk_file_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.FileDialog.set_title.html)
    pub fn setTitle(self: *FileDialog, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_dialog_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_dialog_get_type" });
        return cFn();
    }
};
pub const FileDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [FileFilter](https://docs.gtk.org/gtk4/class.FileFilter.html)
/// - property [mime-types](https://docs.gtk.org/gtk4/property.FileFilter.mime-types.html): (--) `[*:null]?[*:0]const u8`
/// - property [name](https://docs.gtk.org/gtk4/property.FileFilter.name.html): (rw) `[*:0]const u8`
/// - property [patterns](https://docs.gtk.org/gtk4/property.FileFilter.patterns.html): (--) `[*:null]?[*:0]const u8`
/// - property [suffixes](https://docs.gtk.org/gtk4/property.FileFilter.suffixes.html): (--) `[*:null]?[*:0]const u8`
pub const FileFilter = opaque {
    pub const Interfaces = [_]type{gtk.Buildable};
    pub const Parent = gtk.Filter;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FileFilter.new.html)
    pub fn new() *FileFilter {
        const cFn = @extern(*const fn () callconv(.c) *FileFilter, .{ .name = "gtk_file_filter_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_gvariant](https://docs.gtk.org/gtk4/ctor.FileFilter.new_from_gvariant.html)
    pub fn newFromGvariant(_variant: *glib.Variant) *FileFilter {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) *FileFilter, .{ .name = "gtk_file_filter_new_from_gvariant" });
        const ret = cFn(_variant);
        return ret;
    }
    /// method [add_mime_type](https://docs.gtk.org/gtk4/method.FileFilter.add_mime_type.html)
    pub fn addMimeType(self: *FileFilter, _mime_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileFilter, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_filter_add_mime_type" });
        const ret = cFn(self, _mime_type);
        return ret;
    }
    /// method [add_pattern](https://docs.gtk.org/gtk4/method.FileFilter.add_pattern.html)
    pub fn addPattern(self: *FileFilter, _pattern: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileFilter, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_filter_add_pattern" });
        const ret = cFn(self, _pattern);
        return ret;
    }
    /// method [add_pixbuf_formats](https://docs.gtk.org/gtk4/method.FileFilter.add_pixbuf_formats.html)
    pub fn addPixbufFormats(self: *FileFilter) void {
        const cFn = @extern(*const fn (*FileFilter) callconv(.c) void, .{ .name = "gtk_file_filter_add_pixbuf_formats" });
        const ret = cFn(self);
        return ret;
    }
    /// method [add_suffix](https://docs.gtk.org/gtk4/method.FileFilter.add_suffix.html)
    pub fn addSuffix(self: *FileFilter, _suffix: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FileFilter, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_filter_add_suffix" });
        const ret = cFn(self, _suffix);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.FileFilter.get_attributes.html)
    pub fn getAttributes(self: *FileFilter) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*FileFilter) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_file_filter_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.FileFilter.get_name.html)
    pub fn getName(self: *FileFilter) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FileFilter) callconv(.c) ?[*:0]u8, .{ .name = "gtk_file_filter_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gtk4/method.FileFilter.set_name.html)
    pub fn setName(self: *FileFilter, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FileFilter, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_file_filter_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [to_gvariant](https://docs.gtk.org/gtk4/method.FileFilter.to_gvariant.html)
    pub fn toGvariant(self: *FileFilter) *glib.Variant {
        const cFn = @extern(*const fn (*FileFilter) callconv(.c) *glib.Variant, .{ .name = "gtk_file_filter_to_gvariant" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_filter_get_type" });
        return cFn();
    }
};
/// Class [FileLauncher](https://docs.gtk.org/gtk4/class.FileLauncher.html)
/// - property [always-ask](https://docs.gtk.org/gtk4/property.FileLauncher.always-ask.html): (rw) `bool`
/// - property [file](https://docs.gtk.org/gtk4/property.FileLauncher.file.html): (rw) `gio.File`
/// - property [writable](https://docs.gtk.org/gtk4/property.FileLauncher.writable.html): (rw) `bool`
pub const FileLauncher = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.FileLauncherClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FileLauncher.new.html)
    pub fn new(_file: ?*gio.File) *FileLauncher {
        const cFn = @extern(*const fn (?*gio.File) callconv(.c) *FileLauncher, .{ .name = "gtk_file_launcher_new" });
        const ret = cFn(_file);
        return ret;
    }
    /// method [get_always_ask](https://docs.gtk.org/gtk4/method.FileLauncher.get_always_ask.html)
    pub fn getAlwaysAsk(self: *FileLauncher) bool {
        const cFn = @extern(*const fn (*FileLauncher) callconv(.c) bool, .{ .name = "gtk_file_launcher_get_always_ask" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.FileLauncher.get_file.html)
    pub fn getFile(self: *FileLauncher) ?*gio.File {
        const cFn = @extern(*const fn (*FileLauncher) callconv(.c) ?*gio.File, .{ .name = "gtk_file_launcher_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_writable](https://docs.gtk.org/gtk4/method.FileLauncher.get_writable.html)
    pub fn getWritable(self: *FileLauncher) bool {
        const cFn = @extern(*const fn (*FileLauncher) callconv(.c) bool, .{ .name = "gtk_file_launcher_get_writable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [launch](https://docs.gtk.org/gtk4/method.FileLauncher.launch.html)
    pub fn launch(self: *FileLauncher, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileLauncher, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_launcher_launch" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [launch_finish](https://docs.gtk.org/gtk4/method.FileLauncher.launch_finish.html)
    pub fn launchFinish(self: *FileLauncher, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*FileLauncher, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_launcher_launch_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [open_containing_folder](https://docs.gtk.org/gtk4/method.FileLauncher.open_containing_folder.html)
    pub fn openContainingFolder(self: *FileLauncher, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FileLauncher, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_file_launcher_open_containing_folder" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [open_containing_folder_finish](https://docs.gtk.org/gtk4/method.FileLauncher.open_containing_folder_finish.html)
    pub fn openContainingFolderFinish(self: *FileLauncher, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*FileLauncher, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_file_launcher_open_containing_folder_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_always_ask](https://docs.gtk.org/gtk4/method.FileLauncher.set_always_ask.html)
    pub fn setAlwaysAsk(self: *FileLauncher, _always_ask: bool) void {
        const cFn = @extern(*const fn (*FileLauncher, bool) callconv(.c) void, .{ .name = "gtk_file_launcher_set_always_ask" });
        const ret = cFn(self, _always_ask);
        return ret;
    }
    /// method [set_file](https://docs.gtk.org/gtk4/method.FileLauncher.set_file.html)
    pub fn setFile(self: *FileLauncher, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*FileLauncher, ?*gio.File) callconv(.c) void, .{ .name = "gtk_file_launcher_set_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_writable](https://docs.gtk.org/gtk4/method.FileLauncher.set_writable.html)
    pub fn setWritable(self: *FileLauncher, _writable: bool) void {
        const cFn = @extern(*const fn (*FileLauncher, bool) callconv(.c) void, .{ .name = "gtk_file_launcher_set_writable" });
        const ret = cFn(self, _writable);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_file_launcher_get_type" });
        return cFn();
    }
};
pub const FileLauncherClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [Filter](https://docs.gtk.org/gtk4/class.Filter.html)
pub const Filter = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.FilterClass;
    /// method [changed](https://docs.gtk.org/gtk4/method.Filter.changed.html)
    pub fn changed(self: *Filter, _change: gtk.FilterChange) void {
        const cFn = @extern(*const fn (*Filter, gtk.FilterChange) callconv(.c) void, .{ .name = "gtk_filter_changed" });
        const ret = cFn(self, _change);
        return ret;
    }
    /// method [get_strictness](https://docs.gtk.org/gtk4/method.Filter.get_strictness.html)
    pub fn getStrictness(self: *Filter) gtk.FilterMatch {
        const cFn = @extern(*const fn (*Filter) callconv(.c) gtk.FilterMatch, .{ .name = "gtk_filter_get_strictness" });
        const ret = cFn(self);
        return ret;
    }
    /// method [match](https://docs.gtk.org/gtk4/method.Filter.match.html)
    pub fn match(self: *Filter, _item: *gobject.Object) bool {
        const cFn = @extern(*const fn (*Filter, *gobject.Object) callconv(.c) bool, .{ .name = "gtk_filter_match" });
        const ret = cFn(self, _item);
        return ret;
    }
    /// vfunc [get_strictness](https://docs.gtk.org/gtk4/vfunc.Filter.get_strictness.html)
    pub fn getStrictnessV(self: *Filter) gtk.FilterMatch {
        const class: *FilterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_strictness.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [match](https://docs.gtk.org/gtk4/vfunc.Filter.match.html)
    pub fn matchV(self: *Filter, _item: ?*gobject.Object) bool {
        const class: *FilterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.match.?;
        const ret = vFn(self, _item);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.Filter.changed.html)
    pub fn connectChanged(self: *Filter, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Filter, gtk.FilterChange });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_filter_get_type" });
        return cFn();
    }
};
/// Enum [FilterChange](https://docs.gtk.org/gtk4/enum.FilterChange.html)
pub const FilterChange = enum(u32) {
    different = 0,
    less_strict = 1,
    more_strict = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_filter_change_get_type" });
        return cFn();
    }
};
pub const FilterClass = extern struct {
    parent_class: gobject.ObjectClass,
    match: ?*const fn (_self: *gtk.Filter, _item: ?*gobject.Object) callconv(.c) bool,
    get_strictness: ?*const fn (_self: *gtk.Filter) callconv(.c) gtk.FilterMatch,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
    _gtk_reserved5: ?*anyopaque,
    _gtk_reserved6: ?*anyopaque,
    _gtk_reserved7: ?*anyopaque,
    _gtk_reserved8: ?*anyopaque,
};
/// Class [FilterListModel](https://docs.gtk.org/gtk4/class.FilterListModel.html)
/// - property [filter](https://docs.gtk.org/gtk4/property.FilterListModel.filter.html): (rw) `gtk.Filter`
/// - property [incremental](https://docs.gtk.org/gtk4/property.FilterListModel.incremental.html): (rw) `bool`
/// - property [item-type](https://docs.gtk.org/gtk4/property.FilterListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.FilterListModel.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.FilterListModel.n-items.html): (r-) `u32`
/// - property [pending](https://docs.gtk.org/gtk4/property.FilterListModel.pending.html): (r-) `u32`
pub const FilterListModel = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.FilterListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FilterListModel.new.html)
    pub fn new(_model: ?*gio.ListModel, _filter: ?*gtk.Filter) *FilterListModel {
        const cFn = @extern(*const fn (?*gio.ListModel, ?*gtk.Filter) callconv(.c) *FilterListModel, .{ .name = "gtk_filter_list_model_new" });
        const ret = cFn(_model, _filter);
        return ret;
    }
    /// method [get_filter](https://docs.gtk.org/gtk4/method.FilterListModel.get_filter.html)
    pub fn getFilter(self: *FilterListModel) ?*gtk.Filter {
        const cFn = @extern(*const fn (*FilterListModel) callconv(.c) ?*gtk.Filter, .{ .name = "gtk_filter_list_model_get_filter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_incremental](https://docs.gtk.org/gtk4/method.FilterListModel.get_incremental.html)
    pub fn getIncremental(self: *FilterListModel) bool {
        const cFn = @extern(*const fn (*FilterListModel) callconv(.c) bool, .{ .name = "gtk_filter_list_model_get_incremental" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.FilterListModel.get_model.html)
    pub fn getModel(self: *FilterListModel) ?*gio.ListModel {
        const cFn = @extern(*const fn (*FilterListModel) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_filter_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pending](https://docs.gtk.org/gtk4/method.FilterListModel.get_pending.html)
    pub fn getPending(self: *FilterListModel) u32 {
        const cFn = @extern(*const fn (*FilterListModel) callconv(.c) u32, .{ .name = "gtk_filter_list_model_get_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_filter](https://docs.gtk.org/gtk4/method.FilterListModel.set_filter.html)
    pub fn setFilter(self: *FilterListModel, _filter: ?*gtk.Filter) void {
        const cFn = @extern(*const fn (*FilterListModel, ?*gtk.Filter) callconv(.c) void, .{ .name = "gtk_filter_list_model_set_filter" });
        const ret = cFn(self, _filter);
        return ret;
    }
    /// method [set_incremental](https://docs.gtk.org/gtk4/method.FilterListModel.set_incremental.html)
    pub fn setIncremental(self: *FilterListModel, _incremental: bool) void {
        const cFn = @extern(*const fn (*FilterListModel, bool) callconv(.c) void, .{ .name = "gtk_filter_list_model_set_incremental" });
        const ret = cFn(self, _incremental);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.FilterListModel.set_model.html)
    pub fn setModel(self: *FilterListModel, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*FilterListModel, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_filter_list_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_filter_list_model_get_type" });
        return cFn();
    }
};
pub const FilterListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [FilterMatch](https://docs.gtk.org/gtk4/enum.FilterMatch.html)
pub const FilterMatch = enum(u32) {
    some = 0,
    none = 1,
    all = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_filter_match_get_type" });
        return cFn();
    }
};
/// Class [Fixed](https://docs.gtk.org/gtk4/class.Fixed.html)
pub const Fixed = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.FixedClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Fixed.new.html)
    pub fn new() *Fixed {
        const cFn = @extern(*const fn () callconv(.c) *Fixed, .{ .name = "gtk_fixed_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_child_position](https://docs.gtk.org/gtk4/method.Fixed.get_child_position.html)
    pub fn getChildPosition(self: *Fixed, _widget: *gtk.Widget) struct {
        ret: void,
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget, *f64, *f64) callconv(.c) void, .{ .name = "gtk_fixed_get_child_position" });
        const ret = cFn(self, _widget, _x, _y);
        return .{ .ret = ret, .x = x_out, .y = y_out };
    }
    /// method [get_child_transform](https://docs.gtk.org/gtk4/method.Fixed.get_child_transform.html)
    pub fn getChildTransform(self: *Fixed, _widget: *gtk.Widget) ?*gsk.Transform {
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget) callconv(.c) ?*gsk.Transform, .{ .name = "gtk_fixed_get_child_transform" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [move](https://docs.gtk.org/gtk4/method.Fixed.move.html)
    pub fn move(self: *Fixed, _widget: *gtk.Widget, _x: f64, _y: f64) void {
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget, f64, f64) callconv(.c) void, .{ .name = "gtk_fixed_move" });
        const ret = cFn(self, _widget, _x, _y);
        return ret;
    }
    /// method [put](https://docs.gtk.org/gtk4/method.Fixed.put.html)
    pub fn put(self: *Fixed, _widget: *gtk.Widget, _x: f64, _y: f64) void {
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget, f64, f64) callconv(.c) void, .{ .name = "gtk_fixed_put" });
        const ret = cFn(self, _widget, _x, _y);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.Fixed.remove.html)
    pub fn remove(self: *Fixed, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_fixed_remove" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_child_transform](https://docs.gtk.org/gtk4/method.Fixed.set_child_transform.html)
    pub fn setChildTransform(self: *Fixed, _widget: *gtk.Widget, _transform: ?*gsk.Transform) void {
        const cFn = @extern(*const fn (*Fixed, *gtk.Widget, ?*gsk.Transform) callconv(.c) void, .{ .name = "gtk_fixed_set_child_transform" });
        const ret = cFn(self, _widget, _transform);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_fixed_get_type" });
        return cFn();
    }
};
pub const FixedClass = extern struct {
    parent_class: gtk.WidgetClass,
    padding: [8]?*anyopaque,
};
/// Class [FixedLayout](https://docs.gtk.org/gtk4/class.FixedLayout.html)
pub const FixedLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.FixedLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FixedLayout.new.html)
    pub fn new() *FixedLayout {
        const cFn = @extern(*const fn () callconv(.c) *FixedLayout, .{ .name = "gtk_fixed_layout_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_fixed_layout_get_type" });
        return cFn();
    }
};
/// Class [FixedLayoutChild](https://docs.gtk.org/gtk4/class.FixedLayoutChild.html)
/// - property [transform](https://docs.gtk.org/gtk4/property.FixedLayoutChild.transform.html): (rw) `gsk.Transform`
pub const FixedLayoutChild = opaque {
    pub const Parent = gtk.LayoutChild;
    pub const Class = gtk.FixedLayoutChildClass;
    /// method [get_transform](https://docs.gtk.org/gtk4/method.FixedLayoutChild.get_transform.html)
    pub fn getTransform(self: *FixedLayoutChild) ?*gsk.Transform {
        const cFn = @extern(*const fn (*FixedLayoutChild) callconv(.c) ?*gsk.Transform, .{ .name = "gtk_fixed_layout_child_get_transform" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_transform](https://docs.gtk.org/gtk4/method.FixedLayoutChild.set_transform.html)
    pub fn setTransform(self: *FixedLayoutChild, _transform: *gsk.Transform) void {
        const cFn = @extern(*const fn (*FixedLayoutChild, *gsk.Transform) callconv(.c) void, .{ .name = "gtk_fixed_layout_child_set_transform" });
        const ret = cFn(self, _transform);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_fixed_layout_child_get_type" });
        return cFn();
    }
};
pub const FixedLayoutChildClass = extern struct {
    parent_class: gtk.LayoutChildClass,
};
pub const FixedLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Class [FlattenListModel](https://docs.gtk.org/gtk4/class.FlattenListModel.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.FlattenListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.FlattenListModel.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.FlattenListModel.n-items.html): (r-) `u32`
pub const FlattenListModel = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.FlattenListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FlattenListModel.new.html)
    pub fn new(_model: ?*gio.ListModel) *FlattenListModel {
        const cFn = @extern(*const fn (?*gio.ListModel) callconv(.c) *FlattenListModel, .{ .name = "gtk_flatten_list_model_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.FlattenListModel.get_model.html)
    pub fn getModel(self: *FlattenListModel) ?*gio.ListModel {
        const cFn = @extern(*const fn (*FlattenListModel) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_flatten_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model_for_item](https://docs.gtk.org/gtk4/method.FlattenListModel.get_model_for_item.html)
    pub fn getModelForItem(self: *FlattenListModel, _position: u32) ?*gio.ListModel {
        const cFn = @extern(*const fn (*FlattenListModel, u32) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_flatten_list_model_get_model_for_item" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.FlattenListModel.set_model.html)
    pub fn setModel(self: *FlattenListModel, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*FlattenListModel, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_flatten_list_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_flatten_list_model_get_type" });
        return cFn();
    }
};
pub const FlattenListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [FlowBox](https://docs.gtk.org/gtk4/class.FlowBox.html)
/// - property [accept-unpaired-release](https://docs.gtk.org/gtk4/property.FlowBox.accept-unpaired-release.html): (rw) `bool`
/// - property [activate-on-single-click](https://docs.gtk.org/gtk4/property.FlowBox.activate-on-single-click.html): (rw) `bool`
/// - property [column-spacing](https://docs.gtk.org/gtk4/property.FlowBox.column-spacing.html): (rw) `u32`
/// - property [homogeneous](https://docs.gtk.org/gtk4/property.FlowBox.homogeneous.html): (rw) `bool`
/// - property [max-children-per-line](https://docs.gtk.org/gtk4/property.FlowBox.max-children-per-line.html): (rw) `u32`
/// - property [min-children-per-line](https://docs.gtk.org/gtk4/property.FlowBox.min-children-per-line.html): (rw) `u32`
/// - property [row-spacing](https://docs.gtk.org/gtk4/property.FlowBox.row-spacing.html): (rw) `u32`
/// - property [selection-mode](https://docs.gtk.org/gtk4/property.FlowBox.selection-mode.html): (rw) `gtk.SelectionMode`
pub const FlowBox = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FlowBox.new.html)
    pub fn new() *FlowBox {
        const cFn = @extern(*const fn () callconv(.c) *FlowBox, .{ .name = "gtk_flow_box_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append](https://docs.gtk.org/gtk4/method.FlowBox.append.html)
    pub fn append(self: *FlowBox, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_flow_box_append" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [bind_model](https://docs.gtk.org/gtk4/method.FlowBox.bind_model.html)
    pub fn bindModel(self: *FlowBox, _model: ?*gio.ListModel, create_widget_func: anytype, create_widget_func_args: anytype) void {
        var closure_create_widget_func = core.zig_closure(create_widget_func, create_widget_func_args, &.{ *gtk.Widget, *gobject.Object });
        const _create_widget_func: gtk.FlowBoxCreateWidgetFunc = @ptrCast(closure_create_widget_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_create_widget_func.c_data());
        const _user_data_free_func: glib.DestroyNotify = @ptrCast(closure_create_widget_func.c_destroy());
        const cFn = @extern(*const fn (*FlowBox, ?*gio.ListModel, gtk.FlowBoxCreateWidgetFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_flow_box_bind_model" });
        const ret = cFn(self, _model, _create_widget_func, @ptrCast(_user_data), _user_data_free_func);
        return ret;
    }
    /// method [get_activate_on_single_click](https://docs.gtk.org/gtk4/method.FlowBox.get_activate_on_single_click.html)
    pub fn getActivateOnSingleClick(self: *FlowBox) bool {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) bool, .{ .name = "gtk_flow_box_get_activate_on_single_click" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_at_index](https://docs.gtk.org/gtk4/method.FlowBox.get_child_at_index.html)
    pub fn getChildAtIndex(self: *FlowBox, _idx: i32) ?*gtk.FlowBoxChild {
        const cFn = @extern(*const fn (*FlowBox, i32) callconv(.c) ?*gtk.FlowBoxChild, .{ .name = "gtk_flow_box_get_child_at_index" });
        const ret = cFn(self, _idx);
        return ret;
    }
    /// method [get_child_at_pos](https://docs.gtk.org/gtk4/method.FlowBox.get_child_at_pos.html)
    pub fn getChildAtPos(self: *FlowBox, _x: i32, _y: i32) ?*gtk.FlowBoxChild {
        const cFn = @extern(*const fn (*FlowBox, i32, i32) callconv(.c) ?*gtk.FlowBoxChild, .{ .name = "gtk_flow_box_get_child_at_pos" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    /// method [get_column_spacing](https://docs.gtk.org/gtk4/method.FlowBox.get_column_spacing.html)
    pub fn getColumnSpacing(self: *FlowBox) u32 {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) u32, .{ .name = "gtk_flow_box_get_column_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_homogeneous](https://docs.gtk.org/gtk4/method.FlowBox.get_homogeneous.html)
    pub fn getHomogeneous(self: *FlowBox) bool {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) bool, .{ .name = "gtk_flow_box_get_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_children_per_line](https://docs.gtk.org/gtk4/method.FlowBox.get_max_children_per_line.html)
    pub fn getMaxChildrenPerLine(self: *FlowBox) u32 {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) u32, .{ .name = "gtk_flow_box_get_max_children_per_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_children_per_line](https://docs.gtk.org/gtk4/method.FlowBox.get_min_children_per_line.html)
    pub fn getMinChildrenPerLine(self: *FlowBox) u32 {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) u32, .{ .name = "gtk_flow_box_get_min_children_per_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_spacing](https://docs.gtk.org/gtk4/method.FlowBox.get_row_spacing.html)
    pub fn getRowSpacing(self: *FlowBox) u32 {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) u32, .{ .name = "gtk_flow_box_get_row_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_children](https://docs.gtk.org/gtk4/method.FlowBox.get_selected_children.html)
    pub fn getSelectedChildren(self: *FlowBox) ?*core.List {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) ?*core.List, .{ .name = "gtk_flow_box_get_selected_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_mode](https://docs.gtk.org/gtk4/method.FlowBox.get_selection_mode.html)
    pub fn getSelectionMode(self: *FlowBox) gtk.SelectionMode {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) gtk.SelectionMode, .{ .name = "gtk_flow_box_get_selection_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/gtk4/method.FlowBox.insert.html)
    pub fn insert(self: *FlowBox, _widget: *gtk.Widget, _position: i32) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Widget, i32) callconv(.c) void, .{ .name = "gtk_flow_box_insert" });
        const ret = cFn(self, _widget, _position);
        return ret;
    }
    /// method [invalidate_filter](https://docs.gtk.org/gtk4/method.FlowBox.invalidate_filter.html)
    pub fn invalidateFilter(self: *FlowBox) void {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) void, .{ .name = "gtk_flow_box_invalidate_filter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invalidate_sort](https://docs.gtk.org/gtk4/method.FlowBox.invalidate_sort.html)
    pub fn invalidateSort(self: *FlowBox) void {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) void, .{ .name = "gtk_flow_box_invalidate_sort" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/gtk4/method.FlowBox.prepend.html)
    pub fn prepend(self: *FlowBox, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_flow_box_prepend" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.FlowBox.remove.html)
    pub fn remove(self: *FlowBox, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_flow_box_remove" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/gtk4/method.FlowBox.remove_all.html)
    pub fn removeAll(self: *FlowBox) void {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) void, .{ .name = "gtk_flow_box_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_all](https://docs.gtk.org/gtk4/method.FlowBox.select_all.html)
    pub fn selectAll(self: *FlowBox) void {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) void, .{ .name = "gtk_flow_box_select_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_child](https://docs.gtk.org/gtk4/method.FlowBox.select_child.html)
    pub fn selectChild(self: *FlowBox, _child: *gtk.FlowBoxChild) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.FlowBoxChild) callconv(.c) void, .{ .name = "gtk_flow_box_select_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [selected_foreach](https://docs.gtk.org/gtk4/method.FlowBox.selected_foreach.html)
    pub fn selectedForeach(self: *FlowBox, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.FlowBox, *gtk.FlowBoxChild });
        defer closure_func.deinit();
        const _func: gtk.FlowBoxForeachFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*FlowBox, gtk.FlowBoxForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_flow_box_selected_foreach" });
        const ret = cFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// method [set_activate_on_single_click](https://docs.gtk.org/gtk4/method.FlowBox.set_activate_on_single_click.html)
    pub fn setActivateOnSingleClick(self: *FlowBox, _single: bool) void {
        const cFn = @extern(*const fn (*FlowBox, bool) callconv(.c) void, .{ .name = "gtk_flow_box_set_activate_on_single_click" });
        const ret = cFn(self, _single);
        return ret;
    }
    /// method [set_column_spacing](https://docs.gtk.org/gtk4/method.FlowBox.set_column_spacing.html)
    pub fn setColumnSpacing(self: *FlowBox, _spacing: u32) void {
        const cFn = @extern(*const fn (*FlowBox, u32) callconv(.c) void, .{ .name = "gtk_flow_box_set_column_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    /// method [set_filter_func](https://docs.gtk.org/gtk4/method.FlowBox.set_filter_func.html)
    pub fn setFilterFunc(self: *FlowBox, filter_func: anytype, filter_func_args: anytype) void {
        var closure_filter_func = core.zig_closure(filter_func, filter_func_args, &.{ bool, *gtk.FlowBoxChild });
        const _filter_func: ?gtk.FlowBoxFilterFunc = @ptrCast(closure_filter_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_filter_func.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_filter_func.c_destroy());
        const cFn = @extern(*const fn (*FlowBox, ?gtk.FlowBoxFilterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_flow_box_set_filter_func" });
        const ret = cFn(self, _filter_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [set_hadjustment](https://docs.gtk.org/gtk4/method.FlowBox.set_hadjustment.html)
    pub fn setHadjustment(self: *FlowBox, _adjustment: *gtk.Adjustment) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_flow_box_set_hadjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [set_homogeneous](https://docs.gtk.org/gtk4/method.FlowBox.set_homogeneous.html)
    pub fn setHomogeneous(self: *FlowBox, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*FlowBox, bool) callconv(.c) void, .{ .name = "gtk_flow_box_set_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_max_children_per_line](https://docs.gtk.org/gtk4/method.FlowBox.set_max_children_per_line.html)
    pub fn setMaxChildrenPerLine(self: *FlowBox, _n_children: u32) void {
        const cFn = @extern(*const fn (*FlowBox, u32) callconv(.c) void, .{ .name = "gtk_flow_box_set_max_children_per_line" });
        const ret = cFn(self, _n_children);
        return ret;
    }
    /// method [set_min_children_per_line](https://docs.gtk.org/gtk4/method.FlowBox.set_min_children_per_line.html)
    pub fn setMinChildrenPerLine(self: *FlowBox, _n_children: u32) void {
        const cFn = @extern(*const fn (*FlowBox, u32) callconv(.c) void, .{ .name = "gtk_flow_box_set_min_children_per_line" });
        const ret = cFn(self, _n_children);
        return ret;
    }
    /// method [set_row_spacing](https://docs.gtk.org/gtk4/method.FlowBox.set_row_spacing.html)
    pub fn setRowSpacing(self: *FlowBox, _spacing: u32) void {
        const cFn = @extern(*const fn (*FlowBox, u32) callconv(.c) void, .{ .name = "gtk_flow_box_set_row_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    /// method [set_selection_mode](https://docs.gtk.org/gtk4/method.FlowBox.set_selection_mode.html)
    pub fn setSelectionMode(self: *FlowBox, _mode: gtk.SelectionMode) void {
        const cFn = @extern(*const fn (*FlowBox, gtk.SelectionMode) callconv(.c) void, .{ .name = "gtk_flow_box_set_selection_mode" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_sort_func](https://docs.gtk.org/gtk4/method.FlowBox.set_sort_func.html)
    pub fn setSortFunc(self: *FlowBox, sort_func: anytype, sort_func_args: anytype) void {
        var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, *gtk.FlowBoxChild, *gtk.FlowBoxChild });
        const _sort_func: ?gtk.FlowBoxSortFunc = @ptrCast(closure_sort_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
        const cFn = @extern(*const fn (*FlowBox, ?gtk.FlowBoxSortFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_flow_box_set_sort_func" });
        const ret = cFn(self, _sort_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [set_vadjustment](https://docs.gtk.org/gtk4/method.FlowBox.set_vadjustment.html)
    pub fn setVadjustment(self: *FlowBox, _adjustment: *gtk.Adjustment) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_flow_box_set_vadjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [unselect_all](https://docs.gtk.org/gtk4/method.FlowBox.unselect_all.html)
    pub fn unselectAll(self: *FlowBox) void {
        const cFn = @extern(*const fn (*FlowBox) callconv(.c) void, .{ .name = "gtk_flow_box_unselect_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unselect_child](https://docs.gtk.org/gtk4/method.FlowBox.unselect_child.html)
    pub fn unselectChild(self: *FlowBox, _child: *gtk.FlowBoxChild) void {
        const cFn = @extern(*const fn (*FlowBox, *gtk.FlowBoxChild) callconv(.c) void, .{ .name = "gtk_flow_box_unselect_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// signal [activate-cursor-child](https://docs.gtk.org/gtk4/signal.FlowBox.activate-cursor-child.html)
    pub fn connectActivateCursorChild(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-cursor-child", handler, args, flags, &.{ void, *FlowBox });
    }
    /// signal [child-activated](https://docs.gtk.org/gtk4/signal.FlowBox.child-activated.html)
    pub fn connectChildActivated(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("child-activated", handler, args, flags, &.{ void, *FlowBox, *gtk.FlowBoxChild });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.FlowBox.move-cursor.html)
    pub fn connectMoveCursor(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ bool, *FlowBox, gtk.MovementStep, i32, bool, bool });
    }
    /// signal [select-all](https://docs.gtk.org/gtk4/signal.FlowBox.select-all.html)
    pub fn connectSelectAll(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-all", handler, args, flags, &.{ void, *FlowBox });
    }
    /// signal [selected-children-changed](https://docs.gtk.org/gtk4/signal.FlowBox.selected-children-changed.html)
    pub fn connectSelectedChildrenChanged(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("selected-children-changed", handler, args, flags, &.{ void, *FlowBox });
    }
    /// signal [toggle-cursor-child](https://docs.gtk.org/gtk4/signal.FlowBox.toggle-cursor-child.html)
    pub fn connectToggleCursorChild(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-cursor-child", handler, args, flags, &.{ void, *FlowBox });
    }
    /// signal [unselect-all](https://docs.gtk.org/gtk4/signal.FlowBox.unselect-all.html)
    pub fn connectUnselectAll(self: *FlowBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unselect-all", handler, args, flags, &.{ void, *FlowBox });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_flow_box_get_type" });
        return cFn();
    }
};
/// Class [FlowBoxChild](https://docs.gtk.org/gtk4/class.FlowBoxChild.html)
/// - property [child](https://docs.gtk.org/gtk4/property.FlowBoxChild.child.html): (rw) `gtk.Widget`
pub const FlowBoxChild = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.FlowBoxChildClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FlowBoxChild.new.html)
    pub fn new() *FlowBoxChild {
        const cFn = @extern(*const fn () callconv(.c) *FlowBoxChild, .{ .name = "gtk_flow_box_child_new" });
        const ret = cFn();
        return ret;
    }
    /// method [changed](https://docs.gtk.org/gtk4/method.FlowBoxChild.changed.html)
    pub fn changed(self: *FlowBoxChild) void {
        const cFn = @extern(*const fn (*FlowBoxChild) callconv(.c) void, .{ .name = "gtk_flow_box_child_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.FlowBoxChild.get_child.html)
    pub fn getChild(self: *FlowBoxChild) ?*gtk.Widget {
        const cFn = @extern(*const fn (*FlowBoxChild) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_flow_box_child_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_index](https://docs.gtk.org/gtk4/method.FlowBoxChild.get_index.html)
    pub fn getIndex(self: *FlowBoxChild) i32 {
        const cFn = @extern(*const fn (*FlowBoxChild) callconv(.c) i32, .{ .name = "gtk_flow_box_child_get_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_selected](https://docs.gtk.org/gtk4/method.FlowBoxChild.is_selected.html)
    pub fn isSelected(self: *FlowBoxChild) bool {
        const cFn = @extern(*const fn (*FlowBoxChild) callconv(.c) bool, .{ .name = "gtk_flow_box_child_is_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.FlowBoxChild.set_child.html)
    pub fn setChild(self: *FlowBoxChild, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*FlowBoxChild, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_flow_box_child_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.FlowBoxChild.activate.html)
    pub fn activateV(self: *FlowBoxChild) void {
        const class: *FlowBoxChildClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.FlowBoxChild.activate.html)
    pub fn connectActivate(self: *FlowBoxChild, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *FlowBoxChild });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_flow_box_child_get_type" });
        return cFn();
    }
};
pub const FlowBoxChildClass = extern struct {
    parent_class: gtk.WidgetClass,
    activate: ?*const fn (_child: *gtk.FlowBoxChild) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// callback [FlowBoxCreateWidgetFunc](https://docs.gtk.org/gtk4/callback.FlowBoxCreateWidgetFunc.html)
pub const FlowBoxCreateWidgetFunc = *const fn (_item: *gobject.Object, _user_data: ?*anyopaque) callconv(.c) *gtk.Widget;
/// callback [FlowBoxFilterFunc](https://docs.gtk.org/gtk4/callback.FlowBoxFilterFunc.html)
pub const FlowBoxFilterFunc = *const fn (_child: *gtk.FlowBoxChild, _user_data: ?*anyopaque) callconv(.c) bool;
/// callback [FlowBoxForeachFunc](https://docs.gtk.org/gtk4/callback.FlowBoxForeachFunc.html)
pub const FlowBoxForeachFunc = *const fn (_box: *gtk.FlowBox, _child: *gtk.FlowBoxChild, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [FlowBoxSortFunc](https://docs.gtk.org/gtk4/callback.FlowBoxSortFunc.html)
pub const FlowBoxSortFunc = *const fn (_child1: *gtk.FlowBoxChild, _child2: *gtk.FlowBoxChild, _user_data: ?*anyopaque) callconv(.c) i32;
/// Deprecated:
/// Class [FontButton](https://docs.gtk.org/gtk4/class.FontButton.html)
/// - property [modal](https://docs.gtk.org/gtk4/property.FontButton.modal.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.FontButton.title.html): (rw) `[*:0]const u8`
/// - property [use-font](https://docs.gtk.org/gtk4/property.FontButton.use-font.html): (rw) `bool`
/// - property [use-size](https://docs.gtk.org/gtk4/property.FontButton.use-size.html): (rw) `bool`
pub const FontButton = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.FontChooser };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FontButton.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *FontButton {
            const cFn = @extern(*const fn () callconv(.c) *FontButton, .{ .name = "gtk_font_button_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_font](https://docs.gtk.org/gtk4/ctor.FontButton.new_with_font.html)
    pub const newWithFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithFont(_fontname: [*:0]const u8) *FontButton {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *FontButton, .{ .name = "gtk_font_button_new_with_font" });
            const ret = cFn(_fontname);
            return ret;
        }
    }.newWithFont;
    /// Deprecated:
    /// method [get_modal](https://docs.gtk.org/gtk4/method.FontButton.get_modal.html)
    pub const getModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModal(self: *FontButton) bool {
            const cFn = @extern(*const fn (*FontButton) callconv(.c) bool, .{ .name = "gtk_font_button_get_modal" });
            const ret = cFn(self);
            return ret;
        }
    }.getModal;
    /// Deprecated:
    /// method [get_title](https://docs.gtk.org/gtk4/method.FontButton.get_title.html)
    pub const getTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTitle(self: *FontButton) [*:0]u8 {
            const cFn = @extern(*const fn (*FontButton) callconv(.c) [*:0]u8, .{ .name = "gtk_font_button_get_title" });
            const ret = cFn(self);
            return ret;
        }
    }.getTitle;
    /// Deprecated:
    /// method [get_use_font](https://docs.gtk.org/gtk4/method.FontButton.get_use_font.html)
    pub const getUseFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseFont(self: *FontButton) bool {
            const cFn = @extern(*const fn (*FontButton) callconv(.c) bool, .{ .name = "gtk_font_button_get_use_font" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseFont;
    /// Deprecated:
    /// method [get_use_size](https://docs.gtk.org/gtk4/method.FontButton.get_use_size.html)
    pub const getUseSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseSize(self: *FontButton) bool {
            const cFn = @extern(*const fn (*FontButton) callconv(.c) bool, .{ .name = "gtk_font_button_get_use_size" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseSize;
    /// Deprecated:
    /// method [set_modal](https://docs.gtk.org/gtk4/method.FontButton.set_modal.html)
    pub const setModal = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModal(self: *FontButton, _modal: bool) void {
            const cFn = @extern(*const fn (*FontButton, bool) callconv(.c) void, .{ .name = "gtk_font_button_set_modal" });
            const ret = cFn(self, _modal);
            return ret;
        }
    }.setModal;
    /// Deprecated:
    /// method [set_title](https://docs.gtk.org/gtk4/method.FontButton.set_title.html)
    pub const setTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTitle(self: *FontButton, _title: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FontButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_button_set_title" });
            const ret = cFn(self, _title);
            return ret;
        }
    }.setTitle;
    /// Deprecated:
    /// method [set_use_font](https://docs.gtk.org/gtk4/method.FontButton.set_use_font.html)
    pub const setUseFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseFont(self: *FontButton, _use_font: bool) void {
            const cFn = @extern(*const fn (*FontButton, bool) callconv(.c) void, .{ .name = "gtk_font_button_set_use_font" });
            const ret = cFn(self, _use_font);
            return ret;
        }
    }.setUseFont;
    /// Deprecated:
    /// method [set_use_size](https://docs.gtk.org/gtk4/method.FontButton.set_use_size.html)
    pub const setUseSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseSize(self: *FontButton, _use_size: bool) void {
            const cFn = @extern(*const fn (*FontButton, bool) callconv(.c) void, .{ .name = "gtk_font_button_set_use_size" });
            const ret = cFn(self, _use_size);
            return ret;
        }
    }.setUseSize;
    /// signal [activate](https://docs.gtk.org/gtk4/signal.FontButton.activate.html)
    pub fn connectActivate(self: *FontButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *FontButton });
    }
    /// signal [font-set](https://docs.gtk.org/gtk4/signal.FontButton.font-set.html)
    pub fn connectFontSet(self: *FontButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("font-set", handler, args, flags, &.{ void, *FontButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_button_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Iface [FontChooser](https://docs.gtk.org/gtk4/iface.FontChooser.html)
/// - property [font](https://docs.gtk.org/gtk4/property.FontChooser.font.html): (rw) `[*:0]const u8`
/// - property [font-desc](https://docs.gtk.org/gtk4/property.FontChooser.font-desc.html): (rw) `pango.FontDescription`
/// - property [font-features](https://docs.gtk.org/gtk4/property.FontChooser.font-features.html): (r-) `[*:0]const u8`
/// - property [language](https://docs.gtk.org/gtk4/property.FontChooser.language.html): (rw) `[*:0]const u8`
/// - property [level](https://docs.gtk.org/gtk4/property.FontChooser.level.html): (rw) `gtk.FontChooserLevel`
/// - property [preview-text](https://docs.gtk.org/gtk4/property.FontChooser.preview-text.html): (rw) `[*:0]const u8`
/// - property [show-preview-entry](https://docs.gtk.org/gtk4/property.FontChooser.show-preview-entry.html): (rw) `bool`
pub const FontChooser = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [get_font](https://docs.gtk.org/gtk4/method.FontChooser.get_font.html)
    pub const getFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFont(self: *FontChooser) ?[*:0]u8 {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) ?[*:0]u8, .{ .name = "gtk_font_chooser_get_font" });
            const ret = cFn(self);
            return ret;
        }
    }.getFont;
    /// Deprecated:
    /// method [get_font_desc](https://docs.gtk.org/gtk4/method.FontChooser.get_font_desc.html)
    pub const getFontDesc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontDesc(self: *FontChooser) ?*pango.FontDescription {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) ?*pango.FontDescription, .{ .name = "gtk_font_chooser_get_font_desc" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontDesc;
    /// Deprecated:
    /// method [get_font_face](https://docs.gtk.org/gtk4/method.FontChooser.get_font_face.html)
    pub const getFontFace = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontFace(self: *FontChooser) ?*pango.FontFace {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) ?*pango.FontFace, .{ .name = "gtk_font_chooser_get_font_face" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontFace;
    /// Deprecated:
    /// method [get_font_family](https://docs.gtk.org/gtk4/method.FontChooser.get_font_family.html)
    pub const getFontFamily = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontFamily(self: *FontChooser) ?*pango.FontFamily {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) ?*pango.FontFamily, .{ .name = "gtk_font_chooser_get_font_family" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontFamily;
    /// Deprecated:
    /// method [get_font_features](https://docs.gtk.org/gtk4/method.FontChooser.get_font_features.html)
    pub const getFontFeatures = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontFeatures(self: *FontChooser) [*:0]u8 {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) [*:0]u8, .{ .name = "gtk_font_chooser_get_font_features" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontFeatures;
    /// Deprecated:
    /// method [get_font_map](https://docs.gtk.org/gtk4/method.FontChooser.get_font_map.html)
    pub const getFontMap = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontMap(self: *FontChooser) ?*pango.FontMap {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) ?*pango.FontMap, .{ .name = "gtk_font_chooser_get_font_map" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontMap;
    /// Deprecated:
    /// method [get_font_size](https://docs.gtk.org/gtk4/method.FontChooser.get_font_size.html)
    pub const getFontSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFontSize(self: *FontChooser) i32 {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) i32, .{ .name = "gtk_font_chooser_get_font_size" });
            const ret = cFn(self);
            return ret;
        }
    }.getFontSize;
    /// Deprecated:
    /// method [get_language](https://docs.gtk.org/gtk4/method.FontChooser.get_language.html)
    pub const getLanguage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getLanguage(self: *FontChooser) [*:0]u8 {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) [*:0]u8, .{ .name = "gtk_font_chooser_get_language" });
            const ret = cFn(self);
            return ret;
        }
    }.getLanguage;
    /// Deprecated:
    /// method [get_level](https://docs.gtk.org/gtk4/method.FontChooser.get_level.html)
    pub const getLevel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getLevel(self: *FontChooser) gtk.FontChooserLevel {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) gtk.FontChooserLevel, .{ .name = "gtk_font_chooser_get_level" });
            const ret = cFn(self);
            return ret;
        }
    }.getLevel;
    /// Deprecated:
    /// method [get_preview_text](https://docs.gtk.org/gtk4/method.FontChooser.get_preview_text.html)
    pub const getPreviewText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPreviewText(self: *FontChooser) [*:0]u8 {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) [*:0]u8, .{ .name = "gtk_font_chooser_get_preview_text" });
            const ret = cFn(self);
            return ret;
        }
    }.getPreviewText;
    /// Deprecated:
    /// method [get_show_preview_entry](https://docs.gtk.org/gtk4/method.FontChooser.get_show_preview_entry.html)
    pub const getShowPreviewEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowPreviewEntry(self: *FontChooser) bool {
            const cFn = @extern(*const fn (*FontChooser) callconv(.c) bool, .{ .name = "gtk_font_chooser_get_show_preview_entry" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowPreviewEntry;
    /// Deprecated:
    /// method [set_filter_func](https://docs.gtk.org/gtk4/method.FontChooser.set_filter_func.html)
    pub const setFilterFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFilterFunc(self: *FontChooser, filter: anytype, filter_args: anytype) void {
            var closure_filter = core.zig_closure(filter, filter_args, &.{ bool, *pango.FontFamily, *pango.FontFace });
            const _filter: ?gtk.FontFilterFunc = @ptrCast(closure_filter.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_filter.c_data());
            const _destroy: glib.DestroyNotify = @ptrCast(closure_filter.c_destroy());
            const cFn = @extern(*const fn (*FontChooser, ?gtk.FontFilterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_font_chooser_set_filter_func" });
            const ret = cFn(self, _filter, @ptrCast(_user_data), _destroy);
            return ret;
        }
    }.setFilterFunc;
    /// Deprecated:
    /// method [set_font](https://docs.gtk.org/gtk4/method.FontChooser.set_font.html)
    pub const setFont = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFont(self: *FontChooser, _fontname: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FontChooser, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_chooser_set_font" });
            const ret = cFn(self, _fontname);
            return ret;
        }
    }.setFont;
    /// Deprecated:
    /// method [set_font_desc](https://docs.gtk.org/gtk4/method.FontChooser.set_font_desc.html)
    pub const setFontDesc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFontDesc(self: *FontChooser, _font_desc: *pango.FontDescription) void {
            const cFn = @extern(*const fn (*FontChooser, *pango.FontDescription) callconv(.c) void, .{ .name = "gtk_font_chooser_set_font_desc" });
            const ret = cFn(self, _font_desc);
            return ret;
        }
    }.setFontDesc;
    /// Deprecated:
    /// method [set_font_map](https://docs.gtk.org/gtk4/method.FontChooser.set_font_map.html)
    pub const setFontMap = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFontMap(self: *FontChooser, _fontmap: ?*pango.FontMap) void {
            const cFn = @extern(*const fn (*FontChooser, ?*pango.FontMap) callconv(.c) void, .{ .name = "gtk_font_chooser_set_font_map" });
            const ret = cFn(self, _fontmap);
            return ret;
        }
    }.setFontMap;
    /// Deprecated:
    /// method [set_language](https://docs.gtk.org/gtk4/method.FontChooser.set_language.html)
    pub const setLanguage = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setLanguage(self: *FontChooser, _language: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FontChooser, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_chooser_set_language" });
            const ret = cFn(self, _language);
            return ret;
        }
    }.setLanguage;
    /// Deprecated:
    /// method [set_level](https://docs.gtk.org/gtk4/method.FontChooser.set_level.html)
    pub const setLevel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setLevel(self: *FontChooser, _level: gtk.FontChooserLevel) void {
            const cFn = @extern(*const fn (*FontChooser, gtk.FontChooserLevel) callconv(.c) void, .{ .name = "gtk_font_chooser_set_level" });
            const ret = cFn(self, _level);
            return ret;
        }
    }.setLevel;
    /// Deprecated:
    /// method [set_preview_text](https://docs.gtk.org/gtk4/method.FontChooser.set_preview_text.html)
    pub const setPreviewText = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPreviewText(self: *FontChooser, _text: [*:0]const u8) void {
            const cFn = @extern(*const fn (*FontChooser, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_chooser_set_preview_text" });
            const ret = cFn(self, _text);
            return ret;
        }
    }.setPreviewText;
    /// Deprecated:
    /// method [set_show_preview_entry](https://docs.gtk.org/gtk4/method.FontChooser.set_show_preview_entry.html)
    pub const setShowPreviewEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowPreviewEntry(self: *FontChooser, _show_preview_entry: bool) void {
            const cFn = @extern(*const fn (*FontChooser, bool) callconv(.c) void, .{ .name = "gtk_font_chooser_set_show_preview_entry" });
            const ret = cFn(self, _show_preview_entry);
            return ret;
        }
    }.setShowPreviewEntry;
    /// vfunc [font_activated](https://docs.gtk.org/gtk4/vfunc.FontChooser.font_activated.html)
    pub fn fontActivatedV(self: *FontChooser, _fontname: [*:0]const u8) void {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.font_activated.?;
        const ret = vFn(self, _fontname);
        return ret;
    }
    /// vfunc [get_font_face](https://docs.gtk.org/gtk4/vfunc.FontChooser.get_font_face.html)
    pub fn getFontFaceV(self: *FontChooser) ?*pango.FontFace {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font_face.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_font_family](https://docs.gtk.org/gtk4/vfunc.FontChooser.get_font_family.html)
    pub fn getFontFamilyV(self: *FontChooser) ?*pango.FontFamily {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font_family.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_font_map](https://docs.gtk.org/gtk4/vfunc.FontChooser.get_font_map.html)
    pub fn getFontMapV(self: *FontChooser) ?*pango.FontMap {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font_map.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_font_size](https://docs.gtk.org/gtk4/vfunc.FontChooser.get_font_size.html)
    pub fn getFontSizeV(self: *FontChooser) i32 {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_font_size.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_filter_func](https://docs.gtk.org/gtk4/vfunc.FontChooser.set_filter_func.html)
    pub fn setFilterFuncV(self: *FontChooser, _filter: ?gtk.FontFilterFunc, _user_data: ?*anyopaque, _destroy: glib.DestroyNotify) void {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_filter_func.?;
        const ret = vFn(self, _filter, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// vfunc [set_font_map](https://docs.gtk.org/gtk4/vfunc.FontChooser.set_font_map.html)
    pub fn setFontMapV(self: *FontChooser, _fontmap: ?*pango.FontMap) void {
        const class: *FontChooserIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_font_map.?;
        const ret = vFn(self, _fontmap);
        return ret;
    }
    /// signal [font-activated](https://docs.gtk.org/gtk4/signal.FontChooser.font-activated.html)
    pub fn connectFontActivated(self: *FontChooser, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("font-activated", handler, args, flags, &.{ void, *FontChooser, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_chooser_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [FontChooserDialog](https://docs.gtk.org/gtk4/class.FontChooserDialog.html)
pub const FontChooserDialog = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.FontChooser, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FontChooserDialog.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_title: ?[*:0]const u8, _parent: ?*gtk.Window) *FontChooserDialog {
            const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.Window) callconv(.c) *FontChooserDialog, .{ .name = "gtk_font_chooser_dialog_new" });
            const ret = cFn(_title, _parent);
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_chooser_dialog_get_type" });
        return cFn();
    }
};
/// Struct [FontChooserIface](https://docs.gtk.org/gtk4/struct.FontChooserIface.html)
pub const FontChooserIface = extern struct {
    base_iface: gobject.TypeInterface,
    get_font_family: ?*const fn (_fontchooser: *gtk.FontChooser) callconv(.c) ?*pango.FontFamily,
    get_font_face: ?*const fn (_fontchooser: *gtk.FontChooser) callconv(.c) ?*pango.FontFace,
    get_font_size: ?*const fn (_fontchooser: *gtk.FontChooser) callconv(.c) i32,
    set_filter_func: ?*const fn (_fontchooser: *gtk.FontChooser, _filter: ?gtk.FontFilterFunc, _user_data: ?*anyopaque, _destroy: glib.DestroyNotify) callconv(.c) void,
    font_activated: ?*const fn (_chooser: *gtk.FontChooser, _fontname: [*:0]const u8) callconv(.c) void,
    set_font_map: ?*const fn (_fontchooser: *gtk.FontChooser, _fontmap: ?*pango.FontMap) callconv(.c) void,
    get_font_map: ?*const fn (_fontchooser: *gtk.FontChooser) callconv(.c) ?*pango.FontMap,
    padding: [10]?*anyopaque,
};
/// Flags [FontChooserLevel](https://docs.gtk.org/gtk4/flags.FontChooserLevel.html)
pub const FontChooserLevel = packed struct(u32) {
    style: bool = false,
    size: bool = false,
    variations: bool = false,
    features: bool = false,
    _: u28 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_chooser_level_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [FontChooserWidget](https://docs.gtk.org/gtk4/class.FontChooserWidget.html)
/// - property [tweak-action](https://docs.gtk.org/gtk4/property.FontChooserWidget.tweak-action.html): (r-) `gio.Action`
pub const FontChooserWidget = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.FontChooser };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FontChooserWidget.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *FontChooserWidget {
            const cFn = @extern(*const fn () callconv(.c) *FontChooserWidget, .{ .name = "gtk_font_chooser_widget_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_chooser_widget_get_type" });
        return cFn();
    }
};
/// Class [FontDialog](https://docs.gtk.org/gtk4/class.FontDialog.html)
/// - property [filter](https://docs.gtk.org/gtk4/property.FontDialog.filter.html): (rw) `gtk.Filter`
/// - property [font-map](https://docs.gtk.org/gtk4/property.FontDialog.font-map.html): (rw) `pango.FontMap`
/// - property [language](https://docs.gtk.org/gtk4/property.FontDialog.language.html): (rw) `pango.Language`
/// - property [modal](https://docs.gtk.org/gtk4/property.FontDialog.modal.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.FontDialog.title.html): (rw) `[*:0]const u8`
pub const FontDialog = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.FontDialogClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FontDialog.new.html)
    pub fn new() *FontDialog {
        const cFn = @extern(*const fn () callconv(.c) *FontDialog, .{ .name = "gtk_font_dialog_new" });
        const ret = cFn();
        return ret;
    }
    /// method [choose_face](https://docs.gtk.org/gtk4/method.FontDialog.choose_face.html)
    pub fn chooseFace(self: *FontDialog, _parent: ?*gtk.Window, _initial_value: ?*pango.FontFace, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FontDialog, ?*gtk.Window, ?*pango.FontFace, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_font_dialog_choose_face" });
        const ret = cFn(self, _parent, _initial_value, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_face_finish](https://docs.gtk.org/gtk4/method.FontDialog.choose_face_finish.html)
    pub fn chooseFaceFinish(self: *FontDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*pango.FontFace {
        const cFn = @extern(*const fn (*FontDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*pango.FontFace, .{ .name = "gtk_font_dialog_choose_face_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [choose_family](https://docs.gtk.org/gtk4/method.FontDialog.choose_family.html)
    pub fn chooseFamily(self: *FontDialog, _parent: ?*gtk.Window, _initial_value: ?*pango.FontFamily, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FontDialog, ?*gtk.Window, ?*pango.FontFamily, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_font_dialog_choose_family" });
        const ret = cFn(self, _parent, _initial_value, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_family_finish](https://docs.gtk.org/gtk4/method.FontDialog.choose_family_finish.html)
    pub fn chooseFamilyFinish(self: *FontDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*pango.FontFamily {
        const cFn = @extern(*const fn (*FontDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*pango.FontFamily, .{ .name = "gtk_font_dialog_choose_family_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [choose_font](https://docs.gtk.org/gtk4/method.FontDialog.choose_font.html)
    pub fn chooseFont(self: *FontDialog, _parent: ?*gtk.Window, _initial_value: ?*pango.FontDescription, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FontDialog, ?*gtk.Window, ?*pango.FontDescription, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_font_dialog_choose_font" });
        const ret = cFn(self, _parent, _initial_value, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_font_and_features](https://docs.gtk.org/gtk4/method.FontDialog.choose_font_and_features.html)
    pub fn chooseFontAndFeatures(self: *FontDialog, _parent: ?*gtk.Window, _initial_value: ?*pango.FontDescription, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*FontDialog, ?*gtk.Window, ?*pango.FontDescription, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_font_dialog_choose_font_and_features" });
        const ret = cFn(self, _parent, _initial_value, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [choose_font_and_features_finish](https://docs.gtk.org/gtk4/method.FontDialog.choose_font_and_features_finish.html)
    pub fn chooseFontAndFeaturesFinish(self: *FontDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!struct {
        ret: bool,
        font_desc: *pango.FontDescription,
        font_features: [*:0]u8,
        language: *pango.Language,
    } {
        var font_desc_out: *pango.FontDescription = undefined;
        const _font_desc = &font_desc_out;
        var font_features_out: [*:0]u8 = undefined;
        const _font_features = &font_features_out;
        var language_out: *pango.Language = undefined;
        const _language = &language_out;
        const cFn = @extern(*const fn (*FontDialog, *gio.AsyncResult, **pango.FontDescription, *[*:0]u8, **pango.Language, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_font_dialog_choose_font_and_features_finish" });
        const ret = cFn(self, _result, _font_desc, _font_features, _language, _error);
        if (_error.* != null) return error.GError;
        return .{ .ret = ret, .font_desc = font_desc_out, .font_features = font_features_out, .language = language_out };
    }
    /// method [choose_font_finish](https://docs.gtk.org/gtk4/method.FontDialog.choose_font_finish.html)
    pub fn chooseFontFinish(self: *FontDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*pango.FontDescription {
        const cFn = @extern(*const fn (*FontDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*pango.FontDescription, .{ .name = "gtk_font_dialog_choose_font_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_filter](https://docs.gtk.org/gtk4/method.FontDialog.get_filter.html)
    pub fn getFilter(self: *FontDialog) ?*gtk.Filter {
        const cFn = @extern(*const fn (*FontDialog) callconv(.c) ?*gtk.Filter, .{ .name = "gtk_font_dialog_get_filter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_map](https://docs.gtk.org/gtk4/method.FontDialog.get_font_map.html)
    pub fn getFontMap(self: *FontDialog) ?*pango.FontMap {
        const cFn = @extern(*const fn (*FontDialog) callconv(.c) ?*pango.FontMap, .{ .name = "gtk_font_dialog_get_font_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_language](https://docs.gtk.org/gtk4/method.FontDialog.get_language.html)
    pub fn getLanguage(self: *FontDialog) ?*pango.Language {
        const cFn = @extern(*const fn (*FontDialog) callconv(.c) ?*pango.Language, .{ .name = "gtk_font_dialog_get_language" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.FontDialog.get_modal.html)
    pub fn getModal(self: *FontDialog) bool {
        const cFn = @extern(*const fn (*FontDialog) callconv(.c) bool, .{ .name = "gtk_font_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.FontDialog.get_title.html)
    pub fn getTitle(self: *FontDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*FontDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_font_dialog_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_filter](https://docs.gtk.org/gtk4/method.FontDialog.set_filter.html)
    pub fn setFilter(self: *FontDialog, _filter: ?*gtk.Filter) void {
        const cFn = @extern(*const fn (*FontDialog, ?*gtk.Filter) callconv(.c) void, .{ .name = "gtk_font_dialog_set_filter" });
        const ret = cFn(self, _filter);
        return ret;
    }
    /// method [set_font_map](https://docs.gtk.org/gtk4/method.FontDialog.set_font_map.html)
    pub fn setFontMap(self: *FontDialog, _fontmap: ?*pango.FontMap) void {
        const cFn = @extern(*const fn (*FontDialog, ?*pango.FontMap) callconv(.c) void, .{ .name = "gtk_font_dialog_set_font_map" });
        const ret = cFn(self, _fontmap);
        return ret;
    }
    /// method [set_language](https://docs.gtk.org/gtk4/method.FontDialog.set_language.html)
    pub fn setLanguage(self: *FontDialog, _language: *pango.Language) void {
        const cFn = @extern(*const fn (*FontDialog, *pango.Language) callconv(.c) void, .{ .name = "gtk_font_dialog_set_language" });
        const ret = cFn(self, _language);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.FontDialog.set_modal.html)
    pub fn setModal(self: *FontDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*FontDialog, bool) callconv(.c) void, .{ .name = "gtk_font_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.FontDialog.set_title.html)
    pub fn setTitle(self: *FontDialog, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_dialog_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_dialog_get_type" });
        return cFn();
    }
};
/// Class [FontDialogButton](https://docs.gtk.org/gtk4/class.FontDialogButton.html)
/// - property [dialog](https://docs.gtk.org/gtk4/property.FontDialogButton.dialog.html): (rw) `gtk.FontDialog`
/// - property [font-desc](https://docs.gtk.org/gtk4/property.FontDialogButton.font-desc.html): (rw) `pango.FontDescription`
/// - property [font-features](https://docs.gtk.org/gtk4/property.FontDialogButton.font-features.html): (rw) `[*:0]const u8`
/// - property [language](https://docs.gtk.org/gtk4/property.FontDialogButton.language.html): (rw) `pango.Language`
/// - property [level](https://docs.gtk.org/gtk4/property.FontDialogButton.level.html): (rw) `gtk.FontLevel`
/// - property [use-font](https://docs.gtk.org/gtk4/property.FontDialogButton.use-font.html): (rw) `bool`
/// - property [use-size](https://docs.gtk.org/gtk4/property.FontDialogButton.use-size.html): (rw) `bool`
pub const FontDialogButton = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.FontDialogButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.FontDialogButton.new.html)
    pub fn new(_dialog: ?*gtk.FontDialog) *FontDialogButton {
        const cFn = @extern(*const fn (?*gtk.FontDialog) callconv(.c) *FontDialogButton, .{ .name = "gtk_font_dialog_button_new" });
        const ret = cFn(_dialog);
        return ret;
    }
    /// method [get_dialog](https://docs.gtk.org/gtk4/method.FontDialogButton.get_dialog.html)
    pub fn getDialog(self: *FontDialogButton) ?*gtk.FontDialog {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) ?*gtk.FontDialog, .{ .name = "gtk_font_dialog_button_get_dialog" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_desc](https://docs.gtk.org/gtk4/method.FontDialogButton.get_font_desc.html)
    pub fn getFontDesc(self: *FontDialogButton) ?*pango.FontDescription {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) ?*pango.FontDescription, .{ .name = "gtk_font_dialog_button_get_font_desc" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_features](https://docs.gtk.org/gtk4/method.FontDialogButton.get_font_features.html)
    pub fn getFontFeatures(self: *FontDialogButton) ?[*:0]u8 {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) ?[*:0]u8, .{ .name = "gtk_font_dialog_button_get_font_features" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_language](https://docs.gtk.org/gtk4/method.FontDialogButton.get_language.html)
    pub fn getLanguage(self: *FontDialogButton) ?*pango.Language {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) ?*pango.Language, .{ .name = "gtk_font_dialog_button_get_language" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_level](https://docs.gtk.org/gtk4/method.FontDialogButton.get_level.html)
    pub fn getLevel(self: *FontDialogButton) gtk.FontLevel {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) gtk.FontLevel, .{ .name = "gtk_font_dialog_button_get_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_font](https://docs.gtk.org/gtk4/method.FontDialogButton.get_use_font.html)
    pub fn getUseFont(self: *FontDialogButton) bool {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) bool, .{ .name = "gtk_font_dialog_button_get_use_font" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_size](https://docs.gtk.org/gtk4/method.FontDialogButton.get_use_size.html)
    pub fn getUseSize(self: *FontDialogButton) bool {
        const cFn = @extern(*const fn (*FontDialogButton) callconv(.c) bool, .{ .name = "gtk_font_dialog_button_get_use_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_dialog](https://docs.gtk.org/gtk4/method.FontDialogButton.set_dialog.html)
    pub fn setDialog(self: *FontDialogButton, _dialog: *gtk.FontDialog) void {
        const cFn = @extern(*const fn (*FontDialogButton, *gtk.FontDialog) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_dialog" });
        const ret = cFn(self, _dialog);
        return ret;
    }
    /// method [set_font_desc](https://docs.gtk.org/gtk4/method.FontDialogButton.set_font_desc.html)
    pub fn setFontDesc(self: *FontDialogButton, _font_desc: *pango.FontDescription) void {
        const cFn = @extern(*const fn (*FontDialogButton, *pango.FontDescription) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_font_desc" });
        const ret = cFn(self, _font_desc);
        return ret;
    }
    /// method [set_font_features](https://docs.gtk.org/gtk4/method.FontDialogButton.set_font_features.html)
    pub fn setFontFeatures(self: *FontDialogButton, _font_features: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*FontDialogButton, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_font_features" });
        const ret = cFn(self, _font_features);
        return ret;
    }
    /// method [set_language](https://docs.gtk.org/gtk4/method.FontDialogButton.set_language.html)
    pub fn setLanguage(self: *FontDialogButton, _language: ?*pango.Language) void {
        const cFn = @extern(*const fn (*FontDialogButton, ?*pango.Language) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_language" });
        const ret = cFn(self, _language);
        return ret;
    }
    /// method [set_level](https://docs.gtk.org/gtk4/method.FontDialogButton.set_level.html)
    pub fn setLevel(self: *FontDialogButton, _level: gtk.FontLevel) void {
        const cFn = @extern(*const fn (*FontDialogButton, gtk.FontLevel) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_level" });
        const ret = cFn(self, _level);
        return ret;
    }
    /// method [set_use_font](https://docs.gtk.org/gtk4/method.FontDialogButton.set_use_font.html)
    pub fn setUseFont(self: *FontDialogButton, _use_font: bool) void {
        const cFn = @extern(*const fn (*FontDialogButton, bool) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_use_font" });
        const ret = cFn(self, _use_font);
        return ret;
    }
    /// method [set_use_size](https://docs.gtk.org/gtk4/method.FontDialogButton.set_use_size.html)
    pub fn setUseSize(self: *FontDialogButton, _use_size: bool) void {
        const cFn = @extern(*const fn (*FontDialogButton, bool) callconv(.c) void, .{ .name = "gtk_font_dialog_button_set_use_size" });
        const ret = cFn(self, _use_size);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.FontDialogButton.activate.html)
    pub fn connectActivate(self: *FontDialogButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *FontDialogButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_dialog_button_get_type" });
        return cFn();
    }
};
pub const FontDialogButtonClass = extern struct {
    parent_class: gtk.WidgetClass,
};
pub const FontDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// callback [FontFilterFunc](https://docs.gtk.org/gtk4/callback.FontFilterFunc.html)
pub const FontFilterFunc = *const fn (_family: *pango.FontFamily, _face: *pango.FontFace, _data: ?*anyopaque) callconv(.c) bool;
/// Enum [FontLevel](https://docs.gtk.org/gtk4/enum.FontLevel.html)
pub const FontLevel = enum(u32) {
    family = 0,
    face = 1,
    font = 2,
    features = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_font_level_get_type" });
        return cFn();
    }
};
/// Class [Frame](https://docs.gtk.org/gtk4/class.Frame.html)
/// - property [child](https://docs.gtk.org/gtk4/property.Frame.child.html): (rw) `gtk.Widget`
/// - property [label](https://docs.gtk.org/gtk4/property.Frame.label.html): (rw) `[*:0]const u8`
/// - property [label-widget](https://docs.gtk.org/gtk4/property.Frame.label-widget.html): (rw) `gtk.Widget`
/// - property [label-xalign](https://docs.gtk.org/gtk4/property.Frame.label-xalign.html): (rw) `f32`
pub const Frame = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.FrameClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Frame.new.html)
    pub fn new(_label: ?[*:0]const u8) *Frame {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Frame, .{ .name = "gtk_frame_new" });
        const ret = cFn(_label);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Frame.get_child.html)
    pub fn getChild(self: *Frame) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Frame) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_frame_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.Frame.get_label.html)
    pub fn getLabel(self: *Frame) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Frame) callconv(.c) ?[*:0]u8, .{ .name = "gtk_frame_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label_align](https://docs.gtk.org/gtk4/method.Frame.get_label_align.html)
    pub fn getLabelAlign(self: *Frame) f32 {
        const cFn = @extern(*const fn (*Frame) callconv(.c) f32, .{ .name = "gtk_frame_get_label_align" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label_widget](https://docs.gtk.org/gtk4/method.Frame.get_label_widget.html)
    pub fn getLabelWidget(self: *Frame) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Frame) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_frame_get_label_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Frame.set_child.html)
    pub fn setChild(self: *Frame, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Frame, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_frame_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.Frame.set_label.html)
    pub fn setLabel(self: *Frame, _label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Frame, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_frame_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_label_align](https://docs.gtk.org/gtk4/method.Frame.set_label_align.html)
    pub fn setLabelAlign(self: *Frame, _xalign: f32) void {
        const cFn = @extern(*const fn (*Frame, f32) callconv(.c) void, .{ .name = "gtk_frame_set_label_align" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_label_widget](https://docs.gtk.org/gtk4/method.Frame.set_label_widget.html)
    pub fn setLabelWidget(self: *Frame, _label_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Frame, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_frame_set_label_widget" });
        const ret = cFn(self, _label_widget);
        return ret;
    }
    /// vfunc [compute_child_allocation](https://docs.gtk.org/gtk4/vfunc.Frame.compute_child_allocation.html)
    pub fn computeChildAllocationV(self: *Frame, _allocation: *gdk.Rectangle) void {
        const class: *FrameClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.compute_child_allocation.?;
        const ret = vFn(self, _allocation);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_frame_get_type" });
        return cFn();
    }
};
pub const FrameClass = extern struct {
    parent_class: gtk.WidgetClass,
    compute_child_allocation: ?*const fn (_frame: *gtk.Frame, _allocation: *gdk.Rectangle) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Class [GLArea](https://docs.gtk.org/gtk4/class.GLArea.html)
/// - property [allowed-apis](https://docs.gtk.org/gtk4/property.GLArea.allowed-apis.html): (rw) `gdk.GLAPI`
/// - property [api](https://docs.gtk.org/gtk4/property.GLArea.api.html): (r-) `gdk.GLAPI`
/// - property [auto-render](https://docs.gtk.org/gtk4/property.GLArea.auto-render.html): (rw) `bool`
/// - property [context](https://docs.gtk.org/gtk4/property.GLArea.context.html): (r-) `gdk.GLContext`
/// - property [has-depth-buffer](https://docs.gtk.org/gtk4/property.GLArea.has-depth-buffer.html): (rw) `bool`
/// - property [has-stencil-buffer](https://docs.gtk.org/gtk4/property.GLArea.has-stencil-buffer.html): (rw) `bool`
/// - property [use-es](https://docs.gtk.org/gtk4/property.GLArea.use-es.html): (rw) `bool`
pub const GLArea = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.GLAreaClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GLArea.new.html)
    pub fn new() *GLArea {
        const cFn = @extern(*const fn () callconv(.c) *GLArea, .{ .name = "gtk_gl_area_new" });
        const ret = cFn();
        return ret;
    }
    /// method [attach_buffers](https://docs.gtk.org/gtk4/method.GLArea.attach_buffers.html)
    pub fn attachBuffers(self: *GLArea) void {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) void, .{ .name = "gtk_gl_area_attach_buffers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_allowed_apis](https://docs.gtk.org/gtk4/method.GLArea.get_allowed_apis.html)
    pub fn getAllowedApis(self: *GLArea) gdk.GLAPI {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) gdk.GLAPI, .{ .name = "gtk_gl_area_get_allowed_apis" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_api](https://docs.gtk.org/gtk4/method.GLArea.get_api.html)
    pub fn getApi(self: *GLArea) gdk.GLAPI {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) gdk.GLAPI, .{ .name = "gtk_gl_area_get_api" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_auto_render](https://docs.gtk.org/gtk4/method.GLArea.get_auto_render.html)
    pub fn getAutoRender(self: *GLArea) bool {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) bool, .{ .name = "gtk_gl_area_get_auto_render" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_context](https://docs.gtk.org/gtk4/method.GLArea.get_context.html)
    pub fn getContext(self: *GLArea) ?*gdk.GLContext {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) ?*gdk.GLContext, .{ .name = "gtk_gl_area_get_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_error](https://docs.gtk.org/gtk4/method.GLArea.get_error.html)
    pub fn getError(self: *GLArea) ?*core.Error {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) ?*core.Error, .{ .name = "gtk_gl_area_get_error" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_depth_buffer](https://docs.gtk.org/gtk4/method.GLArea.get_has_depth_buffer.html)
    pub fn getHasDepthBuffer(self: *GLArea) bool {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) bool, .{ .name = "gtk_gl_area_get_has_depth_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_stencil_buffer](https://docs.gtk.org/gtk4/method.GLArea.get_has_stencil_buffer.html)
    pub fn getHasStencilBuffer(self: *GLArea) bool {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) bool, .{ .name = "gtk_gl_area_get_has_stencil_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_required_version](https://docs.gtk.org/gtk4/method.GLArea.get_required_version.html)
    pub fn getRequiredVersion(self: *GLArea) struct {
        ret: void,
        major: i32,
        minor: i32,
    } {
        var major_out: i32 = undefined;
        const _major = &major_out;
        var minor_out: i32 = undefined;
        const _minor = &minor_out;
        const cFn = @extern(*const fn (*GLArea, *i32, *i32) callconv(.c) void, .{ .name = "gtk_gl_area_get_required_version" });
        const ret = cFn(self, _major, _minor);
        return .{ .ret = ret, .major = major_out, .minor = minor_out };
    }
    /// Deprecated:
    /// method [get_use_es](https://docs.gtk.org/gtk4/method.GLArea.get_use_es.html)
    pub const getUseEs = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getUseEs(self: *GLArea) bool {
            const cFn = @extern(*const fn (*GLArea) callconv(.c) bool, .{ .name = "gtk_gl_area_get_use_es" });
            const ret = cFn(self);
            return ret;
        }
    }.getUseEs;
    /// method [make_current](https://docs.gtk.org/gtk4/method.GLArea.make_current.html)
    pub fn makeCurrent(self: *GLArea) void {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) void, .{ .name = "gtk_gl_area_make_current" });
        const ret = cFn(self);
        return ret;
    }
    /// method [queue_render](https://docs.gtk.org/gtk4/method.GLArea.queue_render.html)
    pub fn queueRender(self: *GLArea) void {
        const cFn = @extern(*const fn (*GLArea) callconv(.c) void, .{ .name = "gtk_gl_area_queue_render" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_allowed_apis](https://docs.gtk.org/gtk4/method.GLArea.set_allowed_apis.html)
    pub fn setAllowedApis(self: *GLArea, _apis: gdk.GLAPI) void {
        const cFn = @extern(*const fn (*GLArea, gdk.GLAPI) callconv(.c) void, .{ .name = "gtk_gl_area_set_allowed_apis" });
        const ret = cFn(self, _apis);
        return ret;
    }
    /// method [set_auto_render](https://docs.gtk.org/gtk4/method.GLArea.set_auto_render.html)
    pub fn setAutoRender(self: *GLArea, _auto_render: bool) void {
        const cFn = @extern(*const fn (*GLArea, bool) callconv(.c) void, .{ .name = "gtk_gl_area_set_auto_render" });
        const ret = cFn(self, _auto_render);
        return ret;
    }
    /// method [set_error](https://docs.gtk.org/gtk4/method.GLArea.set_error.html)
    pub fn setError(self: *GLArea, _error: ?*core.Error) void {
        const cFn = @extern(*const fn (*GLArea, ?*core.Error) callconv(.c) void, .{ .name = "gtk_gl_area_set_error" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [set_has_depth_buffer](https://docs.gtk.org/gtk4/method.GLArea.set_has_depth_buffer.html)
    pub fn setHasDepthBuffer(self: *GLArea, _has_depth_buffer: bool) void {
        const cFn = @extern(*const fn (*GLArea, bool) callconv(.c) void, .{ .name = "gtk_gl_area_set_has_depth_buffer" });
        const ret = cFn(self, _has_depth_buffer);
        return ret;
    }
    /// method [set_has_stencil_buffer](https://docs.gtk.org/gtk4/method.GLArea.set_has_stencil_buffer.html)
    pub fn setHasStencilBuffer(self: *GLArea, _has_stencil_buffer: bool) void {
        const cFn = @extern(*const fn (*GLArea, bool) callconv(.c) void, .{ .name = "gtk_gl_area_set_has_stencil_buffer" });
        const ret = cFn(self, _has_stencil_buffer);
        return ret;
    }
    /// method [set_required_version](https://docs.gtk.org/gtk4/method.GLArea.set_required_version.html)
    pub fn setRequiredVersion(self: *GLArea, _major: i32, _minor: i32) void {
        const cFn = @extern(*const fn (*GLArea, i32, i32) callconv(.c) void, .{ .name = "gtk_gl_area_set_required_version" });
        const ret = cFn(self, _major, _minor);
        return ret;
    }
    /// Deprecated:
    /// method [set_use_es](https://docs.gtk.org/gtk4/method.GLArea.set_use_es.html)
    pub const setUseEs = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setUseEs(self: *GLArea, _use_es: bool) void {
            const cFn = @extern(*const fn (*GLArea, bool) callconv(.c) void, .{ .name = "gtk_gl_area_set_use_es" });
            const ret = cFn(self, _use_es);
            return ret;
        }
    }.setUseEs;
    /// vfunc [render](https://docs.gtk.org/gtk4/vfunc.GLArea.render.html)
    pub fn renderV(self: *GLArea, _context: *gdk.GLContext) bool {
        const class: *GLAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.render.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [resize](https://docs.gtk.org/gtk4/vfunc.GLArea.resize.html)
    pub fn resizeV(self: *GLArea, _width: i32, _height: i32) void {
        const class: *GLAreaClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.resize.?;
        const ret = vFn(self, _width, _height);
        return ret;
    }
    /// signal [create-context](https://docs.gtk.org/gtk4/signal.GLArea.create-context.html)
    pub fn connectCreateContext(self: *GLArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("create-context", handler, args, flags, &.{ gdk.GLContext, *GLArea });
    }
    /// signal [render](https://docs.gtk.org/gtk4/signal.GLArea.render.html)
    pub fn connectRender(self: *GLArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("render", handler, args, flags, &.{ bool, *GLArea, *gdk.GLContext });
    }
    /// signal [resize](https://docs.gtk.org/gtk4/signal.GLArea.resize.html)
    pub fn connectResize(self: *GLArea, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("resize", handler, args, flags, &.{ void, *GLArea, i32, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gl_area_get_type" });
        return cFn();
    }
};
pub const GLAreaClass = extern struct {
    parent_class: gtk.WidgetClass,
    render: ?*const fn (_area: *gtk.GLArea, _context: *gdk.GLContext) callconv(.c) bool,
    resize: ?*const fn (_area: *gtk.GLArea, _width: i32, _height: i32) callconv(.c) void,
    create_context: ?*anyopaque,
    _padding: [8]?*anyopaque,
};
/// Class [Gesture](https://docs.gtk.org/gtk4/class.Gesture.html)
/// - property [n-points](https://docs.gtk.org/gtk4/property.Gesture.n-points.html): (r-) `u32`
pub const Gesture = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.GestureClass;
    /// method [get_bounding_box](https://docs.gtk.org/gtk4/method.Gesture.get_bounding_box.html)
    pub fn getBoundingBox(self: *Gesture, _rect: *gdk.Rectangle) bool {
        const cFn = @extern(*const fn (*Gesture, *gdk.Rectangle) callconv(.c) bool, .{ .name = "gtk_gesture_get_bounding_box" });
        const ret = cFn(self, _rect);
        return ret;
    }
    /// method [get_bounding_box_center](https://docs.gtk.org/gtk4/method.Gesture.get_bounding_box_center.html)
    pub fn getBoundingBoxCenter(self: *Gesture) ?struct {
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Gesture, *f64, *f64) callconv(.c) bool, .{ .name = "gtk_gesture_get_bounding_box_center" });
        const ret = cFn(self, _x, _y);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out };
    }
    /// method [get_device](https://docs.gtk.org/gtk4/method.Gesture.get_device.html)
    pub fn getDevice(self: *Gesture) ?*gdk.Device {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) ?*gdk.Device, .{ .name = "gtk_gesture_get_device" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_group](https://docs.gtk.org/gtk4/method.Gesture.get_group.html)
    pub fn getGroup(self: *Gesture) ?*core.List {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) ?*core.List, .{ .name = "gtk_gesture_get_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_last_event](https://docs.gtk.org/gtk4/method.Gesture.get_last_event.html)
    pub fn getLastEvent(self: *Gesture, _sequence: ?*gdk.EventSequence) ?*gdk.Event {
        const cFn = @extern(*const fn (*Gesture, ?*gdk.EventSequence) callconv(.c) ?*gdk.Event, .{ .name = "gtk_gesture_get_last_event" });
        const ret = cFn(self, _sequence);
        return ret;
    }
    /// method [get_last_updated_sequence](https://docs.gtk.org/gtk4/method.Gesture.get_last_updated_sequence.html)
    pub fn getLastUpdatedSequence(self: *Gesture) ?*gdk.EventSequence {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) ?*gdk.EventSequence, .{ .name = "gtk_gesture_get_last_updated_sequence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_point](https://docs.gtk.org/gtk4/method.Gesture.get_point.html)
    pub fn getPoint(self: *Gesture, _sequence: ?*gdk.EventSequence) ?struct {
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Gesture, ?*gdk.EventSequence, ?*f64, ?*f64) callconv(.c) bool, .{ .name = "gtk_gesture_get_point" });
        const ret = cFn(self, _sequence, _x, _y);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out };
    }
    /// method [get_sequence_state](https://docs.gtk.org/gtk4/method.Gesture.get_sequence_state.html)
    pub fn getSequenceState(self: *Gesture, _sequence: *gdk.EventSequence) gtk.EventSequenceState {
        const cFn = @extern(*const fn (*Gesture, *gdk.EventSequence) callconv(.c) gtk.EventSequenceState, .{ .name = "gtk_gesture_get_sequence_state" });
        const ret = cFn(self, _sequence);
        return ret;
    }
    /// method [get_sequences](https://docs.gtk.org/gtk4/method.Gesture.get_sequences.html)
    pub fn getSequences(self: *Gesture) ?*core.List {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) ?*core.List, .{ .name = "gtk_gesture_get_sequences" });
        const ret = cFn(self);
        return ret;
    }
    /// method [group](https://docs.gtk.org/gtk4/method.Gesture.group.html)
    pub fn group(self: *Gesture, _gesture: *gtk.Gesture) void {
        const cFn = @extern(*const fn (*Gesture, *gtk.Gesture) callconv(.c) void, .{ .name = "gtk_gesture_group" });
        const ret = cFn(self, _gesture);
        return ret;
    }
    /// method [handles_sequence](https://docs.gtk.org/gtk4/method.Gesture.handles_sequence.html)
    pub fn handlesSequence(self: *Gesture, _sequence: ?*gdk.EventSequence) bool {
        const cFn = @extern(*const fn (*Gesture, ?*gdk.EventSequence) callconv(.c) bool, .{ .name = "gtk_gesture_handles_sequence" });
        const ret = cFn(self, _sequence);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gtk4/method.Gesture.is_active.html)
    pub fn isActive(self: *Gesture) bool {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) bool, .{ .name = "gtk_gesture_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_grouped_with](https://docs.gtk.org/gtk4/method.Gesture.is_grouped_with.html)
    pub fn isGroupedWith(self: *Gesture, _other: *gtk.Gesture) bool {
        const cFn = @extern(*const fn (*Gesture, *gtk.Gesture) callconv(.c) bool, .{ .name = "gtk_gesture_is_grouped_with" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [is_recognized](https://docs.gtk.org/gtk4/method.Gesture.is_recognized.html)
    pub fn isRecognized(self: *Gesture) bool {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) bool, .{ .name = "gtk_gesture_is_recognized" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [set_sequence_state](https://docs.gtk.org/gtk4/method.Gesture.set_sequence_state.html)
    pub const setSequenceState = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSequenceState(self: *Gesture, _sequence: *gdk.EventSequence, _state: gtk.EventSequenceState) bool {
            const cFn = @extern(*const fn (*Gesture, *gdk.EventSequence, gtk.EventSequenceState) callconv(.c) bool, .{ .name = "gtk_gesture_set_sequence_state" });
            const ret = cFn(self, _sequence, _state);
            return ret;
        }
    }.setSequenceState;
    /// method [set_state](https://docs.gtk.org/gtk4/method.Gesture.set_state.html)
    pub fn setState(self: *Gesture, _state: gtk.EventSequenceState) bool {
        const cFn = @extern(*const fn (*Gesture, gtk.EventSequenceState) callconv(.c) bool, .{ .name = "gtk_gesture_set_state" });
        const ret = cFn(self, _state);
        return ret;
    }
    /// method [ungroup](https://docs.gtk.org/gtk4/method.Gesture.ungroup.html)
    pub fn ungroup(self: *Gesture) void {
        const cFn = @extern(*const fn (*Gesture) callconv(.c) void, .{ .name = "gtk_gesture_ungroup" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [begin](https://docs.gtk.org/gtk4/signal.Gesture.begin.html)
    pub fn connectBegin(self: *Gesture, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("begin", handler, args, flags, &.{ void, *Gesture, *gdk.EventSequence });
    }
    /// signal [cancel](https://docs.gtk.org/gtk4/signal.Gesture.cancel.html)
    pub fn connectCancel(self: *Gesture, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancel", handler, args, flags, &.{ void, *Gesture, *gdk.EventSequence });
    }
    /// signal [end](https://docs.gtk.org/gtk4/signal.Gesture.end.html)
    pub fn connectEnd(self: *Gesture, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("end", handler, args, flags, &.{ void, *Gesture, *gdk.EventSequence });
    }
    /// signal [sequence-state-changed](https://docs.gtk.org/gtk4/signal.Gesture.sequence-state-changed.html)
    pub fn connectSequenceStateChanged(self: *Gesture, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("sequence-state-changed", handler, args, flags, &.{ void, *Gesture, *gdk.EventSequence, gtk.EventSequenceState });
    }
    /// signal [update](https://docs.gtk.org/gtk4/signal.Gesture.update.html)
    pub fn connectUpdate(self: *Gesture, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("update", handler, args, flags, &.{ void, *Gesture, *gdk.EventSequence });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_get_type" });
        return cFn();
    }
};
pub const GestureClass = opaque {};
/// Class [GestureClick](https://docs.gtk.org/gtk4/class.GestureClick.html)
pub const GestureClick = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.GestureClickClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureClick.new.html)
    pub fn new() *GestureClick {
        const cFn = @extern(*const fn () callconv(.c) *GestureClick, .{ .name = "gtk_gesture_click_new" });
        const ret = cFn();
        return ret;
    }
    /// signal [pressed](https://docs.gtk.org/gtk4/signal.GestureClick.pressed.html)
    pub fn connectPressed(self: *GestureClick, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("pressed", handler, args, flags, &.{ void, *GestureClick, i32, f64, f64 });
    }
    /// signal [released](https://docs.gtk.org/gtk4/signal.GestureClick.released.html)
    pub fn connectReleased(self: *GestureClick, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("released", handler, args, flags, &.{ void, *GestureClick, i32, f64, f64 });
    }
    /// signal [stopped](https://docs.gtk.org/gtk4/signal.GestureClick.stopped.html)
    pub fn connectStopped(self: *GestureClick, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("stopped", handler, args, flags, &.{ void, *GestureClick });
    }
    /// signal [unpaired-release](https://docs.gtk.org/gtk4/signal.GestureClick.unpaired-release.html)
    pub fn connectUnpairedRelease(self: *GestureClick, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unpaired-release", handler, args, flags, &.{ void, *GestureClick, f64, f64, u32, *gdk.EventSequence });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_click_get_type" });
        return cFn();
    }
};
pub const GestureClickClass = opaque {};
/// Class [GestureDrag](https://docs.gtk.org/gtk4/class.GestureDrag.html)
pub const GestureDrag = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.GestureDragClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureDrag.new.html)
    pub fn new() *GestureDrag {
        const cFn = @extern(*const fn () callconv(.c) *GestureDrag, .{ .name = "gtk_gesture_drag_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gtk4/method.GestureDrag.get_offset.html)
    pub fn getOffset(self: *GestureDrag) ?struct {
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*GestureDrag, ?*f64, ?*f64) callconv(.c) bool, .{ .name = "gtk_gesture_drag_get_offset" });
        const ret = cFn(self, _x, _y);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out };
    }
    /// method [get_start_point](https://docs.gtk.org/gtk4/method.GestureDrag.get_start_point.html)
    pub fn getStartPoint(self: *GestureDrag) ?struct {
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*GestureDrag, ?*f64, ?*f64) callconv(.c) bool, .{ .name = "gtk_gesture_drag_get_start_point" });
        const ret = cFn(self, _x, _y);
        if (!ret) return null;
        return .{ .x = x_out, .y = y_out };
    }
    /// signal [drag-begin](https://docs.gtk.org/gtk4/signal.GestureDrag.drag-begin.html)
    pub fn connectDragBegin(self: *GestureDrag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-begin", handler, args, flags, &.{ void, *GestureDrag, f64, f64 });
    }
    /// signal [drag-end](https://docs.gtk.org/gtk4/signal.GestureDrag.drag-end.html)
    pub fn connectDragEnd(self: *GestureDrag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-end", handler, args, flags, &.{ void, *GestureDrag, f64, f64 });
    }
    /// signal [drag-update](https://docs.gtk.org/gtk4/signal.GestureDrag.drag-update.html)
    pub fn connectDragUpdate(self: *GestureDrag, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("drag-update", handler, args, flags, &.{ void, *GestureDrag, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_drag_get_type" });
        return cFn();
    }
};
pub const GestureDragClass = opaque {};
/// Class [GestureLongPress](https://docs.gtk.org/gtk4/class.GestureLongPress.html)
/// - property [delay-factor](https://docs.gtk.org/gtk4/property.GestureLongPress.delay-factor.html): (rw) `f64`
pub const GestureLongPress = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.GestureLongPressClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureLongPress.new.html)
    pub fn new() *GestureLongPress {
        const cFn = @extern(*const fn () callconv(.c) *GestureLongPress, .{ .name = "gtk_gesture_long_press_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_delay_factor](https://docs.gtk.org/gtk4/method.GestureLongPress.get_delay_factor.html)
    pub fn getDelayFactor(self: *GestureLongPress) f64 {
        const cFn = @extern(*const fn (*GestureLongPress) callconv(.c) f64, .{ .name = "gtk_gesture_long_press_get_delay_factor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_delay_factor](https://docs.gtk.org/gtk4/method.GestureLongPress.set_delay_factor.html)
    pub fn setDelayFactor(self: *GestureLongPress, _delay_factor: f64) void {
        const cFn = @extern(*const fn (*GestureLongPress, f64) callconv(.c) void, .{ .name = "gtk_gesture_long_press_set_delay_factor" });
        const ret = cFn(self, _delay_factor);
        return ret;
    }
    /// signal [cancelled](https://docs.gtk.org/gtk4/signal.GestureLongPress.cancelled.html)
    pub fn connectCancelled(self: *GestureLongPress, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancelled", handler, args, flags, &.{ void, *GestureLongPress });
    }
    /// signal [pressed](https://docs.gtk.org/gtk4/signal.GestureLongPress.pressed.html)
    pub fn connectPressed(self: *GestureLongPress, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("pressed", handler, args, flags, &.{ void, *GestureLongPress, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_long_press_get_type" });
        return cFn();
    }
};
pub const GestureLongPressClass = opaque {};
/// Class [GesturePan](https://docs.gtk.org/gtk4/class.GesturePan.html)
/// - property [orientation](https://docs.gtk.org/gtk4/property.GesturePan.orientation.html): (rw) `gtk.Orientation`
pub const GesturePan = opaque {
    pub const Parent = gtk.GestureDrag;
    pub const Class = gtk.GesturePanClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GesturePan.new.html)
    pub fn new(_orientation: gtk.Orientation) *GesturePan {
        const cFn = @extern(*const fn (gtk.Orientation) callconv(.c) *GesturePan, .{ .name = "gtk_gesture_pan_new" });
        const ret = cFn(_orientation);
        return ret;
    }
    /// method [get_orientation](https://docs.gtk.org/gtk4/method.GesturePan.get_orientation.html)
    pub fn getOrientation(self: *GesturePan) gtk.Orientation {
        const cFn = @extern(*const fn (*GesturePan) callconv(.c) gtk.Orientation, .{ .name = "gtk_gesture_pan_get_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_orientation](https://docs.gtk.org/gtk4/method.GesturePan.set_orientation.html)
    pub fn setOrientation(self: *GesturePan, _orientation: gtk.Orientation) void {
        const cFn = @extern(*const fn (*GesturePan, gtk.Orientation) callconv(.c) void, .{ .name = "gtk_gesture_pan_set_orientation" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// signal [pan](https://docs.gtk.org/gtk4/signal.GesturePan.pan.html)
    pub fn connectPan(self: *GesturePan, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("pan", handler, args, flags, &.{ void, *GesturePan, gtk.PanDirection, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_pan_get_type" });
        return cFn();
    }
};
pub const GesturePanClass = opaque {};
/// Class [GestureRotate](https://docs.gtk.org/gtk4/class.GestureRotate.html)
pub const GestureRotate = opaque {
    pub const Parent = gtk.Gesture;
    pub const Class = gtk.GestureRotateClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureRotate.new.html)
    pub fn new() *GestureRotate {
        const cFn = @extern(*const fn () callconv(.c) *GestureRotate, .{ .name = "gtk_gesture_rotate_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_angle_delta](https://docs.gtk.org/gtk4/method.GestureRotate.get_angle_delta.html)
    pub fn getAngleDelta(self: *GestureRotate) f64 {
        const cFn = @extern(*const fn (*GestureRotate) callconv(.c) f64, .{ .name = "gtk_gesture_rotate_get_angle_delta" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [angle-changed](https://docs.gtk.org/gtk4/signal.GestureRotate.angle-changed.html)
    pub fn connectAngleChanged(self: *GestureRotate, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("angle-changed", handler, args, flags, &.{ void, *GestureRotate, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_rotate_get_type" });
        return cFn();
    }
};
pub const GestureRotateClass = opaque {};
/// Class [GestureSingle](https://docs.gtk.org/gtk4/class.GestureSingle.html)
/// - property [button](https://docs.gtk.org/gtk4/property.GestureSingle.button.html): (rw) `u32`
/// - property [exclusive](https://docs.gtk.org/gtk4/property.GestureSingle.exclusive.html): (rw) `bool`
/// - property [touch-only](https://docs.gtk.org/gtk4/property.GestureSingle.touch-only.html): (rw) `bool`
pub const GestureSingle = opaque {
    pub const Parent = gtk.Gesture;
    pub const Class = gtk.GestureSingleClass;
    /// method [get_button](https://docs.gtk.org/gtk4/method.GestureSingle.get_button.html)
    pub fn getButton(self: *GestureSingle) u32 {
        const cFn = @extern(*const fn (*GestureSingle) callconv(.c) u32, .{ .name = "gtk_gesture_single_get_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_button](https://docs.gtk.org/gtk4/method.GestureSingle.get_current_button.html)
    pub fn getCurrentButton(self: *GestureSingle) u32 {
        const cFn = @extern(*const fn (*GestureSingle) callconv(.c) u32, .{ .name = "gtk_gesture_single_get_current_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_sequence](https://docs.gtk.org/gtk4/method.GestureSingle.get_current_sequence.html)
    pub fn getCurrentSequence(self: *GestureSingle) ?*gdk.EventSequence {
        const cFn = @extern(*const fn (*GestureSingle) callconv(.c) ?*gdk.EventSequence, .{ .name = "gtk_gesture_single_get_current_sequence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_exclusive](https://docs.gtk.org/gtk4/method.GestureSingle.get_exclusive.html)
    pub fn getExclusive(self: *GestureSingle) bool {
        const cFn = @extern(*const fn (*GestureSingle) callconv(.c) bool, .{ .name = "gtk_gesture_single_get_exclusive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_touch_only](https://docs.gtk.org/gtk4/method.GestureSingle.get_touch_only.html)
    pub fn getTouchOnly(self: *GestureSingle) bool {
        const cFn = @extern(*const fn (*GestureSingle) callconv(.c) bool, .{ .name = "gtk_gesture_single_get_touch_only" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_button](https://docs.gtk.org/gtk4/method.GestureSingle.set_button.html)
    pub fn setButton(self: *GestureSingle, _button: u32) void {
        const cFn = @extern(*const fn (*GestureSingle, u32) callconv(.c) void, .{ .name = "gtk_gesture_single_set_button" });
        const ret = cFn(self, _button);
        return ret;
    }
    /// method [set_exclusive](https://docs.gtk.org/gtk4/method.GestureSingle.set_exclusive.html)
    pub fn setExclusive(self: *GestureSingle, _exclusive: bool) void {
        const cFn = @extern(*const fn (*GestureSingle, bool) callconv(.c) void, .{ .name = "gtk_gesture_single_set_exclusive" });
        const ret = cFn(self, _exclusive);
        return ret;
    }
    /// method [set_touch_only](https://docs.gtk.org/gtk4/method.GestureSingle.set_touch_only.html)
    pub fn setTouchOnly(self: *GestureSingle, _touch_only: bool) void {
        const cFn = @extern(*const fn (*GestureSingle, bool) callconv(.c) void, .{ .name = "gtk_gesture_single_set_touch_only" });
        const ret = cFn(self, _touch_only);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_single_get_type" });
        return cFn();
    }
};
pub const GestureSingleClass = opaque {};
/// Class [GestureStylus](https://docs.gtk.org/gtk4/class.GestureStylus.html)
/// - property [stylus-only](https://docs.gtk.org/gtk4/property.GestureStylus.stylus-only.html): (rw) `bool`
pub const GestureStylus = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.GestureStylusClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureStylus.new.html)
    pub fn new() *GestureStylus {
        const cFn = @extern(*const fn () callconv(.c) *GestureStylus, .{ .name = "gtk_gesture_stylus_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_axes](https://docs.gtk.org/gtk4/method.GestureStylus.get_axes.html)
    pub fn getAxes(self: *GestureStylus, _axes: [*]gdk.AxisUse) ?[*]f64 {
        var values_out: [*]f64 = undefined;
        const _values = &values_out;
        const cFn = @extern(*const fn (*GestureStylus, [*]gdk.AxisUse, *[*]f64) callconv(.c) bool, .{ .name = "gtk_gesture_stylus_get_axes" });
        const ret = cFn(self, _axes, _values);
        if (!ret) return null;
        return values_out;
    }
    /// method [get_axis](https://docs.gtk.org/gtk4/method.GestureStylus.get_axis.html)
    pub fn getAxis(self: *GestureStylus, _axis: gdk.AxisUse) ?f64 {
        var value_out: f64 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*GestureStylus, gdk.AxisUse, *f64) callconv(.c) bool, .{ .name = "gtk_gesture_stylus_get_axis" });
        const ret = cFn(self, _axis, _value);
        if (!ret) return null;
        return value_out;
    }
    /// method [get_backlog](https://docs.gtk.org/gtk4/method.GestureStylus.get_backlog.html)
    pub fn getBacklog(self: *GestureStylus) ?struct {
        backlog: []gdk.TimeCoord,
    } {
        var backlog_out: [*]gdk.TimeCoord = undefined;
        const _backlog = &backlog_out;
        var n_elems_out: u32 = undefined;
        const _n_elems = &n_elems_out;
        const cFn = @extern(*const fn (*GestureStylus, *[*]gdk.TimeCoord, *u32) callconv(.c) bool, .{ .name = "gtk_gesture_stylus_get_backlog" });
        const ret = cFn(self, _backlog, _n_elems);
        if (!ret) return null;
        return .{ .backlog = backlog_out[0..@intCast(n_elems_out)] };
    }
    /// method [get_device_tool](https://docs.gtk.org/gtk4/method.GestureStylus.get_device_tool.html)
    pub fn getDeviceTool(self: *GestureStylus) ?*gdk.DeviceTool {
        const cFn = @extern(*const fn (*GestureStylus) callconv(.c) ?*gdk.DeviceTool, .{ .name = "gtk_gesture_stylus_get_device_tool" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_stylus_only](https://docs.gtk.org/gtk4/method.GestureStylus.get_stylus_only.html)
    pub fn getStylusOnly(self: *GestureStylus) bool {
        const cFn = @extern(*const fn (*GestureStylus) callconv(.c) bool, .{ .name = "gtk_gesture_stylus_get_stylus_only" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_stylus_only](https://docs.gtk.org/gtk4/method.GestureStylus.set_stylus_only.html)
    pub fn setStylusOnly(self: *GestureStylus, _stylus_only: bool) void {
        const cFn = @extern(*const fn (*GestureStylus, bool) callconv(.c) void, .{ .name = "gtk_gesture_stylus_set_stylus_only" });
        const ret = cFn(self, _stylus_only);
        return ret;
    }
    /// signal [down](https://docs.gtk.org/gtk4/signal.GestureStylus.down.html)
    pub fn connectDown(self: *GestureStylus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("down", handler, args, flags, &.{ void, *GestureStylus, f64, f64 });
    }
    /// signal [motion](https://docs.gtk.org/gtk4/signal.GestureStylus.motion.html)
    pub fn connectMotion(self: *GestureStylus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("motion", handler, args, flags, &.{ void, *GestureStylus, f64, f64 });
    }
    /// signal [proximity](https://docs.gtk.org/gtk4/signal.GestureStylus.proximity.html)
    pub fn connectProximity(self: *GestureStylus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("proximity", handler, args, flags, &.{ void, *GestureStylus, f64, f64 });
    }
    /// signal [up](https://docs.gtk.org/gtk4/signal.GestureStylus.up.html)
    pub fn connectUp(self: *GestureStylus, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("up", handler, args, flags, &.{ void, *GestureStylus, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_stylus_get_type" });
        return cFn();
    }
};
pub const GestureStylusClass = opaque {};
/// Class [GestureSwipe](https://docs.gtk.org/gtk4/class.GestureSwipe.html)
pub const GestureSwipe = opaque {
    pub const Parent = gtk.GestureSingle;
    pub const Class = gtk.GestureSwipeClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureSwipe.new.html)
    pub fn new() *GestureSwipe {
        const cFn = @extern(*const fn () callconv(.c) *GestureSwipe, .{ .name = "gtk_gesture_swipe_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_velocity](https://docs.gtk.org/gtk4/method.GestureSwipe.get_velocity.html)
    pub fn getVelocity(self: *GestureSwipe) ?struct {
        velocity_x: f64,
        velocity_y: f64,
    } {
        var velocity_x_out: f64 = undefined;
        const _velocity_x = &velocity_x_out;
        var velocity_y_out: f64 = undefined;
        const _velocity_y = &velocity_y_out;
        const cFn = @extern(*const fn (*GestureSwipe, *f64, *f64) callconv(.c) bool, .{ .name = "gtk_gesture_swipe_get_velocity" });
        const ret = cFn(self, _velocity_x, _velocity_y);
        if (!ret) return null;
        return .{ .velocity_x = velocity_x_out, .velocity_y = velocity_y_out };
    }
    /// signal [swipe](https://docs.gtk.org/gtk4/signal.GestureSwipe.swipe.html)
    pub fn connectSwipe(self: *GestureSwipe, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("swipe", handler, args, flags, &.{ void, *GestureSwipe, f64, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_swipe_get_type" });
        return cFn();
    }
};
pub const GestureSwipeClass = opaque {};
/// Class [GestureZoom](https://docs.gtk.org/gtk4/class.GestureZoom.html)
pub const GestureZoom = opaque {
    pub const Parent = gtk.Gesture;
    pub const Class = gtk.GestureZoomClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GestureZoom.new.html)
    pub fn new() *GestureZoom {
        const cFn = @extern(*const fn () callconv(.c) *GestureZoom, .{ .name = "gtk_gesture_zoom_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_scale_delta](https://docs.gtk.org/gtk4/method.GestureZoom.get_scale_delta.html)
    pub fn getScaleDelta(self: *GestureZoom) f64 {
        const cFn = @extern(*const fn (*GestureZoom) callconv(.c) f64, .{ .name = "gtk_gesture_zoom_get_scale_delta" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [scale-changed](https://docs.gtk.org/gtk4/signal.GestureZoom.scale-changed.html)
    pub fn connectScaleChanged(self: *GestureZoom, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("scale-changed", handler, args, flags, &.{ void, *GestureZoom, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_gesture_zoom_get_type" });
        return cFn();
    }
};
pub const GestureZoomClass = opaque {};
/// Class [GraphicsOffload](https://docs.gtk.org/gtk4/class.GraphicsOffload.html)
/// - property [child](https://docs.gtk.org/gtk4/property.GraphicsOffload.child.html): (rw) `gtk.Widget`
/// - property [enabled](https://docs.gtk.org/gtk4/property.GraphicsOffload.enabled.html): (rw) `gtk.GraphicsOffloadEnabled`
pub const GraphicsOffload = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.GraphicsOffloadClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GraphicsOffload.new.html)
    pub fn new(_child: ?*gtk.Widget) *GraphicsOffload {
        const cFn = @extern(*const fn (?*gtk.Widget) callconv(.c) *GraphicsOffload, .{ .name = "gtk_graphics_offload_new" });
        const ret = cFn(_child);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.GraphicsOffload.get_child.html)
    pub fn getChild(self: *GraphicsOffload) ?*gtk.Widget {
        const cFn = @extern(*const fn (*GraphicsOffload) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_graphics_offload_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enabled](https://docs.gtk.org/gtk4/method.GraphicsOffload.get_enabled.html)
    pub fn getEnabled(self: *GraphicsOffload) gtk.GraphicsOffloadEnabled {
        const cFn = @extern(*const fn (*GraphicsOffload) callconv(.c) gtk.GraphicsOffloadEnabled, .{ .name = "gtk_graphics_offload_get_enabled" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.GraphicsOffload.set_child.html)
    pub fn setChild(self: *GraphicsOffload, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*GraphicsOffload, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_graphics_offload_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_enabled](https://docs.gtk.org/gtk4/method.GraphicsOffload.set_enabled.html)
    pub fn setEnabled(self: *GraphicsOffload, _enabled: gtk.GraphicsOffloadEnabled) void {
        const cFn = @extern(*const fn (*GraphicsOffload, gtk.GraphicsOffloadEnabled) callconv(.c) void, .{ .name = "gtk_graphics_offload_set_enabled" });
        const ret = cFn(self, _enabled);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_graphics_offload_get_type" });
        return cFn();
    }
};
pub const GraphicsOffloadClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Enum [GraphicsOffloadEnabled](https://docs.gtk.org/gtk4/enum.GraphicsOffloadEnabled.html)
pub const GraphicsOffloadEnabled = enum(u32) {
    enabled = 0,
    disabled = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_graphics_offload_enabled_get_type" });
        return cFn();
    }
};
/// Class [Grid](https://docs.gtk.org/gtk4/class.Grid.html)
/// - property [baseline-row](https://docs.gtk.org/gtk4/property.Grid.baseline-row.html): (rw) `i32`
/// - property [column-homogeneous](https://docs.gtk.org/gtk4/property.Grid.column-homogeneous.html): (rw) `bool`
/// - property [column-spacing](https://docs.gtk.org/gtk4/property.Grid.column-spacing.html): (rw) `i32`
/// - property [row-homogeneous](https://docs.gtk.org/gtk4/property.Grid.row-homogeneous.html): (rw) `bool`
/// - property [row-spacing](https://docs.gtk.org/gtk4/property.Grid.row-spacing.html): (rw) `i32`
pub const Grid = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.GridClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Grid.new.html)
    pub fn new() *Grid {
        const cFn = @extern(*const fn () callconv(.c) *Grid, .{ .name = "gtk_grid_new" });
        const ret = cFn();
        return ret;
    }
    /// method [attach](https://docs.gtk.org/gtk4/method.Grid.attach.html)
    pub fn attach(self: *Grid, _child: *gtk.Widget, _column: i32, _row: i32, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Grid, *gtk.Widget, i32, i32, i32, i32) callconv(.c) void, .{ .name = "gtk_grid_attach" });
        const ret = cFn(self, _child, _column, _row, _width, _height);
        return ret;
    }
    /// method [attach_next_to](https://docs.gtk.org/gtk4/method.Grid.attach_next_to.html)
    pub fn attachNextTo(self: *Grid, _child: *gtk.Widget, _sibling: ?*gtk.Widget, _side: gtk.PositionType, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Grid, *gtk.Widget, ?*gtk.Widget, gtk.PositionType, i32, i32) callconv(.c) void, .{ .name = "gtk_grid_attach_next_to" });
        const ret = cFn(self, _child, _sibling, _side, _width, _height);
        return ret;
    }
    /// method [get_baseline_row](https://docs.gtk.org/gtk4/method.Grid.get_baseline_row.html)
    pub fn getBaselineRow(self: *Grid) i32 {
        const cFn = @extern(*const fn (*Grid) callconv(.c) i32, .{ .name = "gtk_grid_get_baseline_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_at](https://docs.gtk.org/gtk4/method.Grid.get_child_at.html)
    pub fn getChildAt(self: *Grid, _column: i32, _row: i32) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Grid, i32, i32) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_grid_get_child_at" });
        const ret = cFn(self, _column, _row);
        return ret;
    }
    /// method [get_column_homogeneous](https://docs.gtk.org/gtk4/method.Grid.get_column_homogeneous.html)
    pub fn getColumnHomogeneous(self: *Grid) bool {
        const cFn = @extern(*const fn (*Grid) callconv(.c) bool, .{ .name = "gtk_grid_get_column_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_column_spacing](https://docs.gtk.org/gtk4/method.Grid.get_column_spacing.html)
    pub fn getColumnSpacing(self: *Grid) u32 {
        const cFn = @extern(*const fn (*Grid) callconv(.c) u32, .{ .name = "gtk_grid_get_column_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_baseline_position](https://docs.gtk.org/gtk4/method.Grid.get_row_baseline_position.html)
    pub fn getRowBaselinePosition(self: *Grid, _row: i32) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_grid_get_row_baseline_position" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [get_row_homogeneous](https://docs.gtk.org/gtk4/method.Grid.get_row_homogeneous.html)
    pub fn getRowHomogeneous(self: *Grid) bool {
        const cFn = @extern(*const fn (*Grid) callconv(.c) bool, .{ .name = "gtk_grid_get_row_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_spacing](https://docs.gtk.org/gtk4/method.Grid.get_row_spacing.html)
    pub fn getRowSpacing(self: *Grid) u32 {
        const cFn = @extern(*const fn (*Grid) callconv(.c) u32, .{ .name = "gtk_grid_get_row_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_column](https://docs.gtk.org/gtk4/method.Grid.insert_column.html)
    pub fn insertColumn(self: *Grid, _position: i32) void {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) void, .{ .name = "gtk_grid_insert_column" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [insert_next_to](https://docs.gtk.org/gtk4/method.Grid.insert_next_to.html)
    pub fn insertNextTo(self: *Grid, _sibling: *gtk.Widget, _side: gtk.PositionType) void {
        const cFn = @extern(*const fn (*Grid, *gtk.Widget, gtk.PositionType) callconv(.c) void, .{ .name = "gtk_grid_insert_next_to" });
        const ret = cFn(self, _sibling, _side);
        return ret;
    }
    /// method [insert_row](https://docs.gtk.org/gtk4/method.Grid.insert_row.html)
    pub fn insertRow(self: *Grid, _position: i32) void {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) void, .{ .name = "gtk_grid_insert_row" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [query_child](https://docs.gtk.org/gtk4/method.Grid.query_child.html)
    pub fn queryChild(self: *Grid, _child: *gtk.Widget) struct {
        ret: void,
        column: i32,
        row: i32,
        width: i32,
        height: i32,
    } {
        var column_out: i32 = undefined;
        const _column = &column_out;
        var row_out: i32 = undefined;
        const _row = &row_out;
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Grid, *gtk.Widget, ?*i32, ?*i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_grid_query_child" });
        const ret = cFn(self, _child, _column, _row, _width, _height);
        return .{ .ret = ret, .column = column_out, .row = row_out, .width = width_out, .height = height_out };
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.Grid.remove.html)
    pub fn remove(self: *Grid, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Grid, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_grid_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove_column](https://docs.gtk.org/gtk4/method.Grid.remove_column.html)
    pub fn removeColumn(self: *Grid, _position: i32) void {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) void, .{ .name = "gtk_grid_remove_column" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [remove_row](https://docs.gtk.org/gtk4/method.Grid.remove_row.html)
    pub fn removeRow(self: *Grid, _position: i32) void {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) void, .{ .name = "gtk_grid_remove_row" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_baseline_row](https://docs.gtk.org/gtk4/method.Grid.set_baseline_row.html)
    pub fn setBaselineRow(self: *Grid, _row: i32) void {
        const cFn = @extern(*const fn (*Grid, i32) callconv(.c) void, .{ .name = "gtk_grid_set_baseline_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [set_column_homogeneous](https://docs.gtk.org/gtk4/method.Grid.set_column_homogeneous.html)
    pub fn setColumnHomogeneous(self: *Grid, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*Grid, bool) callconv(.c) void, .{ .name = "gtk_grid_set_column_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_column_spacing](https://docs.gtk.org/gtk4/method.Grid.set_column_spacing.html)
    pub fn setColumnSpacing(self: *Grid, _spacing: u32) void {
        const cFn = @extern(*const fn (*Grid, u32) callconv(.c) void, .{ .name = "gtk_grid_set_column_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    /// method [set_row_baseline_position](https://docs.gtk.org/gtk4/method.Grid.set_row_baseline_position.html)
    pub fn setRowBaselinePosition(self: *Grid, _row: i32, _pos: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*Grid, i32, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_grid_set_row_baseline_position" });
        const ret = cFn(self, _row, _pos);
        return ret;
    }
    /// method [set_row_homogeneous](https://docs.gtk.org/gtk4/method.Grid.set_row_homogeneous.html)
    pub fn setRowHomogeneous(self: *Grid, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*Grid, bool) callconv(.c) void, .{ .name = "gtk_grid_set_row_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_row_spacing](https://docs.gtk.org/gtk4/method.Grid.set_row_spacing.html)
    pub fn setRowSpacing(self: *Grid, _spacing: u32) void {
        const cFn = @extern(*const fn (*Grid, u32) callconv(.c) void, .{ .name = "gtk_grid_set_row_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_grid_get_type" });
        return cFn();
    }
};
pub const GridClass = extern struct {
    parent_class: gtk.WidgetClass,
    padding: [8]?*anyopaque,
};
/// Class [GridLayout](https://docs.gtk.org/gtk4/class.GridLayout.html)
/// - property [baseline-row](https://docs.gtk.org/gtk4/property.GridLayout.baseline-row.html): (rw) `i32`
/// - property [column-homogeneous](https://docs.gtk.org/gtk4/property.GridLayout.column-homogeneous.html): (rw) `bool`
/// - property [column-spacing](https://docs.gtk.org/gtk4/property.GridLayout.column-spacing.html): (rw) `i32`
/// - property [row-homogeneous](https://docs.gtk.org/gtk4/property.GridLayout.row-homogeneous.html): (rw) `bool`
/// - property [row-spacing](https://docs.gtk.org/gtk4/property.GridLayout.row-spacing.html): (rw) `i32`
pub const GridLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.GridLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GridLayout.new.html)
    pub fn new() *GridLayout {
        const cFn = @extern(*const fn () callconv(.c) *GridLayout, .{ .name = "gtk_grid_layout_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_baseline_row](https://docs.gtk.org/gtk4/method.GridLayout.get_baseline_row.html)
    pub fn getBaselineRow(self: *GridLayout) i32 {
        const cFn = @extern(*const fn (*GridLayout) callconv(.c) i32, .{ .name = "gtk_grid_layout_get_baseline_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_column_homogeneous](https://docs.gtk.org/gtk4/method.GridLayout.get_column_homogeneous.html)
    pub fn getColumnHomogeneous(self: *GridLayout) bool {
        const cFn = @extern(*const fn (*GridLayout) callconv(.c) bool, .{ .name = "gtk_grid_layout_get_column_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_column_spacing](https://docs.gtk.org/gtk4/method.GridLayout.get_column_spacing.html)
    pub fn getColumnSpacing(self: *GridLayout) u32 {
        const cFn = @extern(*const fn (*GridLayout) callconv(.c) u32, .{ .name = "gtk_grid_layout_get_column_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_baseline_position](https://docs.gtk.org/gtk4/method.GridLayout.get_row_baseline_position.html)
    pub fn getRowBaselinePosition(self: *GridLayout, _row: i32) gtk.BaselinePosition {
        const cFn = @extern(*const fn (*GridLayout, i32) callconv(.c) gtk.BaselinePosition, .{ .name = "gtk_grid_layout_get_row_baseline_position" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [get_row_homogeneous](https://docs.gtk.org/gtk4/method.GridLayout.get_row_homogeneous.html)
    pub fn getRowHomogeneous(self: *GridLayout) bool {
        const cFn = @extern(*const fn (*GridLayout) callconv(.c) bool, .{ .name = "gtk_grid_layout_get_row_homogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_spacing](https://docs.gtk.org/gtk4/method.GridLayout.get_row_spacing.html)
    pub fn getRowSpacing(self: *GridLayout) u32 {
        const cFn = @extern(*const fn (*GridLayout) callconv(.c) u32, .{ .name = "gtk_grid_layout_get_row_spacing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_baseline_row](https://docs.gtk.org/gtk4/method.GridLayout.set_baseline_row.html)
    pub fn setBaselineRow(self: *GridLayout, _row: i32) void {
        const cFn = @extern(*const fn (*GridLayout, i32) callconv(.c) void, .{ .name = "gtk_grid_layout_set_baseline_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [set_column_homogeneous](https://docs.gtk.org/gtk4/method.GridLayout.set_column_homogeneous.html)
    pub fn setColumnHomogeneous(self: *GridLayout, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*GridLayout, bool) callconv(.c) void, .{ .name = "gtk_grid_layout_set_column_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_column_spacing](https://docs.gtk.org/gtk4/method.GridLayout.set_column_spacing.html)
    pub fn setColumnSpacing(self: *GridLayout, _spacing: u32) void {
        const cFn = @extern(*const fn (*GridLayout, u32) callconv(.c) void, .{ .name = "gtk_grid_layout_set_column_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    /// method [set_row_baseline_position](https://docs.gtk.org/gtk4/method.GridLayout.set_row_baseline_position.html)
    pub fn setRowBaselinePosition(self: *GridLayout, _row: i32, _pos: gtk.BaselinePosition) void {
        const cFn = @extern(*const fn (*GridLayout, i32, gtk.BaselinePosition) callconv(.c) void, .{ .name = "gtk_grid_layout_set_row_baseline_position" });
        const ret = cFn(self, _row, _pos);
        return ret;
    }
    /// method [set_row_homogeneous](https://docs.gtk.org/gtk4/method.GridLayout.set_row_homogeneous.html)
    pub fn setRowHomogeneous(self: *GridLayout, _homogeneous: bool) void {
        const cFn = @extern(*const fn (*GridLayout, bool) callconv(.c) void, .{ .name = "gtk_grid_layout_set_row_homogeneous" });
        const ret = cFn(self, _homogeneous);
        return ret;
    }
    /// method [set_row_spacing](https://docs.gtk.org/gtk4/method.GridLayout.set_row_spacing.html)
    pub fn setRowSpacing(self: *GridLayout, _spacing: u32) void {
        const cFn = @extern(*const fn (*GridLayout, u32) callconv(.c) void, .{ .name = "gtk_grid_layout_set_row_spacing" });
        const ret = cFn(self, _spacing);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_grid_layout_get_type" });
        return cFn();
    }
};
/// Class [GridLayoutChild](https://docs.gtk.org/gtk4/class.GridLayoutChild.html)
/// - property [column](https://docs.gtk.org/gtk4/property.GridLayoutChild.column.html): (rw) `i32`
/// - property [column-span](https://docs.gtk.org/gtk4/property.GridLayoutChild.column-span.html): (rw) `i32`
/// - property [row](https://docs.gtk.org/gtk4/property.GridLayoutChild.row.html): (rw) `i32`
/// - property [row-span](https://docs.gtk.org/gtk4/property.GridLayoutChild.row-span.html): (rw) `i32`
pub const GridLayoutChild = opaque {
    pub const Parent = gtk.LayoutChild;
    pub const Class = gtk.GridLayoutChildClass;
    /// method [get_column](https://docs.gtk.org/gtk4/method.GridLayoutChild.get_column.html)
    pub fn getColumn(self: *GridLayoutChild) i32 {
        const cFn = @extern(*const fn (*GridLayoutChild) callconv(.c) i32, .{ .name = "gtk_grid_layout_child_get_column" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_column_span](https://docs.gtk.org/gtk4/method.GridLayoutChild.get_column_span.html)
    pub fn getColumnSpan(self: *GridLayoutChild) i32 {
        const cFn = @extern(*const fn (*GridLayoutChild) callconv(.c) i32, .{ .name = "gtk_grid_layout_child_get_column_span" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row](https://docs.gtk.org/gtk4/method.GridLayoutChild.get_row.html)
    pub fn getRow(self: *GridLayoutChild) i32 {
        const cFn = @extern(*const fn (*GridLayoutChild) callconv(.c) i32, .{ .name = "gtk_grid_layout_child_get_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_span](https://docs.gtk.org/gtk4/method.GridLayoutChild.get_row_span.html)
    pub fn getRowSpan(self: *GridLayoutChild) i32 {
        const cFn = @extern(*const fn (*GridLayoutChild) callconv(.c) i32, .{ .name = "gtk_grid_layout_child_get_row_span" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_column](https://docs.gtk.org/gtk4/method.GridLayoutChild.set_column.html)
    pub fn setColumn(self: *GridLayoutChild, _column: i32) void {
        const cFn = @extern(*const fn (*GridLayoutChild, i32) callconv(.c) void, .{ .name = "gtk_grid_layout_child_set_column" });
        const ret = cFn(self, _column);
        return ret;
    }
    /// method [set_column_span](https://docs.gtk.org/gtk4/method.GridLayoutChild.set_column_span.html)
    pub fn setColumnSpan(self: *GridLayoutChild, _span: i32) void {
        const cFn = @extern(*const fn (*GridLayoutChild, i32) callconv(.c) void, .{ .name = "gtk_grid_layout_child_set_column_span" });
        const ret = cFn(self, _span);
        return ret;
    }
    /// method [set_row](https://docs.gtk.org/gtk4/method.GridLayoutChild.set_row.html)
    pub fn setRow(self: *GridLayoutChild, _row: i32) void {
        const cFn = @extern(*const fn (*GridLayoutChild, i32) callconv(.c) void, .{ .name = "gtk_grid_layout_child_set_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [set_row_span](https://docs.gtk.org/gtk4/method.GridLayoutChild.set_row_span.html)
    pub fn setRowSpan(self: *GridLayoutChild, _span: i32) void {
        const cFn = @extern(*const fn (*GridLayoutChild, i32) callconv(.c) void, .{ .name = "gtk_grid_layout_child_set_row_span" });
        const ret = cFn(self, _span);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_grid_layout_child_get_type" });
        return cFn();
    }
};
pub const GridLayoutChildClass = extern struct {
    parent_class: gtk.LayoutChildClass,
};
pub const GridLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// Class [GridView](https://docs.gtk.org/gtk4/class.GridView.html)
/// - property [enable-rubberband](https://docs.gtk.org/gtk4/property.GridView.enable-rubberband.html): (rw) `bool`
/// - property [factory](https://docs.gtk.org/gtk4/property.GridView.factory.html): (rw) `gtk.ListItemFactory`
/// - property [max-columns](https://docs.gtk.org/gtk4/property.GridView.max-columns.html): (rw) `u32`
/// - property [min-columns](https://docs.gtk.org/gtk4/property.GridView.min-columns.html): (rw) `u32`
/// - property [model](https://docs.gtk.org/gtk4/property.GridView.model.html): (rw) `gtk.SelectionModel`
/// - property [single-click-activate](https://docs.gtk.org/gtk4/property.GridView.single-click-activate.html): (rw) `bool`
/// - property [tab-behavior](https://docs.gtk.org/gtk4/property.GridView.tab-behavior.html): (rw) `gtk.ListTabBehavior`
pub const GridView = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable, gtk.Scrollable };
    pub const Parent = gtk.ListBase;
    pub const Class = gtk.GridViewClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.GridView.new.html)
    pub fn new(_model: ?*gtk.SelectionModel, _factory: ?*gtk.ListItemFactory) *GridView {
        const cFn = @extern(*const fn (?*gtk.SelectionModel, ?*gtk.ListItemFactory) callconv(.c) *GridView, .{ .name = "gtk_grid_view_new" });
        const ret = cFn(_model, _factory);
        return ret;
    }
    /// method [get_enable_rubberband](https://docs.gtk.org/gtk4/method.GridView.get_enable_rubberband.html)
    pub fn getEnableRubberband(self: *GridView) bool {
        const cFn = @extern(*const fn (*GridView) callconv(.c) bool, .{ .name = "gtk_grid_view_get_enable_rubberband" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_factory](https://docs.gtk.org/gtk4/method.GridView.get_factory.html)
    pub fn getFactory(self: *GridView) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*GridView) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_grid_view_get_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_columns](https://docs.gtk.org/gtk4/method.GridView.get_max_columns.html)
    pub fn getMaxColumns(self: *GridView) u32 {
        const cFn = @extern(*const fn (*GridView) callconv(.c) u32, .{ .name = "gtk_grid_view_get_max_columns" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_columns](https://docs.gtk.org/gtk4/method.GridView.get_min_columns.html)
    pub fn getMinColumns(self: *GridView) u32 {
        const cFn = @extern(*const fn (*GridView) callconv(.c) u32, .{ .name = "gtk_grid_view_get_min_columns" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.GridView.get_model.html)
    pub fn getModel(self: *GridView) ?*gtk.SelectionModel {
        const cFn = @extern(*const fn (*GridView) callconv(.c) ?*gtk.SelectionModel, .{ .name = "gtk_grid_view_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_single_click_activate](https://docs.gtk.org/gtk4/method.GridView.get_single_click_activate.html)
    pub fn getSingleClickActivate(self: *GridView) bool {
        const cFn = @extern(*const fn (*GridView) callconv(.c) bool, .{ .name = "gtk_grid_view_get_single_click_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab_behavior](https://docs.gtk.org/gtk4/method.GridView.get_tab_behavior.html)
    pub fn getTabBehavior(self: *GridView) gtk.ListTabBehavior {
        const cFn = @extern(*const fn (*GridView) callconv(.c) gtk.ListTabBehavior, .{ .name = "gtk_grid_view_get_tab_behavior" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scroll_to](https://docs.gtk.org/gtk4/method.GridView.scroll_to.html)
    pub fn scrollTo(self: *GridView, _pos: u32, _flags: gtk.ListScrollFlags, _scroll: ?*gtk.ScrollInfo) void {
        const cFn = @extern(*const fn (*GridView, u32, gtk.ListScrollFlags, ?*gtk.ScrollInfo) callconv(.c) void, .{ .name = "gtk_grid_view_scroll_to" });
        const ret = cFn(self, _pos, _flags, _scroll);
        return ret;
    }
    /// method [set_enable_rubberband](https://docs.gtk.org/gtk4/method.GridView.set_enable_rubberband.html)
    pub fn setEnableRubberband(self: *GridView, _enable_rubberband: bool) void {
        const cFn = @extern(*const fn (*GridView, bool) callconv(.c) void, .{ .name = "gtk_grid_view_set_enable_rubberband" });
        const ret = cFn(self, _enable_rubberband);
        return ret;
    }
    /// method [set_factory](https://docs.gtk.org/gtk4/method.GridView.set_factory.html)
    pub fn setFactory(self: *GridView, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*GridView, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_grid_view_set_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_max_columns](https://docs.gtk.org/gtk4/method.GridView.set_max_columns.html)
    pub fn setMaxColumns(self: *GridView, _max_columns: u32) void {
        const cFn = @extern(*const fn (*GridView, u32) callconv(.c) void, .{ .name = "gtk_grid_view_set_max_columns" });
        const ret = cFn(self, _max_columns);
        return ret;
    }
    /// method [set_min_columns](https://docs.gtk.org/gtk4/method.GridView.set_min_columns.html)
    pub fn setMinColumns(self: *GridView, _min_columns: u32) void {
        const cFn = @extern(*const fn (*GridView, u32) callconv(.c) void, .{ .name = "gtk_grid_view_set_min_columns" });
        const ret = cFn(self, _min_columns);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.GridView.set_model.html)
    pub fn setModel(self: *GridView, _model: ?*gtk.SelectionModel) void {
        const cFn = @extern(*const fn (*GridView, ?*gtk.SelectionModel) callconv(.c) void, .{ .name = "gtk_grid_view_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_single_click_activate](https://docs.gtk.org/gtk4/method.GridView.set_single_click_activate.html)
    pub fn setSingleClickActivate(self: *GridView, _single_click_activate: bool) void {
        const cFn = @extern(*const fn (*GridView, bool) callconv(.c) void, .{ .name = "gtk_grid_view_set_single_click_activate" });
        const ret = cFn(self, _single_click_activate);
        return ret;
    }
    /// method [set_tab_behavior](https://docs.gtk.org/gtk4/method.GridView.set_tab_behavior.html)
    pub fn setTabBehavior(self: *GridView, _tab_behavior: gtk.ListTabBehavior) void {
        const cFn = @extern(*const fn (*GridView, gtk.ListTabBehavior) callconv(.c) void, .{ .name = "gtk_grid_view_set_tab_behavior" });
        const ret = cFn(self, _tab_behavior);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.GridView.activate.html)
    pub fn connectActivate(self: *GridView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *GridView, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_grid_view_get_type" });
        return cFn();
    }
};
pub const GridViewClass = opaque {};
/// Class [HeaderBar](https://docs.gtk.org/gtk4/class.HeaderBar.html)
/// - property [decoration-layout](https://docs.gtk.org/gtk4/property.HeaderBar.decoration-layout.html): (rw) `[*:0]const u8`
/// - property [show-title-buttons](https://docs.gtk.org/gtk4/property.HeaderBar.show-title-buttons.html): (rw) `bool`
/// - property [title-widget](https://docs.gtk.org/gtk4/property.HeaderBar.title-widget.html): (rw) `gtk.Widget`
pub const HeaderBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.HeaderBar.new.html)
    pub fn new() *HeaderBar {
        const cFn = @extern(*const fn () callconv(.c) *HeaderBar, .{ .name = "gtk_header_bar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_decoration_layout](https://docs.gtk.org/gtk4/method.HeaderBar.get_decoration_layout.html)
    pub fn getDecorationLayout(self: *HeaderBar) ?[*:0]u8 {
        const cFn = @extern(*const fn (*HeaderBar) callconv(.c) ?[*:0]u8, .{ .name = "gtk_header_bar_get_decoration_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_title_buttons](https://docs.gtk.org/gtk4/method.HeaderBar.get_show_title_buttons.html)
    pub fn getShowTitleButtons(self: *HeaderBar) bool {
        const cFn = @extern(*const fn (*HeaderBar) callconv(.c) bool, .{ .name = "gtk_header_bar_get_show_title_buttons" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title_widget](https://docs.gtk.org/gtk4/method.HeaderBar.get_title_widget.html)
    pub fn getTitleWidget(self: *HeaderBar) ?*gtk.Widget {
        const cFn = @extern(*const fn (*HeaderBar) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_header_bar_get_title_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pack_end](https://docs.gtk.org/gtk4/method.HeaderBar.pack_end.html)
    pub fn packEnd(self: *HeaderBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*HeaderBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_header_bar_pack_end" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [pack_start](https://docs.gtk.org/gtk4/method.HeaderBar.pack_start.html)
    pub fn packStart(self: *HeaderBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*HeaderBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_header_bar_pack_start" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.HeaderBar.remove.html)
    pub fn remove(self: *HeaderBar, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*HeaderBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_header_bar_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_decoration_layout](https://docs.gtk.org/gtk4/method.HeaderBar.set_decoration_layout.html)
    pub fn setDecorationLayout(self: *HeaderBar, _layout: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*HeaderBar, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_header_bar_set_decoration_layout" });
        const ret = cFn(self, _layout);
        return ret;
    }
    /// method [set_show_title_buttons](https://docs.gtk.org/gtk4/method.HeaderBar.set_show_title_buttons.html)
    pub fn setShowTitleButtons(self: *HeaderBar, _setting: bool) void {
        const cFn = @extern(*const fn (*HeaderBar, bool) callconv(.c) void, .{ .name = "gtk_header_bar_set_show_title_buttons" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_title_widget](https://docs.gtk.org/gtk4/method.HeaderBar.set_title_widget.html)
    pub fn setTitleWidget(self: *HeaderBar, _title_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*HeaderBar, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_header_bar_set_title_widget" });
        const ret = cFn(self, _title_widget);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_header_bar_get_type" });
        return cFn();
    }
};
/// Class [IMContext](https://docs.gtk.org/gtk4/class.IMContext.html)
/// - property [input-hints](https://docs.gtk.org/gtk4/property.IMContext.input-hints.html): (rw) `gtk.InputHints`
/// - property [input-purpose](https://docs.gtk.org/gtk4/property.IMContext.input-purpose.html): (rw) `gtk.InputPurpose`
pub const IMContext = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.IMContextClass;
    /// method [activate_osk](https://docs.gtk.org/gtk4/method.IMContext.activate_osk.html)
    pub fn activateOsk(self: *IMContext, _event: ?*gdk.Event) bool {
        const cFn = @extern(*const fn (*IMContext, ?*gdk.Event) callconv(.c) bool, .{ .name = "gtk_im_context_activate_osk" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// method [delete_surrounding](https://docs.gtk.org/gtk4/method.IMContext.delete_surrounding.html)
    pub fn deleteSurrounding(self: *IMContext, _offset: i32, _n_chars: i32) bool {
        const cFn = @extern(*const fn (*IMContext, i32, i32) callconv(.c) bool, .{ .name = "gtk_im_context_delete_surrounding" });
        const ret = cFn(self, _offset, _n_chars);
        return ret;
    }
    /// method [filter_key](https://docs.gtk.org/gtk4/method.IMContext.filter_key.html)
    pub fn filterKey(self: *IMContext, _press: bool, _surface: *gdk.Surface, _device: *gdk.Device, _time: u32, _keycode: u32, _state: gdk.ModifierType, _group: i32) bool {
        const cFn = @extern(*const fn (*IMContext, bool, *gdk.Surface, *gdk.Device, u32, u32, gdk.ModifierType, i32) callconv(.c) bool, .{ .name = "gtk_im_context_filter_key" });
        const ret = cFn(self, _press, _surface, _device, _time, _keycode, _state, _group);
        return ret;
    }
    /// method [filter_keypress](https://docs.gtk.org/gtk4/method.IMContext.filter_keypress.html)
    pub fn filterKeypress(self: *IMContext, _event: *gdk.Event) bool {
        const cFn = @extern(*const fn (*IMContext, *gdk.Event) callconv(.c) bool, .{ .name = "gtk_im_context_filter_keypress" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// method [focus_in](https://docs.gtk.org/gtk4/method.IMContext.focus_in.html)
    pub fn focusIn(self: *IMContext) void {
        const cFn = @extern(*const fn (*IMContext) callconv(.c) void, .{ .name = "gtk_im_context_focus_in" });
        const ret = cFn(self);
        return ret;
    }
    /// method [focus_out](https://docs.gtk.org/gtk4/method.IMContext.focus_out.html)
    pub fn focusOut(self: *IMContext) void {
        const cFn = @extern(*const fn (*IMContext) callconv(.c) void, .{ .name = "gtk_im_context_focus_out" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_preedit_string](https://docs.gtk.org/gtk4/method.IMContext.get_preedit_string.html)
    pub fn getPreeditString(self: *IMContext) struct {
        ret: void,
        str: [*:0]u8,
        attrs: *pango.AttrList,
        cursor_pos: i32,
    } {
        var str_out: [*:0]u8 = undefined;
        const _str = &str_out;
        var attrs_out: *pango.AttrList = undefined;
        const _attrs = &attrs_out;
        var cursor_pos_out: i32 = undefined;
        const _cursor_pos = &cursor_pos_out;
        const cFn = @extern(*const fn (*IMContext, *[*:0]u8, **pango.AttrList, *i32) callconv(.c) void, .{ .name = "gtk_im_context_get_preedit_string" });
        const ret = cFn(self, _str, _attrs, _cursor_pos);
        return .{ .ret = ret, .str = str_out, .attrs = attrs_out, .cursor_pos = cursor_pos_out };
    }
    /// Deprecated:
    /// method [get_surrounding](https://docs.gtk.org/gtk4/method.IMContext.get_surrounding.html)
    pub const getSurrounding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSurrounding(self: *IMContext) ?struct {
            text: [*:0]u8,
            cursor_index: i32,
        } {
            var text_out: [*:0]u8 = undefined;
            const _text = &text_out;
            var cursor_index_out: i32 = undefined;
            const _cursor_index = &cursor_index_out;
            const cFn = @extern(*const fn (*IMContext, *[*:0]u8, *i32) callconv(.c) bool, .{ .name = "gtk_im_context_get_surrounding" });
            const ret = cFn(self, _text, _cursor_index);
            if (!ret) return null;
            return .{ .text = text_out, .cursor_index = cursor_index_out };
        }
    }.getSurrounding;
    /// method [get_surrounding_with_selection](https://docs.gtk.org/gtk4/method.IMContext.get_surrounding_with_selection.html)
    pub fn getSurroundingWithSelection(self: *IMContext) ?struct {
        text: [*:0]u8,
        cursor_index: i32,
        anchor_index: i32,
    } {
        var text_out: [*:0]u8 = undefined;
        const _text = &text_out;
        var cursor_index_out: i32 = undefined;
        const _cursor_index = &cursor_index_out;
        var anchor_index_out: i32 = undefined;
        const _anchor_index = &anchor_index_out;
        const cFn = @extern(*const fn (*IMContext, *[*:0]u8, *i32, *i32) callconv(.c) bool, .{ .name = "gtk_im_context_get_surrounding_with_selection" });
        const ret = cFn(self, _text, _cursor_index, _anchor_index);
        if (!ret) return null;
        return .{ .text = text_out, .cursor_index = cursor_index_out, .anchor_index = anchor_index_out };
    }
    /// method [reset](https://docs.gtk.org/gtk4/method.IMContext.reset.html)
    pub fn reset(self: *IMContext) void {
        const cFn = @extern(*const fn (*IMContext) callconv(.c) void, .{ .name = "gtk_im_context_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_client_widget](https://docs.gtk.org/gtk4/method.IMContext.set_client_widget.html)
    pub fn setClientWidget(self: *IMContext, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*IMContext, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_im_context_set_client_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_cursor_location](https://docs.gtk.org/gtk4/method.IMContext.set_cursor_location.html)
    pub fn setCursorLocation(self: *IMContext, _area: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*IMContext, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_im_context_set_cursor_location" });
        const ret = cFn(self, _area);
        return ret;
    }
    /// Deprecated:
    /// method [set_surrounding](https://docs.gtk.org/gtk4/method.IMContext.set_surrounding.html)
    pub const setSurrounding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSurrounding(self: *IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32) void {
            const cFn = @extern(*const fn (*IMContext, [*:0]const u8, i32, i32) callconv(.c) void, .{ .name = "gtk_im_context_set_surrounding" });
            const ret = cFn(self, _text, _len, _cursor_index);
            return ret;
        }
    }.setSurrounding;
    /// method [set_surrounding_with_selection](https://docs.gtk.org/gtk4/method.IMContext.set_surrounding_with_selection.html)
    pub fn setSurroundingWithSelection(self: *IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32, _anchor_index: i32) void {
        const cFn = @extern(*const fn (*IMContext, [*:0]const u8, i32, i32, i32) callconv(.c) void, .{ .name = "gtk_im_context_set_surrounding_with_selection" });
        const ret = cFn(self, _text, _len, _cursor_index, _anchor_index);
        return ret;
    }
    /// method [set_use_preedit](https://docs.gtk.org/gtk4/method.IMContext.set_use_preedit.html)
    pub fn setUsePreedit(self: *IMContext, _use_preedit: bool) void {
        const cFn = @extern(*const fn (*IMContext, bool) callconv(.c) void, .{ .name = "gtk_im_context_set_use_preedit" });
        const ret = cFn(self, _use_preedit);
        return ret;
    }
    /// vfunc [activate_osk](https://docs.gtk.org/gtk4/vfunc.IMContext.activate_osk.html)
    pub fn activateOskV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_osk.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [activate_osk_with_event](https://docs.gtk.org/gtk4/vfunc.IMContext.activate_osk_with_event.html)
    pub fn activateOskWithEventV(self: *IMContext, _event: *gdk.Event) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_osk_with_event.?;
        const ret = vFn(self, _event);
        return ret;
    }
    /// vfunc [commit](https://docs.gtk.org/gtk4/vfunc.IMContext.commit.html)
    pub fn commitV(self: *IMContext, _str: [*:0]const u8) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.commit.?;
        const ret = vFn(self, _str);
        return ret;
    }
    /// vfunc [delete_surrounding](https://docs.gtk.org/gtk4/vfunc.IMContext.delete_surrounding.html)
    pub fn deleteSurroundingV(self: *IMContext, _offset: i32, _n_chars: i32) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_surrounding.?;
        const ret = vFn(self, _offset, _n_chars);
        return ret;
    }
    /// vfunc [filter_keypress](https://docs.gtk.org/gtk4/vfunc.IMContext.filter_keypress.html)
    pub fn filterKeypressV(self: *IMContext, _event: *gdk.Event) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.filter_keypress.?;
        const ret = vFn(self, _event);
        return ret;
    }
    /// vfunc [focus_in](https://docs.gtk.org/gtk4/vfunc.IMContext.focus_in.html)
    pub fn focusInV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.focus_in.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [focus_out](https://docs.gtk.org/gtk4/vfunc.IMContext.focus_out.html)
    pub fn focusOutV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.focus_out.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_preedit_string](https://docs.gtk.org/gtk4/vfunc.IMContext.get_preedit_string.html)
    pub fn getPreeditStringV(self: *IMContext, _str: *[*:0]u8, _attrs: **pango.AttrList, _cursor_pos: *i32) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_preedit_string.?;
        const ret = vFn(self, _str, _attrs, _cursor_pos);
        return ret;
    }
    /// vfunc [get_surrounding](https://docs.gtk.org/gtk4/vfunc.IMContext.get_surrounding.html)
    pub fn getSurroundingV(self: *IMContext, _text: *[*:0]u8, _cursor_index: *i32) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_surrounding.?;
        const ret = vFn(self, _text, _cursor_index);
        return ret;
    }
    /// vfunc [get_surrounding_with_selection](https://docs.gtk.org/gtk4/vfunc.IMContext.get_surrounding_with_selection.html)
    pub fn getSurroundingWithSelectionV(self: *IMContext, _text: *[*:0]u8, _cursor_index: *i32, _anchor_index: *i32) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_surrounding_with_selection.?;
        const ret = vFn(self, _text, _cursor_index, _anchor_index);
        return ret;
    }
    /// vfunc [preedit_changed](https://docs.gtk.org/gtk4/vfunc.IMContext.preedit_changed.html)
    pub fn preeditChangedV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.preedit_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [preedit_end](https://docs.gtk.org/gtk4/vfunc.IMContext.preedit_end.html)
    pub fn preeditEndV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.preedit_end.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [preedit_start](https://docs.gtk.org/gtk4/vfunc.IMContext.preedit_start.html)
    pub fn preeditStartV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.preedit_start.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [reset](https://docs.gtk.org/gtk4/vfunc.IMContext.reset.html)
    pub fn resetV(self: *IMContext) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.reset.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [retrieve_surrounding](https://docs.gtk.org/gtk4/vfunc.IMContext.retrieve_surrounding.html)
    pub fn retrieveSurroundingV(self: *IMContext) bool {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.retrieve_surrounding.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_client_widget](https://docs.gtk.org/gtk4/vfunc.IMContext.set_client_widget.html)
    pub fn setClientWidgetV(self: *IMContext, _widget: ?*gtk.Widget) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_client_widget.?;
        const ret = vFn(self, _widget);
        return ret;
    }
    /// vfunc [set_cursor_location](https://docs.gtk.org/gtk4/vfunc.IMContext.set_cursor_location.html)
    pub fn setCursorLocationV(self: *IMContext, _area: *gdk.Rectangle) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_cursor_location.?;
        const ret = vFn(self, _area);
        return ret;
    }
    /// vfunc [set_surrounding](https://docs.gtk.org/gtk4/vfunc.IMContext.set_surrounding.html)
    pub fn setSurroundingV(self: *IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_surrounding.?;
        const ret = vFn(self, _text, _len, _cursor_index);
        return ret;
    }
    /// vfunc [set_surrounding_with_selection](https://docs.gtk.org/gtk4/vfunc.IMContext.set_surrounding_with_selection.html)
    pub fn setSurroundingWithSelectionV(self: *IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32, _anchor_index: i32) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_surrounding_with_selection.?;
        const ret = vFn(self, _text, _len, _cursor_index, _anchor_index);
        return ret;
    }
    /// vfunc [set_use_preedit](https://docs.gtk.org/gtk4/vfunc.IMContext.set_use_preedit.html)
    pub fn setUsePreeditV(self: *IMContext, _use_preedit: bool) void {
        const class: *IMContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_use_preedit.?;
        const ret = vFn(self, _use_preedit);
        return ret;
    }
    /// signal [commit](https://docs.gtk.org/gtk4/signal.IMContext.commit.html)
    pub fn connectCommit(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("commit", handler, args, flags, &.{ void, *IMContext, [*:0]const u8 });
    }
    /// signal [delete-surrounding](https://docs.gtk.org/gtk4/signal.IMContext.delete-surrounding.html)
    pub fn connectDeleteSurrounding(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("delete-surrounding", handler, args, flags, &.{ bool, *IMContext, i32, i32 });
    }
    /// signal [preedit-changed](https://docs.gtk.org/gtk4/signal.IMContext.preedit-changed.html)
    pub fn connectPreeditChanged(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preedit-changed", handler, args, flags, &.{ void, *IMContext });
    }
    /// signal [preedit-end](https://docs.gtk.org/gtk4/signal.IMContext.preedit-end.html)
    pub fn connectPreeditEnd(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preedit-end", handler, args, flags, &.{ void, *IMContext });
    }
    /// signal [preedit-start](https://docs.gtk.org/gtk4/signal.IMContext.preedit-start.html)
    pub fn connectPreeditStart(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preedit-start", handler, args, flags, &.{ void, *IMContext });
    }
    /// signal [retrieve-surrounding](https://docs.gtk.org/gtk4/signal.IMContext.retrieve-surrounding.html)
    pub fn connectRetrieveSurrounding(self: *IMContext, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("retrieve-surrounding", handler, args, flags, &.{ bool, *IMContext });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_im_context_get_type" });
        return cFn();
    }
};
pub const IMContextClass = extern struct {
    parent_class: gobject.ObjectClass,
    preedit_start: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    preedit_end: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    preedit_changed: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    commit: ?*const fn (_context: *gtk.IMContext, _str: [*:0]const u8) callconv(.c) void,
    retrieve_surrounding: ?*const fn (_context: *gtk.IMContext) callconv(.c) bool,
    delete_surrounding: ?*const fn (_context: *gtk.IMContext, _offset: i32, _n_chars: i32) callconv(.c) bool,
    set_client_widget: ?*const fn (_context: *gtk.IMContext, _widget: ?*gtk.Widget) callconv(.c) void,
    get_preedit_string: ?*const fn (_context: *gtk.IMContext, _str: *[*:0]u8, _attrs: **pango.AttrList, _cursor_pos: *i32) callconv(.c) void,
    filter_keypress: ?*const fn (_context: *gtk.IMContext, _event: *gdk.Event) callconv(.c) bool,
    focus_in: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    focus_out: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    reset: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    set_cursor_location: ?*const fn (_context: *gtk.IMContext, _area: *gdk.Rectangle) callconv(.c) void,
    set_use_preedit: ?*const fn (_context: *gtk.IMContext, _use_preedit: bool) callconv(.c) void,
    set_surrounding: ?*const fn (_context: *gtk.IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32) callconv(.c) void,
    get_surrounding: ?*const fn (_context: *gtk.IMContext, _text: *[*:0]u8, _cursor_index: *i32) callconv(.c) bool,
    set_surrounding_with_selection: ?*const fn (_context: *gtk.IMContext, _text: [*:0]const u8, _len: i32, _cursor_index: i32, _anchor_index: i32) callconv(.c) void,
    get_surrounding_with_selection: ?*const fn (_context: *gtk.IMContext, _text: *[*:0]u8, _cursor_index: *i32, _anchor_index: *i32) callconv(.c) bool,
    activate_osk: ?*const fn (_context: *gtk.IMContext) callconv(.c) void,
    activate_osk_with_event: ?*const fn (_context: *gtk.IMContext, _event: *gdk.Event) callconv(.c) bool,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
/// Class [IMContextSimple](https://docs.gtk.org/gtk4/class.IMContextSimple.html)
pub const IMContextSimple = extern struct {
    object: gtk.IMContext,
    priv: ?*gtk.IMContextSimplePrivate,
    pub const Parent = gtk.IMContext;
    pub const Class = gtk.IMContextSimpleClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.IMContextSimple.new.html)
    pub fn new() *IMContextSimple {
        const cFn = @extern(*const fn () callconv(.c) *IMContextSimple, .{ .name = "gtk_im_context_simple_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_compose_file](https://docs.gtk.org/gtk4/method.IMContextSimple.add_compose_file.html)
    pub fn addComposeFile(self: *IMContextSimple, _compose_file: [*:0]const u8) void {
        const cFn = @extern(*const fn (*IMContextSimple, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_im_context_simple_add_compose_file" });
        const ret = cFn(self, _compose_file);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_im_context_simple_get_type" });
        return cFn();
    }
};
pub const IMContextSimpleClass = extern struct {
    parent_class: gtk.IMContextClass,
};
pub const IMContextSimplePrivate = opaque {};
/// Class [IMMulticontext](https://docs.gtk.org/gtk4/class.IMMulticontext.html)
pub const IMMulticontext = extern struct {
    object: gtk.IMContext,
    priv: ?*gtk.IMMulticontextPrivate,
    pub const Parent = gtk.IMContext;
    pub const Class = gtk.IMMulticontextClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.IMMulticontext.new.html)
    pub fn new() *IMMulticontext {
        const cFn = @extern(*const fn () callconv(.c) *IMMulticontext, .{ .name = "gtk_im_multicontext_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_context_id](https://docs.gtk.org/gtk4/method.IMMulticontext.get_context_id.html)
    pub fn getContextId(self: *IMMulticontext) [*:0]u8 {
        const cFn = @extern(*const fn (*IMMulticontext) callconv(.c) [*:0]u8, .{ .name = "gtk_im_multicontext_get_context_id" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_context_id](https://docs.gtk.org/gtk4/method.IMMulticontext.set_context_id.html)
    pub fn setContextId(self: *IMMulticontext, _context_id: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*IMMulticontext, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_im_multicontext_set_context_id" });
        const ret = cFn(self, _context_id);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_im_multicontext_get_type" });
        return cFn();
    }
};
pub const IMMulticontextClass = extern struct {
    parent_class: gtk.IMContextClass,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
pub const IMMulticontextPrivate = opaque {};
/// const [IM_MODULE_EXTENSION_POINT_NAME](https://docs.gtk.org/gtk4/const.IM_MODULE_EXTENSION_POINT_NAME.html)
pub const IM_MODULE_EXTENSION_POINT_NAME = "gtk-im-module";
/// const [INPUT_ERROR](https://docs.gtk.org/gtk4/const.INPUT_ERROR.html)
pub const INPUT_ERROR = -1;
/// const [INTERFACE_AGE](https://docs.gtk.org/gtk4/const.INTERFACE_AGE.html)
pub const INTERFACE_AGE = 5;
/// const [INVALID_LIST_POSITION](https://docs.gtk.org/gtk4/const.INVALID_LIST_POSITION.html)
pub const INVALID_LIST_POSITION = 4294967295;
/// Flags [IconLookupFlags](https://docs.gtk.org/gtk4/flags.IconLookupFlags.html)
pub const IconLookupFlags = packed struct(u32) {
    force_regular: bool = false,
    force_symbolic: bool = false,
    preload: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_lookup_flags_get_type" });
        return cFn();
    }
};
/// Class [IconPaintable](https://docs.gtk.org/gtk4/class.IconPaintable.html)
/// - property [file](https://docs.gtk.org/gtk4/property.IconPaintable.file.html): (r-) `gio.File`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.IconPaintable.icon-name.html): (r-) `[*:0]const u8`
/// - property [is-symbolic](https://docs.gtk.org/gtk4/property.IconPaintable.is-symbolic.html): (r-) `bool`
pub const IconPaintable = opaque {
    pub const Interfaces = [_]type{ gdk.Paintable, gtk.SymbolicPaintable };
    pub const Parent = gobject.Object;
    /// ctor [new_for_file](https://docs.gtk.org/gtk4/ctor.IconPaintable.new_for_file.html)
    pub fn newForFile(_file: *gio.File, _size: i32, _scale: i32) *IconPaintable {
        const cFn = @extern(*const fn (*gio.File, i32, i32) callconv(.c) *IconPaintable, .{ .name = "gtk_icon_paintable_new_for_file" });
        const ret = cFn(_file, _size, _scale);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.IconPaintable.get_file.html)
    pub fn getFile(self: *IconPaintable) ?*gio.File {
        const cFn = @extern(*const fn (*IconPaintable) callconv(.c) ?*gio.File, .{ .name = "gtk_icon_paintable_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.IconPaintable.get_icon_name.html)
    pub fn getIconName(self: *IconPaintable) ?[*:0]u8 {
        const cFn = @extern(*const fn (*IconPaintable) callconv(.c) ?[*:0]u8, .{ .name = "gtk_icon_paintable_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_symbolic](https://docs.gtk.org/gtk4/method.IconPaintable.is_symbolic.html)
    pub fn isSymbolic(self: *IconPaintable) bool {
        const cFn = @extern(*const fn (*IconPaintable) callconv(.c) bool, .{ .name = "gtk_icon_paintable_is_symbolic" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_paintable_get_type" });
        return cFn();
    }
};
/// Enum [IconSize](https://docs.gtk.org/gtk4/enum.IconSize.html)
pub const IconSize = enum(u32) {
    inherit = 0,
    normal = 1,
    large = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_size_get_type" });
        return cFn();
    }
};
/// Class [IconTheme](https://docs.gtk.org/gtk4/class.IconTheme.html)
/// - property [display](https://docs.gtk.org/gtk4/property.IconTheme.display.html): (rw) `gdk.Display`
/// - property [icon-names](https://docs.gtk.org/gtk4/property.IconTheme.icon-names.html): (r-) `[*:null]?[*:0]const u8`
/// - property [resource-path](https://docs.gtk.org/gtk4/property.IconTheme.resource-path.html): (rw) `[*:null]?[*:0]const u8`
/// - property [search-path](https://docs.gtk.org/gtk4/property.IconTheme.search-path.html): (rw) `[*:null]?[*:0]const u8`
/// - property [theme-name](https://docs.gtk.org/gtk4/property.IconTheme.theme-name.html): (rw) `[*:0]const u8`
pub const IconTheme = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.IconTheme.new.html)
    pub fn new() *IconTheme {
        const cFn = @extern(*const fn () callconv(.c) *IconTheme, .{ .name = "gtk_icon_theme_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_for_display](https://docs.gtk.org/gtk4/type_func.IconTheme.get_for_display.html)
    pub fn getForDisplay(_display: *gdk.Display) *gtk.IconTheme {
        const cFn = @extern(*const fn (*gdk.Display) callconv(.c) *gtk.IconTheme, .{ .name = "gtk_icon_theme_get_for_display" });
        const ret = cFn(_display);
        return ret;
    }
    /// method [add_resource_path](https://docs.gtk.org/gtk4/method.IconTheme.add_resource_path.html)
    pub fn addResourcePath(self: *IconTheme, _path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*IconTheme, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_icon_theme_add_resource_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [add_search_path](https://docs.gtk.org/gtk4/method.IconTheme.add_search_path.html)
    pub fn addSearchPath(self: *IconTheme, _path: [*:0]const u8) void {
        const cFn = @extern(*const fn (*IconTheme, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_icon_theme_add_search_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gtk4/method.IconTheme.get_display.html)
    pub fn getDisplay(self: *IconTheme) ?*gdk.Display {
        const cFn = @extern(*const fn (*IconTheme) callconv(.c) ?*gdk.Display, .{ .name = "gtk_icon_theme_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_names](https://docs.gtk.org/gtk4/method.IconTheme.get_icon_names.html)
    pub fn getIconNames(self: *IconTheme) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*IconTheme) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_icon_theme_get_icon_names" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_sizes](https://docs.gtk.org/gtk4/method.IconTheme.get_icon_sizes.html)
    pub fn getIconSizes(self: *IconTheme, _icon_name: [*:0]const u8) [*:0]i32 {
        const cFn = @extern(*const fn (*IconTheme, [*:0]const u8) callconv(.c) [*:0]i32, .{ .name = "gtk_icon_theme_get_icon_sizes" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [get_resource_path](https://docs.gtk.org/gtk4/method.IconTheme.get_resource_path.html)
    pub fn getResourcePath(self: *IconTheme) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*IconTheme) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gtk_icon_theme_get_resource_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_search_path](https://docs.gtk.org/gtk4/method.IconTheme.get_search_path.html)
    pub fn getSearchPath(self: *IconTheme) ?[*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*IconTheme) callconv(.c) ?[*:null]?[*:0]const u8, .{ .name = "gtk_icon_theme_get_search_path" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_theme_name](https://docs.gtk.org/gtk4/method.IconTheme.get_theme_name.html)
    pub fn getThemeName(self: *IconTheme) [*:0]u8 {
        const cFn = @extern(*const fn (*IconTheme) callconv(.c) [*:0]u8, .{ .name = "gtk_icon_theme_get_theme_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_gicon](https://docs.gtk.org/gtk4/method.IconTheme.has_gicon.html)
    pub fn hasGicon(self: *IconTheme, _gicon: *gio.Icon) bool {
        const cFn = @extern(*const fn (*IconTheme, *gio.Icon) callconv(.c) bool, .{ .name = "gtk_icon_theme_has_gicon" });
        const ret = cFn(self, _gicon);
        return ret;
    }
    /// method [has_icon](https://docs.gtk.org/gtk4/method.IconTheme.has_icon.html)
    pub fn hasIcon(self: *IconTheme, _icon_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*IconTheme, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_icon_theme_has_icon" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [lookup_by_gicon](https://docs.gtk.org/gtk4/method.IconTheme.lookup_by_gicon.html)
    pub fn lookupByGicon(self: *IconTheme, _icon: *gio.Icon, _size: i32, _scale: i32, _direction: gtk.TextDirection, _flags: gtk.IconLookupFlags) *gtk.IconPaintable {
        const cFn = @extern(*const fn (*IconTheme, *gio.Icon, i32, i32, gtk.TextDirection, gtk.IconLookupFlags) callconv(.c) *gtk.IconPaintable, .{ .name = "gtk_icon_theme_lookup_by_gicon" });
        const ret = cFn(self, _icon, _size, _scale, _direction, _flags);
        return ret;
    }
    /// method [lookup_icon](https://docs.gtk.org/gtk4/method.IconTheme.lookup_icon.html)
    pub fn lookupIcon(self: *IconTheme, _icon_name: [*:0]const u8, _fallbacks: ?[*:null]?[*:0]const u8, _size: i32, _scale: i32, _direction: gtk.TextDirection, _flags: gtk.IconLookupFlags) *gtk.IconPaintable {
        const cFn = @extern(*const fn (*IconTheme, [*:0]const u8, ?[*:null]?[*:0]const u8, i32, i32, gtk.TextDirection, gtk.IconLookupFlags) callconv(.c) *gtk.IconPaintable, .{ .name = "gtk_icon_theme_lookup_icon" });
        const ret = cFn(self, _icon_name, _fallbacks, _size, _scale, _direction, _flags);
        return ret;
    }
    /// method [set_resource_path](https://docs.gtk.org/gtk4/method.IconTheme.set_resource_path.html)
    pub fn setResourcePath(self: *IconTheme, _path: ?[*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*IconTheme, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_icon_theme_set_resource_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [set_search_path](https://docs.gtk.org/gtk4/method.IconTheme.set_search_path.html)
    pub fn setSearchPath(self: *IconTheme, _path: ?[*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*IconTheme, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_icon_theme_set_search_path" });
        const ret = cFn(self, _path);
        return ret;
    }
    /// method [set_theme_name](https://docs.gtk.org/gtk4/method.IconTheme.set_theme_name.html)
    pub fn setThemeName(self: *IconTheme, _theme_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*IconTheme, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_icon_theme_set_theme_name" });
        const ret = cFn(self, _theme_name);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.IconTheme.changed.html)
    pub fn connectChanged(self: *IconTheme, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *IconTheme });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_theme_get_type" });
        return cFn();
    }
};
/// Error [IconThemeError](https://docs.gtk.org/gtk4/error.IconThemeError.html)
pub const IconThemeError = enum(u32) {
    not_found = 0,
    failed = 1,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.IconThemeError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_icon_theme_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_theme_error_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [IconView](https://docs.gtk.org/gtk4/class.IconView.html)
/// - property [activate-on-single-click](https://docs.gtk.org/gtk4/property.IconView.activate-on-single-click.html): (rw) `bool`
/// - property [cell-area](https://docs.gtk.org/gtk4/property.IconView.cell-area.html): (r-) `gtk.CellArea`
/// - property [column-spacing](https://docs.gtk.org/gtk4/property.IconView.column-spacing.html): (rw) `i32`
/// - property [columns](https://docs.gtk.org/gtk4/property.IconView.columns.html): (rw) `i32`
/// - property [item-orientation](https://docs.gtk.org/gtk4/property.IconView.item-orientation.html): (rw) `gtk.Orientation`
/// - property [item-padding](https://docs.gtk.org/gtk4/property.IconView.item-padding.html): (rw) `i32`
/// - property [item-width](https://docs.gtk.org/gtk4/property.IconView.item-width.html): (rw) `i32`
/// - property [margin](https://docs.gtk.org/gtk4/property.IconView.margin.html): (rw) `i32`
/// - property [markup-column](https://docs.gtk.org/gtk4/property.IconView.markup-column.html): (rw) `i32`
/// - property [model](https://docs.gtk.org/gtk4/property.IconView.model.html): (rw) `gtk.TreeModel`
/// - property [pixbuf-column](https://docs.gtk.org/gtk4/property.IconView.pixbuf-column.html): (rw) `i32`
/// - property [reorderable](https://docs.gtk.org/gtk4/property.IconView.reorderable.html): (rw) `bool`
/// - property [row-spacing](https://docs.gtk.org/gtk4/property.IconView.row-spacing.html): (rw) `i32`
/// - property [selection-mode](https://docs.gtk.org/gtk4/property.IconView.selection-mode.html): (rw) `gtk.SelectionMode`
/// - property [spacing](https://docs.gtk.org/gtk4/property.IconView.spacing.html): (rw) `i32`
/// - property [text-column](https://docs.gtk.org/gtk4/property.IconView.text-column.html): (rw) `i32`
/// - property [tooltip-column](https://docs.gtk.org/gtk4/property.IconView.tooltip-column.html): (rw) `i32`
pub const IconView = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.CellLayout, gtk.ConstraintTarget, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.IconView.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *IconView {
            const cFn = @extern(*const fn () callconv(.c) *IconView, .{ .name = "gtk_icon_view_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_area](https://docs.gtk.org/gtk4/ctor.IconView.new_with_area.html)
    pub const newWithArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithArea(_area: *gtk.CellArea) *IconView {
            const cFn = @extern(*const fn (*gtk.CellArea) callconv(.c) *IconView, .{ .name = "gtk_icon_view_new_with_area" });
            const ret = cFn(_area);
            return ret;
        }
    }.newWithArea;
    /// Deprecated:
    /// ctor [new_with_model](https://docs.gtk.org/gtk4/ctor.IconView.new_with_model.html)
    pub const newWithModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithModel(_model: *gtk.TreeModel) *IconView {
            const cFn = @extern(*const fn (*gtk.TreeModel) callconv(.c) *IconView, .{ .name = "gtk_icon_view_new_with_model" });
            const ret = cFn(_model);
            return ret;
        }
    }.newWithModel;
    /// Deprecated:
    /// method [create_drag_icon](https://docs.gtk.org/gtk4/method.IconView.create_drag_icon.html)
    pub const createDragIcon = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn createDragIcon(self: *IconView, _path: *gtk.TreePath) ?*gdk.Paintable {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_icon_view_create_drag_icon" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.createDragIcon;
    /// Deprecated:
    /// method [enable_model_drag_dest](https://docs.gtk.org/gtk4/method.IconView.enable_model_drag_dest.html)
    pub const enableModelDragDest = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn enableModelDragDest(self: *IconView, _formats: *gdk.ContentFormats, _actions: gdk.DragAction) void {
            const cFn = @extern(*const fn (*IconView, *gdk.ContentFormats, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_icon_view_enable_model_drag_dest" });
            const ret = cFn(self, _formats, _actions);
            return ret;
        }
    }.enableModelDragDest;
    /// Deprecated:
    /// method [enable_model_drag_source](https://docs.gtk.org/gtk4/method.IconView.enable_model_drag_source.html)
    pub const enableModelDragSource = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn enableModelDragSource(self: *IconView, _start_button_mask: gdk.ModifierType, _formats: *gdk.ContentFormats, _actions: gdk.DragAction) void {
            const cFn = @extern(*const fn (*IconView, gdk.ModifierType, *gdk.ContentFormats, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_icon_view_enable_model_drag_source" });
            const ret = cFn(self, _start_button_mask, _formats, _actions);
            return ret;
        }
    }.enableModelDragSource;
    /// Deprecated:
    /// method [get_activate_on_single_click](https://docs.gtk.org/gtk4/method.IconView.get_activate_on_single_click.html)
    pub const getActivateOnSingleClick = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActivateOnSingleClick(self: *IconView) bool {
            const cFn = @extern(*const fn (*IconView) callconv(.c) bool, .{ .name = "gtk_icon_view_get_activate_on_single_click" });
            const ret = cFn(self);
            return ret;
        }
    }.getActivateOnSingleClick;
    /// Deprecated:
    /// method [get_cell_rect](https://docs.gtk.org/gtk4/method.IconView.get_cell_rect.html)
    pub const getCellRect = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCellRect(self: *IconView, _path: *gtk.TreePath, _cell: ?*gtk.CellRenderer, _rect: *gdk.Rectangle) bool {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath, ?*gtk.CellRenderer, *gdk.Rectangle) callconv(.c) bool, .{ .name = "gtk_icon_view_get_cell_rect" });
            const ret = cFn(self, _path, _cell, _rect);
            return ret;
        }
    }.getCellRect;
    /// Deprecated:
    /// method [get_column_spacing](https://docs.gtk.org/gtk4/method.IconView.get_column_spacing.html)
    pub const getColumnSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColumnSpacing(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_column_spacing" });
            const ret = cFn(self);
            return ret;
        }
    }.getColumnSpacing;
    /// Deprecated:
    /// method [get_columns](https://docs.gtk.org/gtk4/method.IconView.get_columns.html)
    pub const getColumns = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColumns(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_columns" });
            const ret = cFn(self);
            return ret;
        }
    }.getColumns;
    /// Deprecated:
    /// method [get_cursor](https://docs.gtk.org/gtk4/method.IconView.get_cursor.html)
    pub const getCursor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCursor(self: *IconView) ?struct {
            path: *gtk.TreePath,
            cell: *gtk.CellRenderer,
        } {
            var path_out: *gtk.TreePath = undefined;
            const _path = &path_out;
            var cell_out: *gtk.CellRenderer = undefined;
            const _cell = &cell_out;
            const cFn = @extern(*const fn (*IconView, ?**gtk.TreePath, ?**gtk.CellRenderer) callconv(.c) bool, .{ .name = "gtk_icon_view_get_cursor" });
            const ret = cFn(self, _path, _cell);
            if (!ret) return null;
            return .{ .path = path_out, .cell = cell_out };
        }
    }.getCursor;
    /// Deprecated:
    /// method [get_dest_item_at_pos](https://docs.gtk.org/gtk4/method.IconView.get_dest_item_at_pos.html)
    pub const getDestItemAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDestItemAtPos(self: *IconView, _drag_x: i32, _drag_y: i32) ?struct {
            path: *gtk.TreePath,
            pos: gtk.IconViewDropPosition,
        } {
            var path_out: *gtk.TreePath = undefined;
            const _path = &path_out;
            var pos_out: gtk.IconViewDropPosition = undefined;
            const _pos = &pos_out;
            const cFn = @extern(*const fn (*IconView, i32, i32, ?**gtk.TreePath, ?*gtk.IconViewDropPosition) callconv(.c) bool, .{ .name = "gtk_icon_view_get_dest_item_at_pos" });
            const ret = cFn(self, _drag_x, _drag_y, _path, _pos);
            if (!ret) return null;
            return .{ .path = path_out, .pos = pos_out };
        }
    }.getDestItemAtPos;
    /// Deprecated:
    /// method [get_drag_dest_item](https://docs.gtk.org/gtk4/method.IconView.get_drag_dest_item.html)
    pub const getDragDestItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDragDestItem(self: *IconView) struct {
            ret: void,
            path: ?*gtk.TreePath,
            pos: gtk.IconViewDropPosition,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var pos_out: gtk.IconViewDropPosition = undefined;
            const _pos = &pos_out;
            const cFn = @extern(*const fn (*IconView, ?*?*gtk.TreePath, ?*gtk.IconViewDropPosition) callconv(.c) void, .{ .name = "gtk_icon_view_get_drag_dest_item" });
            const ret = cFn(self, _path, _pos);
            return .{ .ret = ret, .path = path_out, .pos = pos_out };
        }
    }.getDragDestItem;
    /// Deprecated:
    /// method [get_item_at_pos](https://docs.gtk.org/gtk4/method.IconView.get_item_at_pos.html)
    pub const getItemAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemAtPos(self: *IconView, _x: i32, _y: i32) ?struct {
            path: *gtk.TreePath,
            cell: *gtk.CellRenderer,
        } {
            var path_out: *gtk.TreePath = undefined;
            const _path = &path_out;
            var cell_out: *gtk.CellRenderer = undefined;
            const _cell = &cell_out;
            const cFn = @extern(*const fn (*IconView, i32, i32, ?**gtk.TreePath, ?**gtk.CellRenderer) callconv(.c) bool, .{ .name = "gtk_icon_view_get_item_at_pos" });
            const ret = cFn(self, _x, _y, _path, _cell);
            if (!ret) return null;
            return .{ .path = path_out, .cell = cell_out };
        }
    }.getItemAtPos;
    /// Deprecated:
    /// method [get_item_column](https://docs.gtk.org/gtk4/method.IconView.get_item_column.html)
    pub const getItemColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemColumn(self: *IconView, _path: *gtk.TreePath) i32 {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) i32, .{ .name = "gtk_icon_view_get_item_column" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.getItemColumn;
    /// Deprecated:
    /// method [get_item_orientation](https://docs.gtk.org/gtk4/method.IconView.get_item_orientation.html)
    pub const getItemOrientation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemOrientation(self: *IconView) gtk.Orientation {
            const cFn = @extern(*const fn (*IconView) callconv(.c) gtk.Orientation, .{ .name = "gtk_icon_view_get_item_orientation" });
            const ret = cFn(self);
            return ret;
        }
    }.getItemOrientation;
    /// Deprecated:
    /// method [get_item_padding](https://docs.gtk.org/gtk4/method.IconView.get_item_padding.html)
    pub const getItemPadding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemPadding(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_item_padding" });
            const ret = cFn(self);
            return ret;
        }
    }.getItemPadding;
    /// Deprecated:
    /// method [get_item_row](https://docs.gtk.org/gtk4/method.IconView.get_item_row.html)
    pub const getItemRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemRow(self: *IconView, _path: *gtk.TreePath) i32 {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) i32, .{ .name = "gtk_icon_view_get_item_row" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.getItemRow;
    /// Deprecated:
    /// method [get_item_width](https://docs.gtk.org/gtk4/method.IconView.get_item_width.html)
    pub const getItemWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getItemWidth(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_item_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getItemWidth;
    /// Deprecated:
    /// method [get_margin](https://docs.gtk.org/gtk4/method.IconView.get_margin.html)
    pub const getMargin = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMargin(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_margin" });
            const ret = cFn(self);
            return ret;
        }
    }.getMargin;
    /// Deprecated:
    /// method [get_markup_column](https://docs.gtk.org/gtk4/method.IconView.get_markup_column.html)
    pub const getMarkupColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMarkupColumn(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_markup_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getMarkupColumn;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.IconView.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *IconView) ?*gtk.TreeModel {
            const cFn = @extern(*const fn (*IconView) callconv(.c) ?*gtk.TreeModel, .{ .name = "gtk_icon_view_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [get_path_at_pos](https://docs.gtk.org/gtk4/method.IconView.get_path_at_pos.html)
    pub const getPathAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPathAtPos(self: *IconView, _x: i32, _y: i32) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*IconView, i32, i32) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_icon_view_get_path_at_pos" });
            const ret = cFn(self, _x, _y);
            return ret;
        }
    }.getPathAtPos;
    /// Deprecated:
    /// method [get_pixbuf_column](https://docs.gtk.org/gtk4/method.IconView.get_pixbuf_column.html)
    pub const getPixbufColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPixbufColumn(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_pixbuf_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getPixbufColumn;
    /// Deprecated:
    /// method [get_reorderable](https://docs.gtk.org/gtk4/method.IconView.get_reorderable.html)
    pub const getReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getReorderable(self: *IconView) bool {
            const cFn = @extern(*const fn (*IconView) callconv(.c) bool, .{ .name = "gtk_icon_view_get_reorderable" });
            const ret = cFn(self);
            return ret;
        }
    }.getReorderable;
    /// Deprecated:
    /// method [get_row_spacing](https://docs.gtk.org/gtk4/method.IconView.get_row_spacing.html)
    pub const getRowSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRowSpacing(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_row_spacing" });
            const ret = cFn(self);
            return ret;
        }
    }.getRowSpacing;
    /// Deprecated:
    /// method [get_selected_items](https://docs.gtk.org/gtk4/method.IconView.get_selected_items.html)
    pub const getSelectedItems = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelectedItems(self: *IconView) ?*core.List {
            const cFn = @extern(*const fn (*IconView) callconv(.c) ?*core.List, .{ .name = "gtk_icon_view_get_selected_items" });
            const ret = cFn(self);
            return ret;
        }
    }.getSelectedItems;
    /// Deprecated:
    /// method [get_selection_mode](https://docs.gtk.org/gtk4/method.IconView.get_selection_mode.html)
    pub const getSelectionMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelectionMode(self: *IconView) gtk.SelectionMode {
            const cFn = @extern(*const fn (*IconView) callconv(.c) gtk.SelectionMode, .{ .name = "gtk_icon_view_get_selection_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getSelectionMode;
    /// Deprecated:
    /// method [get_spacing](https://docs.gtk.org/gtk4/method.IconView.get_spacing.html)
    pub const getSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSpacing(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_spacing" });
            const ret = cFn(self);
            return ret;
        }
    }.getSpacing;
    /// Deprecated:
    /// method [get_text_column](https://docs.gtk.org/gtk4/method.IconView.get_text_column.html)
    pub const getTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTextColumn(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_text_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getTextColumn;
    /// Deprecated:
    /// method [get_tooltip_column](https://docs.gtk.org/gtk4/method.IconView.get_tooltip_column.html)
    pub const getTooltipColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTooltipColumn(self: *IconView) i32 {
            const cFn = @extern(*const fn (*IconView) callconv(.c) i32, .{ .name = "gtk_icon_view_get_tooltip_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getTooltipColumn;
    /// Deprecated:
    /// method [get_tooltip_context](https://docs.gtk.org/gtk4/method.IconView.get_tooltip_context.html)
    pub const getTooltipContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTooltipContext(self: *IconView, _x: i32, _y: i32, _keyboard_tip: bool, _iter: ?*gtk.TreeIter) ?struct {
            model: *gtk.TreeModel,
            path: *gtk.TreePath,
        } {
            var model_out: *gtk.TreeModel = undefined;
            const _model = &model_out;
            var path_out: *gtk.TreePath = undefined;
            const _path = &path_out;
            const cFn = @extern(*const fn (*IconView, i32, i32, bool, ?**gtk.TreeModel, ?**gtk.TreePath, ?*gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_icon_view_get_tooltip_context" });
            const ret = cFn(self, _x, _y, _keyboard_tip, _model, _path, _iter);
            if (!ret) return null;
            return .{ .model = model_out, .path = path_out };
        }
    }.getTooltipContext;
    /// Deprecated:
    /// method [get_visible_range](https://docs.gtk.org/gtk4/method.IconView.get_visible_range.html)
    pub const getVisibleRange = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisibleRange(self: *IconView) ?struct {
            start_path: *gtk.TreePath,
            end_path: *gtk.TreePath,
        } {
            var start_path_out: *gtk.TreePath = undefined;
            const _start_path = &start_path_out;
            var end_path_out: *gtk.TreePath = undefined;
            const _end_path = &end_path_out;
            const cFn = @extern(*const fn (*IconView, ?**gtk.TreePath, ?**gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_icon_view_get_visible_range" });
            const ret = cFn(self, _start_path, _end_path);
            if (!ret) return null;
            return .{ .start_path = start_path_out, .end_path = end_path_out };
        }
    }.getVisibleRange;
    /// Deprecated:
    /// method [item_activated](https://docs.gtk.org/gtk4/method.IconView.item_activated.html)
    pub const itemActivated = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn itemActivated(self: *IconView, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_icon_view_item_activated" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.itemActivated;
    /// Deprecated:
    /// method [path_is_selected](https://docs.gtk.org/gtk4/method.IconView.path_is_selected.html)
    pub const pathIsSelected = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pathIsSelected(self: *IconView, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_icon_view_path_is_selected" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.pathIsSelected;
    /// Deprecated:
    /// method [scroll_to_path](https://docs.gtk.org/gtk4/method.IconView.scroll_to_path.html)
    pub const scrollToPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn scrollToPath(self: *IconView, _path: *gtk.TreePath, _use_align: bool, _row_align: f32, _col_align: f32) void {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath, bool, f32, f32) callconv(.c) void, .{ .name = "gtk_icon_view_scroll_to_path" });
            const ret = cFn(self, _path, _use_align, _row_align, _col_align);
            return ret;
        }
    }.scrollToPath;
    /// Deprecated:
    /// method [select_all](https://docs.gtk.org/gtk4/method.IconView.select_all.html)
    pub const selectAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectAll(self: *IconView) void {
            const cFn = @extern(*const fn (*IconView) callconv(.c) void, .{ .name = "gtk_icon_view_select_all" });
            const ret = cFn(self);
            return ret;
        }
    }.selectAll;
    /// Deprecated:
    /// method [select_path](https://docs.gtk.org/gtk4/method.IconView.select_path.html)
    pub const selectPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectPath(self: *IconView, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_icon_view_select_path" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.selectPath;
    /// Deprecated:
    /// method [selected_foreach](https://docs.gtk.org/gtk4/method.IconView.selected_foreach.html)
    pub const selectedForeach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectedForeach(self: *IconView, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.IconView, *gtk.TreePath });
            defer closure_func.deinit();
            const _func: gtk.IconViewForeachFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*IconView, gtk.IconViewForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_icon_view_selected_foreach" });
            const ret = cFn(self, _func, @ptrCast(_data));
            return ret;
        }
    }.selectedForeach;
    /// Deprecated:
    /// method [set_activate_on_single_click](https://docs.gtk.org/gtk4/method.IconView.set_activate_on_single_click.html)
    pub const setActivateOnSingleClick = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActivateOnSingleClick(self: *IconView, _single: bool) void {
            const cFn = @extern(*const fn (*IconView, bool) callconv(.c) void, .{ .name = "gtk_icon_view_set_activate_on_single_click" });
            const ret = cFn(self, _single);
            return ret;
        }
    }.setActivateOnSingleClick;
    /// Deprecated:
    /// method [set_column_spacing](https://docs.gtk.org/gtk4/method.IconView.set_column_spacing.html)
    pub const setColumnSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setColumnSpacing(self: *IconView, _column_spacing: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_column_spacing" });
            const ret = cFn(self, _column_spacing);
            return ret;
        }
    }.setColumnSpacing;
    /// Deprecated:
    /// method [set_columns](https://docs.gtk.org/gtk4/method.IconView.set_columns.html)
    pub const setColumns = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setColumns(self: *IconView, _columns: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_columns" });
            const ret = cFn(self, _columns);
            return ret;
        }
    }.setColumns;
    /// Deprecated:
    /// method [set_cursor](https://docs.gtk.org/gtk4/method.IconView.set_cursor.html)
    pub const setCursor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCursor(self: *IconView, _path: *gtk.TreePath, _cell: ?*gtk.CellRenderer, _start_editing: bool) void {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath, ?*gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_icon_view_set_cursor" });
            const ret = cFn(self, _path, _cell, _start_editing);
            return ret;
        }
    }.setCursor;
    /// Deprecated:
    /// method [set_drag_dest_item](https://docs.gtk.org/gtk4/method.IconView.set_drag_dest_item.html)
    pub const setDragDestItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDragDestItem(self: *IconView, _path: ?*gtk.TreePath, _pos: gtk.IconViewDropPosition) void {
            const cFn = @extern(*const fn (*IconView, ?*gtk.TreePath, gtk.IconViewDropPosition) callconv(.c) void, .{ .name = "gtk_icon_view_set_drag_dest_item" });
            const ret = cFn(self, _path, _pos);
            return ret;
        }
    }.setDragDestItem;
    /// Deprecated:
    /// method [set_item_orientation](https://docs.gtk.org/gtk4/method.IconView.set_item_orientation.html)
    pub const setItemOrientation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setItemOrientation(self: *IconView, _orientation: gtk.Orientation) void {
            const cFn = @extern(*const fn (*IconView, gtk.Orientation) callconv(.c) void, .{ .name = "gtk_icon_view_set_item_orientation" });
            const ret = cFn(self, _orientation);
            return ret;
        }
    }.setItemOrientation;
    /// Deprecated:
    /// method [set_item_padding](https://docs.gtk.org/gtk4/method.IconView.set_item_padding.html)
    pub const setItemPadding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setItemPadding(self: *IconView, _item_padding: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_item_padding" });
            const ret = cFn(self, _item_padding);
            return ret;
        }
    }.setItemPadding;
    /// Deprecated:
    /// method [set_item_width](https://docs.gtk.org/gtk4/method.IconView.set_item_width.html)
    pub const setItemWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setItemWidth(self: *IconView, _item_width: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_item_width" });
            const ret = cFn(self, _item_width);
            return ret;
        }
    }.setItemWidth;
    /// Deprecated:
    /// method [set_margin](https://docs.gtk.org/gtk4/method.IconView.set_margin.html)
    pub const setMargin = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMargin(self: *IconView, _margin: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_margin" });
            const ret = cFn(self, _margin);
            return ret;
        }
    }.setMargin;
    /// Deprecated:
    /// method [set_markup_column](https://docs.gtk.org/gtk4/method.IconView.set_markup_column.html)
    pub const setMarkupColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMarkupColumn(self: *IconView, _column: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_markup_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setMarkupColumn;
    /// Deprecated:
    /// method [set_model](https://docs.gtk.org/gtk4/method.IconView.set_model.html)
    pub const setModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModel(self: *IconView, _model: ?*gtk.TreeModel) void {
            const cFn = @extern(*const fn (*IconView, ?*gtk.TreeModel) callconv(.c) void, .{ .name = "gtk_icon_view_set_model" });
            const ret = cFn(self, _model);
            return ret;
        }
    }.setModel;
    /// Deprecated:
    /// method [set_pixbuf_column](https://docs.gtk.org/gtk4/method.IconView.set_pixbuf_column.html)
    pub const setPixbufColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPixbufColumn(self: *IconView, _column: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_pixbuf_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setPixbufColumn;
    /// Deprecated:
    /// method [set_reorderable](https://docs.gtk.org/gtk4/method.IconView.set_reorderable.html)
    pub const setReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setReorderable(self: *IconView, _reorderable: bool) void {
            const cFn = @extern(*const fn (*IconView, bool) callconv(.c) void, .{ .name = "gtk_icon_view_set_reorderable" });
            const ret = cFn(self, _reorderable);
            return ret;
        }
    }.setReorderable;
    /// Deprecated:
    /// method [set_row_spacing](https://docs.gtk.org/gtk4/method.IconView.set_row_spacing.html)
    pub const setRowSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRowSpacing(self: *IconView, _row_spacing: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_row_spacing" });
            const ret = cFn(self, _row_spacing);
            return ret;
        }
    }.setRowSpacing;
    /// Deprecated:
    /// method [set_selection_mode](https://docs.gtk.org/gtk4/method.IconView.set_selection_mode.html)
    pub const setSelectionMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSelectionMode(self: *IconView, _mode: gtk.SelectionMode) void {
            const cFn = @extern(*const fn (*IconView, gtk.SelectionMode) callconv(.c) void, .{ .name = "gtk_icon_view_set_selection_mode" });
            const ret = cFn(self, _mode);
            return ret;
        }
    }.setSelectionMode;
    /// Deprecated:
    /// method [set_spacing](https://docs.gtk.org/gtk4/method.IconView.set_spacing.html)
    pub const setSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSpacing(self: *IconView, _spacing: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_spacing" });
            const ret = cFn(self, _spacing);
            return ret;
        }
    }.setSpacing;
    /// Deprecated:
    /// method [set_text_column](https://docs.gtk.org/gtk4/method.IconView.set_text_column.html)
    pub const setTextColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTextColumn(self: *IconView, _column: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_text_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setTextColumn;
    /// Deprecated:
    /// method [set_tooltip_cell](https://docs.gtk.org/gtk4/method.IconView.set_tooltip_cell.html)
    pub const setTooltipCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipCell(self: *IconView, _tooltip: *gtk.Tooltip, _path: *gtk.TreePath, _cell: ?*gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*IconView, *gtk.Tooltip, *gtk.TreePath, ?*gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_icon_view_set_tooltip_cell" });
            const ret = cFn(self, _tooltip, _path, _cell);
            return ret;
        }
    }.setTooltipCell;
    /// Deprecated:
    /// method [set_tooltip_column](https://docs.gtk.org/gtk4/method.IconView.set_tooltip_column.html)
    pub const setTooltipColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipColumn(self: *IconView, _column: i32) void {
            const cFn = @extern(*const fn (*IconView, i32) callconv(.c) void, .{ .name = "gtk_icon_view_set_tooltip_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setTooltipColumn;
    /// Deprecated:
    /// method [set_tooltip_item](https://docs.gtk.org/gtk4/method.IconView.set_tooltip_item.html)
    pub const setTooltipItem = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipItem(self: *IconView, _tooltip: *gtk.Tooltip, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*IconView, *gtk.Tooltip, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_icon_view_set_tooltip_item" });
            const ret = cFn(self, _tooltip, _path);
            return ret;
        }
    }.setTooltipItem;
    /// Deprecated:
    /// method [unselect_all](https://docs.gtk.org/gtk4/method.IconView.unselect_all.html)
    pub const unselectAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectAll(self: *IconView) void {
            const cFn = @extern(*const fn (*IconView) callconv(.c) void, .{ .name = "gtk_icon_view_unselect_all" });
            const ret = cFn(self);
            return ret;
        }
    }.unselectAll;
    /// Deprecated:
    /// method [unselect_path](https://docs.gtk.org/gtk4/method.IconView.unselect_path.html)
    pub const unselectPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectPath(self: *IconView, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*IconView, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_icon_view_unselect_path" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.unselectPath;
    /// Deprecated:
    /// method [unset_model_drag_dest](https://docs.gtk.org/gtk4/method.IconView.unset_model_drag_dest.html)
    pub const unsetModelDragDest = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unsetModelDragDest(self: *IconView) void {
            const cFn = @extern(*const fn (*IconView) callconv(.c) void, .{ .name = "gtk_icon_view_unset_model_drag_dest" });
            const ret = cFn(self);
            return ret;
        }
    }.unsetModelDragDest;
    /// Deprecated:
    /// method [unset_model_drag_source](https://docs.gtk.org/gtk4/method.IconView.unset_model_drag_source.html)
    pub const unsetModelDragSource = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unsetModelDragSource(self: *IconView) void {
            const cFn = @extern(*const fn (*IconView) callconv(.c) void, .{ .name = "gtk_icon_view_unset_model_drag_source" });
            const ret = cFn(self);
            return ret;
        }
    }.unsetModelDragSource;
    /// signal [activate-cursor-item](https://docs.gtk.org/gtk4/signal.IconView.activate-cursor-item.html)
    pub fn connectActivateCursorItem(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-cursor-item", handler, args, flags, &.{ bool, *IconView });
    }
    /// signal [item-activated](https://docs.gtk.org/gtk4/signal.IconView.item-activated.html)
    pub fn connectItemActivated(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("item-activated", handler, args, flags, &.{ void, *IconView, *gtk.TreePath });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.IconView.move-cursor.html)
    pub fn connectMoveCursor(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ bool, *IconView, gtk.MovementStep, i32, bool, bool });
    }
    /// signal [select-all](https://docs.gtk.org/gtk4/signal.IconView.select-all.html)
    pub fn connectSelectAll(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-all", handler, args, flags, &.{ void, *IconView });
    }
    /// signal [select-cursor-item](https://docs.gtk.org/gtk4/signal.IconView.select-cursor-item.html)
    pub fn connectSelectCursorItem(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-cursor-item", handler, args, flags, &.{ void, *IconView });
    }
    /// signal [selection-changed](https://docs.gtk.org/gtk4/signal.IconView.selection-changed.html)
    pub fn connectSelectionChanged(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("selection-changed", handler, args, flags, &.{ void, *IconView });
    }
    /// signal [toggle-cursor-item](https://docs.gtk.org/gtk4/signal.IconView.toggle-cursor-item.html)
    pub fn connectToggleCursorItem(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-cursor-item", handler, args, flags, &.{ void, *IconView });
    }
    /// signal [unselect-all](https://docs.gtk.org/gtk4/signal.IconView.unselect-all.html)
    pub fn connectUnselectAll(self: *IconView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unselect-all", handler, args, flags, &.{ void, *IconView });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_view_get_type" });
        return cFn();
    }
};
/// Enum [IconViewDropPosition](https://docs.gtk.org/gtk4/enum.IconViewDropPosition.html)
pub const IconViewDropPosition = enum(u32) {
    no_drop = 0,
    drop_into = 1,
    drop_left = 2,
    drop_right = 3,
    drop_above = 4,
    drop_below = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_icon_view_drop_position_get_type" });
        return cFn();
    }
};
/// callback [IconViewForeachFunc](https://docs.gtk.org/gtk4/callback.IconViewForeachFunc.html)
pub const IconViewForeachFunc = *const fn (_icon_view: *gtk.IconView, _path: *gtk.TreePath, _data: ?*anyopaque) callconv(.c) void;
/// Class [Image](https://docs.gtk.org/gtk4/class.Image.html)
/// - property [file](https://docs.gtk.org/gtk4/property.Image.file.html): (rw) `[*:0]const u8`
/// - property [gicon](https://docs.gtk.org/gtk4/property.Image.gicon.html): (rw) `gio.Icon`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.Image.icon-name.html): (rw) `[*:0]const u8`
/// - property [icon-size](https://docs.gtk.org/gtk4/property.Image.icon-size.html): (rw) `gtk.IconSize`
/// - property [paintable](https://docs.gtk.org/gtk4/property.Image.paintable.html): (rw) `gdk.Paintable`
/// - property [pixel-size](https://docs.gtk.org/gtk4/property.Image.pixel-size.html): (rw) `i32`
/// - property [resource](https://docs.gtk.org/gtk4/property.Image.resource.html): (rw) `[*:0]const u8`
/// - property [storage-type](https://docs.gtk.org/gtk4/property.Image.storage-type.html): (r-) `gtk.ImageType`
/// - property [use-fallback](https://docs.gtk.org/gtk4/property.Image.use-fallback.html): (rw) `bool`
pub const Image = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Image.new.html)
    pub fn new() *Image {
        const cFn = @extern(*const fn () callconv(.c) *Image, .{ .name = "gtk_image_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gtk4/ctor.Image.new_from_file.html)
    pub fn newFromFile(_filename: [*:0]const u8) *Image {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Image, .{ .name = "gtk_image_new_from_file" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_from_gicon](https://docs.gtk.org/gtk4/ctor.Image.new_from_gicon.html)
    pub fn newFromGicon(_icon: *gio.Icon) *Image {
        const cFn = @extern(*const fn (*gio.Icon) callconv(.c) *Image, .{ .name = "gtk_image_new_from_gicon" });
        const ret = cFn(_icon);
        return ret;
    }
    /// ctor [new_from_icon_name](https://docs.gtk.org/gtk4/ctor.Image.new_from_icon_name.html)
    pub fn newFromIconName(_icon_name: ?[*:0]const u8) *Image {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Image, .{ .name = "gtk_image_new_from_icon_name" });
        const ret = cFn(_icon_name);
        return ret;
    }
    /// ctor [new_from_paintable](https://docs.gtk.org/gtk4/ctor.Image.new_from_paintable.html)
    pub fn newFromPaintable(_paintable: ?*gdk.Paintable) *Image {
        const cFn = @extern(*const fn (?*gdk.Paintable) callconv(.c) *Image, .{ .name = "gtk_image_new_from_paintable" });
        const ret = cFn(_paintable);
        return ret;
    }
    /// Deprecated:
    /// ctor [new_from_pixbuf](https://docs.gtk.org/gtk4/ctor.Image.new_from_pixbuf.html)
    pub const newFromPixbuf = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromPixbuf(_pixbuf: ?*gdk_pixbuf.Pixbuf) *Image {
            const cFn = @extern(*const fn (?*gdk_pixbuf.Pixbuf) callconv(.c) *Image, .{ .name = "gtk_image_new_from_pixbuf" });
            const ret = cFn(_pixbuf);
            return ret;
        }
    }.newFromPixbuf;
    /// ctor [new_from_resource](https://docs.gtk.org/gtk4/ctor.Image.new_from_resource.html)
    pub fn newFromResource(_resource_path: [*:0]const u8) *Image {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *Image, .{ .name = "gtk_image_new_from_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// method [clear](https://docs.gtk.org/gtk4/method.Image.clear.html)
    pub fn clear(self: *Image) void {
        const cFn = @extern(*const fn (*Image) callconv(.c) void, .{ .name = "gtk_image_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gicon](https://docs.gtk.org/gtk4/method.Image.get_gicon.html)
    pub fn getGicon(self: *Image) ?*gio.Icon {
        const cFn = @extern(*const fn (*Image) callconv(.c) ?*gio.Icon, .{ .name = "gtk_image_get_gicon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.Image.get_icon_name.html)
    pub fn getIconName(self: *Image) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Image) callconv(.c) ?[*:0]u8, .{ .name = "gtk_image_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_size](https://docs.gtk.org/gtk4/method.Image.get_icon_size.html)
    pub fn getIconSize(self: *Image) gtk.IconSize {
        const cFn = @extern(*const fn (*Image) callconv(.c) gtk.IconSize, .{ .name = "gtk_image_get_icon_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_paintable](https://docs.gtk.org/gtk4/method.Image.get_paintable.html)
    pub fn getPaintable(self: *Image) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*Image) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_image_get_paintable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixel_size](https://docs.gtk.org/gtk4/method.Image.get_pixel_size.html)
    pub fn getPixelSize(self: *Image) i32 {
        const cFn = @extern(*const fn (*Image) callconv(.c) i32, .{ .name = "gtk_image_get_pixel_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_storage_type](https://docs.gtk.org/gtk4/method.Image.get_storage_type.html)
    pub fn getStorageType(self: *Image) gtk.ImageType {
        const cFn = @extern(*const fn (*Image) callconv(.c) gtk.ImageType, .{ .name = "gtk_image_get_storage_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_from_file](https://docs.gtk.org/gtk4/method.Image.set_from_file.html)
    pub fn setFromFile(self: *Image, _filename: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Image, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_image_set_from_file" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [set_from_gicon](https://docs.gtk.org/gtk4/method.Image.set_from_gicon.html)
    pub fn setFromGicon(self: *Image, _icon: *gio.Icon) void {
        const cFn = @extern(*const fn (*Image, *gio.Icon) callconv(.c) void, .{ .name = "gtk_image_set_from_gicon" });
        const ret = cFn(self, _icon);
        return ret;
    }
    /// method [set_from_icon_name](https://docs.gtk.org/gtk4/method.Image.set_from_icon_name.html)
    pub fn setFromIconName(self: *Image, _icon_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Image, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_image_set_from_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_from_paintable](https://docs.gtk.org/gtk4/method.Image.set_from_paintable.html)
    pub fn setFromPaintable(self: *Image, _paintable: ?*gdk.Paintable) void {
        const cFn = @extern(*const fn (*Image, ?*gdk.Paintable) callconv(.c) void, .{ .name = "gtk_image_set_from_paintable" });
        const ret = cFn(self, _paintable);
        return ret;
    }
    /// Deprecated:
    /// method [set_from_pixbuf](https://docs.gtk.org/gtk4/method.Image.set_from_pixbuf.html)
    pub const setFromPixbuf = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFromPixbuf(self: *Image, _pixbuf: ?*gdk_pixbuf.Pixbuf) void {
            const cFn = @extern(*const fn (*Image, ?*gdk_pixbuf.Pixbuf) callconv(.c) void, .{ .name = "gtk_image_set_from_pixbuf" });
            const ret = cFn(self, _pixbuf);
            return ret;
        }
    }.setFromPixbuf;
    /// method [set_from_resource](https://docs.gtk.org/gtk4/method.Image.set_from_resource.html)
    pub fn setFromResource(self: *Image, _resource_path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Image, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_image_set_from_resource" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    /// method [set_icon_size](https://docs.gtk.org/gtk4/method.Image.set_icon_size.html)
    pub fn setIconSize(self: *Image, _icon_size: gtk.IconSize) void {
        const cFn = @extern(*const fn (*Image, gtk.IconSize) callconv(.c) void, .{ .name = "gtk_image_set_icon_size" });
        const ret = cFn(self, _icon_size);
        return ret;
    }
    /// method [set_pixel_size](https://docs.gtk.org/gtk4/method.Image.set_pixel_size.html)
    pub fn setPixelSize(self: *Image, _pixel_size: i32) void {
        const cFn = @extern(*const fn (*Image, i32) callconv(.c) void, .{ .name = "gtk_image_set_pixel_size" });
        const ret = cFn(self, _pixel_size);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_image_get_type" });
        return cFn();
    }
};
/// Enum [ImageType](https://docs.gtk.org/gtk4/enum.ImageType.html)
pub const ImageType = enum(u32) {
    empty = 0,
    icon_name = 1,
    gicon = 2,
    paintable = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_image_type_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [InfoBar](https://docs.gtk.org/gtk4/class.InfoBar.html)
/// - property [message-type](https://docs.gtk.org/gtk4/property.InfoBar.message-type.html): (rw) `gtk.MessageType`
/// - property [revealed](https://docs.gtk.org/gtk4/property.InfoBar.revealed.html): (rw) `bool`
/// - property [show-close-button](https://docs.gtk.org/gtk4/property.InfoBar.show-close-button.html): (rw) `bool`
pub const InfoBar = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.InfoBar.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *InfoBar {
            const cFn = @extern(*const fn () callconv(.c) *InfoBar, .{ .name = "gtk_info_bar_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [add_action_widget](https://docs.gtk.org/gtk4/method.InfoBar.add_action_widget.html)
    pub const addActionWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addActionWidget(self: *InfoBar, _child: *gtk.Widget, _response_id: i32) void {
            const cFn = @extern(*const fn (*InfoBar, *gtk.Widget, i32) callconv(.c) void, .{ .name = "gtk_info_bar_add_action_widget" });
            const ret = cFn(self, _child, _response_id);
            return ret;
        }
    }.addActionWidget;
    /// Deprecated:
    /// method [add_button](https://docs.gtk.org/gtk4/method.InfoBar.add_button.html)
    pub const addButton = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addButton(self: *InfoBar, _button_text: [*:0]const u8, _response_id: i32) *gtk.Button {
            const cFn = @extern(*const fn (*InfoBar, [*:0]const u8, i32) callconv(.c) *gtk.Button, .{ .name = "gtk_info_bar_add_button" });
            const ret = cFn(self, _button_text, _response_id);
            return ret;
        }
    }.addButton;
    /// Deprecated:
    /// method [add_child](https://docs.gtk.org/gtk4/method.InfoBar.add_child.html)
    pub const addChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addChild(self: *InfoBar, _widget: *gtk.Widget) void {
            const cFn = @extern(*const fn (*InfoBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_info_bar_add_child" });
            const ret = cFn(self, _widget);
            return ret;
        }
    }.addChild;
    /// Deprecated:
    /// method [get_message_type](https://docs.gtk.org/gtk4/method.InfoBar.get_message_type.html)
    pub const getMessageType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMessageType(self: *InfoBar) gtk.MessageType {
            const cFn = @extern(*const fn (*InfoBar) callconv(.c) gtk.MessageType, .{ .name = "gtk_info_bar_get_message_type" });
            const ret = cFn(self);
            return ret;
        }
    }.getMessageType;
    /// Deprecated:
    /// method [get_revealed](https://docs.gtk.org/gtk4/method.InfoBar.get_revealed.html)
    pub const getRevealed = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRevealed(self: *InfoBar) bool {
            const cFn = @extern(*const fn (*InfoBar) callconv(.c) bool, .{ .name = "gtk_info_bar_get_revealed" });
            const ret = cFn(self);
            return ret;
        }
    }.getRevealed;
    /// Deprecated:
    /// method [get_show_close_button](https://docs.gtk.org/gtk4/method.InfoBar.get_show_close_button.html)
    pub const getShowCloseButton = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowCloseButton(self: *InfoBar) bool {
            const cFn = @extern(*const fn (*InfoBar) callconv(.c) bool, .{ .name = "gtk_info_bar_get_show_close_button" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowCloseButton;
    /// Deprecated:
    /// method [remove_action_widget](https://docs.gtk.org/gtk4/method.InfoBar.remove_action_widget.html)
    pub const removeActionWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeActionWidget(self: *InfoBar, _widget: *gtk.Widget) void {
            const cFn = @extern(*const fn (*InfoBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_info_bar_remove_action_widget" });
            const ret = cFn(self, _widget);
            return ret;
        }
    }.removeActionWidget;
    /// Deprecated:
    /// method [remove_child](https://docs.gtk.org/gtk4/method.InfoBar.remove_child.html)
    pub const removeChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeChild(self: *InfoBar, _widget: *gtk.Widget) void {
            const cFn = @extern(*const fn (*InfoBar, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_info_bar_remove_child" });
            const ret = cFn(self, _widget);
            return ret;
        }
    }.removeChild;
    /// Deprecated:
    /// method [response](https://docs.gtk.org/gtk4/method.InfoBar.response.html)
    pub const response = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn response(self: *InfoBar, _response_id: i32) void {
            const cFn = @extern(*const fn (*InfoBar, i32) callconv(.c) void, .{ .name = "gtk_info_bar_response" });
            const ret = cFn(self, _response_id);
            return ret;
        }
    }.response;
    /// Deprecated:
    /// method [set_default_response](https://docs.gtk.org/gtk4/method.InfoBar.set_default_response.html)
    pub const setDefaultResponse = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDefaultResponse(self: *InfoBar, _response_id: i32) void {
            const cFn = @extern(*const fn (*InfoBar, i32) callconv(.c) void, .{ .name = "gtk_info_bar_set_default_response" });
            const ret = cFn(self, _response_id);
            return ret;
        }
    }.setDefaultResponse;
    /// Deprecated:
    /// method [set_message_type](https://docs.gtk.org/gtk4/method.InfoBar.set_message_type.html)
    pub const setMessageType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMessageType(self: *InfoBar, _message_type: gtk.MessageType) void {
            const cFn = @extern(*const fn (*InfoBar, gtk.MessageType) callconv(.c) void, .{ .name = "gtk_info_bar_set_message_type" });
            const ret = cFn(self, _message_type);
            return ret;
        }
    }.setMessageType;
    /// Deprecated:
    /// method [set_response_sensitive](https://docs.gtk.org/gtk4/method.InfoBar.set_response_sensitive.html)
    pub const setResponseSensitive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setResponseSensitive(self: *InfoBar, _response_id: i32, _setting: bool) void {
            const cFn = @extern(*const fn (*InfoBar, i32, bool) callconv(.c) void, .{ .name = "gtk_info_bar_set_response_sensitive" });
            const ret = cFn(self, _response_id, _setting);
            return ret;
        }
    }.setResponseSensitive;
    /// Deprecated:
    /// method [set_revealed](https://docs.gtk.org/gtk4/method.InfoBar.set_revealed.html)
    pub const setRevealed = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRevealed(self: *InfoBar, _revealed: bool) void {
            const cFn = @extern(*const fn (*InfoBar, bool) callconv(.c) void, .{ .name = "gtk_info_bar_set_revealed" });
            const ret = cFn(self, _revealed);
            return ret;
        }
    }.setRevealed;
    /// Deprecated:
    /// method [set_show_close_button](https://docs.gtk.org/gtk4/method.InfoBar.set_show_close_button.html)
    pub const setShowCloseButton = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowCloseButton(self: *InfoBar, _setting: bool) void {
            const cFn = @extern(*const fn (*InfoBar, bool) callconv(.c) void, .{ .name = "gtk_info_bar_set_show_close_button" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setShowCloseButton;
    /// signal [close](https://docs.gtk.org/gtk4/signal.InfoBar.close.html)
    pub fn connectClose(self: *InfoBar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("close", handler, args, flags, &.{ void, *InfoBar });
    }
    /// signal [response](https://docs.gtk.org/gtk4/signal.InfoBar.response.html)
    pub fn connectResponse(self: *InfoBar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("response", handler, args, flags, &.{ void, *InfoBar, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_info_bar_get_type" });
        return cFn();
    }
};
/// Flags [InputHints](https://docs.gtk.org/gtk4/flags.InputHints.html)
pub const InputHints = packed struct(u32) {
    spellcheck: bool = false,
    no_spellcheck: bool = false,
    word_completion: bool = false,
    lowercase: bool = false,
    uppercase_chars: bool = false,
    uppercase_words: bool = false,
    uppercase_sentences: bool = false,
    inhibit_osk: bool = false,
    vertical_writing: bool = false,
    emoji: bool = false,
    no_emoji: bool = false,
    private: bool = false,
    _: u20 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_input_hints_get_type" });
        return cFn();
    }
};
/// Enum [InputPurpose](https://docs.gtk.org/gtk4/enum.InputPurpose.html)
pub const InputPurpose = enum(u32) {
    free_form = 0,
    alpha = 1,
    digits = 2,
    number = 3,
    phone = 4,
    url = 5,
    email = 6,
    name = 7,
    password = 8,
    pin = 9,
    terminal = 10,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_input_purpose_get_type" });
        return cFn();
    }
};
/// Class [Inscription](https://docs.gtk.org/gtk4/class.Inscription.html)
/// - property [attributes](https://docs.gtk.org/gtk4/property.Inscription.attributes.html): (rw) `pango.AttrList`
/// - property [markup](https://docs.gtk.org/gtk4/property.Inscription.markup.html): (-w) `[*:0]const u8`
/// - property [min-chars](https://docs.gtk.org/gtk4/property.Inscription.min-chars.html): (rw) `u32`
/// - property [min-lines](https://docs.gtk.org/gtk4/property.Inscription.min-lines.html): (rw) `u32`
/// - property [nat-chars](https://docs.gtk.org/gtk4/property.Inscription.nat-chars.html): (rw) `u32`
/// - property [nat-lines](https://docs.gtk.org/gtk4/property.Inscription.nat-lines.html): (rw) `u32`
/// - property [text](https://docs.gtk.org/gtk4/property.Inscription.text.html): (rw) `[*:0]const u8`
/// - property [text-overflow](https://docs.gtk.org/gtk4/property.Inscription.text-overflow.html): (rw) `gtk.InscriptionOverflow`
/// - property [wrap-mode](https://docs.gtk.org/gtk4/property.Inscription.wrap-mode.html): (rw) `pango.WrapMode`
/// - property [xalign](https://docs.gtk.org/gtk4/property.Inscription.xalign.html): (rw) `f32`
/// - property [yalign](https://docs.gtk.org/gtk4/property.Inscription.yalign.html): (rw) `f32`
pub const Inscription = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleText, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.InscriptionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Inscription.new.html)
    pub fn new(_text: ?[*:0]const u8) *Inscription {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Inscription, .{ .name = "gtk_inscription_new" });
        const ret = cFn(_text);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.Inscription.get_attributes.html)
    pub fn getAttributes(self: *Inscription) ?*pango.AttrList {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) ?*pango.AttrList, .{ .name = "gtk_inscription_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_chars](https://docs.gtk.org/gtk4/method.Inscription.get_min_chars.html)
    pub fn getMinChars(self: *Inscription) u32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) u32, .{ .name = "gtk_inscription_get_min_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_lines](https://docs.gtk.org/gtk4/method.Inscription.get_min_lines.html)
    pub fn getMinLines(self: *Inscription) u32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) u32, .{ .name = "gtk_inscription_get_min_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nat_chars](https://docs.gtk.org/gtk4/method.Inscription.get_nat_chars.html)
    pub fn getNatChars(self: *Inscription) u32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) u32, .{ .name = "gtk_inscription_get_nat_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nat_lines](https://docs.gtk.org/gtk4/method.Inscription.get_nat_lines.html)
    pub fn getNatLines(self: *Inscription) u32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) u32, .{ .name = "gtk_inscription_get_nat_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.Inscription.get_text.html)
    pub fn getText(self: *Inscription) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) ?[*:0]u8, .{ .name = "gtk_inscription_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text_overflow](https://docs.gtk.org/gtk4/method.Inscription.get_text_overflow.html)
    pub fn getTextOverflow(self: *Inscription) gtk.InscriptionOverflow {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) gtk.InscriptionOverflow, .{ .name = "gtk_inscription_get_text_overflow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap_mode](https://docs.gtk.org/gtk4/method.Inscription.get_wrap_mode.html)
    pub fn getWrapMode(self: *Inscription) pango.WrapMode {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) pango.WrapMode, .{ .name = "gtk_inscription_get_wrap_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_xalign](https://docs.gtk.org/gtk4/method.Inscription.get_xalign.html)
    pub fn getXalign(self: *Inscription) f32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) f32, .{ .name = "gtk_inscription_get_xalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_yalign](https://docs.gtk.org/gtk4/method.Inscription.get_yalign.html)
    pub fn getYalign(self: *Inscription) f32 {
        const cFn = @extern(*const fn (*Inscription) callconv(.c) f32, .{ .name = "gtk_inscription_get_yalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.Inscription.set_attributes.html)
    pub fn setAttributes(self: *Inscription, _attrs: ?*pango.AttrList) void {
        const cFn = @extern(*const fn (*Inscription, ?*pango.AttrList) callconv(.c) void, .{ .name = "gtk_inscription_set_attributes" });
        const ret = cFn(self, _attrs);
        return ret;
    }
    /// method [set_markup](https://docs.gtk.org/gtk4/method.Inscription.set_markup.html)
    pub fn setMarkup(self: *Inscription, _markup: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Inscription, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_inscription_set_markup" });
        const ret = cFn(self, _markup);
        return ret;
    }
    /// method [set_min_chars](https://docs.gtk.org/gtk4/method.Inscription.set_min_chars.html)
    pub fn setMinChars(self: *Inscription, _min_chars: u32) void {
        const cFn = @extern(*const fn (*Inscription, u32) callconv(.c) void, .{ .name = "gtk_inscription_set_min_chars" });
        const ret = cFn(self, _min_chars);
        return ret;
    }
    /// method [set_min_lines](https://docs.gtk.org/gtk4/method.Inscription.set_min_lines.html)
    pub fn setMinLines(self: *Inscription, _min_lines: u32) void {
        const cFn = @extern(*const fn (*Inscription, u32) callconv(.c) void, .{ .name = "gtk_inscription_set_min_lines" });
        const ret = cFn(self, _min_lines);
        return ret;
    }
    /// method [set_nat_chars](https://docs.gtk.org/gtk4/method.Inscription.set_nat_chars.html)
    pub fn setNatChars(self: *Inscription, _nat_chars: u32) void {
        const cFn = @extern(*const fn (*Inscription, u32) callconv(.c) void, .{ .name = "gtk_inscription_set_nat_chars" });
        const ret = cFn(self, _nat_chars);
        return ret;
    }
    /// method [set_nat_lines](https://docs.gtk.org/gtk4/method.Inscription.set_nat_lines.html)
    pub fn setNatLines(self: *Inscription, _nat_lines: u32) void {
        const cFn = @extern(*const fn (*Inscription, u32) callconv(.c) void, .{ .name = "gtk_inscription_set_nat_lines" });
        const ret = cFn(self, _nat_lines);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.Inscription.set_text.html)
    pub fn setText(self: *Inscription, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Inscription, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_inscription_set_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_text_overflow](https://docs.gtk.org/gtk4/method.Inscription.set_text_overflow.html)
    pub fn setTextOverflow(self: *Inscription, _overflow: gtk.InscriptionOverflow) void {
        const cFn = @extern(*const fn (*Inscription, gtk.InscriptionOverflow) callconv(.c) void, .{ .name = "gtk_inscription_set_text_overflow" });
        const ret = cFn(self, _overflow);
        return ret;
    }
    /// method [set_wrap_mode](https://docs.gtk.org/gtk4/method.Inscription.set_wrap_mode.html)
    pub fn setWrapMode(self: *Inscription, _wrap_mode: pango.WrapMode) void {
        const cFn = @extern(*const fn (*Inscription, pango.WrapMode) callconv(.c) void, .{ .name = "gtk_inscription_set_wrap_mode" });
        const ret = cFn(self, _wrap_mode);
        return ret;
    }
    /// method [set_xalign](https://docs.gtk.org/gtk4/method.Inscription.set_xalign.html)
    pub fn setXalign(self: *Inscription, _xalign: f32) void {
        const cFn = @extern(*const fn (*Inscription, f32) callconv(.c) void, .{ .name = "gtk_inscription_set_xalign" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_yalign](https://docs.gtk.org/gtk4/method.Inscription.set_yalign.html)
    pub fn setYalign(self: *Inscription, _yalign: f32) void {
        const cFn = @extern(*const fn (*Inscription, f32) callconv(.c) void, .{ .name = "gtk_inscription_set_yalign" });
        const ret = cFn(self, _yalign);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_inscription_get_type" });
        return cFn();
    }
};
pub const InscriptionClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Enum [InscriptionOverflow](https://docs.gtk.org/gtk4/enum.InscriptionOverflow.html)
pub const InscriptionOverflow = enum(u32) {
    clip = 0,
    ellipsize_start = 1,
    ellipsize_middle = 2,
    ellipsize_end = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_inscription_overflow_get_type" });
        return cFn();
    }
};
/// Enum [Justification](https://docs.gtk.org/gtk4/enum.Justification.html)
pub const Justification = enum(u32) {
    left = 0,
    right = 1,
    center = 2,
    fill = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_justification_get_type" });
        return cFn();
    }
};
/// Class [KeyvalTrigger](https://docs.gtk.org/gtk4/class.KeyvalTrigger.html)
/// - property [keyval](https://docs.gtk.org/gtk4/property.KeyvalTrigger.keyval.html): (r-) `u32`
/// - property [modifiers](https://docs.gtk.org/gtk4/property.KeyvalTrigger.modifiers.html): (r-) `gdk.ModifierType`
pub const KeyvalTrigger = opaque {
    pub const Parent = gtk.ShortcutTrigger;
    pub const Class = gtk.KeyvalTriggerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.KeyvalTrigger.new.html)
    pub fn new(_keyval: u32, _modifiers: gdk.ModifierType) *KeyvalTrigger {
        const cFn = @extern(*const fn (u32, gdk.ModifierType) callconv(.c) *KeyvalTrigger, .{ .name = "gtk_keyval_trigger_new" });
        const ret = cFn(_keyval, _modifiers);
        return ret;
    }
    /// method [get_keyval](https://docs.gtk.org/gtk4/method.KeyvalTrigger.get_keyval.html)
    pub fn getKeyval(self: *KeyvalTrigger) u32 {
        const cFn = @extern(*const fn (*KeyvalTrigger) callconv(.c) u32, .{ .name = "gtk_keyval_trigger_get_keyval" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modifiers](https://docs.gtk.org/gtk4/method.KeyvalTrigger.get_modifiers.html)
    pub fn getModifiers(self: *KeyvalTrigger) gdk.ModifierType {
        const cFn = @extern(*const fn (*KeyvalTrigger) callconv(.c) gdk.ModifierType, .{ .name = "gtk_keyval_trigger_get_modifiers" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_keyval_trigger_get_type" });
        return cFn();
    }
};
pub const KeyvalTriggerClass = opaque {};
/// const [LEVEL_BAR_OFFSET_FULL](https://docs.gtk.org/gtk4/const.LEVEL_BAR_OFFSET_FULL.html)
pub const LEVEL_BAR_OFFSET_FULL = "full";
/// const [LEVEL_BAR_OFFSET_HIGH](https://docs.gtk.org/gtk4/const.LEVEL_BAR_OFFSET_HIGH.html)
pub const LEVEL_BAR_OFFSET_HIGH = "high";
/// const [LEVEL_BAR_OFFSET_LOW](https://docs.gtk.org/gtk4/const.LEVEL_BAR_OFFSET_LOW.html)
pub const LEVEL_BAR_OFFSET_LOW = "low";
/// Class [Label](https://docs.gtk.org/gtk4/class.Label.html)
/// - property [attributes](https://docs.gtk.org/gtk4/property.Label.attributes.html): (rw) `pango.AttrList`
/// - property [ellipsize](https://docs.gtk.org/gtk4/property.Label.ellipsize.html): (rw) `pango.EllipsizeMode`
/// - property [extra-menu](https://docs.gtk.org/gtk4/property.Label.extra-menu.html): (rw) `gio.MenuModel`
/// - property [justify](https://docs.gtk.org/gtk4/property.Label.justify.html): (rw) `gtk.Justification`
/// - property [label](https://docs.gtk.org/gtk4/property.Label.label.html): (rw) `[*:0]const u8`
/// - property [lines](https://docs.gtk.org/gtk4/property.Label.lines.html): (rw) `i32`
/// - property [max-width-chars](https://docs.gtk.org/gtk4/property.Label.max-width-chars.html): (rw) `i32`
/// - property [mnemonic-keyval](https://docs.gtk.org/gtk4/property.Label.mnemonic-keyval.html): (r-) `u32`
/// - property [mnemonic-widget](https://docs.gtk.org/gtk4/property.Label.mnemonic-widget.html): (rw) `gtk.Widget`
/// - property [natural-wrap-mode](https://docs.gtk.org/gtk4/property.Label.natural-wrap-mode.html): (rw) `gtk.NaturalWrapMode`
/// - property [selectable](https://docs.gtk.org/gtk4/property.Label.selectable.html): (rw) `bool`
/// - property [single-line-mode](https://docs.gtk.org/gtk4/property.Label.single-line-mode.html): (rw) `bool`
/// - property [tabs](https://docs.gtk.org/gtk4/property.Label.tabs.html): (rw) `pango.TabArray`
/// - property [use-markup](https://docs.gtk.org/gtk4/property.Label.use-markup.html): (rw) `bool`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.Label.use-underline.html): (rw) `bool`
/// - property [width-chars](https://docs.gtk.org/gtk4/property.Label.width-chars.html): (rw) `i32`
/// - property [wrap](https://docs.gtk.org/gtk4/property.Label.wrap.html): (rw) `bool`
/// - property [wrap-mode](https://docs.gtk.org/gtk4/property.Label.wrap-mode.html): (rw) `pango.WrapMode`
/// - property [xalign](https://docs.gtk.org/gtk4/property.Label.xalign.html): (rw) `f32`
/// - property [yalign](https://docs.gtk.org/gtk4/property.Label.yalign.html): (rw) `f32`
pub const Label = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleText, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Label.new.html)
    pub fn new(_str: ?[*:0]const u8) *Label {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Label, .{ .name = "gtk_label_new" });
        const ret = cFn(_str);
        return ret;
    }
    /// ctor [new_with_mnemonic](https://docs.gtk.org/gtk4/ctor.Label.new_with_mnemonic.html)
    pub fn newWithMnemonic(_str: ?[*:0]const u8) *Label {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Label, .{ .name = "gtk_label_new_with_mnemonic" });
        const ret = cFn(_str);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.Label.get_attributes.html)
    pub fn getAttributes(self: *Label) ?*pango.AttrList {
        const cFn = @extern(*const fn (*Label) callconv(.c) ?*pango.AttrList, .{ .name = "gtk_label_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_current_uri](https://docs.gtk.org/gtk4/method.Label.get_current_uri.html)
    pub fn getCurrentUri(self: *Label) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Label) callconv(.c) ?[*:0]u8, .{ .name = "gtk_label_get_current_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ellipsize](https://docs.gtk.org/gtk4/method.Label.get_ellipsize.html)
    pub fn getEllipsize(self: *Label) pango.EllipsizeMode {
        const cFn = @extern(*const fn (*Label) callconv(.c) pango.EllipsizeMode, .{ .name = "gtk_label_get_ellipsize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extra_menu](https://docs.gtk.org/gtk4/method.Label.get_extra_menu.html)
    pub fn getExtraMenu(self: *Label) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*Label) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_label_get_extra_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_justify](https://docs.gtk.org/gtk4/method.Label.get_justify.html)
    pub fn getJustify(self: *Label) gtk.Justification {
        const cFn = @extern(*const fn (*Label) callconv(.c) gtk.Justification, .{ .name = "gtk_label_get_justify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.Label.get_label.html)
    pub fn getLabel(self: *Label) [*:0]u8 {
        const cFn = @extern(*const fn (*Label) callconv(.c) [*:0]u8, .{ .name = "gtk_label_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout](https://docs.gtk.org/gtk4/method.Label.get_layout.html)
    pub fn getLayout(self: *Label) *pango.Layout {
        const cFn = @extern(*const fn (*Label) callconv(.c) *pango.Layout, .{ .name = "gtk_label_get_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_offsets](https://docs.gtk.org/gtk4/method.Label.get_layout_offsets.html)
    pub fn getLayoutOffsets(self: *Label) struct {
        ret: void,
        x: i32,
        y: i32,
    } {
        var x_out: i32 = undefined;
        const _x = &x_out;
        var y_out: i32 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Label, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_label_get_layout_offsets" });
        const ret = cFn(self, _x, _y);
        return .{ .ret = ret, .x = x_out, .y = y_out };
    }
    /// method [get_lines](https://docs.gtk.org/gtk4/method.Label.get_lines.html)
    pub fn getLines(self: *Label) i32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) i32, .{ .name = "gtk_label_get_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_width_chars](https://docs.gtk.org/gtk4/method.Label.get_max_width_chars.html)
    pub fn getMaxWidthChars(self: *Label) i32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) i32, .{ .name = "gtk_label_get_max_width_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mnemonic_keyval](https://docs.gtk.org/gtk4/method.Label.get_mnemonic_keyval.html)
    pub fn getMnemonicKeyval(self: *Label) u32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) u32, .{ .name = "gtk_label_get_mnemonic_keyval" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mnemonic_widget](https://docs.gtk.org/gtk4/method.Label.get_mnemonic_widget.html)
    pub fn getMnemonicWidget(self: *Label) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Label) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_label_get_mnemonic_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_natural_wrap_mode](https://docs.gtk.org/gtk4/method.Label.get_natural_wrap_mode.html)
    pub fn getNaturalWrapMode(self: *Label) gtk.NaturalWrapMode {
        const cFn = @extern(*const fn (*Label) callconv(.c) gtk.NaturalWrapMode, .{ .name = "gtk_label_get_natural_wrap_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selectable](https://docs.gtk.org/gtk4/method.Label.get_selectable.html)
    pub fn getSelectable(self: *Label) bool {
        const cFn = @extern(*const fn (*Label) callconv(.c) bool, .{ .name = "gtk_label_get_selectable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_bounds](https://docs.gtk.org/gtk4/method.Label.get_selection_bounds.html)
    pub fn getSelectionBounds(self: *Label) ?struct {
        start: i32,
        end: i32,
    } {
        var start_out: i32 = undefined;
        const _start = &start_out;
        var end_out: i32 = undefined;
        const _end = &end_out;
        const cFn = @extern(*const fn (*Label, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "gtk_label_get_selection_bounds" });
        const ret = cFn(self, _start, _end);
        if (!ret) return null;
        return .{ .start = start_out, .end = end_out };
    }
    /// method [get_single_line_mode](https://docs.gtk.org/gtk4/method.Label.get_single_line_mode.html)
    pub fn getSingleLineMode(self: *Label) bool {
        const cFn = @extern(*const fn (*Label) callconv(.c) bool, .{ .name = "gtk_label_get_single_line_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tabs](https://docs.gtk.org/gtk4/method.Label.get_tabs.html)
    pub fn getTabs(self: *Label) ?*pango.TabArray {
        const cFn = @extern(*const fn (*Label) callconv(.c) ?*pango.TabArray, .{ .name = "gtk_label_get_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.Label.get_text.html)
    pub fn getText(self: *Label) [*:0]u8 {
        const cFn = @extern(*const fn (*Label) callconv(.c) [*:0]u8, .{ .name = "gtk_label_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_markup](https://docs.gtk.org/gtk4/method.Label.get_use_markup.html)
    pub fn getUseMarkup(self: *Label) bool {
        const cFn = @extern(*const fn (*Label) callconv(.c) bool, .{ .name = "gtk_label_get_use_markup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.Label.get_use_underline.html)
    pub fn getUseUnderline(self: *Label) bool {
        const cFn = @extern(*const fn (*Label) callconv(.c) bool, .{ .name = "gtk_label_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width_chars](https://docs.gtk.org/gtk4/method.Label.get_width_chars.html)
    pub fn getWidthChars(self: *Label) i32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) i32, .{ .name = "gtk_label_get_width_chars" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap](https://docs.gtk.org/gtk4/method.Label.get_wrap.html)
    pub fn getWrap(self: *Label) bool {
        const cFn = @extern(*const fn (*Label) callconv(.c) bool, .{ .name = "gtk_label_get_wrap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap_mode](https://docs.gtk.org/gtk4/method.Label.get_wrap_mode.html)
    pub fn getWrapMode(self: *Label) pango.WrapMode {
        const cFn = @extern(*const fn (*Label) callconv(.c) pango.WrapMode, .{ .name = "gtk_label_get_wrap_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_xalign](https://docs.gtk.org/gtk4/method.Label.get_xalign.html)
    pub fn getXalign(self: *Label) f32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) f32, .{ .name = "gtk_label_get_xalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_yalign](https://docs.gtk.org/gtk4/method.Label.get_yalign.html)
    pub fn getYalign(self: *Label) f32 {
        const cFn = @extern(*const fn (*Label) callconv(.c) f32, .{ .name = "gtk_label_get_yalign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_region](https://docs.gtk.org/gtk4/method.Label.select_region.html)
    pub fn selectRegion(self: *Label, _start_offset: i32, _end_offset: i32) void {
        const cFn = @extern(*const fn (*Label, i32, i32) callconv(.c) void, .{ .name = "gtk_label_select_region" });
        const ret = cFn(self, _start_offset, _end_offset);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.Label.set_attributes.html)
    pub fn setAttributes(self: *Label, _attrs: ?*pango.AttrList) void {
        const cFn = @extern(*const fn (*Label, ?*pango.AttrList) callconv(.c) void, .{ .name = "gtk_label_set_attributes" });
        const ret = cFn(self, _attrs);
        return ret;
    }
    /// method [set_ellipsize](https://docs.gtk.org/gtk4/method.Label.set_ellipsize.html)
    pub fn setEllipsize(self: *Label, _mode: pango.EllipsizeMode) void {
        const cFn = @extern(*const fn (*Label, pango.EllipsizeMode) callconv(.c) void, .{ .name = "gtk_label_set_ellipsize" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_extra_menu](https://docs.gtk.org/gtk4/method.Label.set_extra_menu.html)
    pub fn setExtraMenu(self: *Label, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*Label, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_label_set_extra_menu" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_justify](https://docs.gtk.org/gtk4/method.Label.set_justify.html)
    pub fn setJustify(self: *Label, _jtype: gtk.Justification) void {
        const cFn = @extern(*const fn (*Label, gtk.Justification) callconv(.c) void, .{ .name = "gtk_label_set_justify" });
        const ret = cFn(self, _jtype);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.Label.set_label.html)
    pub fn setLabel(self: *Label, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Label, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_label_set_label" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// method [set_lines](https://docs.gtk.org/gtk4/method.Label.set_lines.html)
    pub fn setLines(self: *Label, _lines: i32) void {
        const cFn = @extern(*const fn (*Label, i32) callconv(.c) void, .{ .name = "gtk_label_set_lines" });
        const ret = cFn(self, _lines);
        return ret;
    }
    /// method [set_markup](https://docs.gtk.org/gtk4/method.Label.set_markup.html)
    pub fn setMarkup(self: *Label, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Label, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_label_set_markup" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// method [set_markup_with_mnemonic](https://docs.gtk.org/gtk4/method.Label.set_markup_with_mnemonic.html)
    pub fn setMarkupWithMnemonic(self: *Label, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Label, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_label_set_markup_with_mnemonic" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// method [set_max_width_chars](https://docs.gtk.org/gtk4/method.Label.set_max_width_chars.html)
    pub fn setMaxWidthChars(self: *Label, _n_chars: i32) void {
        const cFn = @extern(*const fn (*Label, i32) callconv(.c) void, .{ .name = "gtk_label_set_max_width_chars" });
        const ret = cFn(self, _n_chars);
        return ret;
    }
    /// method [set_mnemonic_widget](https://docs.gtk.org/gtk4/method.Label.set_mnemonic_widget.html)
    pub fn setMnemonicWidget(self: *Label, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Label, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_label_set_mnemonic_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_natural_wrap_mode](https://docs.gtk.org/gtk4/method.Label.set_natural_wrap_mode.html)
    pub fn setNaturalWrapMode(self: *Label, _wrap_mode: gtk.NaturalWrapMode) void {
        const cFn = @extern(*const fn (*Label, gtk.NaturalWrapMode) callconv(.c) void, .{ .name = "gtk_label_set_natural_wrap_mode" });
        const ret = cFn(self, _wrap_mode);
        return ret;
    }
    /// method [set_selectable](https://docs.gtk.org/gtk4/method.Label.set_selectable.html)
    pub fn setSelectable(self: *Label, _setting: bool) void {
        const cFn = @extern(*const fn (*Label, bool) callconv(.c) void, .{ .name = "gtk_label_set_selectable" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_single_line_mode](https://docs.gtk.org/gtk4/method.Label.set_single_line_mode.html)
    pub fn setSingleLineMode(self: *Label, _single_line_mode: bool) void {
        const cFn = @extern(*const fn (*Label, bool) callconv(.c) void, .{ .name = "gtk_label_set_single_line_mode" });
        const ret = cFn(self, _single_line_mode);
        return ret;
    }
    /// method [set_tabs](https://docs.gtk.org/gtk4/method.Label.set_tabs.html)
    pub fn setTabs(self: *Label, _tabs: ?*pango.TabArray) void {
        const cFn = @extern(*const fn (*Label, ?*pango.TabArray) callconv(.c) void, .{ .name = "gtk_label_set_tabs" });
        const ret = cFn(self, _tabs);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.Label.set_text.html)
    pub fn setText(self: *Label, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Label, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_label_set_text" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// method [set_text_with_mnemonic](https://docs.gtk.org/gtk4/method.Label.set_text_with_mnemonic.html)
    pub fn setTextWithMnemonic(self: *Label, _str: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Label, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_label_set_text_with_mnemonic" });
        const ret = cFn(self, _str);
        return ret;
    }
    /// method [set_use_markup](https://docs.gtk.org/gtk4/method.Label.set_use_markup.html)
    pub fn setUseMarkup(self: *Label, _setting: bool) void {
        const cFn = @extern(*const fn (*Label, bool) callconv(.c) void, .{ .name = "gtk_label_set_use_markup" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.Label.set_use_underline.html)
    pub fn setUseUnderline(self: *Label, _setting: bool) void {
        const cFn = @extern(*const fn (*Label, bool) callconv(.c) void, .{ .name = "gtk_label_set_use_underline" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_width_chars](https://docs.gtk.org/gtk4/method.Label.set_width_chars.html)
    pub fn setWidthChars(self: *Label, _n_chars: i32) void {
        const cFn = @extern(*const fn (*Label, i32) callconv(.c) void, .{ .name = "gtk_label_set_width_chars" });
        const ret = cFn(self, _n_chars);
        return ret;
    }
    /// method [set_wrap](https://docs.gtk.org/gtk4/method.Label.set_wrap.html)
    pub fn setWrap(self: *Label, _wrap: bool) void {
        const cFn = @extern(*const fn (*Label, bool) callconv(.c) void, .{ .name = "gtk_label_set_wrap" });
        const ret = cFn(self, _wrap);
        return ret;
    }
    /// method [set_wrap_mode](https://docs.gtk.org/gtk4/method.Label.set_wrap_mode.html)
    pub fn setWrapMode(self: *Label, _wrap_mode: pango.WrapMode) void {
        const cFn = @extern(*const fn (*Label, pango.WrapMode) callconv(.c) void, .{ .name = "gtk_label_set_wrap_mode" });
        const ret = cFn(self, _wrap_mode);
        return ret;
    }
    /// method [set_xalign](https://docs.gtk.org/gtk4/method.Label.set_xalign.html)
    pub fn setXalign(self: *Label, _xalign: f32) void {
        const cFn = @extern(*const fn (*Label, f32) callconv(.c) void, .{ .name = "gtk_label_set_xalign" });
        const ret = cFn(self, _xalign);
        return ret;
    }
    /// method [set_yalign](https://docs.gtk.org/gtk4/method.Label.set_yalign.html)
    pub fn setYalign(self: *Label, _yalign: f32) void {
        const cFn = @extern(*const fn (*Label, f32) callconv(.c) void, .{ .name = "gtk_label_set_yalign" });
        const ret = cFn(self, _yalign);
        return ret;
    }
    /// signal [activate-current-link](https://docs.gtk.org/gtk4/signal.Label.activate-current-link.html)
    pub fn connectActivateCurrentLink(self: *Label, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-current-link", handler, args, flags, &.{ void, *Label });
    }
    /// signal [activate-link](https://docs.gtk.org/gtk4/signal.Label.activate-link.html)
    pub fn connectActivateLink(self: *Label, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-link", handler, args, flags, &.{ bool, *Label, [*:0]const u8 });
    }
    /// signal [copy-clipboard](https://docs.gtk.org/gtk4/signal.Label.copy-clipboard.html)
    pub fn connectCopyClipboard(self: *Label, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("copy-clipboard", handler, args, flags, &.{ void, *Label });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.Label.move-cursor.html)
    pub fn connectMoveCursor(self: *Label, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ void, *Label, gtk.MovementStep, i32, bool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_label_get_type" });
        return cFn();
    }
};
/// Class [LayoutChild](https://docs.gtk.org/gtk4/class.LayoutChild.html)
/// - property [child-widget](https://docs.gtk.org/gtk4/property.LayoutChild.child-widget.html): (r-) `gtk.Widget`
/// - property [layout-manager](https://docs.gtk.org/gtk4/property.LayoutChild.layout-manager.html): (r-) `gtk.LayoutManager`
pub const LayoutChild = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.LayoutChildClass;
    /// method [get_child_widget](https://docs.gtk.org/gtk4/method.LayoutChild.get_child_widget.html)
    pub fn getChildWidget(self: *LayoutChild) *gtk.Widget {
        const cFn = @extern(*const fn (*LayoutChild) callconv(.c) *gtk.Widget, .{ .name = "gtk_layout_child_get_child_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_manager](https://docs.gtk.org/gtk4/method.LayoutChild.get_layout_manager.html)
    pub fn getLayoutManager(self: *LayoutChild) *gtk.LayoutManager {
        const cFn = @extern(*const fn (*LayoutChild) callconv(.c) *gtk.LayoutManager, .{ .name = "gtk_layout_child_get_layout_manager" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_layout_child_get_type" });
        return cFn();
    }
};
pub const LayoutChildClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [LayoutManager](https://docs.gtk.org/gtk4/class.LayoutManager.html)
pub const LayoutManager = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.LayoutManagerClass;
    /// method [allocate](https://docs.gtk.org/gtk4/method.LayoutManager.allocate.html)
    pub fn allocate(self: *LayoutManager, _widget: *gtk.Widget, _width: i32, _height: i32, _baseline: i32) void {
        const cFn = @extern(*const fn (*LayoutManager, *gtk.Widget, i32, i32, i32) callconv(.c) void, .{ .name = "gtk_layout_manager_allocate" });
        const ret = cFn(self, _widget, _width, _height, _baseline);
        return ret;
    }
    /// method [get_layout_child](https://docs.gtk.org/gtk4/method.LayoutManager.get_layout_child.html)
    pub fn getLayoutChild(self: *LayoutManager, _child: *gtk.Widget) *gtk.LayoutChild {
        const cFn = @extern(*const fn (*LayoutManager, *gtk.Widget) callconv(.c) *gtk.LayoutChild, .{ .name = "gtk_layout_manager_get_layout_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_request_mode](https://docs.gtk.org/gtk4/method.LayoutManager.get_request_mode.html)
    pub fn getRequestMode(self: *LayoutManager) gtk.SizeRequestMode {
        const cFn = @extern(*const fn (*LayoutManager) callconv(.c) gtk.SizeRequestMode, .{ .name = "gtk_layout_manager_get_request_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_widget](https://docs.gtk.org/gtk4/method.LayoutManager.get_widget.html)
    pub fn getWidget(self: *LayoutManager) ?*gtk.Widget {
        const cFn = @extern(*const fn (*LayoutManager) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_layout_manager_get_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [layout_changed](https://docs.gtk.org/gtk4/method.LayoutManager.layout_changed.html)
    pub fn layoutChanged(self: *LayoutManager) void {
        const cFn = @extern(*const fn (*LayoutManager) callconv(.c) void, .{ .name = "gtk_layout_manager_layout_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [measure](https://docs.gtk.org/gtk4/method.LayoutManager.measure.html)
    pub fn measure(self: *LayoutManager, _widget: *gtk.Widget, _orientation: gtk.Orientation, _for_size: i32) struct {
        ret: void,
        minimum: i32,
        natural: i32,
        minimum_baseline: i32,
        natural_baseline: i32,
    } {
        var minimum_out: i32 = undefined;
        const _minimum = &minimum_out;
        var natural_out: i32 = undefined;
        const _natural = &natural_out;
        var minimum_baseline_out: i32 = undefined;
        const _minimum_baseline = &minimum_baseline_out;
        var natural_baseline_out: i32 = undefined;
        const _natural_baseline = &natural_baseline_out;
        const cFn = @extern(*const fn (*LayoutManager, *gtk.Widget, gtk.Orientation, i32, ?*i32, ?*i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_layout_manager_measure" });
        const ret = cFn(self, _widget, _orientation, _for_size, _minimum, _natural, _minimum_baseline, _natural_baseline);
        return .{ .ret = ret, .minimum = minimum_out, .natural = natural_out, .minimum_baseline = minimum_baseline_out, .natural_baseline = natural_baseline_out };
    }
    /// vfunc [allocate](https://docs.gtk.org/gtk4/vfunc.LayoutManager.allocate.html)
    pub fn allocateV(self: *LayoutManager, _widget: *gtk.Widget, _width: i32, _height: i32, _baseline: i32) void {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.allocate.?;
        const ret = vFn(self, _widget, _width, _height, _baseline);
        return ret;
    }
    /// vfunc [create_layout_child](https://docs.gtk.org/gtk4/vfunc.LayoutManager.create_layout_child.html)
    pub fn createLayoutChildV(self: *LayoutManager, _widget: *gtk.Widget, _for_child: *gtk.Widget) *gtk.LayoutChild {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.create_layout_child.?;
        const ret = vFn(self, _widget, _for_child);
        return ret;
    }
    /// vfunc [get_request_mode](https://docs.gtk.org/gtk4/vfunc.LayoutManager.get_request_mode.html)
    pub fn getRequestModeV(self: *LayoutManager, _widget: *gtk.Widget) gtk.SizeRequestMode {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_request_mode.?;
        const ret = vFn(self, _widget);
        return ret;
    }
    /// vfunc [measure](https://docs.gtk.org/gtk4/vfunc.LayoutManager.measure.html)
    pub fn measureV(self: *LayoutManager, _widget: *gtk.Widget, _orientation: gtk.Orientation, _for_size: i32, _minimum: ?*i32, _natural: ?*i32, _minimum_baseline: ?*i32, _natural_baseline: ?*i32) void {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.measure.?;
        const ret = vFn(self, _widget, _orientation, _for_size, _minimum, _natural, _minimum_baseline, _natural_baseline);
        return ret;
    }
    /// vfunc [root](https://docs.gtk.org/gtk4/vfunc.LayoutManager.root.html)
    pub fn rootV(self: *LayoutManager) void {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.root.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unroot](https://docs.gtk.org/gtk4/vfunc.LayoutManager.unroot.html)
    pub fn unrootV(self: *LayoutManager) void {
        const class: *LayoutManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unroot.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_layout_manager_get_type" });
        return cFn();
    }
};
pub const LayoutManagerClass = extern struct {
    parent_class: gobject.ObjectClass,
    get_request_mode: ?*const fn (_manager: *gtk.LayoutManager, _widget: *gtk.Widget) callconv(.c) gtk.SizeRequestMode,
    measure: ?*const fn (_manager: *gtk.LayoutManager, _widget: *gtk.Widget, _orientation: gtk.Orientation, _for_size: i32, _minimum: ?*i32, _natural: ?*i32, _minimum_baseline: ?*i32, _natural_baseline: ?*i32) callconv(.c) void,
    allocate: ?*const fn (_manager: *gtk.LayoutManager, _widget: *gtk.Widget, _width: i32, _height: i32, _baseline: i32) callconv(.c) void,
    layout_child_type: core.Type,
    create_layout_child: ?*const fn (_manager: *gtk.LayoutManager, _widget: *gtk.Widget, _for_child: *gtk.Widget) callconv(.c) *gtk.LayoutChild,
    root: ?*const fn (_manager: *gtk.LayoutManager) callconv(.c) void,
    unroot: ?*const fn (_manager: *gtk.LayoutManager) callconv(.c) void,
    _padding: [16]?*anyopaque,
};
/// Class [LevelBar](https://docs.gtk.org/gtk4/class.LevelBar.html)
/// - property [inverted](https://docs.gtk.org/gtk4/property.LevelBar.inverted.html): (rw) `bool`
/// - property [max-value](https://docs.gtk.org/gtk4/property.LevelBar.max-value.html): (rw) `f64`
/// - property [min-value](https://docs.gtk.org/gtk4/property.LevelBar.min-value.html): (rw) `f64`
/// - property [mode](https://docs.gtk.org/gtk4/property.LevelBar.mode.html): (rw) `gtk.LevelBarMode`
/// - property [value](https://docs.gtk.org/gtk4/property.LevelBar.value.html): (rw) `f64`
pub const LevelBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.LevelBar.new.html)
    pub fn new() *LevelBar {
        const cFn = @extern(*const fn () callconv(.c) *LevelBar, .{ .name = "gtk_level_bar_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_for_interval](https://docs.gtk.org/gtk4/ctor.LevelBar.new_for_interval.html)
    pub fn newForInterval(_min_value: f64, _max_value: f64) *LevelBar {
        const cFn = @extern(*const fn (f64, f64) callconv(.c) *LevelBar, .{ .name = "gtk_level_bar_new_for_interval" });
        const ret = cFn(_min_value, _max_value);
        return ret;
    }
    /// method [add_offset_value](https://docs.gtk.org/gtk4/method.LevelBar.add_offset_value.html)
    pub fn addOffsetValue(self: *LevelBar, _name: [*:0]const u8, _value: f64) void {
        const cFn = @extern(*const fn (*LevelBar, [*:0]const u8, f64) callconv(.c) void, .{ .name = "gtk_level_bar_add_offset_value" });
        const ret = cFn(self, _name, _value);
        return ret;
    }
    /// method [get_inverted](https://docs.gtk.org/gtk4/method.LevelBar.get_inverted.html)
    pub fn getInverted(self: *LevelBar) bool {
        const cFn = @extern(*const fn (*LevelBar) callconv(.c) bool, .{ .name = "gtk_level_bar_get_inverted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_value](https://docs.gtk.org/gtk4/method.LevelBar.get_max_value.html)
    pub fn getMaxValue(self: *LevelBar) f64 {
        const cFn = @extern(*const fn (*LevelBar) callconv(.c) f64, .{ .name = "gtk_level_bar_get_max_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_value](https://docs.gtk.org/gtk4/method.LevelBar.get_min_value.html)
    pub fn getMinValue(self: *LevelBar) f64 {
        const cFn = @extern(*const fn (*LevelBar) callconv(.c) f64, .{ .name = "gtk_level_bar_get_min_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mode](https://docs.gtk.org/gtk4/method.LevelBar.get_mode.html)
    pub fn getMode(self: *LevelBar) gtk.LevelBarMode {
        const cFn = @extern(*const fn (*LevelBar) callconv(.c) gtk.LevelBarMode, .{ .name = "gtk_level_bar_get_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset_value](https://docs.gtk.org/gtk4/method.LevelBar.get_offset_value.html)
    pub fn getOffsetValue(self: *LevelBar, _name: ?[*:0]const u8) ?f64 {
        var value_out: f64 = undefined;
        const _value = &value_out;
        const cFn = @extern(*const fn (*LevelBar, ?[*:0]const u8, *f64) callconv(.c) bool, .{ .name = "gtk_level_bar_get_offset_value" });
        const ret = cFn(self, _name, _value);
        if (!ret) return null;
        return value_out;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.LevelBar.get_value.html)
    pub fn getValue(self: *LevelBar) f64 {
        const cFn = @extern(*const fn (*LevelBar) callconv(.c) f64, .{ .name = "gtk_level_bar_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_offset_value](https://docs.gtk.org/gtk4/method.LevelBar.remove_offset_value.html)
    pub fn removeOffsetValue(self: *LevelBar, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*LevelBar, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_level_bar_remove_offset_value" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_inverted](https://docs.gtk.org/gtk4/method.LevelBar.set_inverted.html)
    pub fn setInverted(self: *LevelBar, _inverted: bool) void {
        const cFn = @extern(*const fn (*LevelBar, bool) callconv(.c) void, .{ .name = "gtk_level_bar_set_inverted" });
        const ret = cFn(self, _inverted);
        return ret;
    }
    /// method [set_max_value](https://docs.gtk.org/gtk4/method.LevelBar.set_max_value.html)
    pub fn setMaxValue(self: *LevelBar, _value: f64) void {
        const cFn = @extern(*const fn (*LevelBar, f64) callconv(.c) void, .{ .name = "gtk_level_bar_set_max_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_min_value](https://docs.gtk.org/gtk4/method.LevelBar.set_min_value.html)
    pub fn setMinValue(self: *LevelBar, _value: f64) void {
        const cFn = @extern(*const fn (*LevelBar, f64) callconv(.c) void, .{ .name = "gtk_level_bar_set_min_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_mode](https://docs.gtk.org/gtk4/method.LevelBar.set_mode.html)
    pub fn setMode(self: *LevelBar, _mode: gtk.LevelBarMode) void {
        const cFn = @extern(*const fn (*LevelBar, gtk.LevelBarMode) callconv(.c) void, .{ .name = "gtk_level_bar_set_mode" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gtk4/method.LevelBar.set_value.html)
    pub fn setValue(self: *LevelBar, _value: f64) void {
        const cFn = @extern(*const fn (*LevelBar, f64) callconv(.c) void, .{ .name = "gtk_level_bar_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// signal [offset-changed](https://docs.gtk.org/gtk4/signal.LevelBar.offset-changed.html)
    pub fn connectOffsetChanged(self: *LevelBar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("offset-changed", handler, args, flags, &.{ void, *LevelBar, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_level_bar_get_type" });
        return cFn();
    }
};
/// Enum [LevelBarMode](https://docs.gtk.org/gtk4/enum.LevelBarMode.html)
pub const LevelBarMode = enum(u32) {
    continuous = 0,
    discrete = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_level_bar_mode_get_type" });
        return cFn();
    }
};
/// Enum [License](https://docs.gtk.org/gtk4/enum.License.html)
pub const License = enum(u32) {
    unknown = 0,
    custom = 1,
    gpl_2_0 = 2,
    gpl_3_0 = 3,
    lgpl_2_1 = 4,
    lgpl_3_0 = 5,
    bsd = 6,
    mit_x11 = 7,
    artistic = 8,
    gpl_2_0_only = 9,
    gpl_3_0_only = 10,
    lgpl_2_1_only = 11,
    lgpl_3_0_only = 12,
    agpl_3_0 = 13,
    agpl_3_0_only = 14,
    bsd_3 = 15,
    apache_2_0 = 16,
    mpl_2_0 = 17,
    @"0bsd" = 18,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_license_get_type" });
        return cFn();
    }
};
/// Class [LinkButton](https://docs.gtk.org/gtk4/class.LinkButton.html)
/// - property [uri](https://docs.gtk.org/gtk4/property.LinkButton.uri.html): (rw) `[*:0]const u8`
/// - property [visited](https://docs.gtk.org/gtk4/property.LinkButton.visited.html): (rw) `bool`
pub const LinkButton = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Button;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.LinkButton.new.html)
    pub fn new(_uri: [*:0]const u8) *LinkButton {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *LinkButton, .{ .name = "gtk_link_button_new" });
        const ret = cFn(_uri);
        return ret;
    }
    /// ctor [new_with_label](https://docs.gtk.org/gtk4/ctor.LinkButton.new_with_label.html)
    pub fn newWithLabel(_uri: [*:0]const u8, _label: ?[*:0]const u8) *LinkButton {
        const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8) callconv(.c) *LinkButton, .{ .name = "gtk_link_button_new_with_label" });
        const ret = cFn(_uri, _label);
        return ret;
    }
    /// method [get_uri](https://docs.gtk.org/gtk4/method.LinkButton.get_uri.html)
    pub fn getUri(self: *LinkButton) [*:0]u8 {
        const cFn = @extern(*const fn (*LinkButton) callconv(.c) [*:0]u8, .{ .name = "gtk_link_button_get_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visited](https://docs.gtk.org/gtk4/method.LinkButton.get_visited.html)
    pub fn getVisited(self: *LinkButton) bool {
        const cFn = @extern(*const fn (*LinkButton) callconv(.c) bool, .{ .name = "gtk_link_button_get_visited" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_uri](https://docs.gtk.org/gtk4/method.LinkButton.set_uri.html)
    pub fn setUri(self: *LinkButton, _uri: [*:0]const u8) void {
        const cFn = @extern(*const fn (*LinkButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_link_button_set_uri" });
        const ret = cFn(self, _uri);
        return ret;
    }
    /// method [set_visited](https://docs.gtk.org/gtk4/method.LinkButton.set_visited.html)
    pub fn setVisited(self: *LinkButton, _visited: bool) void {
        const cFn = @extern(*const fn (*LinkButton, bool) callconv(.c) void, .{ .name = "gtk_link_button_set_visited" });
        const ret = cFn(self, _visited);
        return ret;
    }
    /// signal [activate-link](https://docs.gtk.org/gtk4/signal.LinkButton.activate-link.html)
    pub fn connectActivateLink(self: *LinkButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-link", handler, args, flags, &.{ bool, *LinkButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_link_button_get_type" });
        return cFn();
    }
};
/// Class [ListBase](https://docs.gtk.org/gtk4/class.ListBase.html)
/// - property [orientation](https://docs.gtk.org/gtk4/property.ListBase.orientation.html): (rw) `gtk.Orientation`
pub const ListBase = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ListBaseClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_base_get_type" });
        return cFn();
    }
};
pub const ListBaseClass = opaque {};
/// Class [ListBox](https://docs.gtk.org/gtk4/class.ListBox.html)
/// - property [accept-unpaired-release](https://docs.gtk.org/gtk4/property.ListBox.accept-unpaired-release.html): (rw) `bool`
/// - property [activate-on-single-click](https://docs.gtk.org/gtk4/property.ListBox.activate-on-single-click.html): (rw) `bool`
/// - property [selection-mode](https://docs.gtk.org/gtk4/property.ListBox.selection-mode.html): (rw) `gtk.SelectionMode`
/// - property [show-separators](https://docs.gtk.org/gtk4/property.ListBox.show-separators.html): (rw) `bool`
pub const ListBox = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ListBox.new.html)
    pub fn new() *ListBox {
        const cFn = @extern(*const fn () callconv(.c) *ListBox, .{ .name = "gtk_list_box_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append](https://docs.gtk.org/gtk4/method.ListBox.append.html)
    pub fn append(self: *ListBox, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_append" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [bind_model](https://docs.gtk.org/gtk4/method.ListBox.bind_model.html)
    pub fn bindModel(self: *ListBox, _model: ?*gio.ListModel, create_widget_func: anytype, create_widget_func_args: anytype) void {
        var closure_create_widget_func = core.zig_closure(create_widget_func, create_widget_func_args, &.{ *gtk.Widget, *gobject.Object });
        const _create_widget_func: ?gtk.ListBoxCreateWidgetFunc = @ptrCast(closure_create_widget_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_create_widget_func.c_data());
        const _user_data_free_func: glib.DestroyNotify = @ptrCast(closure_create_widget_func.c_destroy());
        const cFn = @extern(*const fn (*ListBox, ?*gio.ListModel, ?gtk.ListBoxCreateWidgetFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_list_box_bind_model" });
        const ret = cFn(self, _model, _create_widget_func, @ptrCast(_user_data), _user_data_free_func);
        return ret;
    }
    /// method [drag_highlight_row](https://docs.gtk.org/gtk4/method.ListBox.drag_highlight_row.html)
    pub fn dragHighlightRow(self: *ListBox, _row: *gtk.ListBoxRow) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.ListBoxRow) callconv(.c) void, .{ .name = "gtk_list_box_drag_highlight_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [drag_unhighlight_row](https://docs.gtk.org/gtk4/method.ListBox.drag_unhighlight_row.html)
    pub fn dragUnhighlightRow(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_drag_unhighlight_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_activate_on_single_click](https://docs.gtk.org/gtk4/method.ListBox.get_activate_on_single_click.html)
    pub fn getActivateOnSingleClick(self: *ListBox) bool {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) bool, .{ .name = "gtk_list_box_get_activate_on_single_click" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_adjustment](https://docs.gtk.org/gtk4/method.ListBox.get_adjustment.html)
    pub fn getAdjustment(self: *ListBox) ?*gtk.Adjustment {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) ?*gtk.Adjustment, .{ .name = "gtk_list_box_get_adjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row_at_index](https://docs.gtk.org/gtk4/method.ListBox.get_row_at_index.html)
    pub fn getRowAtIndex(self: *ListBox, _index_: i32) ?*gtk.ListBoxRow {
        const cFn = @extern(*const fn (*ListBox, i32) callconv(.c) ?*gtk.ListBoxRow, .{ .name = "gtk_list_box_get_row_at_index" });
        const ret = cFn(self, _index_);
        return ret;
    }
    /// method [get_row_at_y](https://docs.gtk.org/gtk4/method.ListBox.get_row_at_y.html)
    pub fn getRowAtY(self: *ListBox, _y: i32) ?*gtk.ListBoxRow {
        const cFn = @extern(*const fn (*ListBox, i32) callconv(.c) ?*gtk.ListBoxRow, .{ .name = "gtk_list_box_get_row_at_y" });
        const ret = cFn(self, _y);
        return ret;
    }
    /// method [get_selected_row](https://docs.gtk.org/gtk4/method.ListBox.get_selected_row.html)
    pub fn getSelectedRow(self: *ListBox) ?*gtk.ListBoxRow {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) ?*gtk.ListBoxRow, .{ .name = "gtk_list_box_get_selected_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_rows](https://docs.gtk.org/gtk4/method.ListBox.get_selected_rows.html)
    pub fn getSelectedRows(self: *ListBox) ?*core.List {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) ?*core.List, .{ .name = "gtk_list_box_get_selected_rows" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_mode](https://docs.gtk.org/gtk4/method.ListBox.get_selection_mode.html)
    pub fn getSelectionMode(self: *ListBox) gtk.SelectionMode {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) gtk.SelectionMode, .{ .name = "gtk_list_box_get_selection_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_separators](https://docs.gtk.org/gtk4/method.ListBox.get_show_separators.html)
    pub fn getShowSeparators(self: *ListBox) bool {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) bool, .{ .name = "gtk_list_box_get_show_separators" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/gtk4/method.ListBox.insert.html)
    pub fn insert(self: *ListBox, _child: *gtk.Widget, _position: i32) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.Widget, i32) callconv(.c) void, .{ .name = "gtk_list_box_insert" });
        const ret = cFn(self, _child, _position);
        return ret;
    }
    /// method [invalidate_filter](https://docs.gtk.org/gtk4/method.ListBox.invalidate_filter.html)
    pub fn invalidateFilter(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_invalidate_filter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invalidate_headers](https://docs.gtk.org/gtk4/method.ListBox.invalidate_headers.html)
    pub fn invalidateHeaders(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_invalidate_headers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invalidate_sort](https://docs.gtk.org/gtk4/method.ListBox.invalidate_sort.html)
    pub fn invalidateSort(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_invalidate_sort" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prepend](https://docs.gtk.org/gtk4/method.ListBox.prepend.html)
    pub fn prepend(self: *ListBox, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_prepend" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.ListBox.remove.html)
    pub fn remove(self: *ListBox, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [remove_all](https://docs.gtk.org/gtk4/method.ListBox.remove_all.html)
    pub fn removeAll(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_remove_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_all](https://docs.gtk.org/gtk4/method.ListBox.select_all.html)
    pub fn selectAll(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_select_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_row](https://docs.gtk.org/gtk4/method.ListBox.select_row.html)
    pub fn selectRow(self: *ListBox, _row: ?*gtk.ListBoxRow) void {
        const cFn = @extern(*const fn (*ListBox, ?*gtk.ListBoxRow) callconv(.c) void, .{ .name = "gtk_list_box_select_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// method [selected_foreach](https://docs.gtk.org/gtk4/method.ListBox.selected_foreach.html)
    pub fn selectedForeach(self: *ListBox, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.ListBox, *gtk.ListBoxRow });
        defer closure_func.deinit();
        const _func: gtk.ListBoxForeachFunc = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*ListBox, gtk.ListBoxForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_list_box_selected_foreach" });
        const ret = cFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// method [set_activate_on_single_click](https://docs.gtk.org/gtk4/method.ListBox.set_activate_on_single_click.html)
    pub fn setActivateOnSingleClick(self: *ListBox, _single: bool) void {
        const cFn = @extern(*const fn (*ListBox, bool) callconv(.c) void, .{ .name = "gtk_list_box_set_activate_on_single_click" });
        const ret = cFn(self, _single);
        return ret;
    }
    /// method [set_adjustment](https://docs.gtk.org/gtk4/method.ListBox.set_adjustment.html)
    pub fn setAdjustment(self: *ListBox, _adjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*ListBox, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_list_box_set_adjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [set_filter_func](https://docs.gtk.org/gtk4/method.ListBox.set_filter_func.html)
    pub fn setFilterFunc(self: *ListBox, filter_func: anytype, filter_func_args: anytype) void {
        var closure_filter_func = core.zig_closure(filter_func, filter_func_args, &.{ bool, *gtk.ListBoxRow });
        const _filter_func: ?gtk.ListBoxFilterFunc = @ptrCast(closure_filter_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_filter_func.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_filter_func.c_destroy());
        const cFn = @extern(*const fn (*ListBox, ?gtk.ListBoxFilterFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_list_box_set_filter_func" });
        const ret = cFn(self, _filter_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [set_header_func](https://docs.gtk.org/gtk4/method.ListBox.set_header_func.html)
    pub fn setHeaderFunc(self: *ListBox, update_header: anytype, update_header_args: anytype) void {
        var closure_update_header = core.zig_closure(update_header, update_header_args, &.{ void, *gtk.ListBoxRow, ?*gtk.ListBoxRow });
        const _update_header: ?gtk.ListBoxUpdateHeaderFunc = @ptrCast(closure_update_header.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_update_header.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_update_header.c_destroy());
        const cFn = @extern(*const fn (*ListBox, ?gtk.ListBoxUpdateHeaderFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_list_box_set_header_func" });
        const ret = cFn(self, _update_header, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [set_placeholder](https://docs.gtk.org/gtk4/method.ListBox.set_placeholder.html)
    pub fn setPlaceholder(self: *ListBox, _placeholder: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBox, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_set_placeholder" });
        const ret = cFn(self, _placeholder);
        return ret;
    }
    /// method [set_selection_mode](https://docs.gtk.org/gtk4/method.ListBox.set_selection_mode.html)
    pub fn setSelectionMode(self: *ListBox, _mode: gtk.SelectionMode) void {
        const cFn = @extern(*const fn (*ListBox, gtk.SelectionMode) callconv(.c) void, .{ .name = "gtk_list_box_set_selection_mode" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_show_separators](https://docs.gtk.org/gtk4/method.ListBox.set_show_separators.html)
    pub fn setShowSeparators(self: *ListBox, _show_separators: bool) void {
        const cFn = @extern(*const fn (*ListBox, bool) callconv(.c) void, .{ .name = "gtk_list_box_set_show_separators" });
        const ret = cFn(self, _show_separators);
        return ret;
    }
    /// method [set_sort_func](https://docs.gtk.org/gtk4/method.ListBox.set_sort_func.html)
    pub fn setSortFunc(self: *ListBox, sort_func: anytype, sort_func_args: anytype) void {
        var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, *gtk.ListBoxRow, *gtk.ListBoxRow });
        const _sort_func: ?gtk.ListBoxSortFunc = @ptrCast(closure_sort_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
        const _destroy: glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
        const cFn = @extern(*const fn (*ListBox, ?gtk.ListBoxSortFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_list_box_set_sort_func" });
        const ret = cFn(self, _sort_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// method [unselect_all](https://docs.gtk.org/gtk4/method.ListBox.unselect_all.html)
    pub fn unselectAll(self: *ListBox) void {
        const cFn = @extern(*const fn (*ListBox) callconv(.c) void, .{ .name = "gtk_list_box_unselect_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unselect_row](https://docs.gtk.org/gtk4/method.ListBox.unselect_row.html)
    pub fn unselectRow(self: *ListBox, _row: *gtk.ListBoxRow) void {
        const cFn = @extern(*const fn (*ListBox, *gtk.ListBoxRow) callconv(.c) void, .{ .name = "gtk_list_box_unselect_row" });
        const ret = cFn(self, _row);
        return ret;
    }
    /// signal [activate-cursor-row](https://docs.gtk.org/gtk4/signal.ListBox.activate-cursor-row.html)
    pub fn connectActivateCursorRow(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-cursor-row", handler, args, flags, &.{ void, *ListBox });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.ListBox.move-cursor.html)
    pub fn connectMoveCursor(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ void, *ListBox, gtk.MovementStep, i32, bool, bool });
    }
    /// signal [row-activated](https://docs.gtk.org/gtk4/signal.ListBox.row-activated.html)
    pub fn connectRowActivated(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-activated", handler, args, flags, &.{ void, *ListBox, *gtk.ListBoxRow });
    }
    /// signal [row-selected](https://docs.gtk.org/gtk4/signal.ListBox.row-selected.html)
    pub fn connectRowSelected(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-selected", handler, args, flags, &.{ void, *ListBox, *gtk.ListBoxRow });
    }
    /// signal [select-all](https://docs.gtk.org/gtk4/signal.ListBox.select-all.html)
    pub fn connectSelectAll(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-all", handler, args, flags, &.{ void, *ListBox });
    }
    /// signal [selected-rows-changed](https://docs.gtk.org/gtk4/signal.ListBox.selected-rows-changed.html)
    pub fn connectSelectedRowsChanged(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("selected-rows-changed", handler, args, flags, &.{ void, *ListBox });
    }
    /// signal [toggle-cursor-row](https://docs.gtk.org/gtk4/signal.ListBox.toggle-cursor-row.html)
    pub fn connectToggleCursorRow(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-cursor-row", handler, args, flags, &.{ void, *ListBox });
    }
    /// signal [unselect-all](https://docs.gtk.org/gtk4/signal.ListBox.unselect-all.html)
    pub fn connectUnselectAll(self: *ListBox, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unselect-all", handler, args, flags, &.{ void, *ListBox });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_box_get_type" });
        return cFn();
    }
};
/// callback [ListBoxCreateWidgetFunc](https://docs.gtk.org/gtk4/callback.ListBoxCreateWidgetFunc.html)
pub const ListBoxCreateWidgetFunc = *const fn (_item: *gobject.Object, _user_data: ?*anyopaque) callconv(.c) *gtk.Widget;
/// callback [ListBoxFilterFunc](https://docs.gtk.org/gtk4/callback.ListBoxFilterFunc.html)
pub const ListBoxFilterFunc = *const fn (_row: *gtk.ListBoxRow, _user_data: ?*anyopaque) callconv(.c) bool;
/// callback [ListBoxForeachFunc](https://docs.gtk.org/gtk4/callback.ListBoxForeachFunc.html)
pub const ListBoxForeachFunc = *const fn (_box: *gtk.ListBox, _row: *gtk.ListBoxRow, _user_data: ?*anyopaque) callconv(.c) void;
/// Class [ListBoxRow](https://docs.gtk.org/gtk4/class.ListBoxRow.html)
/// - property [activatable](https://docs.gtk.org/gtk4/property.ListBoxRow.activatable.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.ListBoxRow.child.html): (rw) `gtk.Widget`
/// - property [selectable](https://docs.gtk.org/gtk4/property.ListBoxRow.selectable.html): (rw) `bool`
pub const ListBoxRow = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ListBoxRowClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ListBoxRow.new.html)
    pub fn new() *ListBoxRow {
        const cFn = @extern(*const fn () callconv(.c) *ListBoxRow, .{ .name = "gtk_list_box_row_new" });
        const ret = cFn();
        return ret;
    }
    /// method [changed](https://docs.gtk.org/gtk4/method.ListBoxRow.changed.html)
    pub fn changed(self: *ListBoxRow) void {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) void, .{ .name = "gtk_list_box_row_changed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_activatable](https://docs.gtk.org/gtk4/method.ListBoxRow.get_activatable.html)
    pub fn getActivatable(self: *ListBoxRow) bool {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) bool, .{ .name = "gtk_list_box_row_get_activatable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.ListBoxRow.get_child.html)
    pub fn getChild(self: *ListBoxRow) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_list_box_row_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header](https://docs.gtk.org/gtk4/method.ListBoxRow.get_header.html)
    pub fn getHeader(self: *ListBoxRow) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_list_box_row_get_header" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_index](https://docs.gtk.org/gtk4/method.ListBoxRow.get_index.html)
    pub fn getIndex(self: *ListBoxRow) i32 {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) i32, .{ .name = "gtk_list_box_row_get_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selectable](https://docs.gtk.org/gtk4/method.ListBoxRow.get_selectable.html)
    pub fn getSelectable(self: *ListBoxRow) bool {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) bool, .{ .name = "gtk_list_box_row_get_selectable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_selected](https://docs.gtk.org/gtk4/method.ListBoxRow.is_selected.html)
    pub fn isSelected(self: *ListBoxRow) bool {
        const cFn = @extern(*const fn (*ListBoxRow) callconv(.c) bool, .{ .name = "gtk_list_box_row_is_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_activatable](https://docs.gtk.org/gtk4/method.ListBoxRow.set_activatable.html)
    pub fn setActivatable(self: *ListBoxRow, _activatable: bool) void {
        const cFn = @extern(*const fn (*ListBoxRow, bool) callconv(.c) void, .{ .name = "gtk_list_box_row_set_activatable" });
        const ret = cFn(self, _activatable);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.ListBoxRow.set_child.html)
    pub fn setChild(self: *ListBoxRow, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBoxRow, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_row_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_header](https://docs.gtk.org/gtk4/method.ListBoxRow.set_header.html)
    pub fn setHeader(self: *ListBoxRow, _header: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ListBoxRow, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_box_row_set_header" });
        const ret = cFn(self, _header);
        return ret;
    }
    /// method [set_selectable](https://docs.gtk.org/gtk4/method.ListBoxRow.set_selectable.html)
    pub fn setSelectable(self: *ListBoxRow, _selectable: bool) void {
        const cFn = @extern(*const fn (*ListBoxRow, bool) callconv(.c) void, .{ .name = "gtk_list_box_row_set_selectable" });
        const ret = cFn(self, _selectable);
        return ret;
    }
    /// vfunc [activate](https://docs.gtk.org/gtk4/vfunc.ListBoxRow.activate.html)
    pub fn activateV(self: *ListBoxRow) void {
        const class: *ListBoxRowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ListBoxRow.activate.html)
    pub fn connectActivate(self: *ListBoxRow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ListBoxRow });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_box_row_get_type" });
        return cFn();
    }
};
pub const ListBoxRowClass = extern struct {
    parent_class: gtk.WidgetClass,
    activate: ?*const fn (_row: *gtk.ListBoxRow) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// callback [ListBoxSortFunc](https://docs.gtk.org/gtk4/callback.ListBoxSortFunc.html)
pub const ListBoxSortFunc = *const fn (_row1: *gtk.ListBoxRow, _row2: *gtk.ListBoxRow, _user_data: ?*anyopaque) callconv(.c) i32;
/// callback [ListBoxUpdateHeaderFunc](https://docs.gtk.org/gtk4/callback.ListBoxUpdateHeaderFunc.html)
pub const ListBoxUpdateHeaderFunc = *const fn (_row: *gtk.ListBoxRow, _before: ?*gtk.ListBoxRow, _user_data: ?*anyopaque) callconv(.c) void;
/// Class [ListHeader](https://docs.gtk.org/gtk4/class.ListHeader.html)
/// - property [child](https://docs.gtk.org/gtk4/property.ListHeader.child.html): (rw) `gtk.Widget`
/// - property [end](https://docs.gtk.org/gtk4/property.ListHeader.end.html): (r-) `u32`
/// - property [item](https://docs.gtk.org/gtk4/property.ListHeader.item.html): (r-) `gobject.Object`
/// - property [n-items](https://docs.gtk.org/gtk4/property.ListHeader.n-items.html): (r-) `u32`
/// - property [start](https://docs.gtk.org/gtk4/property.ListHeader.start.html): (r-) `u32`
pub const ListHeader = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ListHeaderClass;
    /// method [get_child](https://docs.gtk.org/gtk4/method.ListHeader.get_child.html)
    pub fn getChild(self: *ListHeader) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ListHeader) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_list_header_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_end](https://docs.gtk.org/gtk4/method.ListHeader.get_end.html)
    pub fn getEnd(self: *ListHeader) u32 {
        const cFn = @extern(*const fn (*ListHeader) callconv(.c) u32, .{ .name = "gtk_list_header_get_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.ListHeader.get_item.html)
    pub fn getItem(self: *ListHeader) ?*gobject.Object {
        const cFn = @extern(*const fn (*ListHeader) callconv(.c) ?*gobject.Object, .{ .name = "gtk_list_header_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_items](https://docs.gtk.org/gtk4/method.ListHeader.get_n_items.html)
    pub fn getNItems(self: *ListHeader) u32 {
        const cFn = @extern(*const fn (*ListHeader) callconv(.c) u32, .{ .name = "gtk_list_header_get_n_items" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start](https://docs.gtk.org/gtk4/method.ListHeader.get_start.html)
    pub fn getStart(self: *ListHeader) u32 {
        const cFn = @extern(*const fn (*ListHeader) callconv(.c) u32, .{ .name = "gtk_list_header_get_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.ListHeader.set_child.html)
    pub fn setChild(self: *ListHeader, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ListHeader, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_header_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_header_get_type" });
        return cFn();
    }
};
pub const ListHeaderClass = opaque {};
/// Class [ListItem](https://docs.gtk.org/gtk4/class.ListItem.html)
/// - property [accessible-description](https://docs.gtk.org/gtk4/property.ListItem.accessible-description.html): (rw) `[*:0]const u8`
/// - property [accessible-label](https://docs.gtk.org/gtk4/property.ListItem.accessible-label.html): (rw) `[*:0]const u8`
/// - property [activatable](https://docs.gtk.org/gtk4/property.ListItem.activatable.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.ListItem.child.html): (rw) `gtk.Widget`
/// - property [focusable](https://docs.gtk.org/gtk4/property.ListItem.focusable.html): (rw) `bool`
/// - property [item](https://docs.gtk.org/gtk4/property.ListItem.item.html): (r-) `gobject.Object`
/// - property [position](https://docs.gtk.org/gtk4/property.ListItem.position.html): (r-) `u32`
/// - property [selectable](https://docs.gtk.org/gtk4/property.ListItem.selectable.html): (rw) `bool`
/// - property [selected](https://docs.gtk.org/gtk4/property.ListItem.selected.html): (r-) `bool`
pub const ListItem = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ListItemClass;
    /// method [get_accessible_description](https://docs.gtk.org/gtk4/method.ListItem.get_accessible_description.html)
    pub fn getAccessibleDescription(self: *ListItem) [*:0]u8 {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) [*:0]u8, .{ .name = "gtk_list_item_get_accessible_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_accessible_label](https://docs.gtk.org/gtk4/method.ListItem.get_accessible_label.html)
    pub fn getAccessibleLabel(self: *ListItem) [*:0]u8 {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) [*:0]u8, .{ .name = "gtk_list_item_get_accessible_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_activatable](https://docs.gtk.org/gtk4/method.ListItem.get_activatable.html)
    pub fn getActivatable(self: *ListItem) bool {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) bool, .{ .name = "gtk_list_item_get_activatable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.ListItem.get_child.html)
    pub fn getChild(self: *ListItem) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_list_item_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focusable](https://docs.gtk.org/gtk4/method.ListItem.get_focusable.html)
    pub fn getFocusable(self: *ListItem) bool {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) bool, .{ .name = "gtk_list_item_get_focusable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.ListItem.get_item.html)
    pub fn getItem(self: *ListItem) ?*gobject.Object {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) ?*gobject.Object, .{ .name = "gtk_list_item_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.ListItem.get_position.html)
    pub fn getPosition(self: *ListItem) u32 {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) u32, .{ .name = "gtk_list_item_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selectable](https://docs.gtk.org/gtk4/method.ListItem.get_selectable.html)
    pub fn getSelectable(self: *ListItem) bool {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) bool, .{ .name = "gtk_list_item_get_selectable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected](https://docs.gtk.org/gtk4/method.ListItem.get_selected.html)
    pub fn getSelected(self: *ListItem) bool {
        const cFn = @extern(*const fn (*ListItem) callconv(.c) bool, .{ .name = "gtk_list_item_get_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_accessible_description](https://docs.gtk.org/gtk4/method.ListItem.set_accessible_description.html)
    pub fn setAccessibleDescription(self: *ListItem, _description: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ListItem, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_list_item_set_accessible_description" });
        const ret = cFn(self, _description);
        return ret;
    }
    /// method [set_accessible_label](https://docs.gtk.org/gtk4/method.ListItem.set_accessible_label.html)
    pub fn setAccessibleLabel(self: *ListItem, _label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ListItem, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_list_item_set_accessible_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_activatable](https://docs.gtk.org/gtk4/method.ListItem.set_activatable.html)
    pub fn setActivatable(self: *ListItem, _activatable: bool) void {
        const cFn = @extern(*const fn (*ListItem, bool) callconv(.c) void, .{ .name = "gtk_list_item_set_activatable" });
        const ret = cFn(self, _activatable);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.ListItem.set_child.html)
    pub fn setChild(self: *ListItem, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ListItem, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_list_item_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_focusable](https://docs.gtk.org/gtk4/method.ListItem.set_focusable.html)
    pub fn setFocusable(self: *ListItem, _focusable: bool) void {
        const cFn = @extern(*const fn (*ListItem, bool) callconv(.c) void, .{ .name = "gtk_list_item_set_focusable" });
        const ret = cFn(self, _focusable);
        return ret;
    }
    /// method [set_selectable](https://docs.gtk.org/gtk4/method.ListItem.set_selectable.html)
    pub fn setSelectable(self: *ListItem, _selectable: bool) void {
        const cFn = @extern(*const fn (*ListItem, bool) callconv(.c) void, .{ .name = "gtk_list_item_set_selectable" });
        const ret = cFn(self, _selectable);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_item_get_type" });
        return cFn();
    }
};
pub const ListItemClass = opaque {};
/// Class [ListItemFactory](https://docs.gtk.org/gtk4/class.ListItemFactory.html)
pub const ListItemFactory = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ListItemFactoryClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_item_factory_get_type" });
        return cFn();
    }
};
pub const ListItemFactoryClass = opaque {};
/// Flags [ListScrollFlags](https://docs.gtk.org/gtk4/flags.ListScrollFlags.html)
pub const ListScrollFlags = packed struct(u32) {
    focus: bool = false,
    select: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_scroll_flags_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [ListStore](https://docs.gtk.org/gtk4/class.ListStore.html)
pub const ListStore = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gobject.Object,
    priv: ?*gtk.ListStorePrivate,
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.TreeDragDest, gtk.TreeDragSource, gtk.TreeModel, gtk.TreeSortable };
    pub const Parent = gobject.Object;
    pub const Class = gtk.ListStoreClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ListStore.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_typess: []core.Type) *ListStore {
            const _n_columns: i32 = @intCast(_typess.len);
            const _types = _typess.ptr;
            const cFn = @extern(*const fn (i32, [*]core.Type) callconv(.c) *ListStore, .{ .name = "gtk_list_store_newv" });
            const ret = cFn(_n_columns, _types);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [append](https://docs.gtk.org/gtk4/method.ListStore.append.html)
    pub const append = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn append(self: *ListStore, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_append" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.append;
    /// Deprecated:
    /// method [clear](https://docs.gtk.org/gtk4/method.ListStore.clear.html)
    pub const clear = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clear(self: *ListStore) void {
            const cFn = @extern(*const fn (*ListStore) callconv(.c) void, .{ .name = "gtk_list_store_clear" });
            const ret = cFn(self);
            return ret;
        }
    }.clear;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/gtk4/method.ListStore.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *ListStore, _iter: *gtk.TreeIter, _position: i32) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, i32) callconv(.c) void, .{ .name = "gtk_list_store_insert" });
            const ret = cFn(self, _iter, _position);
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [insert_after](https://docs.gtk.org/gtk4/method.ListStore.insert_after.html)
    pub const insertAfter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertAfter(self: *ListStore, _iter: *gtk.TreeIter, _sibling: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_insert_after" });
            const ret = cFn(self, _iter, _sibling);
            return ret;
        }
    }.insertAfter;
    /// Deprecated:
    /// method [insert_before](https://docs.gtk.org/gtk4/method.ListStore.insert_before.html)
    pub const insertBefore = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertBefore(self: *ListStore, _iter: *gtk.TreeIter, _sibling: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_insert_before" });
            const ret = cFn(self, _iter, _sibling);
            return ret;
        }
    }.insertBefore;
    /// Deprecated:
    /// method [insert_with_values](https://docs.gtk.org/gtk4/method.ListStore.insert_with_values.html)
    pub const insertWithValues = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertWithValues(self: *ListStore, _iter: ?*gtk.TreeIter, _position: i32, _columnss: []i32, _valuess: []gobject.Value) void {
            const _columns = _columnss.ptr;
            const _values = _valuess.ptr;
            const _n_values: i32 = @intCast(_columnss.len);
            const cFn = @extern(*const fn (*ListStore, ?*gtk.TreeIter, i32, [*]i32, [*]gobject.Value, i32) callconv(.c) void, .{ .name = "gtk_list_store_insert_with_valuesv" });
            const ret = cFn(self, _iter, _position, _columns, _values, _n_values);
            return ret;
        }
    }.insertWithValues;
    /// Deprecated:
    /// method [iter_is_valid](https://docs.gtk.org/gtk4/method.ListStore.iter_is_valid.html)
    pub const iterIsValid = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterIsValid(self: *ListStore, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_list_store_iter_is_valid" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterIsValid;
    /// Deprecated:
    /// method [move_after](https://docs.gtk.org/gtk4/method.ListStore.move_after.html)
    pub const moveAfter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn moveAfter(self: *ListStore, _iter: *gtk.TreeIter, _position: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_move_after" });
            const ret = cFn(self, _iter, _position);
            return ret;
        }
    }.moveAfter;
    /// Deprecated:
    /// method [move_before](https://docs.gtk.org/gtk4/method.ListStore.move_before.html)
    pub const moveBefore = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn moveBefore(self: *ListStore, _iter: *gtk.TreeIter, _position: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_move_before" });
            const ret = cFn(self, _iter, _position);
            return ret;
        }
    }.moveBefore;
    /// Deprecated:
    /// method [prepend](https://docs.gtk.org/gtk4/method.ListStore.prepend.html)
    pub const prepend = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prepend(self: *ListStore, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_prepend" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.prepend;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gtk4/method.ListStore.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *ListStore, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_list_store_remove" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [reorder](https://docs.gtk.org/gtk4/method.ListStore.reorder.html)
    pub const reorder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn reorder(self: *ListStore, _new_order: [*:0]i32) void {
            const cFn = @extern(*const fn (*ListStore, [*:0]i32) callconv(.c) void, .{ .name = "gtk_list_store_reorder" });
            const ret = cFn(self, _new_order);
            return ret;
        }
    }.reorder;
    /// Deprecated:
    /// method [set_column_types](https://docs.gtk.org/gtk4/method.ListStore.set_column_types.html)
    pub const setColumnTypes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setColumnTypes(self: *ListStore, _typess: []core.Type) void {
            const _n_columns: i32 = @intCast(_typess.len);
            const _types = _typess.ptr;
            const cFn = @extern(*const fn (*ListStore, i32, [*]core.Type) callconv(.c) void, .{ .name = "gtk_list_store_set_column_types" });
            const ret = cFn(self, _n_columns, _types);
            return ret;
        }
    }.setColumnTypes;
    /// Deprecated:
    /// method [set_value](https://docs.gtk.org/gtk4/method.ListStore.set_value.html)
    pub const setValue = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setValue(self: *ListStore, _iter: *gtk.TreeIter, _column: i32, _value: *gobject.Value) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, i32, *gobject.Value) callconv(.c) void, .{ .name = "gtk_list_store_set_value" });
            const ret = cFn(self, _iter, _column, _value);
            return ret;
        }
    }.setValue;
    /// Deprecated:
    /// method [set](https://docs.gtk.org/gtk4/method.ListStore.set.html)
    pub const set = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn set(self: *ListStore, _iter: *gtk.TreeIter, _columnss: []i32, _valuess: []gobject.Value) void {
            const _columns = _columnss.ptr;
            const _values = _valuess.ptr;
            const _n_values: i32 = @intCast(_columnss.len);
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, [*]i32, [*]gobject.Value, i32) callconv(.c) void, .{ .name = "gtk_list_store_set_valuesv" });
            const ret = cFn(self, _iter, _columns, _values, _n_values);
            return ret;
        }
    }.set;
    /// Deprecated:
    /// method [swap](https://docs.gtk.org/gtk4/method.ListStore.swap.html)
    pub const swap = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn swap(self: *ListStore, _a: *gtk.TreeIter, _b: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*ListStore, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_list_store_swap" });
            const ret = cFn(self, _a, _b);
            return ret;
        }
    }.swap;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_store_get_type" });
        return cFn();
    }
};
pub const ListStoreClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const ListStorePrivate = opaque {};
/// Enum [ListTabBehavior](https://docs.gtk.org/gtk4/enum.ListTabBehavior.html)
pub const ListTabBehavior = enum(u32) {
    all = 0,
    item = 1,
    cell = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_tab_behavior_get_type" });
        return cFn();
    }
};
/// Class [ListView](https://docs.gtk.org/gtk4/class.ListView.html)
/// - property [enable-rubberband](https://docs.gtk.org/gtk4/property.ListView.enable-rubberband.html): (rw) `bool`
/// - property [factory](https://docs.gtk.org/gtk4/property.ListView.factory.html): (rw) `gtk.ListItemFactory`
/// - property [header-factory](https://docs.gtk.org/gtk4/property.ListView.header-factory.html): (rw) `gtk.ListItemFactory`
/// - property [model](https://docs.gtk.org/gtk4/property.ListView.model.html): (rw) `gtk.SelectionModel`
/// - property [show-separators](https://docs.gtk.org/gtk4/property.ListView.show-separators.html): (rw) `bool`
/// - property [single-click-activate](https://docs.gtk.org/gtk4/property.ListView.single-click-activate.html): (rw) `bool`
/// - property [tab-behavior](https://docs.gtk.org/gtk4/property.ListView.tab-behavior.html): (rw) `gtk.ListTabBehavior`
pub const ListView = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable, gtk.Scrollable };
    pub const Parent = gtk.ListBase;
    pub const Class = gtk.ListViewClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ListView.new.html)
    pub fn new(_model: ?*gtk.SelectionModel, _factory: ?*gtk.ListItemFactory) *ListView {
        const cFn = @extern(*const fn (?*gtk.SelectionModel, ?*gtk.ListItemFactory) callconv(.c) *ListView, .{ .name = "gtk_list_view_new" });
        const ret = cFn(_model, _factory);
        return ret;
    }
    /// method [get_enable_rubberband](https://docs.gtk.org/gtk4/method.ListView.get_enable_rubberband.html)
    pub fn getEnableRubberband(self: *ListView) bool {
        const cFn = @extern(*const fn (*ListView) callconv(.c) bool, .{ .name = "gtk_list_view_get_enable_rubberband" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_factory](https://docs.gtk.org/gtk4/method.ListView.get_factory.html)
    pub fn getFactory(self: *ListView) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*ListView) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_list_view_get_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_header_factory](https://docs.gtk.org/gtk4/method.ListView.get_header_factory.html)
    pub fn getHeaderFactory(self: *ListView) ?*gtk.ListItemFactory {
        const cFn = @extern(*const fn (*ListView) callconv(.c) ?*gtk.ListItemFactory, .{ .name = "gtk_list_view_get_header_factory" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.ListView.get_model.html)
    pub fn getModel(self: *ListView) ?*gtk.SelectionModel {
        const cFn = @extern(*const fn (*ListView) callconv(.c) ?*gtk.SelectionModel, .{ .name = "gtk_list_view_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_separators](https://docs.gtk.org/gtk4/method.ListView.get_show_separators.html)
    pub fn getShowSeparators(self: *ListView) bool {
        const cFn = @extern(*const fn (*ListView) callconv(.c) bool, .{ .name = "gtk_list_view_get_show_separators" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_single_click_activate](https://docs.gtk.org/gtk4/method.ListView.get_single_click_activate.html)
    pub fn getSingleClickActivate(self: *ListView) bool {
        const cFn = @extern(*const fn (*ListView) callconv(.c) bool, .{ .name = "gtk_list_view_get_single_click_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab_behavior](https://docs.gtk.org/gtk4/method.ListView.get_tab_behavior.html)
    pub fn getTabBehavior(self: *ListView) gtk.ListTabBehavior {
        const cFn = @extern(*const fn (*ListView) callconv(.c) gtk.ListTabBehavior, .{ .name = "gtk_list_view_get_tab_behavior" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scroll_to](https://docs.gtk.org/gtk4/method.ListView.scroll_to.html)
    pub fn scrollTo(self: *ListView, _pos: u32, _flags: gtk.ListScrollFlags, _scroll: ?*gtk.ScrollInfo) void {
        const cFn = @extern(*const fn (*ListView, u32, gtk.ListScrollFlags, ?*gtk.ScrollInfo) callconv(.c) void, .{ .name = "gtk_list_view_scroll_to" });
        const ret = cFn(self, _pos, _flags, _scroll);
        return ret;
    }
    /// method [set_enable_rubberband](https://docs.gtk.org/gtk4/method.ListView.set_enable_rubberband.html)
    pub fn setEnableRubberband(self: *ListView, _enable_rubberband: bool) void {
        const cFn = @extern(*const fn (*ListView, bool) callconv(.c) void, .{ .name = "gtk_list_view_set_enable_rubberband" });
        const ret = cFn(self, _enable_rubberband);
        return ret;
    }
    /// method [set_factory](https://docs.gtk.org/gtk4/method.ListView.set_factory.html)
    pub fn setFactory(self: *ListView, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*ListView, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_list_view_set_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_header_factory](https://docs.gtk.org/gtk4/method.ListView.set_header_factory.html)
    pub fn setHeaderFactory(self: *ListView, _factory: ?*gtk.ListItemFactory) void {
        const cFn = @extern(*const fn (*ListView, ?*gtk.ListItemFactory) callconv(.c) void, .{ .name = "gtk_list_view_set_header_factory" });
        const ret = cFn(self, _factory);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.ListView.set_model.html)
    pub fn setModel(self: *ListView, _model: ?*gtk.SelectionModel) void {
        const cFn = @extern(*const fn (*ListView, ?*gtk.SelectionModel) callconv(.c) void, .{ .name = "gtk_list_view_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_show_separators](https://docs.gtk.org/gtk4/method.ListView.set_show_separators.html)
    pub fn setShowSeparators(self: *ListView, _show_separators: bool) void {
        const cFn = @extern(*const fn (*ListView, bool) callconv(.c) void, .{ .name = "gtk_list_view_set_show_separators" });
        const ret = cFn(self, _show_separators);
        return ret;
    }
    /// method [set_single_click_activate](https://docs.gtk.org/gtk4/method.ListView.set_single_click_activate.html)
    pub fn setSingleClickActivate(self: *ListView, _single_click_activate: bool) void {
        const cFn = @extern(*const fn (*ListView, bool) callconv(.c) void, .{ .name = "gtk_list_view_set_single_click_activate" });
        const ret = cFn(self, _single_click_activate);
        return ret;
    }
    /// method [set_tab_behavior](https://docs.gtk.org/gtk4/method.ListView.set_tab_behavior.html)
    pub fn setTabBehavior(self: *ListView, _tab_behavior: gtk.ListTabBehavior) void {
        const cFn = @extern(*const fn (*ListView, gtk.ListTabBehavior) callconv(.c) void, .{ .name = "gtk_list_view_set_tab_behavior" });
        const ret = cFn(self, _tab_behavior);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.ListView.activate.html)
    pub fn connectActivate(self: *ListView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *ListView, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_list_view_get_type" });
        return cFn();
    }
};
pub const ListViewClass = opaque {};
/// Deprecated:
/// Class [LockButton](https://docs.gtk.org/gtk4/class.LockButton.html)
/// - property [permission](https://docs.gtk.org/gtk4/property.LockButton.permission.html): (rw) `gio.Permission`
/// - property [text-lock](https://docs.gtk.org/gtk4/property.LockButton.text-lock.html): (rw) `[*:0]const u8`
/// - property [text-unlock](https://docs.gtk.org/gtk4/property.LockButton.text-unlock.html): (rw) `[*:0]const u8`
/// - property [tooltip-lock](https://docs.gtk.org/gtk4/property.LockButton.tooltip-lock.html): (rw) `[*:0]const u8`
/// - property [tooltip-not-authorized](https://docs.gtk.org/gtk4/property.LockButton.tooltip-not-authorized.html): (rw) `[*:0]const u8`
/// - property [tooltip-unlock](https://docs.gtk.org/gtk4/property.LockButton.tooltip-unlock.html): (rw) `[*:0]const u8`
pub const LockButton = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Button;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.LockButton.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_permission: ?*gio.Permission) *LockButton {
            const cFn = @extern(*const fn (?*gio.Permission) callconv(.c) *LockButton, .{ .name = "gtk_lock_button_new" });
            const ret = cFn(_permission);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_permission](https://docs.gtk.org/gtk4/method.LockButton.get_permission.html)
    pub const getPermission = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPermission(self: *LockButton) ?*gio.Permission {
            const cFn = @extern(*const fn (*LockButton) callconv(.c) ?*gio.Permission, .{ .name = "gtk_lock_button_get_permission" });
            const ret = cFn(self);
            return ret;
        }
    }.getPermission;
    /// Deprecated:
    /// method [set_permission](https://docs.gtk.org/gtk4/method.LockButton.set_permission.html)
    pub const setPermission = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPermission(self: *LockButton, _permission: ?*gio.Permission) void {
            const cFn = @extern(*const fn (*LockButton, ?*gio.Permission) callconv(.c) void, .{ .name = "gtk_lock_button_set_permission" });
            const ret = cFn(self, _permission);
            return ret;
        }
    }.setPermission;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_lock_button_get_type" });
        return cFn();
    }
};
/// const [MAJOR_VERSION](https://docs.gtk.org/gtk4/const.MAJOR_VERSION.html)
pub const MAJOR_VERSION = 4;
/// const [MAX_COMPOSE_LEN](https://docs.gtk.org/gtk4/const.MAX_COMPOSE_LEN.html)
pub const MAX_COMPOSE_LEN = 7;
/// const [MEDIA_FILE_EXTENSION_POINT_NAME](https://docs.gtk.org/gtk4/const.MEDIA_FILE_EXTENSION_POINT_NAME.html)
pub const MEDIA_FILE_EXTENSION_POINT_NAME = "gtk-media-file";
/// const [MICRO_VERSION](https://docs.gtk.org/gtk4/const.MICRO_VERSION.html)
pub const MICRO_VERSION = 5;
/// const [MINOR_VERSION](https://docs.gtk.org/gtk4/const.MINOR_VERSION.html)
pub const MINOR_VERSION = 14;
/// Class [MapListModel](https://docs.gtk.org/gtk4/class.MapListModel.html)
/// - property [has-map](https://docs.gtk.org/gtk4/property.MapListModel.has-map.html): (r-) `bool`
/// - property [item-type](https://docs.gtk.org/gtk4/property.MapListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.MapListModel.model.html): (r-) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.MapListModel.n-items.html): (r-) `u32`
pub const MapListModel = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.MapListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MapListModel.new.html)
    pub fn new(_model: ?*gio.ListModel, map_func: anytype, map_func_args: anytype) *MapListModel {
        var closure_map_func = core.zig_closure(map_func, map_func_args, &.{ *gobject.Object, *gobject.Object });
        const _map_func: ?gtk.MapListModelMapFunc = @ptrCast(closure_map_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_map_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_map_func.c_destroy());
        const cFn = @extern(*const fn (?*gio.ListModel, ?gtk.MapListModelMapFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) *MapListModel, .{ .name = "gtk_map_list_model_new" });
        const ret = cFn(_model, _map_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.MapListModel.get_model.html)
    pub fn getModel(self: *MapListModel) ?*gio.ListModel {
        const cFn = @extern(*const fn (*MapListModel) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_map_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_map](https://docs.gtk.org/gtk4/method.MapListModel.has_map.html)
    pub fn hasMap(self: *MapListModel) bool {
        const cFn = @extern(*const fn (*MapListModel) callconv(.c) bool, .{ .name = "gtk_map_list_model_has_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_map_func](https://docs.gtk.org/gtk4/method.MapListModel.set_map_func.html)
    pub fn setMapFunc(self: *MapListModel, map_func: anytype, map_func_args: anytype) void {
        var closure_map_func = core.zig_closure(map_func, map_func_args, &.{ *gobject.Object, *gobject.Object });
        const _map_func: ?gtk.MapListModelMapFunc = @ptrCast(closure_map_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_map_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_map_func.c_destroy());
        const cFn = @extern(*const fn (*MapListModel, ?gtk.MapListModelMapFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_map_list_model_set_map_func" });
        const ret = cFn(self, _map_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.MapListModel.set_model.html)
    pub fn setModel(self: *MapListModel, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*MapListModel, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_map_list_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_map_list_model_get_type" });
        return cFn();
    }
};
pub const MapListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// callback [MapListModelMapFunc](https://docs.gtk.org/gtk4/callback.MapListModelMapFunc.html)
pub const MapListModelMapFunc = *const fn (_item: *gobject.Object, _user_data: ?*anyopaque) callconv(.c) *gobject.Object;
/// Class [MediaControls](https://docs.gtk.org/gtk4/class.MediaControls.html)
/// - property [media-stream](https://docs.gtk.org/gtk4/property.MediaControls.media-stream.html): (rw) `gtk.MediaStream`
pub const MediaControls = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.MediaControlsClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MediaControls.new.html)
    pub fn new(_stream: ?*gtk.MediaStream) *MediaControls {
        const cFn = @extern(*const fn (?*gtk.MediaStream) callconv(.c) *MediaControls, .{ .name = "gtk_media_controls_new" });
        const ret = cFn(_stream);
        return ret;
    }
    /// method [get_media_stream](https://docs.gtk.org/gtk4/method.MediaControls.get_media_stream.html)
    pub fn getMediaStream(self: *MediaControls) ?*gtk.MediaStream {
        const cFn = @extern(*const fn (*MediaControls) callconv(.c) ?*gtk.MediaStream, .{ .name = "gtk_media_controls_get_media_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_media_stream](https://docs.gtk.org/gtk4/method.MediaControls.set_media_stream.html)
    pub fn setMediaStream(self: *MediaControls, _stream: ?*gtk.MediaStream) void {
        const cFn = @extern(*const fn (*MediaControls, ?*gtk.MediaStream) callconv(.c) void, .{ .name = "gtk_media_controls_set_media_stream" });
        const ret = cFn(self, _stream);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_media_controls_get_type" });
        return cFn();
    }
};
pub const MediaControlsClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Class [MediaFile](https://docs.gtk.org/gtk4/class.MediaFile.html)
/// - property [file](https://docs.gtk.org/gtk4/property.MediaFile.file.html): (rw) `gio.File`
/// - property [input-stream](https://docs.gtk.org/gtk4/property.MediaFile.input-stream.html): (rw) `gio.InputStream`
pub const MediaFile = extern struct {
    parent_instance: gtk.MediaStream,
    pub const Interfaces = [_]type{gdk.Paintable};
    pub const Parent = gtk.MediaStream;
    pub const Class = gtk.MediaFileClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MediaFile.new.html)
    pub fn new() *MediaFile {
        const cFn = @extern(*const fn () callconv(.c) *MediaFile, .{ .name = "gtk_media_file_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_for_file](https://docs.gtk.org/gtk4/ctor.MediaFile.new_for_file.html)
    pub fn newForFile(_file: *gio.File) *MediaFile {
        const cFn = @extern(*const fn (*gio.File) callconv(.c) *MediaFile, .{ .name = "gtk_media_file_new_for_file" });
        const ret = cFn(_file);
        return ret;
    }
    /// ctor [new_for_filename](https://docs.gtk.org/gtk4/ctor.MediaFile.new_for_filename.html)
    pub fn newForFilename(_filename: [*:0]const u8) *MediaFile {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *MediaFile, .{ .name = "gtk_media_file_new_for_filename" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_for_input_stream](https://docs.gtk.org/gtk4/ctor.MediaFile.new_for_input_stream.html)
    pub fn newForInputStream(_stream: *gio.InputStream) *MediaFile {
        const cFn = @extern(*const fn (*gio.InputStream) callconv(.c) *MediaFile, .{ .name = "gtk_media_file_new_for_input_stream" });
        const ret = cFn(_stream);
        return ret;
    }
    /// ctor [new_for_resource](https://docs.gtk.org/gtk4/ctor.MediaFile.new_for_resource.html)
    pub fn newForResource(_resource_path: [*:0]const u8) *MediaFile {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *MediaFile, .{ .name = "gtk_media_file_new_for_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// method [clear](https://docs.gtk.org/gtk4/method.MediaFile.clear.html)
    pub fn clear(self: *MediaFile) void {
        const cFn = @extern(*const fn (*MediaFile) callconv(.c) void, .{ .name = "gtk_media_file_clear" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.MediaFile.get_file.html)
    pub fn getFile(self: *MediaFile) ?*gio.File {
        const cFn = @extern(*const fn (*MediaFile) callconv(.c) ?*gio.File, .{ .name = "gtk_media_file_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_stream](https://docs.gtk.org/gtk4/method.MediaFile.get_input_stream.html)
    pub fn getInputStream(self: *MediaFile) ?*gio.InputStream {
        const cFn = @extern(*const fn (*MediaFile) callconv(.c) ?*gio.InputStream, .{ .name = "gtk_media_file_get_input_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_file](https://docs.gtk.org/gtk4/method.MediaFile.set_file.html)
    pub fn setFile(self: *MediaFile, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*MediaFile, ?*gio.File) callconv(.c) void, .{ .name = "gtk_media_file_set_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_filename](https://docs.gtk.org/gtk4/method.MediaFile.set_filename.html)
    pub fn setFilename(self: *MediaFile, _filename: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MediaFile, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_media_file_set_filename" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [set_input_stream](https://docs.gtk.org/gtk4/method.MediaFile.set_input_stream.html)
    pub fn setInputStream(self: *MediaFile, _stream: ?*gio.InputStream) void {
        const cFn = @extern(*const fn (*MediaFile, ?*gio.InputStream) callconv(.c) void, .{ .name = "gtk_media_file_set_input_stream" });
        const ret = cFn(self, _stream);
        return ret;
    }
    /// method [set_resource](https://docs.gtk.org/gtk4/method.MediaFile.set_resource.html)
    pub fn setResource(self: *MediaFile, _resource_path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*MediaFile, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_media_file_set_resource" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    /// vfunc [close](https://docs.gtk.org/gtk4/vfunc.MediaFile.close.html)
    pub fn closeV(self: *MediaFile) void {
        const class: *MediaFileClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [open](https://docs.gtk.org/gtk4/vfunc.MediaFile.open.html)
    pub fn openV(self: *MediaFile) void {
        const class: *MediaFileClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.open.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_media_file_get_type" });
        return cFn();
    }
};
pub const MediaFileClass = extern struct {
    parent_class: gtk.MediaStreamClass,
    open: ?*const fn (_self: *gtk.MediaFile) callconv(.c) void,
    close: ?*const fn (_self: *gtk.MediaFile) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
/// Class [MediaStream](https://docs.gtk.org/gtk4/class.MediaStream.html)
/// - property [duration](https://docs.gtk.org/gtk4/property.MediaStream.duration.html): (r-) `i64`
/// - property [ended](https://docs.gtk.org/gtk4/property.MediaStream.ended.html): (r-) `bool`
/// - property [error](https://docs.gtk.org/gtk4/property.MediaStream.error.html): (r-) `*core.Error`
/// - property [has-audio](https://docs.gtk.org/gtk4/property.MediaStream.has-audio.html): (r-) `bool`
/// - property [has-video](https://docs.gtk.org/gtk4/property.MediaStream.has-video.html): (r-) `bool`
/// - property [loop](https://docs.gtk.org/gtk4/property.MediaStream.loop.html): (rw) `bool`
/// - property [muted](https://docs.gtk.org/gtk4/property.MediaStream.muted.html): (rw) `bool`
/// - property [playing](https://docs.gtk.org/gtk4/property.MediaStream.playing.html): (rw) `bool`
/// - property [prepared](https://docs.gtk.org/gtk4/property.MediaStream.prepared.html): (rw) `bool`
/// - property [seekable](https://docs.gtk.org/gtk4/property.MediaStream.seekable.html): (r-) `bool`
/// - property [seeking](https://docs.gtk.org/gtk4/property.MediaStream.seeking.html): (r-) `bool`
/// - property [timestamp](https://docs.gtk.org/gtk4/property.MediaStream.timestamp.html): (r-) `i64`
/// - property [volume](https://docs.gtk.org/gtk4/property.MediaStream.volume.html): (rw) `f64`
pub const MediaStream = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gdk.Paintable};
    pub const Parent = gobject.Object;
    pub const Class = gtk.MediaStreamClass;
    /// method [gerror](https://docs.gtk.org/gtk4/method.MediaStream.gerror.html)
    pub fn gerror(self: *MediaStream, _error: *core.Error) void {
        const cFn = @extern(*const fn (*MediaStream, *core.Error) callconv(.c) void, .{ .name = "gtk_media_stream_gerror" });
        const ret = cFn(self, _error);
        return ret;
    }
    /// method [get_duration](https://docs.gtk.org/gtk4/method.MediaStream.get_duration.html)
    pub fn getDuration(self: *MediaStream) i64 {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) i64, .{ .name = "gtk_media_stream_get_duration" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ended](https://docs.gtk.org/gtk4/method.MediaStream.get_ended.html)
    pub fn getEnded(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_get_ended" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_error](https://docs.gtk.org/gtk4/method.MediaStream.get_error.html)
    pub fn getError(self: *MediaStream) ?*core.Error {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) ?*core.Error, .{ .name = "gtk_media_stream_get_error" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_loop](https://docs.gtk.org/gtk4/method.MediaStream.get_loop.html)
    pub fn getLoop(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_get_loop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_muted](https://docs.gtk.org/gtk4/method.MediaStream.get_muted.html)
    pub fn getMuted(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_get_muted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_playing](https://docs.gtk.org/gtk4/method.MediaStream.get_playing.html)
    pub fn getPlaying(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_get_playing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_timestamp](https://docs.gtk.org/gtk4/method.MediaStream.get_timestamp.html)
    pub fn getTimestamp(self: *MediaStream) i64 {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) i64, .{ .name = "gtk_media_stream_get_timestamp" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_volume](https://docs.gtk.org/gtk4/method.MediaStream.get_volume.html)
    pub fn getVolume(self: *MediaStream) f64 {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) f64, .{ .name = "gtk_media_stream_get_volume" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_audio](https://docs.gtk.org/gtk4/method.MediaStream.has_audio.html)
    pub fn hasAudio(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_has_audio" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_video](https://docs.gtk.org/gtk4/method.MediaStream.has_video.html)
    pub fn hasVideo(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_has_video" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_prepared](https://docs.gtk.org/gtk4/method.MediaStream.is_prepared.html)
    pub fn isPrepared(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_is_prepared" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_seekable](https://docs.gtk.org/gtk4/method.MediaStream.is_seekable.html)
    pub fn isSeekable(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_is_seekable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_seeking](https://docs.gtk.org/gtk4/method.MediaStream.is_seeking.html)
    pub fn isSeeking(self: *MediaStream) bool {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) bool, .{ .name = "gtk_media_stream_is_seeking" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pause](https://docs.gtk.org/gtk4/method.MediaStream.pause.html)
    pub fn pause(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_pause" });
        const ret = cFn(self);
        return ret;
    }
    /// method [play](https://docs.gtk.org/gtk4/method.MediaStream.play.html)
    pub fn play(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_play" });
        const ret = cFn(self);
        return ret;
    }
    /// method [realize](https://docs.gtk.org/gtk4/method.MediaStream.realize.html)
    pub fn realize(self: *MediaStream, _surface: *gdk.Surface) void {
        const cFn = @extern(*const fn (*MediaStream, *gdk.Surface) callconv(.c) void, .{ .name = "gtk_media_stream_realize" });
        const ret = cFn(self, _surface);
        return ret;
    }
    /// method [seek](https://docs.gtk.org/gtk4/method.MediaStream.seek.html)
    pub fn seek(self: *MediaStream, _timestamp: i64) void {
        const cFn = @extern(*const fn (*MediaStream, i64) callconv(.c) void, .{ .name = "gtk_media_stream_seek" });
        const ret = cFn(self, _timestamp);
        return ret;
    }
    /// method [seek_failed](https://docs.gtk.org/gtk4/method.MediaStream.seek_failed.html)
    pub fn seekFailed(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_seek_failed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [seek_success](https://docs.gtk.org/gtk4/method.MediaStream.seek_success.html)
    pub fn seekSuccess(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_seek_success" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_loop](https://docs.gtk.org/gtk4/method.MediaStream.set_loop.html)
    pub fn setLoop(self: *MediaStream, _loop: bool) void {
        const cFn = @extern(*const fn (*MediaStream, bool) callconv(.c) void, .{ .name = "gtk_media_stream_set_loop" });
        const ret = cFn(self, _loop);
        return ret;
    }
    /// method [set_muted](https://docs.gtk.org/gtk4/method.MediaStream.set_muted.html)
    pub fn setMuted(self: *MediaStream, _muted: bool) void {
        const cFn = @extern(*const fn (*MediaStream, bool) callconv(.c) void, .{ .name = "gtk_media_stream_set_muted" });
        const ret = cFn(self, _muted);
        return ret;
    }
    /// method [set_playing](https://docs.gtk.org/gtk4/method.MediaStream.set_playing.html)
    pub fn setPlaying(self: *MediaStream, _playing: bool) void {
        const cFn = @extern(*const fn (*MediaStream, bool) callconv(.c) void, .{ .name = "gtk_media_stream_set_playing" });
        const ret = cFn(self, _playing);
        return ret;
    }
    /// method [set_volume](https://docs.gtk.org/gtk4/method.MediaStream.set_volume.html)
    pub fn setVolume(self: *MediaStream, _volume: f64) void {
        const cFn = @extern(*const fn (*MediaStream, f64) callconv(.c) void, .{ .name = "gtk_media_stream_set_volume" });
        const ret = cFn(self, _volume);
        return ret;
    }
    /// method [stream_ended](https://docs.gtk.org/gtk4/method.MediaStream.stream_ended.html)
    pub fn streamEnded(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_stream_ended" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stream_prepared](https://docs.gtk.org/gtk4/method.MediaStream.stream_prepared.html)
    pub fn streamPrepared(self: *MediaStream, _has_audio: bool, _has_video: bool, _seekable: bool, _duration: i64) void {
        const cFn = @extern(*const fn (*MediaStream, bool, bool, bool, i64) callconv(.c) void, .{ .name = "gtk_media_stream_stream_prepared" });
        const ret = cFn(self, _has_audio, _has_video, _seekable, _duration);
        return ret;
    }
    /// method [stream_unprepared](https://docs.gtk.org/gtk4/method.MediaStream.stream_unprepared.html)
    pub fn streamUnprepared(self: *MediaStream) void {
        const cFn = @extern(*const fn (*MediaStream) callconv(.c) void, .{ .name = "gtk_media_stream_stream_unprepared" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unrealize](https://docs.gtk.org/gtk4/method.MediaStream.unrealize.html)
    pub fn unrealize(self: *MediaStream, _surface: *gdk.Surface) void {
        const cFn = @extern(*const fn (*MediaStream, *gdk.Surface) callconv(.c) void, .{ .name = "gtk_media_stream_unrealize" });
        const ret = cFn(self, _surface);
        return ret;
    }
    /// method [update](https://docs.gtk.org/gtk4/method.MediaStream.update.html)
    pub fn update(self: *MediaStream, _timestamp: i64) void {
        const cFn = @extern(*const fn (*MediaStream, i64) callconv(.c) void, .{ .name = "gtk_media_stream_update" });
        const ret = cFn(self, _timestamp);
        return ret;
    }
    /// vfunc [pause](https://docs.gtk.org/gtk4/vfunc.MediaStream.pause.html)
    pub fn pauseV(self: *MediaStream) void {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.pause.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [play](https://docs.gtk.org/gtk4/vfunc.MediaStream.play.html)
    pub fn playV(self: *MediaStream) bool {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.play.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [realize](https://docs.gtk.org/gtk4/vfunc.MediaStream.realize.html)
    pub fn realizeV(self: *MediaStream, _surface: *gdk.Surface) void {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.realize.?;
        const ret = vFn(self, _surface);
        return ret;
    }
    /// vfunc [seek](https://docs.gtk.org/gtk4/vfunc.MediaStream.seek.html)
    pub fn seekV(self: *MediaStream, _timestamp: i64) void {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.seek.?;
        const ret = vFn(self, _timestamp);
        return ret;
    }
    /// vfunc [unrealize](https://docs.gtk.org/gtk4/vfunc.MediaStream.unrealize.html)
    pub fn unrealizeV(self: *MediaStream, _surface: *gdk.Surface) void {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unrealize.?;
        const ret = vFn(self, _surface);
        return ret;
    }
    /// vfunc [update_audio](https://docs.gtk.org/gtk4/vfunc.MediaStream.update_audio.html)
    pub fn updateAudioV(self: *MediaStream, _muted: bool, _volume: f64) void {
        const class: *MediaStreamClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.update_audio.?;
        const ret = vFn(self, _muted, _volume);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_media_stream_get_type" });
        return cFn();
    }
};
pub const MediaStreamClass = extern struct {
    parent_class: gobject.ObjectClass,
    play: ?*const fn (_self: *gtk.MediaStream) callconv(.c) bool,
    pause: ?*const fn (_self: *gtk.MediaStream) callconv(.c) void,
    seek: ?*const fn (_self: *gtk.MediaStream, _timestamp: i64) callconv(.c) void,
    update_audio: ?*const fn (_self: *gtk.MediaStream, _muted: bool, _volume: f64) callconv(.c) void,
    realize: ?*const fn (_self: *gtk.MediaStream, _surface: *gdk.Surface) callconv(.c) void,
    unrealize: ?*const fn (_self: *gtk.MediaStream, _surface: *gdk.Surface) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
    _gtk_reserved5: ?*anyopaque,
    _gtk_reserved6: ?*anyopaque,
    _gtk_reserved7: ?*anyopaque,
    _gtk_reserved8: ?*anyopaque,
};
/// Class [MenuButton](https://docs.gtk.org/gtk4/class.MenuButton.html)
/// - property [active](https://docs.gtk.org/gtk4/property.MenuButton.active.html): (rw) `bool`
/// - property [always-show-arrow](https://docs.gtk.org/gtk4/property.MenuButton.always-show-arrow.html): (rw) `bool`
/// - property [can-shrink](https://docs.gtk.org/gtk4/property.MenuButton.can-shrink.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.MenuButton.child.html): (rw) `gtk.Widget`
/// - property [direction](https://docs.gtk.org/gtk4/property.MenuButton.direction.html): (rw) `gtk.ArrowType`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.MenuButton.has-frame.html): (rw) `bool`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.MenuButton.icon-name.html): (rw) `[*:0]const u8`
/// - property [label](https://docs.gtk.org/gtk4/property.MenuButton.label.html): (rw) `[*:0]const u8`
/// - property [menu-model](https://docs.gtk.org/gtk4/property.MenuButton.menu-model.html): (rw) `gio.MenuModel`
/// - property [popover](https://docs.gtk.org/gtk4/property.MenuButton.popover.html): (rw) `gtk.Popover`
/// - property [primary](https://docs.gtk.org/gtk4/property.MenuButton.primary.html): (rw) `bool`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.MenuButton.use-underline.html): (rw) `bool`
pub const MenuButton = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MenuButton.new.html)
    pub fn new() *MenuButton {
        const cFn = @extern(*const fn () callconv(.c) *MenuButton, .{ .name = "gtk_menu_button_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_active](https://docs.gtk.org/gtk4/method.MenuButton.get_active.html)
    pub fn getActive(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_always_show_arrow](https://docs.gtk.org/gtk4/method.MenuButton.get_always_show_arrow.html)
    pub fn getAlwaysShowArrow(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_always_show_arrow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_shrink](https://docs.gtk.org/gtk4/method.MenuButton.get_can_shrink.html)
    pub fn getCanShrink(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_can_shrink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.MenuButton.get_child.html)
    pub fn getChild(self: *MenuButton) ?*gtk.Widget {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_menu_button_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_direction](https://docs.gtk.org/gtk4/method.MenuButton.get_direction.html)
    pub fn getDirection(self: *MenuButton) gtk.ArrowType {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) gtk.ArrowType, .{ .name = "gtk_menu_button_get_direction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_frame](https://docs.gtk.org/gtk4/method.MenuButton.get_has_frame.html)
    pub fn getHasFrame(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_has_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.MenuButton.get_icon_name.html)
    pub fn getIconName(self: *MenuButton) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) ?[*:0]u8, .{ .name = "gtk_menu_button_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_label](https://docs.gtk.org/gtk4/method.MenuButton.get_label.html)
    pub fn getLabel(self: *MenuButton) ?[*:0]u8 {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) ?[*:0]u8, .{ .name = "gtk_menu_button_get_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_menu_model](https://docs.gtk.org/gtk4/method.MenuButton.get_menu_model.html)
    pub fn getMenuModel(self: *MenuButton) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_menu_button_get_menu_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_popover](https://docs.gtk.org/gtk4/method.MenuButton.get_popover.html)
    pub fn getPopover(self: *MenuButton) ?*gtk.Popover {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) ?*gtk.Popover, .{ .name = "gtk_menu_button_get_popover" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_primary](https://docs.gtk.org/gtk4/method.MenuButton.get_primary.html)
    pub fn getPrimary(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_primary" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.MenuButton.get_use_underline.html)
    pub fn getUseUnderline(self: *MenuButton) bool {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) bool, .{ .name = "gtk_menu_button_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [popdown](https://docs.gtk.org/gtk4/method.MenuButton.popdown.html)
    pub fn popdown(self: *MenuButton) void {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) void, .{ .name = "gtk_menu_button_popdown" });
        const ret = cFn(self);
        return ret;
    }
    /// method [popup](https://docs.gtk.org/gtk4/method.MenuButton.popup.html)
    pub fn popup(self: *MenuButton) void {
        const cFn = @extern(*const fn (*MenuButton) callconv(.c) void, .{ .name = "gtk_menu_button_popup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_active](https://docs.gtk.org/gtk4/method.MenuButton.set_active.html)
    pub fn setActive(self: *MenuButton, _active: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_active" });
        const ret = cFn(self, _active);
        return ret;
    }
    /// method [set_always_show_arrow](https://docs.gtk.org/gtk4/method.MenuButton.set_always_show_arrow.html)
    pub fn setAlwaysShowArrow(self: *MenuButton, _always_show_arrow: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_always_show_arrow" });
        const ret = cFn(self, _always_show_arrow);
        return ret;
    }
    /// method [set_can_shrink](https://docs.gtk.org/gtk4/method.MenuButton.set_can_shrink.html)
    pub fn setCanShrink(self: *MenuButton, _can_shrink: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_can_shrink" });
        const ret = cFn(self, _can_shrink);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.MenuButton.set_child.html)
    pub fn setChild(self: *MenuButton, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*MenuButton, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_menu_button_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_create_popup_func](https://docs.gtk.org/gtk4/method.MenuButton.set_create_popup_func.html)
    pub fn setCreatePopupFunc(self: *MenuButton, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.MenuButton });
        const _func: ?gtk.MenuButtonCreatePopupFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*MenuButton, ?gtk.MenuButtonCreatePopupFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_menu_button_set_create_popup_func" });
        const ret = cFn(self, _func, @ptrCast(_user_data), _destroy_notify);
        return ret;
    }
    /// method [set_direction](https://docs.gtk.org/gtk4/method.MenuButton.set_direction.html)
    pub fn setDirection(self: *MenuButton, _direction: gtk.ArrowType) void {
        const cFn = @extern(*const fn (*MenuButton, gtk.ArrowType) callconv(.c) void, .{ .name = "gtk_menu_button_set_direction" });
        const ret = cFn(self, _direction);
        return ret;
    }
    /// method [set_has_frame](https://docs.gtk.org/gtk4/method.MenuButton.set_has_frame.html)
    pub fn setHasFrame(self: *MenuButton, _has_frame: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_has_frame" });
        const ret = cFn(self, _has_frame);
        return ret;
    }
    /// method [set_icon_name](https://docs.gtk.org/gtk4/method.MenuButton.set_icon_name.html)
    pub fn setIconName(self: *MenuButton, _icon_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*MenuButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_menu_button_set_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_label](https://docs.gtk.org/gtk4/method.MenuButton.set_label.html)
    pub fn setLabel(self: *MenuButton, _label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*MenuButton, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_menu_button_set_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_menu_model](https://docs.gtk.org/gtk4/method.MenuButton.set_menu_model.html)
    pub fn setMenuModel(self: *MenuButton, _menu_model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*MenuButton, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_menu_button_set_menu_model" });
        const ret = cFn(self, _menu_model);
        return ret;
    }
    /// method [set_popover](https://docs.gtk.org/gtk4/method.MenuButton.set_popover.html)
    pub fn setPopover(self: *MenuButton, _popover: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*MenuButton, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_menu_button_set_popover" });
        const ret = cFn(self, _popover);
        return ret;
    }
    /// method [set_primary](https://docs.gtk.org/gtk4/method.MenuButton.set_primary.html)
    pub fn setPrimary(self: *MenuButton, _primary: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_primary" });
        const ret = cFn(self, _primary);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.MenuButton.set_use_underline.html)
    pub fn setUseUnderline(self: *MenuButton, _use_underline: bool) void {
        const cFn = @extern(*const fn (*MenuButton, bool) callconv(.c) void, .{ .name = "gtk_menu_button_set_use_underline" });
        const ret = cFn(self, _use_underline);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.MenuButton.activate.html)
    pub fn connectActivate(self: *MenuButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *MenuButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_menu_button_get_type" });
        return cFn();
    }
};
/// callback [MenuButtonCreatePopupFunc](https://docs.gtk.org/gtk4/callback.MenuButtonCreatePopupFunc.html)
pub const MenuButtonCreatePopupFunc = *const fn (_menu_button: *gtk.MenuButton, _user_data: ?*anyopaque) callconv(.c) void;
/// Deprecated:
/// Class [MessageDialog](https://docs.gtk.org/gtk4/class.MessageDialog.html)
/// - property [buttons](https://docs.gtk.org/gtk4/property.MessageDialog.buttons.html): (--) `gtk.ButtonsType`
/// - property [message-area](https://docs.gtk.org/gtk4/property.MessageDialog.message-area.html): (r-) `gtk.Widget`
/// - property [message-type](https://docs.gtk.org/gtk4/property.MessageDialog.message-type.html): (rw) `gtk.MessageType`
/// - property [secondary-text](https://docs.gtk.org/gtk4/property.MessageDialog.secondary-text.html): (rw) `[*:0]const u8`
/// - property [secondary-use-markup](https://docs.gtk.org/gtk4/property.MessageDialog.secondary-use-markup.html): (rw) `bool`
/// - property [text](https://docs.gtk.org/gtk4/property.MessageDialog.text.html): (rw) `[*:0]const u8`
/// - property [use-markup](https://docs.gtk.org/gtk4/property.MessageDialog.use-markup.html): (rw) `bool`
pub const MessageDialog = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gtk.Dialog,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    pub const Class = gtk.MessageDialogClass;
    /// Deprecated:
    /// method [get_message_area](https://docs.gtk.org/gtk4/method.MessageDialog.get_message_area.html)
    pub const getMessageArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMessageArea(self: *MessageDialog) *gtk.Widget {
            const cFn = @extern(*const fn (*MessageDialog) callconv(.c) *gtk.Widget, .{ .name = "gtk_message_dialog_get_message_area" });
            const ret = cFn(self);
            return ret;
        }
    }.getMessageArea;
    /// Deprecated:
    /// method [set_markup](https://docs.gtk.org/gtk4/method.MessageDialog.set_markup.html)
    pub const setMarkup = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMarkup(self: *MessageDialog, _str: [*:0]const u8) void {
            const cFn = @extern(*const fn (*MessageDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_message_dialog_set_markup" });
            const ret = cFn(self, _str);
            return ret;
        }
    }.setMarkup;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_message_dialog_get_type" });
        return cFn();
    }
};
pub const MessageDialogClass = opaque {};
/// Enum [MessageType](https://docs.gtk.org/gtk4/enum.MessageType.html)
pub const MessageType = enum(u32) {
    info = 0,
    warning = 1,
    question = 2,
    @"error" = 3,
    other = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_message_type_get_type" });
        return cFn();
    }
};
/// Class [MnemonicAction](https://docs.gtk.org/gtk4/class.MnemonicAction.html)
pub const MnemonicAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.MnemonicActionClass;
    /// type func [get](https://docs.gtk.org/gtk4/type_func.MnemonicAction.get.html)
    pub fn get() *gtk.MnemonicAction {
        const cFn = @extern(*const fn () callconv(.c) *gtk.MnemonicAction, .{ .name = "gtk_mnemonic_action_get" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_mnemonic_action_get_type" });
        return cFn();
    }
};
pub const MnemonicActionClass = opaque {};
/// Class [MnemonicTrigger](https://docs.gtk.org/gtk4/class.MnemonicTrigger.html)
/// - property [keyval](https://docs.gtk.org/gtk4/property.MnemonicTrigger.keyval.html): (r-) `u32`
pub const MnemonicTrigger = opaque {
    pub const Parent = gtk.ShortcutTrigger;
    pub const Class = gtk.MnemonicTriggerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MnemonicTrigger.new.html)
    pub fn new(_keyval: u32) *MnemonicTrigger {
        const cFn = @extern(*const fn (u32) callconv(.c) *MnemonicTrigger, .{ .name = "gtk_mnemonic_trigger_new" });
        const ret = cFn(_keyval);
        return ret;
    }
    /// method [get_keyval](https://docs.gtk.org/gtk4/method.MnemonicTrigger.get_keyval.html)
    pub fn getKeyval(self: *MnemonicTrigger) u32 {
        const cFn = @extern(*const fn (*MnemonicTrigger) callconv(.c) u32, .{ .name = "gtk_mnemonic_trigger_get_keyval" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_mnemonic_trigger_get_type" });
        return cFn();
    }
};
pub const MnemonicTriggerClass = opaque {};
/// Class [MountOperation](https://docs.gtk.org/gtk4/class.MountOperation.html)
/// - property [display](https://docs.gtk.org/gtk4/property.MountOperation.display.html): (rw) `gdk.Display`
/// - property [is-showing](https://docs.gtk.org/gtk4/property.MountOperation.is-showing.html): (r-) `bool`
/// - property [parent](https://docs.gtk.org/gtk4/property.MountOperation.parent.html): (rw) `gtk.Window`
pub const MountOperation = extern struct {
    parent_instance: gio.MountOperation,
    priv: ?*gtk.MountOperationPrivate,
    pub const Parent = gio.MountOperation;
    pub const Class = gtk.MountOperationClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MountOperation.new.html)
    pub fn new(_parent: ?*gtk.Window) *MountOperation {
        const cFn = @extern(*const fn (?*gtk.Window) callconv(.c) *MountOperation, .{ .name = "gtk_mount_operation_new" });
        const ret = cFn(_parent);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gtk4/method.MountOperation.get_display.html)
    pub fn getDisplay(self: *MountOperation) *gdk.Display {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) *gdk.Display, .{ .name = "gtk_mount_operation_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gtk4/method.MountOperation.get_parent.html)
    pub fn getParent(self: *MountOperation) ?*gtk.Window {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) ?*gtk.Window, .{ .name = "gtk_mount_operation_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_showing](https://docs.gtk.org/gtk4/method.MountOperation.is_showing.html)
    pub fn isShowing(self: *MountOperation) bool {
        const cFn = @extern(*const fn (*MountOperation) callconv(.c) bool, .{ .name = "gtk_mount_operation_is_showing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_display](https://docs.gtk.org/gtk4/method.MountOperation.set_display.html)
    pub fn setDisplay(self: *MountOperation, _display: *gdk.Display) void {
        const cFn = @extern(*const fn (*MountOperation, *gdk.Display) callconv(.c) void, .{ .name = "gtk_mount_operation_set_display" });
        const ret = cFn(self, _display);
        return ret;
    }
    /// method [set_parent](https://docs.gtk.org/gtk4/method.MountOperation.set_parent.html)
    pub fn setParent(self: *MountOperation, _parent: ?*gtk.Window) void {
        const cFn = @extern(*const fn (*MountOperation, ?*gtk.Window) callconv(.c) void, .{ .name = "gtk_mount_operation_set_parent" });
        const ret = cFn(self, _parent);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_mount_operation_get_type" });
        return cFn();
    }
};
pub const MountOperationClass = extern struct {
    parent_class: gio.MountOperationClass,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
pub const MountOperationPrivate = opaque {};
/// Enum [MovementStep](https://docs.gtk.org/gtk4/enum.MovementStep.html)
pub const MovementStep = enum(u32) {
    logical_positions = 0,
    visual_positions = 1,
    words = 2,
    display_lines = 3,
    display_line_ends = 4,
    paragraphs = 5,
    paragraph_ends = 6,
    pages = 7,
    buffer_ends = 8,
    horizontal_pages = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_movement_step_get_type" });
        return cFn();
    }
};
/// Class [MultiFilter](https://docs.gtk.org/gtk4/class.MultiFilter.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.MultiFilter.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/gtk4/property.MultiFilter.n-items.html): (r-) `u32`
pub const MultiFilter = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gtk.Filter;
    pub const Class = gtk.MultiFilterClass;
    /// method [append](https://docs.gtk.org/gtk4/method.MultiFilter.append.html)
    pub fn append(self: *MultiFilter, _filter: *gtk.Filter) void {
        const cFn = @extern(*const fn (*MultiFilter, *gtk.Filter) callconv(.c) void, .{ .name = "gtk_multi_filter_append" });
        const ret = cFn(self, _filter);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.MultiFilter.remove.html)
    pub fn remove(self: *MultiFilter, _position: u32) void {
        const cFn = @extern(*const fn (*MultiFilter, u32) callconv(.c) void, .{ .name = "gtk_multi_filter_remove" });
        const ret = cFn(self, _position);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_multi_filter_get_type" });
        return cFn();
    }
};
pub const MultiFilterClass = opaque {};
/// Class [MultiSelection](https://docs.gtk.org/gtk4/class.MultiSelection.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.MultiSelection.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.MultiSelection.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.MultiSelection.n-items.html): (r-) `u32`
pub const MultiSelection = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel, gtk.SelectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.MultiSelectionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MultiSelection.new.html)
    pub fn new(_model: ?*gio.ListModel) *MultiSelection {
        const cFn = @extern(*const fn (?*gio.ListModel) callconv(.c) *MultiSelection, .{ .name = "gtk_multi_selection_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.MultiSelection.get_model.html)
    pub fn getModel(self: *MultiSelection) ?*gio.ListModel {
        const cFn = @extern(*const fn (*MultiSelection) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_multi_selection_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.MultiSelection.set_model.html)
    pub fn setModel(self: *MultiSelection, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*MultiSelection, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_multi_selection_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_multi_selection_get_type" });
        return cFn();
    }
};
pub const MultiSelectionClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [MultiSorter](https://docs.gtk.org/gtk4/class.MultiSorter.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.MultiSorter.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/gtk4/property.MultiSorter.n-items.html): (r-) `u32`
pub const MultiSorter = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.MultiSorterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.MultiSorter.new.html)
    pub fn new() *MultiSorter {
        const cFn = @extern(*const fn () callconv(.c) *MultiSorter, .{ .name = "gtk_multi_sorter_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append](https://docs.gtk.org/gtk4/method.MultiSorter.append.html)
    pub fn append(self: *MultiSorter, _sorter: *gtk.Sorter) void {
        const cFn = @extern(*const fn (*MultiSorter, *gtk.Sorter) callconv(.c) void, .{ .name = "gtk_multi_sorter_append" });
        const ret = cFn(self, _sorter);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.MultiSorter.remove.html)
    pub fn remove(self: *MultiSorter, _position: u32) void {
        const cFn = @extern(*const fn (*MultiSorter, u32) callconv(.c) void, .{ .name = "gtk_multi_sorter_remove" });
        const ret = cFn(self, _position);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_multi_sorter_get_type" });
        return cFn();
    }
};
pub const MultiSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Class [NamedAction](https://docs.gtk.org/gtk4/class.NamedAction.html)
/// - property [action-name](https://docs.gtk.org/gtk4/property.NamedAction.action-name.html): (r-) `[*:0]const u8`
pub const NamedAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.NamedActionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.NamedAction.new.html)
    pub fn new(_name: [*:0]const u8) *NamedAction {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *NamedAction, .{ .name = "gtk_named_action_new" });
        const ret = cFn(_name);
        return ret;
    }
    /// method [get_action_name](https://docs.gtk.org/gtk4/method.NamedAction.get_action_name.html)
    pub fn getActionName(self: *NamedAction) [*:0]u8 {
        const cFn = @extern(*const fn (*NamedAction) callconv(.c) [*:0]u8, .{ .name = "gtk_named_action_get_action_name" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_named_action_get_type" });
        return cFn();
    }
};
pub const NamedActionClass = opaque {};
/// Iface [Native](https://docs.gtk.org/gtk4/iface.Native.html)
pub const Native = opaque {
    pub const Prerequisites = [_]type{gtk.Widget};
    /// type func [get_for_surface](https://docs.gtk.org/gtk4/type_func.Native.get_for_surface.html)
    pub fn getForSurface(_surface: *gdk.Surface) ?*gtk.Native {
        const cFn = @extern(*const fn (*gdk.Surface) callconv(.c) ?*gtk.Native, .{ .name = "gtk_native_get_for_surface" });
        const ret = cFn(_surface);
        return ret;
    }
    /// method [get_renderer](https://docs.gtk.org/gtk4/method.Native.get_renderer.html)
    pub fn getRenderer(self: *Native) ?*gsk.Renderer {
        const cFn = @extern(*const fn (*Native) callconv(.c) ?*gsk.Renderer, .{ .name = "gtk_native_get_renderer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gtk4/method.Native.get_surface.html)
    pub fn getSurface(self: *Native) ?*gdk.Surface {
        const cFn = @extern(*const fn (*Native) callconv(.c) ?*gdk.Surface, .{ .name = "gtk_native_get_surface" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface_transform](https://docs.gtk.org/gtk4/method.Native.get_surface_transform.html)
    pub fn getSurfaceTransform(self: *Native) struct {
        ret: void,
        x: f64,
        y: f64,
    } {
        var x_out: f64 = undefined;
        const _x = &x_out;
        var y_out: f64 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Native, *f64, *f64) callconv(.c) void, .{ .name = "gtk_native_get_surface_transform" });
        const ret = cFn(self, _x, _y);
        return .{ .ret = ret, .x = x_out, .y = y_out };
    }
    /// method [realize](https://docs.gtk.org/gtk4/method.Native.realize.html)
    pub fn realize(self: *Native) void {
        const cFn = @extern(*const fn (*Native) callconv(.c) void, .{ .name = "gtk_native_realize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unrealize](https://docs.gtk.org/gtk4/method.Native.unrealize.html)
    pub fn unrealize(self: *Native) void {
        const cFn = @extern(*const fn (*Native) callconv(.c) void, .{ .name = "gtk_native_unrealize" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_native_get_type" });
        return cFn();
    }
};
/// Class [NativeDialog](https://docs.gtk.org/gtk4/class.NativeDialog.html)
/// - property [modal](https://docs.gtk.org/gtk4/property.NativeDialog.modal.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.NativeDialog.title.html): (rw) `[*:0]const u8`
/// - property [transient-for](https://docs.gtk.org/gtk4/property.NativeDialog.transient-for.html): (rw) `gtk.Window`
/// - property [visible](https://docs.gtk.org/gtk4/property.NativeDialog.visible.html): (rw) `bool`
pub const NativeDialog = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.NativeDialogClass;
    /// method [destroy](https://docs.gtk.org/gtk4/method.NativeDialog.destroy.html)
    pub fn destroy(self: *NativeDialog) void {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) void, .{ .name = "gtk_native_dialog_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.NativeDialog.get_modal.html)
    pub fn getModal(self: *NativeDialog) bool {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) bool, .{ .name = "gtk_native_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.NativeDialog.get_title.html)
    pub fn getTitle(self: *NativeDialog) ?[*:0]u8 {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) ?[*:0]u8, .{ .name = "gtk_native_dialog_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transient_for](https://docs.gtk.org/gtk4/method.NativeDialog.get_transient_for.html)
    pub fn getTransientFor(self: *NativeDialog) ?*gtk.Window {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) ?*gtk.Window, .{ .name = "gtk_native_dialog_get_transient_for" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible](https://docs.gtk.org/gtk4/method.NativeDialog.get_visible.html)
    pub fn getVisible(self: *NativeDialog) bool {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) bool, .{ .name = "gtk_native_dialog_get_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [hide](https://docs.gtk.org/gtk4/method.NativeDialog.hide.html)
    pub fn hide(self: *NativeDialog) void {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) void, .{ .name = "gtk_native_dialog_hide" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.NativeDialog.set_modal.html)
    pub fn setModal(self: *NativeDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*NativeDialog, bool) callconv(.c) void, .{ .name = "gtk_native_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.NativeDialog.set_title.html)
    pub fn setTitle(self: *NativeDialog, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*NativeDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_native_dialog_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [set_transient_for](https://docs.gtk.org/gtk4/method.NativeDialog.set_transient_for.html)
    pub fn setTransientFor(self: *NativeDialog, _parent: ?*gtk.Window) void {
        const cFn = @extern(*const fn (*NativeDialog, ?*gtk.Window) callconv(.c) void, .{ .name = "gtk_native_dialog_set_transient_for" });
        const ret = cFn(self, _parent);
        return ret;
    }
    /// method [show](https://docs.gtk.org/gtk4/method.NativeDialog.show.html)
    pub fn show(self: *NativeDialog) void {
        const cFn = @extern(*const fn (*NativeDialog) callconv(.c) void, .{ .name = "gtk_native_dialog_show" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [hide](https://docs.gtk.org/gtk4/vfunc.NativeDialog.hide.html)
    pub fn hideV(self: *NativeDialog) void {
        const class: *NativeDialogClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.hide.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [response](https://docs.gtk.org/gtk4/vfunc.NativeDialog.response.html)
    pub fn responseV(self: *NativeDialog, _response_id: i32) void {
        const class: *NativeDialogClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.response.?;
        const ret = vFn(self, _response_id);
        return ret;
    }
    /// vfunc [show](https://docs.gtk.org/gtk4/vfunc.NativeDialog.show.html)
    pub fn showV(self: *NativeDialog) void {
        const class: *NativeDialogClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.show.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [response](https://docs.gtk.org/gtk4/signal.NativeDialog.response.html)
    pub fn connectResponse(self: *NativeDialog, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("response", handler, args, flags, &.{ void, *NativeDialog, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_native_dialog_get_type" });
        return cFn();
    }
};
pub const NativeDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
    response: ?*const fn (_self: *gtk.NativeDialog, _response_id: i32) callconv(.c) void,
    show: ?*const fn (_self: *gtk.NativeDialog) callconv(.c) void,
    hide: ?*const fn (_self: *gtk.NativeDialog) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
pub const NativeInterface = opaque {};
/// Enum [NaturalWrapMode](https://docs.gtk.org/gtk4/enum.NaturalWrapMode.html)
pub const NaturalWrapMode = enum(u32) {
    inherit = 0,
    none = 1,
    word = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_natural_wrap_mode_get_type" });
        return cFn();
    }
};
/// Class [NeverTrigger](https://docs.gtk.org/gtk4/class.NeverTrigger.html)
pub const NeverTrigger = opaque {
    pub const Parent = gtk.ShortcutTrigger;
    pub const Class = gtk.NeverTriggerClass;
    /// type func [get](https://docs.gtk.org/gtk4/type_func.NeverTrigger.get.html)
    pub fn get() *gtk.NeverTrigger {
        const cFn = @extern(*const fn () callconv(.c) *gtk.NeverTrigger, .{ .name = "gtk_never_trigger_get" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_never_trigger_get_type" });
        return cFn();
    }
};
pub const NeverTriggerClass = opaque {};
/// Class [NoSelection](https://docs.gtk.org/gtk4/class.NoSelection.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.NoSelection.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.NoSelection.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.NoSelection.n-items.html): (r-) `u32`
pub const NoSelection = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel, gtk.SelectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.NoSelectionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.NoSelection.new.html)
    pub fn new(_model: ?*gio.ListModel) *NoSelection {
        const cFn = @extern(*const fn (?*gio.ListModel) callconv(.c) *NoSelection, .{ .name = "gtk_no_selection_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.NoSelection.get_model.html)
    pub fn getModel(self: *NoSelection) ?*gio.ListModel {
        const cFn = @extern(*const fn (*NoSelection) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_no_selection_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.NoSelection.set_model.html)
    pub fn setModel(self: *NoSelection, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*NoSelection, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_no_selection_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_no_selection_get_type" });
        return cFn();
    }
};
pub const NoSelectionClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [Notebook](https://docs.gtk.org/gtk4/class.Notebook.html)
/// - property [enable-popup](https://docs.gtk.org/gtk4/property.Notebook.enable-popup.html): (rw) `bool`
/// - property [group-name](https://docs.gtk.org/gtk4/property.Notebook.group-name.html): (rw) `[*:0]const u8`
/// - property [page](https://docs.gtk.org/gtk4/property.Notebook.page.html): (rw) `i32`
/// - property [pages](https://docs.gtk.org/gtk4/property.Notebook.pages.html): (r-) `gio.ListModel`
/// - property [scrollable](https://docs.gtk.org/gtk4/property.Notebook.scrollable.html): (rw) `bool`
/// - property [show-border](https://docs.gtk.org/gtk4/property.Notebook.show-border.html): (rw) `bool`
/// - property [show-tabs](https://docs.gtk.org/gtk4/property.Notebook.show-tabs.html): (rw) `bool`
/// - property [tab-pos](https://docs.gtk.org/gtk4/property.Notebook.tab-pos.html): (rw) `gtk.PositionType`
pub const Notebook = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Notebook.new.html)
    pub fn new() *Notebook {
        const cFn = @extern(*const fn () callconv(.c) *Notebook, .{ .name = "gtk_notebook_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append_page](https://docs.gtk.org/gtk4/method.Notebook.append_page.html)
    pub fn appendPage(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget) callconv(.c) i32, .{ .name = "gtk_notebook_append_page" });
        const ret = cFn(self, _child, _tab_label);
        return ret;
    }
    /// method [append_page_menu](https://docs.gtk.org/gtk4/method.Notebook.append_page_menu.html)
    pub fn appendPageMenu(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget, _menu_label: ?*gtk.Widget) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget, ?*gtk.Widget) callconv(.c) i32, .{ .name = "gtk_notebook_append_page_menu" });
        const ret = cFn(self, _child, _tab_label, _menu_label);
        return ret;
    }
    /// method [detach_tab](https://docs.gtk.org/gtk4/method.Notebook.detach_tab.html)
    pub fn detachTab(self: *Notebook, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_notebook_detach_tab" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_action_widget](https://docs.gtk.org/gtk4/method.Notebook.get_action_widget.html)
    pub fn getActionWidget(self: *Notebook, _pack_type: gtk.PackType) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Notebook, gtk.PackType) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_notebook_get_action_widget" });
        const ret = cFn(self, _pack_type);
        return ret;
    }
    /// method [get_current_page](https://docs.gtk.org/gtk4/method.Notebook.get_current_page.html)
    pub fn getCurrentPage(self: *Notebook) i32 {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) i32, .{ .name = "gtk_notebook_get_current_page" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_group_name](https://docs.gtk.org/gtk4/method.Notebook.get_group_name.html)
    pub fn getGroupName(self: *Notebook) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) ?[*:0]u8, .{ .name = "gtk_notebook_get_group_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_menu_label](https://docs.gtk.org/gtk4/method.Notebook.get_menu_label.html)
    pub fn getMenuLabel(self: *Notebook, _child: *gtk.Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_notebook_get_menu_label" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_menu_label_text](https://docs.gtk.org/gtk4/method.Notebook.get_menu_label_text.html)
    pub fn getMenuLabelText(self: *Notebook, _child: *gtk.Widget) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) ?[*:0]u8, .{ .name = "gtk_notebook_get_menu_label_text" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_n_pages](https://docs.gtk.org/gtk4/method.Notebook.get_n_pages.html)
    pub fn getNPages(self: *Notebook) i32 {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) i32, .{ .name = "gtk_notebook_get_n_pages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nth_page](https://docs.gtk.org/gtk4/method.Notebook.get_nth_page.html)
    pub fn getNthPage(self: *Notebook, _page_num: i32) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Notebook, i32) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_notebook_get_nth_page" });
        const ret = cFn(self, _page_num);
        return ret;
    }
    /// method [get_page](https://docs.gtk.org/gtk4/method.Notebook.get_page.html)
    pub fn getPage(self: *Notebook, _child: *gtk.Widget) *gtk.NotebookPage {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) *gtk.NotebookPage, .{ .name = "gtk_notebook_get_page" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_pages](https://docs.gtk.org/gtk4/method.Notebook.get_pages.html)
    pub fn getPages(self: *Notebook) *gio.ListModel {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) *gio.ListModel, .{ .name = "gtk_notebook_get_pages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scrollable](https://docs.gtk.org/gtk4/method.Notebook.get_scrollable.html)
    pub fn getScrollable(self: *Notebook) bool {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) bool, .{ .name = "gtk_notebook_get_scrollable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_border](https://docs.gtk.org/gtk4/method.Notebook.get_show_border.html)
    pub fn getShowBorder(self: *Notebook) bool {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) bool, .{ .name = "gtk_notebook_get_show_border" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_tabs](https://docs.gtk.org/gtk4/method.Notebook.get_show_tabs.html)
    pub fn getShowTabs(self: *Notebook) bool {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) bool, .{ .name = "gtk_notebook_get_show_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab_detachable](https://docs.gtk.org/gtk4/method.Notebook.get_tab_detachable.html)
    pub fn getTabDetachable(self: *Notebook, _child: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_notebook_get_tab_detachable" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_tab_label](https://docs.gtk.org/gtk4/method.Notebook.get_tab_label.html)
    pub fn getTabLabel(self: *Notebook, _child: *gtk.Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_notebook_get_tab_label" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_tab_label_text](https://docs.gtk.org/gtk4/method.Notebook.get_tab_label_text.html)
    pub fn getTabLabelText(self: *Notebook, _child: *gtk.Widget) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) ?[*:0]u8, .{ .name = "gtk_notebook_get_tab_label_text" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_tab_pos](https://docs.gtk.org/gtk4/method.Notebook.get_tab_pos.html)
    pub fn getTabPos(self: *Notebook) gtk.PositionType {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) gtk.PositionType, .{ .name = "gtk_notebook_get_tab_pos" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tab_reorderable](https://docs.gtk.org/gtk4/method.Notebook.get_tab_reorderable.html)
    pub fn getTabReorderable(self: *Notebook, _child: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_notebook_get_tab_reorderable" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [insert_page](https://docs.gtk.org/gtk4/method.Notebook.insert_page.html)
    pub fn insertPage(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget, _position: i32) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget, i32) callconv(.c) i32, .{ .name = "gtk_notebook_insert_page" });
        const ret = cFn(self, _child, _tab_label, _position);
        return ret;
    }
    /// method [insert_page_menu](https://docs.gtk.org/gtk4/method.Notebook.insert_page_menu.html)
    pub fn insertPageMenu(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget, _menu_label: ?*gtk.Widget, _position: i32) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget, ?*gtk.Widget, i32) callconv(.c) i32, .{ .name = "gtk_notebook_insert_page_menu" });
        const ret = cFn(self, _child, _tab_label, _menu_label, _position);
        return ret;
    }
    /// method [next_page](https://docs.gtk.org/gtk4/method.Notebook.next_page.html)
    pub fn nextPage(self: *Notebook) void {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) void, .{ .name = "gtk_notebook_next_page" });
        const ret = cFn(self);
        return ret;
    }
    /// method [page_num](https://docs.gtk.org/gtk4/method.Notebook.page_num.html)
    pub fn pageNum(self: *Notebook, _child: *gtk.Widget) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget) callconv(.c) i32, .{ .name = "gtk_notebook_page_num" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [popup_disable](https://docs.gtk.org/gtk4/method.Notebook.popup_disable.html)
    pub fn popupDisable(self: *Notebook) void {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) void, .{ .name = "gtk_notebook_popup_disable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [popup_enable](https://docs.gtk.org/gtk4/method.Notebook.popup_enable.html)
    pub fn popupEnable(self: *Notebook) void {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) void, .{ .name = "gtk_notebook_popup_enable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [prepend_page](https://docs.gtk.org/gtk4/method.Notebook.prepend_page.html)
    pub fn prependPage(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget) callconv(.c) i32, .{ .name = "gtk_notebook_prepend_page" });
        const ret = cFn(self, _child, _tab_label);
        return ret;
    }
    /// method [prepend_page_menu](https://docs.gtk.org/gtk4/method.Notebook.prepend_page_menu.html)
    pub fn prependPageMenu(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget, _menu_label: ?*gtk.Widget) i32 {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget, ?*gtk.Widget) callconv(.c) i32, .{ .name = "gtk_notebook_prepend_page_menu" });
        const ret = cFn(self, _child, _tab_label, _menu_label);
        return ret;
    }
    /// method [prev_page](https://docs.gtk.org/gtk4/method.Notebook.prev_page.html)
    pub fn prevPage(self: *Notebook) void {
        const cFn = @extern(*const fn (*Notebook) callconv(.c) void, .{ .name = "gtk_notebook_prev_page" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_page](https://docs.gtk.org/gtk4/method.Notebook.remove_page.html)
    pub fn removePage(self: *Notebook, _page_num: i32) void {
        const cFn = @extern(*const fn (*Notebook, i32) callconv(.c) void, .{ .name = "gtk_notebook_remove_page" });
        const ret = cFn(self, _page_num);
        return ret;
    }
    /// method [reorder_child](https://docs.gtk.org/gtk4/method.Notebook.reorder_child.html)
    pub fn reorderChild(self: *Notebook, _child: *gtk.Widget, _position: i32) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, i32) callconv(.c) void, .{ .name = "gtk_notebook_reorder_child" });
        const ret = cFn(self, _child, _position);
        return ret;
    }
    /// method [set_action_widget](https://docs.gtk.org/gtk4/method.Notebook.set_action_widget.html)
    pub fn setActionWidget(self: *Notebook, _widget: *gtk.Widget, _pack_type: gtk.PackType) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, gtk.PackType) callconv(.c) void, .{ .name = "gtk_notebook_set_action_widget" });
        const ret = cFn(self, _widget, _pack_type);
        return ret;
    }
    /// method [set_current_page](https://docs.gtk.org/gtk4/method.Notebook.set_current_page.html)
    pub fn setCurrentPage(self: *Notebook, _page_num: i32) void {
        const cFn = @extern(*const fn (*Notebook, i32) callconv(.c) void, .{ .name = "gtk_notebook_set_current_page" });
        const ret = cFn(self, _page_num);
        return ret;
    }
    /// method [set_group_name](https://docs.gtk.org/gtk4/method.Notebook.set_group_name.html)
    pub fn setGroupName(self: *Notebook, _group_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Notebook, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_notebook_set_group_name" });
        const ret = cFn(self, _group_name);
        return ret;
    }
    /// method [set_menu_label](https://docs.gtk.org/gtk4/method.Notebook.set_menu_label.html)
    pub fn setMenuLabel(self: *Notebook, _child: *gtk.Widget, _menu_label: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_notebook_set_menu_label" });
        const ret = cFn(self, _child, _menu_label);
        return ret;
    }
    /// method [set_menu_label_text](https://docs.gtk.org/gtk4/method.Notebook.set_menu_label_text.html)
    pub fn setMenuLabelText(self: *Notebook, _child: *gtk.Widget, _menu_text: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_notebook_set_menu_label_text" });
        const ret = cFn(self, _child, _menu_text);
        return ret;
    }
    /// method [set_scrollable](https://docs.gtk.org/gtk4/method.Notebook.set_scrollable.html)
    pub fn setScrollable(self: *Notebook, _scrollable: bool) void {
        const cFn = @extern(*const fn (*Notebook, bool) callconv(.c) void, .{ .name = "gtk_notebook_set_scrollable" });
        const ret = cFn(self, _scrollable);
        return ret;
    }
    /// method [set_show_border](https://docs.gtk.org/gtk4/method.Notebook.set_show_border.html)
    pub fn setShowBorder(self: *Notebook, _show_border: bool) void {
        const cFn = @extern(*const fn (*Notebook, bool) callconv(.c) void, .{ .name = "gtk_notebook_set_show_border" });
        const ret = cFn(self, _show_border);
        return ret;
    }
    /// method [set_show_tabs](https://docs.gtk.org/gtk4/method.Notebook.set_show_tabs.html)
    pub fn setShowTabs(self: *Notebook, _show_tabs: bool) void {
        const cFn = @extern(*const fn (*Notebook, bool) callconv(.c) void, .{ .name = "gtk_notebook_set_show_tabs" });
        const ret = cFn(self, _show_tabs);
        return ret;
    }
    /// method [set_tab_detachable](https://docs.gtk.org/gtk4/method.Notebook.set_tab_detachable.html)
    pub fn setTabDetachable(self: *Notebook, _child: *gtk.Widget, _detachable: bool) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, bool) callconv(.c) void, .{ .name = "gtk_notebook_set_tab_detachable" });
        const ret = cFn(self, _child, _detachable);
        return ret;
    }
    /// method [set_tab_label](https://docs.gtk.org/gtk4/method.Notebook.set_tab_label.html)
    pub fn setTabLabel(self: *Notebook, _child: *gtk.Widget, _tab_label: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_notebook_set_tab_label" });
        const ret = cFn(self, _child, _tab_label);
        return ret;
    }
    /// method [set_tab_label_text](https://docs.gtk.org/gtk4/method.Notebook.set_tab_label_text.html)
    pub fn setTabLabelText(self: *Notebook, _child: *gtk.Widget, _tab_text: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_notebook_set_tab_label_text" });
        const ret = cFn(self, _child, _tab_text);
        return ret;
    }
    /// method [set_tab_pos](https://docs.gtk.org/gtk4/method.Notebook.set_tab_pos.html)
    pub fn setTabPos(self: *Notebook, _pos: gtk.PositionType) void {
        const cFn = @extern(*const fn (*Notebook, gtk.PositionType) callconv(.c) void, .{ .name = "gtk_notebook_set_tab_pos" });
        const ret = cFn(self, _pos);
        return ret;
    }
    /// method [set_tab_reorderable](https://docs.gtk.org/gtk4/method.Notebook.set_tab_reorderable.html)
    pub fn setTabReorderable(self: *Notebook, _child: *gtk.Widget, _reorderable: bool) void {
        const cFn = @extern(*const fn (*Notebook, *gtk.Widget, bool) callconv(.c) void, .{ .name = "gtk_notebook_set_tab_reorderable" });
        const ret = cFn(self, _child, _reorderable);
        return ret;
    }
    /// signal [change-current-page](https://docs.gtk.org/gtk4/signal.Notebook.change-current-page.html)
    pub fn connectChangeCurrentPage(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-current-page", handler, args, flags, &.{ bool, *Notebook, i32 });
    }
    /// signal [create-window](https://docs.gtk.org/gtk4/signal.Notebook.create-window.html)
    pub fn connectCreateWindow(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("create-window", handler, args, flags, &.{ gtk.Notebook, *Notebook, *gtk.Widget });
    }
    /// signal [focus-tab](https://docs.gtk.org/gtk4/signal.Notebook.focus-tab.html)
    pub fn connectFocusTab(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("focus-tab", handler, args, flags, &.{ bool, *Notebook, gtk.NotebookTab });
    }
    /// signal [move-focus-out](https://docs.gtk.org/gtk4/signal.Notebook.move-focus-out.html)
    pub fn connectMoveFocusOut(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-focus-out", handler, args, flags, &.{ void, *Notebook, gtk.DirectionType });
    }
    /// signal [page-added](https://docs.gtk.org/gtk4/signal.Notebook.page-added.html)
    pub fn connectPageAdded(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("page-added", handler, args, flags, &.{ void, *Notebook, *gtk.Widget, u32 });
    }
    /// signal [page-removed](https://docs.gtk.org/gtk4/signal.Notebook.page-removed.html)
    pub fn connectPageRemoved(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("page-removed", handler, args, flags, &.{ void, *Notebook, *gtk.Widget, u32 });
    }
    /// signal [page-reordered](https://docs.gtk.org/gtk4/signal.Notebook.page-reordered.html)
    pub fn connectPageReordered(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("page-reordered", handler, args, flags, &.{ void, *Notebook, *gtk.Widget, u32 });
    }
    /// signal [reorder-tab](https://docs.gtk.org/gtk4/signal.Notebook.reorder-tab.html)
    pub fn connectReorderTab(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("reorder-tab", handler, args, flags, &.{ bool, *Notebook, gtk.DirectionType, bool });
    }
    /// signal [select-page](https://docs.gtk.org/gtk4/signal.Notebook.select-page.html)
    pub fn connectSelectPage(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-page", handler, args, flags, &.{ bool, *Notebook, bool });
    }
    /// signal [switch-page](https://docs.gtk.org/gtk4/signal.Notebook.switch-page.html)
    pub fn connectSwitchPage(self: *Notebook, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("switch-page", handler, args, flags, &.{ void, *Notebook, *gtk.Widget, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_notebook_get_type" });
        return cFn();
    }
};
/// Class [NotebookPage](https://docs.gtk.org/gtk4/class.NotebookPage.html)
/// - property [child](https://docs.gtk.org/gtk4/property.NotebookPage.child.html): (r-) `gtk.Widget`
/// - property [detachable](https://docs.gtk.org/gtk4/property.NotebookPage.detachable.html): (rw) `bool`
/// - property [menu](https://docs.gtk.org/gtk4/property.NotebookPage.menu.html): (r-) `gtk.Widget`
/// - property [menu-label](https://docs.gtk.org/gtk4/property.NotebookPage.menu-label.html): (rw) `[*:0]const u8`
/// - property [position](https://docs.gtk.org/gtk4/property.NotebookPage.position.html): (rw) `i32`
/// - property [reorderable](https://docs.gtk.org/gtk4/property.NotebookPage.reorderable.html): (rw) `bool`
/// - property [tab](https://docs.gtk.org/gtk4/property.NotebookPage.tab.html): (r-) `gtk.Widget`
/// - property [tab-expand](https://docs.gtk.org/gtk4/property.NotebookPage.tab-expand.html): (rw) `bool`
/// - property [tab-fill](https://docs.gtk.org/gtk4/property.NotebookPage.tab-fill.html): (rw) `bool`
/// - property [tab-label](https://docs.gtk.org/gtk4/property.NotebookPage.tab-label.html): (rw) `[*:0]const u8`
pub const NotebookPage = opaque {
    pub const Parent = gobject.Object;
    /// method [get_child](https://docs.gtk.org/gtk4/method.NotebookPage.get_child.html)
    pub fn getChild(self: *NotebookPage) *gtk.Widget {
        const cFn = @extern(*const fn (*NotebookPage) callconv(.c) *gtk.Widget, .{ .name = "gtk_notebook_page_get_child" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_notebook_page_get_type" });
        return cFn();
    }
};
/// Enum [NotebookTab](https://docs.gtk.org/gtk4/enum.NotebookTab.html)
pub const NotebookTab = enum(u32) {
    first = 0,
    last = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_notebook_tab_get_type" });
        return cFn();
    }
};
/// Class [NothingAction](https://docs.gtk.org/gtk4/class.NothingAction.html)
pub const NothingAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.NothingActionClass;
    /// type func [get](https://docs.gtk.org/gtk4/type_func.NothingAction.get.html)
    pub fn get() *gtk.NothingAction {
        const cFn = @extern(*const fn () callconv(.c) *gtk.NothingAction, .{ .name = "gtk_nothing_action_get" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_nothing_action_get_type" });
        return cFn();
    }
};
pub const NothingActionClass = opaque {};
/// Enum [NumberUpLayout](https://docs.gtk.org/gtk4/enum.NumberUpLayout.html)
pub const NumberUpLayout = enum(u32) {
    lrtb = 0,
    lrbt = 1,
    rltb = 2,
    rlbt = 3,
    tblr = 4,
    tbrl = 5,
    btlr = 6,
    btrl = 7,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_number_up_layout_get_type" });
        return cFn();
    }
};
/// Class [NumericSorter](https://docs.gtk.org/gtk4/class.NumericSorter.html)
/// - property [expression](https://docs.gtk.org/gtk4/property.NumericSorter.expression.html): (rw) `gtk.Expression`
/// - property [sort-order](https://docs.gtk.org/gtk4/property.NumericSorter.sort-order.html): (rw) `gtk.SortType`
pub const NumericSorter = opaque {
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.NumericSorterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.NumericSorter.new.html)
    pub fn new(_expression: ?*gtk.Expression) *NumericSorter {
        const cFn = @extern(*const fn (?*gtk.Expression) callconv(.c) *NumericSorter, .{ .name = "gtk_numeric_sorter_new" });
        const ret = cFn(_expression);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.NumericSorter.get_expression.html)
    pub fn getExpression(self: *NumericSorter) ?*gtk.Expression {
        const cFn = @extern(*const fn (*NumericSorter) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_numeric_sorter_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sort_order](https://docs.gtk.org/gtk4/method.NumericSorter.get_sort_order.html)
    pub fn getSortOrder(self: *NumericSorter) gtk.SortType {
        const cFn = @extern(*const fn (*NumericSorter) callconv(.c) gtk.SortType, .{ .name = "gtk_numeric_sorter_get_sort_order" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_expression](https://docs.gtk.org/gtk4/method.NumericSorter.set_expression.html)
    pub fn setExpression(self: *NumericSorter, _expression: ?*gtk.Expression) void {
        const cFn = @extern(*const fn (*NumericSorter, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_numeric_sorter_set_expression" });
        const ret = cFn(self, _expression);
        return ret;
    }
    /// method [set_sort_order](https://docs.gtk.org/gtk4/method.NumericSorter.set_sort_order.html)
    pub fn setSortOrder(self: *NumericSorter, _sort_order: gtk.SortType) void {
        const cFn = @extern(*const fn (*NumericSorter, gtk.SortType) callconv(.c) void, .{ .name = "gtk_numeric_sorter_set_sort_order" });
        const ret = cFn(self, _sort_order);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_numeric_sorter_get_type" });
        return cFn();
    }
};
pub const NumericSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Class [ObjectExpression](https://docs.gtk.org/gtk4/class.ObjectExpression.html)
pub const ObjectExpression = opaque {
    pub const Parent = gtk.Expression;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ObjectExpression.new.html)
    pub fn new(_object: *gobject.Object) *ObjectExpression {
        const cFn = @extern(*const fn (*gobject.Object) callconv(.c) *ObjectExpression, .{ .name = "gtk_object_expression_new" });
        const ret = cFn(_object);
        return ret;
    }
    /// method [get_object](https://docs.gtk.org/gtk4/method.ObjectExpression.get_object.html)
    pub fn getObject(self: *ObjectExpression) ?*gobject.Object {
        const cFn = @extern(*const fn (*ObjectExpression) callconv(.c) ?*gobject.Object, .{ .name = "gtk_object_expression_get_object" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_object_expression_get_type" });
        return cFn();
    }
};
/// Enum [Ordering](https://docs.gtk.org/gtk4/enum.Ordering.html)
pub const Ordering = enum(i32) {
    smaller = -1,
    equal = 0,
    larger = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_ordering_get_type" });
        return cFn();
    }
};
/// Iface [Orientable](https://docs.gtk.org/gtk4/iface.Orientable.html)
/// - property [orientation](https://docs.gtk.org/gtk4/property.Orientable.orientation.html): (rw) `gtk.Orientation`
pub const Orientable = opaque {
    /// method [get_orientation](https://docs.gtk.org/gtk4/method.Orientable.get_orientation.html)
    pub fn getOrientation(self: *Orientable) gtk.Orientation {
        const cFn = @extern(*const fn (*Orientable) callconv(.c) gtk.Orientation, .{ .name = "gtk_orientable_get_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_orientation](https://docs.gtk.org/gtk4/method.Orientable.set_orientation.html)
    pub fn setOrientation(self: *Orientable, _orientation: gtk.Orientation) void {
        const cFn = @extern(*const fn (*Orientable, gtk.Orientation) callconv(.c) void, .{ .name = "gtk_orientable_set_orientation" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_orientable_get_type" });
        return cFn();
    }
};
/// Struct [OrientableIface](https://docs.gtk.org/gtk4/struct.OrientableIface.html)
pub const OrientableIface = extern struct {
    base_iface: gobject.TypeInterface,
};
/// Enum [Orientation](https://docs.gtk.org/gtk4/enum.Orientation.html)
pub const Orientation = enum(u32) {
    horizontal = 0,
    vertical = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_orientation_get_type" });
        return cFn();
    }
};
/// Enum [Overflow](https://docs.gtk.org/gtk4/enum.Overflow.html)
pub const Overflow = enum(u32) {
    visible = 0,
    hidden = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_overflow_get_type" });
        return cFn();
    }
};
/// Class [Overlay](https://docs.gtk.org/gtk4/class.Overlay.html)
/// - property [child](https://docs.gtk.org/gtk4/property.Overlay.child.html): (rw) `gtk.Widget`
pub const Overlay = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Overlay.new.html)
    pub fn new() *Overlay {
        const cFn = @extern(*const fn () callconv(.c) *Overlay, .{ .name = "gtk_overlay_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_overlay](https://docs.gtk.org/gtk4/method.Overlay.add_overlay.html)
    pub fn addOverlay(self: *Overlay, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_overlay_add_overlay" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Overlay.get_child.html)
    pub fn getChild(self: *Overlay) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Overlay) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_overlay_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_clip_overlay](https://docs.gtk.org/gtk4/method.Overlay.get_clip_overlay.html)
    pub fn getClipOverlay(self: *Overlay, _widget: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_overlay_get_clip_overlay" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [get_measure_overlay](https://docs.gtk.org/gtk4/method.Overlay.get_measure_overlay.html)
    pub fn getMeasureOverlay(self: *Overlay, _widget: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_overlay_get_measure_overlay" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [remove_overlay](https://docs.gtk.org/gtk4/method.Overlay.remove_overlay.html)
    pub fn removeOverlay(self: *Overlay, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_overlay_remove_overlay" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Overlay.set_child.html)
    pub fn setChild(self: *Overlay, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Overlay, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_overlay_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_clip_overlay](https://docs.gtk.org/gtk4/method.Overlay.set_clip_overlay.html)
    pub fn setClipOverlay(self: *Overlay, _widget: *gtk.Widget, _clip_overlay: bool) void {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget, bool) callconv(.c) void, .{ .name = "gtk_overlay_set_clip_overlay" });
        const ret = cFn(self, _widget, _clip_overlay);
        return ret;
    }
    /// method [set_measure_overlay](https://docs.gtk.org/gtk4/method.Overlay.set_measure_overlay.html)
    pub fn setMeasureOverlay(self: *Overlay, _widget: *gtk.Widget, _measure: bool) void {
        const cFn = @extern(*const fn (*Overlay, *gtk.Widget, bool) callconv(.c) void, .{ .name = "gtk_overlay_set_measure_overlay" });
        const ret = cFn(self, _widget, _measure);
        return ret;
    }
    /// signal [get-child-position](https://docs.gtk.org/gtk4/signal.Overlay.get-child-position.html)
    pub fn connectGetChildPosition(self: *Overlay, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("get-child-position", handler, args, flags, &.{ bool, *Overlay, *gtk.Widget, *gdk.Rectangle });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_overlay_get_type" });
        return cFn();
    }
};
/// Class [OverlayLayout](https://docs.gtk.org/gtk4/class.OverlayLayout.html)
pub const OverlayLayout = opaque {
    pub const Parent = gtk.LayoutManager;
    pub const Class = gtk.OverlayLayoutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.OverlayLayout.new.html)
    pub fn new() *OverlayLayout {
        const cFn = @extern(*const fn () callconv(.c) *OverlayLayout, .{ .name = "gtk_overlay_layout_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_overlay_layout_get_type" });
        return cFn();
    }
};
/// Class [OverlayLayoutChild](https://docs.gtk.org/gtk4/class.OverlayLayoutChild.html)
/// - property [clip-overlay](https://docs.gtk.org/gtk4/property.OverlayLayoutChild.clip-overlay.html): (rw) `bool`
/// - property [measure](https://docs.gtk.org/gtk4/property.OverlayLayoutChild.measure.html): (rw) `bool`
pub const OverlayLayoutChild = opaque {
    pub const Parent = gtk.LayoutChild;
    pub const Class = gtk.OverlayLayoutChildClass;
    /// method [get_clip_overlay](https://docs.gtk.org/gtk4/method.OverlayLayoutChild.get_clip_overlay.html)
    pub fn getClipOverlay(self: *OverlayLayoutChild) bool {
        const cFn = @extern(*const fn (*OverlayLayoutChild) callconv(.c) bool, .{ .name = "gtk_overlay_layout_child_get_clip_overlay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_measure](https://docs.gtk.org/gtk4/method.OverlayLayoutChild.get_measure.html)
    pub fn getMeasure(self: *OverlayLayoutChild) bool {
        const cFn = @extern(*const fn (*OverlayLayoutChild) callconv(.c) bool, .{ .name = "gtk_overlay_layout_child_get_measure" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_clip_overlay](https://docs.gtk.org/gtk4/method.OverlayLayoutChild.set_clip_overlay.html)
    pub fn setClipOverlay(self: *OverlayLayoutChild, _clip_overlay: bool) void {
        const cFn = @extern(*const fn (*OverlayLayoutChild, bool) callconv(.c) void, .{ .name = "gtk_overlay_layout_child_set_clip_overlay" });
        const ret = cFn(self, _clip_overlay);
        return ret;
    }
    /// method [set_measure](https://docs.gtk.org/gtk4/method.OverlayLayoutChild.set_measure.html)
    pub fn setMeasure(self: *OverlayLayoutChild, _measure: bool) void {
        const cFn = @extern(*const fn (*OverlayLayoutChild, bool) callconv(.c) void, .{ .name = "gtk_overlay_layout_child_set_measure" });
        const ret = cFn(self, _measure);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_overlay_layout_child_get_type" });
        return cFn();
    }
};
pub const OverlayLayoutChildClass = extern struct {
    parent_class: gtk.LayoutChildClass,
};
pub const OverlayLayoutClass = extern struct {
    parent_class: gtk.LayoutManagerClass,
};
/// const [PAPER_NAME_A3](https://docs.gtk.org/gtk4/const.PAPER_NAME_A3.html)
pub const PAPER_NAME_A3 = "iso_a3";
/// const [PAPER_NAME_A4](https://docs.gtk.org/gtk4/const.PAPER_NAME_A4.html)
pub const PAPER_NAME_A4 = "iso_a4";
/// const [PAPER_NAME_A5](https://docs.gtk.org/gtk4/const.PAPER_NAME_A5.html)
pub const PAPER_NAME_A5 = "iso_a5";
/// const [PAPER_NAME_B5](https://docs.gtk.org/gtk4/const.PAPER_NAME_B5.html)
pub const PAPER_NAME_B5 = "iso_b5";
/// const [PAPER_NAME_EXECUTIVE](https://docs.gtk.org/gtk4/const.PAPER_NAME_EXECUTIVE.html)
pub const PAPER_NAME_EXECUTIVE = "na_executive";
/// const [PAPER_NAME_LEGAL](https://docs.gtk.org/gtk4/const.PAPER_NAME_LEGAL.html)
pub const PAPER_NAME_LEGAL = "na_legal";
/// const [PAPER_NAME_LETTER](https://docs.gtk.org/gtk4/const.PAPER_NAME_LETTER.html)
pub const PAPER_NAME_LETTER = "na_letter";
/// const [PRINT_SETTINGS_COLLATE](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_COLLATE.html)
pub const PRINT_SETTINGS_COLLATE = "collate";
/// const [PRINT_SETTINGS_DEFAULT_SOURCE](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_DEFAULT_SOURCE.html)
pub const PRINT_SETTINGS_DEFAULT_SOURCE = "default-source";
/// const [PRINT_SETTINGS_DITHER](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_DITHER.html)
pub const PRINT_SETTINGS_DITHER = "dither";
/// const [PRINT_SETTINGS_DUPLEX](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_DUPLEX.html)
pub const PRINT_SETTINGS_DUPLEX = "duplex";
/// const [PRINT_SETTINGS_FINISHINGS](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_FINISHINGS.html)
pub const PRINT_SETTINGS_FINISHINGS = "finishings";
/// const [PRINT_SETTINGS_MEDIA_TYPE](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_MEDIA_TYPE.html)
pub const PRINT_SETTINGS_MEDIA_TYPE = "media-type";
/// const [PRINT_SETTINGS_NUMBER_UP](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_NUMBER_UP.html)
pub const PRINT_SETTINGS_NUMBER_UP = "number-up";
/// const [PRINT_SETTINGS_NUMBER_UP_LAYOUT](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_NUMBER_UP_LAYOUT.html)
pub const PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout";
/// const [PRINT_SETTINGS_N_COPIES](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_N_COPIES.html)
pub const PRINT_SETTINGS_N_COPIES = "n-copies";
/// const [PRINT_SETTINGS_ORIENTATION](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_ORIENTATION.html)
pub const PRINT_SETTINGS_ORIENTATION = "orientation";
/// const [PRINT_SETTINGS_OUTPUT_BASENAME](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_OUTPUT_BASENAME.html)
pub const PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename";
/// const [PRINT_SETTINGS_OUTPUT_BIN](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_OUTPUT_BIN.html)
pub const PRINT_SETTINGS_OUTPUT_BIN = "output-bin";
/// const [PRINT_SETTINGS_OUTPUT_DIR](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_OUTPUT_DIR.html)
pub const PRINT_SETTINGS_OUTPUT_DIR = "output-dir";
/// const [PRINT_SETTINGS_OUTPUT_FILE_FORMAT](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_OUTPUT_FILE_FORMAT.html)
pub const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format";
/// const [PRINT_SETTINGS_OUTPUT_URI](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_OUTPUT_URI.html)
pub const PRINT_SETTINGS_OUTPUT_URI = "output-uri";
/// const [PRINT_SETTINGS_PAGE_RANGES](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PAGE_RANGES.html)
pub const PRINT_SETTINGS_PAGE_RANGES = "page-ranges";
/// const [PRINT_SETTINGS_PAGE_SET](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PAGE_SET.html)
pub const PRINT_SETTINGS_PAGE_SET = "page-set";
/// const [PRINT_SETTINGS_PAPER_FORMAT](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PAPER_FORMAT.html)
pub const PRINT_SETTINGS_PAPER_FORMAT = "paper-format";
/// const [PRINT_SETTINGS_PAPER_HEIGHT](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PAPER_HEIGHT.html)
pub const PRINT_SETTINGS_PAPER_HEIGHT = "paper-height";
/// const [PRINT_SETTINGS_PAPER_WIDTH](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PAPER_WIDTH.html)
pub const PRINT_SETTINGS_PAPER_WIDTH = "paper-width";
/// const [PRINT_SETTINGS_PRINTER](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PRINTER.html)
pub const PRINT_SETTINGS_PRINTER = "printer";
/// const [PRINT_SETTINGS_PRINTER_LPI](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PRINTER_LPI.html)
pub const PRINT_SETTINGS_PRINTER_LPI = "printer-lpi";
/// const [PRINT_SETTINGS_PRINT_PAGES](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_PRINT_PAGES.html)
pub const PRINT_SETTINGS_PRINT_PAGES = "print-pages";
/// const [PRINT_SETTINGS_QUALITY](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_QUALITY.html)
pub const PRINT_SETTINGS_QUALITY = "quality";
/// const [PRINT_SETTINGS_RESOLUTION](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_RESOLUTION.html)
pub const PRINT_SETTINGS_RESOLUTION = "resolution";
/// const [PRINT_SETTINGS_RESOLUTION_X](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_RESOLUTION_X.html)
pub const PRINT_SETTINGS_RESOLUTION_X = "resolution-x";
/// const [PRINT_SETTINGS_RESOLUTION_Y](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_RESOLUTION_Y.html)
pub const PRINT_SETTINGS_RESOLUTION_Y = "resolution-y";
/// const [PRINT_SETTINGS_REVERSE](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_REVERSE.html)
pub const PRINT_SETTINGS_REVERSE = "reverse";
/// const [PRINT_SETTINGS_SCALE](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_SCALE.html)
pub const PRINT_SETTINGS_SCALE = "scale";
/// const [PRINT_SETTINGS_USE_COLOR](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_USE_COLOR.html)
pub const PRINT_SETTINGS_USE_COLOR = "use-color";
/// const [PRINT_SETTINGS_WIN32_DRIVER_EXTRA](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_WIN32_DRIVER_EXTRA.html)
pub const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra";
/// const [PRINT_SETTINGS_WIN32_DRIVER_VERSION](https://docs.gtk.org/gtk4/const.PRINT_SETTINGS_WIN32_DRIVER_VERSION.html)
pub const PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version";
/// const [PRIORITY_RESIZE](https://docs.gtk.org/gtk4/const.PRIORITY_RESIZE.html)
pub const PRIORITY_RESIZE = 110;
/// Enum [PackType](https://docs.gtk.org/gtk4/enum.PackType.html)
pub const PackType = enum(u32) {
    start = 0,
    end = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_pack_type_get_type" });
        return cFn();
    }
};
/// Struct [PadActionEntry](https://docs.gtk.org/gtk4/struct.PadActionEntry.html)
pub const PadActionEntry = extern struct {
    type: gtk.PadActionType,
    index: i32,
    mode: i32,
    label: ?[*:0]const u8,
    action_name: ?[*:0]const u8,
};
/// Enum [PadActionType](https://docs.gtk.org/gtk4/enum.PadActionType.html)
pub const PadActionType = enum(u32) {
    button = 0,
    ring = 1,
    strip = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_pad_action_type_get_type" });
        return cFn();
    }
};
/// Class [PadController](https://docs.gtk.org/gtk4/class.PadController.html)
/// - property [action-group](https://docs.gtk.org/gtk4/property.PadController.action-group.html): (r-) `gio.ActionGroup`
/// - property [pad](https://docs.gtk.org/gtk4/property.PadController.pad.html): (r-) `gdk.Device`
pub const PadController = opaque {
    pub const Parent = gtk.EventController;
    pub const Class = gtk.PadControllerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PadController.new.html)
    pub fn new(_group: *gio.ActionGroup, _pad: ?*gdk.Device) *PadController {
        const cFn = @extern(*const fn (*gio.ActionGroup, ?*gdk.Device) callconv(.c) *PadController, .{ .name = "gtk_pad_controller_new" });
        const ret = cFn(_group, _pad);
        return ret;
    }
    /// method [set_action](https://docs.gtk.org/gtk4/method.PadController.set_action.html)
    pub fn setAction(self: *PadController, _type: gtk.PadActionType, _index: i32, _mode: i32, _label: [*:0]const u8, _action_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PadController, gtk.PadActionType, i32, i32, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_pad_controller_set_action" });
        const ret = cFn(self, _type, _index, _mode, _label, _action_name);
        return ret;
    }
    /// method [set_action_entries](https://docs.gtk.org/gtk4/method.PadController.set_action_entries.html)
    pub fn setActionEntries(self: *PadController, _entriess: []gtk.PadActionEntry) void {
        const _entries = _entriess.ptr;
        const _n_entries: i32 = @intCast(_entriess.len);
        const cFn = @extern(*const fn (*PadController, [*]gtk.PadActionEntry, i32) callconv(.c) void, .{ .name = "gtk_pad_controller_set_action_entries" });
        const ret = cFn(self, _entries, _n_entries);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_pad_controller_get_type" });
        return cFn();
    }
};
pub const PadControllerClass = opaque {};
/// Enum [PageOrientation](https://docs.gtk.org/gtk4/enum.PageOrientation.html)
pub const PageOrientation = enum(u32) {
    portrait = 0,
    landscape = 1,
    reverse_portrait = 2,
    reverse_landscape = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_page_orientation_get_type" });
        return cFn();
    }
};
/// Struct [PageRange](https://docs.gtk.org/gtk4/struct.PageRange.html)
pub const PageRange = extern struct {
    start: i32,
    end: i32,
};
/// Enum [PageSet](https://docs.gtk.org/gtk4/enum.PageSet.html)
pub const PageSet = enum(u32) {
    all = 0,
    even = 1,
    odd = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_page_set_get_type" });
        return cFn();
    }
};
/// Class [PageSetup](https://docs.gtk.org/gtk4/class.PageSetup.html)
pub const PageSetup = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PageSetup.new.html)
    pub fn new() *PageSetup {
        const cFn = @extern(*const fn () callconv(.c) *PageSetup, .{ .name = "gtk_page_setup_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gtk4/ctor.PageSetup.new_from_file.html)
    pub fn newFromFile(_file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!*PageSetup {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *PageSetup, .{ .name = "gtk_page_setup_new_from_file" });
        const ret = cFn(_file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_gvariant](https://docs.gtk.org/gtk4/ctor.PageSetup.new_from_gvariant.html)
    pub fn newFromGvariant(_variant: *glib.Variant) *PageSetup {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) *PageSetup, .{ .name = "gtk_page_setup_new_from_gvariant" });
        const ret = cFn(_variant);
        return ret;
    }
    /// ctor [new_from_key_file](https://docs.gtk.org/gtk4/ctor.PageSetup.new_from_key_file.html)
    pub fn newFromKeyFile(_key_file: *glib.KeyFile, _group_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*PageSetup {
        const cFn = @extern(*const fn (*glib.KeyFile, ?[*:0]const u8, *?*core.Error) callconv(.c) *PageSetup, .{ .name = "gtk_page_setup_new_from_key_file" });
        const ret = cFn(_key_file, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.PageSetup.copy.html)
    pub fn copy(self: *PageSetup) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PageSetup) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_page_setup_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bottom_margin](https://docs.gtk.org/gtk4/method.PageSetup.get_bottom_margin.html)
    pub fn getBottomMargin(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_bottom_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_left_margin](https://docs.gtk.org/gtk4/method.PageSetup.get_left_margin.html)
    pub fn getLeftMargin(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_left_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_orientation](https://docs.gtk.org/gtk4/method.PageSetup.get_orientation.html)
    pub fn getOrientation(self: *PageSetup) gtk.PageOrientation {
        const cFn = @extern(*const fn (*PageSetup) callconv(.c) gtk.PageOrientation, .{ .name = "gtk_page_setup_get_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_height](https://docs.gtk.org/gtk4/method.PageSetup.get_page_height.html)
    pub fn getPageHeight(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_page_height" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_page_width](https://docs.gtk.org/gtk4/method.PageSetup.get_page_width.html)
    pub fn getPageWidth(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_page_width" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_paper_height](https://docs.gtk.org/gtk4/method.PageSetup.get_paper_height.html)
    pub fn getPaperHeight(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_paper_height" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_paper_size](https://docs.gtk.org/gtk4/method.PageSetup.get_paper_size.html)
    pub fn getPaperSize(self: *PageSetup) *gtk.PaperSize {
        const cFn = @extern(*const fn (*PageSetup) callconv(.c) *gtk.PaperSize, .{ .name = "gtk_page_setup_get_paper_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_paper_width](https://docs.gtk.org/gtk4/method.PageSetup.get_paper_width.html)
    pub fn getPaperWidth(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_paper_width" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_right_margin](https://docs.gtk.org/gtk4/method.PageSetup.get_right_margin.html)
    pub fn getRightMargin(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_right_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_top_margin](https://docs.gtk.org/gtk4/method.PageSetup.get_top_margin.html)
    pub fn getTopMargin(self: *PageSetup, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PageSetup, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_page_setup_get_top_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [load_file](https://docs.gtk.org/gtk4/method.PageSetup.load_file.html)
    pub fn loadFile(self: *PageSetup, _file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PageSetup, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_page_setup_load_file" });
        const ret = cFn(self, _file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [load_key_file](https://docs.gtk.org/gtk4/method.PageSetup.load_key_file.html)
    pub fn loadKeyFile(self: *PageSetup, _key_file: *glib.KeyFile, _group_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PageSetup, *glib.KeyFile, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_page_setup_load_key_file" });
        const ret = cFn(self, _key_file, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_bottom_margin](https://docs.gtk.org/gtk4/method.PageSetup.set_bottom_margin.html)
    pub fn setBottomMargin(self: *PageSetup, _margin: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PageSetup, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_page_setup_set_bottom_margin" });
        const ret = cFn(self, _margin, _unit);
        return ret;
    }
    /// method [set_left_margin](https://docs.gtk.org/gtk4/method.PageSetup.set_left_margin.html)
    pub fn setLeftMargin(self: *PageSetup, _margin: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PageSetup, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_page_setup_set_left_margin" });
        const ret = cFn(self, _margin, _unit);
        return ret;
    }
    /// method [set_orientation](https://docs.gtk.org/gtk4/method.PageSetup.set_orientation.html)
    pub fn setOrientation(self: *PageSetup, _orientation: gtk.PageOrientation) void {
        const cFn = @extern(*const fn (*PageSetup, gtk.PageOrientation) callconv(.c) void, .{ .name = "gtk_page_setup_set_orientation" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// method [set_paper_size](https://docs.gtk.org/gtk4/method.PageSetup.set_paper_size.html)
    pub fn setPaperSize(self: *PageSetup, _size: *gtk.PaperSize) void {
        const cFn = @extern(*const fn (*PageSetup, *gtk.PaperSize) callconv(.c) void, .{ .name = "gtk_page_setup_set_paper_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_paper_size_and_default_margins](https://docs.gtk.org/gtk4/method.PageSetup.set_paper_size_and_default_margins.html)
    pub fn setPaperSizeAndDefaultMargins(self: *PageSetup, _size: *gtk.PaperSize) void {
        const cFn = @extern(*const fn (*PageSetup, *gtk.PaperSize) callconv(.c) void, .{ .name = "gtk_page_setup_set_paper_size_and_default_margins" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [set_right_margin](https://docs.gtk.org/gtk4/method.PageSetup.set_right_margin.html)
    pub fn setRightMargin(self: *PageSetup, _margin: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PageSetup, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_page_setup_set_right_margin" });
        const ret = cFn(self, _margin, _unit);
        return ret;
    }
    /// method [set_top_margin](https://docs.gtk.org/gtk4/method.PageSetup.set_top_margin.html)
    pub fn setTopMargin(self: *PageSetup, _margin: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PageSetup, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_page_setup_set_top_margin" });
        const ret = cFn(self, _margin, _unit);
        return ret;
    }
    /// method [to_file](https://docs.gtk.org/gtk4/method.PageSetup.to_file.html)
    pub fn toFile(self: *PageSetup, _file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PageSetup, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_page_setup_to_file" });
        const ret = cFn(self, _file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [to_gvariant](https://docs.gtk.org/gtk4/method.PageSetup.to_gvariant.html)
    pub fn toGvariant(self: *PageSetup) *glib.Variant {
        const cFn = @extern(*const fn (*PageSetup) callconv(.c) *glib.Variant, .{ .name = "gtk_page_setup_to_gvariant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_key_file](https://docs.gtk.org/gtk4/method.PageSetup.to_key_file.html)
    pub fn toKeyFile(self: *PageSetup, _key_file: *glib.KeyFile, _group_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*PageSetup, *glib.KeyFile, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_page_setup_to_key_file" });
        const ret = cFn(self, _key_file, _group_name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_page_setup_get_type" });
        return cFn();
    }
};
/// callback [PageSetupDoneFunc](https://docs.gtk.org/gtk4/callback.PageSetupDoneFunc.html)
pub const PageSetupDoneFunc = *const fn (_page_setup: *gtk.PageSetup, _data: ?*anyopaque) callconv(.c) void;
/// Class [PageSetupUnixDialog](https://docs.gtk.org/gtk4/class.PageSetupUnixDialog.html)
pub const PageSetupUnixDialog = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PageSetupUnixDialog.new.html)
    pub fn new(_title: ?[*:0]const u8, _parent: ?*gtk.Window) *PageSetupUnixDialog {
        const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.Window) callconv(.c) *PageSetupUnixDialog, .{ .name = "gtk_page_setup_unix_dialog_new" });
        const ret = cFn(_title, _parent);
        return ret;
    }
    /// method [get_page_setup](https://docs.gtk.org/gtk4/method.PageSetupUnixDialog.get_page_setup.html)
    pub fn getPageSetup(self: *PageSetupUnixDialog) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PageSetupUnixDialog) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_page_setup_unix_dialog_get_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_print_settings](https://docs.gtk.org/gtk4/method.PageSetupUnixDialog.get_print_settings.html)
    pub fn getPrintSettings(self: *PageSetupUnixDialog) ?*gtk.PrintSettings {
        const cFn = @extern(*const fn (*PageSetupUnixDialog) callconv(.c) ?*gtk.PrintSettings, .{ .name = "gtk_page_setup_unix_dialog_get_print_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_page_setup](https://docs.gtk.org/gtk4/method.PageSetupUnixDialog.set_page_setup.html)
    pub fn setPageSetup(self: *PageSetupUnixDialog, _page_setup: *gtk.PageSetup) void {
        const cFn = @extern(*const fn (*PageSetupUnixDialog, *gtk.PageSetup) callconv(.c) void, .{ .name = "gtk_page_setup_unix_dialog_set_page_setup" });
        const ret = cFn(self, _page_setup);
        return ret;
    }
    /// method [set_print_settings](https://docs.gtk.org/gtk4/method.PageSetupUnixDialog.set_print_settings.html)
    pub fn setPrintSettings(self: *PageSetupUnixDialog, _print_settings: ?*gtk.PrintSettings) void {
        const cFn = @extern(*const fn (*PageSetupUnixDialog, ?*gtk.PrintSettings) callconv(.c) void, .{ .name = "gtk_page_setup_unix_dialog_set_print_settings" });
        const ret = cFn(self, _print_settings);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_page_setup_unix_dialog_get_type" });
        return cFn();
    }
};
/// Enum [PanDirection](https://docs.gtk.org/gtk4/enum.PanDirection.html)
pub const PanDirection = enum(u32) {
    left = 0,
    right = 1,
    up = 2,
    down = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_pan_direction_get_type" });
        return cFn();
    }
};
/// Class [Paned](https://docs.gtk.org/gtk4/class.Paned.html)
/// - property [end-child](https://docs.gtk.org/gtk4/property.Paned.end-child.html): (rw) `gtk.Widget`
/// - property [max-position](https://docs.gtk.org/gtk4/property.Paned.max-position.html): (r-) `i32`
/// - property [min-position](https://docs.gtk.org/gtk4/property.Paned.min-position.html): (r-) `i32`
/// - property [position](https://docs.gtk.org/gtk4/property.Paned.position.html): (rw) `i32`
/// - property [position-set](https://docs.gtk.org/gtk4/property.Paned.position-set.html): (rw) `bool`
/// - property [resize-end-child](https://docs.gtk.org/gtk4/property.Paned.resize-end-child.html): (rw) `bool`
/// - property [resize-start-child](https://docs.gtk.org/gtk4/property.Paned.resize-start-child.html): (rw) `bool`
/// - property [shrink-end-child](https://docs.gtk.org/gtk4/property.Paned.shrink-end-child.html): (rw) `bool`
/// - property [shrink-start-child](https://docs.gtk.org/gtk4/property.Paned.shrink-start-child.html): (rw) `bool`
/// - property [start-child](https://docs.gtk.org/gtk4/property.Paned.start-child.html): (rw) `gtk.Widget`
/// - property [wide-handle](https://docs.gtk.org/gtk4/property.Paned.wide-handle.html): (rw) `bool`
pub const Paned = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Paned.new.html)
    pub fn new(_orientation: gtk.Orientation) *Paned {
        const cFn = @extern(*const fn (gtk.Orientation) callconv(.c) *Paned, .{ .name = "gtk_paned_new" });
        const ret = cFn(_orientation);
        return ret;
    }
    /// method [get_end_child](https://docs.gtk.org/gtk4/method.Paned.get_end_child.html)
    pub fn getEndChild(self: *Paned) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Paned) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_paned_get_end_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.Paned.get_position.html)
    pub fn getPosition(self: *Paned) i32 {
        const cFn = @extern(*const fn (*Paned) callconv(.c) i32, .{ .name = "gtk_paned_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resize_end_child](https://docs.gtk.org/gtk4/method.Paned.get_resize_end_child.html)
    pub fn getResizeEndChild(self: *Paned) bool {
        const cFn = @extern(*const fn (*Paned) callconv(.c) bool, .{ .name = "gtk_paned_get_resize_end_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resize_start_child](https://docs.gtk.org/gtk4/method.Paned.get_resize_start_child.html)
    pub fn getResizeStartChild(self: *Paned) bool {
        const cFn = @extern(*const fn (*Paned) callconv(.c) bool, .{ .name = "gtk_paned_get_resize_start_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_shrink_end_child](https://docs.gtk.org/gtk4/method.Paned.get_shrink_end_child.html)
    pub fn getShrinkEndChild(self: *Paned) bool {
        const cFn = @extern(*const fn (*Paned) callconv(.c) bool, .{ .name = "gtk_paned_get_shrink_end_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_shrink_start_child](https://docs.gtk.org/gtk4/method.Paned.get_shrink_start_child.html)
    pub fn getShrinkStartChild(self: *Paned) bool {
        const cFn = @extern(*const fn (*Paned) callconv(.c) bool, .{ .name = "gtk_paned_get_shrink_start_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_start_child](https://docs.gtk.org/gtk4/method.Paned.get_start_child.html)
    pub fn getStartChild(self: *Paned) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Paned) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_paned_get_start_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wide_handle](https://docs.gtk.org/gtk4/method.Paned.get_wide_handle.html)
    pub fn getWideHandle(self: *Paned) bool {
        const cFn = @extern(*const fn (*Paned) callconv(.c) bool, .{ .name = "gtk_paned_get_wide_handle" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_end_child](https://docs.gtk.org/gtk4/method.Paned.set_end_child.html)
    pub fn setEndChild(self: *Paned, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Paned, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_paned_set_end_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_position](https://docs.gtk.org/gtk4/method.Paned.set_position.html)
    pub fn setPosition(self: *Paned, _position: i32) void {
        const cFn = @extern(*const fn (*Paned, i32) callconv(.c) void, .{ .name = "gtk_paned_set_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_resize_end_child](https://docs.gtk.org/gtk4/method.Paned.set_resize_end_child.html)
    pub fn setResizeEndChild(self: *Paned, _resize: bool) void {
        const cFn = @extern(*const fn (*Paned, bool) callconv(.c) void, .{ .name = "gtk_paned_set_resize_end_child" });
        const ret = cFn(self, _resize);
        return ret;
    }
    /// method [set_resize_start_child](https://docs.gtk.org/gtk4/method.Paned.set_resize_start_child.html)
    pub fn setResizeStartChild(self: *Paned, _resize: bool) void {
        const cFn = @extern(*const fn (*Paned, bool) callconv(.c) void, .{ .name = "gtk_paned_set_resize_start_child" });
        const ret = cFn(self, _resize);
        return ret;
    }
    /// method [set_shrink_end_child](https://docs.gtk.org/gtk4/method.Paned.set_shrink_end_child.html)
    pub fn setShrinkEndChild(self: *Paned, _resize: bool) void {
        const cFn = @extern(*const fn (*Paned, bool) callconv(.c) void, .{ .name = "gtk_paned_set_shrink_end_child" });
        const ret = cFn(self, _resize);
        return ret;
    }
    /// method [set_shrink_start_child](https://docs.gtk.org/gtk4/method.Paned.set_shrink_start_child.html)
    pub fn setShrinkStartChild(self: *Paned, _resize: bool) void {
        const cFn = @extern(*const fn (*Paned, bool) callconv(.c) void, .{ .name = "gtk_paned_set_shrink_start_child" });
        const ret = cFn(self, _resize);
        return ret;
    }
    /// method [set_start_child](https://docs.gtk.org/gtk4/method.Paned.set_start_child.html)
    pub fn setStartChild(self: *Paned, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Paned, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_paned_set_start_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_wide_handle](https://docs.gtk.org/gtk4/method.Paned.set_wide_handle.html)
    pub fn setWideHandle(self: *Paned, _wide: bool) void {
        const cFn = @extern(*const fn (*Paned, bool) callconv(.c) void, .{ .name = "gtk_paned_set_wide_handle" });
        const ret = cFn(self, _wide);
        return ret;
    }
    /// signal [accept-position](https://docs.gtk.org/gtk4/signal.Paned.accept-position.html)
    pub fn connectAcceptPosition(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("accept-position", handler, args, flags, &.{ bool, *Paned });
    }
    /// signal [cancel-position](https://docs.gtk.org/gtk4/signal.Paned.cancel-position.html)
    pub fn connectCancelPosition(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cancel-position", handler, args, flags, &.{ bool, *Paned });
    }
    /// signal [cycle-child-focus](https://docs.gtk.org/gtk4/signal.Paned.cycle-child-focus.html)
    pub fn connectCycleChildFocus(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cycle-child-focus", handler, args, flags, &.{ bool, *Paned, bool });
    }
    /// signal [cycle-handle-focus](https://docs.gtk.org/gtk4/signal.Paned.cycle-handle-focus.html)
    pub fn connectCycleHandleFocus(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cycle-handle-focus", handler, args, flags, &.{ bool, *Paned, bool });
    }
    /// signal [move-handle](https://docs.gtk.org/gtk4/signal.Paned.move-handle.html)
    pub fn connectMoveHandle(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-handle", handler, args, flags, &.{ bool, *Paned, gtk.ScrollType });
    }
    /// signal [toggle-handle-focus](https://docs.gtk.org/gtk4/signal.Paned.toggle-handle-focus.html)
    pub fn connectToggleHandleFocus(self: *Paned, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-handle-focus", handler, args, flags, &.{ bool, *Paned });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_paned_get_type" });
        return cFn();
    }
};
/// Struct [PaperSize](https://docs.gtk.org/gtk4/struct.PaperSize.html)
pub const PaperSize = opaque {
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PaperSize.new.html)
    pub fn new(_name: ?[*:0]const u8) *PaperSize {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new" });
        const ret = cFn(_name);
        return ret;
    }
    /// ctor [new_custom](https://docs.gtk.org/gtk4/ctor.PaperSize.new_custom.html)
    pub fn newCustom(_name: [*:0]const u8, _display_name: [*:0]const u8, _width: f64, _height: f64, _unit: gtk.Unit) *PaperSize {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, f64, f64, gtk.Unit) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new_custom" });
        const ret = cFn(_name, _display_name, _width, _height, _unit);
        return ret;
    }
    /// ctor [new_from_gvariant](https://docs.gtk.org/gtk4/ctor.PaperSize.new_from_gvariant.html)
    pub fn newFromGvariant(_variant: *glib.Variant) *PaperSize {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new_from_gvariant" });
        const ret = cFn(_variant);
        return ret;
    }
    /// ctor [new_from_ipp](https://docs.gtk.org/gtk4/ctor.PaperSize.new_from_ipp.html)
    pub fn newFromIpp(_ipp_name: [*:0]const u8, _width: f64, _height: f64) *PaperSize {
        const cFn = @extern(*const fn ([*:0]const u8, f64, f64) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new_from_ipp" });
        const ret = cFn(_ipp_name, _width, _height);
        return ret;
    }
    /// ctor [new_from_key_file](https://docs.gtk.org/gtk4/ctor.PaperSize.new_from_key_file.html)
    pub fn newFromKeyFile(_key_file: *glib.KeyFile, _group_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*PaperSize {
        const cFn = @extern(*const fn (*glib.KeyFile, ?[*:0]const u8, *?*core.Error) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new_from_key_file" });
        const ret = cFn(_key_file, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_ppd](https://docs.gtk.org/gtk4/ctor.PaperSize.new_from_ppd.html)
    pub fn newFromPpd(_ppd_name: [*:0]const u8, _ppd_display_name: [*:0]const u8, _width: f64, _height: f64) *PaperSize {
        const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, f64, f64) callconv(.c) *PaperSize, .{ .name = "gtk_paper_size_new_from_ppd" });
        const ret = cFn(_ppd_name, _ppd_display_name, _width, _height);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.PaperSize.copy.html)
    pub fn copy(self: *PaperSize) *gtk.PaperSize {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) *gtk.PaperSize, .{ .name = "gtk_paper_size_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gtk4/method.PaperSize.free.html)
    pub fn free(self: *PaperSize) void {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) void, .{ .name = "gtk_paper_size_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_bottom_margin](https://docs.gtk.org/gtk4/method.PaperSize.get_default_bottom_margin.html)
    pub fn getDefaultBottomMargin(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_default_bottom_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_default_left_margin](https://docs.gtk.org/gtk4/method.PaperSize.get_default_left_margin.html)
    pub fn getDefaultLeftMargin(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_default_left_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_default_right_margin](https://docs.gtk.org/gtk4/method.PaperSize.get_default_right_margin.html)
    pub fn getDefaultRightMargin(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_default_right_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_default_top_margin](https://docs.gtk.org/gtk4/method.PaperSize.get_default_top_margin.html)
    pub fn getDefaultTopMargin(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_default_top_margin" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_display_name](https://docs.gtk.org/gtk4/method.PaperSize.get_display_name.html)
    pub fn getDisplayName(self: *PaperSize) [*:0]u8 {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) [*:0]u8, .{ .name = "gtk_paper_size_get_display_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gtk4/method.PaperSize.get_height.html)
    pub fn getHeight(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_height" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.PaperSize.get_name.html)
    pub fn getName(self: *PaperSize) [*:0]u8 {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) [*:0]u8, .{ .name = "gtk_paper_size_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ppd_name](https://docs.gtk.org/gtk4/method.PaperSize.get_ppd_name.html)
    pub fn getPpdName(self: *PaperSize) [*:0]u8 {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) [*:0]u8, .{ .name = "gtk_paper_size_get_ppd_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gtk4/method.PaperSize.get_width.html)
    pub fn getWidth(self: *PaperSize, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PaperSize, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_paper_size_get_width" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [is_custom](https://docs.gtk.org/gtk4/method.PaperSize.is_custom.html)
    pub fn isCustom(self: *PaperSize) bool {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) bool, .{ .name = "gtk_paper_size_is_custom" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_equal](https://docs.gtk.org/gtk4/method.PaperSize.is_equal.html)
    pub fn isEqual(self: *PaperSize, _size2: *gtk.PaperSize) bool {
        const cFn = @extern(*const fn (*PaperSize, *gtk.PaperSize) callconv(.c) bool, .{ .name = "gtk_paper_size_is_equal" });
        const ret = cFn(self, _size2);
        return ret;
    }
    /// method [is_ipp](https://docs.gtk.org/gtk4/method.PaperSize.is_ipp.html)
    pub fn isIpp(self: *PaperSize) bool {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) bool, .{ .name = "gtk_paper_size_is_ipp" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/gtk4/method.PaperSize.set_size.html)
    pub fn setSize(self: *PaperSize, _width: f64, _height: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PaperSize, f64, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_paper_size_set_size" });
        const ret = cFn(self, _width, _height, _unit);
        return ret;
    }
    /// method [to_gvariant](https://docs.gtk.org/gtk4/method.PaperSize.to_gvariant.html)
    pub fn toGvariant(self: *PaperSize) *glib.Variant {
        const cFn = @extern(*const fn (*PaperSize) callconv(.c) *glib.Variant, .{ .name = "gtk_paper_size_to_gvariant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_key_file](https://docs.gtk.org/gtk4/method.PaperSize.to_key_file.html)
    pub fn toKeyFile(self: *PaperSize, _key_file: *glib.KeyFile, _group_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PaperSize, *glib.KeyFile, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_paper_size_to_key_file" });
        const ret = cFn(self, _key_file, _group_name);
        return ret;
    }
    /// type func [get_default](https://docs.gtk.org/gtk4/type_func.PaperSize.get_default.html)
    pub fn getDefault() [*:0]u8 {
        const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "gtk_paper_size_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_paper_sizes](https://docs.gtk.org/gtk4/type_func.PaperSize.get_paper_sizes.html)
    pub fn getPaperSizes(_include_custom: bool) ?*core.List {
        const cFn = @extern(*const fn (bool) callconv(.c) ?*core.List, .{ .name = "gtk_paper_size_get_paper_sizes" });
        const ret = cFn(_include_custom);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_paper_size_get_type" });
        return cFn();
    }
};
/// Class [ParamSpecExpression](https://docs.gtk.org/gtk4/class.ParamSpecExpression.html)
pub const ParamSpecExpression = extern struct {
    parent_instance: gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_param_expression_get_type" });
        return cFn();
    }
};
/// Class [PasswordEntry](https://docs.gtk.org/gtk4/class.PasswordEntry.html)
/// - property [activates-default](https://docs.gtk.org/gtk4/property.PasswordEntry.activates-default.html): (rw) `bool`
/// - property [extra-menu](https://docs.gtk.org/gtk4/property.PasswordEntry.extra-menu.html): (rw) `gio.MenuModel`
/// - property [placeholder-text](https://docs.gtk.org/gtk4/property.PasswordEntry.placeholder-text.html): (rw) `[*:0]const u8`
/// - property [show-peek-icon](https://docs.gtk.org/gtk4/property.PasswordEntry.show-peek-icon.html): (rw) `bool`
pub const PasswordEntry = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Editable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.PasswordEntryClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PasswordEntry.new.html)
    pub fn new() *PasswordEntry {
        const cFn = @extern(*const fn () callconv(.c) *PasswordEntry, .{ .name = "gtk_password_entry_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_extra_menu](https://docs.gtk.org/gtk4/method.PasswordEntry.get_extra_menu.html)
    pub fn getExtraMenu(self: *PasswordEntry) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*PasswordEntry) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_password_entry_get_extra_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_peek_icon](https://docs.gtk.org/gtk4/method.PasswordEntry.get_show_peek_icon.html)
    pub fn getShowPeekIcon(self: *PasswordEntry) bool {
        const cFn = @extern(*const fn (*PasswordEntry) callconv(.c) bool, .{ .name = "gtk_password_entry_get_show_peek_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_extra_menu](https://docs.gtk.org/gtk4/method.PasswordEntry.set_extra_menu.html)
    pub fn setExtraMenu(self: *PasswordEntry, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*PasswordEntry, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_password_entry_set_extra_menu" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_show_peek_icon](https://docs.gtk.org/gtk4/method.PasswordEntry.set_show_peek_icon.html)
    pub fn setShowPeekIcon(self: *PasswordEntry, _show_peek_icon: bool) void {
        const cFn = @extern(*const fn (*PasswordEntry, bool) callconv(.c) void, .{ .name = "gtk_password_entry_set_show_peek_icon" });
        const ret = cFn(self, _show_peek_icon);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.PasswordEntry.activate.html)
    pub fn connectActivate(self: *PasswordEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *PasswordEntry });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_password_entry_get_type" });
        return cFn();
    }
};
/// Class [PasswordEntryBuffer](https://docs.gtk.org/gtk4/class.PasswordEntryBuffer.html)
pub const PasswordEntryBuffer = opaque {
    pub const Parent = gtk.EntryBuffer;
    pub const Class = gtk.PasswordEntryBufferClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PasswordEntryBuffer.new.html)
    pub fn new() *PasswordEntryBuffer {
        const cFn = @extern(*const fn () callconv(.c) *PasswordEntryBuffer, .{ .name = "gtk_password_entry_buffer_new" });
        const ret = cFn();
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_password_entry_buffer_get_type" });
        return cFn();
    }
};
pub const PasswordEntryBufferClass = extern struct {
    parent_class: gtk.EntryBufferClass,
};
pub const PasswordEntryClass = opaque {};
/// Flags [PickFlags](https://docs.gtk.org/gtk4/flags.PickFlags.html)
pub const PickFlags = packed struct(u32) {
    insensitive: bool = false,
    non_targetable: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_pick_flags_get_type" });
        return cFn();
    }
};
/// Class [Picture](https://docs.gtk.org/gtk4/class.Picture.html)
/// - property [alternative-text](https://docs.gtk.org/gtk4/property.Picture.alternative-text.html): (rw) `[*:0]const u8`
/// - property [can-shrink](https://docs.gtk.org/gtk4/property.Picture.can-shrink.html): (rw) `bool`
/// - property [content-fit](https://docs.gtk.org/gtk4/property.Picture.content-fit.html): (rw) `gtk.ContentFit`
/// - property [file](https://docs.gtk.org/gtk4/property.Picture.file.html): (rw) `gio.File`
/// - property [keep-aspect-ratio](https://docs.gtk.org/gtk4/property.Picture.keep-aspect-ratio.html): (rw) `bool`
/// - property [paintable](https://docs.gtk.org/gtk4/property.Picture.paintable.html): (rw) `gdk.Paintable`
pub const Picture = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.PictureClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Picture.new.html)
    pub fn new() *Picture {
        const cFn = @extern(*const fn () callconv(.c) *Picture, .{ .name = "gtk_picture_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_for_file](https://docs.gtk.org/gtk4/ctor.Picture.new_for_file.html)
    pub fn newForFile(_file: ?*gio.File) *Picture {
        const cFn = @extern(*const fn (?*gio.File) callconv(.c) *Picture, .{ .name = "gtk_picture_new_for_file" });
        const ret = cFn(_file);
        return ret;
    }
    /// ctor [new_for_filename](https://docs.gtk.org/gtk4/ctor.Picture.new_for_filename.html)
    pub fn newForFilename(_filename: ?[*:0]const u8) *Picture {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Picture, .{ .name = "gtk_picture_new_for_filename" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_for_paintable](https://docs.gtk.org/gtk4/ctor.Picture.new_for_paintable.html)
    pub fn newForPaintable(_paintable: ?*gdk.Paintable) *Picture {
        const cFn = @extern(*const fn (?*gdk.Paintable) callconv(.c) *Picture, .{ .name = "gtk_picture_new_for_paintable" });
        const ret = cFn(_paintable);
        return ret;
    }
    /// Deprecated:
    /// ctor [new_for_pixbuf](https://docs.gtk.org/gtk4/ctor.Picture.new_for_pixbuf.html)
    pub const newForPixbuf = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newForPixbuf(_pixbuf: ?*gdk_pixbuf.Pixbuf) *Picture {
            const cFn = @extern(*const fn (?*gdk_pixbuf.Pixbuf) callconv(.c) *Picture, .{ .name = "gtk_picture_new_for_pixbuf" });
            const ret = cFn(_pixbuf);
            return ret;
        }
    }.newForPixbuf;
    /// ctor [new_for_resource](https://docs.gtk.org/gtk4/ctor.Picture.new_for_resource.html)
    pub fn newForResource(_resource_path: ?[*:0]const u8) *Picture {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Picture, .{ .name = "gtk_picture_new_for_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// method [get_alternative_text](https://docs.gtk.org/gtk4/method.Picture.get_alternative_text.html)
    pub fn getAlternativeText(self: *Picture) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Picture) callconv(.c) ?[*:0]u8, .{ .name = "gtk_picture_get_alternative_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_shrink](https://docs.gtk.org/gtk4/method.Picture.get_can_shrink.html)
    pub fn getCanShrink(self: *Picture) bool {
        const cFn = @extern(*const fn (*Picture) callconv(.c) bool, .{ .name = "gtk_picture_get_can_shrink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_content_fit](https://docs.gtk.org/gtk4/method.Picture.get_content_fit.html)
    pub fn getContentFit(self: *Picture) gtk.ContentFit {
        const cFn = @extern(*const fn (*Picture) callconv(.c) gtk.ContentFit, .{ .name = "gtk_picture_get_content_fit" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.Picture.get_file.html)
    pub fn getFile(self: *Picture) ?*gio.File {
        const cFn = @extern(*const fn (*Picture) callconv(.c) ?*gio.File, .{ .name = "gtk_picture_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_keep_aspect_ratio](https://docs.gtk.org/gtk4/method.Picture.get_keep_aspect_ratio.html)
    pub const getKeepAspectRatio = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getKeepAspectRatio(self: *Picture) bool {
            const cFn = @extern(*const fn (*Picture) callconv(.c) bool, .{ .name = "gtk_picture_get_keep_aspect_ratio" });
            const ret = cFn(self);
            return ret;
        }
    }.getKeepAspectRatio;
    /// method [get_paintable](https://docs.gtk.org/gtk4/method.Picture.get_paintable.html)
    pub fn getPaintable(self: *Picture) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*Picture) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_picture_get_paintable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_alternative_text](https://docs.gtk.org/gtk4/method.Picture.set_alternative_text.html)
    pub fn setAlternativeText(self: *Picture, _alternative_text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Picture, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_picture_set_alternative_text" });
        const ret = cFn(self, _alternative_text);
        return ret;
    }
    /// method [set_can_shrink](https://docs.gtk.org/gtk4/method.Picture.set_can_shrink.html)
    pub fn setCanShrink(self: *Picture, _can_shrink: bool) void {
        const cFn = @extern(*const fn (*Picture, bool) callconv(.c) void, .{ .name = "gtk_picture_set_can_shrink" });
        const ret = cFn(self, _can_shrink);
        return ret;
    }
    /// method [set_content_fit](https://docs.gtk.org/gtk4/method.Picture.set_content_fit.html)
    pub fn setContentFit(self: *Picture, _content_fit: gtk.ContentFit) void {
        const cFn = @extern(*const fn (*Picture, gtk.ContentFit) callconv(.c) void, .{ .name = "gtk_picture_set_content_fit" });
        const ret = cFn(self, _content_fit);
        return ret;
    }
    /// method [set_file](https://docs.gtk.org/gtk4/method.Picture.set_file.html)
    pub fn setFile(self: *Picture, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*Picture, ?*gio.File) callconv(.c) void, .{ .name = "gtk_picture_set_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_filename](https://docs.gtk.org/gtk4/method.Picture.set_filename.html)
    pub fn setFilename(self: *Picture, _filename: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Picture, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_picture_set_filename" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// Deprecated:
    /// method [set_keep_aspect_ratio](https://docs.gtk.org/gtk4/method.Picture.set_keep_aspect_ratio.html)
    pub const setKeepAspectRatio = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setKeepAspectRatio(self: *Picture, _keep_aspect_ratio: bool) void {
            const cFn = @extern(*const fn (*Picture, bool) callconv(.c) void, .{ .name = "gtk_picture_set_keep_aspect_ratio" });
            const ret = cFn(self, _keep_aspect_ratio);
            return ret;
        }
    }.setKeepAspectRatio;
    /// method [set_paintable](https://docs.gtk.org/gtk4/method.Picture.set_paintable.html)
    pub fn setPaintable(self: *Picture, _paintable: ?*gdk.Paintable) void {
        const cFn = @extern(*const fn (*Picture, ?*gdk.Paintable) callconv(.c) void, .{ .name = "gtk_picture_set_paintable" });
        const ret = cFn(self, _paintable);
        return ret;
    }
    /// Deprecated:
    /// method [set_pixbuf](https://docs.gtk.org/gtk4/method.Picture.set_pixbuf.html)
    pub const setPixbuf = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setPixbuf(self: *Picture, _pixbuf: ?*gdk_pixbuf.Pixbuf) void {
            const cFn = @extern(*const fn (*Picture, ?*gdk_pixbuf.Pixbuf) callconv(.c) void, .{ .name = "gtk_picture_set_pixbuf" });
            const ret = cFn(self, _pixbuf);
            return ret;
        }
    }.setPixbuf;
    /// method [set_resource](https://docs.gtk.org/gtk4/method.Picture.set_resource.html)
    pub fn setResource(self: *Picture, _resource_path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Picture, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_picture_set_resource" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_picture_get_type" });
        return cFn();
    }
};
pub const PictureClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Enum [PolicyType](https://docs.gtk.org/gtk4/enum.PolicyType.html)
pub const PolicyType = enum(u32) {
    always = 0,
    automatic = 1,
    never = 2,
    external = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_policy_type_get_type" });
        return cFn();
    }
};
/// Class [Popover](https://docs.gtk.org/gtk4/class.Popover.html)
/// - property [autohide](https://docs.gtk.org/gtk4/property.Popover.autohide.html): (rw) `bool`
/// - property [cascade-popdown](https://docs.gtk.org/gtk4/property.Popover.cascade-popdown.html): (rw) `bool`
/// - property [child](https://docs.gtk.org/gtk4/property.Popover.child.html): (rw) `gtk.Widget`
/// - property [default-widget](https://docs.gtk.org/gtk4/property.Popover.default-widget.html): (rw) `gtk.Widget`
/// - property [has-arrow](https://docs.gtk.org/gtk4/property.Popover.has-arrow.html): (rw) `bool`
/// - property [mnemonics-visible](https://docs.gtk.org/gtk4/property.Popover.mnemonics-visible.html): (rw) `bool`
/// - property [pointing-to](https://docs.gtk.org/gtk4/property.Popover.pointing-to.html): (rw) `gdk.Rectangle`
/// - property [position](https://docs.gtk.org/gtk4/property.Popover.position.html): (rw) `gtk.PositionType`
pub const Popover = extern struct {
    parent: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.ShortcutManager };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.PopoverClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Popover.new.html)
    pub fn new() *Popover {
        const cFn = @extern(*const fn () callconv(.c) *Popover, .{ .name = "gtk_popover_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_autohide](https://docs.gtk.org/gtk4/method.Popover.get_autohide.html)
    pub fn getAutohide(self: *Popover) bool {
        const cFn = @extern(*const fn (*Popover) callconv(.c) bool, .{ .name = "gtk_popover_get_autohide" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cascade_popdown](https://docs.gtk.org/gtk4/method.Popover.get_cascade_popdown.html)
    pub fn getCascadePopdown(self: *Popover) bool {
        const cFn = @extern(*const fn (*Popover) callconv(.c) bool, .{ .name = "gtk_popover_get_cascade_popdown" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Popover.get_child.html)
    pub fn getChild(self: *Popover) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Popover) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_popover_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_arrow](https://docs.gtk.org/gtk4/method.Popover.get_has_arrow.html)
    pub fn getHasArrow(self: *Popover) bool {
        const cFn = @extern(*const fn (*Popover) callconv(.c) bool, .{ .name = "gtk_popover_get_has_arrow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mnemonics_visible](https://docs.gtk.org/gtk4/method.Popover.get_mnemonics_visible.html)
    pub fn getMnemonicsVisible(self: *Popover) bool {
        const cFn = @extern(*const fn (*Popover) callconv(.c) bool, .{ .name = "gtk_popover_get_mnemonics_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gtk4/method.Popover.get_offset.html)
    pub fn getOffset(self: *Popover) struct {
        ret: void,
        x_offset: i32,
        y_offset: i32,
    } {
        var x_offset_out: i32 = undefined;
        const _x_offset = &x_offset_out;
        var y_offset_out: i32 = undefined;
        const _y_offset = &y_offset_out;
        const cFn = @extern(*const fn (*Popover, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_popover_get_offset" });
        const ret = cFn(self, _x_offset, _y_offset);
        return .{ .ret = ret, .x_offset = x_offset_out, .y_offset = y_offset_out };
    }
    /// method [get_pointing_to](https://docs.gtk.org/gtk4/method.Popover.get_pointing_to.html)
    pub fn getPointingTo(self: *Popover, _rect: *gdk.Rectangle) bool {
        const cFn = @extern(*const fn (*Popover, *gdk.Rectangle) callconv(.c) bool, .{ .name = "gtk_popover_get_pointing_to" });
        const ret = cFn(self, _rect);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.Popover.get_position.html)
    pub fn getPosition(self: *Popover) gtk.PositionType {
        const cFn = @extern(*const fn (*Popover) callconv(.c) gtk.PositionType, .{ .name = "gtk_popover_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [popdown](https://docs.gtk.org/gtk4/method.Popover.popdown.html)
    pub fn popdown(self: *Popover) void {
        const cFn = @extern(*const fn (*Popover) callconv(.c) void, .{ .name = "gtk_popover_popdown" });
        const ret = cFn(self);
        return ret;
    }
    /// method [popup](https://docs.gtk.org/gtk4/method.Popover.popup.html)
    pub fn popup(self: *Popover) void {
        const cFn = @extern(*const fn (*Popover) callconv(.c) void, .{ .name = "gtk_popover_popup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [present](https://docs.gtk.org/gtk4/method.Popover.present.html)
    pub fn present(self: *Popover) void {
        const cFn = @extern(*const fn (*Popover) callconv(.c) void, .{ .name = "gtk_popover_present" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_autohide](https://docs.gtk.org/gtk4/method.Popover.set_autohide.html)
    pub fn setAutohide(self: *Popover, _autohide: bool) void {
        const cFn = @extern(*const fn (*Popover, bool) callconv(.c) void, .{ .name = "gtk_popover_set_autohide" });
        const ret = cFn(self, _autohide);
        return ret;
    }
    /// method [set_cascade_popdown](https://docs.gtk.org/gtk4/method.Popover.set_cascade_popdown.html)
    pub fn setCascadePopdown(self: *Popover, _cascade_popdown: bool) void {
        const cFn = @extern(*const fn (*Popover, bool) callconv(.c) void, .{ .name = "gtk_popover_set_cascade_popdown" });
        const ret = cFn(self, _cascade_popdown);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Popover.set_child.html)
    pub fn setChild(self: *Popover, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Popover, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_popover_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_default_widget](https://docs.gtk.org/gtk4/method.Popover.set_default_widget.html)
    pub fn setDefaultWidget(self: *Popover, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Popover, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_popover_set_default_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_has_arrow](https://docs.gtk.org/gtk4/method.Popover.set_has_arrow.html)
    pub fn setHasArrow(self: *Popover, _has_arrow: bool) void {
        const cFn = @extern(*const fn (*Popover, bool) callconv(.c) void, .{ .name = "gtk_popover_set_has_arrow" });
        const ret = cFn(self, _has_arrow);
        return ret;
    }
    /// method [set_mnemonics_visible](https://docs.gtk.org/gtk4/method.Popover.set_mnemonics_visible.html)
    pub fn setMnemonicsVisible(self: *Popover, _mnemonics_visible: bool) void {
        const cFn = @extern(*const fn (*Popover, bool) callconv(.c) void, .{ .name = "gtk_popover_set_mnemonics_visible" });
        const ret = cFn(self, _mnemonics_visible);
        return ret;
    }
    /// method [set_offset](https://docs.gtk.org/gtk4/method.Popover.set_offset.html)
    pub fn setOffset(self: *Popover, _x_offset: i32, _y_offset: i32) void {
        const cFn = @extern(*const fn (*Popover, i32, i32) callconv(.c) void, .{ .name = "gtk_popover_set_offset" });
        const ret = cFn(self, _x_offset, _y_offset);
        return ret;
    }
    /// method [set_pointing_to](https://docs.gtk.org/gtk4/method.Popover.set_pointing_to.html)
    pub fn setPointingTo(self: *Popover, _rect: ?*gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Popover, ?*gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_popover_set_pointing_to" });
        const ret = cFn(self, _rect);
        return ret;
    }
    /// method [set_position](https://docs.gtk.org/gtk4/method.Popover.set_position.html)
    pub fn setPosition(self: *Popover, _position: gtk.PositionType) void {
        const cFn = @extern(*const fn (*Popover, gtk.PositionType) callconv(.c) void, .{ .name = "gtk_popover_set_position" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// vfunc [activate_default](https://docs.gtk.org/gtk4/vfunc.Popover.activate_default.html)
    pub fn activateDefaultV(self: *Popover) void {
        const class: *PopoverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_default.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [closed](https://docs.gtk.org/gtk4/vfunc.Popover.closed.html)
    pub fn closedV(self: *Popover) void {
        const class: *PopoverClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.closed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate-default](https://docs.gtk.org/gtk4/signal.Popover.activate-default.html)
    pub fn connectActivateDefault(self: *Popover, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-default", handler, args, flags, &.{ void, *Popover });
    }
    /// signal [closed](https://docs.gtk.org/gtk4/signal.Popover.closed.html)
    pub fn connectClosed(self: *Popover, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("closed", handler, args, flags, &.{ void, *Popover });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_popover_get_type" });
        return cFn();
    }
};
pub const PopoverClass = extern struct {
    parent_class: gtk.WidgetClass,
    closed: ?*const fn (_popover: *gtk.Popover) callconv(.c) void,
    activate_default: ?*const fn (_popover: *gtk.Popover) callconv(.c) void,
    reserved: [8]?*anyopaque,
};
/// Class [PopoverMenu](https://docs.gtk.org/gtk4/class.PopoverMenu.html)
/// - property [flags](https://docs.gtk.org/gtk4/property.PopoverMenu.flags.html): (rw) `gtk.PopoverMenuFlags`
/// - property [menu-model](https://docs.gtk.org/gtk4/property.PopoverMenu.menu-model.html): (rw) `gio.MenuModel`
/// - property [visible-submenu](https://docs.gtk.org/gtk4/property.PopoverMenu.visible-submenu.html): (rw) `[*:0]const u8`
pub const PopoverMenu = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.ShortcutManager };
    pub const Parent = gtk.Popover;
    /// ctor [new_from_model](https://docs.gtk.org/gtk4/ctor.PopoverMenu.new_from_model.html)
    pub fn newFromModel(_model: ?*gio.MenuModel) *PopoverMenu {
        const cFn = @extern(*const fn (?*gio.MenuModel) callconv(.c) *PopoverMenu, .{ .name = "gtk_popover_menu_new_from_model" });
        const ret = cFn(_model);
        return ret;
    }
    /// ctor [new_from_model_full](https://docs.gtk.org/gtk4/ctor.PopoverMenu.new_from_model_full.html)
    pub fn newFromModelFull(_model: *gio.MenuModel, _flags: gtk.PopoverMenuFlags) *PopoverMenu {
        const cFn = @extern(*const fn (*gio.MenuModel, gtk.PopoverMenuFlags) callconv(.c) *PopoverMenu, .{ .name = "gtk_popover_menu_new_from_model_full" });
        const ret = cFn(_model, _flags);
        return ret;
    }
    /// method [add_child](https://docs.gtk.org/gtk4/method.PopoverMenu.add_child.html)
    pub fn addChild(self: *PopoverMenu, _child: *gtk.Widget, _id: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PopoverMenu, *gtk.Widget, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_popover_menu_add_child" });
        const ret = cFn(self, _child, _id);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gtk4/method.PopoverMenu.get_flags.html)
    pub fn getFlags(self: *PopoverMenu) gtk.PopoverMenuFlags {
        const cFn = @extern(*const fn (*PopoverMenu) callconv(.c) gtk.PopoverMenuFlags, .{ .name = "gtk_popover_menu_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_menu_model](https://docs.gtk.org/gtk4/method.PopoverMenu.get_menu_model.html)
    pub fn getMenuModel(self: *PopoverMenu) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*PopoverMenu) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_popover_menu_get_menu_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_child](https://docs.gtk.org/gtk4/method.PopoverMenu.remove_child.html)
    pub fn removeChild(self: *PopoverMenu, _child: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*PopoverMenu, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_popover_menu_remove_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gtk4/method.PopoverMenu.set_flags.html)
    pub fn setFlags(self: *PopoverMenu, _flags: gtk.PopoverMenuFlags) void {
        const cFn = @extern(*const fn (*PopoverMenu, gtk.PopoverMenuFlags) callconv(.c) void, .{ .name = "gtk_popover_menu_set_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// method [set_menu_model](https://docs.gtk.org/gtk4/method.PopoverMenu.set_menu_model.html)
    pub fn setMenuModel(self: *PopoverMenu, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*PopoverMenu, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_popover_menu_set_menu_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_popover_menu_get_type" });
        return cFn();
    }
};
/// Class [PopoverMenuBar](https://docs.gtk.org/gtk4/class.PopoverMenuBar.html)
/// - property [menu-model](https://docs.gtk.org/gtk4/property.PopoverMenuBar.menu-model.html): (rw) `gio.MenuModel`
pub const PopoverMenuBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new_from_model](https://docs.gtk.org/gtk4/ctor.PopoverMenuBar.new_from_model.html)
    pub fn newFromModel(_model: ?*gio.MenuModel) *PopoverMenuBar {
        const cFn = @extern(*const fn (?*gio.MenuModel) callconv(.c) *PopoverMenuBar, .{ .name = "gtk_popover_menu_bar_new_from_model" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [add_child](https://docs.gtk.org/gtk4/method.PopoverMenuBar.add_child.html)
    pub fn addChild(self: *PopoverMenuBar, _child: *gtk.Widget, _id: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PopoverMenuBar, *gtk.Widget, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_popover_menu_bar_add_child" });
        const ret = cFn(self, _child, _id);
        return ret;
    }
    /// method [get_menu_model](https://docs.gtk.org/gtk4/method.PopoverMenuBar.get_menu_model.html)
    pub fn getMenuModel(self: *PopoverMenuBar) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*PopoverMenuBar) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_popover_menu_bar_get_menu_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_child](https://docs.gtk.org/gtk4/method.PopoverMenuBar.remove_child.html)
    pub fn removeChild(self: *PopoverMenuBar, _child: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*PopoverMenuBar, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_popover_menu_bar_remove_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_menu_model](https://docs.gtk.org/gtk4/method.PopoverMenuBar.set_menu_model.html)
    pub fn setMenuModel(self: *PopoverMenuBar, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*PopoverMenuBar, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_popover_menu_bar_set_menu_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_popover_menu_bar_get_type" });
        return cFn();
    }
};
/// Flags [PopoverMenuFlags](https://docs.gtk.org/gtk4/flags.PopoverMenuFlags.html)
pub const PopoverMenuFlags = packed struct(u32) {
    nested: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_popover_menu_flags_get_type" });
        return cFn();
    }
};
/// Enum [PositionType](https://docs.gtk.org/gtk4/enum.PositionType.html)
pub const PositionType = enum(u32) {
    left = 0,
    right = 1,
    top = 2,
    bottom = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_position_type_get_type" });
        return cFn();
    }
};
/// Struct [PrintBackend](https://docs.gtk.org/gtk4/struct.PrintBackend.html)
pub const PrintBackend = opaque {};
/// Flags [PrintCapabilities](https://docs.gtk.org/gtk4/flags.PrintCapabilities.html)
pub const PrintCapabilities = packed struct(u32) {
    page_set: bool = false,
    copies: bool = false,
    collate: bool = false,
    reverse: bool = false,
    scale: bool = false,
    generate_pdf: bool = false,
    generate_ps: bool = false,
    preview: bool = false,
    number_up: bool = false,
    number_up_layout: bool = false,
    _: u22 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_capabilities_get_type" });
        return cFn();
    }
};
/// Class [PrintContext](https://docs.gtk.org/gtk4/class.PrintContext.html)
pub const PrintContext = opaque {
    pub const Parent = gobject.Object;
    /// method [create_pango_context](https://docs.gtk.org/gtk4/method.PrintContext.create_pango_context.html)
    pub fn createPangoContext(self: *PrintContext) *pango.Context {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) *pango.Context, .{ .name = "gtk_print_context_create_pango_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_pango_layout](https://docs.gtk.org/gtk4/method.PrintContext.create_pango_layout.html)
    pub fn createPangoLayout(self: *PrintContext) *pango.Layout {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) *pango.Layout, .{ .name = "gtk_print_context_create_pango_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cairo_context](https://docs.gtk.org/gtk4/method.PrintContext.get_cairo_context.html)
    pub fn getCairoContext(self: *PrintContext) *cairo.Context {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) *cairo.Context, .{ .name = "gtk_print_context_get_cairo_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dpi_x](https://docs.gtk.org/gtk4/method.PrintContext.get_dpi_x.html)
    pub fn getDpiX(self: *PrintContext) f64 {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) f64, .{ .name = "gtk_print_context_get_dpi_x" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dpi_y](https://docs.gtk.org/gtk4/method.PrintContext.get_dpi_y.html)
    pub fn getDpiY(self: *PrintContext) f64 {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) f64, .{ .name = "gtk_print_context_get_dpi_y" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hard_margins](https://docs.gtk.org/gtk4/method.PrintContext.get_hard_margins.html)
    pub fn getHardMargins(self: *PrintContext) ?struct {
        top: f64,
        bottom: f64,
        left: f64,
        right: f64,
    } {
        var top_out: f64 = undefined;
        const _top = &top_out;
        var bottom_out: f64 = undefined;
        const _bottom = &bottom_out;
        var left_out: f64 = undefined;
        const _left = &left_out;
        var right_out: f64 = undefined;
        const _right = &right_out;
        const cFn = @extern(*const fn (*PrintContext, *f64, *f64, *f64, *f64) callconv(.c) bool, .{ .name = "gtk_print_context_get_hard_margins" });
        const ret = cFn(self, _top, _bottom, _left, _right);
        if (!ret) return null;
        return .{ .top = top_out, .bottom = bottom_out, .left = left_out, .right = right_out };
    }
    /// method [get_height](https://docs.gtk.org/gtk4/method.PrintContext.get_height.html)
    pub fn getHeight(self: *PrintContext) f64 {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) f64, .{ .name = "gtk_print_context_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_setup](https://docs.gtk.org/gtk4/method.PrintContext.get_page_setup.html)
    pub fn getPageSetup(self: *PrintContext) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_print_context_get_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pango_fontmap](https://docs.gtk.org/gtk4/method.PrintContext.get_pango_fontmap.html)
    pub fn getPangoFontmap(self: *PrintContext) *pango.FontMap {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) *pango.FontMap, .{ .name = "gtk_print_context_get_pango_fontmap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gtk4/method.PrintContext.get_width.html)
    pub fn getWidth(self: *PrintContext) f64 {
        const cFn = @extern(*const fn (*PrintContext) callconv(.c) f64, .{ .name = "gtk_print_context_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_cairo_context](https://docs.gtk.org/gtk4/method.PrintContext.set_cairo_context.html)
    pub fn setCairoContext(self: *PrintContext, _cr: *cairo.Context, _dpi_x: f64, _dpi_y: f64) void {
        const cFn = @extern(*const fn (*PrintContext, *cairo.Context, f64, f64) callconv(.c) void, .{ .name = "gtk_print_context_set_cairo_context" });
        const ret = cFn(self, _cr, _dpi_x, _dpi_y);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_context_get_type" });
        return cFn();
    }
};
/// Class [PrintDialog](https://docs.gtk.org/gtk4/class.PrintDialog.html)
/// - property [accept-label](https://docs.gtk.org/gtk4/property.PrintDialog.accept-label.html): (rw) `[*:0]const u8`
/// - property [modal](https://docs.gtk.org/gtk4/property.PrintDialog.modal.html): (rw) `bool`
/// - property [page-setup](https://docs.gtk.org/gtk4/property.PrintDialog.page-setup.html): (rw) `gtk.PageSetup`
/// - property [print-settings](https://docs.gtk.org/gtk4/property.PrintDialog.print-settings.html): (rw) `gtk.PrintSettings`
/// - property [title](https://docs.gtk.org/gtk4/property.PrintDialog.title.html): (rw) `[*:0]const u8`
pub const PrintDialog = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.PrintDialogClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PrintDialog.new.html)
    pub fn new() *PrintDialog {
        const cFn = @extern(*const fn () callconv(.c) *PrintDialog, .{ .name = "gtk_print_dialog_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_accept_label](https://docs.gtk.org/gtk4/method.PrintDialog.get_accept_label.html)
    pub fn getAcceptLabel(self: *PrintDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*PrintDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_print_dialog_get_accept_label" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.PrintDialog.get_modal.html)
    pub fn getModal(self: *PrintDialog) bool {
        const cFn = @extern(*const fn (*PrintDialog) callconv(.c) bool, .{ .name = "gtk_print_dialog_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_setup](https://docs.gtk.org/gtk4/method.PrintDialog.get_page_setup.html)
    pub fn getPageSetup(self: *PrintDialog) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PrintDialog) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_print_dialog_get_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_print_settings](https://docs.gtk.org/gtk4/method.PrintDialog.get_print_settings.html)
    pub fn getPrintSettings(self: *PrintDialog) *gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintDialog) callconv(.c) *gtk.PrintSettings, .{ .name = "gtk_print_dialog_get_print_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.PrintDialog.get_title.html)
    pub fn getTitle(self: *PrintDialog) [*:0]u8 {
        const cFn = @extern(*const fn (*PrintDialog) callconv(.c) [*:0]u8, .{ .name = "gtk_print_dialog_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gtk4/method.PrintDialog.print.html)
    pub fn print(self: *PrintDialog, _parent: ?*gtk.Window, _setup: ?*gtk.PrintSetup, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*PrintDialog, ?*gtk.Window, ?*gtk.PrintSetup, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_print_dialog_print" });
        const ret = cFn(self, _parent, _setup, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [print_file](https://docs.gtk.org/gtk4/method.PrintDialog.print_file.html)
    pub fn printFile(self: *PrintDialog, _parent: ?*gtk.Window, _setup: ?*gtk.PrintSetup, _file: *gio.File, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*PrintDialog, ?*gtk.Window, ?*gtk.PrintSetup, *gio.File, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_print_dialog_print_file" });
        const ret = cFn(self, _parent, _setup, _file, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [print_file_finish](https://docs.gtk.org/gtk4/method.PrintDialog.print_file_finish.html)
    pub fn printFileFinish(self: *PrintDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_dialog_print_file_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [print_finish](https://docs.gtk.org/gtk4/method.PrintDialog.print_finish.html)
    pub fn printFinish(self: *PrintDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gio.OutputStream {
        const cFn = @extern(*const fn (*PrintDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gio.OutputStream, .{ .name = "gtk_print_dialog_print_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_accept_label](https://docs.gtk.org/gtk4/method.PrintDialog.set_accept_label.html)
    pub fn setAcceptLabel(self: *PrintDialog, _accept_label: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_dialog_set_accept_label" });
        const ret = cFn(self, _accept_label);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.PrintDialog.set_modal.html)
    pub fn setModal(self: *PrintDialog, _modal: bool) void {
        const cFn = @extern(*const fn (*PrintDialog, bool) callconv(.c) void, .{ .name = "gtk_print_dialog_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_page_setup](https://docs.gtk.org/gtk4/method.PrintDialog.set_page_setup.html)
    pub fn setPageSetup(self: *PrintDialog, _page_setup: *gtk.PageSetup) void {
        const cFn = @extern(*const fn (*PrintDialog, *gtk.PageSetup) callconv(.c) void, .{ .name = "gtk_print_dialog_set_page_setup" });
        const ret = cFn(self, _page_setup);
        return ret;
    }
    /// method [set_print_settings](https://docs.gtk.org/gtk4/method.PrintDialog.set_print_settings.html)
    pub fn setPrintSettings(self: *PrintDialog, _print_settings: *gtk.PrintSettings) void {
        const cFn = @extern(*const fn (*PrintDialog, *gtk.PrintSettings) callconv(.c) void, .{ .name = "gtk_print_dialog_set_print_settings" });
        const ret = cFn(self, _print_settings);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.PrintDialog.set_title.html)
    pub fn setTitle(self: *PrintDialog, _title: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintDialog, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_dialog_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [setup](https://docs.gtk.org/gtk4/method.PrintDialog.setup.html)
    pub fn setup(self: *PrintDialog, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*PrintDialog, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_print_dialog_setup" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [setup_finish](https://docs.gtk.org/gtk4/method.PrintDialog.setup_finish.html)
    pub fn setupFinish(self: *PrintDialog, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!?*gtk.PrintSetup {
        const cFn = @extern(*const fn (*PrintDialog, *gio.AsyncResult, *?*core.Error) callconv(.c) ?*gtk.PrintSetup, .{ .name = "gtk_print_dialog_setup_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_dialog_get_type" });
        return cFn();
    }
};
pub const PrintDialogClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [PrintDuplex](https://docs.gtk.org/gtk4/enum.PrintDuplex.html)
pub const PrintDuplex = enum(u32) {
    simplex = 0,
    horizontal = 1,
    vertical = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_duplex_get_type" });
        return cFn();
    }
};
/// Error [PrintError](https://docs.gtk.org/gtk4/error.PrintError.html)
pub const PrintError = enum(u32) {
    general = 0,
    internal_error = 1,
    nomem = 2,
    invalid_file = 3,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.PrintError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_print_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_error_get_type" });
        return cFn();
    }
};
/// Class [PrintJob](https://docs.gtk.org/gtk4/class.PrintJob.html)
/// - property [page-setup](https://docs.gtk.org/gtk4/property.PrintJob.page-setup.html): (r-) `gtk.PageSetup`
/// - property [printer](https://docs.gtk.org/gtk4/property.PrintJob.printer.html): (r-) `gtk.Printer`
/// - property [settings](https://docs.gtk.org/gtk4/property.PrintJob.settings.html): (r-) `gtk.PrintSettings`
/// - property [title](https://docs.gtk.org/gtk4/property.PrintJob.title.html): (r-) `[*:0]const u8`
/// - property [track-print-status](https://docs.gtk.org/gtk4/property.PrintJob.track-print-status.html): (rw) `bool`
pub const PrintJob = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PrintJob.new.html)
    pub fn new(_title: [*:0]const u8, _printer: *gtk.Printer, _settings: *gtk.PrintSettings, _page_setup: *gtk.PageSetup) *PrintJob {
        const cFn = @extern(*const fn ([*:0]const u8, *gtk.Printer, *gtk.PrintSettings, *gtk.PageSetup) callconv(.c) *PrintJob, .{ .name = "gtk_print_job_new" });
        const ret = cFn(_title, _printer, _settings, _page_setup);
        return ret;
    }
    /// method [get_collate](https://docs.gtk.org/gtk4/method.PrintJob.get_collate.html)
    pub fn getCollate(self: *PrintJob) bool {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) bool, .{ .name = "gtk_print_job_get_collate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_up](https://docs.gtk.org/gtk4/method.PrintJob.get_n_up.html)
    pub fn getNUp(self: *PrintJob) u32 {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) u32, .{ .name = "gtk_print_job_get_n_up" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_up_layout](https://docs.gtk.org/gtk4/method.PrintJob.get_n_up_layout.html)
    pub fn getNUpLayout(self: *PrintJob) gtk.NumberUpLayout {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) gtk.NumberUpLayout, .{ .name = "gtk_print_job_get_n_up_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_num_copies](https://docs.gtk.org/gtk4/method.PrintJob.get_num_copies.html)
    pub fn getNumCopies(self: *PrintJob) i32 {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) i32, .{ .name = "gtk_print_job_get_num_copies" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_ranges](https://docs.gtk.org/gtk4/method.PrintJob.get_page_ranges.html)
    pub fn getPageRanges(self: *PrintJob) struct {
        ret: [*]gtk.PageRange,
        n_ranges: i32,
    } {
        var n_ranges_out: i32 = undefined;
        const _n_ranges = &n_ranges_out;
        const cFn = @extern(*const fn (*PrintJob, *i32) callconv(.c) [*]gtk.PageRange, .{ .name = "gtk_print_job_get_page_ranges" });
        const ret = cFn(self, _n_ranges);
        return .{ .ret = ret, .n_ranges = n_ranges_out };
    }
    /// method [get_page_set](https://docs.gtk.org/gtk4/method.PrintJob.get_page_set.html)
    pub fn getPageSet(self: *PrintJob) gtk.PageSet {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) gtk.PageSet, .{ .name = "gtk_print_job_get_page_set" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pages](https://docs.gtk.org/gtk4/method.PrintJob.get_pages.html)
    pub fn getPages(self: *PrintJob) gtk.PrintPages {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) gtk.PrintPages, .{ .name = "gtk_print_job_get_pages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_printer](https://docs.gtk.org/gtk4/method.PrintJob.get_printer.html)
    pub fn getPrinter(self: *PrintJob) *gtk.Printer {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) *gtk.Printer, .{ .name = "gtk_print_job_get_printer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_reverse](https://docs.gtk.org/gtk4/method.PrintJob.get_reverse.html)
    pub fn getReverse(self: *PrintJob) bool {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) bool, .{ .name = "gtk_print_job_get_reverse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_rotate](https://docs.gtk.org/gtk4/method.PrintJob.get_rotate.html)
    pub fn getRotate(self: *PrintJob) bool {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) bool, .{ .name = "gtk_print_job_get_rotate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale](https://docs.gtk.org/gtk4/method.PrintJob.get_scale.html)
    pub fn getScale(self: *PrintJob) f64 {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) f64, .{ .name = "gtk_print_job_get_scale" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_settings](https://docs.gtk.org/gtk4/method.PrintJob.get_settings.html)
    pub fn getSettings(self: *PrintJob) *gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) *gtk.PrintSettings, .{ .name = "gtk_print_job_get_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_status](https://docs.gtk.org/gtk4/method.PrintJob.get_status.html)
    pub fn getStatus(self: *PrintJob) gtk.PrintStatus {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) gtk.PrintStatus, .{ .name = "gtk_print_job_get_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_surface](https://docs.gtk.org/gtk4/method.PrintJob.get_surface.html)
    pub fn getSurface(self: *PrintJob, _error: *?*core.Error) error{GError}!*cairo.Surface {
        const cFn = @extern(*const fn (*PrintJob, *?*core.Error) callconv(.c) *cairo.Surface, .{ .name = "gtk_print_job_get_surface" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.PrintJob.get_title.html)
    pub fn getTitle(self: *PrintJob) [*:0]u8 {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) [*:0]u8, .{ .name = "gtk_print_job_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_track_print_status](https://docs.gtk.org/gtk4/method.PrintJob.get_track_print_status.html)
    pub fn getTrackPrintStatus(self: *PrintJob) bool {
        const cFn = @extern(*const fn (*PrintJob) callconv(.c) bool, .{ .name = "gtk_print_job_get_track_print_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [send](https://docs.gtk.org/gtk4/method.PrintJob.send.html)
    pub fn send(self: *PrintJob, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, *gtk.PrintJob, ?*anyopaque });
        const _callback: gtk.PrintJobCompleteFunc = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const _dnotify: glib.DestroyNotify = @ptrCast(closure_callback.c_destroy());
        const cFn = @extern(*const fn (*PrintJob, gtk.PrintJobCompleteFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_print_job_send" });
        const ret = cFn(self, _callback, @ptrCast(_user_data), _dnotify);
        return ret;
    }
    /// method [set_collate](https://docs.gtk.org/gtk4/method.PrintJob.set_collate.html)
    pub fn setCollate(self: *PrintJob, _collate: bool) void {
        const cFn = @extern(*const fn (*PrintJob, bool) callconv(.c) void, .{ .name = "gtk_print_job_set_collate" });
        const ret = cFn(self, _collate);
        return ret;
    }
    /// method [set_n_up](https://docs.gtk.org/gtk4/method.PrintJob.set_n_up.html)
    pub fn setNUp(self: *PrintJob, _n_up: u32) void {
        const cFn = @extern(*const fn (*PrintJob, u32) callconv(.c) void, .{ .name = "gtk_print_job_set_n_up" });
        const ret = cFn(self, _n_up);
        return ret;
    }
    /// method [set_n_up_layout](https://docs.gtk.org/gtk4/method.PrintJob.set_n_up_layout.html)
    pub fn setNUpLayout(self: *PrintJob, _layout: gtk.NumberUpLayout) void {
        const cFn = @extern(*const fn (*PrintJob, gtk.NumberUpLayout) callconv(.c) void, .{ .name = "gtk_print_job_set_n_up_layout" });
        const ret = cFn(self, _layout);
        return ret;
    }
    /// method [set_num_copies](https://docs.gtk.org/gtk4/method.PrintJob.set_num_copies.html)
    pub fn setNumCopies(self: *PrintJob, _num_copies: i32) void {
        const cFn = @extern(*const fn (*PrintJob, i32) callconv(.c) void, .{ .name = "gtk_print_job_set_num_copies" });
        const ret = cFn(self, _num_copies);
        return ret;
    }
    /// method [set_page_ranges](https://docs.gtk.org/gtk4/method.PrintJob.set_page_ranges.html)
    pub fn setPageRanges(self: *PrintJob, _rangess: []gtk.PageRange) void {
        const _ranges = _rangess.ptr;
        const _n_ranges: i32 = @intCast(_rangess.len);
        const cFn = @extern(*const fn (*PrintJob, [*]gtk.PageRange, i32) callconv(.c) void, .{ .name = "gtk_print_job_set_page_ranges" });
        const ret = cFn(self, _ranges, _n_ranges);
        return ret;
    }
    /// method [set_page_set](https://docs.gtk.org/gtk4/method.PrintJob.set_page_set.html)
    pub fn setPageSet(self: *PrintJob, _page_set: gtk.PageSet) void {
        const cFn = @extern(*const fn (*PrintJob, gtk.PageSet) callconv(.c) void, .{ .name = "gtk_print_job_set_page_set" });
        const ret = cFn(self, _page_set);
        return ret;
    }
    /// method [set_pages](https://docs.gtk.org/gtk4/method.PrintJob.set_pages.html)
    pub fn setPages(self: *PrintJob, _pages: gtk.PrintPages) void {
        const cFn = @extern(*const fn (*PrintJob, gtk.PrintPages) callconv(.c) void, .{ .name = "gtk_print_job_set_pages" });
        const ret = cFn(self, _pages);
        return ret;
    }
    /// method [set_reverse](https://docs.gtk.org/gtk4/method.PrintJob.set_reverse.html)
    pub fn setReverse(self: *PrintJob, _reverse: bool) void {
        const cFn = @extern(*const fn (*PrintJob, bool) callconv(.c) void, .{ .name = "gtk_print_job_set_reverse" });
        const ret = cFn(self, _reverse);
        return ret;
    }
    /// method [set_rotate](https://docs.gtk.org/gtk4/method.PrintJob.set_rotate.html)
    pub fn setRotate(self: *PrintJob, _rotate: bool) void {
        const cFn = @extern(*const fn (*PrintJob, bool) callconv(.c) void, .{ .name = "gtk_print_job_set_rotate" });
        const ret = cFn(self, _rotate);
        return ret;
    }
    /// method [set_scale](https://docs.gtk.org/gtk4/method.PrintJob.set_scale.html)
    pub fn setScale(self: *PrintJob, _scale: f64) void {
        const cFn = @extern(*const fn (*PrintJob, f64) callconv(.c) void, .{ .name = "gtk_print_job_set_scale" });
        const ret = cFn(self, _scale);
        return ret;
    }
    /// method [set_source_fd](https://docs.gtk.org/gtk4/method.PrintJob.set_source_fd.html)
    pub fn setSourceFd(self: *PrintJob, _fd: i32, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintJob, i32, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_job_set_source_fd" });
        const ret = cFn(self, _fd, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_source_file](https://docs.gtk.org/gtk4/method.PrintJob.set_source_file.html)
    pub fn setSourceFile(self: *PrintJob, _filename: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintJob, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_job_set_source_file" });
        const ret = cFn(self, _filename, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_track_print_status](https://docs.gtk.org/gtk4/method.PrintJob.set_track_print_status.html)
    pub fn setTrackPrintStatus(self: *PrintJob, _track_status: bool) void {
        const cFn = @extern(*const fn (*PrintJob, bool) callconv(.c) void, .{ .name = "gtk_print_job_set_track_print_status" });
        const ret = cFn(self, _track_status);
        return ret;
    }
    /// signal [status-changed](https://docs.gtk.org/gtk4/signal.PrintJob.status-changed.html)
    pub fn connectStatusChanged(self: *PrintJob, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("status-changed", handler, args, flags, &.{ void, *PrintJob });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_job_get_type" });
        return cFn();
    }
};
/// callback [PrintJobCompleteFunc](https://docs.gtk.org/gtk4/callback.PrintJobCompleteFunc.html)
pub const PrintJobCompleteFunc = *const fn (_print_job: *gtk.PrintJob, _user_data: ?*anyopaque, _error: *core.Error) callconv(.c) void;
/// Class [PrintOperation](https://docs.gtk.org/gtk4/class.PrintOperation.html)
/// - property [allow-async](https://docs.gtk.org/gtk4/property.PrintOperation.allow-async.html): (rw) `bool`
/// - property [current-page](https://docs.gtk.org/gtk4/property.PrintOperation.current-page.html): (rw) `i32`
/// - property [custom-tab-label](https://docs.gtk.org/gtk4/property.PrintOperation.custom-tab-label.html): (rw) `[*:0]const u8`
/// - property [default-page-setup](https://docs.gtk.org/gtk4/property.PrintOperation.default-page-setup.html): (rw) `gtk.PageSetup`
/// - property [embed-page-setup](https://docs.gtk.org/gtk4/property.PrintOperation.embed-page-setup.html): (rw) `bool`
/// - property [export-filename](https://docs.gtk.org/gtk4/property.PrintOperation.export-filename.html): (rw) `[*:0]const u8`
/// - property [has-selection](https://docs.gtk.org/gtk4/property.PrintOperation.has-selection.html): (rw) `bool`
/// - property [job-name](https://docs.gtk.org/gtk4/property.PrintOperation.job-name.html): (rw) `[*:0]const u8`
/// - property [n-pages](https://docs.gtk.org/gtk4/property.PrintOperation.n-pages.html): (rw) `i32`
/// - property [n-pages-to-print](https://docs.gtk.org/gtk4/property.PrintOperation.n-pages-to-print.html): (r-) `i32`
/// - property [print-settings](https://docs.gtk.org/gtk4/property.PrintOperation.print-settings.html): (rw) `gtk.PrintSettings`
/// - property [show-progress](https://docs.gtk.org/gtk4/property.PrintOperation.show-progress.html): (rw) `bool`
/// - property [status](https://docs.gtk.org/gtk4/property.PrintOperation.status.html): (r-) `gtk.PrintStatus`
/// - property [status-string](https://docs.gtk.org/gtk4/property.PrintOperation.status-string.html): (r-) `[*:0]const u8`
/// - property [support-selection](https://docs.gtk.org/gtk4/property.PrintOperation.support-selection.html): (rw) `bool`
/// - property [track-print-status](https://docs.gtk.org/gtk4/property.PrintOperation.track-print-status.html): (rw) `bool`
/// - property [unit](https://docs.gtk.org/gtk4/property.PrintOperation.unit.html): (rw) `gtk.Unit`
/// - property [use-full-page](https://docs.gtk.org/gtk4/property.PrintOperation.use-full-page.html): (rw) `bool`
pub const PrintOperation = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gtk.PrintOperationPrivate,
    pub const Interfaces = [_]type{gtk.PrintOperationPreview};
    pub const Parent = gobject.Object;
    pub const Class = gtk.PrintOperationClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PrintOperation.new.html)
    pub fn new() *PrintOperation {
        const cFn = @extern(*const fn () callconv(.c) *PrintOperation, .{ .name = "gtk_print_operation_new" });
        const ret = cFn();
        return ret;
    }
    /// method [cancel](https://docs.gtk.org/gtk4/method.PrintOperation.cancel.html)
    pub fn cancel(self: *PrintOperation) void {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) void, .{ .name = "gtk_print_operation_cancel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [draw_page_finish](https://docs.gtk.org/gtk4/method.PrintOperation.draw_page_finish.html)
    pub fn drawPageFinish(self: *PrintOperation) void {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) void, .{ .name = "gtk_print_operation_draw_page_finish" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_page_setup](https://docs.gtk.org/gtk4/method.PrintOperation.get_default_page_setup.html)
    pub fn getDefaultPageSetup(self: *PrintOperation) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_print_operation_get_default_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_embed_page_setup](https://docs.gtk.org/gtk4/method.PrintOperation.get_embed_page_setup.html)
    pub fn getEmbedPageSetup(self: *PrintOperation) bool {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) bool, .{ .name = "gtk_print_operation_get_embed_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_error](https://docs.gtk.org/gtk4/method.PrintOperation.get_error.html)
    pub fn getError(self: *PrintOperation, _error: *?*core.Error) error{GError}!void {
        const cFn = @extern(*const fn (*PrintOperation, *?*core.Error) callconv(.c) void, .{ .name = "gtk_print_operation_get_error" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [get_has_selection](https://docs.gtk.org/gtk4/method.PrintOperation.get_has_selection.html)
    pub fn getHasSelection(self: *PrintOperation) bool {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) bool, .{ .name = "gtk_print_operation_get_has_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_pages_to_print](https://docs.gtk.org/gtk4/method.PrintOperation.get_n_pages_to_print.html)
    pub fn getNPagesToPrint(self: *PrintOperation) i32 {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) i32, .{ .name = "gtk_print_operation_get_n_pages_to_print" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_print_settings](https://docs.gtk.org/gtk4/method.PrintOperation.get_print_settings.html)
    pub fn getPrintSettings(self: *PrintOperation) ?*gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) ?*gtk.PrintSettings, .{ .name = "gtk_print_operation_get_print_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_status](https://docs.gtk.org/gtk4/method.PrintOperation.get_status.html)
    pub fn getStatus(self: *PrintOperation) gtk.PrintStatus {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) gtk.PrintStatus, .{ .name = "gtk_print_operation_get_status" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_status_string](https://docs.gtk.org/gtk4/method.PrintOperation.get_status_string.html)
    pub fn getStatusString(self: *PrintOperation) [*:0]u8 {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) [*:0]u8, .{ .name = "gtk_print_operation_get_status_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_support_selection](https://docs.gtk.org/gtk4/method.PrintOperation.get_support_selection.html)
    pub fn getSupportSelection(self: *PrintOperation) bool {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) bool, .{ .name = "gtk_print_operation_get_support_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_finished](https://docs.gtk.org/gtk4/method.PrintOperation.is_finished.html)
    pub fn isFinished(self: *PrintOperation) bool {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) bool, .{ .name = "gtk_print_operation_is_finished" });
        const ret = cFn(self);
        return ret;
    }
    /// method [run](https://docs.gtk.org/gtk4/method.PrintOperation.run.html)
    pub fn run(self: *PrintOperation, _action: gtk.PrintOperationAction, _parent: ?*gtk.Window, _error: *?*core.Error) error{GError}!gtk.PrintOperationResult {
        const cFn = @extern(*const fn (*PrintOperation, gtk.PrintOperationAction, ?*gtk.Window, *?*core.Error) callconv(.c) gtk.PrintOperationResult, .{ .name = "gtk_print_operation_run" });
        const ret = cFn(self, _action, _parent, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_allow_async](https://docs.gtk.org/gtk4/method.PrintOperation.set_allow_async.html)
    pub fn setAllowAsync(self: *PrintOperation, _allow_async: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_allow_async" });
        const ret = cFn(self, _allow_async);
        return ret;
    }
    /// method [set_current_page](https://docs.gtk.org/gtk4/method.PrintOperation.set_current_page.html)
    pub fn setCurrentPage(self: *PrintOperation, _current_page: i32) void {
        const cFn = @extern(*const fn (*PrintOperation, i32) callconv(.c) void, .{ .name = "gtk_print_operation_set_current_page" });
        const ret = cFn(self, _current_page);
        return ret;
    }
    /// method [set_custom_tab_label](https://docs.gtk.org/gtk4/method.PrintOperation.set_custom_tab_label.html)
    pub fn setCustomTabLabel(self: *PrintOperation, _label: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintOperation, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_operation_set_custom_tab_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [set_default_page_setup](https://docs.gtk.org/gtk4/method.PrintOperation.set_default_page_setup.html)
    pub fn setDefaultPageSetup(self: *PrintOperation, _default_page_setup: ?*gtk.PageSetup) void {
        const cFn = @extern(*const fn (*PrintOperation, ?*gtk.PageSetup) callconv(.c) void, .{ .name = "gtk_print_operation_set_default_page_setup" });
        const ret = cFn(self, _default_page_setup);
        return ret;
    }
    /// method [set_defer_drawing](https://docs.gtk.org/gtk4/method.PrintOperation.set_defer_drawing.html)
    pub fn setDeferDrawing(self: *PrintOperation) void {
        const cFn = @extern(*const fn (*PrintOperation) callconv(.c) void, .{ .name = "gtk_print_operation_set_defer_drawing" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_embed_page_setup](https://docs.gtk.org/gtk4/method.PrintOperation.set_embed_page_setup.html)
    pub fn setEmbedPageSetup(self: *PrintOperation, _embed: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_embed_page_setup" });
        const ret = cFn(self, _embed);
        return ret;
    }
    /// method [set_export_filename](https://docs.gtk.org/gtk4/method.PrintOperation.set_export_filename.html)
    pub fn setExportFilename(self: *PrintOperation, _filename: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintOperation, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_operation_set_export_filename" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [set_has_selection](https://docs.gtk.org/gtk4/method.PrintOperation.set_has_selection.html)
    pub fn setHasSelection(self: *PrintOperation, _has_selection: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_has_selection" });
        const ret = cFn(self, _has_selection);
        return ret;
    }
    /// method [set_job_name](https://docs.gtk.org/gtk4/method.PrintOperation.set_job_name.html)
    pub fn setJobName(self: *PrintOperation, _job_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintOperation, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_operation_set_job_name" });
        const ret = cFn(self, _job_name);
        return ret;
    }
    /// method [set_n_pages](https://docs.gtk.org/gtk4/method.PrintOperation.set_n_pages.html)
    pub fn setNPages(self: *PrintOperation, _n_pages: i32) void {
        const cFn = @extern(*const fn (*PrintOperation, i32) callconv(.c) void, .{ .name = "gtk_print_operation_set_n_pages" });
        const ret = cFn(self, _n_pages);
        return ret;
    }
    /// method [set_print_settings](https://docs.gtk.org/gtk4/method.PrintOperation.set_print_settings.html)
    pub fn setPrintSettings(self: *PrintOperation, _print_settings: ?*gtk.PrintSettings) void {
        const cFn = @extern(*const fn (*PrintOperation, ?*gtk.PrintSettings) callconv(.c) void, .{ .name = "gtk_print_operation_set_print_settings" });
        const ret = cFn(self, _print_settings);
        return ret;
    }
    /// method [set_show_progress](https://docs.gtk.org/gtk4/method.PrintOperation.set_show_progress.html)
    pub fn setShowProgress(self: *PrintOperation, _show_progress: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_show_progress" });
        const ret = cFn(self, _show_progress);
        return ret;
    }
    /// method [set_support_selection](https://docs.gtk.org/gtk4/method.PrintOperation.set_support_selection.html)
    pub fn setSupportSelection(self: *PrintOperation, _support_selection: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_support_selection" });
        const ret = cFn(self, _support_selection);
        return ret;
    }
    /// method [set_track_print_status](https://docs.gtk.org/gtk4/method.PrintOperation.set_track_print_status.html)
    pub fn setTrackPrintStatus(self: *PrintOperation, _track_status: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_track_print_status" });
        const ret = cFn(self, _track_status);
        return ret;
    }
    /// method [set_unit](https://docs.gtk.org/gtk4/method.PrintOperation.set_unit.html)
    pub fn setUnit(self: *PrintOperation, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PrintOperation, gtk.Unit) callconv(.c) void, .{ .name = "gtk_print_operation_set_unit" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [set_use_full_page](https://docs.gtk.org/gtk4/method.PrintOperation.set_use_full_page.html)
    pub fn setUseFullPage(self: *PrintOperation, _full_page: bool) void {
        const cFn = @extern(*const fn (*PrintOperation, bool) callconv(.c) void, .{ .name = "gtk_print_operation_set_use_full_page" });
        const ret = cFn(self, _full_page);
        return ret;
    }
    /// vfunc [begin_print](https://docs.gtk.org/gtk4/vfunc.PrintOperation.begin_print.html)
    pub fn beginPrintV(self: *PrintOperation, _context: *gtk.PrintContext) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.begin_print.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [custom_widget_apply](https://docs.gtk.org/gtk4/vfunc.PrintOperation.custom_widget_apply.html)
    pub fn customWidgetApplyV(self: *PrintOperation, _widget: *gtk.Widget) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.custom_widget_apply.?;
        const ret = vFn(self, _widget);
        return ret;
    }
    /// vfunc [done](https://docs.gtk.org/gtk4/vfunc.PrintOperation.done.html)
    pub fn doneV(self: *PrintOperation, _result: gtk.PrintOperationResult) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.done.?;
        const ret = vFn(self, _result);
        return ret;
    }
    /// vfunc [draw_page](https://docs.gtk.org/gtk4/vfunc.PrintOperation.draw_page.html)
    pub fn drawPageV(self: *PrintOperation, _context: *gtk.PrintContext, _page_nr: i32) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.draw_page.?;
        const ret = vFn(self, _context, _page_nr);
        return ret;
    }
    /// vfunc [end_print](https://docs.gtk.org/gtk4/vfunc.PrintOperation.end_print.html)
    pub fn endPrintV(self: *PrintOperation, _context: *gtk.PrintContext) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.end_print.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [paginate](https://docs.gtk.org/gtk4/vfunc.PrintOperation.paginate.html)
    pub fn paginateV(self: *PrintOperation, _context: *gtk.PrintContext) bool {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.paginate.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [preview](https://docs.gtk.org/gtk4/vfunc.PrintOperation.preview.html)
    pub fn previewV(self: *PrintOperation, _preview: *gtk.PrintOperationPreview, _context: *gtk.PrintContext, _parent: *gtk.Window) bool {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.preview.?;
        const ret = vFn(self, _preview, _context, _parent);
        return ret;
    }
    /// vfunc [request_page_setup](https://docs.gtk.org/gtk4/vfunc.PrintOperation.request_page_setup.html)
    pub fn requestPageSetupV(self: *PrintOperation, _context: *gtk.PrintContext, _page_nr: i32, _setup: *gtk.PageSetup) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.request_page_setup.?;
        const ret = vFn(self, _context, _page_nr, _setup);
        return ret;
    }
    /// vfunc [status_changed](https://docs.gtk.org/gtk4/vfunc.PrintOperation.status_changed.html)
    pub fn statusChangedV(self: *PrintOperation) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.status_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [update_custom_widget](https://docs.gtk.org/gtk4/vfunc.PrintOperation.update_custom_widget.html)
    pub fn updateCustomWidgetV(self: *PrintOperation, _widget: *gtk.Widget, _setup: *gtk.PageSetup, _settings: *gtk.PrintSettings) void {
        const class: *PrintOperationClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.update_custom_widget.?;
        const ret = vFn(self, _widget, _setup, _settings);
        return ret;
    }
    /// signal [begin-print](https://docs.gtk.org/gtk4/signal.PrintOperation.begin-print.html)
    pub fn connectBeginPrint(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("begin-print", handler, args, flags, &.{ void, *PrintOperation, *gtk.PrintContext });
    }
    /// signal [create-custom-widget](https://docs.gtk.org/gtk4/signal.PrintOperation.create-custom-widget.html)
    pub fn connectCreateCustomWidget(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("create-custom-widget", handler, args, flags, &.{ gobject.Object, *PrintOperation });
    }
    /// signal [custom-widget-apply](https://docs.gtk.org/gtk4/signal.PrintOperation.custom-widget-apply.html)
    pub fn connectCustomWidgetApply(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("custom-widget-apply", handler, args, flags, &.{ void, *PrintOperation, *gtk.Widget });
    }
    /// signal [done](https://docs.gtk.org/gtk4/signal.PrintOperation.done.html)
    pub fn connectDone(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("done", handler, args, flags, &.{ void, *PrintOperation, gtk.PrintOperationResult });
    }
    /// signal [draw-page](https://docs.gtk.org/gtk4/signal.PrintOperation.draw-page.html)
    pub fn connectDrawPage(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("draw-page", handler, args, flags, &.{ void, *PrintOperation, *gtk.PrintContext, i32 });
    }
    /// signal [end-print](https://docs.gtk.org/gtk4/signal.PrintOperation.end-print.html)
    pub fn connectEndPrint(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("end-print", handler, args, flags, &.{ void, *PrintOperation, *gtk.PrintContext });
    }
    /// signal [paginate](https://docs.gtk.org/gtk4/signal.PrintOperation.paginate.html)
    pub fn connectPaginate(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("paginate", handler, args, flags, &.{ bool, *PrintOperation, *gtk.PrintContext });
    }
    /// signal [preview](https://docs.gtk.org/gtk4/signal.PrintOperation.preview.html)
    pub fn connectPreview(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preview", handler, args, flags, &.{ bool, *PrintOperation, *gtk.PrintOperationPreview, *gtk.PrintContext, *gtk.Window });
    }
    /// signal [request-page-setup](https://docs.gtk.org/gtk4/signal.PrintOperation.request-page-setup.html)
    pub fn connectRequestPageSetup(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("request-page-setup", handler, args, flags, &.{ void, *PrintOperation, *gtk.PrintContext, i32, *gtk.PageSetup });
    }
    /// signal [status-changed](https://docs.gtk.org/gtk4/signal.PrintOperation.status-changed.html)
    pub fn connectStatusChanged(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("status-changed", handler, args, flags, &.{ void, *PrintOperation });
    }
    /// signal [update-custom-widget](https://docs.gtk.org/gtk4/signal.PrintOperation.update-custom-widget.html)
    pub fn connectUpdateCustomWidget(self: *PrintOperation, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("update-custom-widget", handler, args, flags, &.{ void, *PrintOperation, *gtk.Widget, *gtk.PageSetup, *gtk.PrintSettings });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_operation_get_type" });
        return cFn();
    }
};
/// Enum [PrintOperationAction](https://docs.gtk.org/gtk4/enum.PrintOperationAction.html)
pub const PrintOperationAction = enum(u32) {
    print_dialog = 0,
    print = 1,
    preview = 2,
    @"export" = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_operation_action_get_type" });
        return cFn();
    }
};
pub const PrintOperationClass = extern struct {
    parent_class: gobject.ObjectClass,
    done: ?*const fn (_operation: *gtk.PrintOperation, _result: gtk.PrintOperationResult) callconv(.c) void,
    begin_print: ?*const fn (_operation: *gtk.PrintOperation, _context: *gtk.PrintContext) callconv(.c) void,
    paginate: ?*const fn (_operation: *gtk.PrintOperation, _context: *gtk.PrintContext) callconv(.c) bool,
    request_page_setup: ?*const fn (_operation: *gtk.PrintOperation, _context: *gtk.PrintContext, _page_nr: i32, _setup: *gtk.PageSetup) callconv(.c) void,
    draw_page: ?*const fn (_operation: *gtk.PrintOperation, _context: *gtk.PrintContext, _page_nr: i32) callconv(.c) void,
    end_print: ?*const fn (_operation: *gtk.PrintOperation, _context: *gtk.PrintContext) callconv(.c) void,
    status_changed: ?*const fn (_operation: *gtk.PrintOperation) callconv(.c) void,
    create_custom_widget: ?*anyopaque,
    custom_widget_apply: ?*const fn (_operation: *gtk.PrintOperation, _widget: *gtk.Widget) callconv(.c) void,
    preview: ?*const fn (_operation: *gtk.PrintOperation, _preview: *gtk.PrintOperationPreview, _context: *gtk.PrintContext, _parent: *gtk.Window) callconv(.c) bool,
    update_custom_widget: ?*const fn (_operation: *gtk.PrintOperation, _widget: *gtk.Widget, _setup: *gtk.PageSetup, _settings: *gtk.PrintSettings) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Iface [PrintOperationPreview](https://docs.gtk.org/gtk4/iface.PrintOperationPreview.html)
pub const PrintOperationPreview = opaque {
    /// method [end_preview](https://docs.gtk.org/gtk4/method.PrintOperationPreview.end_preview.html)
    pub fn endPreview(self: *PrintOperationPreview) void {
        const cFn = @extern(*const fn (*PrintOperationPreview) callconv(.c) void, .{ .name = "gtk_print_operation_preview_end_preview" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_selected](https://docs.gtk.org/gtk4/method.PrintOperationPreview.is_selected.html)
    pub fn isSelected(self: *PrintOperationPreview, _page_nr: i32) bool {
        const cFn = @extern(*const fn (*PrintOperationPreview, i32) callconv(.c) bool, .{ .name = "gtk_print_operation_preview_is_selected" });
        const ret = cFn(self, _page_nr);
        return ret;
    }
    /// method [render_page](https://docs.gtk.org/gtk4/method.PrintOperationPreview.render_page.html)
    pub fn renderPage(self: *PrintOperationPreview, _page_nr: i32) void {
        const cFn = @extern(*const fn (*PrintOperationPreview, i32) callconv(.c) void, .{ .name = "gtk_print_operation_preview_render_page" });
        const ret = cFn(self, _page_nr);
        return ret;
    }
    /// vfunc [end_preview](https://docs.gtk.org/gtk4/vfunc.PrintOperationPreview.end_preview.html)
    pub fn endPreviewV(self: *PrintOperationPreview) void {
        const class: *PrintOperationPreviewIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.end_preview.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [got_page_size](https://docs.gtk.org/gtk4/vfunc.PrintOperationPreview.got_page_size.html)
    pub fn gotPageSizeV(self: *PrintOperationPreview, _context: *gtk.PrintContext, _page_setup: *gtk.PageSetup) void {
        const class: *PrintOperationPreviewIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.got_page_size.?;
        const ret = vFn(self, _context, _page_setup);
        return ret;
    }
    /// vfunc [is_selected](https://docs.gtk.org/gtk4/vfunc.PrintOperationPreview.is_selected.html)
    pub fn isSelectedV(self: *PrintOperationPreview, _page_nr: i32) bool {
        const class: *PrintOperationPreviewIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_selected.?;
        const ret = vFn(self, _page_nr);
        return ret;
    }
    /// vfunc [ready](https://docs.gtk.org/gtk4/vfunc.PrintOperationPreview.ready.html)
    pub fn readyV(self: *PrintOperationPreview, _context: *gtk.PrintContext) void {
        const class: *PrintOperationPreviewIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ready.?;
        const ret = vFn(self, _context);
        return ret;
    }
    /// vfunc [render_page](https://docs.gtk.org/gtk4/vfunc.PrintOperationPreview.render_page.html)
    pub fn renderPageV(self: *PrintOperationPreview, _page_nr: i32) void {
        const class: *PrintOperationPreviewIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.render_page.?;
        const ret = vFn(self, _page_nr);
        return ret;
    }
    /// signal [got-page-size](https://docs.gtk.org/gtk4/signal.PrintOperationPreview.got-page-size.html)
    pub fn connectGotPageSize(self: *PrintOperationPreview, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("got-page-size", handler, args, flags, &.{ void, *PrintOperationPreview, *gtk.PrintContext, *gtk.PageSetup });
    }
    /// signal [ready](https://docs.gtk.org/gtk4/signal.PrintOperationPreview.ready.html)
    pub fn connectReady(self: *PrintOperationPreview, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("ready", handler, args, flags, &.{ void, *PrintOperationPreview, *gtk.PrintContext });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_operation_preview_get_type" });
        return cFn();
    }
};
/// Struct [PrintOperationPreviewIface](https://docs.gtk.org/gtk4/struct.PrintOperationPreviewIface.html)
pub const PrintOperationPreviewIface = extern struct {
    g_iface: gobject.TypeInterface,
    ready: ?*const fn (_preview: *gtk.PrintOperationPreview, _context: *gtk.PrintContext) callconv(.c) void,
    got_page_size: ?*const fn (_preview: *gtk.PrintOperationPreview, _context: *gtk.PrintContext, _page_setup: *gtk.PageSetup) callconv(.c) void,
    render_page: ?*const fn (_preview: *gtk.PrintOperationPreview, _page_nr: i32) callconv(.c) void,
    is_selected: ?*const fn (_preview: *gtk.PrintOperationPreview, _page_nr: i32) callconv(.c) bool,
    end_preview: ?*const fn (_preview: *gtk.PrintOperationPreview) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
    _gtk_reserved5: ?*anyopaque,
    _gtk_reserved6: ?*anyopaque,
    _gtk_reserved7: ?*anyopaque,
    _gtk_reserved8: ?*anyopaque,
};
pub const PrintOperationPrivate = opaque {};
/// Enum [PrintOperationResult](https://docs.gtk.org/gtk4/enum.PrintOperationResult.html)
pub const PrintOperationResult = enum(u32) {
    @"error" = 0,
    apply = 1,
    cancel = 2,
    in_progress = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_operation_result_get_type" });
        return cFn();
    }
};
/// Enum [PrintPages](https://docs.gtk.org/gtk4/enum.PrintPages.html)
pub const PrintPages = enum(u32) {
    all = 0,
    current = 1,
    ranges = 2,
    selection = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_pages_get_type" });
        return cFn();
    }
};
/// Enum [PrintQuality](https://docs.gtk.org/gtk4/enum.PrintQuality.html)
pub const PrintQuality = enum(u32) {
    low = 0,
    normal = 1,
    high = 2,
    draft = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_quality_get_type" });
        return cFn();
    }
};
/// Class [PrintSettings](https://docs.gtk.org/gtk4/class.PrintSettings.html)
pub const PrintSettings = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PrintSettings.new.html)
    pub fn new() *PrintSettings {
        const cFn = @extern(*const fn () callconv(.c) *PrintSettings, .{ .name = "gtk_print_settings_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_from_file](https://docs.gtk.org/gtk4/ctor.PrintSettings.new_from_file.html)
    pub fn newFromFile(_file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!*PrintSettings {
        const cFn = @extern(*const fn ([*:0]const u8, *?*core.Error) callconv(.c) *PrintSettings, .{ .name = "gtk_print_settings_new_from_file" });
        const ret = cFn(_file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// ctor [new_from_gvariant](https://docs.gtk.org/gtk4/ctor.PrintSettings.new_from_gvariant.html)
    pub fn newFromGvariant(_variant: *glib.Variant) *PrintSettings {
        const cFn = @extern(*const fn (*glib.Variant) callconv(.c) *PrintSettings, .{ .name = "gtk_print_settings_new_from_gvariant" });
        const ret = cFn(_variant);
        return ret;
    }
    /// ctor [new_from_key_file](https://docs.gtk.org/gtk4/ctor.PrintSettings.new_from_key_file.html)
    pub fn newFromKeyFile(_key_file: *glib.KeyFile, _group_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!*PrintSettings {
        const cFn = @extern(*const fn (*glib.KeyFile, ?[*:0]const u8, *?*core.Error) callconv(.c) *PrintSettings, .{ .name = "gtk_print_settings_new_from_key_file" });
        const ret = cFn(_key_file, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.PrintSettings.copy.html)
    pub fn copy(self: *PrintSettings) *gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) *gtk.PrintSettings, .{ .name = "gtk_print_settings_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [foreach](https://docs.gtk.org/gtk4/method.PrintSettings.foreach.html)
    pub fn foreach(self: *PrintSettings, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, [*:0]const u8, [*:0]const u8 });
        defer closure_func.deinit();
        const _func: gtk.PrintSettingsFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*PrintSettings, gtk.PrintSettingsFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_print_settings_foreach" });
        const ret = cFn(self, _func, @ptrCast(_user_data));
        return ret;
    }
    /// method [get](https://docs.gtk.org/gtk4/method.PrintSettings.get.html)
    pub fn get(self: *PrintSettings, _key: [*:0]const u8) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_bool](https://docs.gtk.org/gtk4/method.PrintSettings.get_bool.html)
    pub fn getBool(self: *PrintSettings, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_print_settings_get_bool" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_collate](https://docs.gtk.org/gtk4/method.PrintSettings.get_collate.html)
    pub fn getCollate(self: *PrintSettings) bool {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) bool, .{ .name = "gtk_print_settings_get_collate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_source](https://docs.gtk.org/gtk4/method.PrintSettings.get_default_source.html)
    pub fn getDefaultSource(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_default_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_dither](https://docs.gtk.org/gtk4/method.PrintSettings.get_dither.html)
    pub fn getDither(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_dither" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_double](https://docs.gtk.org/gtk4/method.PrintSettings.get_double.html)
    pub fn getDouble(self: *PrintSettings, _key: [*:0]const u8) f64 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) f64, .{ .name = "gtk_print_settings_get_double" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_double_with_default](https://docs.gtk.org/gtk4/method.PrintSettings.get_double_with_default.html)
    pub fn getDoubleWithDefault(self: *PrintSettings, _key: [*:0]const u8, _def: f64) f64 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, f64) callconv(.c) f64, .{ .name = "gtk_print_settings_get_double_with_default" });
        const ret = cFn(self, _key, _def);
        return ret;
    }
    /// method [get_duplex](https://docs.gtk.org/gtk4/method.PrintSettings.get_duplex.html)
    pub fn getDuplex(self: *PrintSettings) gtk.PrintDuplex {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.PrintDuplex, .{ .name = "gtk_print_settings_get_duplex" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_finishings](https://docs.gtk.org/gtk4/method.PrintSettings.get_finishings.html)
    pub fn getFinishings(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_finishings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int](https://docs.gtk.org/gtk4/method.PrintSettings.get_int.html)
    pub fn getInt(self: *PrintSettings, _key: [*:0]const u8) i32 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) i32, .{ .name = "gtk_print_settings_get_int" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_int_with_default](https://docs.gtk.org/gtk4/method.PrintSettings.get_int_with_default.html)
    pub fn getIntWithDefault(self: *PrintSettings, _key: [*:0]const u8, _def: i32) i32 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, i32) callconv(.c) i32, .{ .name = "gtk_print_settings_get_int_with_default" });
        const ret = cFn(self, _key, _def);
        return ret;
    }
    /// method [get_length](https://docs.gtk.org/gtk4/method.PrintSettings.get_length.html)
    pub fn getLength(self: *PrintSettings, _key: [*:0]const u8, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_print_settings_get_length" });
        const ret = cFn(self, _key, _unit);
        return ret;
    }
    /// method [get_media_type](https://docs.gtk.org/gtk4/method.PrintSettings.get_media_type.html)
    pub fn getMediaType(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_media_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_n_copies](https://docs.gtk.org/gtk4/method.PrintSettings.get_n_copies.html)
    pub fn getNCopies(self: *PrintSettings) i32 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) i32, .{ .name = "gtk_print_settings_get_n_copies" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_number_up](https://docs.gtk.org/gtk4/method.PrintSettings.get_number_up.html)
    pub fn getNumberUp(self: *PrintSettings) i32 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) i32, .{ .name = "gtk_print_settings_get_number_up" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_number_up_layout](https://docs.gtk.org/gtk4/method.PrintSettings.get_number_up_layout.html)
    pub fn getNumberUpLayout(self: *PrintSettings) gtk.NumberUpLayout {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.NumberUpLayout, .{ .name = "gtk_print_settings_get_number_up_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_orientation](https://docs.gtk.org/gtk4/method.PrintSettings.get_orientation.html)
    pub fn getOrientation(self: *PrintSettings) gtk.PageOrientation {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.PageOrientation, .{ .name = "gtk_print_settings_get_orientation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_output_bin](https://docs.gtk.org/gtk4/method.PrintSettings.get_output_bin.html)
    pub fn getOutputBin(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_output_bin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_ranges](https://docs.gtk.org/gtk4/method.PrintSettings.get_page_ranges.html)
    pub fn getPageRanges(self: *PrintSettings) struct {
        ret: [*]gtk.PageRange,
        num_ranges: i32,
    } {
        var num_ranges_out: i32 = undefined;
        const _num_ranges = &num_ranges_out;
        const cFn = @extern(*const fn (*PrintSettings, *i32) callconv(.c) [*]gtk.PageRange, .{ .name = "gtk_print_settings_get_page_ranges" });
        const ret = cFn(self, _num_ranges);
        return .{ .ret = ret, .num_ranges = num_ranges_out };
    }
    /// method [get_page_set](https://docs.gtk.org/gtk4/method.PrintSettings.get_page_set.html)
    pub fn getPageSet(self: *PrintSettings) gtk.PageSet {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.PageSet, .{ .name = "gtk_print_settings_get_page_set" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_paper_height](https://docs.gtk.org/gtk4/method.PrintSettings.get_paper_height.html)
    pub fn getPaperHeight(self: *PrintSettings, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PrintSettings, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_print_settings_get_paper_height" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_paper_size](https://docs.gtk.org/gtk4/method.PrintSettings.get_paper_size.html)
    pub fn getPaperSize(self: *PrintSettings) ?*gtk.PaperSize {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?*gtk.PaperSize, .{ .name = "gtk_print_settings_get_paper_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_paper_width](https://docs.gtk.org/gtk4/method.PrintSettings.get_paper_width.html)
    pub fn getPaperWidth(self: *PrintSettings, _unit: gtk.Unit) f64 {
        const cFn = @extern(*const fn (*PrintSettings, gtk.Unit) callconv(.c) f64, .{ .name = "gtk_print_settings_get_paper_width" });
        const ret = cFn(self, _unit);
        return ret;
    }
    /// method [get_print_pages](https://docs.gtk.org/gtk4/method.PrintSettings.get_print_pages.html)
    pub fn getPrintPages(self: *PrintSettings) gtk.PrintPages {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.PrintPages, .{ .name = "gtk_print_settings_get_print_pages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_printer](https://docs.gtk.org/gtk4/method.PrintSettings.get_printer.html)
    pub fn getPrinter(self: *PrintSettings) ?[*:0]u8 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) ?[*:0]u8, .{ .name = "gtk_print_settings_get_printer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_printer_lpi](https://docs.gtk.org/gtk4/method.PrintSettings.get_printer_lpi.html)
    pub fn getPrinterLpi(self: *PrintSettings) f64 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) f64, .{ .name = "gtk_print_settings_get_printer_lpi" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_quality](https://docs.gtk.org/gtk4/method.PrintSettings.get_quality.html)
    pub fn getQuality(self: *PrintSettings) gtk.PrintQuality {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) gtk.PrintQuality, .{ .name = "gtk_print_settings_get_quality" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resolution](https://docs.gtk.org/gtk4/method.PrintSettings.get_resolution.html)
    pub fn getResolution(self: *PrintSettings) i32 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) i32, .{ .name = "gtk_print_settings_get_resolution" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resolution_x](https://docs.gtk.org/gtk4/method.PrintSettings.get_resolution_x.html)
    pub fn getResolutionX(self: *PrintSettings) i32 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) i32, .{ .name = "gtk_print_settings_get_resolution_x" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resolution_y](https://docs.gtk.org/gtk4/method.PrintSettings.get_resolution_y.html)
    pub fn getResolutionY(self: *PrintSettings) i32 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) i32, .{ .name = "gtk_print_settings_get_resolution_y" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_reverse](https://docs.gtk.org/gtk4/method.PrintSettings.get_reverse.html)
    pub fn getReverse(self: *PrintSettings) bool {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) bool, .{ .name = "gtk_print_settings_get_reverse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale](https://docs.gtk.org/gtk4/method.PrintSettings.get_scale.html)
    pub fn getScale(self: *PrintSettings) f64 {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) f64, .{ .name = "gtk_print_settings_get_scale" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_color](https://docs.gtk.org/gtk4/method.PrintSettings.get_use_color.html)
    pub fn getUseColor(self: *PrintSettings) bool {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) bool, .{ .name = "gtk_print_settings_get_use_color" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_key](https://docs.gtk.org/gtk4/method.PrintSettings.has_key.html)
    pub fn hasKey(self: *PrintSettings, _key: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_print_settings_has_key" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [load_file](https://docs.gtk.org/gtk4/method.PrintSettings.load_file.html)
    pub fn loadFile(self: *PrintSettings, _file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_settings_load_file" });
        const ret = cFn(self, _file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [load_key_file](https://docs.gtk.org/gtk4/method.PrintSettings.load_key_file.html)
    pub fn loadKeyFile(self: *PrintSettings, _key_file: *glib.KeyFile, _group_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintSettings, *glib.KeyFile, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_settings_load_key_file" });
        const ret = cFn(self, _key_file, _group_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set](https://docs.gtk.org/gtk4/method.PrintSettings.set.html)
    pub fn set(self: *PrintSettings, _key: [*:0]const u8, _value: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_bool](https://docs.gtk.org/gtk4/method.PrintSettings.set_bool.html)
    pub fn setBool(self: *PrintSettings, _key: [*:0]const u8, _value: bool) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, bool) callconv(.c) void, .{ .name = "gtk_print_settings_set_bool" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_collate](https://docs.gtk.org/gtk4/method.PrintSettings.set_collate.html)
    pub fn setCollate(self: *PrintSettings, _collate: bool) void {
        const cFn = @extern(*const fn (*PrintSettings, bool) callconv(.c) void, .{ .name = "gtk_print_settings_set_collate" });
        const ret = cFn(self, _collate);
        return ret;
    }
    /// method [set_default_source](https://docs.gtk.org/gtk4/method.PrintSettings.set_default_source.html)
    pub fn setDefaultSource(self: *PrintSettings, _default_source: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_default_source" });
        const ret = cFn(self, _default_source);
        return ret;
    }
    /// method [set_dither](https://docs.gtk.org/gtk4/method.PrintSettings.set_dither.html)
    pub fn setDither(self: *PrintSettings, _dither: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_dither" });
        const ret = cFn(self, _dither);
        return ret;
    }
    /// method [set_double](https://docs.gtk.org/gtk4/method.PrintSettings.set_double.html)
    pub fn setDouble(self: *PrintSettings, _key: [*:0]const u8, _value: f64) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, f64) callconv(.c) void, .{ .name = "gtk_print_settings_set_double" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_duplex](https://docs.gtk.org/gtk4/method.PrintSettings.set_duplex.html)
    pub fn setDuplex(self: *PrintSettings, _duplex: gtk.PrintDuplex) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.PrintDuplex) callconv(.c) void, .{ .name = "gtk_print_settings_set_duplex" });
        const ret = cFn(self, _duplex);
        return ret;
    }
    /// method [set_finishings](https://docs.gtk.org/gtk4/method.PrintSettings.set_finishings.html)
    pub fn setFinishings(self: *PrintSettings, _finishings: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_finishings" });
        const ret = cFn(self, _finishings);
        return ret;
    }
    /// method [set_int](https://docs.gtk.org/gtk4/method.PrintSettings.set_int.html)
    pub fn setInt(self: *PrintSettings, _key: [*:0]const u8, _value: i32) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_int" });
        const ret = cFn(self, _key, _value);
        return ret;
    }
    /// method [set_length](https://docs.gtk.org/gtk4/method.PrintSettings.set_length.html)
    pub fn setLength(self: *PrintSettings, _key: [*:0]const u8, _value: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_print_settings_set_length" });
        const ret = cFn(self, _key, _value, _unit);
        return ret;
    }
    /// method [set_media_type](https://docs.gtk.org/gtk4/method.PrintSettings.set_media_type.html)
    pub fn setMediaType(self: *PrintSettings, _media_type: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_media_type" });
        const ret = cFn(self, _media_type);
        return ret;
    }
    /// method [set_n_copies](https://docs.gtk.org/gtk4/method.PrintSettings.set_n_copies.html)
    pub fn setNCopies(self: *PrintSettings, _num_copies: i32) void {
        const cFn = @extern(*const fn (*PrintSettings, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_n_copies" });
        const ret = cFn(self, _num_copies);
        return ret;
    }
    /// method [set_number_up](https://docs.gtk.org/gtk4/method.PrintSettings.set_number_up.html)
    pub fn setNumberUp(self: *PrintSettings, _number_up: i32) void {
        const cFn = @extern(*const fn (*PrintSettings, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_number_up" });
        const ret = cFn(self, _number_up);
        return ret;
    }
    /// method [set_number_up_layout](https://docs.gtk.org/gtk4/method.PrintSettings.set_number_up_layout.html)
    pub fn setNumberUpLayout(self: *PrintSettings, _number_up_layout: gtk.NumberUpLayout) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.NumberUpLayout) callconv(.c) void, .{ .name = "gtk_print_settings_set_number_up_layout" });
        const ret = cFn(self, _number_up_layout);
        return ret;
    }
    /// method [set_orientation](https://docs.gtk.org/gtk4/method.PrintSettings.set_orientation.html)
    pub fn setOrientation(self: *PrintSettings, _orientation: gtk.PageOrientation) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.PageOrientation) callconv(.c) void, .{ .name = "gtk_print_settings_set_orientation" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// method [set_output_bin](https://docs.gtk.org/gtk4/method.PrintSettings.set_output_bin.html)
    pub fn setOutputBin(self: *PrintSettings, _output_bin: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_output_bin" });
        const ret = cFn(self, _output_bin);
        return ret;
    }
    /// method [set_page_ranges](https://docs.gtk.org/gtk4/method.PrintSettings.set_page_ranges.html)
    pub fn setPageRanges(self: *PrintSettings, _page_rangess: []gtk.PageRange) void {
        const _page_ranges = _page_rangess.ptr;
        const _num_ranges: i32 = @intCast(_page_rangess.len);
        const cFn = @extern(*const fn (*PrintSettings, [*]gtk.PageRange, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_page_ranges" });
        const ret = cFn(self, _page_ranges, _num_ranges);
        return ret;
    }
    /// method [set_page_set](https://docs.gtk.org/gtk4/method.PrintSettings.set_page_set.html)
    pub fn setPageSet(self: *PrintSettings, _page_set: gtk.PageSet) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.PageSet) callconv(.c) void, .{ .name = "gtk_print_settings_set_page_set" });
        const ret = cFn(self, _page_set);
        return ret;
    }
    /// method [set_paper_height](https://docs.gtk.org/gtk4/method.PrintSettings.set_paper_height.html)
    pub fn setPaperHeight(self: *PrintSettings, _height: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PrintSettings, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_print_settings_set_paper_height" });
        const ret = cFn(self, _height, _unit);
        return ret;
    }
    /// method [set_paper_size](https://docs.gtk.org/gtk4/method.PrintSettings.set_paper_size.html)
    pub fn setPaperSize(self: *PrintSettings, _paper_size: *gtk.PaperSize) void {
        const cFn = @extern(*const fn (*PrintSettings, *gtk.PaperSize) callconv(.c) void, .{ .name = "gtk_print_settings_set_paper_size" });
        const ret = cFn(self, _paper_size);
        return ret;
    }
    /// method [set_paper_width](https://docs.gtk.org/gtk4/method.PrintSettings.set_paper_width.html)
    pub fn setPaperWidth(self: *PrintSettings, _width: f64, _unit: gtk.Unit) void {
        const cFn = @extern(*const fn (*PrintSettings, f64, gtk.Unit) callconv(.c) void, .{ .name = "gtk_print_settings_set_paper_width" });
        const ret = cFn(self, _width, _unit);
        return ret;
    }
    /// method [set_print_pages](https://docs.gtk.org/gtk4/method.PrintSettings.set_print_pages.html)
    pub fn setPrintPages(self: *PrintSettings, _pages: gtk.PrintPages) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.PrintPages) callconv(.c) void, .{ .name = "gtk_print_settings_set_print_pages" });
        const ret = cFn(self, _pages);
        return ret;
    }
    /// method [set_printer](https://docs.gtk.org/gtk4/method.PrintSettings.set_printer.html)
    pub fn setPrinter(self: *PrintSettings, _printer: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_set_printer" });
        const ret = cFn(self, _printer);
        return ret;
    }
    /// method [set_printer_lpi](https://docs.gtk.org/gtk4/method.PrintSettings.set_printer_lpi.html)
    pub fn setPrinterLpi(self: *PrintSettings, _lpi: f64) void {
        const cFn = @extern(*const fn (*PrintSettings, f64) callconv(.c) void, .{ .name = "gtk_print_settings_set_printer_lpi" });
        const ret = cFn(self, _lpi);
        return ret;
    }
    /// method [set_quality](https://docs.gtk.org/gtk4/method.PrintSettings.set_quality.html)
    pub fn setQuality(self: *PrintSettings, _quality: gtk.PrintQuality) void {
        const cFn = @extern(*const fn (*PrintSettings, gtk.PrintQuality) callconv(.c) void, .{ .name = "gtk_print_settings_set_quality" });
        const ret = cFn(self, _quality);
        return ret;
    }
    /// method [set_resolution](https://docs.gtk.org/gtk4/method.PrintSettings.set_resolution.html)
    pub fn setResolution(self: *PrintSettings, _resolution: i32) void {
        const cFn = @extern(*const fn (*PrintSettings, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_resolution" });
        const ret = cFn(self, _resolution);
        return ret;
    }
    /// method [set_resolution_xy](https://docs.gtk.org/gtk4/method.PrintSettings.set_resolution_xy.html)
    pub fn setResolutionXy(self: *PrintSettings, _resolution_x: i32, _resolution_y: i32) void {
        const cFn = @extern(*const fn (*PrintSettings, i32, i32) callconv(.c) void, .{ .name = "gtk_print_settings_set_resolution_xy" });
        const ret = cFn(self, _resolution_x, _resolution_y);
        return ret;
    }
    /// method [set_reverse](https://docs.gtk.org/gtk4/method.PrintSettings.set_reverse.html)
    pub fn setReverse(self: *PrintSettings, _reverse: bool) void {
        const cFn = @extern(*const fn (*PrintSettings, bool) callconv(.c) void, .{ .name = "gtk_print_settings_set_reverse" });
        const ret = cFn(self, _reverse);
        return ret;
    }
    /// method [set_scale](https://docs.gtk.org/gtk4/method.PrintSettings.set_scale.html)
    pub fn setScale(self: *PrintSettings, _scale: f64) void {
        const cFn = @extern(*const fn (*PrintSettings, f64) callconv(.c) void, .{ .name = "gtk_print_settings_set_scale" });
        const ret = cFn(self, _scale);
        return ret;
    }
    /// method [set_use_color](https://docs.gtk.org/gtk4/method.PrintSettings.set_use_color.html)
    pub fn setUseColor(self: *PrintSettings, _use_color: bool) void {
        const cFn = @extern(*const fn (*PrintSettings, bool) callconv(.c) void, .{ .name = "gtk_print_settings_set_use_color" });
        const ret = cFn(self, _use_color);
        return ret;
    }
    /// method [to_file](https://docs.gtk.org/gtk4/method.PrintSettings.to_file.html)
    pub fn toFile(self: *PrintSettings, _file_name: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_print_settings_to_file" });
        const ret = cFn(self, _file_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [to_gvariant](https://docs.gtk.org/gtk4/method.PrintSettings.to_gvariant.html)
    pub fn toGvariant(self: *PrintSettings) *glib.Variant {
        const cFn = @extern(*const fn (*PrintSettings) callconv(.c) *glib.Variant, .{ .name = "gtk_print_settings_to_gvariant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_key_file](https://docs.gtk.org/gtk4/method.PrintSettings.to_key_file.html)
    pub fn toKeyFile(self: *PrintSettings, _key_file: *glib.KeyFile, _group_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, *glib.KeyFile, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_to_key_file" });
        const ret = cFn(self, _key_file, _group_name);
        return ret;
    }
    /// method [unset](https://docs.gtk.org/gtk4/method.PrintSettings.unset.html)
    pub fn unset(self: *PrintSettings, _key: [*:0]const u8) void {
        const cFn = @extern(*const fn (*PrintSettings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_print_settings_unset" });
        const ret = cFn(self, _key);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_settings_get_type" });
        return cFn();
    }
};
/// callback [PrintSettingsFunc](https://docs.gtk.org/gtk4/callback.PrintSettingsFunc.html)
pub const PrintSettingsFunc = *const fn (_key: [*:0]const u8, _value: [*:0]const u8, _user_data: ?*anyopaque) callconv(.c) void;
/// Struct [PrintSetup](https://docs.gtk.org/gtk4/struct.PrintSetup.html)
pub const PrintSetup = opaque {
    /// method [get_page_setup](https://docs.gtk.org/gtk4/method.PrintSetup.get_page_setup.html)
    pub fn getPageSetup(self: *PrintSetup) ?*gtk.PageSetup {
        const cFn = @extern(*const fn (*PrintSetup) callconv(.c) ?*gtk.PageSetup, .{ .name = "gtk_print_setup_get_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_print_settings](https://docs.gtk.org/gtk4/method.PrintSetup.get_print_settings.html)
    pub fn getPrintSettings(self: *PrintSetup) ?*gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintSetup) callconv(.c) ?*gtk.PrintSettings, .{ .name = "gtk_print_setup_get_print_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.PrintSetup.ref.html)
    pub fn ref(self: *PrintSetup) *gtk.PrintSetup {
        const cFn = @extern(*const fn (*PrintSetup) callconv(.c) *gtk.PrintSetup, .{ .name = "gtk_print_setup_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.PrintSetup.unref.html)
    pub fn unref(self: *PrintSetup) void {
        const cFn = @extern(*const fn (*PrintSetup) callconv(.c) void, .{ .name = "gtk_print_setup_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_setup_get_type" });
        return cFn();
    }
};
/// Enum [PrintStatus](https://docs.gtk.org/gtk4/enum.PrintStatus.html)
pub const PrintStatus = enum(u32) {
    initial = 0,
    preparing = 1,
    generating_data = 2,
    sending_data = 3,
    pending = 4,
    pending_issue = 5,
    printing = 6,
    finished = 7,
    finished_aborted = 8,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_status_get_type" });
        return cFn();
    }
};
/// Class [PrintUnixDialog](https://docs.gtk.org/gtk4/class.PrintUnixDialog.html)
/// - property [current-page](https://docs.gtk.org/gtk4/property.PrintUnixDialog.current-page.html): (rw) `i32`
/// - property [embed-page-setup](https://docs.gtk.org/gtk4/property.PrintUnixDialog.embed-page-setup.html): (rw) `bool`
/// - property [has-selection](https://docs.gtk.org/gtk4/property.PrintUnixDialog.has-selection.html): (rw) `bool`
/// - property [manual-capabilities](https://docs.gtk.org/gtk4/property.PrintUnixDialog.manual-capabilities.html): (rw) `gtk.PrintCapabilities`
/// - property [page-setup](https://docs.gtk.org/gtk4/property.PrintUnixDialog.page-setup.html): (rw) `gtk.PageSetup`
/// - property [print-settings](https://docs.gtk.org/gtk4/property.PrintUnixDialog.print-settings.html): (rw) `gtk.PrintSettings`
/// - property [selected-printer](https://docs.gtk.org/gtk4/property.PrintUnixDialog.selected-printer.html): (r-) `gtk.Printer`
/// - property [support-selection](https://docs.gtk.org/gtk4/property.PrintUnixDialog.support-selection.html): (rw) `bool`
pub const PrintUnixDialog = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Dialog;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PrintUnixDialog.new.html)
    pub fn new(_title: ?[*:0]const u8, _parent: ?*gtk.Window) *PrintUnixDialog {
        const cFn = @extern(*const fn (?[*:0]const u8, ?*gtk.Window) callconv(.c) *PrintUnixDialog, .{ .name = "gtk_print_unix_dialog_new" });
        const ret = cFn(_title, _parent);
        return ret;
    }
    /// method [add_custom_tab](https://docs.gtk.org/gtk4/method.PrintUnixDialog.add_custom_tab.html)
    pub fn addCustomTab(self: *PrintUnixDialog, _child: *gtk.Widget, _tab_label: *gtk.Widget) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, *gtk.Widget, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_add_custom_tab" });
        const ret = cFn(self, _child, _tab_label);
        return ret;
    }
    /// method [get_current_page](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_current_page.html)
    pub fn getCurrentPage(self: *PrintUnixDialog) i32 {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) i32, .{ .name = "gtk_print_unix_dialog_get_current_page" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_embed_page_setup](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_embed_page_setup.html)
    pub fn getEmbedPageSetup(self: *PrintUnixDialog) bool {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) bool, .{ .name = "gtk_print_unix_dialog_get_embed_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_selection](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_has_selection.html)
    pub fn getHasSelection(self: *PrintUnixDialog) bool {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) bool, .{ .name = "gtk_print_unix_dialog_get_has_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_manual_capabilities](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_manual_capabilities.html)
    pub fn getManualCapabilities(self: *PrintUnixDialog) gtk.PrintCapabilities {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) gtk.PrintCapabilities, .{ .name = "gtk_print_unix_dialog_get_manual_capabilities" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_setup](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_page_setup.html)
    pub fn getPageSetup(self: *PrintUnixDialog) *gtk.PageSetup {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_print_unix_dialog_get_page_setup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page_setup_set](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_page_setup_set.html)
    pub fn getPageSetupSet(self: *PrintUnixDialog) bool {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) bool, .{ .name = "gtk_print_unix_dialog_get_page_setup_set" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_printer](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_selected_printer.html)
    pub fn getSelectedPrinter(self: *PrintUnixDialog) ?*gtk.Printer {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) ?*gtk.Printer, .{ .name = "gtk_print_unix_dialog_get_selected_printer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_settings](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_settings.html)
    pub fn getSettings(self: *PrintUnixDialog) *gtk.PrintSettings {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) *gtk.PrintSettings, .{ .name = "gtk_print_unix_dialog_get_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_support_selection](https://docs.gtk.org/gtk4/method.PrintUnixDialog.get_support_selection.html)
    pub fn getSupportSelection(self: *PrintUnixDialog) bool {
        const cFn = @extern(*const fn (*PrintUnixDialog) callconv(.c) bool, .{ .name = "gtk_print_unix_dialog_get_support_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_current_page](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_current_page.html)
    pub fn setCurrentPage(self: *PrintUnixDialog, _current_page: i32) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, i32) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_current_page" });
        const ret = cFn(self, _current_page);
        return ret;
    }
    /// method [set_embed_page_setup](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_embed_page_setup.html)
    pub fn setEmbedPageSetup(self: *PrintUnixDialog, _embed: bool) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, bool) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_embed_page_setup" });
        const ret = cFn(self, _embed);
        return ret;
    }
    /// method [set_has_selection](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_has_selection.html)
    pub fn setHasSelection(self: *PrintUnixDialog, _has_selection: bool) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, bool) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_has_selection" });
        const ret = cFn(self, _has_selection);
        return ret;
    }
    /// method [set_manual_capabilities](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_manual_capabilities.html)
    pub fn setManualCapabilities(self: *PrintUnixDialog, _capabilities: gtk.PrintCapabilities) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, gtk.PrintCapabilities) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_manual_capabilities" });
        const ret = cFn(self, _capabilities);
        return ret;
    }
    /// method [set_page_setup](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_page_setup.html)
    pub fn setPageSetup(self: *PrintUnixDialog, _page_setup: *gtk.PageSetup) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, *gtk.PageSetup) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_page_setup" });
        const ret = cFn(self, _page_setup);
        return ret;
    }
    /// method [set_settings](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_settings.html)
    pub fn setSettings(self: *PrintUnixDialog, _settings: ?*gtk.PrintSettings) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, ?*gtk.PrintSettings) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_settings" });
        const ret = cFn(self, _settings);
        return ret;
    }
    /// method [set_support_selection](https://docs.gtk.org/gtk4/method.PrintUnixDialog.set_support_selection.html)
    pub fn setSupportSelection(self: *PrintUnixDialog, _support_selection: bool) void {
        const cFn = @extern(*const fn (*PrintUnixDialog, bool) callconv(.c) void, .{ .name = "gtk_print_unix_dialog_set_support_selection" });
        const ret = cFn(self, _support_selection);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_print_unix_dialog_get_type" });
        return cFn();
    }
};
/// Class [Printer](https://docs.gtk.org/gtk4/class.Printer.html)
/// - property [accepting-jobs](https://docs.gtk.org/gtk4/property.Printer.accepting-jobs.html): (r-) `bool`
/// - property [accepts-pdf](https://docs.gtk.org/gtk4/property.Printer.accepts-pdf.html): (r-) `bool`
/// - property [accepts-ps](https://docs.gtk.org/gtk4/property.Printer.accepts-ps.html): (r-) `bool`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.Printer.icon-name.html): (r-) `[*:0]const u8`
/// - property [is-virtual](https://docs.gtk.org/gtk4/property.Printer.is-virtual.html): (r-) `bool`
/// - property [job-count](https://docs.gtk.org/gtk4/property.Printer.job-count.html): (r-) `i32`
/// - property [location](https://docs.gtk.org/gtk4/property.Printer.location.html): (r-) `[*:0]const u8`
/// - property [name](https://docs.gtk.org/gtk4/property.Printer.name.html): (r-) `[*:0]const u8`
/// - property [paused](https://docs.gtk.org/gtk4/property.Printer.paused.html): (r-) `bool`
/// - property [state-message](https://docs.gtk.org/gtk4/property.Printer.state-message.html): (r-) `[*:0]const u8`
pub const Printer = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Printer.new.html)
    pub fn new(_name: [*:0]const u8, _backend: *gtk.PrintBackend, _virtual_: bool) *Printer {
        const cFn = @extern(*const fn ([*:0]const u8, *gtk.PrintBackend, bool) callconv(.c) *Printer, .{ .name = "gtk_printer_new" });
        const ret = cFn(_name, _backend, _virtual_);
        return ret;
    }
    /// method [accepts_pdf](https://docs.gtk.org/gtk4/method.Printer.accepts_pdf.html)
    pub fn acceptsPdf(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_accepts_pdf" });
        const ret = cFn(self);
        return ret;
    }
    /// method [accepts_ps](https://docs.gtk.org/gtk4/method.Printer.accepts_ps.html)
    pub fn acceptsPs(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_accepts_ps" });
        const ret = cFn(self);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/gtk4/method.Printer.compare.html)
    pub fn compare(self: *Printer, _b: *gtk.Printer) i32 {
        const cFn = @extern(*const fn (*Printer, *gtk.Printer) callconv(.c) i32, .{ .name = "gtk_printer_compare" });
        const ret = cFn(self, _b);
        return ret;
    }
    /// method [get_backend](https://docs.gtk.org/gtk4/method.Printer.get_backend.html)
    pub fn getBackend(self: *Printer) *gtk.PrintBackend {
        const cFn = @extern(*const fn (*Printer) callconv(.c) *gtk.PrintBackend, .{ .name = "gtk_printer_get_backend" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_capabilities](https://docs.gtk.org/gtk4/method.Printer.get_capabilities.html)
    pub fn getCapabilities(self: *Printer) gtk.PrintCapabilities {
        const cFn = @extern(*const fn (*Printer) callconv(.c) gtk.PrintCapabilities, .{ .name = "gtk_printer_get_capabilities" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_page_size](https://docs.gtk.org/gtk4/method.Printer.get_default_page_size.html)
    pub fn getDefaultPageSize(self: *Printer) *gtk.PageSetup {
        const cFn = @extern(*const fn (*Printer) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_printer_get_default_page_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_description](https://docs.gtk.org/gtk4/method.Printer.get_description.html)
    pub fn getDescription(self: *Printer) [*:0]u8 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) [*:0]u8, .{ .name = "gtk_printer_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hard_margins](https://docs.gtk.org/gtk4/method.Printer.get_hard_margins.html)
    pub fn getHardMargins(self: *Printer) ?struct {
        top: f64,
        bottom: f64,
        left: f64,
        right: f64,
    } {
        var top_out: f64 = undefined;
        const _top = &top_out;
        var bottom_out: f64 = undefined;
        const _bottom = &bottom_out;
        var left_out: f64 = undefined;
        const _left = &left_out;
        var right_out: f64 = undefined;
        const _right = &right_out;
        const cFn = @extern(*const fn (*Printer, *f64, *f64, *f64, *f64) callconv(.c) bool, .{ .name = "gtk_printer_get_hard_margins" });
        const ret = cFn(self, _top, _bottom, _left, _right);
        if (!ret) return null;
        return .{ .top = top_out, .bottom = bottom_out, .left = left_out, .right = right_out };
    }
    /// method [get_hard_margins_for_paper_size](https://docs.gtk.org/gtk4/method.Printer.get_hard_margins_for_paper_size.html)
    pub fn getHardMarginsForPaperSize(self: *Printer, _paper_size: *gtk.PaperSize) ?struct {
        top: f64,
        bottom: f64,
        left: f64,
        right: f64,
    } {
        var top_out: f64 = undefined;
        const _top = &top_out;
        var bottom_out: f64 = undefined;
        const _bottom = &bottom_out;
        var left_out: f64 = undefined;
        const _left = &left_out;
        var right_out: f64 = undefined;
        const _right = &right_out;
        const cFn = @extern(*const fn (*Printer, *gtk.PaperSize, *f64, *f64, *f64, *f64) callconv(.c) bool, .{ .name = "gtk_printer_get_hard_margins_for_paper_size" });
        const ret = cFn(self, _paper_size, _top, _bottom, _left, _right);
        if (!ret) return null;
        return .{ .top = top_out, .bottom = bottom_out, .left = left_out, .right = right_out };
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.Printer.get_icon_name.html)
    pub fn getIconName(self: *Printer) [*:0]u8 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) [*:0]u8, .{ .name = "gtk_printer_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_job_count](https://docs.gtk.org/gtk4/method.Printer.get_job_count.html)
    pub fn getJobCount(self: *Printer) i32 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) i32, .{ .name = "gtk_printer_get_job_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_location](https://docs.gtk.org/gtk4/method.Printer.get_location.html)
    pub fn getLocation(self: *Printer) [*:0]u8 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) [*:0]u8, .{ .name = "gtk_printer_get_location" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.Printer.get_name.html)
    pub fn getName(self: *Printer) [*:0]u8 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) [*:0]u8, .{ .name = "gtk_printer_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_state_message](https://docs.gtk.org/gtk4/method.Printer.get_state_message.html)
    pub fn getStateMessage(self: *Printer) [*:0]u8 {
        const cFn = @extern(*const fn (*Printer) callconv(.c) [*:0]u8, .{ .name = "gtk_printer_get_state_message" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_details](https://docs.gtk.org/gtk4/method.Printer.has_details.html)
    pub fn hasDetails(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_has_details" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_accepting_jobs](https://docs.gtk.org/gtk4/method.Printer.is_accepting_jobs.html)
    pub fn isAcceptingJobs(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_is_accepting_jobs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gtk4/method.Printer.is_active.html)
    pub fn isActive(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_default](https://docs.gtk.org/gtk4/method.Printer.is_default.html)
    pub fn isDefault(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_is_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_paused](https://docs.gtk.org/gtk4/method.Printer.is_paused.html)
    pub fn isPaused(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_is_paused" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_virtual](https://docs.gtk.org/gtk4/method.Printer.is_virtual.html)
    pub fn isVirtual(self: *Printer) bool {
        const cFn = @extern(*const fn (*Printer) callconv(.c) bool, .{ .name = "gtk_printer_is_virtual" });
        const ret = cFn(self);
        return ret;
    }
    /// method [list_papers](https://docs.gtk.org/gtk4/method.Printer.list_papers.html)
    pub fn listPapers(self: *Printer) ?*core.List {
        const cFn = @extern(*const fn (*Printer) callconv(.c) ?*core.List, .{ .name = "gtk_printer_list_papers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [request_details](https://docs.gtk.org/gtk4/method.Printer.request_details.html)
    pub fn requestDetails(self: *Printer) void {
        const cFn = @extern(*const fn (*Printer) callconv(.c) void, .{ .name = "gtk_printer_request_details" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [details-acquired](https://docs.gtk.org/gtk4/signal.Printer.details-acquired.html)
    pub fn connectDetailsAcquired(self: *Printer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("details-acquired", handler, args, flags, &.{ void, *Printer, bool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_printer_get_type" });
        return cFn();
    }
};
/// callback [PrinterFunc](https://docs.gtk.org/gtk4/callback.PrinterFunc.html)
pub const PrinterFunc = *const fn (_printer: *gtk.Printer, _data: ?*anyopaque) callconv(.c) bool;
/// Class [ProgressBar](https://docs.gtk.org/gtk4/class.ProgressBar.html)
/// - property [ellipsize](https://docs.gtk.org/gtk4/property.ProgressBar.ellipsize.html): (rw) `pango.EllipsizeMode`
/// - property [fraction](https://docs.gtk.org/gtk4/property.ProgressBar.fraction.html): (rw) `f64`
/// - property [inverted](https://docs.gtk.org/gtk4/property.ProgressBar.inverted.html): (rw) `bool`
/// - property [pulse-step](https://docs.gtk.org/gtk4/property.ProgressBar.pulse-step.html): (rw) `f64`
/// - property [show-text](https://docs.gtk.org/gtk4/property.ProgressBar.show-text.html): (rw) `bool`
/// - property [text](https://docs.gtk.org/gtk4/property.ProgressBar.text.html): (rw) `[*:0]const u8`
pub const ProgressBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ProgressBar.new.html)
    pub fn new() *ProgressBar {
        const cFn = @extern(*const fn () callconv(.c) *ProgressBar, .{ .name = "gtk_progress_bar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_ellipsize](https://docs.gtk.org/gtk4/method.ProgressBar.get_ellipsize.html)
    pub fn getEllipsize(self: *ProgressBar) pango.EllipsizeMode {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) pango.EllipsizeMode, .{ .name = "gtk_progress_bar_get_ellipsize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fraction](https://docs.gtk.org/gtk4/method.ProgressBar.get_fraction.html)
    pub fn getFraction(self: *ProgressBar) f64 {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) f64, .{ .name = "gtk_progress_bar_get_fraction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_inverted](https://docs.gtk.org/gtk4/method.ProgressBar.get_inverted.html)
    pub fn getInverted(self: *ProgressBar) bool {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) bool, .{ .name = "gtk_progress_bar_get_inverted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pulse_step](https://docs.gtk.org/gtk4/method.ProgressBar.get_pulse_step.html)
    pub fn getPulseStep(self: *ProgressBar) f64 {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) f64, .{ .name = "gtk_progress_bar_get_pulse_step" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_text](https://docs.gtk.org/gtk4/method.ProgressBar.get_show_text.html)
    pub fn getShowText(self: *ProgressBar) bool {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) bool, .{ .name = "gtk_progress_bar_get_show_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.ProgressBar.get_text.html)
    pub fn getText(self: *ProgressBar) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) ?[*:0]u8, .{ .name = "gtk_progress_bar_get_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pulse](https://docs.gtk.org/gtk4/method.ProgressBar.pulse.html)
    pub fn pulse(self: *ProgressBar) void {
        const cFn = @extern(*const fn (*ProgressBar) callconv(.c) void, .{ .name = "gtk_progress_bar_pulse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_ellipsize](https://docs.gtk.org/gtk4/method.ProgressBar.set_ellipsize.html)
    pub fn setEllipsize(self: *ProgressBar, _mode: pango.EllipsizeMode) void {
        const cFn = @extern(*const fn (*ProgressBar, pango.EllipsizeMode) callconv(.c) void, .{ .name = "gtk_progress_bar_set_ellipsize" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_fraction](https://docs.gtk.org/gtk4/method.ProgressBar.set_fraction.html)
    pub fn setFraction(self: *ProgressBar, _fraction: f64) void {
        const cFn = @extern(*const fn (*ProgressBar, f64) callconv(.c) void, .{ .name = "gtk_progress_bar_set_fraction" });
        const ret = cFn(self, _fraction);
        return ret;
    }
    /// method [set_inverted](https://docs.gtk.org/gtk4/method.ProgressBar.set_inverted.html)
    pub fn setInverted(self: *ProgressBar, _inverted: bool) void {
        const cFn = @extern(*const fn (*ProgressBar, bool) callconv(.c) void, .{ .name = "gtk_progress_bar_set_inverted" });
        const ret = cFn(self, _inverted);
        return ret;
    }
    /// method [set_pulse_step](https://docs.gtk.org/gtk4/method.ProgressBar.set_pulse_step.html)
    pub fn setPulseStep(self: *ProgressBar, _fraction: f64) void {
        const cFn = @extern(*const fn (*ProgressBar, f64) callconv(.c) void, .{ .name = "gtk_progress_bar_set_pulse_step" });
        const ret = cFn(self, _fraction);
        return ret;
    }
    /// method [set_show_text](https://docs.gtk.org/gtk4/method.ProgressBar.set_show_text.html)
    pub fn setShowText(self: *ProgressBar, _show_text: bool) void {
        const cFn = @extern(*const fn (*ProgressBar, bool) callconv(.c) void, .{ .name = "gtk_progress_bar_set_show_text" });
        const ret = cFn(self, _show_text);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.ProgressBar.set_text.html)
    pub fn setText(self: *ProgressBar, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*ProgressBar, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_progress_bar_set_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_progress_bar_get_type" });
        return cFn();
    }
};
/// Enum [PropagationLimit](https://docs.gtk.org/gtk4/enum.PropagationLimit.html)
pub const PropagationLimit = enum(u32) {
    none = 0,
    same_native = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_propagation_limit_get_type" });
        return cFn();
    }
};
/// Enum [PropagationPhase](https://docs.gtk.org/gtk4/enum.PropagationPhase.html)
pub const PropagationPhase = enum(u32) {
    none = 0,
    capture = 1,
    bubble = 2,
    target = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_propagation_phase_get_type" });
        return cFn();
    }
};
/// Class [PropertyExpression](https://docs.gtk.org/gtk4/class.PropertyExpression.html)
pub const PropertyExpression = opaque {
    pub const Parent = gtk.Expression;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.PropertyExpression.new.html)
    pub fn new(_this_type: core.Type, _expression: ?*gtk.Expression, _property_name: [*:0]const u8) *PropertyExpression {
        const cFn = @extern(*const fn (core.Type, ?*gtk.Expression, [*:0]const u8) callconv(.c) *PropertyExpression, .{ .name = "gtk_property_expression_new" });
        const ret = cFn(_this_type, _expression, _property_name);
        return ret;
    }
    /// ctor [new_for_pspec](https://docs.gtk.org/gtk4/ctor.PropertyExpression.new_for_pspec.html)
    pub fn newForPspec(_expression: ?*gtk.Expression, _pspec: *gobject.ParamSpec) *PropertyExpression {
        const cFn = @extern(*const fn (?*gtk.Expression, *gobject.ParamSpec) callconv(.c) *PropertyExpression, .{ .name = "gtk_property_expression_new_for_pspec" });
        const ret = cFn(_expression, _pspec);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.PropertyExpression.get_expression.html)
    pub fn getExpression(self: *PropertyExpression) ?*gtk.Expression {
        const cFn = @extern(*const fn (*PropertyExpression) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_property_expression_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pspec](https://docs.gtk.org/gtk4/method.PropertyExpression.get_pspec.html)
    pub fn getPspec(self: *PropertyExpression) *gobject.ParamSpec {
        const cFn = @extern(*const fn (*PropertyExpression) callconv(.c) *gobject.ParamSpec, .{ .name = "gtk_property_expression_get_pspec" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_property_expression_get_type" });
        return cFn();
    }
};
/// Class [Range](https://docs.gtk.org/gtk4/class.Range.html)
/// - property [adjustment](https://docs.gtk.org/gtk4/property.Range.adjustment.html): (rw) `gtk.Adjustment`
/// - property [fill-level](https://docs.gtk.org/gtk4/property.Range.fill-level.html): (rw) `f64`
/// - property [inverted](https://docs.gtk.org/gtk4/property.Range.inverted.html): (rw) `bool`
/// - property [restrict-to-fill-level](https://docs.gtk.org/gtk4/property.Range.restrict-to-fill-level.html): (rw) `bool`
/// - property [round-digits](https://docs.gtk.org/gtk4/property.Range.round-digits.html): (rw) `i32`
/// - property [show-fill-level](https://docs.gtk.org/gtk4/property.Range.show-fill-level.html): (rw) `bool`
pub const Range = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.RangeClass;
    /// method [get_adjustment](https://docs.gtk.org/gtk4/method.Range.get_adjustment.html)
    pub fn getAdjustment(self: *Range) *gtk.Adjustment {
        const cFn = @extern(*const fn (*Range) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_range_get_adjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_fill_level](https://docs.gtk.org/gtk4/method.Range.get_fill_level.html)
    pub fn getFillLevel(self: *Range) f64 {
        const cFn = @extern(*const fn (*Range) callconv(.c) f64, .{ .name = "gtk_range_get_fill_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flippable](https://docs.gtk.org/gtk4/method.Range.get_flippable.html)
    pub fn getFlippable(self: *Range) bool {
        const cFn = @extern(*const fn (*Range) callconv(.c) bool, .{ .name = "gtk_range_get_flippable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_inverted](https://docs.gtk.org/gtk4/method.Range.get_inverted.html)
    pub fn getInverted(self: *Range) bool {
        const cFn = @extern(*const fn (*Range) callconv(.c) bool, .{ .name = "gtk_range_get_inverted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_range_rect](https://docs.gtk.org/gtk4/method.Range.get_range_rect.html)
    pub fn getRangeRect(self: *Range, _range_rect: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Range, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_range_get_range_rect" });
        const ret = cFn(self, _range_rect);
        return ret;
    }
    /// method [get_restrict_to_fill_level](https://docs.gtk.org/gtk4/method.Range.get_restrict_to_fill_level.html)
    pub fn getRestrictToFillLevel(self: *Range) bool {
        const cFn = @extern(*const fn (*Range) callconv(.c) bool, .{ .name = "gtk_range_get_restrict_to_fill_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_round_digits](https://docs.gtk.org/gtk4/method.Range.get_round_digits.html)
    pub fn getRoundDigits(self: *Range) i32 {
        const cFn = @extern(*const fn (*Range) callconv(.c) i32, .{ .name = "gtk_range_get_round_digits" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_fill_level](https://docs.gtk.org/gtk4/method.Range.get_show_fill_level.html)
    pub fn getShowFillLevel(self: *Range) bool {
        const cFn = @extern(*const fn (*Range) callconv(.c) bool, .{ .name = "gtk_range_get_show_fill_level" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_slider_range](https://docs.gtk.org/gtk4/method.Range.get_slider_range.html)
    pub fn getSliderRange(self: *Range) struct {
        ret: void,
        slider_start: i32,
        slider_end: i32,
    } {
        var slider_start_out: i32 = undefined;
        const _slider_start = &slider_start_out;
        var slider_end_out: i32 = undefined;
        const _slider_end = &slider_end_out;
        const cFn = @extern(*const fn (*Range, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_range_get_slider_range" });
        const ret = cFn(self, _slider_start, _slider_end);
        return .{ .ret = ret, .slider_start = slider_start_out, .slider_end = slider_end_out };
    }
    /// method [get_slider_size_fixed](https://docs.gtk.org/gtk4/method.Range.get_slider_size_fixed.html)
    pub fn getSliderSizeFixed(self: *Range) bool {
        const cFn = @extern(*const fn (*Range) callconv(.c) bool, .{ .name = "gtk_range_get_slider_size_fixed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.Range.get_value.html)
    pub fn getValue(self: *Range) f64 {
        const cFn = @extern(*const fn (*Range) callconv(.c) f64, .{ .name = "gtk_range_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_adjustment](https://docs.gtk.org/gtk4/method.Range.set_adjustment.html)
    pub fn setAdjustment(self: *Range, _adjustment: *gtk.Adjustment) void {
        const cFn = @extern(*const fn (*Range, *gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_range_set_adjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [set_fill_level](https://docs.gtk.org/gtk4/method.Range.set_fill_level.html)
    pub fn setFillLevel(self: *Range, _fill_level: f64) void {
        const cFn = @extern(*const fn (*Range, f64) callconv(.c) void, .{ .name = "gtk_range_set_fill_level" });
        const ret = cFn(self, _fill_level);
        return ret;
    }
    /// method [set_flippable](https://docs.gtk.org/gtk4/method.Range.set_flippable.html)
    pub fn setFlippable(self: *Range, _flippable: bool) void {
        const cFn = @extern(*const fn (*Range, bool) callconv(.c) void, .{ .name = "gtk_range_set_flippable" });
        const ret = cFn(self, _flippable);
        return ret;
    }
    /// method [set_increments](https://docs.gtk.org/gtk4/method.Range.set_increments.html)
    pub fn setIncrements(self: *Range, _step: f64, _page: f64) void {
        const cFn = @extern(*const fn (*Range, f64, f64) callconv(.c) void, .{ .name = "gtk_range_set_increments" });
        const ret = cFn(self, _step, _page);
        return ret;
    }
    /// method [set_inverted](https://docs.gtk.org/gtk4/method.Range.set_inverted.html)
    pub fn setInverted(self: *Range, _setting: bool) void {
        const cFn = @extern(*const fn (*Range, bool) callconv(.c) void, .{ .name = "gtk_range_set_inverted" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_range](https://docs.gtk.org/gtk4/method.Range.set_range.html)
    pub fn setRange(self: *Range, _min: f64, _max: f64) void {
        const cFn = @extern(*const fn (*Range, f64, f64) callconv(.c) void, .{ .name = "gtk_range_set_range" });
        const ret = cFn(self, _min, _max);
        return ret;
    }
    /// method [set_restrict_to_fill_level](https://docs.gtk.org/gtk4/method.Range.set_restrict_to_fill_level.html)
    pub fn setRestrictToFillLevel(self: *Range, _restrict_to_fill_level: bool) void {
        const cFn = @extern(*const fn (*Range, bool) callconv(.c) void, .{ .name = "gtk_range_set_restrict_to_fill_level" });
        const ret = cFn(self, _restrict_to_fill_level);
        return ret;
    }
    /// method [set_round_digits](https://docs.gtk.org/gtk4/method.Range.set_round_digits.html)
    pub fn setRoundDigits(self: *Range, _round_digits: i32) void {
        const cFn = @extern(*const fn (*Range, i32) callconv(.c) void, .{ .name = "gtk_range_set_round_digits" });
        const ret = cFn(self, _round_digits);
        return ret;
    }
    /// method [set_show_fill_level](https://docs.gtk.org/gtk4/method.Range.set_show_fill_level.html)
    pub fn setShowFillLevel(self: *Range, _show_fill_level: bool) void {
        const cFn = @extern(*const fn (*Range, bool) callconv(.c) void, .{ .name = "gtk_range_set_show_fill_level" });
        const ret = cFn(self, _show_fill_level);
        return ret;
    }
    /// method [set_slider_size_fixed](https://docs.gtk.org/gtk4/method.Range.set_slider_size_fixed.html)
    pub fn setSliderSizeFixed(self: *Range, _size_fixed: bool) void {
        const cFn = @extern(*const fn (*Range, bool) callconv(.c) void, .{ .name = "gtk_range_set_slider_size_fixed" });
        const ret = cFn(self, _size_fixed);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gtk4/method.Range.set_value.html)
    pub fn setValue(self: *Range, _value: f64) void {
        const cFn = @extern(*const fn (*Range, f64) callconv(.c) void, .{ .name = "gtk_range_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// vfunc [adjust_bounds](https://docs.gtk.org/gtk4/vfunc.Range.adjust_bounds.html)
    pub fn adjustBoundsV(self: *Range, _new_value: f64) void {
        const class: *RangeClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.adjust_bounds.?;
        const ret = vFn(self, _new_value);
        return ret;
    }
    /// vfunc [change_value](https://docs.gtk.org/gtk4/vfunc.Range.change_value.html)
    pub fn changeValueV(self: *Range, _scroll: gtk.ScrollType, _new_value: f64) bool {
        const class: *RangeClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.change_value.?;
        const ret = vFn(self, _scroll, _new_value);
        return ret;
    }
    /// vfunc [get_range_border](https://docs.gtk.org/gtk4/vfunc.Range.get_range_border.html)
    pub fn getRangeBorderV(self: *Range, _border_: *gtk.Border) void {
        const class: *RangeClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_range_border.?;
        const ret = vFn(self, _border_);
        return ret;
    }
    /// vfunc [move_slider](https://docs.gtk.org/gtk4/vfunc.Range.move_slider.html)
    pub fn moveSliderV(self: *Range, _scroll: gtk.ScrollType) void {
        const class: *RangeClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_slider.?;
        const ret = vFn(self, _scroll);
        return ret;
    }
    /// vfunc [value_changed](https://docs.gtk.org/gtk4/vfunc.Range.value_changed.html)
    pub fn valueChangedV(self: *Range) void {
        const class: *RangeClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [adjust-bounds](https://docs.gtk.org/gtk4/signal.Range.adjust-bounds.html)
    pub fn connectAdjustBounds(self: *Range, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("adjust-bounds", handler, args, flags, &.{ void, *Range, f64 });
    }
    /// signal [change-value](https://docs.gtk.org/gtk4/signal.Range.change-value.html)
    pub fn connectChangeValue(self: *Range, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-value", handler, args, flags, &.{ bool, *Range, gtk.ScrollType, f64 });
    }
    /// signal [move-slider](https://docs.gtk.org/gtk4/signal.Range.move-slider.html)
    pub fn connectMoveSlider(self: *Range, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-slider", handler, args, flags, &.{ void, *Range, gtk.ScrollType });
    }
    /// signal [value-changed](https://docs.gtk.org/gtk4/signal.Range.value-changed.html)
    pub fn connectValueChanged(self: *Range, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("value-changed", handler, args, flags, &.{ void, *Range });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_range_get_type" });
        return cFn();
    }
};
pub const RangeClass = extern struct {
    parent_class: gtk.WidgetClass,
    value_changed: ?*const fn (_range: *gtk.Range) callconv(.c) void,
    adjust_bounds: ?*const fn (_range: *gtk.Range, _new_value: f64) callconv(.c) void,
    move_slider: ?*const fn (_range: *gtk.Range, _scroll: gtk.ScrollType) callconv(.c) void,
    get_range_border: ?*const fn (_range: *gtk.Range, _border_: *gtk.Border) callconv(.c) void,
    change_value: ?*const fn (_range: *gtk.Range, _scroll: gtk.ScrollType, _new_value: f64) callconv(.c) bool,
    padding: [8]?*anyopaque,
};
/// Struct [RecentData](https://docs.gtk.org/gtk4/struct.RecentData.html)
pub const RecentData = extern struct {
    display_name: ?[*:0]const u8,
    description: ?[*:0]const u8,
    mime_type: ?[*:0]const u8,
    app_name: ?[*:0]const u8,
    app_exec: ?[*:0]const u8,
    groups: ?[*:null]?[*:0]const u8,
    is_private: bool,
};
/// Struct [RecentInfo](https://docs.gtk.org/gtk4/struct.RecentInfo.html)
pub const RecentInfo = opaque {
    /// method [create_app_info](https://docs.gtk.org/gtk4/method.RecentInfo.create_app_info.html)
    pub fn createAppInfo(self: *RecentInfo, _app_name: ?[*:0]const u8, _error: *?*core.Error) error{GError}!?*gio.AppInfo {
        const cFn = @extern(*const fn (*RecentInfo, ?[*:0]const u8, *?*core.Error) callconv(.c) ?*gio.AppInfo, .{ .name = "gtk_recent_info_create_app_info" });
        const ret = cFn(self, _app_name, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [exists](https://docs.gtk.org/gtk4/method.RecentInfo.exists.html)
    pub fn exists(self: *RecentInfo) bool {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) bool, .{ .name = "gtk_recent_info_exists" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_added](https://docs.gtk.org/gtk4/method.RecentInfo.get_added.html)
    pub fn getAdded(self: *RecentInfo) *glib.DateTime {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) *glib.DateTime, .{ .name = "gtk_recent_info_get_added" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_age](https://docs.gtk.org/gtk4/method.RecentInfo.get_age.html)
    pub fn getAge(self: *RecentInfo) i32 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) i32, .{ .name = "gtk_recent_info_get_age" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_application_info](https://docs.gtk.org/gtk4/method.RecentInfo.get_application_info.html)
    pub fn getApplicationInfo(self: *RecentInfo, _app_name: [*:0]const u8) ?struct {
        app_exec: [*:0]u8,
        count: u32,
        stamp: *glib.DateTime,
    } {
        var app_exec_out: [*:0]u8 = undefined;
        const _app_exec = &app_exec_out;
        var count_out: u32 = undefined;
        const _count = &count_out;
        var stamp_out: *glib.DateTime = undefined;
        const _stamp = &stamp_out;
        const cFn = @extern(*const fn (*RecentInfo, [*:0]const u8, *[*:0]u8, *u32, **glib.DateTime) callconv(.c) bool, .{ .name = "gtk_recent_info_get_application_info" });
        const ret = cFn(self, _app_name, _app_exec, _count, _stamp);
        if (!ret) return null;
        return .{ .app_exec = app_exec_out, .count = count_out, .stamp = stamp_out };
    }
    /// method [get_applications](https://docs.gtk.org/gtk4/method.RecentInfo.get_applications.html)
    pub fn getApplications(self: *RecentInfo) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*RecentInfo, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_recent_info_get_applications" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_description](https://docs.gtk.org/gtk4/method.RecentInfo.get_description.html)
    pub fn getDescription(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_get_description" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display_name](https://docs.gtk.org/gtk4/method.RecentInfo.get_display_name.html)
    pub fn getDisplayName(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_get_display_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gicon](https://docs.gtk.org/gtk4/method.RecentInfo.get_gicon.html)
    pub fn getGicon(self: *RecentInfo) ?*gio.Icon {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) ?*gio.Icon, .{ .name = "gtk_recent_info_get_gicon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_groups](https://docs.gtk.org/gtk4/method.RecentInfo.get_groups.html)
    pub fn getGroups(self: *RecentInfo) struct {
        ret: [*:null]?[*:0]const u8,
        length: u64,
    } {
        var length_out: u64 = undefined;
        const _length = &length_out;
        const cFn = @extern(*const fn (*RecentInfo, ?*u64) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_recent_info_get_groups" });
        const ret = cFn(self, _length);
        return .{ .ret = ret, .length = length_out };
    }
    /// method [get_mime_type](https://docs.gtk.org/gtk4/method.RecentInfo.get_mime_type.html)
    pub fn getMimeType(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_get_mime_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modified](https://docs.gtk.org/gtk4/method.RecentInfo.get_modified.html)
    pub fn getModified(self: *RecentInfo) *glib.DateTime {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) *glib.DateTime, .{ .name = "gtk_recent_info_get_modified" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_private_hint](https://docs.gtk.org/gtk4/method.RecentInfo.get_private_hint.html)
    pub fn getPrivateHint(self: *RecentInfo) bool {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) bool, .{ .name = "gtk_recent_info_get_private_hint" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_short_name](https://docs.gtk.org/gtk4/method.RecentInfo.get_short_name.html)
    pub fn getShortName(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_get_short_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uri](https://docs.gtk.org/gtk4/method.RecentInfo.get_uri.html)
    pub fn getUri(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_get_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uri_display](https://docs.gtk.org/gtk4/method.RecentInfo.get_uri_display.html)
    pub fn getUriDisplay(self: *RecentInfo) ?[*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) ?[*:0]u8, .{ .name = "gtk_recent_info_get_uri_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visited](https://docs.gtk.org/gtk4/method.RecentInfo.get_visited.html)
    pub fn getVisited(self: *RecentInfo) *glib.DateTime {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) *glib.DateTime, .{ .name = "gtk_recent_info_get_visited" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_application](https://docs.gtk.org/gtk4/method.RecentInfo.has_application.html)
    pub fn hasApplication(self: *RecentInfo, _app_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*RecentInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_recent_info_has_application" });
        const ret = cFn(self, _app_name);
        return ret;
    }
    /// method [has_group](https://docs.gtk.org/gtk4/method.RecentInfo.has_group.html)
    pub fn hasGroup(self: *RecentInfo, _group_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*RecentInfo, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_recent_info_has_group" });
        const ret = cFn(self, _group_name);
        return ret;
    }
    /// method [is_local](https://docs.gtk.org/gtk4/method.RecentInfo.is_local.html)
    pub fn isLocal(self: *RecentInfo) bool {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) bool, .{ .name = "gtk_recent_info_is_local" });
        const ret = cFn(self);
        return ret;
    }
    /// method [last_application](https://docs.gtk.org/gtk4/method.RecentInfo.last_application.html)
    pub fn lastApplication(self: *RecentInfo) [*:0]u8 {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) [*:0]u8, .{ .name = "gtk_recent_info_last_application" });
        const ret = cFn(self);
        return ret;
    }
    /// method [match](https://docs.gtk.org/gtk4/method.RecentInfo.match.html)
    pub fn match(self: *RecentInfo, _info_b: *gtk.RecentInfo) bool {
        const cFn = @extern(*const fn (*RecentInfo, *gtk.RecentInfo) callconv(.c) bool, .{ .name = "gtk_recent_info_match" });
        const ret = cFn(self, _info_b);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.RecentInfo.ref.html)
    pub fn ref(self: *RecentInfo) *gtk.RecentInfo {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) *gtk.RecentInfo, .{ .name = "gtk_recent_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.RecentInfo.unref.html)
    pub fn unref(self: *RecentInfo) void {
        const cFn = @extern(*const fn (*RecentInfo) callconv(.c) void, .{ .name = "gtk_recent_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_recent_info_get_type" });
        return cFn();
    }
};
/// Class [RecentManager](https://docs.gtk.org/gtk4/class.RecentManager.html)
/// - property [filename](https://docs.gtk.org/gtk4/property.RecentManager.filename.html): (r-) `[*:0]const u8`
/// - property [size](https://docs.gtk.org/gtk4/property.RecentManager.size.html): (r-) `i32`
pub const RecentManager = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gtk.RecentManagerPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gtk.RecentManagerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.RecentManager.new.html)
    pub fn new() *RecentManager {
        const cFn = @extern(*const fn () callconv(.c) *RecentManager, .{ .name = "gtk_recent_manager_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_default](https://docs.gtk.org/gtk4/type_func.RecentManager.get_default.html)
    pub fn getDefault() *gtk.RecentManager {
        const cFn = @extern(*const fn () callconv(.c) *gtk.RecentManager, .{ .name = "gtk_recent_manager_get_default" });
        const ret = cFn();
        return ret;
    }
    /// method [add_full](https://docs.gtk.org/gtk4/method.RecentManager.add_full.html)
    pub fn addFull(self: *RecentManager, _uri: [*:0]const u8, _recent_data: *gtk.RecentData) bool {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8, *gtk.RecentData) callconv(.c) bool, .{ .name = "gtk_recent_manager_add_full" });
        const ret = cFn(self, _uri, _recent_data);
        return ret;
    }
    /// method [add_item](https://docs.gtk.org/gtk4/method.RecentManager.add_item.html)
    pub fn addItem(self: *RecentManager, _uri: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_recent_manager_add_item" });
        const ret = cFn(self, _uri);
        return ret;
    }
    /// method [get_items](https://docs.gtk.org/gtk4/method.RecentManager.get_items.html)
    pub fn getItems(self: *RecentManager) ?*core.List {
        const cFn = @extern(*const fn (*RecentManager) callconv(.c) ?*core.List, .{ .name = "gtk_recent_manager_get_items" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_item](https://docs.gtk.org/gtk4/method.RecentManager.has_item.html)
    pub fn hasItem(self: *RecentManager, _uri: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_recent_manager_has_item" });
        const ret = cFn(self, _uri);
        return ret;
    }
    /// method [lookup_item](https://docs.gtk.org/gtk4/method.RecentManager.lookup_item.html)
    pub fn lookupItem(self: *RecentManager, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!?*gtk.RecentInfo {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8, *?*core.Error) callconv(.c) ?*gtk.RecentInfo, .{ .name = "gtk_recent_manager_lookup_item" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [move_item](https://docs.gtk.org/gtk4/method.RecentManager.move_item.html)
    pub fn moveItem(self: *RecentManager, _uri: [*:0]const u8, _new_uri: ?[*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8, ?[*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_recent_manager_move_item" });
        const ret = cFn(self, _uri, _new_uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [purge_items](https://docs.gtk.org/gtk4/method.RecentManager.purge_items.html)
    pub fn purgeItems(self: *RecentManager, _error: *?*core.Error) error{GError}!i32 {
        const cFn = @extern(*const fn (*RecentManager, *?*core.Error) callconv(.c) i32, .{ .name = "gtk_recent_manager_purge_items" });
        const ret = cFn(self, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [remove_item](https://docs.gtk.org/gtk4/method.RecentManager.remove_item.html)
    pub fn removeItem(self: *RecentManager, _uri: [*:0]const u8, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*RecentManager, [*:0]const u8, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_recent_manager_remove_item" });
        const ret = cFn(self, _uri, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.RecentManager.changed.html)
    pub fn changedV(self: *RecentManager) void {
        const class: *RecentManagerClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.RecentManager.changed.html)
    pub fn connectChanged(self: *RecentManager, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *RecentManager });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_recent_manager_get_type" });
        return cFn();
    }
};
pub const RecentManagerClass = extern struct {
    parent_class: gobject.ObjectClass,
    changed: ?*const fn (_manager: *gtk.RecentManager) callconv(.c) void,
    _gtk_recent1: ?*anyopaque,
    _gtk_recent2: ?*anyopaque,
    _gtk_recent3: ?*anyopaque,
    _gtk_recent4: ?*anyopaque,
};
/// Error [RecentManagerError](https://docs.gtk.org/gtk4/error.RecentManagerError.html)
pub const RecentManagerError = enum(u32) {
    not_found = 0,
    invalid_uri = 1,
    invalid_encoding = 2,
    not_registered = 3,
    read = 4,
    write = 5,
    unknown = 6,

    /// type func [quark](https://docs.gtk.org/gtk4/type_func.RecentManagerError.quark.html)
    pub fn quark() u32 {
        const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_recent_manager_error_quark" });
        const ret = cFn();
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_recent_manager_error_get_type" });
        return cFn();
    }
};
pub const RecentManagerPrivate = opaque {};
/// Struct [RequestedSize](https://docs.gtk.org/gtk4/struct.RequestedSize.html)
pub const RequestedSize = extern struct {
    data: ?*anyopaque,
    minimum_size: i32,
    natural_size: i32,
};
/// Struct [Requisition](https://docs.gtk.org/gtk4/struct.Requisition.html)
pub const Requisition = extern struct {
    width: i32,
    height: i32,
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Requisition.new.html)
    pub fn new() *Requisition {
        const cFn = @extern(*const fn () callconv(.c) *Requisition, .{ .name = "gtk_requisition_new" });
        const ret = cFn();
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.Requisition.copy.html)
    pub fn copy(self: *Requisition) *gtk.Requisition {
        const cFn = @extern(*const fn (*Requisition) callconv(.c) *gtk.Requisition, .{ .name = "gtk_requisition_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gtk4/method.Requisition.free.html)
    pub fn free(self: *Requisition) void {
        const cFn = @extern(*const fn (*Requisition) callconv(.c) void, .{ .name = "gtk_requisition_free" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_requisition_get_type" });
        return cFn();
    }
};
/// Enum [ResponseType](https://docs.gtk.org/gtk4/enum.ResponseType.html)
pub const ResponseType = enum(i32) {
    none = -1,
    reject = -2,
    accept = -3,
    delete_event = -4,
    ok = -5,
    cancel = -6,
    close = -7,
    yes = -8,
    no = -9,
    apply = -10,
    help = -11,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_response_type_get_type" });
        return cFn();
    }
};
/// Class [Revealer](https://docs.gtk.org/gtk4/class.Revealer.html)
/// - property [child](https://docs.gtk.org/gtk4/property.Revealer.child.html): (rw) `gtk.Widget`
/// - property [child-revealed](https://docs.gtk.org/gtk4/property.Revealer.child-revealed.html): (r-) `bool`
/// - property [reveal-child](https://docs.gtk.org/gtk4/property.Revealer.reveal-child.html): (rw) `bool`
/// - property [transition-duration](https://docs.gtk.org/gtk4/property.Revealer.transition-duration.html): (rw) `u32`
/// - property [transition-type](https://docs.gtk.org/gtk4/property.Revealer.transition-type.html): (rw) `gtk.RevealerTransitionType`
pub const Revealer = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Revealer.new.html)
    pub fn new() *Revealer {
        const cFn = @extern(*const fn () callconv(.c) *Revealer, .{ .name = "gtk_revealer_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Revealer.get_child.html)
    pub fn getChild(self: *Revealer) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Revealer) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_revealer_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_revealed](https://docs.gtk.org/gtk4/method.Revealer.get_child_revealed.html)
    pub fn getChildRevealed(self: *Revealer) bool {
        const cFn = @extern(*const fn (*Revealer) callconv(.c) bool, .{ .name = "gtk_revealer_get_child_revealed" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_reveal_child](https://docs.gtk.org/gtk4/method.Revealer.get_reveal_child.html)
    pub fn getRevealChild(self: *Revealer) bool {
        const cFn = @extern(*const fn (*Revealer) callconv(.c) bool, .{ .name = "gtk_revealer_get_reveal_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transition_duration](https://docs.gtk.org/gtk4/method.Revealer.get_transition_duration.html)
    pub fn getTransitionDuration(self: *Revealer) u32 {
        const cFn = @extern(*const fn (*Revealer) callconv(.c) u32, .{ .name = "gtk_revealer_get_transition_duration" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transition_type](https://docs.gtk.org/gtk4/method.Revealer.get_transition_type.html)
    pub fn getTransitionType(self: *Revealer) gtk.RevealerTransitionType {
        const cFn = @extern(*const fn (*Revealer) callconv(.c) gtk.RevealerTransitionType, .{ .name = "gtk_revealer_get_transition_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Revealer.set_child.html)
    pub fn setChild(self: *Revealer, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Revealer, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_revealer_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_reveal_child](https://docs.gtk.org/gtk4/method.Revealer.set_reveal_child.html)
    pub fn setRevealChild(self: *Revealer, _reveal_child: bool) void {
        const cFn = @extern(*const fn (*Revealer, bool) callconv(.c) void, .{ .name = "gtk_revealer_set_reveal_child" });
        const ret = cFn(self, _reveal_child);
        return ret;
    }
    /// method [set_transition_duration](https://docs.gtk.org/gtk4/method.Revealer.set_transition_duration.html)
    pub fn setTransitionDuration(self: *Revealer, _duration: u32) void {
        const cFn = @extern(*const fn (*Revealer, u32) callconv(.c) void, .{ .name = "gtk_revealer_set_transition_duration" });
        const ret = cFn(self, _duration);
        return ret;
    }
    /// method [set_transition_type](https://docs.gtk.org/gtk4/method.Revealer.set_transition_type.html)
    pub fn setTransitionType(self: *Revealer, _transition: gtk.RevealerTransitionType) void {
        const cFn = @extern(*const fn (*Revealer, gtk.RevealerTransitionType) callconv(.c) void, .{ .name = "gtk_revealer_set_transition_type" });
        const ret = cFn(self, _transition);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_revealer_get_type" });
        return cFn();
    }
};
/// Enum [RevealerTransitionType](https://docs.gtk.org/gtk4/enum.RevealerTransitionType.html)
pub const RevealerTransitionType = enum(u32) {
    none = 0,
    crossfade = 1,
    slide_right = 2,
    slide_left = 3,
    slide_up = 4,
    slide_down = 5,
    swing_right = 6,
    swing_left = 7,
    swing_up = 8,
    swing_down = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_revealer_transition_type_get_type" });
        return cFn();
    }
};
/// Iface [Root](https://docs.gtk.org/gtk4/iface.Root.html)
pub const Root = opaque {
    pub const Prerequisites = [_]type{ gtk.Native, gtk.Widget };
    /// method [get_display](https://docs.gtk.org/gtk4/method.Root.get_display.html)
    pub fn getDisplay(self: *Root) *gdk.Display {
        const cFn = @extern(*const fn (*Root) callconv(.c) *gdk.Display, .{ .name = "gtk_root_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus](https://docs.gtk.org/gtk4/method.Root.get_focus.html)
    pub fn getFocus(self: *Root) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Root) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_root_get_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_focus](https://docs.gtk.org/gtk4/method.Root.set_focus.html)
    pub fn setFocus(self: *Root, _focus: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Root, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_root_set_focus" });
        const ret = cFn(self, _focus);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_root_get_type" });
        return cFn();
    }
};
pub const RootInterface = opaque {};
/// const [STYLE_PROVIDER_PRIORITY_APPLICATION](https://docs.gtk.org/gtk4/const.STYLE_PROVIDER_PRIORITY_APPLICATION.html)
pub const STYLE_PROVIDER_PRIORITY_APPLICATION = 600;
/// const [STYLE_PROVIDER_PRIORITY_FALLBACK](https://docs.gtk.org/gtk4/const.STYLE_PROVIDER_PRIORITY_FALLBACK.html)
pub const STYLE_PROVIDER_PRIORITY_FALLBACK = 1;
/// const [STYLE_PROVIDER_PRIORITY_SETTINGS](https://docs.gtk.org/gtk4/const.STYLE_PROVIDER_PRIORITY_SETTINGS.html)
pub const STYLE_PROVIDER_PRIORITY_SETTINGS = 400;
/// const [STYLE_PROVIDER_PRIORITY_THEME](https://docs.gtk.org/gtk4/const.STYLE_PROVIDER_PRIORITY_THEME.html)
pub const STYLE_PROVIDER_PRIORITY_THEME = 200;
/// const [STYLE_PROVIDER_PRIORITY_USER](https://docs.gtk.org/gtk4/const.STYLE_PROVIDER_PRIORITY_USER.html)
pub const STYLE_PROVIDER_PRIORITY_USER = 800;
/// Class [Scale](https://docs.gtk.org/gtk4/class.Scale.html)
/// - property [digits](https://docs.gtk.org/gtk4/property.Scale.digits.html): (rw) `i32`
/// - property [draw-value](https://docs.gtk.org/gtk4/property.Scale.draw-value.html): (rw) `bool`
/// - property [has-origin](https://docs.gtk.org/gtk4/property.Scale.has-origin.html): (rw) `bool`
/// - property [value-pos](https://docs.gtk.org/gtk4/property.Scale.value-pos.html): (rw) `gtk.PositionType`
pub const Scale = extern struct {
    parent_instance: gtk.Range,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Range;
    pub const Class = gtk.ScaleClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Scale.new.html)
    pub fn new(_orientation: gtk.Orientation, _adjustment: ?*gtk.Adjustment) *Scale {
        const cFn = @extern(*const fn (gtk.Orientation, ?*gtk.Adjustment) callconv(.c) *Scale, .{ .name = "gtk_scale_new" });
        const ret = cFn(_orientation, _adjustment);
        return ret;
    }
    /// ctor [new_with_range](https://docs.gtk.org/gtk4/ctor.Scale.new_with_range.html)
    pub fn newWithRange(_orientation: gtk.Orientation, _min: f64, _max: f64, _step: f64) *Scale {
        const cFn = @extern(*const fn (gtk.Orientation, f64, f64, f64) callconv(.c) *Scale, .{ .name = "gtk_scale_new_with_range" });
        const ret = cFn(_orientation, _min, _max, _step);
        return ret;
    }
    /// method [add_mark](https://docs.gtk.org/gtk4/method.Scale.add_mark.html)
    pub fn addMark(self: *Scale, _value: f64, _position: gtk.PositionType, _markup: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Scale, f64, gtk.PositionType, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_scale_add_mark" });
        const ret = cFn(self, _value, _position, _markup);
        return ret;
    }
    /// method [clear_marks](https://docs.gtk.org/gtk4/method.Scale.clear_marks.html)
    pub fn clearMarks(self: *Scale) void {
        const cFn = @extern(*const fn (*Scale) callconv(.c) void, .{ .name = "gtk_scale_clear_marks" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_digits](https://docs.gtk.org/gtk4/method.Scale.get_digits.html)
    pub fn getDigits(self: *Scale) i32 {
        const cFn = @extern(*const fn (*Scale) callconv(.c) i32, .{ .name = "gtk_scale_get_digits" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_draw_value](https://docs.gtk.org/gtk4/method.Scale.get_draw_value.html)
    pub fn getDrawValue(self: *Scale) bool {
        const cFn = @extern(*const fn (*Scale) callconv(.c) bool, .{ .name = "gtk_scale_get_draw_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_origin](https://docs.gtk.org/gtk4/method.Scale.get_has_origin.html)
    pub fn getHasOrigin(self: *Scale) bool {
        const cFn = @extern(*const fn (*Scale) callconv(.c) bool, .{ .name = "gtk_scale_get_has_origin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout](https://docs.gtk.org/gtk4/method.Scale.get_layout.html)
    pub fn getLayout(self: *Scale) ?*pango.Layout {
        const cFn = @extern(*const fn (*Scale) callconv(.c) ?*pango.Layout, .{ .name = "gtk_scale_get_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_offsets](https://docs.gtk.org/gtk4/method.Scale.get_layout_offsets.html)
    pub fn getLayoutOffsets(self: *Scale) struct {
        ret: void,
        x: i32,
        y: i32,
    } {
        var x_out: i32 = undefined;
        const _x = &x_out;
        var y_out: i32 = undefined;
        const _y = &y_out;
        const cFn = @extern(*const fn (*Scale, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_scale_get_layout_offsets" });
        const ret = cFn(self, _x, _y);
        return .{ .ret = ret, .x = x_out, .y = y_out };
    }
    /// method [get_value_pos](https://docs.gtk.org/gtk4/method.Scale.get_value_pos.html)
    pub fn getValuePos(self: *Scale) gtk.PositionType {
        const cFn = @extern(*const fn (*Scale) callconv(.c) gtk.PositionType, .{ .name = "gtk_scale_get_value_pos" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_digits](https://docs.gtk.org/gtk4/method.Scale.set_digits.html)
    pub fn setDigits(self: *Scale, _digits: i32) void {
        const cFn = @extern(*const fn (*Scale, i32) callconv(.c) void, .{ .name = "gtk_scale_set_digits" });
        const ret = cFn(self, _digits);
        return ret;
    }
    /// method [set_draw_value](https://docs.gtk.org/gtk4/method.Scale.set_draw_value.html)
    pub fn setDrawValue(self: *Scale, _draw_value: bool) void {
        const cFn = @extern(*const fn (*Scale, bool) callconv(.c) void, .{ .name = "gtk_scale_set_draw_value" });
        const ret = cFn(self, _draw_value);
        return ret;
    }
    /// method [set_format_value_func](https://docs.gtk.org/gtk4/method.Scale.set_format_value_func.html)
    pub fn setFormatValueFunc(self: *Scale, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ [*:0]u8, *gtk.Scale, f64 });
        const _func: ?gtk.ScaleFormatValueFunc = @ptrCast(closure_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const _destroy_notify: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
        const cFn = @extern(*const fn (*Scale, ?gtk.ScaleFormatValueFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_scale_set_format_value_func" });
        const ret = cFn(self, _func, @ptrCast(_user_data), _destroy_notify);
        return ret;
    }
    /// method [set_has_origin](https://docs.gtk.org/gtk4/method.Scale.set_has_origin.html)
    pub fn setHasOrigin(self: *Scale, _has_origin: bool) void {
        const cFn = @extern(*const fn (*Scale, bool) callconv(.c) void, .{ .name = "gtk_scale_set_has_origin" });
        const ret = cFn(self, _has_origin);
        return ret;
    }
    /// method [set_value_pos](https://docs.gtk.org/gtk4/method.Scale.set_value_pos.html)
    pub fn setValuePos(self: *Scale, _pos: gtk.PositionType) void {
        const cFn = @extern(*const fn (*Scale, gtk.PositionType) callconv(.c) void, .{ .name = "gtk_scale_set_value_pos" });
        const ret = cFn(self, _pos);
        return ret;
    }
    /// vfunc [get_layout_offsets](https://docs.gtk.org/gtk4/vfunc.Scale.get_layout_offsets.html)
    pub fn getLayoutOffsetsV(self: *Scale, _x: ?*i32, _y: ?*i32) void {
        const class: *ScaleClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_layout_offsets.?;
        const ret = vFn(self, _x, _y);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scale_get_type" });
        return cFn();
    }
};
/// Class [ScaleButton](https://docs.gtk.org/gtk4/class.ScaleButton.html)
/// - property [active](https://docs.gtk.org/gtk4/property.ScaleButton.active.html): (r-) `bool`
/// - property [adjustment](https://docs.gtk.org/gtk4/property.ScaleButton.adjustment.html): (rw) `gtk.Adjustment`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.ScaleButton.has-frame.html): (rw) `bool`
/// - property [icons](https://docs.gtk.org/gtk4/property.ScaleButton.icons.html): (rw) `[*:null]?[*:0]const u8`
/// - property [value](https://docs.gtk.org/gtk4/property.ScaleButton.value.html): (rw) `f64`
pub const ScaleButton = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ScaleButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ScaleButton.new.html)
    pub fn new(_min: f64, _max: f64, _step: f64, _icons: ?[*:null]?[*:0]const u8) *ScaleButton {
        const cFn = @extern(*const fn (f64, f64, f64, ?[*:null]?[*:0]const u8) callconv(.c) *ScaleButton, .{ .name = "gtk_scale_button_new" });
        const ret = cFn(_min, _max, _step, _icons);
        return ret;
    }
    /// method [get_active](https://docs.gtk.org/gtk4/method.ScaleButton.get_active.html)
    pub fn getActive(self: *ScaleButton) bool {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) bool, .{ .name = "gtk_scale_button_get_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_adjustment](https://docs.gtk.org/gtk4/method.ScaleButton.get_adjustment.html)
    pub fn getAdjustment(self: *ScaleButton) *gtk.Adjustment {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_scale_button_get_adjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_frame](https://docs.gtk.org/gtk4/method.ScaleButton.get_has_frame.html)
    pub fn getHasFrame(self: *ScaleButton) bool {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) bool, .{ .name = "gtk_scale_button_get_has_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_minus_button](https://docs.gtk.org/gtk4/method.ScaleButton.get_minus_button.html)
    pub fn getMinusButton(self: *ScaleButton) *gtk.Button {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) *gtk.Button, .{ .name = "gtk_scale_button_get_minus_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_plus_button](https://docs.gtk.org/gtk4/method.ScaleButton.get_plus_button.html)
    pub fn getPlusButton(self: *ScaleButton) *gtk.Button {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) *gtk.Button, .{ .name = "gtk_scale_button_get_plus_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_popup](https://docs.gtk.org/gtk4/method.ScaleButton.get_popup.html)
    pub fn getPopup(self: *ScaleButton) *gtk.Widget {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) *gtk.Widget, .{ .name = "gtk_scale_button_get_popup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.ScaleButton.get_value.html)
    pub fn getValue(self: *ScaleButton) f64 {
        const cFn = @extern(*const fn (*ScaleButton) callconv(.c) f64, .{ .name = "gtk_scale_button_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_adjustment](https://docs.gtk.org/gtk4/method.ScaleButton.set_adjustment.html)
    pub fn setAdjustment(self: *ScaleButton, _adjustment: *gtk.Adjustment) void {
        const cFn = @extern(*const fn (*ScaleButton, *gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scale_button_set_adjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [set_has_frame](https://docs.gtk.org/gtk4/method.ScaleButton.set_has_frame.html)
    pub fn setHasFrame(self: *ScaleButton, _has_frame: bool) void {
        const cFn = @extern(*const fn (*ScaleButton, bool) callconv(.c) void, .{ .name = "gtk_scale_button_set_has_frame" });
        const ret = cFn(self, _has_frame);
        return ret;
    }
    /// method [set_icons](https://docs.gtk.org/gtk4/method.ScaleButton.set_icons.html)
    pub fn setIcons(self: *ScaleButton, _icons: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*ScaleButton, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_scale_button_set_icons" });
        const ret = cFn(self, _icons);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gtk4/method.ScaleButton.set_value.html)
    pub fn setValue(self: *ScaleButton, _value: f64) void {
        const cFn = @extern(*const fn (*ScaleButton, f64) callconv(.c) void, .{ .name = "gtk_scale_button_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// vfunc [value_changed](https://docs.gtk.org/gtk4/vfunc.ScaleButton.value_changed.html)
    pub fn valueChangedV(self: *ScaleButton, _value: f64) void {
        const class: *ScaleButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_changed.?;
        const ret = vFn(self, _value);
        return ret;
    }
    /// signal [popdown](https://docs.gtk.org/gtk4/signal.ScaleButton.popdown.html)
    pub fn connectPopdown(self: *ScaleButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("popdown", handler, args, flags, &.{ void, *ScaleButton });
    }
    /// signal [popup](https://docs.gtk.org/gtk4/signal.ScaleButton.popup.html)
    pub fn connectPopup(self: *ScaleButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("popup", handler, args, flags, &.{ void, *ScaleButton });
    }
    /// signal [value-changed](https://docs.gtk.org/gtk4/signal.ScaleButton.value-changed.html)
    pub fn connectValueChanged(self: *ScaleButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("value-changed", handler, args, flags, &.{ void, *ScaleButton, f64 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scale_button_get_type" });
        return cFn();
    }
};
pub const ScaleButtonClass = extern struct {
    parent_class: gtk.WidgetClass,
    value_changed: ?*const fn (_button: *gtk.ScaleButton, _value: f64) callconv(.c) void,
    padding: [8]?*anyopaque,
};
pub const ScaleClass = extern struct {
    parent_class: gtk.RangeClass,
    get_layout_offsets: ?*const fn (_scale: *gtk.Scale, _x: ?*i32, _y: ?*i32) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// callback [ScaleFormatValueFunc](https://docs.gtk.org/gtk4/callback.ScaleFormatValueFunc.html)
pub const ScaleFormatValueFunc = *const fn (_scale: *gtk.Scale, _value: f64, _user_data: ?*anyopaque) callconv(.c) [*:0]u8;
/// Struct [ScrollInfo](https://docs.gtk.org/gtk4/struct.ScrollInfo.html)
pub const ScrollInfo = opaque {
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ScrollInfo.new.html)
    pub fn new() *ScrollInfo {
        const cFn = @extern(*const fn () callconv(.c) *ScrollInfo, .{ .name = "gtk_scroll_info_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_enable_horizontal](https://docs.gtk.org/gtk4/method.ScrollInfo.get_enable_horizontal.html)
    pub fn getEnableHorizontal(self: *ScrollInfo) bool {
        const cFn = @extern(*const fn (*ScrollInfo) callconv(.c) bool, .{ .name = "gtk_scroll_info_get_enable_horizontal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enable_vertical](https://docs.gtk.org/gtk4/method.ScrollInfo.get_enable_vertical.html)
    pub fn getEnableVertical(self: *ScrollInfo) bool {
        const cFn = @extern(*const fn (*ScrollInfo) callconv(.c) bool, .{ .name = "gtk_scroll_info_get_enable_vertical" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gtk4/method.ScrollInfo.ref.html)
    pub fn ref(self: *ScrollInfo) *gtk.ScrollInfo {
        const cFn = @extern(*const fn (*ScrollInfo) callconv(.c) *gtk.ScrollInfo, .{ .name = "gtk_scroll_info_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_enable_horizontal](https://docs.gtk.org/gtk4/method.ScrollInfo.set_enable_horizontal.html)
    pub fn setEnableHorizontal(self: *ScrollInfo, _horizontal: bool) void {
        const cFn = @extern(*const fn (*ScrollInfo, bool) callconv(.c) void, .{ .name = "gtk_scroll_info_set_enable_horizontal" });
        const ret = cFn(self, _horizontal);
        return ret;
    }
    /// method [set_enable_vertical](https://docs.gtk.org/gtk4/method.ScrollInfo.set_enable_vertical.html)
    pub fn setEnableVertical(self: *ScrollInfo, _vertical: bool) void {
        const cFn = @extern(*const fn (*ScrollInfo, bool) callconv(.c) void, .{ .name = "gtk_scroll_info_set_enable_vertical" });
        const ret = cFn(self, _vertical);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gtk4/method.ScrollInfo.unref.html)
    pub fn unref(self: *ScrollInfo) void {
        const cFn = @extern(*const fn (*ScrollInfo) callconv(.c) void, .{ .name = "gtk_scroll_info_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scroll_info_get_type" });
        return cFn();
    }
};
/// Enum [ScrollStep](https://docs.gtk.org/gtk4/enum.ScrollStep.html)
pub const ScrollStep = enum(u32) {
    steps = 0,
    pages = 1,
    ends = 2,
    horizontal_steps = 3,
    horizontal_pages = 4,
    horizontal_ends = 5,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scroll_step_get_type" });
        return cFn();
    }
};
/// Enum [ScrollType](https://docs.gtk.org/gtk4/enum.ScrollType.html)
pub const ScrollType = enum(u32) {
    none = 0,
    jump = 1,
    step_backward = 2,
    step_forward = 3,
    page_backward = 4,
    page_forward = 5,
    step_up = 6,
    step_down = 7,
    page_up = 8,
    page_down = 9,
    step_left = 10,
    step_right = 11,
    page_left = 12,
    page_right = 13,
    start = 14,
    end = 15,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scroll_type_get_type" });
        return cFn();
    }
};
/// Iface [Scrollable](https://docs.gtk.org/gtk4/iface.Scrollable.html)
/// - property [hadjustment](https://docs.gtk.org/gtk4/property.Scrollable.hadjustment.html): (rw) `gtk.Adjustment`
/// - property [hscroll-policy](https://docs.gtk.org/gtk4/property.Scrollable.hscroll-policy.html): (rw) `gtk.ScrollablePolicy`
/// - property [vadjustment](https://docs.gtk.org/gtk4/property.Scrollable.vadjustment.html): (rw) `gtk.Adjustment`
/// - property [vscroll-policy](https://docs.gtk.org/gtk4/property.Scrollable.vscroll-policy.html): (rw) `gtk.ScrollablePolicy`
pub const Scrollable = opaque {
    /// method [get_border](https://docs.gtk.org/gtk4/method.Scrollable.get_border.html)
    pub fn getBorder(self: *Scrollable, _border: *gtk.Border) bool {
        const cFn = @extern(*const fn (*Scrollable, *gtk.Border) callconv(.c) bool, .{ .name = "gtk_scrollable_get_border" });
        const ret = cFn(self, _border);
        return ret;
    }
    /// method [get_hadjustment](https://docs.gtk.org/gtk4/method.Scrollable.get_hadjustment.html)
    pub fn getHadjustment(self: *Scrollable) ?*gtk.Adjustment {
        const cFn = @extern(*const fn (*Scrollable) callconv(.c) ?*gtk.Adjustment, .{ .name = "gtk_scrollable_get_hadjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hscroll_policy](https://docs.gtk.org/gtk4/method.Scrollable.get_hscroll_policy.html)
    pub fn getHscrollPolicy(self: *Scrollable) gtk.ScrollablePolicy {
        const cFn = @extern(*const fn (*Scrollable) callconv(.c) gtk.ScrollablePolicy, .{ .name = "gtk_scrollable_get_hscroll_policy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vadjustment](https://docs.gtk.org/gtk4/method.Scrollable.get_vadjustment.html)
    pub fn getVadjustment(self: *Scrollable) ?*gtk.Adjustment {
        const cFn = @extern(*const fn (*Scrollable) callconv(.c) ?*gtk.Adjustment, .{ .name = "gtk_scrollable_get_vadjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vscroll_policy](https://docs.gtk.org/gtk4/method.Scrollable.get_vscroll_policy.html)
    pub fn getVscrollPolicy(self: *Scrollable) gtk.ScrollablePolicy {
        const cFn = @extern(*const fn (*Scrollable) callconv(.c) gtk.ScrollablePolicy, .{ .name = "gtk_scrollable_get_vscroll_policy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_hadjustment](https://docs.gtk.org/gtk4/method.Scrollable.set_hadjustment.html)
    pub fn setHadjustment(self: *Scrollable, _hadjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*Scrollable, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scrollable_set_hadjustment" });
        const ret = cFn(self, _hadjustment);
        return ret;
    }
    /// method [set_hscroll_policy](https://docs.gtk.org/gtk4/method.Scrollable.set_hscroll_policy.html)
    pub fn setHscrollPolicy(self: *Scrollable, _policy: gtk.ScrollablePolicy) void {
        const cFn = @extern(*const fn (*Scrollable, gtk.ScrollablePolicy) callconv(.c) void, .{ .name = "gtk_scrollable_set_hscroll_policy" });
        const ret = cFn(self, _policy);
        return ret;
    }
    /// method [set_vadjustment](https://docs.gtk.org/gtk4/method.Scrollable.set_vadjustment.html)
    pub fn setVadjustment(self: *Scrollable, _vadjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*Scrollable, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scrollable_set_vadjustment" });
        const ret = cFn(self, _vadjustment);
        return ret;
    }
    /// method [set_vscroll_policy](https://docs.gtk.org/gtk4/method.Scrollable.set_vscroll_policy.html)
    pub fn setVscrollPolicy(self: *Scrollable, _policy: gtk.ScrollablePolicy) void {
        const cFn = @extern(*const fn (*Scrollable, gtk.ScrollablePolicy) callconv(.c) void, .{ .name = "gtk_scrollable_set_vscroll_policy" });
        const ret = cFn(self, _policy);
        return ret;
    }
    /// vfunc [get_border](https://docs.gtk.org/gtk4/vfunc.Scrollable.get_border.html)
    pub fn getBorderV(self: *Scrollable, _border: *gtk.Border) bool {
        const class: *ScrollableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_border.?;
        const ret = vFn(self, _border);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scrollable_get_type" });
        return cFn();
    }
};
pub const ScrollableInterface = extern struct {
    base_iface: gobject.TypeInterface,
    get_border: ?*const fn (_scrollable: *gtk.Scrollable, _border: *gtk.Border) callconv(.c) bool,
};
/// Enum [ScrollablePolicy](https://docs.gtk.org/gtk4/enum.ScrollablePolicy.html)
pub const ScrollablePolicy = enum(u32) {
    minimum = 0,
    natural = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scrollable_policy_get_type" });
        return cFn();
    }
};
/// Class [Scrollbar](https://docs.gtk.org/gtk4/class.Scrollbar.html)
/// - property [adjustment](https://docs.gtk.org/gtk4/property.Scrollbar.adjustment.html): (rw) `gtk.Adjustment`
pub const Scrollbar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Scrollbar.new.html)
    pub fn new(_orientation: gtk.Orientation, _adjustment: ?*gtk.Adjustment) *Scrollbar {
        const cFn = @extern(*const fn (gtk.Orientation, ?*gtk.Adjustment) callconv(.c) *Scrollbar, .{ .name = "gtk_scrollbar_new" });
        const ret = cFn(_orientation, _adjustment);
        return ret;
    }
    /// method [get_adjustment](https://docs.gtk.org/gtk4/method.Scrollbar.get_adjustment.html)
    pub fn getAdjustment(self: *Scrollbar) *gtk.Adjustment {
        const cFn = @extern(*const fn (*Scrollbar) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_scrollbar_get_adjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_adjustment](https://docs.gtk.org/gtk4/method.Scrollbar.set_adjustment.html)
    pub fn setAdjustment(self: *Scrollbar, _adjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*Scrollbar, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scrollbar_set_adjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scrollbar_get_type" });
        return cFn();
    }
};
/// Class [ScrolledWindow](https://docs.gtk.org/gtk4/class.ScrolledWindow.html)
/// - property [child](https://docs.gtk.org/gtk4/property.ScrolledWindow.child.html): (rw) `gtk.Widget`
/// - property [hadjustment](https://docs.gtk.org/gtk4/property.ScrolledWindow.hadjustment.html): (rw) `gtk.Adjustment`
/// - property [has-frame](https://docs.gtk.org/gtk4/property.ScrolledWindow.has-frame.html): (rw) `bool`
/// - property [hscrollbar-policy](https://docs.gtk.org/gtk4/property.ScrolledWindow.hscrollbar-policy.html): (rw) `gtk.PolicyType`
/// - property [kinetic-scrolling](https://docs.gtk.org/gtk4/property.ScrolledWindow.kinetic-scrolling.html): (rw) `bool`
/// - property [max-content-height](https://docs.gtk.org/gtk4/property.ScrolledWindow.max-content-height.html): (rw) `i32`
/// - property [max-content-width](https://docs.gtk.org/gtk4/property.ScrolledWindow.max-content-width.html): (rw) `i32`
/// - property [min-content-height](https://docs.gtk.org/gtk4/property.ScrolledWindow.min-content-height.html): (rw) `i32`
/// - property [min-content-width](https://docs.gtk.org/gtk4/property.ScrolledWindow.min-content-width.html): (rw) `i32`
/// - property [overlay-scrolling](https://docs.gtk.org/gtk4/property.ScrolledWindow.overlay-scrolling.html): (rw) `bool`
/// - property [propagate-natural-height](https://docs.gtk.org/gtk4/property.ScrolledWindow.propagate-natural-height.html): (rw) `bool`
/// - property [propagate-natural-width](https://docs.gtk.org/gtk4/property.ScrolledWindow.propagate-natural-width.html): (rw) `bool`
/// - property [vadjustment](https://docs.gtk.org/gtk4/property.ScrolledWindow.vadjustment.html): (rw) `gtk.Adjustment`
/// - property [vscrollbar-policy](https://docs.gtk.org/gtk4/property.ScrolledWindow.vscrollbar-policy.html): (rw) `gtk.PolicyType`
/// - property [window-placement](https://docs.gtk.org/gtk4/property.ScrolledWindow.window-placement.html): (rw) `gtk.CornerType`
pub const ScrolledWindow = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ScrolledWindow.new.html)
    pub fn new() *ScrolledWindow {
        const cFn = @extern(*const fn () callconv(.c) *ScrolledWindow, .{ .name = "gtk_scrolled_window_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_child.html)
    pub fn getChild(self: *ScrolledWindow) ?*gtk.Widget {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_scrolled_window_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hadjustment](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_hadjustment.html)
    pub fn getHadjustment(self: *ScrolledWindow) *gtk.Adjustment {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_scrolled_window_get_hadjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_frame](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_has_frame.html)
    pub fn getHasFrame(self: *ScrolledWindow) bool {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) bool, .{ .name = "gtk_scrolled_window_get_has_frame" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hscrollbar](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_hscrollbar.html)
    pub fn getHscrollbar(self: *ScrolledWindow) *gtk.Widget {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) *gtk.Widget, .{ .name = "gtk_scrolled_window_get_hscrollbar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_kinetic_scrolling](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_kinetic_scrolling.html)
    pub fn getKineticScrolling(self: *ScrolledWindow) bool {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) bool, .{ .name = "gtk_scrolled_window_get_kinetic_scrolling" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_content_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_max_content_height.html)
    pub fn getMaxContentHeight(self: *ScrolledWindow) i32 {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) i32, .{ .name = "gtk_scrolled_window_get_max_content_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_content_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_max_content_width.html)
    pub fn getMaxContentWidth(self: *ScrolledWindow) i32 {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) i32, .{ .name = "gtk_scrolled_window_get_max_content_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_content_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_min_content_height.html)
    pub fn getMinContentHeight(self: *ScrolledWindow) i32 {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) i32, .{ .name = "gtk_scrolled_window_get_min_content_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_min_content_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_min_content_width.html)
    pub fn getMinContentWidth(self: *ScrolledWindow) i32 {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) i32, .{ .name = "gtk_scrolled_window_get_min_content_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_overlay_scrolling](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_overlay_scrolling.html)
    pub fn getOverlayScrolling(self: *ScrolledWindow) bool {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) bool, .{ .name = "gtk_scrolled_window_get_overlay_scrolling" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_placement](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_placement.html)
    pub fn getPlacement(self: *ScrolledWindow) gtk.CornerType {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) gtk.CornerType, .{ .name = "gtk_scrolled_window_get_placement" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_policy](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_policy.html)
    pub fn getPolicy(self: *ScrolledWindow) struct {
        ret: void,
        hscrollbar_policy: gtk.PolicyType,
        vscrollbar_policy: gtk.PolicyType,
    } {
        var hscrollbar_policy_out: gtk.PolicyType = undefined;
        const _hscrollbar_policy = &hscrollbar_policy_out;
        var vscrollbar_policy_out: gtk.PolicyType = undefined;
        const _vscrollbar_policy = &vscrollbar_policy_out;
        const cFn = @extern(*const fn (*ScrolledWindow, ?*gtk.PolicyType, ?*gtk.PolicyType) callconv(.c) void, .{ .name = "gtk_scrolled_window_get_policy" });
        const ret = cFn(self, _hscrollbar_policy, _vscrollbar_policy);
        return .{ .ret = ret, .hscrollbar_policy = hscrollbar_policy_out, .vscrollbar_policy = vscrollbar_policy_out };
    }
    /// method [get_propagate_natural_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_propagate_natural_height.html)
    pub fn getPropagateNaturalHeight(self: *ScrolledWindow) bool {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) bool, .{ .name = "gtk_scrolled_window_get_propagate_natural_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_propagate_natural_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_propagate_natural_width.html)
    pub fn getPropagateNaturalWidth(self: *ScrolledWindow) bool {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) bool, .{ .name = "gtk_scrolled_window_get_propagate_natural_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vadjustment](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_vadjustment.html)
    pub fn getVadjustment(self: *ScrolledWindow) *gtk.Adjustment {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_scrolled_window_get_vadjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vscrollbar](https://docs.gtk.org/gtk4/method.ScrolledWindow.get_vscrollbar.html)
    pub fn getVscrollbar(self: *ScrolledWindow) *gtk.Widget {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) *gtk.Widget, .{ .name = "gtk_scrolled_window_get_vscrollbar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_child.html)
    pub fn setChild(self: *ScrolledWindow, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*ScrolledWindow, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_hadjustment](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_hadjustment.html)
    pub fn setHadjustment(self: *ScrolledWindow, _hadjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*ScrolledWindow, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_hadjustment" });
        const ret = cFn(self, _hadjustment);
        return ret;
    }
    /// method [set_has_frame](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_has_frame.html)
    pub fn setHasFrame(self: *ScrolledWindow, _has_frame: bool) void {
        const cFn = @extern(*const fn (*ScrolledWindow, bool) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_has_frame" });
        const ret = cFn(self, _has_frame);
        return ret;
    }
    /// method [set_kinetic_scrolling](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_kinetic_scrolling.html)
    pub fn setKineticScrolling(self: *ScrolledWindow, _kinetic_scrolling: bool) void {
        const cFn = @extern(*const fn (*ScrolledWindow, bool) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_kinetic_scrolling" });
        const ret = cFn(self, _kinetic_scrolling);
        return ret;
    }
    /// method [set_max_content_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_max_content_height.html)
    pub fn setMaxContentHeight(self: *ScrolledWindow, _height: i32) void {
        const cFn = @extern(*const fn (*ScrolledWindow, i32) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_max_content_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_max_content_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_max_content_width.html)
    pub fn setMaxContentWidth(self: *ScrolledWindow, _width: i32) void {
        const cFn = @extern(*const fn (*ScrolledWindow, i32) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_max_content_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    /// method [set_min_content_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_min_content_height.html)
    pub fn setMinContentHeight(self: *ScrolledWindow, _height: i32) void {
        const cFn = @extern(*const fn (*ScrolledWindow, i32) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_min_content_height" });
        const ret = cFn(self, _height);
        return ret;
    }
    /// method [set_min_content_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_min_content_width.html)
    pub fn setMinContentWidth(self: *ScrolledWindow, _width: i32) void {
        const cFn = @extern(*const fn (*ScrolledWindow, i32) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_min_content_width" });
        const ret = cFn(self, _width);
        return ret;
    }
    /// method [set_overlay_scrolling](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_overlay_scrolling.html)
    pub fn setOverlayScrolling(self: *ScrolledWindow, _overlay_scrolling: bool) void {
        const cFn = @extern(*const fn (*ScrolledWindow, bool) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_overlay_scrolling" });
        const ret = cFn(self, _overlay_scrolling);
        return ret;
    }
    /// method [set_placement](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_placement.html)
    pub fn setPlacement(self: *ScrolledWindow, _window_placement: gtk.CornerType) void {
        const cFn = @extern(*const fn (*ScrolledWindow, gtk.CornerType) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_placement" });
        const ret = cFn(self, _window_placement);
        return ret;
    }
    /// method [set_policy](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_policy.html)
    pub fn setPolicy(self: *ScrolledWindow, _hscrollbar_policy: gtk.PolicyType, _vscrollbar_policy: gtk.PolicyType) void {
        const cFn = @extern(*const fn (*ScrolledWindow, gtk.PolicyType, gtk.PolicyType) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_policy" });
        const ret = cFn(self, _hscrollbar_policy, _vscrollbar_policy);
        return ret;
    }
    /// method [set_propagate_natural_height](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_propagate_natural_height.html)
    pub fn setPropagateNaturalHeight(self: *ScrolledWindow, _propagate: bool) void {
        const cFn = @extern(*const fn (*ScrolledWindow, bool) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_propagate_natural_height" });
        const ret = cFn(self, _propagate);
        return ret;
    }
    /// method [set_propagate_natural_width](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_propagate_natural_width.html)
    pub fn setPropagateNaturalWidth(self: *ScrolledWindow, _propagate: bool) void {
        const cFn = @extern(*const fn (*ScrolledWindow, bool) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_propagate_natural_width" });
        const ret = cFn(self, _propagate);
        return ret;
    }
    /// method [set_vadjustment](https://docs.gtk.org/gtk4/method.ScrolledWindow.set_vadjustment.html)
    pub fn setVadjustment(self: *ScrolledWindow, _vadjustment: ?*gtk.Adjustment) void {
        const cFn = @extern(*const fn (*ScrolledWindow, ?*gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_scrolled_window_set_vadjustment" });
        const ret = cFn(self, _vadjustment);
        return ret;
    }
    /// method [unset_placement](https://docs.gtk.org/gtk4/method.ScrolledWindow.unset_placement.html)
    pub fn unsetPlacement(self: *ScrolledWindow) void {
        const cFn = @extern(*const fn (*ScrolledWindow) callconv(.c) void, .{ .name = "gtk_scrolled_window_unset_placement" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [edge-overshot](https://docs.gtk.org/gtk4/signal.ScrolledWindow.edge-overshot.html)
    pub fn connectEdgeOvershot(self: *ScrolledWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("edge-overshot", handler, args, flags, &.{ void, *ScrolledWindow, gtk.PositionType });
    }
    /// signal [edge-reached](https://docs.gtk.org/gtk4/signal.ScrolledWindow.edge-reached.html)
    pub fn connectEdgeReached(self: *ScrolledWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("edge-reached", handler, args, flags, &.{ void, *ScrolledWindow, gtk.PositionType });
    }
    /// signal [move-focus-out](https://docs.gtk.org/gtk4/signal.ScrolledWindow.move-focus-out.html)
    pub fn connectMoveFocusOut(self: *ScrolledWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-focus-out", handler, args, flags, &.{ void, *ScrolledWindow, gtk.DirectionType });
    }
    /// signal [scroll-child](https://docs.gtk.org/gtk4/signal.ScrolledWindow.scroll-child.html)
    pub fn connectScrollChild(self: *ScrolledWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("scroll-child", handler, args, flags, &.{ bool, *ScrolledWindow, gtk.ScrollType, bool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_scrolled_window_get_type" });
        return cFn();
    }
};
/// Class [SearchBar](https://docs.gtk.org/gtk4/class.SearchBar.html)
/// - property [child](https://docs.gtk.org/gtk4/property.SearchBar.child.html): (rw) `gtk.Widget`
/// - property [key-capture-widget](https://docs.gtk.org/gtk4/property.SearchBar.key-capture-widget.html): (rw) `gtk.Widget`
/// - property [search-mode-enabled](https://docs.gtk.org/gtk4/property.SearchBar.search-mode-enabled.html): (rw) `bool`
/// - property [show-close-button](https://docs.gtk.org/gtk4/property.SearchBar.show-close-button.html): (rw) `bool`
pub const SearchBar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SearchBar.new.html)
    pub fn new() *SearchBar {
        const cFn = @extern(*const fn () callconv(.c) *SearchBar, .{ .name = "gtk_search_bar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [connect_entry](https://docs.gtk.org/gtk4/method.SearchBar.connect_entry.html)
    pub fn connectEntry(self: *SearchBar, _entry: *gtk.Editable) void {
        const cFn = @extern(*const fn (*SearchBar, *gtk.Editable) callconv(.c) void, .{ .name = "gtk_search_bar_connect_entry" });
        const ret = cFn(self, _entry);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.SearchBar.get_child.html)
    pub fn getChild(self: *SearchBar) ?*gtk.Widget {
        const cFn = @extern(*const fn (*SearchBar) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_search_bar_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_key_capture_widget](https://docs.gtk.org/gtk4/method.SearchBar.get_key_capture_widget.html)
    pub fn getKeyCaptureWidget(self: *SearchBar) ?*gtk.Widget {
        const cFn = @extern(*const fn (*SearchBar) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_search_bar_get_key_capture_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_search_mode](https://docs.gtk.org/gtk4/method.SearchBar.get_search_mode.html)
    pub fn getSearchMode(self: *SearchBar) bool {
        const cFn = @extern(*const fn (*SearchBar) callconv(.c) bool, .{ .name = "gtk_search_bar_get_search_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_show_close_button](https://docs.gtk.org/gtk4/method.SearchBar.get_show_close_button.html)
    pub fn getShowCloseButton(self: *SearchBar) bool {
        const cFn = @extern(*const fn (*SearchBar) callconv(.c) bool, .{ .name = "gtk_search_bar_get_show_close_button" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.SearchBar.set_child.html)
    pub fn setChild(self: *SearchBar, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*SearchBar, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_search_bar_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_key_capture_widget](https://docs.gtk.org/gtk4/method.SearchBar.set_key_capture_widget.html)
    pub fn setKeyCaptureWidget(self: *SearchBar, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*SearchBar, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_search_bar_set_key_capture_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_search_mode](https://docs.gtk.org/gtk4/method.SearchBar.set_search_mode.html)
    pub fn setSearchMode(self: *SearchBar, _search_mode: bool) void {
        const cFn = @extern(*const fn (*SearchBar, bool) callconv(.c) void, .{ .name = "gtk_search_bar_set_search_mode" });
        const ret = cFn(self, _search_mode);
        return ret;
    }
    /// method [set_show_close_button](https://docs.gtk.org/gtk4/method.SearchBar.set_show_close_button.html)
    pub fn setShowCloseButton(self: *SearchBar, _visible: bool) void {
        const cFn = @extern(*const fn (*SearchBar, bool) callconv(.c) void, .{ .name = "gtk_search_bar_set_show_close_button" });
        const ret = cFn(self, _visible);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_search_bar_get_type" });
        return cFn();
    }
};
/// Class [SearchEntry](https://docs.gtk.org/gtk4/class.SearchEntry.html)
/// - property [activates-default](https://docs.gtk.org/gtk4/property.SearchEntry.activates-default.html): (rw) `bool`
/// - property [input-hints](https://docs.gtk.org/gtk4/property.SearchEntry.input-hints.html): (rw) `gtk.InputHints`
/// - property [input-purpose](https://docs.gtk.org/gtk4/property.SearchEntry.input-purpose.html): (rw) `gtk.InputPurpose`
/// - property [placeholder-text](https://docs.gtk.org/gtk4/property.SearchEntry.placeholder-text.html): (rw) `[*:0]const u8`
/// - property [search-delay](https://docs.gtk.org/gtk4/property.SearchEntry.search-delay.html): (rw) `u32`
pub const SearchEntry = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Editable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SearchEntry.new.html)
    pub fn new() *SearchEntry {
        const cFn = @extern(*const fn () callconv(.c) *SearchEntry, .{ .name = "gtk_search_entry_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_input_hints](https://docs.gtk.org/gtk4/method.SearchEntry.get_input_hints.html)
    pub fn getInputHints(self: *SearchEntry) gtk.InputHints {
        const cFn = @extern(*const fn (*SearchEntry) callconv(.c) gtk.InputHints, .{ .name = "gtk_search_entry_get_input_hints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_purpose](https://docs.gtk.org/gtk4/method.SearchEntry.get_input_purpose.html)
    pub fn getInputPurpose(self: *SearchEntry) gtk.InputPurpose {
        const cFn = @extern(*const fn (*SearchEntry) callconv(.c) gtk.InputPurpose, .{ .name = "gtk_search_entry_get_input_purpose" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_key_capture_widget](https://docs.gtk.org/gtk4/method.SearchEntry.get_key_capture_widget.html)
    pub fn getKeyCaptureWidget(self: *SearchEntry) ?*gtk.Widget {
        const cFn = @extern(*const fn (*SearchEntry) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_search_entry_get_key_capture_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_placeholder_text](https://docs.gtk.org/gtk4/method.SearchEntry.get_placeholder_text.html)
    pub fn getPlaceholderText(self: *SearchEntry) ?[*:0]u8 {
        const cFn = @extern(*const fn (*SearchEntry) callconv(.c) ?[*:0]u8, .{ .name = "gtk_search_entry_get_placeholder_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_search_delay](https://docs.gtk.org/gtk4/method.SearchEntry.get_search_delay.html)
    pub fn getSearchDelay(self: *SearchEntry) u32 {
        const cFn = @extern(*const fn (*SearchEntry) callconv(.c) u32, .{ .name = "gtk_search_entry_get_search_delay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_input_hints](https://docs.gtk.org/gtk4/method.SearchEntry.set_input_hints.html)
    pub fn setInputHints(self: *SearchEntry, _hints: gtk.InputHints) void {
        const cFn = @extern(*const fn (*SearchEntry, gtk.InputHints) callconv(.c) void, .{ .name = "gtk_search_entry_set_input_hints" });
        const ret = cFn(self, _hints);
        return ret;
    }
    /// method [set_input_purpose](https://docs.gtk.org/gtk4/method.SearchEntry.set_input_purpose.html)
    pub fn setInputPurpose(self: *SearchEntry, _purpose: gtk.InputPurpose) void {
        const cFn = @extern(*const fn (*SearchEntry, gtk.InputPurpose) callconv(.c) void, .{ .name = "gtk_search_entry_set_input_purpose" });
        const ret = cFn(self, _purpose);
        return ret;
    }
    /// method [set_key_capture_widget](https://docs.gtk.org/gtk4/method.SearchEntry.set_key_capture_widget.html)
    pub fn setKeyCaptureWidget(self: *SearchEntry, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*SearchEntry, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_search_entry_set_key_capture_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_placeholder_text](https://docs.gtk.org/gtk4/method.SearchEntry.set_placeholder_text.html)
    pub fn setPlaceholderText(self: *SearchEntry, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*SearchEntry, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_search_entry_set_placeholder_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_search_delay](https://docs.gtk.org/gtk4/method.SearchEntry.set_search_delay.html)
    pub fn setSearchDelay(self: *SearchEntry, _delay: u32) void {
        const cFn = @extern(*const fn (*SearchEntry, u32) callconv(.c) void, .{ .name = "gtk_search_entry_set_search_delay" });
        const ret = cFn(self, _delay);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.SearchEntry.activate.html)
    pub fn connectActivate(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *SearchEntry });
    }
    /// signal [next-match](https://docs.gtk.org/gtk4/signal.SearchEntry.next-match.html)
    pub fn connectNextMatch(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("next-match", handler, args, flags, &.{ void, *SearchEntry });
    }
    /// signal [previous-match](https://docs.gtk.org/gtk4/signal.SearchEntry.previous-match.html)
    pub fn connectPreviousMatch(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("previous-match", handler, args, flags, &.{ void, *SearchEntry });
    }
    /// signal [search-changed](https://docs.gtk.org/gtk4/signal.SearchEntry.search-changed.html)
    pub fn connectSearchChanged(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("search-changed", handler, args, flags, &.{ void, *SearchEntry });
    }
    /// signal [search-started](https://docs.gtk.org/gtk4/signal.SearchEntry.search-started.html)
    pub fn connectSearchStarted(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("search-started", handler, args, flags, &.{ void, *SearchEntry });
    }
    /// signal [stop-search](https://docs.gtk.org/gtk4/signal.SearchEntry.stop-search.html)
    pub fn connectStopSearch(self: *SearchEntry, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("stop-search", handler, args, flags, &.{ void, *SearchEntry });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_search_entry_get_type" });
        return cFn();
    }
};
/// Iface [SectionModel](https://docs.gtk.org/gtk4/iface.SectionModel.html)
pub const SectionModel = opaque {
    pub const Prerequisites = [_]type{gio.ListModel};
    /// method [get_section](https://docs.gtk.org/gtk4/method.SectionModel.get_section.html)
    pub fn getSection(self: *SectionModel, _position: u32) struct {
        ret: void,
        out_start: u32,
        out_end: u32,
    } {
        var out_start_out: u32 = undefined;
        const _out_start = &out_start_out;
        var out_end_out: u32 = undefined;
        const _out_end = &out_end_out;
        const cFn = @extern(*const fn (*SectionModel, u32, *u32, *u32) callconv(.c) void, .{ .name = "gtk_section_model_get_section" });
        const ret = cFn(self, _position, _out_start, _out_end);
        return .{ .ret = ret, .out_start = out_start_out, .out_end = out_end_out };
    }
    /// method [sections_changed](https://docs.gtk.org/gtk4/method.SectionModel.sections_changed.html)
    pub fn sectionsChanged(self: *SectionModel, _position: u32, _n_items: u32) void {
        const cFn = @extern(*const fn (*SectionModel, u32, u32) callconv(.c) void, .{ .name = "gtk_section_model_sections_changed" });
        const ret = cFn(self, _position, _n_items);
        return ret;
    }
    /// vfunc [get_section](https://docs.gtk.org/gtk4/vfunc.SectionModel.get_section.html)
    pub fn getSectionV(self: *SectionModel, _position: u32, _out_start: *u32, _out_end: *u32) void {
        const class: *SectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_section.?;
        const ret = vFn(self, _position, _out_start, _out_end);
        return ret;
    }
    /// signal [sections-changed](https://docs.gtk.org/gtk4/signal.SectionModel.sections-changed.html)
    pub fn connectSectionsChanged(self: *SectionModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("sections-changed", handler, args, flags, &.{ void, *SectionModel, u32, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_section_model_get_type" });
        return cFn();
    }
};
pub const SectionModelInterface = extern struct {
    g_iface: gobject.TypeInterface,
    get_section: ?*const fn (_self: *gtk.SectionModel, _position: u32, _out_start: *u32, _out_end: *u32) callconv(.c) void,
};
/// Class [SelectionFilterModel](https://docs.gtk.org/gtk4/class.SelectionFilterModel.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.SelectionFilterModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.SelectionFilterModel.model.html): (rw) `gtk.SelectionModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.SelectionFilterModel.n-items.html): (r-) `u32`
pub const SelectionFilterModel = opaque {
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = gtk.SelectionFilterModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SelectionFilterModel.new.html)
    pub fn new(_model: ?*gtk.SelectionModel) *SelectionFilterModel {
        const cFn = @extern(*const fn (?*gtk.SelectionModel) callconv(.c) *SelectionFilterModel, .{ .name = "gtk_selection_filter_model_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.SelectionFilterModel.get_model.html)
    pub fn getModel(self: *SelectionFilterModel) ?*gtk.SelectionModel {
        const cFn = @extern(*const fn (*SelectionFilterModel) callconv(.c) ?*gtk.SelectionModel, .{ .name = "gtk_selection_filter_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.SelectionFilterModel.set_model.html)
    pub fn setModel(self: *SelectionFilterModel, _model: ?*gtk.SelectionModel) void {
        const cFn = @extern(*const fn (*SelectionFilterModel, ?*gtk.SelectionModel) callconv(.c) void, .{ .name = "gtk_selection_filter_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_selection_filter_model_get_type" });
        return cFn();
    }
};
pub const SelectionFilterModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [SelectionMode](https://docs.gtk.org/gtk4/enum.SelectionMode.html)
pub const SelectionMode = enum(u32) {
    none = 0,
    single = 1,
    browse = 2,
    multiple = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_selection_mode_get_type" });
        return cFn();
    }
};
/// Iface [SelectionModel](https://docs.gtk.org/gtk4/iface.SelectionModel.html)
pub const SelectionModel = opaque {
    pub const Prerequisites = [_]type{gio.ListModel};
    /// method [get_selection](https://docs.gtk.org/gtk4/method.SelectionModel.get_selection.html)
    pub fn getSelection(self: *SelectionModel) *gtk.Bitset {
        const cFn = @extern(*const fn (*SelectionModel) callconv(.c) *gtk.Bitset, .{ .name = "gtk_selection_model_get_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_in_range](https://docs.gtk.org/gtk4/method.SelectionModel.get_selection_in_range.html)
    pub fn getSelectionInRange(self: *SelectionModel, _position: u32, _n_items: u32) *gtk.Bitset {
        const cFn = @extern(*const fn (*SelectionModel, u32, u32) callconv(.c) *gtk.Bitset, .{ .name = "gtk_selection_model_get_selection_in_range" });
        const ret = cFn(self, _position, _n_items);
        return ret;
    }
    /// method [is_selected](https://docs.gtk.org/gtk4/method.SelectionModel.is_selected.html)
    pub fn isSelected(self: *SelectionModel, _position: u32) bool {
        const cFn = @extern(*const fn (*SelectionModel, u32) callconv(.c) bool, .{ .name = "gtk_selection_model_is_selected" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [select_all](https://docs.gtk.org/gtk4/method.SelectionModel.select_all.html)
    pub fn selectAll(self: *SelectionModel) bool {
        const cFn = @extern(*const fn (*SelectionModel) callconv(.c) bool, .{ .name = "gtk_selection_model_select_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [select_item](https://docs.gtk.org/gtk4/method.SelectionModel.select_item.html)
    pub fn selectItem(self: *SelectionModel, _position: u32, _unselect_rest: bool) bool {
        const cFn = @extern(*const fn (*SelectionModel, u32, bool) callconv(.c) bool, .{ .name = "gtk_selection_model_select_item" });
        const ret = cFn(self, _position, _unselect_rest);
        return ret;
    }
    /// method [select_range](https://docs.gtk.org/gtk4/method.SelectionModel.select_range.html)
    pub fn selectRange(self: *SelectionModel, _position: u32, _n_items: u32, _unselect_rest: bool) bool {
        const cFn = @extern(*const fn (*SelectionModel, u32, u32, bool) callconv(.c) bool, .{ .name = "gtk_selection_model_select_range" });
        const ret = cFn(self, _position, _n_items, _unselect_rest);
        return ret;
    }
    /// method [selection_changed](https://docs.gtk.org/gtk4/method.SelectionModel.selection_changed.html)
    pub fn selectionChanged(self: *SelectionModel, _position: u32, _n_items: u32) void {
        const cFn = @extern(*const fn (*SelectionModel, u32, u32) callconv(.c) void, .{ .name = "gtk_selection_model_selection_changed" });
        const ret = cFn(self, _position, _n_items);
        return ret;
    }
    /// method [set_selection](https://docs.gtk.org/gtk4/method.SelectionModel.set_selection.html)
    pub fn setSelection(self: *SelectionModel, _selected: *gtk.Bitset, _mask: *gtk.Bitset) bool {
        const cFn = @extern(*const fn (*SelectionModel, *gtk.Bitset, *gtk.Bitset) callconv(.c) bool, .{ .name = "gtk_selection_model_set_selection" });
        const ret = cFn(self, _selected, _mask);
        return ret;
    }
    /// method [unselect_all](https://docs.gtk.org/gtk4/method.SelectionModel.unselect_all.html)
    pub fn unselectAll(self: *SelectionModel) bool {
        const cFn = @extern(*const fn (*SelectionModel) callconv(.c) bool, .{ .name = "gtk_selection_model_unselect_all" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unselect_item](https://docs.gtk.org/gtk4/method.SelectionModel.unselect_item.html)
    pub fn unselectItem(self: *SelectionModel, _position: u32) bool {
        const cFn = @extern(*const fn (*SelectionModel, u32) callconv(.c) bool, .{ .name = "gtk_selection_model_unselect_item" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [unselect_range](https://docs.gtk.org/gtk4/method.SelectionModel.unselect_range.html)
    pub fn unselectRange(self: *SelectionModel, _position: u32, _n_items: u32) bool {
        const cFn = @extern(*const fn (*SelectionModel, u32, u32) callconv(.c) bool, .{ .name = "gtk_selection_model_unselect_range" });
        const ret = cFn(self, _position, _n_items);
        return ret;
    }
    /// vfunc [get_selection_in_range](https://docs.gtk.org/gtk4/vfunc.SelectionModel.get_selection_in_range.html)
    pub fn getSelectionInRangeV(self: *SelectionModel, _position: u32, _n_items: u32) *gtk.Bitset {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_selection_in_range.?;
        const ret = vFn(self, _position, _n_items);
        return ret;
    }
    /// vfunc [is_selected](https://docs.gtk.org/gtk4/vfunc.SelectionModel.is_selected.html)
    pub fn isSelectedV(self: *SelectionModel, _position: u32) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.is_selected.?;
        const ret = vFn(self, _position);
        return ret;
    }
    /// vfunc [select_all](https://docs.gtk.org/gtk4/vfunc.SelectionModel.select_all.html)
    pub fn selectAllV(self: *SelectionModel) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_all.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [select_item](https://docs.gtk.org/gtk4/vfunc.SelectionModel.select_item.html)
    pub fn selectItemV(self: *SelectionModel, _position: u32, _unselect_rest: bool) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_item.?;
        const ret = vFn(self, _position, _unselect_rest);
        return ret;
    }
    /// vfunc [select_range](https://docs.gtk.org/gtk4/vfunc.SelectionModel.select_range.html)
    pub fn selectRangeV(self: *SelectionModel, _position: u32, _n_items: u32, _unselect_rest: bool) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_range.?;
        const ret = vFn(self, _position, _n_items, _unselect_rest);
        return ret;
    }
    /// vfunc [set_selection](https://docs.gtk.org/gtk4/vfunc.SelectionModel.set_selection.html)
    pub fn setSelectionV(self: *SelectionModel, _selected: *gtk.Bitset, _mask: *gtk.Bitset) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_selection.?;
        const ret = vFn(self, _selected, _mask);
        return ret;
    }
    /// vfunc [unselect_all](https://docs.gtk.org/gtk4/vfunc.SelectionModel.unselect_all.html)
    pub fn unselectAllV(self: *SelectionModel) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unselect_all.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unselect_item](https://docs.gtk.org/gtk4/vfunc.SelectionModel.unselect_item.html)
    pub fn unselectItemV(self: *SelectionModel, _position: u32) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unselect_item.?;
        const ret = vFn(self, _position);
        return ret;
    }
    /// vfunc [unselect_range](https://docs.gtk.org/gtk4/vfunc.SelectionModel.unselect_range.html)
    pub fn unselectRangeV(self: *SelectionModel, _position: u32, _n_items: u32) bool {
        const class: *SelectionModelInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unselect_range.?;
        const ret = vFn(self, _position, _n_items);
        return ret;
    }
    /// signal [selection-changed](https://docs.gtk.org/gtk4/signal.SelectionModel.selection-changed.html)
    pub fn connectSelectionChanged(self: *SelectionModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("selection-changed", handler, args, flags, &.{ void, *SelectionModel, u32, u32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_selection_model_get_type" });
        return cFn();
    }
};
pub const SelectionModelInterface = extern struct {
    g_iface: gobject.TypeInterface,
    is_selected: ?*const fn (_model: *gtk.SelectionModel, _position: u32) callconv(.c) bool,
    get_selection_in_range: ?*const fn (_model: *gtk.SelectionModel, _position: u32, _n_items: u32) callconv(.c) *gtk.Bitset,
    select_item: ?*const fn (_model: *gtk.SelectionModel, _position: u32, _unselect_rest: bool) callconv(.c) bool,
    unselect_item: ?*const fn (_model: *gtk.SelectionModel, _position: u32) callconv(.c) bool,
    select_range: ?*const fn (_model: *gtk.SelectionModel, _position: u32, _n_items: u32, _unselect_rest: bool) callconv(.c) bool,
    unselect_range: ?*const fn (_model: *gtk.SelectionModel, _position: u32, _n_items: u32) callconv(.c) bool,
    select_all: ?*const fn (_model: *gtk.SelectionModel) callconv(.c) bool,
    unselect_all: ?*const fn (_model: *gtk.SelectionModel) callconv(.c) bool,
    set_selection: ?*const fn (_model: *gtk.SelectionModel, _selected: *gtk.Bitset, _mask: *gtk.Bitset) callconv(.c) bool,
};
/// Enum [SensitivityType](https://docs.gtk.org/gtk4/enum.SensitivityType.html)
pub const SensitivityType = enum(u32) {
    auto = 0,
    on = 1,
    off = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sensitivity_type_get_type" });
        return cFn();
    }
};
/// Class [Separator](https://docs.gtk.org/gtk4/class.Separator.html)
pub const Separator = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Separator.new.html)
    pub fn new(_orientation: gtk.Orientation) *Separator {
        const cFn = @extern(*const fn (gtk.Orientation) callconv(.c) *Separator, .{ .name = "gtk_separator_new" });
        const ret = cFn(_orientation);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_separator_get_type" });
        return cFn();
    }
};
/// Class [Settings](https://docs.gtk.org/gtk4/class.Settings.html)
/// - property [gtk-alternative-button-order](https://docs.gtk.org/gtk4/property.Settings.gtk-alternative-button-order.html): (rw) `bool`
/// - property [gtk-alternative-sort-arrows](https://docs.gtk.org/gtk4/property.Settings.gtk-alternative-sort-arrows.html): (rw) `bool`
/// - property [gtk-application-prefer-dark-theme](https://docs.gtk.org/gtk4/property.Settings.gtk-application-prefer-dark-theme.html): (rw) `bool`
/// - property [gtk-cursor-aspect-ratio](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-aspect-ratio.html): (rw) `f64`
/// - property [gtk-cursor-blink](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-blink.html): (rw) `bool`
/// - property [gtk-cursor-blink-time](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-blink-time.html): (rw) `i32`
/// - property [gtk-cursor-blink-timeout](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-blink-timeout.html): (rw) `i32`
/// - property [gtk-cursor-theme-name](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-theme-name.html): (rw) `[*:0]const u8`
/// - property [gtk-cursor-theme-size](https://docs.gtk.org/gtk4/property.Settings.gtk-cursor-theme-size.html): (rw) `i32`
/// - property [gtk-decoration-layout](https://docs.gtk.org/gtk4/property.Settings.gtk-decoration-layout.html): (rw) `[*:0]const u8`
/// - property [gtk-dialogs-use-header](https://docs.gtk.org/gtk4/property.Settings.gtk-dialogs-use-header.html): (rw) `bool`
/// - property [gtk-dnd-drag-threshold](https://docs.gtk.org/gtk4/property.Settings.gtk-dnd-drag-threshold.html): (rw) `i32`
/// - property [gtk-double-click-distance](https://docs.gtk.org/gtk4/property.Settings.gtk-double-click-distance.html): (rw) `i32`
/// - property [gtk-double-click-time](https://docs.gtk.org/gtk4/property.Settings.gtk-double-click-time.html): (rw) `i32`
/// - property [gtk-enable-accels](https://docs.gtk.org/gtk4/property.Settings.gtk-enable-accels.html): (rw) `bool`
/// - property [gtk-enable-animations](https://docs.gtk.org/gtk4/property.Settings.gtk-enable-animations.html): (rw) `bool`
/// - property [gtk-enable-event-sounds](https://docs.gtk.org/gtk4/property.Settings.gtk-enable-event-sounds.html): (rw) `bool`
/// - property [gtk-enable-input-feedback-sounds](https://docs.gtk.org/gtk4/property.Settings.gtk-enable-input-feedback-sounds.html): (rw) `bool`
/// - property [gtk-enable-primary-paste](https://docs.gtk.org/gtk4/property.Settings.gtk-enable-primary-paste.html): (rw) `bool`
/// - property [gtk-entry-password-hint-timeout](https://docs.gtk.org/gtk4/property.Settings.gtk-entry-password-hint-timeout.html): (rw) `u32`
/// - property [gtk-entry-select-on-focus](https://docs.gtk.org/gtk4/property.Settings.gtk-entry-select-on-focus.html): (rw) `bool`
/// - property [gtk-error-bell](https://docs.gtk.org/gtk4/property.Settings.gtk-error-bell.html): (rw) `bool`
/// - property [gtk-font-name](https://docs.gtk.org/gtk4/property.Settings.gtk-font-name.html): (rw) `[*:0]const u8`
/// - property [gtk-fontconfig-timestamp](https://docs.gtk.org/gtk4/property.Settings.gtk-fontconfig-timestamp.html): (rw) `u32`
/// - property [gtk-hint-font-metrics](https://docs.gtk.org/gtk4/property.Settings.gtk-hint-font-metrics.html): (rw) `bool`
/// - property [gtk-icon-theme-name](https://docs.gtk.org/gtk4/property.Settings.gtk-icon-theme-name.html): (rw) `[*:0]const u8`
/// - property [gtk-im-module](https://docs.gtk.org/gtk4/property.Settings.gtk-im-module.html): (rw) `[*:0]const u8`
/// - property [gtk-keynav-use-caret](https://docs.gtk.org/gtk4/property.Settings.gtk-keynav-use-caret.html): (rw) `bool`
/// - property [gtk-label-select-on-focus](https://docs.gtk.org/gtk4/property.Settings.gtk-label-select-on-focus.html): (rw) `bool`
/// - property [gtk-long-press-time](https://docs.gtk.org/gtk4/property.Settings.gtk-long-press-time.html): (rw) `u32`
/// - property [gtk-overlay-scrolling](https://docs.gtk.org/gtk4/property.Settings.gtk-overlay-scrolling.html): (rw) `bool`
/// - property [gtk-primary-button-warps-slider](https://docs.gtk.org/gtk4/property.Settings.gtk-primary-button-warps-slider.html): (rw) `bool`
/// - property [gtk-print-backends](https://docs.gtk.org/gtk4/property.Settings.gtk-print-backends.html): (rw) `[*:0]const u8`
/// - property [gtk-print-preview-command](https://docs.gtk.org/gtk4/property.Settings.gtk-print-preview-command.html): (rw) `[*:0]const u8`
/// - property [gtk-recent-files-enabled](https://docs.gtk.org/gtk4/property.Settings.gtk-recent-files-enabled.html): (rw) `bool`
/// - property [gtk-recent-files-max-age](https://docs.gtk.org/gtk4/property.Settings.gtk-recent-files-max-age.html): (rw) `i32`
/// - property [gtk-shell-shows-app-menu](https://docs.gtk.org/gtk4/property.Settings.gtk-shell-shows-app-menu.html): (rw) `bool`
/// - property [gtk-shell-shows-desktop](https://docs.gtk.org/gtk4/property.Settings.gtk-shell-shows-desktop.html): (rw) `bool`
/// - property [gtk-shell-shows-menubar](https://docs.gtk.org/gtk4/property.Settings.gtk-shell-shows-menubar.html): (rw) `bool`
/// - property [gtk-show-status-shapes](https://docs.gtk.org/gtk4/property.Settings.gtk-show-status-shapes.html): (rw) `bool`
/// - property [gtk-sound-theme-name](https://docs.gtk.org/gtk4/property.Settings.gtk-sound-theme-name.html): (rw) `[*:0]const u8`
/// - property [gtk-split-cursor](https://docs.gtk.org/gtk4/property.Settings.gtk-split-cursor.html): (rw) `bool`
/// - property [gtk-theme-name](https://docs.gtk.org/gtk4/property.Settings.gtk-theme-name.html): (rw) `[*:0]const u8`
/// - property [gtk-titlebar-double-click](https://docs.gtk.org/gtk4/property.Settings.gtk-titlebar-double-click.html): (rw) `[*:0]const u8`
/// - property [gtk-titlebar-middle-click](https://docs.gtk.org/gtk4/property.Settings.gtk-titlebar-middle-click.html): (rw) `[*:0]const u8`
/// - property [gtk-titlebar-right-click](https://docs.gtk.org/gtk4/property.Settings.gtk-titlebar-right-click.html): (rw) `[*:0]const u8`
/// - property [gtk-xft-antialias](https://docs.gtk.org/gtk4/property.Settings.gtk-xft-antialias.html): (rw) `i32`
/// - property [gtk-xft-dpi](https://docs.gtk.org/gtk4/property.Settings.gtk-xft-dpi.html): (rw) `i32`
/// - property [gtk-xft-hinting](https://docs.gtk.org/gtk4/property.Settings.gtk-xft-hinting.html): (rw) `i32`
/// - property [gtk-xft-hintstyle](https://docs.gtk.org/gtk4/property.Settings.gtk-xft-hintstyle.html): (rw) `[*:0]const u8`
/// - property [gtk-xft-rgba](https://docs.gtk.org/gtk4/property.Settings.gtk-xft-rgba.html): (rw) `[*:0]const u8`
pub const Settings = opaque {
    pub const Interfaces = [_]type{gtk.StyleProvider};
    pub const Parent = gobject.Object;
    /// type func [get_default](https://docs.gtk.org/gtk4/type_func.Settings.get_default.html)
    pub fn getDefault() ?*gtk.Settings {
        const cFn = @extern(*const fn () callconv(.c) ?*gtk.Settings, .{ .name = "gtk_settings_get_default" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_for_display](https://docs.gtk.org/gtk4/type_func.Settings.get_for_display.html)
    pub fn getForDisplay(_display: *gdk.Display) *gtk.Settings {
        const cFn = @extern(*const fn (*gdk.Display) callconv(.c) *gtk.Settings, .{ .name = "gtk_settings_get_for_display" });
        const ret = cFn(_display);
        return ret;
    }
    /// method [reset_property](https://docs.gtk.org/gtk4/method.Settings.reset_property.html)
    pub fn resetProperty(self: *Settings, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Settings, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_settings_reset_property" });
        const ret = cFn(self, _name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_settings_get_type" });
        return cFn();
    }
};
/// Class [Shortcut](https://docs.gtk.org/gtk4/class.Shortcut.html)
/// - property [action](https://docs.gtk.org/gtk4/property.Shortcut.action.html): (rw) `gtk.ShortcutAction`
/// - property [arguments](https://docs.gtk.org/gtk4/property.Shortcut.arguments.html): (rw) `glib.Variant`
/// - property [trigger](https://docs.gtk.org/gtk4/property.Shortcut.trigger.html): (rw) `gtk.ShortcutTrigger`
pub const Shortcut = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ShortcutClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Shortcut.new.html)
    pub fn new(_trigger: ?*gtk.ShortcutTrigger, _action: ?*gtk.ShortcutAction) *Shortcut {
        const cFn = @extern(*const fn (?*gtk.ShortcutTrigger, ?*gtk.ShortcutAction) callconv(.c) *Shortcut, .{ .name = "gtk_shortcut_new" });
        const ret = cFn(_trigger, _action);
        return ret;
    }
    /// method [get_action](https://docs.gtk.org/gtk4/method.Shortcut.get_action.html)
    pub fn getAction(self: *Shortcut) ?*gtk.ShortcutAction {
        const cFn = @extern(*const fn (*Shortcut) callconv(.c) ?*gtk.ShortcutAction, .{ .name = "gtk_shortcut_get_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_arguments](https://docs.gtk.org/gtk4/method.Shortcut.get_arguments.html)
    pub fn getArguments(self: *Shortcut) ?*glib.Variant {
        const cFn = @extern(*const fn (*Shortcut) callconv(.c) ?*glib.Variant, .{ .name = "gtk_shortcut_get_arguments" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_trigger](https://docs.gtk.org/gtk4/method.Shortcut.get_trigger.html)
    pub fn getTrigger(self: *Shortcut) ?*gtk.ShortcutTrigger {
        const cFn = @extern(*const fn (*Shortcut) callconv(.c) ?*gtk.ShortcutTrigger, .{ .name = "gtk_shortcut_get_trigger" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_action](https://docs.gtk.org/gtk4/method.Shortcut.set_action.html)
    pub fn setAction(self: *Shortcut, _action: ?*gtk.ShortcutAction) void {
        const cFn = @extern(*const fn (*Shortcut, ?*gtk.ShortcutAction) callconv(.c) void, .{ .name = "gtk_shortcut_set_action" });
        const ret = cFn(self, _action);
        return ret;
    }
    /// method [set_arguments](https://docs.gtk.org/gtk4/method.Shortcut.set_arguments.html)
    pub fn setArguments(self: *Shortcut, _args: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Shortcut, ?*glib.Variant) callconv(.c) void, .{ .name = "gtk_shortcut_set_arguments" });
        const ret = cFn(self, _args);
        return ret;
    }
    /// method [set_trigger](https://docs.gtk.org/gtk4/method.Shortcut.set_trigger.html)
    pub fn setTrigger(self: *Shortcut, _trigger: ?*gtk.ShortcutTrigger) void {
        const cFn = @extern(*const fn (*Shortcut, ?*gtk.ShortcutTrigger) callconv(.c) void, .{ .name = "gtk_shortcut_set_trigger" });
        const ret = cFn(self, _trigger);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_get_type" });
        return cFn();
    }
};
/// Class [ShortcutAction](https://docs.gtk.org/gtk4/class.ShortcutAction.html)
pub const ShortcutAction = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ShortcutActionClass;
    /// ctor [parse_string](https://docs.gtk.org/gtk4/ctor.ShortcutAction.parse_string.html)
    pub fn parseString(_string: [*:0]const u8) ?*ShortcutAction {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*ShortcutAction, .{ .name = "gtk_shortcut_action_parse_string" });
        const ret = cFn(_string);
        return ret;
    }
    /// method [activate](https://docs.gtk.org/gtk4/method.ShortcutAction.activate.html)
    pub fn activate(self: *ShortcutAction, _flags: gtk.ShortcutActionFlags, _widget: *gtk.Widget, _args: ?*glib.Variant) bool {
        const cFn = @extern(*const fn (*ShortcutAction, gtk.ShortcutActionFlags, *gtk.Widget, ?*glib.Variant) callconv(.c) bool, .{ .name = "gtk_shortcut_action_activate" });
        const ret = cFn(self, _flags, _widget, _args);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gtk4/method.ShortcutAction.print.html)
    pub fn print(self: *ShortcutAction, _string: *glib.String) void {
        const cFn = @extern(*const fn (*ShortcutAction, *glib.String) callconv(.c) void, .{ .name = "gtk_shortcut_action_print" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gtk4/method.ShortcutAction.to_string.html)
    pub fn toString(self: *ShortcutAction) [*:0]u8 {
        const cFn = @extern(*const fn (*ShortcutAction) callconv(.c) [*:0]u8, .{ .name = "gtk_shortcut_action_to_string" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_action_get_type" });
        return cFn();
    }
};
pub const ShortcutActionClass = opaque {};
/// Flags [ShortcutActionFlags](https://docs.gtk.org/gtk4/flags.ShortcutActionFlags.html)
pub const ShortcutActionFlags = packed struct(u32) {
    exclusive: bool = false,
    _: u31 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_action_flags_get_type" });
        return cFn();
    }
};
pub const ShortcutClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [ShortcutController](https://docs.gtk.org/gtk4/class.ShortcutController.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.ShortcutController.item-type.html): (r-) `core.Type`
/// - property [mnemonic-modifiers](https://docs.gtk.org/gtk4/property.ShortcutController.mnemonic-modifiers.html): (rw) `gdk.ModifierType`
/// - property [model](https://docs.gtk.org/gtk4/property.ShortcutController.model.html): (--) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.ShortcutController.n-items.html): (r-) `u32`
/// - property [scope](https://docs.gtk.org/gtk4/property.ShortcutController.scope.html): (rw) `gtk.ShortcutScope`
pub const ShortcutController = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gtk.EventController;
    pub const Class = gtk.ShortcutControllerClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ShortcutController.new.html)
    pub fn new() *ShortcutController {
        const cFn = @extern(*const fn () callconv(.c) *ShortcutController, .{ .name = "gtk_shortcut_controller_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_for_model](https://docs.gtk.org/gtk4/ctor.ShortcutController.new_for_model.html)
    pub fn newForModel(_model: *gio.ListModel) *ShortcutController {
        const cFn = @extern(*const fn (*gio.ListModel) callconv(.c) *ShortcutController, .{ .name = "gtk_shortcut_controller_new_for_model" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [add_shortcut](https://docs.gtk.org/gtk4/method.ShortcutController.add_shortcut.html)
    pub fn addShortcut(self: *ShortcutController, _shortcut: *gtk.Shortcut) void {
        const cFn = @extern(*const fn (*ShortcutController, *gtk.Shortcut) callconv(.c) void, .{ .name = "gtk_shortcut_controller_add_shortcut" });
        const ret = cFn(self, _shortcut);
        return ret;
    }
    /// method [get_mnemonics_modifiers](https://docs.gtk.org/gtk4/method.ShortcutController.get_mnemonics_modifiers.html)
    pub fn getMnemonicsModifiers(self: *ShortcutController) gdk.ModifierType {
        const cFn = @extern(*const fn (*ShortcutController) callconv(.c) gdk.ModifierType, .{ .name = "gtk_shortcut_controller_get_mnemonics_modifiers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scope](https://docs.gtk.org/gtk4/method.ShortcutController.get_scope.html)
    pub fn getScope(self: *ShortcutController) gtk.ShortcutScope {
        const cFn = @extern(*const fn (*ShortcutController) callconv(.c) gtk.ShortcutScope, .{ .name = "gtk_shortcut_controller_get_scope" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_shortcut](https://docs.gtk.org/gtk4/method.ShortcutController.remove_shortcut.html)
    pub fn removeShortcut(self: *ShortcutController, _shortcut: *gtk.Shortcut) void {
        const cFn = @extern(*const fn (*ShortcutController, *gtk.Shortcut) callconv(.c) void, .{ .name = "gtk_shortcut_controller_remove_shortcut" });
        const ret = cFn(self, _shortcut);
        return ret;
    }
    /// method [set_mnemonics_modifiers](https://docs.gtk.org/gtk4/method.ShortcutController.set_mnemonics_modifiers.html)
    pub fn setMnemonicsModifiers(self: *ShortcutController, _modifiers: gdk.ModifierType) void {
        const cFn = @extern(*const fn (*ShortcutController, gdk.ModifierType) callconv(.c) void, .{ .name = "gtk_shortcut_controller_set_mnemonics_modifiers" });
        const ret = cFn(self, _modifiers);
        return ret;
    }
    /// method [set_scope](https://docs.gtk.org/gtk4/method.ShortcutController.set_scope.html)
    pub fn setScope(self: *ShortcutController, _scope: gtk.ShortcutScope) void {
        const cFn = @extern(*const fn (*ShortcutController, gtk.ShortcutScope) callconv(.c) void, .{ .name = "gtk_shortcut_controller_set_scope" });
        const ret = cFn(self, _scope);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_controller_get_type" });
        return cFn();
    }
};
pub const ShortcutControllerClass = opaque {};
/// callback [ShortcutFunc](https://docs.gtk.org/gtk4/callback.ShortcutFunc.html)
pub const ShortcutFunc = *const fn (_widget: *gtk.Widget, _args: ?*glib.Variant, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [ShortcutLabel](https://docs.gtk.org/gtk4/class.ShortcutLabel.html)
/// - property [accelerator](https://docs.gtk.org/gtk4/property.ShortcutLabel.accelerator.html): (rw) `[*:0]const u8`
/// - property [disabled-text](https://docs.gtk.org/gtk4/property.ShortcutLabel.disabled-text.html): (rw) `[*:0]const u8`
pub const ShortcutLabel = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ShortcutLabelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ShortcutLabel.new.html)
    pub fn new(_accelerator: [*:0]const u8) *ShortcutLabel {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *ShortcutLabel, .{ .name = "gtk_shortcut_label_new" });
        const ret = cFn(_accelerator);
        return ret;
    }
    /// method [get_accelerator](https://docs.gtk.org/gtk4/method.ShortcutLabel.get_accelerator.html)
    pub fn getAccelerator(self: *ShortcutLabel) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ShortcutLabel) callconv(.c) ?[*:0]u8, .{ .name = "gtk_shortcut_label_get_accelerator" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_disabled_text](https://docs.gtk.org/gtk4/method.ShortcutLabel.get_disabled_text.html)
    pub fn getDisabledText(self: *ShortcutLabel) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ShortcutLabel) callconv(.c) ?[*:0]u8, .{ .name = "gtk_shortcut_label_get_disabled_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_accelerator](https://docs.gtk.org/gtk4/method.ShortcutLabel.set_accelerator.html)
    pub fn setAccelerator(self: *ShortcutLabel, _accelerator: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ShortcutLabel, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_shortcut_label_set_accelerator" });
        const ret = cFn(self, _accelerator);
        return ret;
    }
    /// method [set_disabled_text](https://docs.gtk.org/gtk4/method.ShortcutLabel.set_disabled_text.html)
    pub fn setDisabledText(self: *ShortcutLabel, _disabled_text: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ShortcutLabel, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_shortcut_label_set_disabled_text" });
        const ret = cFn(self, _disabled_text);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_label_get_type" });
        return cFn();
    }
};
pub const ShortcutLabelClass = opaque {};
/// Iface [ShortcutManager](https://docs.gtk.org/gtk4/iface.ShortcutManager.html)
pub const ShortcutManager = opaque {
    /// vfunc [add_controller](https://docs.gtk.org/gtk4/vfunc.ShortcutManager.add_controller.html)
    pub fn addControllerV(self: *ShortcutManager, _controller: *gtk.ShortcutController) void {
        const class: *ShortcutManagerInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.add_controller.?;
        const ret = vFn(self, _controller);
        return ret;
    }
    /// vfunc [remove_controller](https://docs.gtk.org/gtk4/vfunc.ShortcutManager.remove_controller.html)
    pub fn removeControllerV(self: *ShortcutManager, _controller: *gtk.ShortcutController) void {
        const class: *ShortcutManagerInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove_controller.?;
        const ret = vFn(self, _controller);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_manager_get_type" });
        return cFn();
    }
};
pub const ShortcutManagerInterface = extern struct {
    g_iface: gobject.TypeInterface,
    add_controller: ?*const fn (_self: *gtk.ShortcutManager, _controller: *gtk.ShortcutController) callconv(.c) void,
    remove_controller: ?*const fn (_self: *gtk.ShortcutManager, _controller: *gtk.ShortcutController) callconv(.c) void,
};
/// Enum [ShortcutScope](https://docs.gtk.org/gtk4/enum.ShortcutScope.html)
pub const ShortcutScope = enum(u32) {
    local = 0,
    managed = 1,
    global = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_scope_get_type" });
        return cFn();
    }
};
/// Class [ShortcutTrigger](https://docs.gtk.org/gtk4/class.ShortcutTrigger.html)
pub const ShortcutTrigger = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.ShortcutTriggerClass;
    /// ctor [parse_string](https://docs.gtk.org/gtk4/ctor.ShortcutTrigger.parse_string.html)
    pub fn parseString(_string: [*:0]const u8) ?*ShortcutTrigger {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*ShortcutTrigger, .{ .name = "gtk_shortcut_trigger_parse_string" });
        const ret = cFn(_string);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/gtk4/method.ShortcutTrigger.compare.html)
    pub fn compare(self: *ShortcutTrigger, _trigger2: *gtk.ShortcutTrigger) i32 {
        const cFn = @extern(*const fn (*ShortcutTrigger, *gtk.ShortcutTrigger) callconv(.c) i32, .{ .name = "gtk_shortcut_trigger_compare" });
        const ret = cFn(self, _trigger2);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gtk4/method.ShortcutTrigger.equal.html)
    pub fn equal(self: *ShortcutTrigger, _trigger2: *gtk.ShortcutTrigger) bool {
        const cFn = @extern(*const fn (*ShortcutTrigger, *gtk.ShortcutTrigger) callconv(.c) bool, .{ .name = "gtk_shortcut_trigger_equal" });
        const ret = cFn(self, _trigger2);
        return ret;
    }
    /// method [hash](https://docs.gtk.org/gtk4/method.ShortcutTrigger.hash.html)
    pub fn hash(self: *ShortcutTrigger) u32 {
        const cFn = @extern(*const fn (*ShortcutTrigger) callconv(.c) u32, .{ .name = "gtk_shortcut_trigger_hash" });
        const ret = cFn(self);
        return ret;
    }
    /// method [print](https://docs.gtk.org/gtk4/method.ShortcutTrigger.print.html)
    pub fn print(self: *ShortcutTrigger, _string: *glib.String) void {
        const cFn = @extern(*const fn (*ShortcutTrigger, *glib.String) callconv(.c) void, .{ .name = "gtk_shortcut_trigger_print" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [print_label](https://docs.gtk.org/gtk4/method.ShortcutTrigger.print_label.html)
    pub fn printLabel(self: *ShortcutTrigger, _display: *gdk.Display, _string: *glib.String) bool {
        const cFn = @extern(*const fn (*ShortcutTrigger, *gdk.Display, *glib.String) callconv(.c) bool, .{ .name = "gtk_shortcut_trigger_print_label" });
        const ret = cFn(self, _display, _string);
        return ret;
    }
    /// method [to_label](https://docs.gtk.org/gtk4/method.ShortcutTrigger.to_label.html)
    pub fn toLabel(self: *ShortcutTrigger, _display: *gdk.Display) [*:0]u8 {
        const cFn = @extern(*const fn (*ShortcutTrigger, *gdk.Display) callconv(.c) [*:0]u8, .{ .name = "gtk_shortcut_trigger_to_label" });
        const ret = cFn(self, _display);
        return ret;
    }
    /// method [to_string](https://docs.gtk.org/gtk4/method.ShortcutTrigger.to_string.html)
    pub fn toString(self: *ShortcutTrigger) [*:0]u8 {
        const cFn = @extern(*const fn (*ShortcutTrigger) callconv(.c) [*:0]u8, .{ .name = "gtk_shortcut_trigger_to_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [trigger](https://docs.gtk.org/gtk4/method.ShortcutTrigger.trigger.html)
    pub fn trigger(self: *ShortcutTrigger, _event: *gdk.Event, _enable_mnemonics: bool) gdk.KeyMatch {
        const cFn = @extern(*const fn (*ShortcutTrigger, *gdk.Event, bool) callconv(.c) gdk.KeyMatch, .{ .name = "gtk_shortcut_trigger_trigger" });
        const ret = cFn(self, _event, _enable_mnemonics);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_trigger_get_type" });
        return cFn();
    }
};
pub const ShortcutTriggerClass = opaque {};
/// Enum [ShortcutType](https://docs.gtk.org/gtk4/enum.ShortcutType.html)
pub const ShortcutType = enum(u32) {
    accelerator = 0,
    gesture_pinch = 1,
    gesture_stretch = 2,
    gesture_rotate_clockwise = 3,
    gesture_rotate_counterclockwise = 4,
    gesture_two_finger_swipe_left = 5,
    gesture_two_finger_swipe_right = 6,
    gesture = 7,
    gesture_swipe_left = 8,
    gesture_swipe_right = 9,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcut_type_get_type" });
        return cFn();
    }
};
/// Class [ShortcutsGroup](https://docs.gtk.org/gtk4/class.ShortcutsGroup.html)
/// - property [accel-size-group](https://docs.gtk.org/gtk4/property.ShortcutsGroup.accel-size-group.html): (-w) `gtk.SizeGroup`
/// - property [height](https://docs.gtk.org/gtk4/property.ShortcutsGroup.height.html): (r-) `u32`
/// - property [title](https://docs.gtk.org/gtk4/property.ShortcutsGroup.title.html): (rw) `[*:0]const u8`
/// - property [title-size-group](https://docs.gtk.org/gtk4/property.ShortcutsGroup.title-size-group.html): (-w) `gtk.SizeGroup`
/// - property [view](https://docs.gtk.org/gtk4/property.ShortcutsGroup.view.html): (rw) `[*:0]const u8`
pub const ShortcutsGroup = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Box;
    pub const Class = gtk.ShortcutsGroupClass;
    /// method [add_shortcut](https://docs.gtk.org/gtk4/method.ShortcutsGroup.add_shortcut.html)
    pub fn addShortcut(self: *ShortcutsGroup, _shortcut: *gtk.ShortcutsShortcut) void {
        const cFn = @extern(*const fn (*ShortcutsGroup, *gtk.ShortcutsShortcut) callconv(.c) void, .{ .name = "gtk_shortcuts_group_add_shortcut" });
        const ret = cFn(self, _shortcut);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcuts_group_get_type" });
        return cFn();
    }
};
pub const ShortcutsGroupClass = opaque {};
/// Class [ShortcutsSection](https://docs.gtk.org/gtk4/class.ShortcutsSection.html)
/// - property [max-height](https://docs.gtk.org/gtk4/property.ShortcutsSection.max-height.html): (rw) `u32`
/// - property [section-name](https://docs.gtk.org/gtk4/property.ShortcutsSection.section-name.html): (rw) `[*:0]const u8`
/// - property [title](https://docs.gtk.org/gtk4/property.ShortcutsSection.title.html): (rw) `[*:0]const u8`
/// - property [view-name](https://docs.gtk.org/gtk4/property.ShortcutsSection.view-name.html): (rw) `[*:0]const u8`
pub const ShortcutsSection = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Box;
    pub const Class = gtk.ShortcutsSectionClass;
    /// method [add_group](https://docs.gtk.org/gtk4/method.ShortcutsSection.add_group.html)
    pub fn addGroup(self: *ShortcutsSection, _group: *gtk.ShortcutsGroup) void {
        const cFn = @extern(*const fn (*ShortcutsSection, *gtk.ShortcutsGroup) callconv(.c) void, .{ .name = "gtk_shortcuts_section_add_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// signal [change-current-page](https://docs.gtk.org/gtk4/signal.ShortcutsSection.change-current-page.html)
    pub fn connectChangeCurrentPage(self: *ShortcutsSection, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-current-page", handler, args, flags, &.{ bool, *ShortcutsSection, i32 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcuts_section_get_type" });
        return cFn();
    }
};
pub const ShortcutsSectionClass = opaque {};
/// Class [ShortcutsShortcut](https://docs.gtk.org/gtk4/class.ShortcutsShortcut.html)
/// - property [accel-size-group](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.accel-size-group.html): (-w) `gtk.SizeGroup`
/// - property [accelerator](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.accelerator.html): (rw) `[*:0]const u8`
/// - property [action-name](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.action-name.html): (rw) `[*:0]const u8`
/// - property [direction](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.direction.html): (rw) `gtk.TextDirection`
/// - property [icon](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.icon.html): (rw) `gio.Icon`
/// - property [icon-set](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.icon-set.html): (rw) `bool`
/// - property [shortcut-type](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.shortcut-type.html): (rw) `gtk.ShortcutType`
/// - property [subtitle](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.subtitle.html): (rw) `[*:0]const u8`
/// - property [subtitle-set](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.subtitle-set.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.title.html): (rw) `[*:0]const u8`
/// - property [title-size-group](https://docs.gtk.org/gtk4/property.ShortcutsShortcut.title-size-group.html): (-w) `gtk.SizeGroup`
pub const ShortcutsShortcut = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.ShortcutsShortcutClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcuts_shortcut_get_type" });
        return cFn();
    }
};
pub const ShortcutsShortcutClass = opaque {};
/// Class [ShortcutsWindow](https://docs.gtk.org/gtk4/class.ShortcutsWindow.html)
/// - property [section-name](https://docs.gtk.org/gtk4/property.ShortcutsWindow.section-name.html): (rw) `[*:0]const u8`
/// - property [view-name](https://docs.gtk.org/gtk4/property.ShortcutsWindow.view-name.html): (rw) `[*:0]const u8`
pub const ShortcutsWindow = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Window;
    /// method [add_section](https://docs.gtk.org/gtk4/method.ShortcutsWindow.add_section.html)
    pub fn addSection(self: *ShortcutsWindow, _section: *gtk.ShortcutsSection) void {
        const cFn = @extern(*const fn (*ShortcutsWindow, *gtk.ShortcutsSection) callconv(.c) void, .{ .name = "gtk_shortcuts_window_add_section" });
        const ret = cFn(self, _section);
        return ret;
    }
    /// signal [close](https://docs.gtk.org/gtk4/signal.ShortcutsWindow.close.html)
    pub fn connectClose(self: *ShortcutsWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("close", handler, args, flags, &.{ void, *ShortcutsWindow });
    }
    /// signal [search](https://docs.gtk.org/gtk4/signal.ShortcutsWindow.search.html)
    pub fn connectSearch(self: *ShortcutsWindow, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("search", handler, args, flags, &.{ void, *ShortcutsWindow });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_shortcuts_window_get_type" });
        return cFn();
    }
};
/// Class [SignalAction](https://docs.gtk.org/gtk4/class.SignalAction.html)
/// - property [signal-name](https://docs.gtk.org/gtk4/property.SignalAction.signal-name.html): (r-) `[*:0]const u8`
pub const SignalAction = opaque {
    pub const Parent = gtk.ShortcutAction;
    pub const Class = gtk.SignalActionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SignalAction.new.html)
    pub fn new(_signal_name: [*:0]const u8) *SignalAction {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *SignalAction, .{ .name = "gtk_signal_action_new" });
        const ret = cFn(_signal_name);
        return ret;
    }
    /// method [get_signal_name](https://docs.gtk.org/gtk4/method.SignalAction.get_signal_name.html)
    pub fn getSignalName(self: *SignalAction) [*:0]u8 {
        const cFn = @extern(*const fn (*SignalAction) callconv(.c) [*:0]u8, .{ .name = "gtk_signal_action_get_signal_name" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_signal_action_get_type" });
        return cFn();
    }
};
pub const SignalActionClass = opaque {};
/// Class [SignalListItemFactory](https://docs.gtk.org/gtk4/class.SignalListItemFactory.html)
pub const SignalListItemFactory = opaque {
    pub const Parent = gtk.ListItemFactory;
    pub const Class = gtk.SignalListItemFactoryClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SignalListItemFactory.new.html)
    pub fn new() *SignalListItemFactory {
        const cFn = @extern(*const fn () callconv(.c) *SignalListItemFactory, .{ .name = "gtk_signal_list_item_factory_new" });
        const ret = cFn();
        return ret;
    }
    /// signal [bind](https://docs.gtk.org/gtk4/signal.SignalListItemFactory.bind.html)
    pub fn connectBind(self: *SignalListItemFactory, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("bind", handler, args, flags, &.{ void, *SignalListItemFactory, *gobject.Object });
    }
    /// signal [setup](https://docs.gtk.org/gtk4/signal.SignalListItemFactory.setup.html)
    pub fn connectSetup(self: *SignalListItemFactory, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("setup", handler, args, flags, &.{ void, *SignalListItemFactory, *gobject.Object });
    }
    /// signal [teardown](https://docs.gtk.org/gtk4/signal.SignalListItemFactory.teardown.html)
    pub fn connectTeardown(self: *SignalListItemFactory, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("teardown", handler, args, flags, &.{ void, *SignalListItemFactory, *gobject.Object });
    }
    /// signal [unbind](https://docs.gtk.org/gtk4/signal.SignalListItemFactory.unbind.html)
    pub fn connectUnbind(self: *SignalListItemFactory, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unbind", handler, args, flags, &.{ void, *SignalListItemFactory, *gobject.Object });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_signal_list_item_factory_get_type" });
        return cFn();
    }
};
pub const SignalListItemFactoryClass = opaque {};
/// Class [SingleSelection](https://docs.gtk.org/gtk4/class.SingleSelection.html)
/// - property [autoselect](https://docs.gtk.org/gtk4/property.SingleSelection.autoselect.html): (rw) `bool`
/// - property [can-unselect](https://docs.gtk.org/gtk4/property.SingleSelection.can-unselect.html): (rw) `bool`
/// - property [item-type](https://docs.gtk.org/gtk4/property.SingleSelection.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.SingleSelection.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.SingleSelection.n-items.html): (r-) `u32`
/// - property [selected](https://docs.gtk.org/gtk4/property.SingleSelection.selected.html): (rw) `u32`
/// - property [selected-item](https://docs.gtk.org/gtk4/property.SingleSelection.selected-item.html): (r-) `gobject.Object`
pub const SingleSelection = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel, gtk.SelectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.SingleSelectionClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SingleSelection.new.html)
    pub fn new(_model: ?*gio.ListModel) *SingleSelection {
        const cFn = @extern(*const fn (?*gio.ListModel) callconv(.c) *SingleSelection, .{ .name = "gtk_single_selection_new" });
        const ret = cFn(_model);
        return ret;
    }
    /// method [get_autoselect](https://docs.gtk.org/gtk4/method.SingleSelection.get_autoselect.html)
    pub fn getAutoselect(self: *SingleSelection) bool {
        const cFn = @extern(*const fn (*SingleSelection) callconv(.c) bool, .{ .name = "gtk_single_selection_get_autoselect" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_unselect](https://docs.gtk.org/gtk4/method.SingleSelection.get_can_unselect.html)
    pub fn getCanUnselect(self: *SingleSelection) bool {
        const cFn = @extern(*const fn (*SingleSelection) callconv(.c) bool, .{ .name = "gtk_single_selection_get_can_unselect" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.SingleSelection.get_model.html)
    pub fn getModel(self: *SingleSelection) ?*gio.ListModel {
        const cFn = @extern(*const fn (*SingleSelection) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_single_selection_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected](https://docs.gtk.org/gtk4/method.SingleSelection.get_selected.html)
    pub fn getSelected(self: *SingleSelection) u32 {
        const cFn = @extern(*const fn (*SingleSelection) callconv(.c) u32, .{ .name = "gtk_single_selection_get_selected" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selected_item](https://docs.gtk.org/gtk4/method.SingleSelection.get_selected_item.html)
    pub fn getSelectedItem(self: *SingleSelection) ?*gobject.Object {
        const cFn = @extern(*const fn (*SingleSelection) callconv(.c) ?*gobject.Object, .{ .name = "gtk_single_selection_get_selected_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_autoselect](https://docs.gtk.org/gtk4/method.SingleSelection.set_autoselect.html)
    pub fn setAutoselect(self: *SingleSelection, _autoselect: bool) void {
        const cFn = @extern(*const fn (*SingleSelection, bool) callconv(.c) void, .{ .name = "gtk_single_selection_set_autoselect" });
        const ret = cFn(self, _autoselect);
        return ret;
    }
    /// method [set_can_unselect](https://docs.gtk.org/gtk4/method.SingleSelection.set_can_unselect.html)
    pub fn setCanUnselect(self: *SingleSelection, _can_unselect: bool) void {
        const cFn = @extern(*const fn (*SingleSelection, bool) callconv(.c) void, .{ .name = "gtk_single_selection_set_can_unselect" });
        const ret = cFn(self, _can_unselect);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.SingleSelection.set_model.html)
    pub fn setModel(self: *SingleSelection, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*SingleSelection, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_single_selection_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_selected](https://docs.gtk.org/gtk4/method.SingleSelection.set_selected.html)
    pub fn setSelected(self: *SingleSelection, _position: u32) void {
        const cFn = @extern(*const fn (*SingleSelection, u32) callconv(.c) void, .{ .name = "gtk_single_selection_set_selected" });
        const ret = cFn(self, _position);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_single_selection_get_type" });
        return cFn();
    }
};
pub const SingleSelectionClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [SizeGroup](https://docs.gtk.org/gtk4/class.SizeGroup.html)
/// - property [mode](https://docs.gtk.org/gtk4/property.SizeGroup.mode.html): (rw) `gtk.SizeGroupMode`
pub const SizeGroup = extern struct {
    parent_instance: gobject.Object,
    pub const Interfaces = [_]type{gtk.Buildable};
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SizeGroup.new.html)
    pub fn new(_mode: gtk.SizeGroupMode) *SizeGroup {
        const cFn = @extern(*const fn (gtk.SizeGroupMode) callconv(.c) *SizeGroup, .{ .name = "gtk_size_group_new" });
        const ret = cFn(_mode);
        return ret;
    }
    /// method [add_widget](https://docs.gtk.org/gtk4/method.SizeGroup.add_widget.html)
    pub fn addWidget(self: *SizeGroup, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*SizeGroup, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_size_group_add_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [get_mode](https://docs.gtk.org/gtk4/method.SizeGroup.get_mode.html)
    pub fn getMode(self: *SizeGroup) gtk.SizeGroupMode {
        const cFn = @extern(*const fn (*SizeGroup) callconv(.c) gtk.SizeGroupMode, .{ .name = "gtk_size_group_get_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_widgets](https://docs.gtk.org/gtk4/method.SizeGroup.get_widgets.html)
    pub fn getWidgets(self: *SizeGroup) ?*core.SList {
        const cFn = @extern(*const fn (*SizeGroup) callconv(.c) ?*core.SList, .{ .name = "gtk_size_group_get_widgets" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_widget](https://docs.gtk.org/gtk4/method.SizeGroup.remove_widget.html)
    pub fn removeWidget(self: *SizeGroup, _widget: *gtk.Widget) void {
        const cFn = @extern(*const fn (*SizeGroup, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_size_group_remove_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    /// method [set_mode](https://docs.gtk.org/gtk4/method.SizeGroup.set_mode.html)
    pub fn setMode(self: *SizeGroup, _mode: gtk.SizeGroupMode) void {
        const cFn = @extern(*const fn (*SizeGroup, gtk.SizeGroupMode) callconv(.c) void, .{ .name = "gtk_size_group_set_mode" });
        const ret = cFn(self, _mode);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_size_group_get_type" });
        return cFn();
    }
};
/// Enum [SizeGroupMode](https://docs.gtk.org/gtk4/enum.SizeGroupMode.html)
pub const SizeGroupMode = enum(u32) {
    none = 0,
    horizontal = 1,
    vertical = 2,
    both = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_size_group_mode_get_type" });
        return cFn();
    }
};
/// Enum [SizeRequestMode](https://docs.gtk.org/gtk4/enum.SizeRequestMode.html)
pub const SizeRequestMode = enum(u32) {
    height_for_width = 0,
    width_for_height = 1,
    constant_size = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_size_request_mode_get_type" });
        return cFn();
    }
};
/// Class [SliceListModel](https://docs.gtk.org/gtk4/class.SliceListModel.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.SliceListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.SliceListModel.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.SliceListModel.n-items.html): (r-) `u32`
/// - property [offset](https://docs.gtk.org/gtk4/property.SliceListModel.offset.html): (rw) `u32`
/// - property [size](https://docs.gtk.org/gtk4/property.SliceListModel.size.html): (rw) `u32`
pub const SliceListModel = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.SliceListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SliceListModel.new.html)
    pub fn new(_model: ?*gio.ListModel, _offset: u32, _size: u32) *SliceListModel {
        const cFn = @extern(*const fn (?*gio.ListModel, u32, u32) callconv(.c) *SliceListModel, .{ .name = "gtk_slice_list_model_new" });
        const ret = cFn(_model, _offset, _size);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.SliceListModel.get_model.html)
    pub fn getModel(self: *SliceListModel) ?*gio.ListModel {
        const cFn = @extern(*const fn (*SliceListModel) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_slice_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gtk4/method.SliceListModel.get_offset.html)
    pub fn getOffset(self: *SliceListModel) u32 {
        const cFn = @extern(*const fn (*SliceListModel) callconv(.c) u32, .{ .name = "gtk_slice_list_model_get_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gtk4/method.SliceListModel.get_size.html)
    pub fn getSize(self: *SliceListModel) u32 {
        const cFn = @extern(*const fn (*SliceListModel) callconv(.c) u32, .{ .name = "gtk_slice_list_model_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.SliceListModel.set_model.html)
    pub fn setModel(self: *SliceListModel, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*SliceListModel, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_slice_list_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_offset](https://docs.gtk.org/gtk4/method.SliceListModel.set_offset.html)
    pub fn setOffset(self: *SliceListModel, _offset: u32) void {
        const cFn = @extern(*const fn (*SliceListModel, u32) callconv(.c) void, .{ .name = "gtk_slice_list_model_set_offset" });
        const ret = cFn(self, _offset);
        return ret;
    }
    /// method [set_size](https://docs.gtk.org/gtk4/method.SliceListModel.set_size.html)
    pub fn setSize(self: *SliceListModel, _size: u32) void {
        const cFn = @extern(*const fn (*SliceListModel, u32) callconv(.c) void, .{ .name = "gtk_slice_list_model_set_size" });
        const ret = cFn(self, _size);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_slice_list_model_get_type" });
        return cFn();
    }
};
pub const SliceListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [Snapshot](https://docs.gtk.org/gtk4/class.Snapshot.html)
pub const Snapshot = opaque {
    pub const Parent = gdk.Snapshot;
    pub const Class = gtk.SnapshotClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Snapshot.new.html)
    pub fn new() *Snapshot {
        const cFn = @extern(*const fn () callconv(.c) *Snapshot, .{ .name = "gtk_snapshot_new" });
        const ret = cFn();
        return ret;
    }
    /// method [append_border](https://docs.gtk.org/gtk4/method.Snapshot.append_border.html)
    pub fn appendBorder(self: *Snapshot, _outline: *gsk.RoundedRect, _border_width: *[4]f32, _border_color: *[4]gdk.RGBA) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.RoundedRect, *[4]f32, *[4]gdk.RGBA) callconv(.c) void, .{ .name = "gtk_snapshot_append_border" });
        const ret = cFn(self, _outline, _border_width, _border_color);
        return ret;
    }
    /// method [append_cairo](https://docs.gtk.org/gtk4/method.Snapshot.append_cairo.html)
    pub fn appendCairo(self: *Snapshot, _bounds: *graphene.Rect) *cairo.Context {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect) callconv(.c) *cairo.Context, .{ .name = "gtk_snapshot_append_cairo" });
        const ret = cFn(self, _bounds);
        return ret;
    }
    /// method [append_color](https://docs.gtk.org/gtk4/method.Snapshot.append_color.html)
    pub fn appendColor(self: *Snapshot, _color: *gdk.RGBA, _bounds: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Snapshot, *gdk.RGBA, *graphene.Rect) callconv(.c) void, .{ .name = "gtk_snapshot_append_color" });
        const ret = cFn(self, _color, _bounds);
        return ret;
    }
    /// method [append_conic_gradient](https://docs.gtk.org/gtk4/method.Snapshot.append_conic_gradient.html)
    pub fn appendConicGradient(self: *Snapshot, _bounds: *graphene.Rect, _center: *graphene.Point, _rotation: f32, _stopss: []gsk.ColorStop) void {
        const _stops = _stopss.ptr;
        const _n_stops: u64 = @intCast(_stopss.len);
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, *graphene.Point, f32, [*]gsk.ColorStop, u64) callconv(.c) void, .{ .name = "gtk_snapshot_append_conic_gradient" });
        const ret = cFn(self, _bounds, _center, _rotation, _stops, _n_stops);
        return ret;
    }
    /// method [append_fill](https://docs.gtk.org/gtk4/method.Snapshot.append_fill.html)
    pub fn appendFill(self: *Snapshot, _path: *gsk.Path, _fill_rule: gsk.FillRule, _color: *gdk.RGBA) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.Path, gsk.FillRule, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_snapshot_append_fill" });
        const ret = cFn(self, _path, _fill_rule, _color);
        return ret;
    }
    /// method [append_inset_shadow](https://docs.gtk.org/gtk4/method.Snapshot.append_inset_shadow.html)
    pub fn appendInsetShadow(self: *Snapshot, _outline: *gsk.RoundedRect, _color: *gdk.RGBA, _dx: f32, _dy: f32, _spread: f32, _blur_radius: f32) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.RoundedRect, *gdk.RGBA, f32, f32, f32, f32) callconv(.c) void, .{ .name = "gtk_snapshot_append_inset_shadow" });
        const ret = cFn(self, _outline, _color, _dx, _dy, _spread, _blur_radius);
        return ret;
    }
    /// method [append_layout](https://docs.gtk.org/gtk4/method.Snapshot.append_layout.html)
    pub fn appendLayout(self: *Snapshot, _layout: *pango.Layout, _color: *gdk.RGBA) void {
        const cFn = @extern(*const fn (*Snapshot, *pango.Layout, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_snapshot_append_layout" });
        const ret = cFn(self, _layout, _color);
        return ret;
    }
    /// method [append_linear_gradient](https://docs.gtk.org/gtk4/method.Snapshot.append_linear_gradient.html)
    pub fn appendLinearGradient(self: *Snapshot, _bounds: *graphene.Rect, _start_point: *graphene.Point, _end_point: *graphene.Point, _stopss: []gsk.ColorStop) void {
        const _stops = _stopss.ptr;
        const _n_stops: u64 = @intCast(_stopss.len);
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, *graphene.Point, *graphene.Point, [*]gsk.ColorStop, u64) callconv(.c) void, .{ .name = "gtk_snapshot_append_linear_gradient" });
        const ret = cFn(self, _bounds, _start_point, _end_point, _stops, _n_stops);
        return ret;
    }
    /// method [append_node](https://docs.gtk.org/gtk4/method.Snapshot.append_node.html)
    pub fn appendNode(self: *Snapshot, _node: *gsk.RenderNode) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.RenderNode) callconv(.c) void, .{ .name = "gtk_snapshot_append_node" });
        const ret = cFn(self, _node);
        return ret;
    }
    /// method [append_outset_shadow](https://docs.gtk.org/gtk4/method.Snapshot.append_outset_shadow.html)
    pub fn appendOutsetShadow(self: *Snapshot, _outline: *gsk.RoundedRect, _color: *gdk.RGBA, _dx: f32, _dy: f32, _spread: f32, _blur_radius: f32) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.RoundedRect, *gdk.RGBA, f32, f32, f32, f32) callconv(.c) void, .{ .name = "gtk_snapshot_append_outset_shadow" });
        const ret = cFn(self, _outline, _color, _dx, _dy, _spread, _blur_radius);
        return ret;
    }
    /// method [append_radial_gradient](https://docs.gtk.org/gtk4/method.Snapshot.append_radial_gradient.html)
    pub fn appendRadialGradient(self: *Snapshot, _bounds: *graphene.Rect, _center: *graphene.Point, _hradius: f32, _vradius: f32, _start: f32, _end: f32, _stopss: []gsk.ColorStop) void {
        const _stops = _stopss.ptr;
        const _n_stops: u64 = @intCast(_stopss.len);
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, *graphene.Point, f32, f32, f32, f32, [*]gsk.ColorStop, u64) callconv(.c) void, .{ .name = "gtk_snapshot_append_radial_gradient" });
        const ret = cFn(self, _bounds, _center, _hradius, _vradius, _start, _end, _stops, _n_stops);
        return ret;
    }
    /// method [append_repeating_linear_gradient](https://docs.gtk.org/gtk4/method.Snapshot.append_repeating_linear_gradient.html)
    pub fn appendRepeatingLinearGradient(self: *Snapshot, _bounds: *graphene.Rect, _start_point: *graphene.Point, _end_point: *graphene.Point, _stopss: []gsk.ColorStop) void {
        const _stops = _stopss.ptr;
        const _n_stops: u64 = @intCast(_stopss.len);
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, *graphene.Point, *graphene.Point, [*]gsk.ColorStop, u64) callconv(.c) void, .{ .name = "gtk_snapshot_append_repeating_linear_gradient" });
        const ret = cFn(self, _bounds, _start_point, _end_point, _stops, _n_stops);
        return ret;
    }
    /// method [append_repeating_radial_gradient](https://docs.gtk.org/gtk4/method.Snapshot.append_repeating_radial_gradient.html)
    pub fn appendRepeatingRadialGradient(self: *Snapshot, _bounds: *graphene.Rect, _center: *graphene.Point, _hradius: f32, _vradius: f32, _start: f32, _end: f32, _stopss: []gsk.ColorStop) void {
        const _stops = _stopss.ptr;
        const _n_stops: u64 = @intCast(_stopss.len);
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, *graphene.Point, f32, f32, f32, f32, [*]gsk.ColorStop, u64) callconv(.c) void, .{ .name = "gtk_snapshot_append_repeating_radial_gradient" });
        const ret = cFn(self, _bounds, _center, _hradius, _vradius, _start, _end, _stops, _n_stops);
        return ret;
    }
    /// method [append_scaled_texture](https://docs.gtk.org/gtk4/method.Snapshot.append_scaled_texture.html)
    pub fn appendScaledTexture(self: *Snapshot, _texture: *gdk.Texture, _filter: gsk.ScalingFilter, _bounds: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Snapshot, *gdk.Texture, gsk.ScalingFilter, *graphene.Rect) callconv(.c) void, .{ .name = "gtk_snapshot_append_scaled_texture" });
        const ret = cFn(self, _texture, _filter, _bounds);
        return ret;
    }
    /// method [append_stroke](https://docs.gtk.org/gtk4/method.Snapshot.append_stroke.html)
    pub fn appendStroke(self: *Snapshot, _path: *gsk.Path, _stroke: *gsk.Stroke, _color: *gdk.RGBA) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.Path, *gsk.Stroke, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_snapshot_append_stroke" });
        const ret = cFn(self, _path, _stroke, _color);
        return ret;
    }
    /// method [append_texture](https://docs.gtk.org/gtk4/method.Snapshot.append_texture.html)
    pub fn appendTexture(self: *Snapshot, _texture: *gdk.Texture, _bounds: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Snapshot, *gdk.Texture, *graphene.Rect) callconv(.c) void, .{ .name = "gtk_snapshot_append_texture" });
        const ret = cFn(self, _texture, _bounds);
        return ret;
    }
    /// method [gl_shader_pop_texture](https://docs.gtk.org/gtk4/method.Snapshot.gl_shader_pop_texture.html)
    pub fn glShaderPopTexture(self: *Snapshot) void {
        const cFn = @extern(*const fn (*Snapshot) callconv(.c) void, .{ .name = "gtk_snapshot_gl_shader_pop_texture" });
        const ret = cFn(self);
        return ret;
    }
    /// method [perspective](https://docs.gtk.org/gtk4/method.Snapshot.perspective.html)
    pub fn perspective(self: *Snapshot, _depth: f32) void {
        const cFn = @extern(*const fn (*Snapshot, f32) callconv(.c) void, .{ .name = "gtk_snapshot_perspective" });
        const ret = cFn(self, _depth);
        return ret;
    }
    /// method [pop](https://docs.gtk.org/gtk4/method.Snapshot.pop.html)
    pub fn pop(self: *Snapshot) void {
        const cFn = @extern(*const fn (*Snapshot) callconv(.c) void, .{ .name = "gtk_snapshot_pop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [push_blend](https://docs.gtk.org/gtk4/method.Snapshot.push_blend.html)
    pub fn pushBlend(self: *Snapshot, _blend_mode: gsk.BlendMode) void {
        const cFn = @extern(*const fn (*Snapshot, gsk.BlendMode) callconv(.c) void, .{ .name = "gtk_snapshot_push_blend" });
        const ret = cFn(self, _blend_mode);
        return ret;
    }
    /// method [push_blur](https://docs.gtk.org/gtk4/method.Snapshot.push_blur.html)
    pub fn pushBlur(self: *Snapshot, _radius: f64) void {
        const cFn = @extern(*const fn (*Snapshot, f64) callconv(.c) void, .{ .name = "gtk_snapshot_push_blur" });
        const ret = cFn(self, _radius);
        return ret;
    }
    /// method [push_clip](https://docs.gtk.org/gtk4/method.Snapshot.push_clip.html)
    pub fn pushClip(self: *Snapshot, _bounds: *graphene.Rect) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect) callconv(.c) void, .{ .name = "gtk_snapshot_push_clip" });
        const ret = cFn(self, _bounds);
        return ret;
    }
    /// method [push_color_matrix](https://docs.gtk.org/gtk4/method.Snapshot.push_color_matrix.html)
    pub fn pushColorMatrix(self: *Snapshot, _color_matrix: *graphene.Matrix, _color_offset: *graphene.Vec4) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Matrix, *graphene.Vec4) callconv(.c) void, .{ .name = "gtk_snapshot_push_color_matrix" });
        const ret = cFn(self, _color_matrix, _color_offset);
        return ret;
    }
    /// method [push_cross_fade](https://docs.gtk.org/gtk4/method.Snapshot.push_cross_fade.html)
    pub fn pushCrossFade(self: *Snapshot, _progress: f64) void {
        const cFn = @extern(*const fn (*Snapshot, f64) callconv(.c) void, .{ .name = "gtk_snapshot_push_cross_fade" });
        const ret = cFn(self, _progress);
        return ret;
    }
    /// method [push_fill](https://docs.gtk.org/gtk4/method.Snapshot.push_fill.html)
    pub fn pushFill(self: *Snapshot, _path: *gsk.Path, _fill_rule: gsk.FillRule) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.Path, gsk.FillRule) callconv(.c) void, .{ .name = "gtk_snapshot_push_fill" });
        const ret = cFn(self, _path, _fill_rule);
        return ret;
    }
    /// method [push_gl_shader](https://docs.gtk.org/gtk4/method.Snapshot.push_gl_shader.html)
    pub fn pushGlShader(self: *Snapshot, _shader: *gsk.GLShader, _bounds: *graphene.Rect, _take_args: *glib.Bytes) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.GLShader, *graphene.Rect, *glib.Bytes) callconv(.c) void, .{ .name = "gtk_snapshot_push_gl_shader" });
        const ret = cFn(self, _shader, _bounds, _take_args);
        return ret;
    }
    /// method [push_mask](https://docs.gtk.org/gtk4/method.Snapshot.push_mask.html)
    pub fn pushMask(self: *Snapshot, _mask_mode: gsk.MaskMode) void {
        const cFn = @extern(*const fn (*Snapshot, gsk.MaskMode) callconv(.c) void, .{ .name = "gtk_snapshot_push_mask" });
        const ret = cFn(self, _mask_mode);
        return ret;
    }
    /// method [push_opacity](https://docs.gtk.org/gtk4/method.Snapshot.push_opacity.html)
    pub fn pushOpacity(self: *Snapshot, _opacity: f64) void {
        const cFn = @extern(*const fn (*Snapshot, f64) callconv(.c) void, .{ .name = "gtk_snapshot_push_opacity" });
        const ret = cFn(self, _opacity);
        return ret;
    }
    /// method [push_repeat](https://docs.gtk.org/gtk4/method.Snapshot.push_repeat.html)
    pub fn pushRepeat(self: *Snapshot, _bounds: *graphene.Rect, _child_bounds: ?*graphene.Rect) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Rect, ?*graphene.Rect) callconv(.c) void, .{ .name = "gtk_snapshot_push_repeat" });
        const ret = cFn(self, _bounds, _child_bounds);
        return ret;
    }
    /// method [push_rounded_clip](https://docs.gtk.org/gtk4/method.Snapshot.push_rounded_clip.html)
    pub fn pushRoundedClip(self: *Snapshot, _bounds: *gsk.RoundedRect) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.RoundedRect) callconv(.c) void, .{ .name = "gtk_snapshot_push_rounded_clip" });
        const ret = cFn(self, _bounds);
        return ret;
    }
    /// method [push_shadow](https://docs.gtk.org/gtk4/method.Snapshot.push_shadow.html)
    pub fn pushShadow(self: *Snapshot, _shadows: []gsk.Shadow) void {
        const _shadow = _shadows.ptr;
        const _n_shadows: u64 = @intCast(_shadows.len);
        const cFn = @extern(*const fn (*Snapshot, [*]gsk.Shadow, u64) callconv(.c) void, .{ .name = "gtk_snapshot_push_shadow" });
        const ret = cFn(self, _shadow, _n_shadows);
        return ret;
    }
    /// method [push_stroke](https://docs.gtk.org/gtk4/method.Snapshot.push_stroke.html)
    pub fn pushStroke(self: *Snapshot, _path: *gsk.Path, _stroke: *gsk.Stroke) void {
        const cFn = @extern(*const fn (*Snapshot, *gsk.Path, *gsk.Stroke) callconv(.c) void, .{ .name = "gtk_snapshot_push_stroke" });
        const ret = cFn(self, _path, _stroke);
        return ret;
    }
    /// Deprecated:
    /// method [render_background](https://docs.gtk.org/gtk4/method.Snapshot.render_background.html)
    pub const renderBackground = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn renderBackground(self: *Snapshot, _context: *gtk.StyleContext, _x: f64, _y: f64, _width: f64, _height: f64) void {
            const cFn = @extern(*const fn (*Snapshot, *gtk.StyleContext, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_snapshot_render_background" });
            const ret = cFn(self, _context, _x, _y, _width, _height);
            return ret;
        }
    }.renderBackground;
    /// Deprecated:
    /// method [render_focus](https://docs.gtk.org/gtk4/method.Snapshot.render_focus.html)
    pub const renderFocus = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn renderFocus(self: *Snapshot, _context: *gtk.StyleContext, _x: f64, _y: f64, _width: f64, _height: f64) void {
            const cFn = @extern(*const fn (*Snapshot, *gtk.StyleContext, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_snapshot_render_focus" });
            const ret = cFn(self, _context, _x, _y, _width, _height);
            return ret;
        }
    }.renderFocus;
    /// Deprecated:
    /// method [render_frame](https://docs.gtk.org/gtk4/method.Snapshot.render_frame.html)
    pub const renderFrame = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn renderFrame(self: *Snapshot, _context: *gtk.StyleContext, _x: f64, _y: f64, _width: f64, _height: f64) void {
            const cFn = @extern(*const fn (*Snapshot, *gtk.StyleContext, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_snapshot_render_frame" });
            const ret = cFn(self, _context, _x, _y, _width, _height);
            return ret;
        }
    }.renderFrame;
    /// Deprecated:
    /// method [render_insertion_cursor](https://docs.gtk.org/gtk4/method.Snapshot.render_insertion_cursor.html)
    pub const renderInsertionCursor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn renderInsertionCursor(self: *Snapshot, _context: *gtk.StyleContext, _x: f64, _y: f64, _layout: *pango.Layout, _index: i32, _direction: pango.Direction) void {
            const cFn = @extern(*const fn (*Snapshot, *gtk.StyleContext, f64, f64, *pango.Layout, i32, pango.Direction) callconv(.c) void, .{ .name = "gtk_snapshot_render_insertion_cursor" });
            const ret = cFn(self, _context, _x, _y, _layout, _index, _direction);
            return ret;
        }
    }.renderInsertionCursor;
    /// Deprecated:
    /// method [render_layout](https://docs.gtk.org/gtk4/method.Snapshot.render_layout.html)
    pub const renderLayout = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn renderLayout(self: *Snapshot, _context: *gtk.StyleContext, _x: f64, _y: f64, _layout: *pango.Layout) void {
            const cFn = @extern(*const fn (*Snapshot, *gtk.StyleContext, f64, f64, *pango.Layout) callconv(.c) void, .{ .name = "gtk_snapshot_render_layout" });
            const ret = cFn(self, _context, _x, _y, _layout);
            return ret;
        }
    }.renderLayout;
    /// method [restore](https://docs.gtk.org/gtk4/method.Snapshot.restore.html)
    pub fn restore(self: *Snapshot) void {
        const cFn = @extern(*const fn (*Snapshot) callconv(.c) void, .{ .name = "gtk_snapshot_restore" });
        const ret = cFn(self);
        return ret;
    }
    /// method [rotate](https://docs.gtk.org/gtk4/method.Snapshot.rotate.html)
    pub fn rotate(self: *Snapshot, _angle: f32) void {
        const cFn = @extern(*const fn (*Snapshot, f32) callconv(.c) void, .{ .name = "gtk_snapshot_rotate" });
        const ret = cFn(self, _angle);
        return ret;
    }
    /// method [rotate_3d](https://docs.gtk.org/gtk4/method.Snapshot.rotate_3d.html)
    pub fn rotate3d(self: *Snapshot, _angle: f32, _axis: *graphene.Vec3) void {
        const cFn = @extern(*const fn (*Snapshot, f32, *graphene.Vec3) callconv(.c) void, .{ .name = "gtk_snapshot_rotate_3d" });
        const ret = cFn(self, _angle, _axis);
        return ret;
    }
    /// method [save](https://docs.gtk.org/gtk4/method.Snapshot.save.html)
    pub fn save(self: *Snapshot) void {
        const cFn = @extern(*const fn (*Snapshot) callconv(.c) void, .{ .name = "gtk_snapshot_save" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scale](https://docs.gtk.org/gtk4/method.Snapshot.scale.html)
    pub fn scale(self: *Snapshot, _factor_x: f32, _factor_y: f32) void {
        const cFn = @extern(*const fn (*Snapshot, f32, f32) callconv(.c) void, .{ .name = "gtk_snapshot_scale" });
        const ret = cFn(self, _factor_x, _factor_y);
        return ret;
    }
    /// method [scale_3d](https://docs.gtk.org/gtk4/method.Snapshot.scale_3d.html)
    pub fn scale3d(self: *Snapshot, _factor_x: f32, _factor_y: f32, _factor_z: f32) void {
        const cFn = @extern(*const fn (*Snapshot, f32, f32, f32) callconv(.c) void, .{ .name = "gtk_snapshot_scale_3d" });
        const ret = cFn(self, _factor_x, _factor_y, _factor_z);
        return ret;
    }
    /// method [to_node](https://docs.gtk.org/gtk4/method.Snapshot.to_node.html)
    pub fn toNode(self: *Snapshot) ?*gsk.RenderNode {
        const cFn = @extern(*const fn (*Snapshot) callconv(.c) ?*gsk.RenderNode, .{ .name = "gtk_snapshot_to_node" });
        const ret = cFn(self);
        return ret;
    }
    /// method [to_paintable](https://docs.gtk.org/gtk4/method.Snapshot.to_paintable.html)
    pub fn toPaintable(self: *Snapshot, _size: ?*graphene.Size) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*Snapshot, ?*graphene.Size) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_snapshot_to_paintable" });
        const ret = cFn(self, _size);
        return ret;
    }
    /// method [transform](https://docs.gtk.org/gtk4/method.Snapshot.transform.html)
    pub fn transform(self: *Snapshot, _transform: ?*gsk.Transform) void {
        const cFn = @extern(*const fn (*Snapshot, ?*gsk.Transform) callconv(.c) void, .{ .name = "gtk_snapshot_transform" });
        const ret = cFn(self, _transform);
        return ret;
    }
    /// method [transform_matrix](https://docs.gtk.org/gtk4/method.Snapshot.transform_matrix.html)
    pub fn transformMatrix(self: *Snapshot, _matrix: *graphene.Matrix) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Matrix) callconv(.c) void, .{ .name = "gtk_snapshot_transform_matrix" });
        const ret = cFn(self, _matrix);
        return ret;
    }
    /// method [translate](https://docs.gtk.org/gtk4/method.Snapshot.translate.html)
    pub fn translate(self: *Snapshot, _point: *graphene.Point) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Point) callconv(.c) void, .{ .name = "gtk_snapshot_translate" });
        const ret = cFn(self, _point);
        return ret;
    }
    /// method [translate_3d](https://docs.gtk.org/gtk4/method.Snapshot.translate_3d.html)
    pub fn translate3d(self: *Snapshot, _point: *graphene.Point3D) void {
        const cFn = @extern(*const fn (*Snapshot, *graphene.Point3D) callconv(.c) void, .{ .name = "gtk_snapshot_translate_3d" });
        const ret = cFn(self, _point);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_snapshot_get_type" });
        return cFn();
    }
};
pub const SnapshotClass = opaque {};
/// Class [SortListModel](https://docs.gtk.org/gtk4/class.SortListModel.html)
/// - property [incremental](https://docs.gtk.org/gtk4/property.SortListModel.incremental.html): (rw) `bool`
/// - property [item-type](https://docs.gtk.org/gtk4/property.SortListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.SortListModel.model.html): (rw) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.SortListModel.n-items.html): (r-) `u32`
/// - property [pending](https://docs.gtk.org/gtk4/property.SortListModel.pending.html): (r-) `u32`
/// - property [section-sorter](https://docs.gtk.org/gtk4/property.SortListModel.section-sorter.html): (rw) `gtk.Sorter`
/// - property [sorter](https://docs.gtk.org/gtk4/property.SortListModel.sorter.html): (rw) `gtk.Sorter`
pub const SortListModel = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.SectionModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.SortListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SortListModel.new.html)
    pub fn new(_model: ?*gio.ListModel, _sorter: ?*gtk.Sorter) *SortListModel {
        const cFn = @extern(*const fn (?*gio.ListModel, ?*gtk.Sorter) callconv(.c) *SortListModel, .{ .name = "gtk_sort_list_model_new" });
        const ret = cFn(_model, _sorter);
        return ret;
    }
    /// method [get_incremental](https://docs.gtk.org/gtk4/method.SortListModel.get_incremental.html)
    pub fn getIncremental(self: *SortListModel) bool {
        const cFn = @extern(*const fn (*SortListModel) callconv(.c) bool, .{ .name = "gtk_sort_list_model_get_incremental" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.SortListModel.get_model.html)
    pub fn getModel(self: *SortListModel) ?*gio.ListModel {
        const cFn = @extern(*const fn (*SortListModel) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_sort_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pending](https://docs.gtk.org/gtk4/method.SortListModel.get_pending.html)
    pub fn getPending(self: *SortListModel) u32 {
        const cFn = @extern(*const fn (*SortListModel) callconv(.c) u32, .{ .name = "gtk_sort_list_model_get_pending" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_section_sorter](https://docs.gtk.org/gtk4/method.SortListModel.get_section_sorter.html)
    pub fn getSectionSorter(self: *SortListModel) ?*gtk.Sorter {
        const cFn = @extern(*const fn (*SortListModel) callconv(.c) ?*gtk.Sorter, .{ .name = "gtk_sort_list_model_get_section_sorter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sorter](https://docs.gtk.org/gtk4/method.SortListModel.get_sorter.html)
    pub fn getSorter(self: *SortListModel) ?*gtk.Sorter {
        const cFn = @extern(*const fn (*SortListModel) callconv(.c) ?*gtk.Sorter, .{ .name = "gtk_sort_list_model_get_sorter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_incremental](https://docs.gtk.org/gtk4/method.SortListModel.set_incremental.html)
    pub fn setIncremental(self: *SortListModel, _incremental: bool) void {
        const cFn = @extern(*const fn (*SortListModel, bool) callconv(.c) void, .{ .name = "gtk_sort_list_model_set_incremental" });
        const ret = cFn(self, _incremental);
        return ret;
    }
    /// method [set_model](https://docs.gtk.org/gtk4/method.SortListModel.set_model.html)
    pub fn setModel(self: *SortListModel, _model: ?*gio.ListModel) void {
        const cFn = @extern(*const fn (*SortListModel, ?*gio.ListModel) callconv(.c) void, .{ .name = "gtk_sort_list_model_set_model" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_section_sorter](https://docs.gtk.org/gtk4/method.SortListModel.set_section_sorter.html)
    pub fn setSectionSorter(self: *SortListModel, _sorter: ?*gtk.Sorter) void {
        const cFn = @extern(*const fn (*SortListModel, ?*gtk.Sorter) callconv(.c) void, .{ .name = "gtk_sort_list_model_set_section_sorter" });
        const ret = cFn(self, _sorter);
        return ret;
    }
    /// method [set_sorter](https://docs.gtk.org/gtk4/method.SortListModel.set_sorter.html)
    pub fn setSorter(self: *SortListModel, _sorter: ?*gtk.Sorter) void {
        const cFn = @extern(*const fn (*SortListModel, ?*gtk.Sorter) callconv(.c) void, .{ .name = "gtk_sort_list_model_set_sorter" });
        const ret = cFn(self, _sorter);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sort_list_model_get_type" });
        return cFn();
    }
};
pub const SortListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Enum [SortType](https://docs.gtk.org/gtk4/enum.SortType.html)
pub const SortType = enum(u32) {
    ascending = 0,
    descending = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sort_type_get_type" });
        return cFn();
    }
};
/// Class [Sorter](https://docs.gtk.org/gtk4/class.Sorter.html)
pub const Sorter = extern struct {
    parent_instance: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.SorterClass;
    /// method [changed](https://docs.gtk.org/gtk4/method.Sorter.changed.html)
    pub fn changed(self: *Sorter, _change: gtk.SorterChange) void {
        const cFn = @extern(*const fn (*Sorter, gtk.SorterChange) callconv(.c) void, .{ .name = "gtk_sorter_changed" });
        const ret = cFn(self, _change);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/gtk4/method.Sorter.compare.html)
    pub fn compare(self: *Sorter, _item1: *gobject.Object, _item2: *gobject.Object) gtk.Ordering {
        const cFn = @extern(*const fn (*Sorter, *gobject.Object, *gobject.Object) callconv(.c) gtk.Ordering, .{ .name = "gtk_sorter_compare" });
        const ret = cFn(self, _item1, _item2);
        return ret;
    }
    /// method [get_order](https://docs.gtk.org/gtk4/method.Sorter.get_order.html)
    pub fn getOrder(self: *Sorter) gtk.SorterOrder {
        const cFn = @extern(*const fn (*Sorter) callconv(.c) gtk.SorterOrder, .{ .name = "gtk_sorter_get_order" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [compare](https://docs.gtk.org/gtk4/vfunc.Sorter.compare.html)
    pub fn compareV(self: *Sorter, _item1: ?*gobject.Object, _item2: ?*gobject.Object) gtk.Ordering {
        const class: *SorterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.compare.?;
        const ret = vFn(self, _item1, _item2);
        return ret;
    }
    /// vfunc [get_order](https://docs.gtk.org/gtk4/vfunc.Sorter.get_order.html)
    pub fn getOrderV(self: *Sorter) gtk.SorterOrder {
        const class: *SorterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_order.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.Sorter.changed.html)
    pub fn connectChanged(self: *Sorter, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *Sorter, gtk.SorterChange });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sorter_get_type" });
        return cFn();
    }
};
/// Enum [SorterChange](https://docs.gtk.org/gtk4/enum.SorterChange.html)
pub const SorterChange = enum(u32) {
    different = 0,
    inverted = 1,
    less_strict = 2,
    more_strict = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sorter_change_get_type" });
        return cFn();
    }
};
pub const SorterClass = extern struct {
    parent_class: gobject.ObjectClass,
    compare: ?*const fn (_self: *gtk.Sorter, _item1: ?*gobject.Object, _item2: ?*gobject.Object) callconv(.c) gtk.Ordering,
    get_order: ?*const fn (_self: *gtk.Sorter) callconv(.c) gtk.SorterOrder,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
    _gtk_reserved5: ?*anyopaque,
    _gtk_reserved6: ?*anyopaque,
    _gtk_reserved7: ?*anyopaque,
    _gtk_reserved8: ?*anyopaque,
};
/// Enum [SorterOrder](https://docs.gtk.org/gtk4/enum.SorterOrder.html)
pub const SorterOrder = enum(u32) {
    partial = 0,
    none = 1,
    total = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_sorter_order_get_type" });
        return cFn();
    }
};
/// Class [SpinButton](https://docs.gtk.org/gtk4/class.SpinButton.html)
/// - property [activates-default](https://docs.gtk.org/gtk4/property.SpinButton.activates-default.html): (rw) `bool`
/// - property [adjustment](https://docs.gtk.org/gtk4/property.SpinButton.adjustment.html): (rw) `gtk.Adjustment`
/// - property [climb-rate](https://docs.gtk.org/gtk4/property.SpinButton.climb-rate.html): (rw) `f64`
/// - property [digits](https://docs.gtk.org/gtk4/property.SpinButton.digits.html): (rw) `u32`
/// - property [numeric](https://docs.gtk.org/gtk4/property.SpinButton.numeric.html): (rw) `bool`
/// - property [snap-to-ticks](https://docs.gtk.org/gtk4/property.SpinButton.snap-to-ticks.html): (rw) `bool`
/// - property [update-policy](https://docs.gtk.org/gtk4/property.SpinButton.update-policy.html): (rw) `gtk.SpinButtonUpdatePolicy`
/// - property [value](https://docs.gtk.org/gtk4/property.SpinButton.value.html): (rw) `f64`
/// - property [wrap](https://docs.gtk.org/gtk4/property.SpinButton.wrap.html): (rw) `bool`
pub const SpinButton = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.CellEditable, gtk.ConstraintTarget, gtk.Editable, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.SpinButton.new.html)
    pub fn new(_adjustment: ?*gtk.Adjustment, _climb_rate: f64, _digits: u32) *SpinButton {
        const cFn = @extern(*const fn (?*gtk.Adjustment, f64, u32) callconv(.c) *SpinButton, .{ .name = "gtk_spin_button_new" });
        const ret = cFn(_adjustment, _climb_rate, _digits);
        return ret;
    }
    /// ctor [new_with_range](https://docs.gtk.org/gtk4/ctor.SpinButton.new_with_range.html)
    pub fn newWithRange(_min: f64, _max: f64, _step: f64) *SpinButton {
        const cFn = @extern(*const fn (f64, f64, f64) callconv(.c) *SpinButton, .{ .name = "gtk_spin_button_new_with_range" });
        const ret = cFn(_min, _max, _step);
        return ret;
    }
    /// method [configure](https://docs.gtk.org/gtk4/method.SpinButton.configure.html)
    pub fn configure(self: *SpinButton, _adjustment: ?*gtk.Adjustment, _climb_rate: f64, _digits: u32) void {
        const cFn = @extern(*const fn (*SpinButton, ?*gtk.Adjustment, f64, u32) callconv(.c) void, .{ .name = "gtk_spin_button_configure" });
        const ret = cFn(self, _adjustment, _climb_rate, _digits);
        return ret;
    }
    /// method [get_activates_default](https://docs.gtk.org/gtk4/method.SpinButton.get_activates_default.html)
    pub fn getActivatesDefault(self: *SpinButton) bool {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) bool, .{ .name = "gtk_spin_button_get_activates_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_adjustment](https://docs.gtk.org/gtk4/method.SpinButton.get_adjustment.html)
    pub fn getAdjustment(self: *SpinButton) *gtk.Adjustment {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) *gtk.Adjustment, .{ .name = "gtk_spin_button_get_adjustment" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_climb_rate](https://docs.gtk.org/gtk4/method.SpinButton.get_climb_rate.html)
    pub fn getClimbRate(self: *SpinButton) f64 {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) f64, .{ .name = "gtk_spin_button_get_climb_rate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_digits](https://docs.gtk.org/gtk4/method.SpinButton.get_digits.html)
    pub fn getDigits(self: *SpinButton) u32 {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) u32, .{ .name = "gtk_spin_button_get_digits" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_increments](https://docs.gtk.org/gtk4/method.SpinButton.get_increments.html)
    pub fn getIncrements(self: *SpinButton) struct {
        ret: void,
        step: f64,
        page: f64,
    } {
        var step_out: f64 = undefined;
        const _step = &step_out;
        var page_out: f64 = undefined;
        const _page = &page_out;
        const cFn = @extern(*const fn (*SpinButton, ?*f64, ?*f64) callconv(.c) void, .{ .name = "gtk_spin_button_get_increments" });
        const ret = cFn(self, _step, _page);
        return .{ .ret = ret, .step = step_out, .page = page_out };
    }
    /// method [get_numeric](https://docs.gtk.org/gtk4/method.SpinButton.get_numeric.html)
    pub fn getNumeric(self: *SpinButton) bool {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) bool, .{ .name = "gtk_spin_button_get_numeric" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_range](https://docs.gtk.org/gtk4/method.SpinButton.get_range.html)
    pub fn getRange(self: *SpinButton) struct {
        ret: void,
        min: f64,
        max: f64,
    } {
        var min_out: f64 = undefined;
        const _min = &min_out;
        var max_out: f64 = undefined;
        const _max = &max_out;
        const cFn = @extern(*const fn (*SpinButton, ?*f64, ?*f64) callconv(.c) void, .{ .name = "gtk_spin_button_get_range" });
        const ret = cFn(self, _min, _max);
        return .{ .ret = ret, .min = min_out, .max = max_out };
    }
    /// method [get_snap_to_ticks](https://docs.gtk.org/gtk4/method.SpinButton.get_snap_to_ticks.html)
    pub fn getSnapToTicks(self: *SpinButton) bool {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) bool, .{ .name = "gtk_spin_button_get_snap_to_ticks" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_update_policy](https://docs.gtk.org/gtk4/method.SpinButton.get_update_policy.html)
    pub fn getUpdatePolicy(self: *SpinButton) gtk.SpinButtonUpdatePolicy {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) gtk.SpinButtonUpdatePolicy, .{ .name = "gtk_spin_button_get_update_policy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value](https://docs.gtk.org/gtk4/method.SpinButton.get_value.html)
    pub fn getValue(self: *SpinButton) f64 {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) f64, .{ .name = "gtk_spin_button_get_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_value_as_int](https://docs.gtk.org/gtk4/method.SpinButton.get_value_as_int.html)
    pub fn getValueAsInt(self: *SpinButton) i32 {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) i32, .{ .name = "gtk_spin_button_get_value_as_int" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_wrap](https://docs.gtk.org/gtk4/method.SpinButton.get_wrap.html)
    pub fn getWrap(self: *SpinButton) bool {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) bool, .{ .name = "gtk_spin_button_get_wrap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_activates_default](https://docs.gtk.org/gtk4/method.SpinButton.set_activates_default.html)
    pub fn setActivatesDefault(self: *SpinButton, _activates_default: bool) void {
        const cFn = @extern(*const fn (*SpinButton, bool) callconv(.c) void, .{ .name = "gtk_spin_button_set_activates_default" });
        const ret = cFn(self, _activates_default);
        return ret;
    }
    /// method [set_adjustment](https://docs.gtk.org/gtk4/method.SpinButton.set_adjustment.html)
    pub fn setAdjustment(self: *SpinButton, _adjustment: *gtk.Adjustment) void {
        const cFn = @extern(*const fn (*SpinButton, *gtk.Adjustment) callconv(.c) void, .{ .name = "gtk_spin_button_set_adjustment" });
        const ret = cFn(self, _adjustment);
        return ret;
    }
    /// method [set_climb_rate](https://docs.gtk.org/gtk4/method.SpinButton.set_climb_rate.html)
    pub fn setClimbRate(self: *SpinButton, _climb_rate: f64) void {
        const cFn = @extern(*const fn (*SpinButton, f64) callconv(.c) void, .{ .name = "gtk_spin_button_set_climb_rate" });
        const ret = cFn(self, _climb_rate);
        return ret;
    }
    /// method [set_digits](https://docs.gtk.org/gtk4/method.SpinButton.set_digits.html)
    pub fn setDigits(self: *SpinButton, _digits: u32) void {
        const cFn = @extern(*const fn (*SpinButton, u32) callconv(.c) void, .{ .name = "gtk_spin_button_set_digits" });
        const ret = cFn(self, _digits);
        return ret;
    }
    /// method [set_increments](https://docs.gtk.org/gtk4/method.SpinButton.set_increments.html)
    pub fn setIncrements(self: *SpinButton, _step: f64, _page: f64) void {
        const cFn = @extern(*const fn (*SpinButton, f64, f64) callconv(.c) void, .{ .name = "gtk_spin_button_set_increments" });
        const ret = cFn(self, _step, _page);
        return ret;
    }
    /// method [set_numeric](https://docs.gtk.org/gtk4/method.SpinButton.set_numeric.html)
    pub fn setNumeric(self: *SpinButton, _numeric: bool) void {
        const cFn = @extern(*const fn (*SpinButton, bool) callconv(.c) void, .{ .name = "gtk_spin_button_set_numeric" });
        const ret = cFn(self, _numeric);
        return ret;
    }
    /// method [set_range](https://docs.gtk.org/gtk4/method.SpinButton.set_range.html)
    pub fn setRange(self: *SpinButton, _min: f64, _max: f64) void {
        const cFn = @extern(*const fn (*SpinButton, f64, f64) callconv(.c) void, .{ .name = "gtk_spin_button_set_range" });
        const ret = cFn(self, _min, _max);
        return ret;
    }
    /// method [set_snap_to_ticks](https://docs.gtk.org/gtk4/method.SpinButton.set_snap_to_ticks.html)
    pub fn setSnapToTicks(self: *SpinButton, _snap_to_ticks: bool) void {
        const cFn = @extern(*const fn (*SpinButton, bool) callconv(.c) void, .{ .name = "gtk_spin_button_set_snap_to_ticks" });
        const ret = cFn(self, _snap_to_ticks);
        return ret;
    }
    /// method [set_update_policy](https://docs.gtk.org/gtk4/method.SpinButton.set_update_policy.html)
    pub fn setUpdatePolicy(self: *SpinButton, _policy: gtk.SpinButtonUpdatePolicy) void {
        const cFn = @extern(*const fn (*SpinButton, gtk.SpinButtonUpdatePolicy) callconv(.c) void, .{ .name = "gtk_spin_button_set_update_policy" });
        const ret = cFn(self, _policy);
        return ret;
    }
    /// method [set_value](https://docs.gtk.org/gtk4/method.SpinButton.set_value.html)
    pub fn setValue(self: *SpinButton, _value: f64) void {
        const cFn = @extern(*const fn (*SpinButton, f64) callconv(.c) void, .{ .name = "gtk_spin_button_set_value" });
        const ret = cFn(self, _value);
        return ret;
    }
    /// method [set_wrap](https://docs.gtk.org/gtk4/method.SpinButton.set_wrap.html)
    pub fn setWrap(self: *SpinButton, _wrap: bool) void {
        const cFn = @extern(*const fn (*SpinButton, bool) callconv(.c) void, .{ .name = "gtk_spin_button_set_wrap" });
        const ret = cFn(self, _wrap);
        return ret;
    }
    /// method [spin](https://docs.gtk.org/gtk4/method.SpinButton.spin.html)
    pub fn spin(self: *SpinButton, _direction: gtk.SpinType, _increment: f64) void {
        const cFn = @extern(*const fn (*SpinButton, gtk.SpinType, f64) callconv(.c) void, .{ .name = "gtk_spin_button_spin" });
        const ret = cFn(self, _direction, _increment);
        return ret;
    }
    /// method [update](https://docs.gtk.org/gtk4/method.SpinButton.update.html)
    pub fn update(self: *SpinButton) void {
        const cFn = @extern(*const fn (*SpinButton) callconv(.c) void, .{ .name = "gtk_spin_button_update" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.SpinButton.activate.html)
    pub fn connectActivate(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *SpinButton });
    }
    /// signal [change-value](https://docs.gtk.org/gtk4/signal.SpinButton.change-value.html)
    pub fn connectChangeValue(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("change-value", handler, args, flags, &.{ void, *SpinButton, gtk.ScrollType });
    }
    /// signal [input](https://docs.gtk.org/gtk4/signal.SpinButton.input.html)
    pub fn connectInput(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("input", handler, args, flags, &.{ i32, *SpinButton, *f64 });
    }
    /// signal [output](https://docs.gtk.org/gtk4/signal.SpinButton.output.html)
    pub fn connectOutput(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("output", handler, args, flags, &.{ bool, *SpinButton });
    }
    /// signal [value-changed](https://docs.gtk.org/gtk4/signal.SpinButton.value-changed.html)
    pub fn connectValueChanged(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("value-changed", handler, args, flags, &.{ void, *SpinButton });
    }
    /// signal [wrapped](https://docs.gtk.org/gtk4/signal.SpinButton.wrapped.html)
    pub fn connectWrapped(self: *SpinButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("wrapped", handler, args, flags, &.{ void, *SpinButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_spin_button_get_type" });
        return cFn();
    }
};
/// Enum [SpinButtonUpdatePolicy](https://docs.gtk.org/gtk4/enum.SpinButtonUpdatePolicy.html)
pub const SpinButtonUpdatePolicy = enum(u32) {
    always = 0,
    if_valid = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_spin_button_update_policy_get_type" });
        return cFn();
    }
};
/// Enum [SpinType](https://docs.gtk.org/gtk4/enum.SpinType.html)
pub const SpinType = enum(u32) {
    step_forward = 0,
    step_backward = 1,
    page_forward = 2,
    page_backward = 3,
    home = 4,
    end = 5,
    user_defined = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_spin_type_get_type" });
        return cFn();
    }
};
/// Class [Spinner](https://docs.gtk.org/gtk4/class.Spinner.html)
/// - property [spinning](https://docs.gtk.org/gtk4/property.Spinner.spinning.html): (rw) `bool`
pub const Spinner = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Spinner.new.html)
    pub fn new() *Spinner {
        const cFn = @extern(*const fn () callconv(.c) *Spinner, .{ .name = "gtk_spinner_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_spinning](https://docs.gtk.org/gtk4/method.Spinner.get_spinning.html)
    pub fn getSpinning(self: *Spinner) bool {
        const cFn = @extern(*const fn (*Spinner) callconv(.c) bool, .{ .name = "gtk_spinner_get_spinning" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_spinning](https://docs.gtk.org/gtk4/method.Spinner.set_spinning.html)
    pub fn setSpinning(self: *Spinner, _spinning: bool) void {
        const cFn = @extern(*const fn (*Spinner, bool) callconv(.c) void, .{ .name = "gtk_spinner_set_spinning" });
        const ret = cFn(self, _spinning);
        return ret;
    }
    /// method [start](https://docs.gtk.org/gtk4/method.Spinner.start.html)
    pub fn start(self: *Spinner) void {
        const cFn = @extern(*const fn (*Spinner) callconv(.c) void, .{ .name = "gtk_spinner_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [stop](https://docs.gtk.org/gtk4/method.Spinner.stop.html)
    pub fn stop(self: *Spinner) void {
        const cFn = @extern(*const fn (*Spinner) callconv(.c) void, .{ .name = "gtk_spinner_stop" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_spinner_get_type" });
        return cFn();
    }
};
/// Class [Stack](https://docs.gtk.org/gtk4/class.Stack.html)
/// - property [hhomogeneous](https://docs.gtk.org/gtk4/property.Stack.hhomogeneous.html): (rw) `bool`
/// - property [interpolate-size](https://docs.gtk.org/gtk4/property.Stack.interpolate-size.html): (rw) `bool`
/// - property [pages](https://docs.gtk.org/gtk4/property.Stack.pages.html): (r-) `gtk.SelectionModel`
/// - property [transition-duration](https://docs.gtk.org/gtk4/property.Stack.transition-duration.html): (rw) `u32`
/// - property [transition-running](https://docs.gtk.org/gtk4/property.Stack.transition-running.html): (r-) `bool`
/// - property [transition-type](https://docs.gtk.org/gtk4/property.Stack.transition-type.html): (rw) `gtk.StackTransitionType`
/// - property [vhomogeneous](https://docs.gtk.org/gtk4/property.Stack.vhomogeneous.html): (rw) `bool`
/// - property [visible-child](https://docs.gtk.org/gtk4/property.Stack.visible-child.html): (rw) `gtk.Widget`
/// - property [visible-child-name](https://docs.gtk.org/gtk4/property.Stack.visible-child-name.html): (rw) `[*:0]const u8`
pub const Stack = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Stack.new.html)
    pub fn new() *Stack {
        const cFn = @extern(*const fn () callconv(.c) *Stack, .{ .name = "gtk_stack_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_child](https://docs.gtk.org/gtk4/method.Stack.add_child.html)
    pub fn addChild(self: *Stack, _child: *gtk.Widget) *gtk.StackPage {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget) callconv(.c) *gtk.StackPage, .{ .name = "gtk_stack_add_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [add_named](https://docs.gtk.org/gtk4/method.Stack.add_named.html)
    pub fn addNamed(self: *Stack, _child: *gtk.Widget, _name: ?[*:0]const u8) *gtk.StackPage {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget, ?[*:0]const u8) callconv(.c) *gtk.StackPage, .{ .name = "gtk_stack_add_named" });
        const ret = cFn(self, _child, _name);
        return ret;
    }
    /// method [add_titled](https://docs.gtk.org/gtk4/method.Stack.add_titled.html)
    pub fn addTitled(self: *Stack, _child: *gtk.Widget, _name: ?[*:0]const u8, _title: [*:0]const u8) *gtk.StackPage {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget, ?[*:0]const u8, [*:0]const u8) callconv(.c) *gtk.StackPage, .{ .name = "gtk_stack_add_titled" });
        const ret = cFn(self, _child, _name, _title);
        return ret;
    }
    /// method [get_child_by_name](https://docs.gtk.org/gtk4/method.Stack.get_child_by_name.html)
    pub fn getChildByName(self: *Stack, _name: [*:0]const u8) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Stack, [*:0]const u8) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_stack_get_child_by_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_hhomogeneous](https://docs.gtk.org/gtk4/method.Stack.get_hhomogeneous.html)
    pub fn getHhomogeneous(self: *Stack) bool {
        const cFn = @extern(*const fn (*Stack) callconv(.c) bool, .{ .name = "gtk_stack_get_hhomogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_interpolate_size](https://docs.gtk.org/gtk4/method.Stack.get_interpolate_size.html)
    pub fn getInterpolateSize(self: *Stack) bool {
        const cFn = @extern(*const fn (*Stack) callconv(.c) bool, .{ .name = "gtk_stack_get_interpolate_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_page](https://docs.gtk.org/gtk4/method.Stack.get_page.html)
    pub fn getPage(self: *Stack, _child: *gtk.Widget) *gtk.StackPage {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget) callconv(.c) *gtk.StackPage, .{ .name = "gtk_stack_get_page" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [get_pages](https://docs.gtk.org/gtk4/method.Stack.get_pages.html)
    pub fn getPages(self: *Stack) *gtk.SelectionModel {
        const cFn = @extern(*const fn (*Stack) callconv(.c) *gtk.SelectionModel, .{ .name = "gtk_stack_get_pages" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transition_duration](https://docs.gtk.org/gtk4/method.Stack.get_transition_duration.html)
    pub fn getTransitionDuration(self: *Stack) u32 {
        const cFn = @extern(*const fn (*Stack) callconv(.c) u32, .{ .name = "gtk_stack_get_transition_duration" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transition_running](https://docs.gtk.org/gtk4/method.Stack.get_transition_running.html)
    pub fn getTransitionRunning(self: *Stack) bool {
        const cFn = @extern(*const fn (*Stack) callconv(.c) bool, .{ .name = "gtk_stack_get_transition_running" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transition_type](https://docs.gtk.org/gtk4/method.Stack.get_transition_type.html)
    pub fn getTransitionType(self: *Stack) gtk.StackTransitionType {
        const cFn = @extern(*const fn (*Stack) callconv(.c) gtk.StackTransitionType, .{ .name = "gtk_stack_get_transition_type" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vhomogeneous](https://docs.gtk.org/gtk4/method.Stack.get_vhomogeneous.html)
    pub fn getVhomogeneous(self: *Stack) bool {
        const cFn = @extern(*const fn (*Stack) callconv(.c) bool, .{ .name = "gtk_stack_get_vhomogeneous" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible_child](https://docs.gtk.org/gtk4/method.Stack.get_visible_child.html)
    pub fn getVisibleChild(self: *Stack) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Stack) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_stack_get_visible_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible_child_name](https://docs.gtk.org/gtk4/method.Stack.get_visible_child_name.html)
    pub fn getVisibleChildName(self: *Stack) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Stack) callconv(.c) ?[*:0]u8, .{ .name = "gtk_stack_get_visible_child_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.Stack.remove.html)
    pub fn remove(self: *Stack, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_stack_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_hhomogeneous](https://docs.gtk.org/gtk4/method.Stack.set_hhomogeneous.html)
    pub fn setHhomogeneous(self: *Stack, _hhomogeneous: bool) void {
        const cFn = @extern(*const fn (*Stack, bool) callconv(.c) void, .{ .name = "gtk_stack_set_hhomogeneous" });
        const ret = cFn(self, _hhomogeneous);
        return ret;
    }
    /// method [set_interpolate_size](https://docs.gtk.org/gtk4/method.Stack.set_interpolate_size.html)
    pub fn setInterpolateSize(self: *Stack, _interpolate_size: bool) void {
        const cFn = @extern(*const fn (*Stack, bool) callconv(.c) void, .{ .name = "gtk_stack_set_interpolate_size" });
        const ret = cFn(self, _interpolate_size);
        return ret;
    }
    /// method [set_transition_duration](https://docs.gtk.org/gtk4/method.Stack.set_transition_duration.html)
    pub fn setTransitionDuration(self: *Stack, _duration: u32) void {
        const cFn = @extern(*const fn (*Stack, u32) callconv(.c) void, .{ .name = "gtk_stack_set_transition_duration" });
        const ret = cFn(self, _duration);
        return ret;
    }
    /// method [set_transition_type](https://docs.gtk.org/gtk4/method.Stack.set_transition_type.html)
    pub fn setTransitionType(self: *Stack, _transition: gtk.StackTransitionType) void {
        const cFn = @extern(*const fn (*Stack, gtk.StackTransitionType) callconv(.c) void, .{ .name = "gtk_stack_set_transition_type" });
        const ret = cFn(self, _transition);
        return ret;
    }
    /// method [set_vhomogeneous](https://docs.gtk.org/gtk4/method.Stack.set_vhomogeneous.html)
    pub fn setVhomogeneous(self: *Stack, _vhomogeneous: bool) void {
        const cFn = @extern(*const fn (*Stack, bool) callconv(.c) void, .{ .name = "gtk_stack_set_vhomogeneous" });
        const ret = cFn(self, _vhomogeneous);
        return ret;
    }
    /// method [set_visible_child](https://docs.gtk.org/gtk4/method.Stack.set_visible_child.html)
    pub fn setVisibleChild(self: *Stack, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Stack, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_stack_set_visible_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_visible_child_full](https://docs.gtk.org/gtk4/method.Stack.set_visible_child_full.html)
    pub fn setVisibleChildFull(self: *Stack, _name: [*:0]const u8, _transition: gtk.StackTransitionType) void {
        const cFn = @extern(*const fn (*Stack, [*:0]const u8, gtk.StackTransitionType) callconv(.c) void, .{ .name = "gtk_stack_set_visible_child_full" });
        const ret = cFn(self, _name, _transition);
        return ret;
    }
    /// method [set_visible_child_name](https://docs.gtk.org/gtk4/method.Stack.set_visible_child_name.html)
    pub fn setVisibleChildName(self: *Stack, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Stack, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_stack_set_visible_child_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_stack_get_type" });
        return cFn();
    }
};
/// Class [StackPage](https://docs.gtk.org/gtk4/class.StackPage.html)
/// - property [child](https://docs.gtk.org/gtk4/property.StackPage.child.html): (r-) `gtk.Widget`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.StackPage.icon-name.html): (rw) `[*:0]const u8`
/// - property [name](https://docs.gtk.org/gtk4/property.StackPage.name.html): (rw) `[*:0]const u8`
/// - property [needs-attention](https://docs.gtk.org/gtk4/property.StackPage.needs-attention.html): (rw) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.StackPage.title.html): (rw) `[*:0]const u8`
/// - property [use-underline](https://docs.gtk.org/gtk4/property.StackPage.use-underline.html): (rw) `bool`
/// - property [visible](https://docs.gtk.org/gtk4/property.StackPage.visible.html): (rw) `bool`
pub const StackPage = opaque {
    pub const Interfaces = [_]type{gtk.Accessible};
    pub const Parent = gobject.Object;
    /// method [get_child](https://docs.gtk.org/gtk4/method.StackPage.get_child.html)
    pub fn getChild(self: *StackPage) *gtk.Widget {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) *gtk.Widget, .{ .name = "gtk_stack_page_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.StackPage.get_icon_name.html)
    pub fn getIconName(self: *StackPage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) ?[*:0]u8, .{ .name = "gtk_stack_page_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.StackPage.get_name.html)
    pub fn getName(self: *StackPage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) ?[*:0]u8, .{ .name = "gtk_stack_page_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_needs_attention](https://docs.gtk.org/gtk4/method.StackPage.get_needs_attention.html)
    pub fn getNeedsAttention(self: *StackPage) bool {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) bool, .{ .name = "gtk_stack_page_get_needs_attention" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.StackPage.get_title.html)
    pub fn getTitle(self: *StackPage) ?[*:0]u8 {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) ?[*:0]u8, .{ .name = "gtk_stack_page_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_use_underline](https://docs.gtk.org/gtk4/method.StackPage.get_use_underline.html)
    pub fn getUseUnderline(self: *StackPage) bool {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) bool, .{ .name = "gtk_stack_page_get_use_underline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible](https://docs.gtk.org/gtk4/method.StackPage.get_visible.html)
    pub fn getVisible(self: *StackPage) bool {
        const cFn = @extern(*const fn (*StackPage) callconv(.c) bool, .{ .name = "gtk_stack_page_get_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_icon_name](https://docs.gtk.org/gtk4/method.StackPage.set_icon_name.html)
    pub fn setIconName(self: *StackPage, _setting: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StackPage, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_stack_page_set_icon_name" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gtk4/method.StackPage.set_name.html)
    pub fn setName(self: *StackPage, _setting: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StackPage, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_stack_page_set_name" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_needs_attention](https://docs.gtk.org/gtk4/method.StackPage.set_needs_attention.html)
    pub fn setNeedsAttention(self: *StackPage, _setting: bool) void {
        const cFn = @extern(*const fn (*StackPage, bool) callconv(.c) void, .{ .name = "gtk_stack_page_set_needs_attention" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.StackPage.set_title.html)
    pub fn setTitle(self: *StackPage, _setting: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StackPage, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_stack_page_set_title" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_use_underline](https://docs.gtk.org/gtk4/method.StackPage.set_use_underline.html)
    pub fn setUseUnderline(self: *StackPage, _setting: bool) void {
        const cFn = @extern(*const fn (*StackPage, bool) callconv(.c) void, .{ .name = "gtk_stack_page_set_use_underline" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_visible](https://docs.gtk.org/gtk4/method.StackPage.set_visible.html)
    pub fn setVisible(self: *StackPage, _visible: bool) void {
        const cFn = @extern(*const fn (*StackPage, bool) callconv(.c) void, .{ .name = "gtk_stack_page_set_visible" });
        const ret = cFn(self, _visible);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_stack_page_get_type" });
        return cFn();
    }
};
/// Class [StackSidebar](https://docs.gtk.org/gtk4/class.StackSidebar.html)
/// - property [stack](https://docs.gtk.org/gtk4/property.StackSidebar.stack.html): (rw) `gtk.Stack`
pub const StackSidebar = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StackSidebar.new.html)
    pub fn new() *StackSidebar {
        const cFn = @extern(*const fn () callconv(.c) *StackSidebar, .{ .name = "gtk_stack_sidebar_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_stack](https://docs.gtk.org/gtk4/method.StackSidebar.get_stack.html)
    pub fn getStack(self: *StackSidebar) ?*gtk.Stack {
        const cFn = @extern(*const fn (*StackSidebar) callconv(.c) ?*gtk.Stack, .{ .name = "gtk_stack_sidebar_get_stack" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_stack](https://docs.gtk.org/gtk4/method.StackSidebar.set_stack.html)
    pub fn setStack(self: *StackSidebar, _stack: *gtk.Stack) void {
        const cFn = @extern(*const fn (*StackSidebar, *gtk.Stack) callconv(.c) void, .{ .name = "gtk_stack_sidebar_set_stack" });
        const ret = cFn(self, _stack);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_stack_sidebar_get_type" });
        return cFn();
    }
};
/// Class [StackSwitcher](https://docs.gtk.org/gtk4/class.StackSwitcher.html)
/// - property [stack](https://docs.gtk.org/gtk4/property.StackSwitcher.stack.html): (rw) `gtk.Stack`
pub const StackSwitcher = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StackSwitcher.new.html)
    pub fn new() *StackSwitcher {
        const cFn = @extern(*const fn () callconv(.c) *StackSwitcher, .{ .name = "gtk_stack_switcher_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_stack](https://docs.gtk.org/gtk4/method.StackSwitcher.get_stack.html)
    pub fn getStack(self: *StackSwitcher) ?*gtk.Stack {
        const cFn = @extern(*const fn (*StackSwitcher) callconv(.c) ?*gtk.Stack, .{ .name = "gtk_stack_switcher_get_stack" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_stack](https://docs.gtk.org/gtk4/method.StackSwitcher.set_stack.html)
    pub fn setStack(self: *StackSwitcher, _stack: ?*gtk.Stack) void {
        const cFn = @extern(*const fn (*StackSwitcher, ?*gtk.Stack) callconv(.c) void, .{ .name = "gtk_stack_switcher_set_stack" });
        const ret = cFn(self, _stack);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_stack_switcher_get_type" });
        return cFn();
    }
};
/// Enum [StackTransitionType](https://docs.gtk.org/gtk4/enum.StackTransitionType.html)
pub const StackTransitionType = enum(u32) {
    none = 0,
    crossfade = 1,
    slide_right = 2,
    slide_left = 3,
    slide_up = 4,
    slide_down = 5,
    slide_left_right = 6,
    slide_up_down = 7,
    over_up = 8,
    over_down = 9,
    over_left = 10,
    over_right = 11,
    under_up = 12,
    under_down = 13,
    under_left = 14,
    under_right = 15,
    over_up_down = 16,
    over_down_up = 17,
    over_left_right = 18,
    over_right_left = 19,
    rotate_left = 20,
    rotate_right = 21,
    rotate_left_right = 22,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_stack_transition_type_get_type" });
        return cFn();
    }
};
/// Flags [StateFlags](https://docs.gtk.org/gtk4/flags.StateFlags.html)
pub const StateFlags = packed struct(u32) {
    active: bool = false,
    prelight: bool = false,
    selected: bool = false,
    insensitive: bool = false,
    inconsistent: bool = false,
    focused: bool = false,
    backdrop: bool = false,
    dir_ltr: bool = false,
    dir_rtl: bool = false,
    link: bool = false,
    visited: bool = false,
    checked: bool = false,
    drop_active: bool = false,
    focus_visible: bool = false,
    focus_within: bool = false,
    _: u17 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_state_flags_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [Statusbar](https://docs.gtk.org/gtk4/class.Statusbar.html)
pub const Statusbar = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Statusbar.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *Statusbar {
            const cFn = @extern(*const fn () callconv(.c) *Statusbar, .{ .name = "gtk_statusbar_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [get_context_id](https://docs.gtk.org/gtk4/method.Statusbar.get_context_id.html)
    pub const getContextId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getContextId(self: *Statusbar, _context_description: [*:0]const u8) u32 {
            const cFn = @extern(*const fn (*Statusbar, [*:0]const u8) callconv(.c) u32, .{ .name = "gtk_statusbar_get_context_id" });
            const ret = cFn(self, _context_description);
            return ret;
        }
    }.getContextId;
    /// Deprecated:
    /// method [pop](https://docs.gtk.org/gtk4/method.Statusbar.pop.html)
    pub const pop = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pop(self: *Statusbar, _context_id: u32) void {
            const cFn = @extern(*const fn (*Statusbar, u32) callconv(.c) void, .{ .name = "gtk_statusbar_pop" });
            const ret = cFn(self, _context_id);
            return ret;
        }
    }.pop;
    /// Deprecated:
    /// method [push](https://docs.gtk.org/gtk4/method.Statusbar.push.html)
    pub const push = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn push(self: *Statusbar, _context_id: u32, _text: [*:0]const u8) u32 {
            const cFn = @extern(*const fn (*Statusbar, u32, [*:0]const u8) callconv(.c) u32, .{ .name = "gtk_statusbar_push" });
            const ret = cFn(self, _context_id, _text);
            return ret;
        }
    }.push;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gtk4/method.Statusbar.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *Statusbar, _context_id: u32, _message_id: u32) void {
            const cFn = @extern(*const fn (*Statusbar, u32, u32) callconv(.c) void, .{ .name = "gtk_statusbar_remove" });
            const ret = cFn(self, _context_id, _message_id);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [remove_all](https://docs.gtk.org/gtk4/method.Statusbar.remove_all.html)
    pub const removeAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeAll(self: *Statusbar, _context_id: u32) void {
            const cFn = @extern(*const fn (*Statusbar, u32) callconv(.c) void, .{ .name = "gtk_statusbar_remove_all" });
            const ret = cFn(self, _context_id);
            return ret;
        }
    }.removeAll;
    /// signal [text-popped](https://docs.gtk.org/gtk4/signal.Statusbar.text-popped.html)
    pub fn connectTextPopped(self: *Statusbar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("text-popped", handler, args, flags, &.{ void, *Statusbar, u32, [*:0]const u8 });
    }
    /// signal [text-pushed](https://docs.gtk.org/gtk4/signal.Statusbar.text-pushed.html)
    pub fn connectTextPushed(self: *Statusbar, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("text-pushed", handler, args, flags, &.{ void, *Statusbar, u32, [*:0]const u8 });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_statusbar_get_type" });
        return cFn();
    }
};
/// Class [StringFilter](https://docs.gtk.org/gtk4/class.StringFilter.html)
/// - property [expression](https://docs.gtk.org/gtk4/property.StringFilter.expression.html): (rw) `gtk.Expression`
/// - property [ignore-case](https://docs.gtk.org/gtk4/property.StringFilter.ignore-case.html): (rw) `bool`
/// - property [match-mode](https://docs.gtk.org/gtk4/property.StringFilter.match-mode.html): (rw) `gtk.StringFilterMatchMode`
/// - property [search](https://docs.gtk.org/gtk4/property.StringFilter.search.html): (rw) `[*:0]const u8`
pub const StringFilter = opaque {
    pub const Parent = gtk.Filter;
    pub const Class = gtk.StringFilterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StringFilter.new.html)
    pub fn new(_expression: ?*gtk.Expression) *StringFilter {
        const cFn = @extern(*const fn (?*gtk.Expression) callconv(.c) *StringFilter, .{ .name = "gtk_string_filter_new" });
        const ret = cFn(_expression);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.StringFilter.get_expression.html)
    pub fn getExpression(self: *StringFilter) ?*gtk.Expression {
        const cFn = @extern(*const fn (*StringFilter) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_string_filter_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ignore_case](https://docs.gtk.org/gtk4/method.StringFilter.get_ignore_case.html)
    pub fn getIgnoreCase(self: *StringFilter) bool {
        const cFn = @extern(*const fn (*StringFilter) callconv(.c) bool, .{ .name = "gtk_string_filter_get_ignore_case" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_match_mode](https://docs.gtk.org/gtk4/method.StringFilter.get_match_mode.html)
    pub fn getMatchMode(self: *StringFilter) gtk.StringFilterMatchMode {
        const cFn = @extern(*const fn (*StringFilter) callconv(.c) gtk.StringFilterMatchMode, .{ .name = "gtk_string_filter_get_match_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_search](https://docs.gtk.org/gtk4/method.StringFilter.get_search.html)
    pub fn getSearch(self: *StringFilter) ?[*:0]u8 {
        const cFn = @extern(*const fn (*StringFilter) callconv(.c) ?[*:0]u8, .{ .name = "gtk_string_filter_get_search" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_expression](https://docs.gtk.org/gtk4/method.StringFilter.set_expression.html)
    pub fn setExpression(self: *StringFilter, _expression: ?*gtk.Expression) void {
        const cFn = @extern(*const fn (*StringFilter, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_string_filter_set_expression" });
        const ret = cFn(self, _expression);
        return ret;
    }
    /// method [set_ignore_case](https://docs.gtk.org/gtk4/method.StringFilter.set_ignore_case.html)
    pub fn setIgnoreCase(self: *StringFilter, _ignore_case: bool) void {
        const cFn = @extern(*const fn (*StringFilter, bool) callconv(.c) void, .{ .name = "gtk_string_filter_set_ignore_case" });
        const ret = cFn(self, _ignore_case);
        return ret;
    }
    /// method [set_match_mode](https://docs.gtk.org/gtk4/method.StringFilter.set_match_mode.html)
    pub fn setMatchMode(self: *StringFilter, _mode: gtk.StringFilterMatchMode) void {
        const cFn = @extern(*const fn (*StringFilter, gtk.StringFilterMatchMode) callconv(.c) void, .{ .name = "gtk_string_filter_set_match_mode" });
        const ret = cFn(self, _mode);
        return ret;
    }
    /// method [set_search](https://docs.gtk.org/gtk4/method.StringFilter.set_search.html)
    pub fn setSearch(self: *StringFilter, _search: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*StringFilter, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_string_filter_set_search" });
        const ret = cFn(self, _search);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_string_filter_get_type" });
        return cFn();
    }
};
pub const StringFilterClass = extern struct {
    parent_class: gtk.FilterClass,
};
/// Enum [StringFilterMatchMode](https://docs.gtk.org/gtk4/enum.StringFilterMatchMode.html)
pub const StringFilterMatchMode = enum(u32) {
    exact = 0,
    substring = 1,
    prefix = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_string_filter_match_mode_get_type" });
        return cFn();
    }
};
/// Class [StringList](https://docs.gtk.org/gtk4/class.StringList.html)
/// - property [item-type](https://docs.gtk.org/gtk4/property.StringList.item-type.html): (r-) `core.Type`
/// - property [n-items](https://docs.gtk.org/gtk4/property.StringList.n-items.html): (r-) `u32`
/// - property [strings](https://docs.gtk.org/gtk4/property.StringList.strings.html): (--) `[*:null]?[*:0]const u8`
pub const StringList = opaque {
    pub const Interfaces = [_]type{ gio.ListModel, gtk.Buildable };
    pub const Parent = gobject.Object;
    pub const Class = gtk.StringListClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StringList.new.html)
    pub fn new(_strings: ?[*:null]?[*:0]const u8) *StringList {
        const cFn = @extern(*const fn (?[*:null]?[*:0]const u8) callconv(.c) *StringList, .{ .name = "gtk_string_list_new" });
        const ret = cFn(_strings);
        return ret;
    }
    /// method [append](https://docs.gtk.org/gtk4/method.StringList.append.html)
    pub fn append(self: *StringList, _string: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StringList, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_string_list_append" });
        const ret = cFn(self, _string);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/gtk4/method.StringList.get_string.html)
    pub fn getString(self: *StringList, _position: u32) ?[*:0]u8 {
        const cFn = @extern(*const fn (*StringList, u32) callconv(.c) ?[*:0]u8, .{ .name = "gtk_string_list_get_string" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.StringList.remove.html)
    pub fn remove(self: *StringList, _position: u32) void {
        const cFn = @extern(*const fn (*StringList, u32) callconv(.c) void, .{ .name = "gtk_string_list_remove" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [splice](https://docs.gtk.org/gtk4/method.StringList.splice.html)
    pub fn splice(self: *StringList, _position: u32, _n_removals: u32, _additions: ?[*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*StringList, u32, u32, ?[*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_string_list_splice" });
        const ret = cFn(self, _position, _n_removals, _additions);
        return ret;
    }
    /// method [take](https://docs.gtk.org/gtk4/method.StringList.take.html)
    pub fn take(self: *StringList, _string: [*:0]const u8) void {
        const cFn = @extern(*const fn (*StringList, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_string_list_take" });
        const ret = cFn(self, _string);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_string_list_get_type" });
        return cFn();
    }
};
pub const StringListClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [StringObject](https://docs.gtk.org/gtk4/class.StringObject.html)
/// - property [string](https://docs.gtk.org/gtk4/property.StringObject.string.html): (r-) `[*:0]const u8`
pub const StringObject = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.StringObjectClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StringObject.new.html)
    pub fn new(_string: [*:0]const u8) *StringObject {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *StringObject, .{ .name = "gtk_string_object_new" });
        const ret = cFn(_string);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/gtk4/method.StringObject.get_string.html)
    pub fn getString(self: *StringObject) [*:0]u8 {
        const cFn = @extern(*const fn (*StringObject) callconv(.c) [*:0]u8, .{ .name = "gtk_string_object_get_string" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_string_object_get_type" });
        return cFn();
    }
};
pub const StringObjectClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [StringSorter](https://docs.gtk.org/gtk4/class.StringSorter.html)
/// - property [collation](https://docs.gtk.org/gtk4/property.StringSorter.collation.html): (rw) `gtk.Collation`
/// - property [expression](https://docs.gtk.org/gtk4/property.StringSorter.expression.html): (rw) `gtk.Expression`
/// - property [ignore-case](https://docs.gtk.org/gtk4/property.StringSorter.ignore-case.html): (rw) `bool`
pub const StringSorter = opaque {
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.StringSorterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.StringSorter.new.html)
    pub fn new(_expression: ?*gtk.Expression) *StringSorter {
        const cFn = @extern(*const fn (?*gtk.Expression) callconv(.c) *StringSorter, .{ .name = "gtk_string_sorter_new" });
        const ret = cFn(_expression);
        return ret;
    }
    /// method [get_collation](https://docs.gtk.org/gtk4/method.StringSorter.get_collation.html)
    pub fn getCollation(self: *StringSorter) gtk.Collation {
        const cFn = @extern(*const fn (*StringSorter) callconv(.c) gtk.Collation, .{ .name = "gtk_string_sorter_get_collation" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_expression](https://docs.gtk.org/gtk4/method.StringSorter.get_expression.html)
    pub fn getExpression(self: *StringSorter) ?*gtk.Expression {
        const cFn = @extern(*const fn (*StringSorter) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_string_sorter_get_expression" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ignore_case](https://docs.gtk.org/gtk4/method.StringSorter.get_ignore_case.html)
    pub fn getIgnoreCase(self: *StringSorter) bool {
        const cFn = @extern(*const fn (*StringSorter) callconv(.c) bool, .{ .name = "gtk_string_sorter_get_ignore_case" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_collation](https://docs.gtk.org/gtk4/method.StringSorter.set_collation.html)
    pub fn setCollation(self: *StringSorter, _collation: gtk.Collation) void {
        const cFn = @extern(*const fn (*StringSorter, gtk.Collation) callconv(.c) void, .{ .name = "gtk_string_sorter_set_collation" });
        const ret = cFn(self, _collation);
        return ret;
    }
    /// method [set_expression](https://docs.gtk.org/gtk4/method.StringSorter.set_expression.html)
    pub fn setExpression(self: *StringSorter, _expression: ?*gtk.Expression) void {
        const cFn = @extern(*const fn (*StringSorter, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_string_sorter_set_expression" });
        const ret = cFn(self, _expression);
        return ret;
    }
    /// method [set_ignore_case](https://docs.gtk.org/gtk4/method.StringSorter.set_ignore_case.html)
    pub fn setIgnoreCase(self: *StringSorter, _ignore_case: bool) void {
        const cFn = @extern(*const fn (*StringSorter, bool) callconv(.c) void, .{ .name = "gtk_string_sorter_set_ignore_case" });
        const ret = cFn(self, _ignore_case);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_string_sorter_get_type" });
        return cFn();
    }
};
pub const StringSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Deprecated:
/// Class [StyleContext](https://docs.gtk.org/gtk4/class.StyleContext.html)
/// - property [display](https://docs.gtk.org/gtk4/property.StyleContext.display.html): (rw) `gdk.Display`
pub const StyleContext = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_object: gobject.Object,
    pub const Parent = gobject.Object;
    pub const Class = gtk.StyleContextClass;
    /// type func [add_provider_for_display](https://docs.gtk.org/gtk4/type_func.StyleContext.add_provider_for_display.html)
    pub fn addProviderForDisplay(_display: *gdk.Display, _provider: *gtk.StyleProvider, _priority: u32) void {
        const cFn = @extern(*const fn (*gdk.Display, *gtk.StyleProvider, u32) callconv(.c) void, .{ .name = "gtk_style_context_add_provider_for_display" });
        const ret = cFn(_display, _provider, _priority);
        return ret;
    }
    /// type func [remove_provider_for_display](https://docs.gtk.org/gtk4/type_func.StyleContext.remove_provider_for_display.html)
    pub fn removeProviderForDisplay(_display: *gdk.Display, _provider: *gtk.StyleProvider) void {
        const cFn = @extern(*const fn (*gdk.Display, *gtk.StyleProvider) callconv(.c) void, .{ .name = "gtk_style_context_remove_provider_for_display" });
        const ret = cFn(_display, _provider);
        return ret;
    }
    /// Deprecated:
    /// method [add_class](https://docs.gtk.org/gtk4/method.StyleContext.add_class.html)
    pub const addClass = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addClass(self: *StyleContext, _class_name: [*:0]const u8) void {
            const cFn = @extern(*const fn (*StyleContext, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_style_context_add_class" });
            const ret = cFn(self, _class_name);
            return ret;
        }
    }.addClass;
    /// Deprecated:
    /// method [add_provider](https://docs.gtk.org/gtk4/method.StyleContext.add_provider.html)
    pub const addProvider = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addProvider(self: *StyleContext, _provider: *gtk.StyleProvider, _priority: u32) void {
            const cFn = @extern(*const fn (*StyleContext, *gtk.StyleProvider, u32) callconv(.c) void, .{ .name = "gtk_style_context_add_provider" });
            const ret = cFn(self, _provider, _priority);
            return ret;
        }
    }.addProvider;
    /// Deprecated:
    /// method [get_border](https://docs.gtk.org/gtk4/method.StyleContext.get_border.html)
    pub const getBorder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getBorder(self: *StyleContext, _border: *gtk.Border) void {
            const cFn = @extern(*const fn (*StyleContext, *gtk.Border) callconv(.c) void, .{ .name = "gtk_style_context_get_border" });
            const ret = cFn(self, _border);
            return ret;
        }
    }.getBorder;
    /// Deprecated:
    /// method [get_color](https://docs.gtk.org/gtk4/method.StyleContext.get_color.html)
    pub const getColor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColor(self: *StyleContext, _color: *gdk.RGBA) void {
            const cFn = @extern(*const fn (*StyleContext, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_style_context_get_color" });
            const ret = cFn(self, _color);
            return ret;
        }
    }.getColor;
    /// Deprecated:
    /// method [get_display](https://docs.gtk.org/gtk4/method.StyleContext.get_display.html)
    pub const getDisplay = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDisplay(self: *StyleContext) *gdk.Display {
            const cFn = @extern(*const fn (*StyleContext) callconv(.c) *gdk.Display, .{ .name = "gtk_style_context_get_display" });
            const ret = cFn(self);
            return ret;
        }
    }.getDisplay;
    /// Deprecated:
    /// method [get_margin](https://docs.gtk.org/gtk4/method.StyleContext.get_margin.html)
    pub const getMargin = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMargin(self: *StyleContext, _margin: *gtk.Border) void {
            const cFn = @extern(*const fn (*StyleContext, *gtk.Border) callconv(.c) void, .{ .name = "gtk_style_context_get_margin" });
            const ret = cFn(self, _margin);
            return ret;
        }
    }.getMargin;
    /// Deprecated:
    /// method [get_padding](https://docs.gtk.org/gtk4/method.StyleContext.get_padding.html)
    pub const getPadding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPadding(self: *StyleContext, _padding: *gtk.Border) void {
            const cFn = @extern(*const fn (*StyleContext, *gtk.Border) callconv(.c) void, .{ .name = "gtk_style_context_get_padding" });
            const ret = cFn(self, _padding);
            return ret;
        }
    }.getPadding;
    /// Deprecated:
    /// method [get_scale](https://docs.gtk.org/gtk4/method.StyleContext.get_scale.html)
    pub const getScale = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getScale(self: *StyleContext) i32 {
            const cFn = @extern(*const fn (*StyleContext) callconv(.c) i32, .{ .name = "gtk_style_context_get_scale" });
            const ret = cFn(self);
            return ret;
        }
    }.getScale;
    /// Deprecated:
    /// method [get_state](https://docs.gtk.org/gtk4/method.StyleContext.get_state.html)
    pub const getState = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getState(self: *StyleContext) gtk.StateFlags {
            const cFn = @extern(*const fn (*StyleContext) callconv(.c) gtk.StateFlags, .{ .name = "gtk_style_context_get_state" });
            const ret = cFn(self);
            return ret;
        }
    }.getState;
    /// Deprecated:
    /// method [has_class](https://docs.gtk.org/gtk4/method.StyleContext.has_class.html)
    pub const hasClass = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn hasClass(self: *StyleContext, _class_name: [*:0]const u8) bool {
            const cFn = @extern(*const fn (*StyleContext, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_style_context_has_class" });
            const ret = cFn(self, _class_name);
            return ret;
        }
    }.hasClass;
    /// Deprecated:
    /// method [lookup_color](https://docs.gtk.org/gtk4/method.StyleContext.lookup_color.html)
    pub const lookupColor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn lookupColor(self: *StyleContext, _color_name: [*:0]const u8, _color: *gdk.RGBA) bool {
            const cFn = @extern(*const fn (*StyleContext, [*:0]const u8, *gdk.RGBA) callconv(.c) bool, .{ .name = "gtk_style_context_lookup_color" });
            const ret = cFn(self, _color_name, _color);
            return ret;
        }
    }.lookupColor;
    /// Deprecated:
    /// method [remove_class](https://docs.gtk.org/gtk4/method.StyleContext.remove_class.html)
    pub const removeClass = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeClass(self: *StyleContext, _class_name: [*:0]const u8) void {
            const cFn = @extern(*const fn (*StyleContext, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_style_context_remove_class" });
            const ret = cFn(self, _class_name);
            return ret;
        }
    }.removeClass;
    /// Deprecated:
    /// method [remove_provider](https://docs.gtk.org/gtk4/method.StyleContext.remove_provider.html)
    pub const removeProvider = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeProvider(self: *StyleContext, _provider: *gtk.StyleProvider) void {
            const cFn = @extern(*const fn (*StyleContext, *gtk.StyleProvider) callconv(.c) void, .{ .name = "gtk_style_context_remove_provider" });
            const ret = cFn(self, _provider);
            return ret;
        }
    }.removeProvider;
    /// Deprecated:
    /// method [restore](https://docs.gtk.org/gtk4/method.StyleContext.restore.html)
    pub const restore = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn restore(self: *StyleContext) void {
            const cFn = @extern(*const fn (*StyleContext) callconv(.c) void, .{ .name = "gtk_style_context_restore" });
            const ret = cFn(self);
            return ret;
        }
    }.restore;
    /// Deprecated:
    /// method [save](https://docs.gtk.org/gtk4/method.StyleContext.save.html)
    pub const save = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn save(self: *StyleContext) void {
            const cFn = @extern(*const fn (*StyleContext) callconv(.c) void, .{ .name = "gtk_style_context_save" });
            const ret = cFn(self);
            return ret;
        }
    }.save;
    /// Deprecated:
    /// method [set_display](https://docs.gtk.org/gtk4/method.StyleContext.set_display.html)
    pub const setDisplay = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDisplay(self: *StyleContext, _display: *gdk.Display) void {
            const cFn = @extern(*const fn (*StyleContext, *gdk.Display) callconv(.c) void, .{ .name = "gtk_style_context_set_display" });
            const ret = cFn(self, _display);
            return ret;
        }
    }.setDisplay;
    /// Deprecated:
    /// method [set_scale](https://docs.gtk.org/gtk4/method.StyleContext.set_scale.html)
    pub const setScale = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setScale(self: *StyleContext, _scale: i32) void {
            const cFn = @extern(*const fn (*StyleContext, i32) callconv(.c) void, .{ .name = "gtk_style_context_set_scale" });
            const ret = cFn(self, _scale);
            return ret;
        }
    }.setScale;
    /// Deprecated:
    /// method [set_state](https://docs.gtk.org/gtk4/method.StyleContext.set_state.html)
    pub const setState = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setState(self: *StyleContext, _flags: gtk.StateFlags) void {
            const cFn = @extern(*const fn (*StyleContext, gtk.StateFlags) callconv(.c) void, .{ .name = "gtk_style_context_set_state" });
            const ret = cFn(self, _flags);
            return ret;
        }
    }.setState;
    /// Deprecated:
    /// method [to_string](https://docs.gtk.org/gtk4/method.StyleContext.to_string.html)
    pub const toString = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toString(self: *StyleContext, _flags: gtk.StyleContextPrintFlags) [*:0]u8 {
            const cFn = @extern(*const fn (*StyleContext, gtk.StyleContextPrintFlags) callconv(.c) [*:0]u8, .{ .name = "gtk_style_context_to_string" });
            const ret = cFn(self, _flags);
            return ret;
        }
    }.toString;
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.StyleContext.changed.html)
    pub fn changedV(self: *StyleContext) void {
        const class: *StyleContextClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_style_context_get_type" });
        return cFn();
    }
};
pub const StyleContextClass = extern struct {
    parent_class: gobject.ObjectClass,
    changed: ?*const fn (_context: *gtk.StyleContext) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
/// Flags [StyleContextPrintFlags](https://docs.gtk.org/gtk4/flags.StyleContextPrintFlags.html)
pub const StyleContextPrintFlags = packed struct(u32) {
    recurse: bool = false,
    show_style: bool = false,
    show_change: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_style_context_print_flags_get_type" });
        return cFn();
    }
};
/// Iface [StyleProvider](https://docs.gtk.org/gtk4/iface.StyleProvider.html)
pub const StyleProvider = opaque {
    /// signal [gtk-private-changed](https://docs.gtk.org/gtk4/signal.StyleProvider.gtk-private-changed.html)
    pub fn connectGtkPrivateChanged(self: *StyleProvider, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("gtk-private-changed", handler, args, flags, &.{ void, *StyleProvider });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_style_provider_get_type" });
        return cFn();
    }
};
/// Class [Switch](https://docs.gtk.org/gtk4/class.Switch.html)
/// - property [active](https://docs.gtk.org/gtk4/property.Switch.active.html): (rw) `bool`
/// - property [state](https://docs.gtk.org/gtk4/property.Switch.state.html): (rw) `bool`
pub const Switch = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Switch.new.html)
    pub fn new() *Switch {
        const cFn = @extern(*const fn () callconv(.c) *Switch, .{ .name = "gtk_switch_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_active](https://docs.gtk.org/gtk4/method.Switch.get_active.html)
    pub fn getActive(self: *Switch) bool {
        const cFn = @extern(*const fn (*Switch) callconv(.c) bool, .{ .name = "gtk_switch_get_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_state](https://docs.gtk.org/gtk4/method.Switch.get_state.html)
    pub fn getState(self: *Switch) bool {
        const cFn = @extern(*const fn (*Switch) callconv(.c) bool, .{ .name = "gtk_switch_get_state" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_active](https://docs.gtk.org/gtk4/method.Switch.set_active.html)
    pub fn setActive(self: *Switch, _is_active: bool) void {
        const cFn = @extern(*const fn (*Switch, bool) callconv(.c) void, .{ .name = "gtk_switch_set_active" });
        const ret = cFn(self, _is_active);
        return ret;
    }
    /// method [set_state](https://docs.gtk.org/gtk4/method.Switch.set_state.html)
    pub fn setState(self: *Switch, _state: bool) void {
        const cFn = @extern(*const fn (*Switch, bool) callconv(.c) void, .{ .name = "gtk_switch_set_state" });
        const ret = cFn(self, _state);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.Switch.activate.html)
    pub fn connectActivate(self: *Switch, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Switch });
    }
    /// signal [state-set](https://docs.gtk.org/gtk4/signal.Switch.state-set.html)
    pub fn connectStateSet(self: *Switch, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("state-set", handler, args, flags, &.{ bool, *Switch, bool });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_switch_get_type" });
        return cFn();
    }
};
/// Enum [SymbolicColor](https://docs.gtk.org/gtk4/enum.SymbolicColor.html)
pub const SymbolicColor = enum(u32) {
    foreground = 0,
    @"error" = 1,
    warning = 2,
    success = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_symbolic_color_get_type" });
        return cFn();
    }
};
/// Iface [SymbolicPaintable](https://docs.gtk.org/gtk4/iface.SymbolicPaintable.html)
pub const SymbolicPaintable = opaque {
    pub const Prerequisites = [_]type{gdk.Paintable};
    /// method [snapshot_symbolic](https://docs.gtk.org/gtk4/method.SymbolicPaintable.snapshot_symbolic.html)
    pub fn snapshotSymbolic(self: *SymbolicPaintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64, _colorss: []gdk.RGBA) void {
        const _colors = _colorss.ptr;
        const _n_colors: u64 = @intCast(_colorss.len);
        const cFn = @extern(*const fn (*SymbolicPaintable, *gdk.Snapshot, f64, f64, [*]gdk.RGBA, u64) callconv(.c) void, .{ .name = "gtk_symbolic_paintable_snapshot_symbolic" });
        const ret = cFn(self, _snapshot, _width, _height, _colors, _n_colors);
        return ret;
    }
    /// vfunc [snapshot_symbolic](https://docs.gtk.org/gtk4/vfunc.SymbolicPaintable.snapshot_symbolic.html)
    pub fn snapshotSymbolicV(self: *SymbolicPaintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64, _colors: [*]gdk.RGBA, _n_colors: u64) void {
        const class: *SymbolicPaintableInterface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot_symbolic.?;
        const ret = vFn(self, _snapshot, _width, _height, _colors, _n_colors);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_symbolic_paintable_get_type" });
        return cFn();
    }
};
pub const SymbolicPaintableInterface = extern struct {
    g_iface: gobject.TypeInterface,
    snapshot_symbolic: ?*const fn (_paintable: *gtk.SymbolicPaintable, _snapshot: *gdk.Snapshot, _width: f64, _height: f64, _colors: [*]gdk.RGBA, _n_colors: u64) callconv(.c) void,
};
/// Enum [SystemSetting](https://docs.gtk.org/gtk4/enum.SystemSetting.html)
pub const SystemSetting = enum(u32) {
    dpi = 0,
    font_name = 1,
    font_config = 2,
    display = 3,
    icon_theme = 4,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_system_setting_get_type" });
        return cFn();
    }
};
/// const [TEXT_VIEW_PRIORITY_VALIDATE](https://docs.gtk.org/gtk4/const.TEXT_VIEW_PRIORITY_VALIDATE.html)
pub const TEXT_VIEW_PRIORITY_VALIDATE = 125;
/// const [TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID](https://docs.gtk.org/gtk4/const.TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID.html)
pub const TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1;
/// const [TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID](https://docs.gtk.org/gtk4/const.TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.html)
pub const TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2;
/// Class [Text](https://docs.gtk.org/gtk4/class.Text.html)
/// - property [activates-default](https://docs.gtk.org/gtk4/property.Text.activates-default.html): (rw) `bool`
/// - property [attributes](https://docs.gtk.org/gtk4/property.Text.attributes.html): (rw) `pango.AttrList`
/// - property [buffer](https://docs.gtk.org/gtk4/property.Text.buffer.html): (rw) `gtk.EntryBuffer`
/// - property [enable-emoji-completion](https://docs.gtk.org/gtk4/property.Text.enable-emoji-completion.html): (rw) `bool`
/// - property [extra-menu](https://docs.gtk.org/gtk4/property.Text.extra-menu.html): (rw) `gio.MenuModel`
/// - property [im-module](https://docs.gtk.org/gtk4/property.Text.im-module.html): (rw) `[*:0]const u8`
/// - property [input-hints](https://docs.gtk.org/gtk4/property.Text.input-hints.html): (rw) `gtk.InputHints`
/// - property [input-purpose](https://docs.gtk.org/gtk4/property.Text.input-purpose.html): (rw) `gtk.InputPurpose`
/// - property [invisible-char](https://docs.gtk.org/gtk4/property.Text.invisible-char.html): (rw) `u32`
/// - property [invisible-char-set](https://docs.gtk.org/gtk4/property.Text.invisible-char-set.html): (rw) `bool`
/// - property [max-length](https://docs.gtk.org/gtk4/property.Text.max-length.html): (rw) `i32`
/// - property [overwrite-mode](https://docs.gtk.org/gtk4/property.Text.overwrite-mode.html): (rw) `bool`
/// - property [placeholder-text](https://docs.gtk.org/gtk4/property.Text.placeholder-text.html): (rw) `[*:0]const u8`
/// - property [propagate-text-width](https://docs.gtk.org/gtk4/property.Text.propagate-text-width.html): (rw) `bool`
/// - property [scroll-offset](https://docs.gtk.org/gtk4/property.Text.scroll-offset.html): (r-) `i32`
/// - property [tabs](https://docs.gtk.org/gtk4/property.Text.tabs.html): (rw) `pango.TabArray`
/// - property [truncate-multiline](https://docs.gtk.org/gtk4/property.Text.truncate-multiline.html): (rw) `bool`
/// - property [visibility](https://docs.gtk.org/gtk4/property.Text.visibility.html): (rw) `bool`
pub const Text = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleText, gtk.Buildable, gtk.ConstraintTarget, gtk.Editable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Text.new.html)
    pub fn new() *Text {
        const cFn = @extern(*const fn () callconv(.c) *Text, .{ .name = "gtk_text_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_buffer](https://docs.gtk.org/gtk4/ctor.Text.new_with_buffer.html)
    pub fn newWithBuffer(_buffer: *gtk.EntryBuffer) *Text {
        const cFn = @extern(*const fn (*gtk.EntryBuffer) callconv(.c) *Text, .{ .name = "gtk_text_new_with_buffer" });
        const ret = cFn(_buffer);
        return ret;
    }
    /// method [compute_cursor_extents](https://docs.gtk.org/gtk4/method.Text.compute_cursor_extents.html)
    pub fn computeCursorExtents(self: *Text, _position: u64, _strong: ?*graphene.Rect, _weak: ?*graphene.Rect) void {
        const cFn = @extern(*const fn (*Text, u64, ?*graphene.Rect, ?*graphene.Rect) callconv(.c) void, .{ .name = "gtk_text_compute_cursor_extents" });
        const ret = cFn(self, _position, _strong, _weak);
        return ret;
    }
    /// method [get_activates_default](https://docs.gtk.org/gtk4/method.Text.get_activates_default.html)
    pub fn getActivatesDefault(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_activates_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_attributes](https://docs.gtk.org/gtk4/method.Text.get_attributes.html)
    pub fn getAttributes(self: *Text) ?*pango.AttrList {
        const cFn = @extern(*const fn (*Text) callconv(.c) ?*pango.AttrList, .{ .name = "gtk_text_get_attributes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer](https://docs.gtk.org/gtk4/method.Text.get_buffer.html)
    pub fn getBuffer(self: *Text) *gtk.EntryBuffer {
        const cFn = @extern(*const fn (*Text) callconv(.c) *gtk.EntryBuffer, .{ .name = "gtk_text_get_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enable_emoji_completion](https://docs.gtk.org/gtk4/method.Text.get_enable_emoji_completion.html)
    pub fn getEnableEmojiCompletion(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_enable_emoji_completion" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extra_menu](https://docs.gtk.org/gtk4/method.Text.get_extra_menu.html)
    pub fn getExtraMenu(self: *Text) ?*gio.MenuModel {
        const cFn = @extern(*const fn (*Text) callconv(.c) ?*gio.MenuModel, .{ .name = "gtk_text_get_extra_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_hints](https://docs.gtk.org/gtk4/method.Text.get_input_hints.html)
    pub fn getInputHints(self: *Text) gtk.InputHints {
        const cFn = @extern(*const fn (*Text) callconv(.c) gtk.InputHints, .{ .name = "gtk_text_get_input_hints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_purpose](https://docs.gtk.org/gtk4/method.Text.get_input_purpose.html)
    pub fn getInputPurpose(self: *Text) gtk.InputPurpose {
        const cFn = @extern(*const fn (*Text) callconv(.c) gtk.InputPurpose, .{ .name = "gtk_text_get_input_purpose" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_invisible_char](https://docs.gtk.org/gtk4/method.Text.get_invisible_char.html)
    pub fn getInvisibleChar(self: *Text) core.Unichar {
        const cFn = @extern(*const fn (*Text) callconv(.c) core.Unichar, .{ .name = "gtk_text_get_invisible_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_max_length](https://docs.gtk.org/gtk4/method.Text.get_max_length.html)
    pub fn getMaxLength(self: *Text) i32 {
        const cFn = @extern(*const fn (*Text) callconv(.c) i32, .{ .name = "gtk_text_get_max_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_overwrite_mode](https://docs.gtk.org/gtk4/method.Text.get_overwrite_mode.html)
    pub fn getOverwriteMode(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_overwrite_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_placeholder_text](https://docs.gtk.org/gtk4/method.Text.get_placeholder_text.html)
    pub fn getPlaceholderText(self: *Text) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Text) callconv(.c) ?[*:0]u8, .{ .name = "gtk_text_get_placeholder_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_propagate_text_width](https://docs.gtk.org/gtk4/method.Text.get_propagate_text_width.html)
    pub fn getPropagateTextWidth(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_propagate_text_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tabs](https://docs.gtk.org/gtk4/method.Text.get_tabs.html)
    pub fn getTabs(self: *Text) ?*pango.TabArray {
        const cFn = @extern(*const fn (*Text) callconv(.c) ?*pango.TabArray, .{ .name = "gtk_text_get_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text_length](https://docs.gtk.org/gtk4/method.Text.get_text_length.html)
    pub fn getTextLength(self: *Text) u16 {
        const cFn = @extern(*const fn (*Text) callconv(.c) u16, .{ .name = "gtk_text_get_text_length" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_truncate_multiline](https://docs.gtk.org/gtk4/method.Text.get_truncate_multiline.html)
    pub fn getTruncateMultiline(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_truncate_multiline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visibility](https://docs.gtk.org/gtk4/method.Text.get_visibility.html)
    pub fn getVisibility(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_get_visibility" });
        const ret = cFn(self);
        return ret;
    }
    /// method [grab_focus_without_selecting](https://docs.gtk.org/gtk4/method.Text.grab_focus_without_selecting.html)
    pub fn grabFocusWithoutSelecting(self: *Text) bool {
        const cFn = @extern(*const fn (*Text) callconv(.c) bool, .{ .name = "gtk_text_grab_focus_without_selecting" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_activates_default](https://docs.gtk.org/gtk4/method.Text.set_activates_default.html)
    pub fn setActivatesDefault(self: *Text, _activates: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_activates_default" });
        const ret = cFn(self, _activates);
        return ret;
    }
    /// method [set_attributes](https://docs.gtk.org/gtk4/method.Text.set_attributes.html)
    pub fn setAttributes(self: *Text, _attrs: ?*pango.AttrList) void {
        const cFn = @extern(*const fn (*Text, ?*pango.AttrList) callconv(.c) void, .{ .name = "gtk_text_set_attributes" });
        const ret = cFn(self, _attrs);
        return ret;
    }
    /// method [set_buffer](https://docs.gtk.org/gtk4/method.Text.set_buffer.html)
    pub fn setBuffer(self: *Text, _buffer: *gtk.EntryBuffer) void {
        const cFn = @extern(*const fn (*Text, *gtk.EntryBuffer) callconv(.c) void, .{ .name = "gtk_text_set_buffer" });
        const ret = cFn(self, _buffer);
        return ret;
    }
    /// method [set_enable_emoji_completion](https://docs.gtk.org/gtk4/method.Text.set_enable_emoji_completion.html)
    pub fn setEnableEmojiCompletion(self: *Text, _enable_emoji_completion: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_enable_emoji_completion" });
        const ret = cFn(self, _enable_emoji_completion);
        return ret;
    }
    /// method [set_extra_menu](https://docs.gtk.org/gtk4/method.Text.set_extra_menu.html)
    pub fn setExtraMenu(self: *Text, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*Text, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_text_set_extra_menu" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_input_hints](https://docs.gtk.org/gtk4/method.Text.set_input_hints.html)
    pub fn setInputHints(self: *Text, _hints: gtk.InputHints) void {
        const cFn = @extern(*const fn (*Text, gtk.InputHints) callconv(.c) void, .{ .name = "gtk_text_set_input_hints" });
        const ret = cFn(self, _hints);
        return ret;
    }
    /// method [set_input_purpose](https://docs.gtk.org/gtk4/method.Text.set_input_purpose.html)
    pub fn setInputPurpose(self: *Text, _purpose: gtk.InputPurpose) void {
        const cFn = @extern(*const fn (*Text, gtk.InputPurpose) callconv(.c) void, .{ .name = "gtk_text_set_input_purpose" });
        const ret = cFn(self, _purpose);
        return ret;
    }
    /// method [set_invisible_char](https://docs.gtk.org/gtk4/method.Text.set_invisible_char.html)
    pub fn setInvisibleChar(self: *Text, _ch: core.Unichar) void {
        const cFn = @extern(*const fn (*Text, core.Unichar) callconv(.c) void, .{ .name = "gtk_text_set_invisible_char" });
        const ret = cFn(self, _ch);
        return ret;
    }
    /// method [set_max_length](https://docs.gtk.org/gtk4/method.Text.set_max_length.html)
    pub fn setMaxLength(self: *Text, _length: i32) void {
        const cFn = @extern(*const fn (*Text, i32) callconv(.c) void, .{ .name = "gtk_text_set_max_length" });
        const ret = cFn(self, _length);
        return ret;
    }
    /// method [set_overwrite_mode](https://docs.gtk.org/gtk4/method.Text.set_overwrite_mode.html)
    pub fn setOverwriteMode(self: *Text, _overwrite: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_overwrite_mode" });
        const ret = cFn(self, _overwrite);
        return ret;
    }
    /// method [set_placeholder_text](https://docs.gtk.org/gtk4/method.Text.set_placeholder_text.html)
    pub fn setPlaceholderText(self: *Text, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Text, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_text_set_placeholder_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_propagate_text_width](https://docs.gtk.org/gtk4/method.Text.set_propagate_text_width.html)
    pub fn setPropagateTextWidth(self: *Text, _propagate_text_width: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_propagate_text_width" });
        const ret = cFn(self, _propagate_text_width);
        return ret;
    }
    /// method [set_tabs](https://docs.gtk.org/gtk4/method.Text.set_tabs.html)
    pub fn setTabs(self: *Text, _tabs: ?*pango.TabArray) void {
        const cFn = @extern(*const fn (*Text, ?*pango.TabArray) callconv(.c) void, .{ .name = "gtk_text_set_tabs" });
        const ret = cFn(self, _tabs);
        return ret;
    }
    /// method [set_truncate_multiline](https://docs.gtk.org/gtk4/method.Text.set_truncate_multiline.html)
    pub fn setTruncateMultiline(self: *Text, _truncate_multiline: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_truncate_multiline" });
        const ret = cFn(self, _truncate_multiline);
        return ret;
    }
    /// method [set_visibility](https://docs.gtk.org/gtk4/method.Text.set_visibility.html)
    pub fn setVisibility(self: *Text, _visible: bool) void {
        const cFn = @extern(*const fn (*Text, bool) callconv(.c) void, .{ .name = "gtk_text_set_visibility" });
        const ret = cFn(self, _visible);
        return ret;
    }
    /// method [unset_invisible_char](https://docs.gtk.org/gtk4/method.Text.unset_invisible_char.html)
    pub fn unsetInvisibleChar(self: *Text) void {
        const cFn = @extern(*const fn (*Text) callconv(.c) void, .{ .name = "gtk_text_unset_invisible_char" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [activate](https://docs.gtk.org/gtk4/signal.Text.activate.html)
    pub fn connectActivate(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate", handler, args, flags, &.{ void, *Text });
    }
    /// signal [backspace](https://docs.gtk.org/gtk4/signal.Text.backspace.html)
    pub fn connectBackspace(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("backspace", handler, args, flags, &.{ void, *Text });
    }
    /// signal [copy-clipboard](https://docs.gtk.org/gtk4/signal.Text.copy-clipboard.html)
    pub fn connectCopyClipboard(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("copy-clipboard", handler, args, flags, &.{ void, *Text });
    }
    /// signal [cut-clipboard](https://docs.gtk.org/gtk4/signal.Text.cut-clipboard.html)
    pub fn connectCutClipboard(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cut-clipboard", handler, args, flags, &.{ void, *Text });
    }
    /// signal [delete-from-cursor](https://docs.gtk.org/gtk4/signal.Text.delete-from-cursor.html)
    pub fn connectDeleteFromCursor(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("delete-from-cursor", handler, args, flags, &.{ void, *Text, gtk.DeleteType, i32 });
    }
    /// signal [insert-at-cursor](https://docs.gtk.org/gtk4/signal.Text.insert-at-cursor.html)
    pub fn connectInsertAtCursor(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-at-cursor", handler, args, flags, &.{ void, *Text, [*:0]const u8 });
    }
    /// signal [insert-emoji](https://docs.gtk.org/gtk4/signal.Text.insert-emoji.html)
    pub fn connectInsertEmoji(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-emoji", handler, args, flags, &.{ void, *Text });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.Text.move-cursor.html)
    pub fn connectMoveCursor(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ void, *Text, gtk.MovementStep, i32, bool });
    }
    /// signal [paste-clipboard](https://docs.gtk.org/gtk4/signal.Text.paste-clipboard.html)
    pub fn connectPasteClipboard(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("paste-clipboard", handler, args, flags, &.{ void, *Text });
    }
    /// signal [preedit-changed](https://docs.gtk.org/gtk4/signal.Text.preedit-changed.html)
    pub fn connectPreeditChanged(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preedit-changed", handler, args, flags, &.{ void, *Text, [*:0]const u8 });
    }
    /// signal [toggle-overwrite](https://docs.gtk.org/gtk4/signal.Text.toggle-overwrite.html)
    pub fn connectToggleOverwrite(self: *Text, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-overwrite", handler, args, flags, &.{ void, *Text });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_get_type" });
        return cFn();
    }
};
/// Class [TextBuffer](https://docs.gtk.org/gtk4/class.TextBuffer.html)
/// - property [can-redo](https://docs.gtk.org/gtk4/property.TextBuffer.can-redo.html): (r-) `bool`
/// - property [can-undo](https://docs.gtk.org/gtk4/property.TextBuffer.can-undo.html): (r-) `bool`
/// - property [cursor-position](https://docs.gtk.org/gtk4/property.TextBuffer.cursor-position.html): (r-) `i32`
/// - property [enable-undo](https://docs.gtk.org/gtk4/property.TextBuffer.enable-undo.html): (rw) `bool`
/// - property [has-selection](https://docs.gtk.org/gtk4/property.TextBuffer.has-selection.html): (r-) `bool`
/// - property [tag-table](https://docs.gtk.org/gtk4/property.TextBuffer.tag-table.html): (r-) `gtk.TextTagTable`
/// - property [text](https://docs.gtk.org/gtk4/property.TextBuffer.text.html): (rw) `[*:0]const u8`
pub const TextBuffer = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gtk.TextBufferPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gtk.TextBufferClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextBuffer.new.html)
    pub fn new(_table: ?*gtk.TextTagTable) *TextBuffer {
        const cFn = @extern(*const fn (?*gtk.TextTagTable) callconv(.c) *TextBuffer, .{ .name = "gtk_text_buffer_new" });
        const ret = cFn(_table);
        return ret;
    }
    /// method [add_mark](https://docs.gtk.org/gtk4/method.TextBuffer.add_mark.html)
    pub fn addMark(self: *TextBuffer, _mark: *gtk.TextMark, _where: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextMark, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_add_mark" });
        const ret = cFn(self, _mark, _where);
        return ret;
    }
    /// method [add_selection_clipboard](https://docs.gtk.org/gtk4/method.TextBuffer.add_selection_clipboard.html)
    pub fn addSelectionClipboard(self: *TextBuffer, _clipboard: *gdk.Clipboard) void {
        const cFn = @extern(*const fn (*TextBuffer, *gdk.Clipboard) callconv(.c) void, .{ .name = "gtk_text_buffer_add_selection_clipboard" });
        const ret = cFn(self, _clipboard);
        return ret;
    }
    /// method [apply_tag](https://docs.gtk.org/gtk4/method.TextBuffer.apply_tag.html)
    pub fn applyTag(self: *TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextTag, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_apply_tag" });
        const ret = cFn(self, _tag, _start, _end);
        return ret;
    }
    /// method [apply_tag_by_name](https://docs.gtk.org/gtk4/method.TextBuffer.apply_tag_by_name.html)
    pub fn applyTagByName(self: *TextBuffer, _name: [*:0]const u8, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_apply_tag_by_name" });
        const ret = cFn(self, _name, _start, _end);
        return ret;
    }
    /// method [backspace](https://docs.gtk.org/gtk4/method.TextBuffer.backspace.html)
    pub fn backspace(self: *TextBuffer, _iter: *gtk.TextIter, _interactive: bool, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, bool, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_backspace" });
        const ret = cFn(self, _iter, _interactive, _default_editable);
        return ret;
    }
    /// method [begin_irreversible_action](https://docs.gtk.org/gtk4/method.TextBuffer.begin_irreversible_action.html)
    pub fn beginIrreversibleAction(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_begin_irreversible_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [begin_user_action](https://docs.gtk.org/gtk4/method.TextBuffer.begin_user_action.html)
    pub fn beginUserAction(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_begin_user_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [copy_clipboard](https://docs.gtk.org/gtk4/method.TextBuffer.copy_clipboard.html)
    pub fn copyClipboard(self: *TextBuffer, _clipboard: *gdk.Clipboard) void {
        const cFn = @extern(*const fn (*TextBuffer, *gdk.Clipboard) callconv(.c) void, .{ .name = "gtk_text_buffer_copy_clipboard" });
        const ret = cFn(self, _clipboard);
        return ret;
    }
    /// method [create_child_anchor](https://docs.gtk.org/gtk4/method.TextBuffer.create_child_anchor.html)
    pub fn createChildAnchor(self: *TextBuffer, _iter: *gtk.TextIter) *gtk.TextChildAnchor {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter) callconv(.c) *gtk.TextChildAnchor, .{ .name = "gtk_text_buffer_create_child_anchor" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [create_mark](https://docs.gtk.org/gtk4/method.TextBuffer.create_mark.html)
    pub fn createMark(self: *TextBuffer, _mark_name: ?[*:0]const u8, _where: *gtk.TextIter, _left_gravity: bool) *gtk.TextMark {
        const cFn = @extern(*const fn (*TextBuffer, ?[*:0]const u8, *gtk.TextIter, bool) callconv(.c) *gtk.TextMark, .{ .name = "gtk_text_buffer_create_mark" });
        const ret = cFn(self, _mark_name, _where, _left_gravity);
        return ret;
    }
    /// method [cut_clipboard](https://docs.gtk.org/gtk4/method.TextBuffer.cut_clipboard.html)
    pub fn cutClipboard(self: *TextBuffer, _clipboard: *gdk.Clipboard, _default_editable: bool) void {
        const cFn = @extern(*const fn (*TextBuffer, *gdk.Clipboard, bool) callconv(.c) void, .{ .name = "gtk_text_buffer_cut_clipboard" });
        const ret = cFn(self, _clipboard, _default_editable);
        return ret;
    }
    /// method [delete](https://docs.gtk.org/gtk4/method.TextBuffer.delete.html)
    pub fn delete(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_delete" });
        const ret = cFn(self, _start, _end);
        return ret;
    }
    /// method [delete_interactive](https://docs.gtk.org/gtk4/method.TextBuffer.delete_interactive.html)
    pub fn deleteInteractive(self: *TextBuffer, _start_iter: *gtk.TextIter, _end_iter: *gtk.TextIter, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_delete_interactive" });
        const ret = cFn(self, _start_iter, _end_iter, _default_editable);
        return ret;
    }
    /// method [delete_mark](https://docs.gtk.org/gtk4/method.TextBuffer.delete_mark.html)
    pub fn deleteMark(self: *TextBuffer, _mark: *gtk.TextMark) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextMark) callconv(.c) void, .{ .name = "gtk_text_buffer_delete_mark" });
        const ret = cFn(self, _mark);
        return ret;
    }
    /// method [delete_mark_by_name](https://docs.gtk.org/gtk4/method.TextBuffer.delete_mark_by_name.html)
    pub fn deleteMarkByName(self: *TextBuffer, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_text_buffer_delete_mark_by_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [delete_selection](https://docs.gtk.org/gtk4/method.TextBuffer.delete_selection.html)
    pub fn deleteSelection(self: *TextBuffer, _interactive: bool, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, bool, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_delete_selection" });
        const ret = cFn(self, _interactive, _default_editable);
        return ret;
    }
    /// method [end_irreversible_action](https://docs.gtk.org/gtk4/method.TextBuffer.end_irreversible_action.html)
    pub fn endIrreversibleAction(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_end_irreversible_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [end_user_action](https://docs.gtk.org/gtk4/method.TextBuffer.end_user_action.html)
    pub fn endUserAction(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_end_user_action" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bounds](https://docs.gtk.org/gtk4/method.TextBuffer.get_bounds.html)
    pub fn getBounds(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_get_bounds" });
        const ret = cFn(self, _start, _end);
        return ret;
    }
    /// method [get_can_redo](https://docs.gtk.org/gtk4/method.TextBuffer.get_can_redo.html)
    pub fn getCanRedo(self: *TextBuffer) bool {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_can_redo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_undo](https://docs.gtk.org/gtk4/method.TextBuffer.get_can_undo.html)
    pub fn getCanUndo(self: *TextBuffer) bool {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_can_undo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_char_count](https://docs.gtk.org/gtk4/method.TextBuffer.get_char_count.html)
    pub fn getCharCount(self: *TextBuffer) i32 {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) i32, .{ .name = "gtk_text_buffer_get_char_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enable_undo](https://docs.gtk.org/gtk4/method.TextBuffer.get_enable_undo.html)
    pub fn getEnableUndo(self: *TextBuffer) bool {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_enable_undo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_end_iter](https://docs.gtk.org/gtk4/method.TextBuffer.get_end_iter.html)
    pub fn getEndIter(self: *TextBuffer, _iter: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_get_end_iter" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [get_has_selection](https://docs.gtk.org/gtk4/method.TextBuffer.get_has_selection.html)
    pub fn getHasSelection(self: *TextBuffer) bool {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_has_selection" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_insert](https://docs.gtk.org/gtk4/method.TextBuffer.get_insert.html)
    pub fn getInsert(self: *TextBuffer) *gtk.TextMark {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) *gtk.TextMark, .{ .name = "gtk_text_buffer_get_insert" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iter_at_child_anchor](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_child_anchor.html)
    pub fn getIterAtChildAnchor(self: *TextBuffer, _iter: *gtk.TextIter, _anchor: *gtk.TextChildAnchor) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextChildAnchor) callconv(.c) void, .{ .name = "gtk_text_buffer_get_iter_at_child_anchor" });
        const ret = cFn(self, _iter, _anchor);
        return ret;
    }
    /// method [get_iter_at_line](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_line.html)
    pub fn getIterAtLine(self: *TextBuffer, _iter: *gtk.TextIter, _line_number: i32) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_iter_at_line" });
        const ret = cFn(self, _iter, _line_number);
        return ret;
    }
    /// method [get_iter_at_line_index](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_line_index.html)
    pub fn getIterAtLineIndex(self: *TextBuffer, _iter: *gtk.TextIter, _line_number: i32, _byte_index: i32) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, i32, i32) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_iter_at_line_index" });
        const ret = cFn(self, _iter, _line_number, _byte_index);
        return ret;
    }
    /// method [get_iter_at_line_offset](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_line_offset.html)
    pub fn getIterAtLineOffset(self: *TextBuffer, _iter: *gtk.TextIter, _line_number: i32, _char_offset: i32) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, i32, i32) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_iter_at_line_offset" });
        const ret = cFn(self, _iter, _line_number, _char_offset);
        return ret;
    }
    /// method [get_iter_at_mark](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_mark.html)
    pub fn getIterAtMark(self: *TextBuffer, _iter: *gtk.TextIter, _mark: *gtk.TextMark) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextMark) callconv(.c) void, .{ .name = "gtk_text_buffer_get_iter_at_mark" });
        const ret = cFn(self, _iter, _mark);
        return ret;
    }
    /// method [get_iter_at_offset](https://docs.gtk.org/gtk4/method.TextBuffer.get_iter_at_offset.html)
    pub fn getIterAtOffset(self: *TextBuffer, _iter: *gtk.TextIter, _char_offset: i32) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_buffer_get_iter_at_offset" });
        const ret = cFn(self, _iter, _char_offset);
        return ret;
    }
    /// method [get_line_count](https://docs.gtk.org/gtk4/method.TextBuffer.get_line_count.html)
    pub fn getLineCount(self: *TextBuffer) i32 {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) i32, .{ .name = "gtk_text_buffer_get_line_count" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mark](https://docs.gtk.org/gtk4/method.TextBuffer.get_mark.html)
    pub fn getMark(self: *TextBuffer, _name: [*:0]const u8) ?*gtk.TextMark {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8) callconv(.c) ?*gtk.TextMark, .{ .name = "gtk_text_buffer_get_mark" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [get_max_undo_levels](https://docs.gtk.org/gtk4/method.TextBuffer.get_max_undo_levels.html)
    pub fn getMaxUndoLevels(self: *TextBuffer) u32 {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) u32, .{ .name = "gtk_text_buffer_get_max_undo_levels" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modified](https://docs.gtk.org/gtk4/method.TextBuffer.get_modified.html)
    pub fn getModified(self: *TextBuffer) bool {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_modified" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_bound](https://docs.gtk.org/gtk4/method.TextBuffer.get_selection_bound.html)
    pub fn getSelectionBound(self: *TextBuffer) *gtk.TextMark {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) *gtk.TextMark, .{ .name = "gtk_text_buffer_get_selection_bound" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_selection_bounds](https://docs.gtk.org/gtk4/method.TextBuffer.get_selection_bounds.html)
    pub fn getSelectionBounds(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_buffer_get_selection_bounds" });
        const ret = cFn(self, _start, _end);
        return ret;
    }
    /// method [get_selection_content](https://docs.gtk.org/gtk4/method.TextBuffer.get_selection_content.html)
    pub fn getSelectionContent(self: *TextBuffer) *gdk.ContentProvider {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) *gdk.ContentProvider, .{ .name = "gtk_text_buffer_get_selection_content" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_slice](https://docs.gtk.org/gtk4/method.TextBuffer.get_slice.html)
    pub fn getSlice(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter, _include_hidden_chars: bool) [*:0]u8 {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter, bool) callconv(.c) [*:0]u8, .{ .name = "gtk_text_buffer_get_slice" });
        const ret = cFn(self, _start, _end, _include_hidden_chars);
        return ret;
    }
    /// method [get_start_iter](https://docs.gtk.org/gtk4/method.TextBuffer.get_start_iter.html)
    pub fn getStartIter(self: *TextBuffer, _iter: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_get_start_iter" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [get_tag_table](https://docs.gtk.org/gtk4/method.TextBuffer.get_tag_table.html)
    pub fn getTagTable(self: *TextBuffer) *gtk.TextTagTable {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) *gtk.TextTagTable, .{ .name = "gtk_text_buffer_get_tag_table" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.TextBuffer.get_text.html)
    pub fn getText(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter, _include_hidden_chars: bool) [*:0]u8 {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter, bool) callconv(.c) [*:0]u8, .{ .name = "gtk_text_buffer_get_text" });
        const ret = cFn(self, _start, _end, _include_hidden_chars);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/gtk4/method.TextBuffer.insert.html)
    pub fn insert(self: *TextBuffer, _iter: *gtk.TextIter, _text: [*:0]const u8, _len: i32) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_text_buffer_insert" });
        const ret = cFn(self, _iter, _text, _len);
        return ret;
    }
    /// method [insert_at_cursor](https://docs.gtk.org/gtk4/method.TextBuffer.insert_at_cursor.html)
    pub fn insertAtCursor(self: *TextBuffer, _text: [*:0]const u8, _len: i32) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_text_buffer_insert_at_cursor" });
        const ret = cFn(self, _text, _len);
        return ret;
    }
    /// method [insert_child_anchor](https://docs.gtk.org/gtk4/method.TextBuffer.insert_child_anchor.html)
    pub fn insertChildAnchor(self: *TextBuffer, _iter: *gtk.TextIter, _anchor: *gtk.TextChildAnchor) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextChildAnchor) callconv(.c) void, .{ .name = "gtk_text_buffer_insert_child_anchor" });
        const ret = cFn(self, _iter, _anchor);
        return ret;
    }
    /// method [insert_interactive](https://docs.gtk.org/gtk4/method.TextBuffer.insert_interactive.html)
    pub fn insertInteractive(self: *TextBuffer, _iter: *gtk.TextIter, _text: [*:0]const u8, _len: i32, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, [*:0]const u8, i32, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_insert_interactive" });
        const ret = cFn(self, _iter, _text, _len, _default_editable);
        return ret;
    }
    /// method [insert_interactive_at_cursor](https://docs.gtk.org/gtk4/method.TextBuffer.insert_interactive_at_cursor.html)
    pub fn insertInteractiveAtCursor(self: *TextBuffer, _text: [*:0]const u8, _len: i32, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, i32, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_insert_interactive_at_cursor" });
        const ret = cFn(self, _text, _len, _default_editable);
        return ret;
    }
    /// method [insert_markup](https://docs.gtk.org/gtk4/method.TextBuffer.insert_markup.html)
    pub fn insertMarkup(self: *TextBuffer, _iter: *gtk.TextIter, _markup: [*:0]const u8, _len: i32) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_text_buffer_insert_markup" });
        const ret = cFn(self, _iter, _markup, _len);
        return ret;
    }
    /// method [insert_paintable](https://docs.gtk.org/gtk4/method.TextBuffer.insert_paintable.html)
    pub fn insertPaintable(self: *TextBuffer, _iter: *gtk.TextIter, _paintable: *gdk.Paintable) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gdk.Paintable) callconv(.c) void, .{ .name = "gtk_text_buffer_insert_paintable" });
        const ret = cFn(self, _iter, _paintable);
        return ret;
    }
    /// method [insert_range](https://docs.gtk.org/gtk4/method.TextBuffer.insert_range.html)
    pub fn insertRange(self: *TextBuffer, _iter: *gtk.TextIter, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_insert_range" });
        const ret = cFn(self, _iter, _start, _end);
        return ret;
    }
    /// method [insert_range_interactive](https://docs.gtk.org/gtk4/method.TextBuffer.insert_range_interactive.html)
    pub fn insertRangeInteractive(self: *TextBuffer, _iter: *gtk.TextIter, _start: *gtk.TextIter, _end: *gtk.TextIter, _default_editable: bool) bool {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter, *gtk.TextIter, bool) callconv(.c) bool, .{ .name = "gtk_text_buffer_insert_range_interactive" });
        const ret = cFn(self, _iter, _start, _end, _default_editable);
        return ret;
    }
    /// method [move_mark](https://docs.gtk.org/gtk4/method.TextBuffer.move_mark.html)
    pub fn moveMark(self: *TextBuffer, _mark: *gtk.TextMark, _where: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextMark, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_move_mark" });
        const ret = cFn(self, _mark, _where);
        return ret;
    }
    /// method [move_mark_by_name](https://docs.gtk.org/gtk4/method.TextBuffer.move_mark_by_name.html)
    pub fn moveMarkByName(self: *TextBuffer, _name: [*:0]const u8, _where: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_move_mark_by_name" });
        const ret = cFn(self, _name, _where);
        return ret;
    }
    /// method [paste_clipboard](https://docs.gtk.org/gtk4/method.TextBuffer.paste_clipboard.html)
    pub fn pasteClipboard(self: *TextBuffer, _clipboard: *gdk.Clipboard, _override_location: ?*gtk.TextIter, _default_editable: bool) void {
        const cFn = @extern(*const fn (*TextBuffer, *gdk.Clipboard, ?*gtk.TextIter, bool) callconv(.c) void, .{ .name = "gtk_text_buffer_paste_clipboard" });
        const ret = cFn(self, _clipboard, _override_location, _default_editable);
        return ret;
    }
    /// method [place_cursor](https://docs.gtk.org/gtk4/method.TextBuffer.place_cursor.html)
    pub fn placeCursor(self: *TextBuffer, _where: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_place_cursor" });
        const ret = cFn(self, _where);
        return ret;
    }
    /// method [redo](https://docs.gtk.org/gtk4/method.TextBuffer.redo.html)
    pub fn redo(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_redo" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_all_tags](https://docs.gtk.org/gtk4/method.TextBuffer.remove_all_tags.html)
    pub fn removeAllTags(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_remove_all_tags" });
        const ret = cFn(self, _start, _end);
        return ret;
    }
    /// method [remove_selection_clipboard](https://docs.gtk.org/gtk4/method.TextBuffer.remove_selection_clipboard.html)
    pub fn removeSelectionClipboard(self: *TextBuffer, _clipboard: *gdk.Clipboard) void {
        const cFn = @extern(*const fn (*TextBuffer, *gdk.Clipboard) callconv(.c) void, .{ .name = "gtk_text_buffer_remove_selection_clipboard" });
        const ret = cFn(self, _clipboard);
        return ret;
    }
    /// method [remove_tag](https://docs.gtk.org/gtk4/method.TextBuffer.remove_tag.html)
    pub fn removeTag(self: *TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextTag, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_remove_tag" });
        const ret = cFn(self, _tag, _start, _end);
        return ret;
    }
    /// method [remove_tag_by_name](https://docs.gtk.org/gtk4/method.TextBuffer.remove_tag_by_name.html)
    pub fn removeTagByName(self: *TextBuffer, _name: [*:0]const u8, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_remove_tag_by_name" });
        const ret = cFn(self, _name, _start, _end);
        return ret;
    }
    /// method [select_range](https://docs.gtk.org/gtk4/method.TextBuffer.select_range.html)
    pub fn selectRange(self: *TextBuffer, _ins: *gtk.TextIter, _bound: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextBuffer, *gtk.TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_buffer_select_range" });
        const ret = cFn(self, _ins, _bound);
        return ret;
    }
    /// method [set_enable_undo](https://docs.gtk.org/gtk4/method.TextBuffer.set_enable_undo.html)
    pub fn setEnableUndo(self: *TextBuffer, _enable_undo: bool) void {
        const cFn = @extern(*const fn (*TextBuffer, bool) callconv(.c) void, .{ .name = "gtk_text_buffer_set_enable_undo" });
        const ret = cFn(self, _enable_undo);
        return ret;
    }
    /// method [set_max_undo_levels](https://docs.gtk.org/gtk4/method.TextBuffer.set_max_undo_levels.html)
    pub fn setMaxUndoLevels(self: *TextBuffer, _max_undo_levels: u32) void {
        const cFn = @extern(*const fn (*TextBuffer, u32) callconv(.c) void, .{ .name = "gtk_text_buffer_set_max_undo_levels" });
        const ret = cFn(self, _max_undo_levels);
        return ret;
    }
    /// method [set_modified](https://docs.gtk.org/gtk4/method.TextBuffer.set_modified.html)
    pub fn setModified(self: *TextBuffer, _setting: bool) void {
        const cFn = @extern(*const fn (*TextBuffer, bool) callconv(.c) void, .{ .name = "gtk_text_buffer_set_modified" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.TextBuffer.set_text.html)
    pub fn setText(self: *TextBuffer, _text: [*:0]const u8, _len: i32) void {
        const cFn = @extern(*const fn (*TextBuffer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_text_buffer_set_text" });
        const ret = cFn(self, _text, _len);
        return ret;
    }
    /// method [undo](https://docs.gtk.org/gtk4/method.TextBuffer.undo.html)
    pub fn undo(self: *TextBuffer) void {
        const cFn = @extern(*const fn (*TextBuffer) callconv(.c) void, .{ .name = "gtk_text_buffer_undo" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [apply_tag](https://docs.gtk.org/gtk4/vfunc.TextBuffer.apply_tag.html)
    pub fn applyTagV(self: *TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.apply_tag.?;
        const ret = vFn(self, _tag, _start, _end);
        return ret;
    }
    /// vfunc [begin_user_action](https://docs.gtk.org/gtk4/vfunc.TextBuffer.begin_user_action.html)
    pub fn beginUserActionV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.begin_user_action.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [changed](https://docs.gtk.org/gtk4/vfunc.TextBuffer.changed.html)
    pub fn changedV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [delete_range](https://docs.gtk.org/gtk4/vfunc.TextBuffer.delete_range.html)
    pub fn deleteRangeV(self: *TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_range.?;
        const ret = vFn(self, _start, _end);
        return ret;
    }
    /// vfunc [end_user_action](https://docs.gtk.org/gtk4/vfunc.TextBuffer.end_user_action.html)
    pub fn endUserActionV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.end_user_action.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [insert_child_anchor](https://docs.gtk.org/gtk4/vfunc.TextBuffer.insert_child_anchor.html)
    pub fn insertChildAnchorV(self: *TextBuffer, _iter: *gtk.TextIter, _anchor: *gtk.TextChildAnchor) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_child_anchor.?;
        const ret = vFn(self, _iter, _anchor);
        return ret;
    }
    /// vfunc [insert_paintable](https://docs.gtk.org/gtk4/vfunc.TextBuffer.insert_paintable.html)
    pub fn insertPaintableV(self: *TextBuffer, _iter: *gtk.TextIter, _paintable: *gdk.Paintable) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_paintable.?;
        const ret = vFn(self, _iter, _paintable);
        return ret;
    }
    /// vfunc [insert_text](https://docs.gtk.org/gtk4/vfunc.TextBuffer.insert_text.html)
    pub fn insertTextV(self: *TextBuffer, _pos: *gtk.TextIter, _new_text: [*:0]const u8, _new_text_length: i32) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_text.?;
        const ret = vFn(self, _pos, _new_text, _new_text_length);
        return ret;
    }
    /// vfunc [mark_deleted](https://docs.gtk.org/gtk4/vfunc.TextBuffer.mark_deleted.html)
    pub fn markDeletedV(self: *TextBuffer, _mark: *gtk.TextMark) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mark_deleted.?;
        const ret = vFn(self, _mark);
        return ret;
    }
    /// vfunc [mark_set](https://docs.gtk.org/gtk4/vfunc.TextBuffer.mark_set.html)
    pub fn markSetV(self: *TextBuffer, _location: *gtk.TextIter, _mark: *gtk.TextMark) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mark_set.?;
        const ret = vFn(self, _location, _mark);
        return ret;
    }
    /// vfunc [modified_changed](https://docs.gtk.org/gtk4/vfunc.TextBuffer.modified_changed.html)
    pub fn modifiedChangedV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.modified_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [paste_done](https://docs.gtk.org/gtk4/vfunc.TextBuffer.paste_done.html)
    pub fn pasteDoneV(self: *TextBuffer, _clipboard: *gdk.Clipboard) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.paste_done.?;
        const ret = vFn(self, _clipboard);
        return ret;
    }
    /// vfunc [redo](https://docs.gtk.org/gtk4/vfunc.TextBuffer.redo.html)
    pub fn redoV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.redo.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [remove_tag](https://docs.gtk.org/gtk4/vfunc.TextBuffer.remove_tag.html)
    pub fn removeTagV(self: *TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.remove_tag.?;
        const ret = vFn(self, _tag, _start, _end);
        return ret;
    }
    /// vfunc [undo](https://docs.gtk.org/gtk4/vfunc.TextBuffer.undo.html)
    pub fn undoV(self: *TextBuffer) void {
        const class: *TextBufferClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.undo.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [apply-tag](https://docs.gtk.org/gtk4/signal.TextBuffer.apply-tag.html)
    pub fn connectApplyTag(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("apply-tag", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextTag, *gtk.TextIter, *gtk.TextIter });
    }
    /// signal [begin-user-action](https://docs.gtk.org/gtk4/signal.TextBuffer.begin-user-action.html)
    pub fn connectBeginUserAction(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("begin-user-action", handler, args, flags, &.{ void, *TextBuffer });
    }
    /// signal [changed](https://docs.gtk.org/gtk4/signal.TextBuffer.changed.html)
    pub fn connectChanged(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *TextBuffer });
    }
    /// signal [delete-range](https://docs.gtk.org/gtk4/signal.TextBuffer.delete-range.html)
    pub fn connectDeleteRange(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("delete-range", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextIter, *gtk.TextIter });
    }
    /// signal [end-user-action](https://docs.gtk.org/gtk4/signal.TextBuffer.end-user-action.html)
    pub fn connectEndUserAction(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("end-user-action", handler, args, flags, &.{ void, *TextBuffer });
    }
    /// signal [insert-child-anchor](https://docs.gtk.org/gtk4/signal.TextBuffer.insert-child-anchor.html)
    pub fn connectInsertChildAnchor(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-child-anchor", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextIter, *gtk.TextChildAnchor });
    }
    /// signal [insert-paintable](https://docs.gtk.org/gtk4/signal.TextBuffer.insert-paintable.html)
    pub fn connectInsertPaintable(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-paintable", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextIter, *gdk.Paintable });
    }
    /// signal [insert-text](https://docs.gtk.org/gtk4/signal.TextBuffer.insert-text.html)
    pub fn connectInsertText(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-text", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextIter, [*:0]const u8, i32 });
    }
    /// signal [mark-deleted](https://docs.gtk.org/gtk4/signal.TextBuffer.mark-deleted.html)
    pub fn connectMarkDeleted(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mark-deleted", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextMark });
    }
    /// signal [mark-set](https://docs.gtk.org/gtk4/signal.TextBuffer.mark-set.html)
    pub fn connectMarkSet(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mark-set", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextIter, *gtk.TextMark });
    }
    /// signal [modified-changed](https://docs.gtk.org/gtk4/signal.TextBuffer.modified-changed.html)
    pub fn connectModifiedChanged(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("modified-changed", handler, args, flags, &.{ void, *TextBuffer });
    }
    /// signal [paste-done](https://docs.gtk.org/gtk4/signal.TextBuffer.paste-done.html)
    pub fn connectPasteDone(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("paste-done", handler, args, flags, &.{ void, *TextBuffer, *gdk.Clipboard });
    }
    /// signal [redo](https://docs.gtk.org/gtk4/signal.TextBuffer.redo.html)
    pub fn connectRedo(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("redo", handler, args, flags, &.{ void, *TextBuffer });
    }
    /// signal [remove-tag](https://docs.gtk.org/gtk4/signal.TextBuffer.remove-tag.html)
    pub fn connectRemoveTag(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("remove-tag", handler, args, flags, &.{ void, *TextBuffer, *gtk.TextTag, *gtk.TextIter, *gtk.TextIter });
    }
    /// signal [undo](https://docs.gtk.org/gtk4/signal.TextBuffer.undo.html)
    pub fn connectUndo(self: *TextBuffer, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("undo", handler, args, flags, &.{ void, *TextBuffer });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_buffer_get_type" });
        return cFn();
    }
};
pub const TextBufferClass = extern struct {
    parent_class: gobject.ObjectClass,
    insert_text: ?*const fn (_buffer: *gtk.TextBuffer, _pos: *gtk.TextIter, _new_text: [*:0]const u8, _new_text_length: i32) callconv(.c) void,
    insert_paintable: ?*const fn (_buffer: *gtk.TextBuffer, _iter: *gtk.TextIter, _paintable: *gdk.Paintable) callconv(.c) void,
    insert_child_anchor: ?*const fn (_buffer: *gtk.TextBuffer, _iter: *gtk.TextIter, _anchor: *gtk.TextChildAnchor) callconv(.c) void,
    delete_range: ?*const fn (_buffer: *gtk.TextBuffer, _start: *gtk.TextIter, _end: *gtk.TextIter) callconv(.c) void,
    changed: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    modified_changed: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    mark_set: ?*const fn (_buffer: *gtk.TextBuffer, _location: *gtk.TextIter, _mark: *gtk.TextMark) callconv(.c) void,
    mark_deleted: ?*const fn (_buffer: *gtk.TextBuffer, _mark: *gtk.TextMark) callconv(.c) void,
    apply_tag: ?*const fn (_buffer: *gtk.TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) callconv(.c) void,
    remove_tag: ?*const fn (_buffer: *gtk.TextBuffer, _tag: *gtk.TextTag, _start: *gtk.TextIter, _end: *gtk.TextIter) callconv(.c) void,
    begin_user_action: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    end_user_action: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    paste_done: ?*const fn (_buffer: *gtk.TextBuffer, _clipboard: *gdk.Clipboard) callconv(.c) void,
    undo: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    redo: ?*const fn (_buffer: *gtk.TextBuffer) callconv(.c) void,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
pub const TextBufferPrivate = opaque {};
/// callback [TextCharPredicate](https://docs.gtk.org/gtk4/callback.TextCharPredicate.html)
pub const TextCharPredicate = *const fn (_ch: core.Unichar, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [TextChildAnchor](https://docs.gtk.org/gtk4/class.TextChildAnchor.html)
pub const TextChildAnchor = extern struct {
    parent_instance: gobject.Object,
    segment: ?*anyopaque,
    pub const Parent = gobject.Object;
    pub const Class = gtk.TextChildAnchorClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextChildAnchor.new.html)
    pub fn new() *TextChildAnchor {
        const cFn = @extern(*const fn () callconv(.c) *TextChildAnchor, .{ .name = "gtk_text_child_anchor_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_replacement](https://docs.gtk.org/gtk4/ctor.TextChildAnchor.new_with_replacement.html)
    pub fn newWithReplacement(_character: [*:0]const u8) *TextChildAnchor {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *TextChildAnchor, .{ .name = "gtk_text_child_anchor_new_with_replacement" });
        const ret = cFn(_character);
        return ret;
    }
    /// method [get_deleted](https://docs.gtk.org/gtk4/method.TextChildAnchor.get_deleted.html)
    pub fn getDeleted(self: *TextChildAnchor) bool {
        const cFn = @extern(*const fn (*TextChildAnchor) callconv(.c) bool, .{ .name = "gtk_text_child_anchor_get_deleted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_widgets](https://docs.gtk.org/gtk4/method.TextChildAnchor.get_widgets.html)
    pub fn getWidgets(self: *TextChildAnchor) struct {
        ret: [*]*gtk.Widget,
        out_len: u32,
    } {
        var out_len_out: u32 = undefined;
        const _out_len = &out_len_out;
        const cFn = @extern(*const fn (*TextChildAnchor, *u32) callconv(.c) [*]*gtk.Widget, .{ .name = "gtk_text_child_anchor_get_widgets" });
        const ret = cFn(self, _out_len);
        return .{ .ret = ret, .out_len = out_len_out };
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_child_anchor_get_type" });
        return cFn();
    }
};
pub const TextChildAnchorClass = extern struct {
    parent_class: gobject.ObjectClass,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
/// Enum [TextDirection](https://docs.gtk.org/gtk4/enum.TextDirection.html)
pub const TextDirection = enum(u32) {
    none = 0,
    ltr = 1,
    rtl = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_direction_get_type" });
        return cFn();
    }
};
/// Enum [TextExtendSelection](https://docs.gtk.org/gtk4/enum.TextExtendSelection.html)
pub const TextExtendSelection = enum(u32) {
    word = 0,
    line = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_extend_selection_get_type" });
        return cFn();
    }
};
/// Struct [TextIter](https://docs.gtk.org/gtk4/struct.TextIter.html)
pub const TextIter = extern struct {
    dummy1: ?*anyopaque,
    dummy2: ?*anyopaque,
    dummy3: i32,
    dummy4: i32,
    dummy5: i32,
    dummy6: i32,
    dummy7: i32,
    dummy8: i32,
    dummy9: ?*anyopaque,
    dummy10: ?*anyopaque,
    dummy11: i32,
    dummy12: i32,
    dummy13: i32,
    dummy14: ?*anyopaque,
    /// method [assign](https://docs.gtk.org/gtk4/method.TextIter.assign.html)
    pub fn assign(self: *TextIter, _other: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_iter_assign" });
        const ret = cFn(self, _other);
        return ret;
    }
    /// method [backward_char](https://docs.gtk.org/gtk4/method.TextIter.backward_char.html)
    pub fn backwardChar(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_chars](https://docs.gtk.org/gtk4/method.TextIter.backward_chars.html)
    pub fn backwardChars(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_chars" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_cursor_position](https://docs.gtk.org/gtk4/method.TextIter.backward_cursor_position.html)
    pub fn backwardCursorPosition(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_cursor_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_cursor_positions](https://docs.gtk.org/gtk4/method.TextIter.backward_cursor_positions.html)
    pub fn backwardCursorPositions(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_cursor_positions" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_find_char](https://docs.gtk.org/gtk4/method.TextIter.backward_find_char.html)
    pub fn backwardFindChar(self: *TextIter, pred: anytype, pred_args: anytype, _limit: ?*gtk.TextIter) bool {
        var closure_pred = core.zig_closure(pred, pred_args, &.{ bool, core.Unichar });
        defer closure_pred.deinit();
        const _pred: gtk.TextCharPredicate = @ptrCast(closure_pred.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_pred.c_data());
        const cFn = @extern(*const fn (*TextIter, gtk.TextCharPredicate, ?*anyopaque, ?*gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_find_char" });
        const ret = cFn(self, _pred, @ptrCast(_user_data), _limit);
        return ret;
    }
    /// method [backward_line](https://docs.gtk.org/gtk4/method.TextIter.backward_line.html)
    pub fn backwardLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_lines](https://docs.gtk.org/gtk4/method.TextIter.backward_lines.html)
    pub fn backwardLines(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_lines" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_search](https://docs.gtk.org/gtk4/method.TextIter.backward_search.html)
    pub fn backwardSearch(self: *TextIter, _str: [*:0]const u8, _flags: gtk.TextSearchFlags, _match_start: ?*gtk.TextIter, _match_end: ?*gtk.TextIter, _limit: ?*gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextIter, [*:0]const u8, gtk.TextSearchFlags, ?*gtk.TextIter, ?*gtk.TextIter, ?*gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_search" });
        const ret = cFn(self, _str, _flags, _match_start, _match_end, _limit);
        return ret;
    }
    /// method [backward_sentence_start](https://docs.gtk.org/gtk4/method.TextIter.backward_sentence_start.html)
    pub fn backwardSentenceStart(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_sentence_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_sentence_starts](https://docs.gtk.org/gtk4/method.TextIter.backward_sentence_starts.html)
    pub fn backwardSentenceStarts(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_sentence_starts" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_to_tag_toggle](https://docs.gtk.org/gtk4/method.TextIter.backward_to_tag_toggle.html)
    pub fn backwardToTagToggle(self: *TextIter, _tag: ?*gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, ?*gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_to_tag_toggle" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [backward_visible_cursor_position](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_cursor_position.html)
    pub fn backwardVisibleCursorPosition(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_cursor_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_visible_cursor_positions](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_cursor_positions.html)
    pub fn backwardVisibleCursorPositions(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_cursor_positions" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_visible_line](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_line.html)
    pub fn backwardVisibleLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_visible_lines](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_lines.html)
    pub fn backwardVisibleLines(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_lines" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_visible_word_start](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_word_start.html)
    pub fn backwardVisibleWordStart(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_word_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_visible_word_starts](https://docs.gtk.org/gtk4/method.TextIter.backward_visible_word_starts.html)
    pub fn backwardVisibleWordStarts(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_visible_word_starts" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [backward_word_start](https://docs.gtk.org/gtk4/method.TextIter.backward_word_start.html)
    pub fn backwardWordStart(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_word_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [backward_word_starts](https://docs.gtk.org/gtk4/method.TextIter.backward_word_starts.html)
    pub fn backwardWordStarts(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_backward_word_starts" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [can_insert](https://docs.gtk.org/gtk4/method.TextIter.can_insert.html)
    pub fn canInsert(self: *TextIter, _default_editability: bool) bool {
        const cFn = @extern(*const fn (*TextIter, bool) callconv(.c) bool, .{ .name = "gtk_text_iter_can_insert" });
        const ret = cFn(self, _default_editability);
        return ret;
    }
    /// method [compare](https://docs.gtk.org/gtk4/method.TextIter.compare.html)
    pub fn compare(self: *TextIter, _rhs: *gtk.TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_compare" });
        const ret = cFn(self, _rhs);
        return ret;
    }
    /// method [copy](https://docs.gtk.org/gtk4/method.TextIter.copy.html)
    pub fn copy(self: *TextIter) *gtk.TextIter {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) *gtk.TextIter, .{ .name = "gtk_text_iter_copy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [editable](https://docs.gtk.org/gtk4/method.TextIter.editable.html)
    pub fn editable(self: *TextIter, _default_setting: bool) bool {
        const cFn = @extern(*const fn (*TextIter, bool) callconv(.c) bool, .{ .name = "gtk_text_iter_editable" });
        const ret = cFn(self, _default_setting);
        return ret;
    }
    /// method [ends_line](https://docs.gtk.org/gtk4/method.TextIter.ends_line.html)
    pub fn endsLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_ends_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ends_sentence](https://docs.gtk.org/gtk4/method.TextIter.ends_sentence.html)
    pub fn endsSentence(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_ends_sentence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ends_tag](https://docs.gtk.org/gtk4/method.TextIter.ends_tag.html)
    pub fn endsTag(self: *TextIter, _tag: ?*gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, ?*gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_ends_tag" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [ends_word](https://docs.gtk.org/gtk4/method.TextIter.ends_word.html)
    pub fn endsWord(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_ends_word" });
        const ret = cFn(self);
        return ret;
    }
    /// method [equal](https://docs.gtk.org/gtk4/method.TextIter.equal.html)
    pub fn equal(self: *TextIter, _rhs: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_equal" });
        const ret = cFn(self, _rhs);
        return ret;
    }
    /// method [forward_char](https://docs.gtk.org/gtk4/method.TextIter.forward_char.html)
    pub fn forwardChar(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_chars](https://docs.gtk.org/gtk4/method.TextIter.forward_chars.html)
    pub fn forwardChars(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_chars" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_cursor_position](https://docs.gtk.org/gtk4/method.TextIter.forward_cursor_position.html)
    pub fn forwardCursorPosition(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_cursor_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_cursor_positions](https://docs.gtk.org/gtk4/method.TextIter.forward_cursor_positions.html)
    pub fn forwardCursorPositions(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_cursor_positions" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_find_char](https://docs.gtk.org/gtk4/method.TextIter.forward_find_char.html)
    pub fn forwardFindChar(self: *TextIter, pred: anytype, pred_args: anytype, _limit: ?*gtk.TextIter) bool {
        var closure_pred = core.zig_closure(pred, pred_args, &.{ bool, core.Unichar });
        defer closure_pred.deinit();
        const _pred: gtk.TextCharPredicate = @ptrCast(closure_pred.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_pred.c_data());
        const cFn = @extern(*const fn (*TextIter, gtk.TextCharPredicate, ?*anyopaque, ?*gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_find_char" });
        const ret = cFn(self, _pred, @ptrCast(_user_data), _limit);
        return ret;
    }
    /// method [forward_line](https://docs.gtk.org/gtk4/method.TextIter.forward_line.html)
    pub fn forwardLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_lines](https://docs.gtk.org/gtk4/method.TextIter.forward_lines.html)
    pub fn forwardLines(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_lines" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_search](https://docs.gtk.org/gtk4/method.TextIter.forward_search.html)
    pub fn forwardSearch(self: *TextIter, _str: [*:0]const u8, _flags: gtk.TextSearchFlags, _match_start: ?*gtk.TextIter, _match_end: ?*gtk.TextIter, _limit: ?*gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextIter, [*:0]const u8, gtk.TextSearchFlags, ?*gtk.TextIter, ?*gtk.TextIter, ?*gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_search" });
        const ret = cFn(self, _str, _flags, _match_start, _match_end, _limit);
        return ret;
    }
    /// method [forward_sentence_end](https://docs.gtk.org/gtk4/method.TextIter.forward_sentence_end.html)
    pub fn forwardSentenceEnd(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_sentence_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_sentence_ends](https://docs.gtk.org/gtk4/method.TextIter.forward_sentence_ends.html)
    pub fn forwardSentenceEnds(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_sentence_ends" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_to_end](https://docs.gtk.org/gtk4/method.TextIter.forward_to_end.html)
    pub fn forwardToEnd(self: *TextIter) void {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) void, .{ .name = "gtk_text_iter_forward_to_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_to_line_end](https://docs.gtk.org/gtk4/method.TextIter.forward_to_line_end.html)
    pub fn forwardToLineEnd(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_to_line_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_to_tag_toggle](https://docs.gtk.org/gtk4/method.TextIter.forward_to_tag_toggle.html)
    pub fn forwardToTagToggle(self: *TextIter, _tag: ?*gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, ?*gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_to_tag_toggle" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [forward_visible_cursor_position](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_cursor_position.html)
    pub fn forwardVisibleCursorPosition(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_cursor_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_visible_cursor_positions](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_cursor_positions.html)
    pub fn forwardVisibleCursorPositions(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_cursor_positions" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_visible_line](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_line.html)
    pub fn forwardVisibleLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_visible_lines](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_lines.html)
    pub fn forwardVisibleLines(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_lines" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_visible_word_end](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_word_end.html)
    pub fn forwardVisibleWordEnd(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_word_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_visible_word_ends](https://docs.gtk.org/gtk4/method.TextIter.forward_visible_word_ends.html)
    pub fn forwardVisibleWordEnds(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_visible_word_ends" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [forward_word_end](https://docs.gtk.org/gtk4/method.TextIter.forward_word_end.html)
    pub fn forwardWordEnd(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_word_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [forward_word_ends](https://docs.gtk.org/gtk4/method.TextIter.forward_word_ends.html)
    pub fn forwardWordEnds(self: *TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_iter_forward_word_ends" });
        const ret = cFn(self, _count);
        return ret;
    }
    /// method [free](https://docs.gtk.org/gtk4/method.TextIter.free.html)
    pub fn free(self: *TextIter) void {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) void, .{ .name = "gtk_text_iter_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer](https://docs.gtk.org/gtk4/method.TextIter.get_buffer.html)
    pub fn getBuffer(self: *TextIter) *gtk.TextBuffer {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) *gtk.TextBuffer, .{ .name = "gtk_text_iter_get_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bytes_in_line](https://docs.gtk.org/gtk4/method.TextIter.get_bytes_in_line.html)
    pub fn getBytesInLine(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_bytes_in_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_char](https://docs.gtk.org/gtk4/method.TextIter.get_char.html)
    pub fn getChar(self: *TextIter) core.Unichar {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) core.Unichar, .{ .name = "gtk_text_iter_get_char" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_chars_in_line](https://docs.gtk.org/gtk4/method.TextIter.get_chars_in_line.html)
    pub fn getCharsInLine(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_chars_in_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_anchor](https://docs.gtk.org/gtk4/method.TextIter.get_child_anchor.html)
    pub fn getChildAnchor(self: *TextIter) ?*gtk.TextChildAnchor {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) ?*gtk.TextChildAnchor, .{ .name = "gtk_text_iter_get_child_anchor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_language](https://docs.gtk.org/gtk4/method.TextIter.get_language.html)
    pub fn getLanguage(self: *TextIter) *pango.Language {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) *pango.Language, .{ .name = "gtk_text_iter_get_language" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line](https://docs.gtk.org/gtk4/method.TextIter.get_line.html)
    pub fn getLine(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_index](https://docs.gtk.org/gtk4/method.TextIter.get_line_index.html)
    pub fn getLineIndex(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_line_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_offset](https://docs.gtk.org/gtk4/method.TextIter.get_line_offset.html)
    pub fn getLineOffset(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_line_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_marks](https://docs.gtk.org/gtk4/method.TextIter.get_marks.html)
    pub fn getMarks(self: *TextIter) ?*core.SList {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) ?*core.SList, .{ .name = "gtk_text_iter_get_marks" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_offset](https://docs.gtk.org/gtk4/method.TextIter.get_offset.html)
    pub fn getOffset(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_paintable](https://docs.gtk.org/gtk4/method.TextIter.get_paintable.html)
    pub fn getPaintable(self: *TextIter) ?*gdk.Paintable {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_text_iter_get_paintable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_slice](https://docs.gtk.org/gtk4/method.TextIter.get_slice.html)
    pub fn getSlice(self: *TextIter, _end: *gtk.TextIter) [*:0]u8 {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) [*:0]u8, .{ .name = "gtk_text_iter_get_slice" });
        const ret = cFn(self, _end);
        return ret;
    }
    /// method [get_tags](https://docs.gtk.org/gtk4/method.TextIter.get_tags.html)
    pub fn getTags(self: *TextIter) ?*core.SList {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) ?*core.SList, .{ .name = "gtk_text_iter_get_tags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_text](https://docs.gtk.org/gtk4/method.TextIter.get_text.html)
    pub fn getText(self: *TextIter, _end: *gtk.TextIter) [*:0]u8 {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) [*:0]u8, .{ .name = "gtk_text_iter_get_text" });
        const ret = cFn(self, _end);
        return ret;
    }
    /// method [get_toggled_tags](https://docs.gtk.org/gtk4/method.TextIter.get_toggled_tags.html)
    pub fn getToggledTags(self: *TextIter, _toggled_on: bool) ?*core.SList {
        const cFn = @extern(*const fn (*TextIter, bool) callconv(.c) ?*core.SList, .{ .name = "gtk_text_iter_get_toggled_tags" });
        const ret = cFn(self, _toggled_on);
        return ret;
    }
    /// method [get_visible_line_index](https://docs.gtk.org/gtk4/method.TextIter.get_visible_line_index.html)
    pub fn getVisibleLineIndex(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_visible_line_index" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible_line_offset](https://docs.gtk.org/gtk4/method.TextIter.get_visible_line_offset.html)
    pub fn getVisibleLineOffset(self: *TextIter) i32 {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) i32, .{ .name = "gtk_text_iter_get_visible_line_offset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible_slice](https://docs.gtk.org/gtk4/method.TextIter.get_visible_slice.html)
    pub fn getVisibleSlice(self: *TextIter, _end: *gtk.TextIter) [*:0]u8 {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) [*:0]u8, .{ .name = "gtk_text_iter_get_visible_slice" });
        const ret = cFn(self, _end);
        return ret;
    }
    /// method [get_visible_text](https://docs.gtk.org/gtk4/method.TextIter.get_visible_text.html)
    pub fn getVisibleText(self: *TextIter, _end: *gtk.TextIter) [*:0]u8 {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) [*:0]u8, .{ .name = "gtk_text_iter_get_visible_text" });
        const ret = cFn(self, _end);
        return ret;
    }
    /// method [has_tag](https://docs.gtk.org/gtk4/method.TextIter.has_tag.html)
    pub fn hasTag(self: *TextIter, _tag: *gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_has_tag" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [in_range](https://docs.gtk.org/gtk4/method.TextIter.in_range.html)
    pub fn inRange(self: *TextIter, _start: *gtk.TextIter, _end: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_in_range" });
        const ret = cFn(self, _start, _end);
        return ret;
    }
    /// method [inside_sentence](https://docs.gtk.org/gtk4/method.TextIter.inside_sentence.html)
    pub fn insideSentence(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_inside_sentence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [inside_word](https://docs.gtk.org/gtk4/method.TextIter.inside_word.html)
    pub fn insideWord(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_inside_word" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_cursor_position](https://docs.gtk.org/gtk4/method.TextIter.is_cursor_position.html)
    pub fn isCursorPosition(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_is_cursor_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_end](https://docs.gtk.org/gtk4/method.TextIter.is_end.html)
    pub fn isEnd(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_is_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_start](https://docs.gtk.org/gtk4/method.TextIter.is_start.html)
    pub fn isStart(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_is_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [order](https://docs.gtk.org/gtk4/method.TextIter.order.html)
    pub fn order(self: *TextIter, _second: *gtk.TextIter) void {
        const cFn = @extern(*const fn (*TextIter, *gtk.TextIter) callconv(.c) void, .{ .name = "gtk_text_iter_order" });
        const ret = cFn(self, _second);
        return ret;
    }
    /// method [set_line](https://docs.gtk.org/gtk4/method.TextIter.set_line.html)
    pub fn setLine(self: *TextIter, _line_number: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_line" });
        const ret = cFn(self, _line_number);
        return ret;
    }
    /// method [set_line_index](https://docs.gtk.org/gtk4/method.TextIter.set_line_index.html)
    pub fn setLineIndex(self: *TextIter, _byte_on_line: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_line_index" });
        const ret = cFn(self, _byte_on_line);
        return ret;
    }
    /// method [set_line_offset](https://docs.gtk.org/gtk4/method.TextIter.set_line_offset.html)
    pub fn setLineOffset(self: *TextIter, _char_on_line: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_line_offset" });
        const ret = cFn(self, _char_on_line);
        return ret;
    }
    /// method [set_offset](https://docs.gtk.org/gtk4/method.TextIter.set_offset.html)
    pub fn setOffset(self: *TextIter, _char_offset: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_offset" });
        const ret = cFn(self, _char_offset);
        return ret;
    }
    /// method [set_visible_line_index](https://docs.gtk.org/gtk4/method.TextIter.set_visible_line_index.html)
    pub fn setVisibleLineIndex(self: *TextIter, _byte_on_line: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_visible_line_index" });
        const ret = cFn(self, _byte_on_line);
        return ret;
    }
    /// method [set_visible_line_offset](https://docs.gtk.org/gtk4/method.TextIter.set_visible_line_offset.html)
    pub fn setVisibleLineOffset(self: *TextIter, _char_on_line: i32) void {
        const cFn = @extern(*const fn (*TextIter, i32) callconv(.c) void, .{ .name = "gtk_text_iter_set_visible_line_offset" });
        const ret = cFn(self, _char_on_line);
        return ret;
    }
    /// method [starts_line](https://docs.gtk.org/gtk4/method.TextIter.starts_line.html)
    pub fn startsLine(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_starts_line" });
        const ret = cFn(self);
        return ret;
    }
    /// method [starts_sentence](https://docs.gtk.org/gtk4/method.TextIter.starts_sentence.html)
    pub fn startsSentence(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_starts_sentence" });
        const ret = cFn(self);
        return ret;
    }
    /// method [starts_tag](https://docs.gtk.org/gtk4/method.TextIter.starts_tag.html)
    pub fn startsTag(self: *TextIter, _tag: ?*gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, ?*gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_starts_tag" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [starts_word](https://docs.gtk.org/gtk4/method.TextIter.starts_word.html)
    pub fn startsWord(self: *TextIter) bool {
        const cFn = @extern(*const fn (*TextIter) callconv(.c) bool, .{ .name = "gtk_text_iter_starts_word" });
        const ret = cFn(self);
        return ret;
    }
    /// method [toggles_tag](https://docs.gtk.org/gtk4/method.TextIter.toggles_tag.html)
    pub fn togglesTag(self: *TextIter, _tag: ?*gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextIter, ?*gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_iter_toggles_tag" });
        const ret = cFn(self, _tag);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_iter_get_type" });
        return cFn();
    }
};
/// Class [TextMark](https://docs.gtk.org/gtk4/class.TextMark.html)
/// - property [left-gravity](https://docs.gtk.org/gtk4/property.TextMark.left-gravity.html): (r-) `bool`
/// - property [name](https://docs.gtk.org/gtk4/property.TextMark.name.html): (r-) `[*:0]const u8`
pub const TextMark = extern struct {
    parent_instance: gobject.Object,
    segment: ?*anyopaque,
    pub const Parent = gobject.Object;
    pub const Class = gtk.TextMarkClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextMark.new.html)
    pub fn new(_name: ?[*:0]const u8, _left_gravity: bool) *TextMark {
        const cFn = @extern(*const fn (?[*:0]const u8, bool) callconv(.c) *TextMark, .{ .name = "gtk_text_mark_new" });
        const ret = cFn(_name, _left_gravity);
        return ret;
    }
    /// method [get_buffer](https://docs.gtk.org/gtk4/method.TextMark.get_buffer.html)
    pub fn getBuffer(self: *TextMark) ?*gtk.TextBuffer {
        const cFn = @extern(*const fn (*TextMark) callconv(.c) ?*gtk.TextBuffer, .{ .name = "gtk_text_mark_get_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_deleted](https://docs.gtk.org/gtk4/method.TextMark.get_deleted.html)
    pub fn getDeleted(self: *TextMark) bool {
        const cFn = @extern(*const fn (*TextMark) callconv(.c) bool, .{ .name = "gtk_text_mark_get_deleted" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_left_gravity](https://docs.gtk.org/gtk4/method.TextMark.get_left_gravity.html)
    pub fn getLeftGravity(self: *TextMark) bool {
        const cFn = @extern(*const fn (*TextMark) callconv(.c) bool, .{ .name = "gtk_text_mark_get_left_gravity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.TextMark.get_name.html)
    pub fn getName(self: *TextMark) ?[*:0]u8 {
        const cFn = @extern(*const fn (*TextMark) callconv(.c) ?[*:0]u8, .{ .name = "gtk_text_mark_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible](https://docs.gtk.org/gtk4/method.TextMark.get_visible.html)
    pub fn getVisible(self: *TextMark) bool {
        const cFn = @extern(*const fn (*TextMark) callconv(.c) bool, .{ .name = "gtk_text_mark_get_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_visible](https://docs.gtk.org/gtk4/method.TextMark.set_visible.html)
    pub fn setVisible(self: *TextMark, _setting: bool) void {
        const cFn = @extern(*const fn (*TextMark, bool) callconv(.c) void, .{ .name = "gtk_text_mark_set_visible" });
        const ret = cFn(self, _setting);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_mark_get_type" });
        return cFn();
    }
};
pub const TextMarkClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
/// Flags [TextSearchFlags](https://docs.gtk.org/gtk4/flags.TextSearchFlags.html)
pub const TextSearchFlags = packed struct(u32) {
    visible_only: bool = false,
    text_only: bool = false,
    case_insensitive: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_search_flags_get_type" });
        return cFn();
    }
};
/// Class [TextTag](https://docs.gtk.org/gtk4/class.TextTag.html)
/// - property [accumulative-margin](https://docs.gtk.org/gtk4/property.TextTag.accumulative-margin.html): (rw) `bool`
/// - property [allow-breaks](https://docs.gtk.org/gtk4/property.TextTag.allow-breaks.html): (rw) `bool`
/// - property [allow-breaks-set](https://docs.gtk.org/gtk4/property.TextTag.allow-breaks-set.html): (rw) `bool`
/// - property [background](https://docs.gtk.org/gtk4/property.TextTag.background.html): (-w) `[*:0]const u8`
/// - property [background-full-height](https://docs.gtk.org/gtk4/property.TextTag.background-full-height.html): (rw) `bool`
/// - property [background-full-height-set](https://docs.gtk.org/gtk4/property.TextTag.background-full-height-set.html): (rw) `bool`
/// - property [background-rgba](https://docs.gtk.org/gtk4/property.TextTag.background-rgba.html): (rw) `gdk.RGBA`
/// - property [background-set](https://docs.gtk.org/gtk4/property.TextTag.background-set.html): (rw) `bool`
/// - property [direction](https://docs.gtk.org/gtk4/property.TextTag.direction.html): (rw) `gtk.TextDirection`
/// - property [editable](https://docs.gtk.org/gtk4/property.TextTag.editable.html): (rw) `bool`
/// - property [editable-set](https://docs.gtk.org/gtk4/property.TextTag.editable-set.html): (rw) `bool`
/// - property [fallback](https://docs.gtk.org/gtk4/property.TextTag.fallback.html): (rw) `bool`
/// - property [fallback-set](https://docs.gtk.org/gtk4/property.TextTag.fallback-set.html): (rw) `bool`
/// - property [family](https://docs.gtk.org/gtk4/property.TextTag.family.html): (rw) `[*:0]const u8`
/// - property [family-set](https://docs.gtk.org/gtk4/property.TextTag.family-set.html): (rw) `bool`
/// - property [font](https://docs.gtk.org/gtk4/property.TextTag.font.html): (rw) `[*:0]const u8`
/// - property [font-desc](https://docs.gtk.org/gtk4/property.TextTag.font-desc.html): (rw) `pango.FontDescription`
/// - property [font-features](https://docs.gtk.org/gtk4/property.TextTag.font-features.html): (rw) `[*:0]const u8`
/// - property [font-features-set](https://docs.gtk.org/gtk4/property.TextTag.font-features-set.html): (rw) `bool`
/// - property [foreground](https://docs.gtk.org/gtk4/property.TextTag.foreground.html): (-w) `[*:0]const u8`
/// - property [foreground-rgba](https://docs.gtk.org/gtk4/property.TextTag.foreground-rgba.html): (rw) `gdk.RGBA`
/// - property [foreground-set](https://docs.gtk.org/gtk4/property.TextTag.foreground-set.html): (rw) `bool`
/// - property [indent](https://docs.gtk.org/gtk4/property.TextTag.indent.html): (rw) `i32`
/// - property [indent-set](https://docs.gtk.org/gtk4/property.TextTag.indent-set.html): (rw) `bool`
/// - property [insert-hyphens](https://docs.gtk.org/gtk4/property.TextTag.insert-hyphens.html): (rw) `bool`
/// - property [insert-hyphens-set](https://docs.gtk.org/gtk4/property.TextTag.insert-hyphens-set.html): (rw) `bool`
/// - property [invisible](https://docs.gtk.org/gtk4/property.TextTag.invisible.html): (rw) `bool`
/// - property [invisible-set](https://docs.gtk.org/gtk4/property.TextTag.invisible-set.html): (rw) `bool`
/// - property [justification](https://docs.gtk.org/gtk4/property.TextTag.justification.html): (rw) `gtk.Justification`
/// - property [justification-set](https://docs.gtk.org/gtk4/property.TextTag.justification-set.html): (rw) `bool`
/// - property [language](https://docs.gtk.org/gtk4/property.TextTag.language.html): (rw) `[*:0]const u8`
/// - property [language-set](https://docs.gtk.org/gtk4/property.TextTag.language-set.html): (rw) `bool`
/// - property [left-margin](https://docs.gtk.org/gtk4/property.TextTag.left-margin.html): (rw) `i32`
/// - property [left-margin-set](https://docs.gtk.org/gtk4/property.TextTag.left-margin-set.html): (rw) `bool`
/// - property [letter-spacing](https://docs.gtk.org/gtk4/property.TextTag.letter-spacing.html): (rw) `i32`
/// - property [letter-spacing-set](https://docs.gtk.org/gtk4/property.TextTag.letter-spacing-set.html): (rw) `bool`
/// - property [line-height](https://docs.gtk.org/gtk4/property.TextTag.line-height.html): (rw) `f32`
/// - property [line-height-set](https://docs.gtk.org/gtk4/property.TextTag.line-height-set.html): (rw) `bool`
/// - property [name](https://docs.gtk.org/gtk4/property.TextTag.name.html): (r-) `[*:0]const u8`
/// - property [overline](https://docs.gtk.org/gtk4/property.TextTag.overline.html): (rw) `pango.Overline`
/// - property [overline-rgba](https://docs.gtk.org/gtk4/property.TextTag.overline-rgba.html): (rw) `gdk.RGBA`
/// - property [overline-rgba-set](https://docs.gtk.org/gtk4/property.TextTag.overline-rgba-set.html): (rw) `bool`
/// - property [overline-set](https://docs.gtk.org/gtk4/property.TextTag.overline-set.html): (rw) `bool`
/// - property [paragraph-background](https://docs.gtk.org/gtk4/property.TextTag.paragraph-background.html): (-w) `[*:0]const u8`
/// - property [paragraph-background-rgba](https://docs.gtk.org/gtk4/property.TextTag.paragraph-background-rgba.html): (rw) `gdk.RGBA`
/// - property [paragraph-background-set](https://docs.gtk.org/gtk4/property.TextTag.paragraph-background-set.html): (rw) `bool`
/// - property [pixels-above-lines](https://docs.gtk.org/gtk4/property.TextTag.pixels-above-lines.html): (rw) `i32`
/// - property [pixels-above-lines-set](https://docs.gtk.org/gtk4/property.TextTag.pixels-above-lines-set.html): (rw) `bool`
/// - property [pixels-below-lines](https://docs.gtk.org/gtk4/property.TextTag.pixels-below-lines.html): (rw) `i32`
/// - property [pixels-below-lines-set](https://docs.gtk.org/gtk4/property.TextTag.pixels-below-lines-set.html): (rw) `bool`
/// - property [pixels-inside-wrap](https://docs.gtk.org/gtk4/property.TextTag.pixels-inside-wrap.html): (rw) `i32`
/// - property [pixels-inside-wrap-set](https://docs.gtk.org/gtk4/property.TextTag.pixels-inside-wrap-set.html): (rw) `bool`
/// - property [right-margin](https://docs.gtk.org/gtk4/property.TextTag.right-margin.html): (rw) `i32`
/// - property [right-margin-set](https://docs.gtk.org/gtk4/property.TextTag.right-margin-set.html): (rw) `bool`
/// - property [rise](https://docs.gtk.org/gtk4/property.TextTag.rise.html): (rw) `i32`
/// - property [rise-set](https://docs.gtk.org/gtk4/property.TextTag.rise-set.html): (rw) `bool`
/// - property [scale](https://docs.gtk.org/gtk4/property.TextTag.scale.html): (rw) `f64`
/// - property [scale-set](https://docs.gtk.org/gtk4/property.TextTag.scale-set.html): (rw) `bool`
/// - property [sentence](https://docs.gtk.org/gtk4/property.TextTag.sentence.html): (rw) `bool`
/// - property [sentence-set](https://docs.gtk.org/gtk4/property.TextTag.sentence-set.html): (rw) `bool`
/// - property [show-spaces](https://docs.gtk.org/gtk4/property.TextTag.show-spaces.html): (rw) `pango.ShowFlags`
/// - property [show-spaces-set](https://docs.gtk.org/gtk4/property.TextTag.show-spaces-set.html): (rw) `bool`
/// - property [size](https://docs.gtk.org/gtk4/property.TextTag.size.html): (rw) `i32`
/// - property [size-points](https://docs.gtk.org/gtk4/property.TextTag.size-points.html): (rw) `f64`
/// - property [size-set](https://docs.gtk.org/gtk4/property.TextTag.size-set.html): (rw) `bool`
/// - property [stretch](https://docs.gtk.org/gtk4/property.TextTag.stretch.html): (rw) `pango.Stretch`
/// - property [stretch-set](https://docs.gtk.org/gtk4/property.TextTag.stretch-set.html): (rw) `bool`
/// - property [strikethrough](https://docs.gtk.org/gtk4/property.TextTag.strikethrough.html): (rw) `bool`
/// - property [strikethrough-rgba](https://docs.gtk.org/gtk4/property.TextTag.strikethrough-rgba.html): (rw) `gdk.RGBA`
/// - property [strikethrough-rgba-set](https://docs.gtk.org/gtk4/property.TextTag.strikethrough-rgba-set.html): (rw) `bool`
/// - property [strikethrough-set](https://docs.gtk.org/gtk4/property.TextTag.strikethrough-set.html): (rw) `bool`
/// - property [style](https://docs.gtk.org/gtk4/property.TextTag.style.html): (rw) `pango.Style`
/// - property [style-set](https://docs.gtk.org/gtk4/property.TextTag.style-set.html): (rw) `bool`
/// - property [tabs](https://docs.gtk.org/gtk4/property.TextTag.tabs.html): (rw) `pango.TabArray`
/// - property [tabs-set](https://docs.gtk.org/gtk4/property.TextTag.tabs-set.html): (rw) `bool`
/// - property [text-transform](https://docs.gtk.org/gtk4/property.TextTag.text-transform.html): (rw) `pango.TextTransform`
/// - property [text-transform-set](https://docs.gtk.org/gtk4/property.TextTag.text-transform-set.html): (rw) `bool`
/// - property [underline](https://docs.gtk.org/gtk4/property.TextTag.underline.html): (rw) `pango.Underline`
/// - property [underline-rgba](https://docs.gtk.org/gtk4/property.TextTag.underline-rgba.html): (rw) `gdk.RGBA`
/// - property [underline-rgba-set](https://docs.gtk.org/gtk4/property.TextTag.underline-rgba-set.html): (rw) `bool`
/// - property [underline-set](https://docs.gtk.org/gtk4/property.TextTag.underline-set.html): (rw) `bool`
/// - property [variant](https://docs.gtk.org/gtk4/property.TextTag.variant.html): (rw) `pango.Variant`
/// - property [variant-set](https://docs.gtk.org/gtk4/property.TextTag.variant-set.html): (rw) `bool`
/// - property [weight](https://docs.gtk.org/gtk4/property.TextTag.weight.html): (rw) `i32`
/// - property [weight-set](https://docs.gtk.org/gtk4/property.TextTag.weight-set.html): (rw) `bool`
/// - property [word](https://docs.gtk.org/gtk4/property.TextTag.word.html): (rw) `bool`
/// - property [word-set](https://docs.gtk.org/gtk4/property.TextTag.word-set.html): (rw) `bool`
/// - property [wrap-mode](https://docs.gtk.org/gtk4/property.TextTag.wrap-mode.html): (rw) `gtk.WrapMode`
/// - property [wrap-mode-set](https://docs.gtk.org/gtk4/property.TextTag.wrap-mode-set.html): (rw) `bool`
pub const TextTag = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gtk.TextTagPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gtk.TextTagClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextTag.new.html)
    pub fn new(_name: ?[*:0]const u8) *TextTag {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *TextTag, .{ .name = "gtk_text_tag_new" });
        const ret = cFn(_name);
        return ret;
    }
    /// method [changed](https://docs.gtk.org/gtk4/method.TextTag.changed.html)
    pub fn changed(self: *TextTag, _size_changed: bool) void {
        const cFn = @extern(*const fn (*TextTag, bool) callconv(.c) void, .{ .name = "gtk_text_tag_changed" });
        const ret = cFn(self, _size_changed);
        return ret;
    }
    /// method [get_priority](https://docs.gtk.org/gtk4/method.TextTag.get_priority.html)
    pub fn getPriority(self: *TextTag) i32 {
        const cFn = @extern(*const fn (*TextTag) callconv(.c) i32, .{ .name = "gtk_text_tag_get_priority" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_priority](https://docs.gtk.org/gtk4/method.TextTag.set_priority.html)
    pub fn setPriority(self: *TextTag, _priority: i32) void {
        const cFn = @extern(*const fn (*TextTag, i32) callconv(.c) void, .{ .name = "gtk_text_tag_set_priority" });
        const ret = cFn(self, _priority);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_tag_get_type" });
        return cFn();
    }
};
pub const TextTagClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const TextTagPrivate = opaque {};
/// Class [TextTagTable](https://docs.gtk.org/gtk4/class.TextTagTable.html)
pub const TextTagTable = opaque {
    pub const Interfaces = [_]type{gtk.Buildable};
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextTagTable.new.html)
    pub fn new() *TextTagTable {
        const cFn = @extern(*const fn () callconv(.c) *TextTagTable, .{ .name = "gtk_text_tag_table_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add](https://docs.gtk.org/gtk4/method.TextTagTable.add.html)
    pub fn add(self: *TextTagTable, _tag: *gtk.TextTag) bool {
        const cFn = @extern(*const fn (*TextTagTable, *gtk.TextTag) callconv(.c) bool, .{ .name = "gtk_text_tag_table_add" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// method [foreach](https://docs.gtk.org/gtk4/method.TextTagTable.foreach.html)
    pub fn foreach(self: *TextTagTable, func: anytype, func_args: anytype) void {
        var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TextTag });
        defer closure_func.deinit();
        const _func: gtk.TextTagTableForeach = @ptrCast(closure_func.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
        const cFn = @extern(*const fn (*TextTagTable, gtk.TextTagTableForeach, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_text_tag_table_foreach" });
        const ret = cFn(self, _func, @ptrCast(_data));
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gtk4/method.TextTagTable.get_size.html)
    pub fn getSize(self: *TextTagTable) i32 {
        const cFn = @extern(*const fn (*TextTagTable) callconv(.c) i32, .{ .name = "gtk_text_tag_table_get_size" });
        const ret = cFn(self);
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/gtk4/method.TextTagTable.lookup.html)
    pub fn lookup(self: *TextTagTable, _name: [*:0]const u8) ?*gtk.TextTag {
        const cFn = @extern(*const fn (*TextTagTable, [*:0]const u8) callconv(.c) ?*gtk.TextTag, .{ .name = "gtk_text_tag_table_lookup" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.TextTagTable.remove.html)
    pub fn remove(self: *TextTagTable, _tag: *gtk.TextTag) void {
        const cFn = @extern(*const fn (*TextTagTable, *gtk.TextTag) callconv(.c) void, .{ .name = "gtk_text_tag_table_remove" });
        const ret = cFn(self, _tag);
        return ret;
    }
    /// signal [tag-added](https://docs.gtk.org/gtk4/signal.TextTagTable.tag-added.html)
    pub fn connectTagAdded(self: *TextTagTable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tag-added", handler, args, flags, &.{ void, *TextTagTable, *gtk.TextTag });
    }
    /// signal [tag-changed](https://docs.gtk.org/gtk4/signal.TextTagTable.tag-changed.html)
    pub fn connectTagChanged(self: *TextTagTable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tag-changed", handler, args, flags, &.{ void, *TextTagTable, *gtk.TextTag, bool });
    }
    /// signal [tag-removed](https://docs.gtk.org/gtk4/signal.TextTagTable.tag-removed.html)
    pub fn connectTagRemoved(self: *TextTagTable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("tag-removed", handler, args, flags, &.{ void, *TextTagTable, *gtk.TextTag });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_tag_table_get_type" });
        return cFn();
    }
};
/// callback [TextTagTableForeach](https://docs.gtk.org/gtk4/callback.TextTagTableForeach.html)
pub const TextTagTableForeach = *const fn (_tag: *gtk.TextTag, _data: ?*anyopaque) callconv(.c) void;
/// Class [TextView](https://docs.gtk.org/gtk4/class.TextView.html)
/// - property [accepts-tab](https://docs.gtk.org/gtk4/property.TextView.accepts-tab.html): (rw) `bool`
/// - property [bottom-margin](https://docs.gtk.org/gtk4/property.TextView.bottom-margin.html): (rw) `i32`
/// - property [buffer](https://docs.gtk.org/gtk4/property.TextView.buffer.html): (rw) `gtk.TextBuffer`
/// - property [cursor-visible](https://docs.gtk.org/gtk4/property.TextView.cursor-visible.html): (rw) `bool`
/// - property [editable](https://docs.gtk.org/gtk4/property.TextView.editable.html): (rw) `bool`
/// - property [extra-menu](https://docs.gtk.org/gtk4/property.TextView.extra-menu.html): (rw) `gio.MenuModel`
/// - property [im-module](https://docs.gtk.org/gtk4/property.TextView.im-module.html): (rw) `[*:0]const u8`
/// - property [indent](https://docs.gtk.org/gtk4/property.TextView.indent.html): (rw) `i32`
/// - property [input-hints](https://docs.gtk.org/gtk4/property.TextView.input-hints.html): (rw) `gtk.InputHints`
/// - property [input-purpose](https://docs.gtk.org/gtk4/property.TextView.input-purpose.html): (rw) `gtk.InputPurpose`
/// - property [justification](https://docs.gtk.org/gtk4/property.TextView.justification.html): (rw) `gtk.Justification`
/// - property [left-margin](https://docs.gtk.org/gtk4/property.TextView.left-margin.html): (rw) `i32`
/// - property [monospace](https://docs.gtk.org/gtk4/property.TextView.monospace.html): (rw) `bool`
/// - property [overwrite](https://docs.gtk.org/gtk4/property.TextView.overwrite.html): (rw) `bool`
/// - property [pixels-above-lines](https://docs.gtk.org/gtk4/property.TextView.pixels-above-lines.html): (rw) `i32`
/// - property [pixels-below-lines](https://docs.gtk.org/gtk4/property.TextView.pixels-below-lines.html): (rw) `i32`
/// - property [pixels-inside-wrap](https://docs.gtk.org/gtk4/property.TextView.pixels-inside-wrap.html): (rw) `i32`
/// - property [right-margin](https://docs.gtk.org/gtk4/property.TextView.right-margin.html): (rw) `i32`
/// - property [tabs](https://docs.gtk.org/gtk4/property.TextView.tabs.html): (rw) `pango.TabArray`
/// - property [top-margin](https://docs.gtk.org/gtk4/property.TextView.top-margin.html): (rw) `i32`
/// - property [wrap-mode](https://docs.gtk.org/gtk4/property.TextView.wrap-mode.html): (rw) `gtk.WrapMode`
pub const TextView = extern struct {
    parent_instance: gtk.Widget,
    priv: ?*gtk.TextViewPrivate,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleText, gtk.Buildable, gtk.ConstraintTarget, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.TextViewClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TextView.new.html)
    pub fn new() *TextView {
        const cFn = @extern(*const fn () callconv(.c) *TextView, .{ .name = "gtk_text_view_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_buffer](https://docs.gtk.org/gtk4/ctor.TextView.new_with_buffer.html)
    pub fn newWithBuffer(_buffer: *gtk.TextBuffer) *TextView {
        const cFn = @extern(*const fn (*gtk.TextBuffer) callconv(.c) *TextView, .{ .name = "gtk_text_view_new_with_buffer" });
        const ret = cFn(_buffer);
        return ret;
    }
    /// method [add_child_at_anchor](https://docs.gtk.org/gtk4/method.TextView.add_child_at_anchor.html)
    pub fn addChildAtAnchor(self: *TextView, _child: *gtk.Widget, _anchor: *gtk.TextChildAnchor) void {
        const cFn = @extern(*const fn (*TextView, *gtk.Widget, *gtk.TextChildAnchor) callconv(.c) void, .{ .name = "gtk_text_view_add_child_at_anchor" });
        const ret = cFn(self, _child, _anchor);
        return ret;
    }
    /// method [add_overlay](https://docs.gtk.org/gtk4/method.TextView.add_overlay.html)
    pub fn addOverlay(self: *TextView, _child: *gtk.Widget, _xpos: i32, _ypos: i32) void {
        const cFn = @extern(*const fn (*TextView, *gtk.Widget, i32, i32) callconv(.c) void, .{ .name = "gtk_text_view_add_overlay" });
        const ret = cFn(self, _child, _xpos, _ypos);
        return ret;
    }
    /// method [backward_display_line](https://docs.gtk.org/gtk4/method.TextView.backward_display_line.html)
    pub fn backwardDisplayLine(self: *TextView, _iter: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_view_backward_display_line" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [backward_display_line_start](https://docs.gtk.org/gtk4/method.TextView.backward_display_line_start.html)
    pub fn backwardDisplayLineStart(self: *TextView, _iter: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_view_backward_display_line_start" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [buffer_to_window_coords](https://docs.gtk.org/gtk4/method.TextView.buffer_to_window_coords.html)
    pub fn bufferToWindowCoords(self: *TextView, _win: gtk.TextWindowType, _buffer_x: i32, _buffer_y: i32) struct {
        ret: void,
        window_x: i32,
        window_y: i32,
    } {
        var window_x_out: i32 = undefined;
        const _window_x = &window_x_out;
        var window_y_out: i32 = undefined;
        const _window_y = &window_y_out;
        const cFn = @extern(*const fn (*TextView, gtk.TextWindowType, i32, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_text_view_buffer_to_window_coords" });
        const ret = cFn(self, _win, _buffer_x, _buffer_y, _window_x, _window_y);
        return .{ .ret = ret, .window_x = window_x_out, .window_y = window_y_out };
    }
    /// method [forward_display_line](https://docs.gtk.org/gtk4/method.TextView.forward_display_line.html)
    pub fn forwardDisplayLine(self: *TextView, _iter: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_view_forward_display_line" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [forward_display_line_end](https://docs.gtk.org/gtk4/method.TextView.forward_display_line_end.html)
    pub fn forwardDisplayLineEnd(self: *TextView, _iter: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_view_forward_display_line_end" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [get_accepts_tab](https://docs.gtk.org/gtk4/method.TextView.get_accepts_tab.html)
    pub fn getAcceptsTab(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_get_accepts_tab" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_bottom_margin](https://docs.gtk.org/gtk4/method.TextView.get_bottom_margin.html)
    pub fn getBottomMargin(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_bottom_margin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_buffer](https://docs.gtk.org/gtk4/method.TextView.get_buffer.html)
    pub fn getBuffer(self: *TextView) *gtk.TextBuffer {
        const cFn = @extern(*const fn (*TextView) callconv(.c) *gtk.TextBuffer, .{ .name = "gtk_text_view_get_buffer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cursor_locations](https://docs.gtk.org/gtk4/method.TextView.get_cursor_locations.html)
    pub fn getCursorLocations(self: *TextView, _iter: ?*gtk.TextIter, _strong: ?*gdk.Rectangle, _weak: ?*gdk.Rectangle) void {
        const cFn = @extern(*const fn (*TextView, ?*gtk.TextIter, ?*gdk.Rectangle, ?*gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_text_view_get_cursor_locations" });
        const ret = cFn(self, _iter, _strong, _weak);
        return ret;
    }
    /// method [get_cursor_visible](https://docs.gtk.org/gtk4/method.TextView.get_cursor_visible.html)
    pub fn getCursorVisible(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_get_cursor_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_editable](https://docs.gtk.org/gtk4/method.TextView.get_editable.html)
    pub fn getEditable(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_get_editable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_extra_menu](https://docs.gtk.org/gtk4/method.TextView.get_extra_menu.html)
    pub fn getExtraMenu(self: *TextView) *gio.MenuModel {
        const cFn = @extern(*const fn (*TextView) callconv(.c) *gio.MenuModel, .{ .name = "gtk_text_view_get_extra_menu" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gutter](https://docs.gtk.org/gtk4/method.TextView.get_gutter.html)
    pub fn getGutter(self: *TextView, _win: gtk.TextWindowType) ?*gtk.Widget {
        const cFn = @extern(*const fn (*TextView, gtk.TextWindowType) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_text_view_get_gutter" });
        const ret = cFn(self, _win);
        return ret;
    }
    /// method [get_indent](https://docs.gtk.org/gtk4/method.TextView.get_indent.html)
    pub fn getIndent(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_indent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_hints](https://docs.gtk.org/gtk4/method.TextView.get_input_hints.html)
    pub fn getInputHints(self: *TextView) gtk.InputHints {
        const cFn = @extern(*const fn (*TextView) callconv(.c) gtk.InputHints, .{ .name = "gtk_text_view_get_input_hints" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_input_purpose](https://docs.gtk.org/gtk4/method.TextView.get_input_purpose.html)
    pub fn getInputPurpose(self: *TextView) gtk.InputPurpose {
        const cFn = @extern(*const fn (*TextView) callconv(.c) gtk.InputPurpose, .{ .name = "gtk_text_view_get_input_purpose" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_iter_at_location](https://docs.gtk.org/gtk4/method.TextView.get_iter_at_location.html)
    pub fn getIterAtLocation(self: *TextView, _iter: *gtk.TextIter, _x: i32, _y: i32) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, i32, i32) callconv(.c) bool, .{ .name = "gtk_text_view_get_iter_at_location" });
        const ret = cFn(self, _iter, _x, _y);
        return ret;
    }
    /// method [get_iter_at_position](https://docs.gtk.org/gtk4/method.TextView.get_iter_at_position.html)
    pub fn getIterAtPosition(self: *TextView, _iter: *gtk.TextIter, _x: i32, _y: i32) ?i32 {
        var trailing_out: i32 = undefined;
        const _trailing = &trailing_out;
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, ?*i32, i32, i32) callconv(.c) bool, .{ .name = "gtk_text_view_get_iter_at_position" });
        const ret = cFn(self, _iter, _trailing, _x, _y);
        if (!ret) return null;
        return trailing_out;
    }
    /// method [get_iter_location](https://docs.gtk.org/gtk4/method.TextView.get_iter_location.html)
    pub fn getIterLocation(self: *TextView, _iter: *gtk.TextIter, _location: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_text_view_get_iter_location" });
        const ret = cFn(self, _iter, _location);
        return ret;
    }
    /// method [get_justification](https://docs.gtk.org/gtk4/method.TextView.get_justification.html)
    pub fn getJustification(self: *TextView) gtk.Justification {
        const cFn = @extern(*const fn (*TextView) callconv(.c) gtk.Justification, .{ .name = "gtk_text_view_get_justification" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_left_margin](https://docs.gtk.org/gtk4/method.TextView.get_left_margin.html)
    pub fn getLeftMargin(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_left_margin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_line_at_y](https://docs.gtk.org/gtk4/method.TextView.get_line_at_y.html)
    pub fn getLineAtY(self: *TextView, _target_iter: *gtk.TextIter, _y: i32) struct {
        ret: void,
        line_top: i32,
    } {
        var line_top_out: i32 = undefined;
        const _line_top = &line_top_out;
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, i32, *i32) callconv(.c) void, .{ .name = "gtk_text_view_get_line_at_y" });
        const ret = cFn(self, _target_iter, _y, _line_top);
        return .{ .ret = ret, .line_top = line_top_out };
    }
    /// method [get_line_yrange](https://docs.gtk.org/gtk4/method.TextView.get_line_yrange.html)
    pub fn getLineYrange(self: *TextView, _iter: *gtk.TextIter) struct {
        ret: void,
        y: i32,
        height: i32,
    } {
        var y_out: i32 = undefined;
        const _y = &y_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, *i32, *i32) callconv(.c) void, .{ .name = "gtk_text_view_get_line_yrange" });
        const ret = cFn(self, _iter, _y, _height);
        return .{ .ret = ret, .y = y_out, .height = height_out };
    }
    /// method [get_ltr_context](https://docs.gtk.org/gtk4/method.TextView.get_ltr_context.html)
    pub fn getLtrContext(self: *TextView) *pango.Context {
        const cFn = @extern(*const fn (*TextView) callconv(.c) *pango.Context, .{ .name = "gtk_text_view_get_ltr_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_monospace](https://docs.gtk.org/gtk4/method.TextView.get_monospace.html)
    pub fn getMonospace(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_get_monospace" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_overwrite](https://docs.gtk.org/gtk4/method.TextView.get_overwrite.html)
    pub fn getOverwrite(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_get_overwrite" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixels_above_lines](https://docs.gtk.org/gtk4/method.TextView.get_pixels_above_lines.html)
    pub fn getPixelsAboveLines(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_pixels_above_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixels_below_lines](https://docs.gtk.org/gtk4/method.TextView.get_pixels_below_lines.html)
    pub fn getPixelsBelowLines(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_pixels_below_lines" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pixels_inside_wrap](https://docs.gtk.org/gtk4/method.TextView.get_pixels_inside_wrap.html)
    pub fn getPixelsInsideWrap(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_pixels_inside_wrap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_right_margin](https://docs.gtk.org/gtk4/method.TextView.get_right_margin.html)
    pub fn getRightMargin(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_right_margin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_rtl_context](https://docs.gtk.org/gtk4/method.TextView.get_rtl_context.html)
    pub fn getRtlContext(self: *TextView) *pango.Context {
        const cFn = @extern(*const fn (*TextView) callconv(.c) *pango.Context, .{ .name = "gtk_text_view_get_rtl_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tabs](https://docs.gtk.org/gtk4/method.TextView.get_tabs.html)
    pub fn getTabs(self: *TextView) ?*pango.TabArray {
        const cFn = @extern(*const fn (*TextView) callconv(.c) ?*pango.TabArray, .{ .name = "gtk_text_view_get_tabs" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_top_margin](https://docs.gtk.org/gtk4/method.TextView.get_top_margin.html)
    pub fn getTopMargin(self: *TextView) i32 {
        const cFn = @extern(*const fn (*TextView) callconv(.c) i32, .{ .name = "gtk_text_view_get_top_margin" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible_rect](https://docs.gtk.org/gtk4/method.TextView.get_visible_rect.html)
    pub fn getVisibleRect(self: *TextView, _visible_rect: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*TextView, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_text_view_get_visible_rect" });
        const ret = cFn(self, _visible_rect);
        return ret;
    }
    /// method [get_wrap_mode](https://docs.gtk.org/gtk4/method.TextView.get_wrap_mode.html)
    pub fn getWrapMode(self: *TextView) gtk.WrapMode {
        const cFn = @extern(*const fn (*TextView) callconv(.c) gtk.WrapMode, .{ .name = "gtk_text_view_get_wrap_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [im_context_filter_keypress](https://docs.gtk.org/gtk4/method.TextView.im_context_filter_keypress.html)
    pub fn imContextFilterKeypress(self: *TextView, _event: *gdk.Event) bool {
        const cFn = @extern(*const fn (*TextView, *gdk.Event) callconv(.c) bool, .{ .name = "gtk_text_view_im_context_filter_keypress" });
        const ret = cFn(self, _event);
        return ret;
    }
    /// method [move_mark_onscreen](https://docs.gtk.org/gtk4/method.TextView.move_mark_onscreen.html)
    pub fn moveMarkOnscreen(self: *TextView, _mark: *gtk.TextMark) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextMark) callconv(.c) bool, .{ .name = "gtk_text_view_move_mark_onscreen" });
        const ret = cFn(self, _mark);
        return ret;
    }
    /// method [move_overlay](https://docs.gtk.org/gtk4/method.TextView.move_overlay.html)
    pub fn moveOverlay(self: *TextView, _child: *gtk.Widget, _xpos: i32, _ypos: i32) void {
        const cFn = @extern(*const fn (*TextView, *gtk.Widget, i32, i32) callconv(.c) void, .{ .name = "gtk_text_view_move_overlay" });
        const ret = cFn(self, _child, _xpos, _ypos);
        return ret;
    }
    /// method [move_visually](https://docs.gtk.org/gtk4/method.TextView.move_visually.html)
    pub fn moveVisually(self: *TextView, _iter: *gtk.TextIter, _count: i32) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, i32) callconv(.c) bool, .{ .name = "gtk_text_view_move_visually" });
        const ret = cFn(self, _iter, _count);
        return ret;
    }
    /// method [place_cursor_onscreen](https://docs.gtk.org/gtk4/method.TextView.place_cursor_onscreen.html)
    pub fn placeCursorOnscreen(self: *TextView) bool {
        const cFn = @extern(*const fn (*TextView) callconv(.c) bool, .{ .name = "gtk_text_view_place_cursor_onscreen" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gtk4/method.TextView.remove.html)
    pub fn remove(self: *TextView, _child: *gtk.Widget) void {
        const cFn = @extern(*const fn (*TextView, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_text_view_remove" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [reset_cursor_blink](https://docs.gtk.org/gtk4/method.TextView.reset_cursor_blink.html)
    pub fn resetCursorBlink(self: *TextView) void {
        const cFn = @extern(*const fn (*TextView) callconv(.c) void, .{ .name = "gtk_text_view_reset_cursor_blink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset_im_context](https://docs.gtk.org/gtk4/method.TextView.reset_im_context.html)
    pub fn resetImContext(self: *TextView) void {
        const cFn = @extern(*const fn (*TextView) callconv(.c) void, .{ .name = "gtk_text_view_reset_im_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scroll_mark_onscreen](https://docs.gtk.org/gtk4/method.TextView.scroll_mark_onscreen.html)
    pub fn scrollMarkOnscreen(self: *TextView, _mark: *gtk.TextMark) void {
        const cFn = @extern(*const fn (*TextView, *gtk.TextMark) callconv(.c) void, .{ .name = "gtk_text_view_scroll_mark_onscreen" });
        const ret = cFn(self, _mark);
        return ret;
    }
    /// method [scroll_to_iter](https://docs.gtk.org/gtk4/method.TextView.scroll_to_iter.html)
    pub fn scrollToIter(self: *TextView, _iter: *gtk.TextIter, _within_margin: f64, _use_align: bool, _xalign: f64, _yalign: f64) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter, f64, bool, f64, f64) callconv(.c) bool, .{ .name = "gtk_text_view_scroll_to_iter" });
        const ret = cFn(self, _iter, _within_margin, _use_align, _xalign, _yalign);
        return ret;
    }
    /// method [scroll_to_mark](https://docs.gtk.org/gtk4/method.TextView.scroll_to_mark.html)
    pub fn scrollToMark(self: *TextView, _mark: *gtk.TextMark, _within_margin: f64, _use_align: bool, _xalign: f64, _yalign: f64) void {
        const cFn = @extern(*const fn (*TextView, *gtk.TextMark, f64, bool, f64, f64) callconv(.c) void, .{ .name = "gtk_text_view_scroll_to_mark" });
        const ret = cFn(self, _mark, _within_margin, _use_align, _xalign, _yalign);
        return ret;
    }
    /// method [set_accepts_tab](https://docs.gtk.org/gtk4/method.TextView.set_accepts_tab.html)
    pub fn setAcceptsTab(self: *TextView, _accepts_tab: bool) void {
        const cFn = @extern(*const fn (*TextView, bool) callconv(.c) void, .{ .name = "gtk_text_view_set_accepts_tab" });
        const ret = cFn(self, _accepts_tab);
        return ret;
    }
    /// method [set_bottom_margin](https://docs.gtk.org/gtk4/method.TextView.set_bottom_margin.html)
    pub fn setBottomMargin(self: *TextView, _bottom_margin: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_bottom_margin" });
        const ret = cFn(self, _bottom_margin);
        return ret;
    }
    /// method [set_buffer](https://docs.gtk.org/gtk4/method.TextView.set_buffer.html)
    pub fn setBuffer(self: *TextView, _buffer: ?*gtk.TextBuffer) void {
        const cFn = @extern(*const fn (*TextView, ?*gtk.TextBuffer) callconv(.c) void, .{ .name = "gtk_text_view_set_buffer" });
        const ret = cFn(self, _buffer);
        return ret;
    }
    /// method [set_cursor_visible](https://docs.gtk.org/gtk4/method.TextView.set_cursor_visible.html)
    pub fn setCursorVisible(self: *TextView, _setting: bool) void {
        const cFn = @extern(*const fn (*TextView, bool) callconv(.c) void, .{ .name = "gtk_text_view_set_cursor_visible" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_editable](https://docs.gtk.org/gtk4/method.TextView.set_editable.html)
    pub fn setEditable(self: *TextView, _setting: bool) void {
        const cFn = @extern(*const fn (*TextView, bool) callconv(.c) void, .{ .name = "gtk_text_view_set_editable" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_extra_menu](https://docs.gtk.org/gtk4/method.TextView.set_extra_menu.html)
    pub fn setExtraMenu(self: *TextView, _model: ?*gio.MenuModel) void {
        const cFn = @extern(*const fn (*TextView, ?*gio.MenuModel) callconv(.c) void, .{ .name = "gtk_text_view_set_extra_menu" });
        const ret = cFn(self, _model);
        return ret;
    }
    /// method [set_gutter](https://docs.gtk.org/gtk4/method.TextView.set_gutter.html)
    pub fn setGutter(self: *TextView, _win: gtk.TextWindowType, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*TextView, gtk.TextWindowType, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_text_view_set_gutter" });
        const ret = cFn(self, _win, _widget);
        return ret;
    }
    /// method [set_indent](https://docs.gtk.org/gtk4/method.TextView.set_indent.html)
    pub fn setIndent(self: *TextView, _indent: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_indent" });
        const ret = cFn(self, _indent);
        return ret;
    }
    /// method [set_input_hints](https://docs.gtk.org/gtk4/method.TextView.set_input_hints.html)
    pub fn setInputHints(self: *TextView, _hints: gtk.InputHints) void {
        const cFn = @extern(*const fn (*TextView, gtk.InputHints) callconv(.c) void, .{ .name = "gtk_text_view_set_input_hints" });
        const ret = cFn(self, _hints);
        return ret;
    }
    /// method [set_input_purpose](https://docs.gtk.org/gtk4/method.TextView.set_input_purpose.html)
    pub fn setInputPurpose(self: *TextView, _purpose: gtk.InputPurpose) void {
        const cFn = @extern(*const fn (*TextView, gtk.InputPurpose) callconv(.c) void, .{ .name = "gtk_text_view_set_input_purpose" });
        const ret = cFn(self, _purpose);
        return ret;
    }
    /// method [set_justification](https://docs.gtk.org/gtk4/method.TextView.set_justification.html)
    pub fn setJustification(self: *TextView, _justification: gtk.Justification) void {
        const cFn = @extern(*const fn (*TextView, gtk.Justification) callconv(.c) void, .{ .name = "gtk_text_view_set_justification" });
        const ret = cFn(self, _justification);
        return ret;
    }
    /// method [set_left_margin](https://docs.gtk.org/gtk4/method.TextView.set_left_margin.html)
    pub fn setLeftMargin(self: *TextView, _left_margin: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_left_margin" });
        const ret = cFn(self, _left_margin);
        return ret;
    }
    /// method [set_monospace](https://docs.gtk.org/gtk4/method.TextView.set_monospace.html)
    pub fn setMonospace(self: *TextView, _monospace: bool) void {
        const cFn = @extern(*const fn (*TextView, bool) callconv(.c) void, .{ .name = "gtk_text_view_set_monospace" });
        const ret = cFn(self, _monospace);
        return ret;
    }
    /// method [set_overwrite](https://docs.gtk.org/gtk4/method.TextView.set_overwrite.html)
    pub fn setOverwrite(self: *TextView, _overwrite: bool) void {
        const cFn = @extern(*const fn (*TextView, bool) callconv(.c) void, .{ .name = "gtk_text_view_set_overwrite" });
        const ret = cFn(self, _overwrite);
        return ret;
    }
    /// method [set_pixels_above_lines](https://docs.gtk.org/gtk4/method.TextView.set_pixels_above_lines.html)
    pub fn setPixelsAboveLines(self: *TextView, _pixels_above_lines: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_pixels_above_lines" });
        const ret = cFn(self, _pixels_above_lines);
        return ret;
    }
    /// method [set_pixels_below_lines](https://docs.gtk.org/gtk4/method.TextView.set_pixels_below_lines.html)
    pub fn setPixelsBelowLines(self: *TextView, _pixels_below_lines: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_pixels_below_lines" });
        const ret = cFn(self, _pixels_below_lines);
        return ret;
    }
    /// method [set_pixels_inside_wrap](https://docs.gtk.org/gtk4/method.TextView.set_pixels_inside_wrap.html)
    pub fn setPixelsInsideWrap(self: *TextView, _pixels_inside_wrap: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_pixels_inside_wrap" });
        const ret = cFn(self, _pixels_inside_wrap);
        return ret;
    }
    /// method [set_right_margin](https://docs.gtk.org/gtk4/method.TextView.set_right_margin.html)
    pub fn setRightMargin(self: *TextView, _right_margin: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_right_margin" });
        const ret = cFn(self, _right_margin);
        return ret;
    }
    /// method [set_tabs](https://docs.gtk.org/gtk4/method.TextView.set_tabs.html)
    pub fn setTabs(self: *TextView, _tabs: *pango.TabArray) void {
        const cFn = @extern(*const fn (*TextView, *pango.TabArray) callconv(.c) void, .{ .name = "gtk_text_view_set_tabs" });
        const ret = cFn(self, _tabs);
        return ret;
    }
    /// method [set_top_margin](https://docs.gtk.org/gtk4/method.TextView.set_top_margin.html)
    pub fn setTopMargin(self: *TextView, _top_margin: i32) void {
        const cFn = @extern(*const fn (*TextView, i32) callconv(.c) void, .{ .name = "gtk_text_view_set_top_margin" });
        const ret = cFn(self, _top_margin);
        return ret;
    }
    /// method [set_wrap_mode](https://docs.gtk.org/gtk4/method.TextView.set_wrap_mode.html)
    pub fn setWrapMode(self: *TextView, _wrap_mode: gtk.WrapMode) void {
        const cFn = @extern(*const fn (*TextView, gtk.WrapMode) callconv(.c) void, .{ .name = "gtk_text_view_set_wrap_mode" });
        const ret = cFn(self, _wrap_mode);
        return ret;
    }
    /// method [starts_display_line](https://docs.gtk.org/gtk4/method.TextView.starts_display_line.html)
    pub fn startsDisplayLine(self: *TextView, _iter: *gtk.TextIter) bool {
        const cFn = @extern(*const fn (*TextView, *gtk.TextIter) callconv(.c) bool, .{ .name = "gtk_text_view_starts_display_line" });
        const ret = cFn(self, _iter);
        return ret;
    }
    /// method [window_to_buffer_coords](https://docs.gtk.org/gtk4/method.TextView.window_to_buffer_coords.html)
    pub fn windowToBufferCoords(self: *TextView, _win: gtk.TextWindowType, _window_x: i32, _window_y: i32) struct {
        ret: void,
        buffer_x: i32,
        buffer_y: i32,
    } {
        var buffer_x_out: i32 = undefined;
        const _buffer_x = &buffer_x_out;
        var buffer_y_out: i32 = undefined;
        const _buffer_y = &buffer_y_out;
        const cFn = @extern(*const fn (*TextView, gtk.TextWindowType, i32, i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_text_view_window_to_buffer_coords" });
        const ret = cFn(self, _win, _window_x, _window_y, _buffer_x, _buffer_y);
        return .{ .ret = ret, .buffer_x = buffer_x_out, .buffer_y = buffer_y_out };
    }
    /// vfunc [backspace](https://docs.gtk.org/gtk4/vfunc.TextView.backspace.html)
    pub fn backspaceV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.backspace.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [copy_clipboard](https://docs.gtk.org/gtk4/vfunc.TextView.copy_clipboard.html)
    pub fn copyClipboardV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.copy_clipboard.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [cut_clipboard](https://docs.gtk.org/gtk4/vfunc.TextView.cut_clipboard.html)
    pub fn cutClipboardV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.cut_clipboard.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [delete_from_cursor](https://docs.gtk.org/gtk4/vfunc.TextView.delete_from_cursor.html)
    pub fn deleteFromCursorV(self: *TextView, _type: gtk.DeleteType, _count: i32) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.delete_from_cursor.?;
        const ret = vFn(self, _type, _count);
        return ret;
    }
    /// vfunc [extend_selection](https://docs.gtk.org/gtk4/vfunc.TextView.extend_selection.html)
    pub fn extendSelectionV(self: *TextView, _granularity: gtk.TextExtendSelection, _location: *gtk.TextIter, _start: *gtk.TextIter, _end: *gtk.TextIter) bool {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.extend_selection.?;
        const ret = vFn(self, _granularity, _location, _start, _end);
        return ret;
    }
    /// vfunc [insert_at_cursor](https://docs.gtk.org/gtk4/vfunc.TextView.insert_at_cursor.html)
    pub fn insertAtCursorV(self: *TextView, _str: [*:0]const u8) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_at_cursor.?;
        const ret = vFn(self, _str);
        return ret;
    }
    /// vfunc [insert_emoji](https://docs.gtk.org/gtk4/vfunc.TextView.insert_emoji.html)
    pub fn insertEmojiV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.insert_emoji.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [move_cursor](https://docs.gtk.org/gtk4/vfunc.TextView.move_cursor.html)
    pub fn moveCursorV(self: *TextView, _step: gtk.MovementStep, _count: i32, _extend_selection: bool) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_cursor.?;
        const ret = vFn(self, _step, _count, _extend_selection);
        return ret;
    }
    /// vfunc [paste_clipboard](https://docs.gtk.org/gtk4/vfunc.TextView.paste_clipboard.html)
    pub fn pasteClipboardV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.paste_clipboard.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_anchor](https://docs.gtk.org/gtk4/vfunc.TextView.set_anchor.html)
    pub fn setAnchorV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_anchor.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [snapshot_layer](https://docs.gtk.org/gtk4/vfunc.TextView.snapshot_layer.html)
    pub fn snapshotLayerV(self: *TextView, _layer: gtk.TextViewLayer, _snapshot: *gtk.Snapshot) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot_layer.?;
        const ret = vFn(self, _layer, _snapshot);
        return ret;
    }
    /// vfunc [toggle_overwrite](https://docs.gtk.org/gtk4/vfunc.TextView.toggle_overwrite.html)
    pub fn toggleOverwriteV(self: *TextView) void {
        const class: *TextViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.toggle_overwrite.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [backspace](https://docs.gtk.org/gtk4/signal.TextView.backspace.html)
    pub fn connectBackspace(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("backspace", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [copy-clipboard](https://docs.gtk.org/gtk4/signal.TextView.copy-clipboard.html)
    pub fn connectCopyClipboard(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("copy-clipboard", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [cut-clipboard](https://docs.gtk.org/gtk4/signal.TextView.cut-clipboard.html)
    pub fn connectCutClipboard(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cut-clipboard", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [delete-from-cursor](https://docs.gtk.org/gtk4/signal.TextView.delete-from-cursor.html)
    pub fn connectDeleteFromCursor(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("delete-from-cursor", handler, args, flags, &.{ void, *TextView, gtk.DeleteType, i32 });
    }
    /// signal [extend-selection](https://docs.gtk.org/gtk4/signal.TextView.extend-selection.html)
    pub fn connectExtendSelection(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("extend-selection", handler, args, flags, &.{ bool, *TextView, gtk.TextExtendSelection, *gtk.TextIter, *gtk.TextIter, *gtk.TextIter });
    }
    /// signal [insert-at-cursor](https://docs.gtk.org/gtk4/signal.TextView.insert-at-cursor.html)
    pub fn connectInsertAtCursor(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-at-cursor", handler, args, flags, &.{ void, *TextView, [*:0]const u8 });
    }
    /// signal [insert-emoji](https://docs.gtk.org/gtk4/signal.TextView.insert-emoji.html)
    pub fn connectInsertEmoji(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("insert-emoji", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.TextView.move-cursor.html)
    pub fn connectMoveCursor(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ void, *TextView, gtk.MovementStep, i32, bool });
    }
    /// signal [move-viewport](https://docs.gtk.org/gtk4/signal.TextView.move-viewport.html)
    pub fn connectMoveViewport(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-viewport", handler, args, flags, &.{ void, *TextView, gtk.ScrollStep, i32 });
    }
    /// signal [paste-clipboard](https://docs.gtk.org/gtk4/signal.TextView.paste-clipboard.html)
    pub fn connectPasteClipboard(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("paste-clipboard", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [preedit-changed](https://docs.gtk.org/gtk4/signal.TextView.preedit-changed.html)
    pub fn connectPreeditChanged(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("preedit-changed", handler, args, flags, &.{ void, *TextView, [*:0]const u8 });
    }
    /// signal [select-all](https://docs.gtk.org/gtk4/signal.TextView.select-all.html)
    pub fn connectSelectAll(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-all", handler, args, flags, &.{ void, *TextView, bool });
    }
    /// signal [set-anchor](https://docs.gtk.org/gtk4/signal.TextView.set-anchor.html)
    pub fn connectSetAnchor(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("set-anchor", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [toggle-cursor-visible](https://docs.gtk.org/gtk4/signal.TextView.toggle-cursor-visible.html)
    pub fn connectToggleCursorVisible(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-cursor-visible", handler, args, flags, &.{ void, *TextView });
    }
    /// signal [toggle-overwrite](https://docs.gtk.org/gtk4/signal.TextView.toggle-overwrite.html)
    pub fn connectToggleOverwrite(self: *TextView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-overwrite", handler, args, flags, &.{ void, *TextView });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_view_get_type" });
        return cFn();
    }
};
pub const TextViewClass = extern struct {
    parent_class: gtk.WidgetClass,
    move_cursor: ?*const fn (_text_view: *gtk.TextView, _step: gtk.MovementStep, _count: i32, _extend_selection: bool) callconv(.c) void,
    set_anchor: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    insert_at_cursor: ?*const fn (_text_view: *gtk.TextView, _str: [*:0]const u8) callconv(.c) void,
    delete_from_cursor: ?*const fn (_text_view: *gtk.TextView, _type: gtk.DeleteType, _count: i32) callconv(.c) void,
    backspace: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    cut_clipboard: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    copy_clipboard: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    paste_clipboard: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    toggle_overwrite: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    create_buffer: ?*anyopaque,
    snapshot_layer: ?*const fn (_text_view: *gtk.TextView, _layer: gtk.TextViewLayer, _snapshot: *gtk.Snapshot) callconv(.c) void,
    extend_selection: ?*const fn (_text_view: *gtk.TextView, _granularity: gtk.TextExtendSelection, _location: *gtk.TextIter, _start: *gtk.TextIter, _end: *gtk.TextIter) callconv(.c) bool,
    insert_emoji: ?*const fn (_text_view: *gtk.TextView) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Enum [TextViewLayer](https://docs.gtk.org/gtk4/enum.TextViewLayer.html)
pub const TextViewLayer = enum(u32) {
    below_text = 0,
    above_text = 1,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_view_layer_get_type" });
        return cFn();
    }
};
pub const TextViewPrivate = opaque {};
/// Enum [TextWindowType](https://docs.gtk.org/gtk4/enum.TextWindowType.html)
pub const TextWindowType = enum(u32) {
    widget = 1,
    text = 2,
    left = 3,
    right = 4,
    top = 5,
    bottom = 6,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_text_window_type_get_type" });
        return cFn();
    }
};
/// callback [TickCallback](https://docs.gtk.org/gtk4/callback.TickCallback.html)
pub const TickCallback = *const fn (_widget: *gtk.Widget, _frame_clock: *gdk.FrameClock, _user_data: ?*anyopaque) callconv(.c) bool;
/// Class [ToggleButton](https://docs.gtk.org/gtk4/class.ToggleButton.html)
/// - property [active](https://docs.gtk.org/gtk4/property.ToggleButton.active.html): (rw) `bool`
/// - property [group](https://docs.gtk.org/gtk4/property.ToggleButton.group.html): (-w) `gtk.ToggleButton`
pub const ToggleButton = extern struct {
    button: gtk.Button,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Actionable, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Button;
    pub const Class = gtk.ToggleButtonClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.ToggleButton.new.html)
    pub fn new() *ToggleButton {
        const cFn = @extern(*const fn () callconv(.c) *ToggleButton, .{ .name = "gtk_toggle_button_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_with_label](https://docs.gtk.org/gtk4/ctor.ToggleButton.new_with_label.html)
    pub fn newWithLabel(_label: [*:0]const u8) *ToggleButton {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *ToggleButton, .{ .name = "gtk_toggle_button_new_with_label" });
        const ret = cFn(_label);
        return ret;
    }
    /// ctor [new_with_mnemonic](https://docs.gtk.org/gtk4/ctor.ToggleButton.new_with_mnemonic.html)
    pub fn newWithMnemonic(_label: [*:0]const u8) *ToggleButton {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) *ToggleButton, .{ .name = "gtk_toggle_button_new_with_mnemonic" });
        const ret = cFn(_label);
        return ret;
    }
    /// method [get_active](https://docs.gtk.org/gtk4/method.ToggleButton.get_active.html)
    pub fn getActive(self: *ToggleButton) bool {
        const cFn = @extern(*const fn (*ToggleButton) callconv(.c) bool, .{ .name = "gtk_toggle_button_get_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_active](https://docs.gtk.org/gtk4/method.ToggleButton.set_active.html)
    pub fn setActive(self: *ToggleButton, _is_active: bool) void {
        const cFn = @extern(*const fn (*ToggleButton, bool) callconv(.c) void, .{ .name = "gtk_toggle_button_set_active" });
        const ret = cFn(self, _is_active);
        return ret;
    }
    /// method [set_group](https://docs.gtk.org/gtk4/method.ToggleButton.set_group.html)
    pub fn setGroup(self: *ToggleButton, _group: ?*gtk.ToggleButton) void {
        const cFn = @extern(*const fn (*ToggleButton, ?*gtk.ToggleButton) callconv(.c) void, .{ .name = "gtk_toggle_button_set_group" });
        const ret = cFn(self, _group);
        return ret;
    }
    /// Deprecated:
    /// method [toggled](https://docs.gtk.org/gtk4/method.ToggleButton.toggled.html)
    pub const toggled = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toggled(self: *ToggleButton) void {
            const cFn = @extern(*const fn (*ToggleButton) callconv(.c) void, .{ .name = "gtk_toggle_button_toggled" });
            const ret = cFn(self);
            return ret;
        }
    }.toggled;
    /// vfunc [toggled](https://docs.gtk.org/gtk4/vfunc.ToggleButton.toggled.html)
    pub fn toggledV(self: *ToggleButton) void {
        const class: *ToggleButtonClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.toggled.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [toggled](https://docs.gtk.org/gtk4/signal.ToggleButton.toggled.html)
    pub fn connectToggled(self: *ToggleButton, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggled", handler, args, flags, &.{ void, *ToggleButton });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_toggle_button_get_type" });
        return cFn();
    }
};
pub const ToggleButtonClass = extern struct {
    parent_class: gtk.ButtonClass,
    toggled: ?*const fn (_toggle_button: *gtk.ToggleButton) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// Class [Tooltip](https://docs.gtk.org/gtk4/class.Tooltip.html)
pub const Tooltip = opaque {
    pub const Parent = gobject.Object;
    /// method [set_custom](https://docs.gtk.org/gtk4/method.Tooltip.set_custom.html)
    pub fn setCustom(self: *Tooltip, _custom_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Tooltip, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_tooltip_set_custom" });
        const ret = cFn(self, _custom_widget);
        return ret;
    }
    /// method [set_icon](https://docs.gtk.org/gtk4/method.Tooltip.set_icon.html)
    pub fn setIcon(self: *Tooltip, _paintable: ?*gdk.Paintable) void {
        const cFn = @extern(*const fn (*Tooltip, ?*gdk.Paintable) callconv(.c) void, .{ .name = "gtk_tooltip_set_icon" });
        const ret = cFn(self, _paintable);
        return ret;
    }
    /// method [set_icon_from_gicon](https://docs.gtk.org/gtk4/method.Tooltip.set_icon_from_gicon.html)
    pub fn setIconFromGicon(self: *Tooltip, _gicon: ?*gio.Icon) void {
        const cFn = @extern(*const fn (*Tooltip, ?*gio.Icon) callconv(.c) void, .{ .name = "gtk_tooltip_set_icon_from_gicon" });
        const ret = cFn(self, _gicon);
        return ret;
    }
    /// method [set_icon_from_icon_name](https://docs.gtk.org/gtk4/method.Tooltip.set_icon_from_icon_name.html)
    pub fn setIconFromIconName(self: *Tooltip, _icon_name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Tooltip, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_tooltip_set_icon_from_icon_name" });
        const ret = cFn(self, _icon_name);
        return ret;
    }
    /// method [set_markup](https://docs.gtk.org/gtk4/method.Tooltip.set_markup.html)
    pub fn setMarkup(self: *Tooltip, _markup: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Tooltip, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_tooltip_set_markup" });
        const ret = cFn(self, _markup);
        return ret;
    }
    /// method [set_text](https://docs.gtk.org/gtk4/method.Tooltip.set_text.html)
    pub fn setText(self: *Tooltip, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Tooltip, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_tooltip_set_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_tip_area](https://docs.gtk.org/gtk4/method.Tooltip.set_tip_area.html)
    pub fn setTipArea(self: *Tooltip, _rect: *gdk.Rectangle) void {
        const cFn = @extern(*const fn (*Tooltip, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_tooltip_set_tip_area" });
        const ret = cFn(self, _rect);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tooltip_get_type" });
        return cFn();
    }
};
/// callback [TreeCellDataFunc](https://docs.gtk.org/gtk4/callback.TreeCellDataFunc.html)
pub const TreeCellDataFunc = *const fn (_tree_column: *gtk.TreeViewColumn, _cell: *gtk.CellRenderer, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) void;
/// Deprecated:
/// Iface [TreeDragDest](https://docs.gtk.org/gtk4/iface.TreeDragDest.html)
pub const TreeDragDest = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [drag_data_received](https://docs.gtk.org/gtk4/method.TreeDragDest.drag_data_received.html)
    pub const dragDataReceived = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn dragDataReceived(self: *TreeDragDest, _dest: *gtk.TreePath, _value: *gobject.Value) bool {
            const cFn = @extern(*const fn (*TreeDragDest, *gtk.TreePath, *gobject.Value) callconv(.c) bool, .{ .name = "gtk_tree_drag_dest_drag_data_received" });
            const ret = cFn(self, _dest, _value);
            return ret;
        }
    }.dragDataReceived;
    /// Deprecated:
    /// method [row_drop_possible](https://docs.gtk.org/gtk4/method.TreeDragDest.row_drop_possible.html)
    pub const rowDropPossible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowDropPossible(self: *TreeDragDest, _dest_path: *gtk.TreePath, _value: *gobject.Value) bool {
            const cFn = @extern(*const fn (*TreeDragDest, *gtk.TreePath, *gobject.Value) callconv(.c) bool, .{ .name = "gtk_tree_drag_dest_row_drop_possible" });
            const ret = cFn(self, _dest_path, _value);
            return ret;
        }
    }.rowDropPossible;
    /// vfunc [drag_data_received](https://docs.gtk.org/gtk4/vfunc.TreeDragDest.drag_data_received.html)
    pub fn dragDataReceivedV(self: *TreeDragDest, _dest: *gtk.TreePath, _value: *gobject.Value) bool {
        const class: *TreeDragDestIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drag_data_received.?;
        const ret = vFn(self, _dest, _value);
        return ret;
    }
    /// vfunc [row_drop_possible](https://docs.gtk.org/gtk4/vfunc.TreeDragDest.row_drop_possible.html)
    pub fn rowDropPossibleV(self: *TreeDragDest, _dest_path: *gtk.TreePath, _value: *gobject.Value) bool {
        const class: *TreeDragDestIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_drop_possible.?;
        const ret = vFn(self, _dest_path, _value);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_drag_dest_get_type" });
        return cFn();
    }
};
/// Struct [TreeDragDestIface](https://docs.gtk.org/gtk4/struct.TreeDragDestIface.html)
pub const TreeDragDestIface = extern struct {
    g_iface: gobject.TypeInterface,
    drag_data_received: ?*const fn (_drag_dest: *gtk.TreeDragDest, _dest: *gtk.TreePath, _value: *gobject.Value) callconv(.c) bool,
    row_drop_possible: ?*const fn (_drag_dest: *gtk.TreeDragDest, _dest_path: *gtk.TreePath, _value: *gobject.Value) callconv(.c) bool,
};
/// Deprecated:
/// Iface [TreeDragSource](https://docs.gtk.org/gtk4/iface.TreeDragSource.html)
pub const TreeDragSource = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [drag_data_delete](https://docs.gtk.org/gtk4/method.TreeDragSource.drag_data_delete.html)
    pub const dragDataDelete = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn dragDataDelete(self: *TreeDragSource, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeDragSource, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_drag_source_drag_data_delete" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.dragDataDelete;
    /// Deprecated:
    /// method [drag_data_get](https://docs.gtk.org/gtk4/method.TreeDragSource.drag_data_get.html)
    pub const dragDataGet = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn dragDataGet(self: *TreeDragSource, _path: *gtk.TreePath) ?*gdk.ContentProvider {
            const cFn = @extern(*const fn (*TreeDragSource, *gtk.TreePath) callconv(.c) ?*gdk.ContentProvider, .{ .name = "gtk_tree_drag_source_drag_data_get" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.dragDataGet;
    /// Deprecated:
    /// method [row_draggable](https://docs.gtk.org/gtk4/method.TreeDragSource.row_draggable.html)
    pub const rowDraggable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowDraggable(self: *TreeDragSource, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeDragSource, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_drag_source_row_draggable" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.rowDraggable;
    /// vfunc [drag_data_delete](https://docs.gtk.org/gtk4/vfunc.TreeDragSource.drag_data_delete.html)
    pub fn dragDataDeleteV(self: *TreeDragSource, _path: *gtk.TreePath) bool {
        const class: *TreeDragSourceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drag_data_delete.?;
        const ret = vFn(self, _path);
        return ret;
    }
    /// vfunc [drag_data_get](https://docs.gtk.org/gtk4/vfunc.TreeDragSource.drag_data_get.html)
    pub fn dragDataGetV(self: *TreeDragSource, _path: *gtk.TreePath) ?*gdk.ContentProvider {
        const class: *TreeDragSourceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.drag_data_get.?;
        const ret = vFn(self, _path);
        return ret;
    }
    /// vfunc [row_draggable](https://docs.gtk.org/gtk4/vfunc.TreeDragSource.row_draggable.html)
    pub fn rowDraggableV(self: *TreeDragSource, _path: *gtk.TreePath) bool {
        const class: *TreeDragSourceIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_draggable.?;
        const ret = vFn(self, _path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_drag_source_get_type" });
        return cFn();
    }
};
/// Struct [TreeDragSourceIface](https://docs.gtk.org/gtk4/struct.TreeDragSourceIface.html)
pub const TreeDragSourceIface = extern struct {
    g_iface: gobject.TypeInterface,
    row_draggable: ?*const fn (_drag_source: *gtk.TreeDragSource, _path: *gtk.TreePath) callconv(.c) bool,
    drag_data_get: ?*const fn (_drag_source: *gtk.TreeDragSource, _path: *gtk.TreePath) callconv(.c) ?*gdk.ContentProvider,
    drag_data_delete: ?*const fn (_drag_source: *gtk.TreeDragSource, _path: *gtk.TreePath) callconv(.c) bool,
};
/// Class [TreeExpander](https://docs.gtk.org/gtk4/class.TreeExpander.html)
/// - property [child](https://docs.gtk.org/gtk4/property.TreeExpander.child.html): (rw) `gtk.Widget`
/// - property [hide-expander](https://docs.gtk.org/gtk4/property.TreeExpander.hide-expander.html): (rw) `bool`
/// - property [indent-for-depth](https://docs.gtk.org/gtk4/property.TreeExpander.indent-for-depth.html): (rw) `bool`
/// - property [indent-for-icon](https://docs.gtk.org/gtk4/property.TreeExpander.indent-for-icon.html): (rw) `bool`
/// - property [item](https://docs.gtk.org/gtk4/property.TreeExpander.item.html): (r-) `gobject.Object`
/// - property [list-row](https://docs.gtk.org/gtk4/property.TreeExpander.list-row.html): (rw) `gtk.TreeListRow`
pub const TreeExpander = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.TreeExpanderClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeExpander.new.html)
    pub fn new() *TreeExpander {
        const cFn = @extern(*const fn () callconv(.c) *TreeExpander, .{ .name = "gtk_tree_expander_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.TreeExpander.get_child.html)
    pub fn getChild(self: *TreeExpander) ?*gtk.Widget {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_tree_expander_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hide_expander](https://docs.gtk.org/gtk4/method.TreeExpander.get_hide_expander.html)
    pub fn getHideExpander(self: *TreeExpander) bool {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) bool, .{ .name = "gtk_tree_expander_get_hide_expander" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_indent_for_depth](https://docs.gtk.org/gtk4/method.TreeExpander.get_indent_for_depth.html)
    pub fn getIndentForDepth(self: *TreeExpander) bool {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) bool, .{ .name = "gtk_tree_expander_get_indent_for_depth" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_indent_for_icon](https://docs.gtk.org/gtk4/method.TreeExpander.get_indent_for_icon.html)
    pub fn getIndentForIcon(self: *TreeExpander) bool {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) bool, .{ .name = "gtk_tree_expander_get_indent_for_icon" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.TreeExpander.get_item.html)
    pub fn getItem(self: *TreeExpander) ?*gobject.Object {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) ?*gobject.Object, .{ .name = "gtk_tree_expander_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_list_row](https://docs.gtk.org/gtk4/method.TreeExpander.get_list_row.html)
    pub fn getListRow(self: *TreeExpander) ?*gtk.TreeListRow {
        const cFn = @extern(*const fn (*TreeExpander) callconv(.c) ?*gtk.TreeListRow, .{ .name = "gtk_tree_expander_get_list_row" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.TreeExpander.set_child.html)
    pub fn setChild(self: *TreeExpander, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*TreeExpander, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_tree_expander_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_hide_expander](https://docs.gtk.org/gtk4/method.TreeExpander.set_hide_expander.html)
    pub fn setHideExpander(self: *TreeExpander, _hide_expander: bool) void {
        const cFn = @extern(*const fn (*TreeExpander, bool) callconv(.c) void, .{ .name = "gtk_tree_expander_set_hide_expander" });
        const ret = cFn(self, _hide_expander);
        return ret;
    }
    /// method [set_indent_for_depth](https://docs.gtk.org/gtk4/method.TreeExpander.set_indent_for_depth.html)
    pub fn setIndentForDepth(self: *TreeExpander, _indent_for_depth: bool) void {
        const cFn = @extern(*const fn (*TreeExpander, bool) callconv(.c) void, .{ .name = "gtk_tree_expander_set_indent_for_depth" });
        const ret = cFn(self, _indent_for_depth);
        return ret;
    }
    /// method [set_indent_for_icon](https://docs.gtk.org/gtk4/method.TreeExpander.set_indent_for_icon.html)
    pub fn setIndentForIcon(self: *TreeExpander, _indent_for_icon: bool) void {
        const cFn = @extern(*const fn (*TreeExpander, bool) callconv(.c) void, .{ .name = "gtk_tree_expander_set_indent_for_icon" });
        const ret = cFn(self, _indent_for_icon);
        return ret;
    }
    /// method [set_list_row](https://docs.gtk.org/gtk4/method.TreeExpander.set_list_row.html)
    pub fn setListRow(self: *TreeExpander, _list_row: ?*gtk.TreeListRow) void {
        const cFn = @extern(*const fn (*TreeExpander, ?*gtk.TreeListRow) callconv(.c) void, .{ .name = "gtk_tree_expander_set_list_row" });
        const ret = cFn(self, _list_row);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_expander_get_type" });
        return cFn();
    }
};
pub const TreeExpanderClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Deprecated:
/// Struct [TreeIter](https://docs.gtk.org/gtk4/struct.TreeIter.html)
pub const TreeIter = if (config.disable_deprecated) core.Deprecated else extern struct {
    stamp: i32,
    user_data: ?*anyopaque,
    user_data2: ?*anyopaque,
    user_data3: ?*anyopaque,
    /// Deprecated:
    /// method [copy](https://docs.gtk.org/gtk4/method.TreeIter.copy.html)
    pub const copy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn copy(self: *TreeIter) *gtk.TreeIter {
            const cFn = @extern(*const fn (*TreeIter) callconv(.c) *gtk.TreeIter, .{ .name = "gtk_tree_iter_copy" });
            const ret = cFn(self);
            return ret;
        }
    }.copy;
    /// Deprecated:
    /// method [free](https://docs.gtk.org/gtk4/method.TreeIter.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *TreeIter) void {
            const cFn = @extern(*const fn (*TreeIter) callconv(.c) void, .{ .name = "gtk_tree_iter_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_iter_get_type" });
        return cFn();
    }
};
/// callback [TreeIterCompareFunc](https://docs.gtk.org/gtk4/callback.TreeIterCompareFunc.html)
pub const TreeIterCompareFunc = *const fn (_model: *gtk.TreeModel, _a: *gtk.TreeIter, _b: *gtk.TreeIter, _user_data: ?*anyopaque) callconv(.c) i32;
/// Class [TreeListModel](https://docs.gtk.org/gtk4/class.TreeListModel.html)
/// - property [autoexpand](https://docs.gtk.org/gtk4/property.TreeListModel.autoexpand.html): (rw) `bool`
/// - property [item-type](https://docs.gtk.org/gtk4/property.TreeListModel.item-type.html): (r-) `core.Type`
/// - property [model](https://docs.gtk.org/gtk4/property.TreeListModel.model.html): (r-) `gio.ListModel`
/// - property [n-items](https://docs.gtk.org/gtk4/property.TreeListModel.n-items.html): (r-) `u32`
/// - property [passthrough](https://docs.gtk.org/gtk4/property.TreeListModel.passthrough.html): (r-) `bool`
pub const TreeListModel = opaque {
    pub const Interfaces = [_]type{gio.ListModel};
    pub const Parent = gobject.Object;
    pub const Class = gtk.TreeListModelClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeListModel.new.html)
    pub fn new(_root: *gio.ListModel, _passthrough: bool, _autoexpand: bool, create_func: anytype, create_func_args: anytype) *TreeListModel {
        var closure_create_func = core.zig_closure(create_func, create_func_args, &.{ ?*gio.ListModel, *gobject.Object });
        const _create_func: gtk.TreeListModelCreateModelFunc = @ptrCast(closure_create_func.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_create_func.c_data());
        const _user_destroy: glib.DestroyNotify = @ptrCast(closure_create_func.c_destroy());
        const cFn = @extern(*const fn (*gio.ListModel, bool, bool, gtk.TreeListModelCreateModelFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) *TreeListModel, .{ .name = "gtk_tree_list_model_new" });
        const ret = cFn(_root, _passthrough, _autoexpand, _create_func, @ptrCast(_user_data), _user_destroy);
        return ret;
    }
    /// method [get_autoexpand](https://docs.gtk.org/gtk4/method.TreeListModel.get_autoexpand.html)
    pub fn getAutoexpand(self: *TreeListModel) bool {
        const cFn = @extern(*const fn (*TreeListModel) callconv(.c) bool, .{ .name = "gtk_tree_list_model_get_autoexpand" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_row](https://docs.gtk.org/gtk4/method.TreeListModel.get_child_row.html)
    pub fn getChildRow(self: *TreeListModel, _position: u32) ?*gtk.TreeListRow {
        const cFn = @extern(*const fn (*TreeListModel, u32) callconv(.c) ?*gtk.TreeListRow, .{ .name = "gtk_tree_list_model_get_child_row" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [get_model](https://docs.gtk.org/gtk4/method.TreeListModel.get_model.html)
    pub fn getModel(self: *TreeListModel) *gio.ListModel {
        const cFn = @extern(*const fn (*TreeListModel) callconv(.c) *gio.ListModel, .{ .name = "gtk_tree_list_model_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_passthrough](https://docs.gtk.org/gtk4/method.TreeListModel.get_passthrough.html)
    pub fn getPassthrough(self: *TreeListModel) bool {
        const cFn = @extern(*const fn (*TreeListModel) callconv(.c) bool, .{ .name = "gtk_tree_list_model_get_passthrough" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_row](https://docs.gtk.org/gtk4/method.TreeListModel.get_row.html)
    pub fn getRow(self: *TreeListModel, _position: u32) ?*gtk.TreeListRow {
        const cFn = @extern(*const fn (*TreeListModel, u32) callconv(.c) ?*gtk.TreeListRow, .{ .name = "gtk_tree_list_model_get_row" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [set_autoexpand](https://docs.gtk.org/gtk4/method.TreeListModel.set_autoexpand.html)
    pub fn setAutoexpand(self: *TreeListModel, _autoexpand: bool) void {
        const cFn = @extern(*const fn (*TreeListModel, bool) callconv(.c) void, .{ .name = "gtk_tree_list_model_set_autoexpand" });
        const ret = cFn(self, _autoexpand);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_list_model_get_type" });
        return cFn();
    }
};
pub const TreeListModelClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// callback [TreeListModelCreateModelFunc](https://docs.gtk.org/gtk4/callback.TreeListModelCreateModelFunc.html)
pub const TreeListModelCreateModelFunc = *const fn (_item: *gobject.Object, _user_data: ?*anyopaque) callconv(.c) ?*gio.ListModel;
/// Class [TreeListRow](https://docs.gtk.org/gtk4/class.TreeListRow.html)
/// - property [children](https://docs.gtk.org/gtk4/property.TreeListRow.children.html): (r-) `gio.ListModel`
/// - property [depth](https://docs.gtk.org/gtk4/property.TreeListRow.depth.html): (r-) `u32`
/// - property [expandable](https://docs.gtk.org/gtk4/property.TreeListRow.expandable.html): (r-) `bool`
/// - property [expanded](https://docs.gtk.org/gtk4/property.TreeListRow.expanded.html): (rw) `bool`
/// - property [item](https://docs.gtk.org/gtk4/property.TreeListRow.item.html): (r-) `gobject.Object`
pub const TreeListRow = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.TreeListRowClass;
    /// method [get_child_row](https://docs.gtk.org/gtk4/method.TreeListRow.get_child_row.html)
    pub fn getChildRow(self: *TreeListRow, _position: u32) ?*gtk.TreeListRow {
        const cFn = @extern(*const fn (*TreeListRow, u32) callconv(.c) ?*gtk.TreeListRow, .{ .name = "gtk_tree_list_row_get_child_row" });
        const ret = cFn(self, _position);
        return ret;
    }
    /// method [get_children](https://docs.gtk.org/gtk4/method.TreeListRow.get_children.html)
    pub fn getChildren(self: *TreeListRow) ?*gio.ListModel {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) ?*gio.ListModel, .{ .name = "gtk_tree_list_row_get_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_depth](https://docs.gtk.org/gtk4/method.TreeListRow.get_depth.html)
    pub fn getDepth(self: *TreeListRow) u32 {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) u32, .{ .name = "gtk_tree_list_row_get_depth" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_expanded](https://docs.gtk.org/gtk4/method.TreeListRow.get_expanded.html)
    pub fn getExpanded(self: *TreeListRow) bool {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) bool, .{ .name = "gtk_tree_list_row_get_expanded" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_item](https://docs.gtk.org/gtk4/method.TreeListRow.get_item.html)
    pub fn getItem(self: *TreeListRow) ?*gobject.Object {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) ?*gobject.Object, .{ .name = "gtk_tree_list_row_get_item" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gtk4/method.TreeListRow.get_parent.html)
    pub fn getParent(self: *TreeListRow) ?*gtk.TreeListRow {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) ?*gtk.TreeListRow, .{ .name = "gtk_tree_list_row_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_position](https://docs.gtk.org/gtk4/method.TreeListRow.get_position.html)
    pub fn getPosition(self: *TreeListRow) u32 {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) u32, .{ .name = "gtk_tree_list_row_get_position" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_expandable](https://docs.gtk.org/gtk4/method.TreeListRow.is_expandable.html)
    pub fn isExpandable(self: *TreeListRow) bool {
        const cFn = @extern(*const fn (*TreeListRow) callconv(.c) bool, .{ .name = "gtk_tree_list_row_is_expandable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_expanded](https://docs.gtk.org/gtk4/method.TreeListRow.set_expanded.html)
    pub fn setExpanded(self: *TreeListRow, _expanded: bool) void {
        const cFn = @extern(*const fn (*TreeListRow, bool) callconv(.c) void, .{ .name = "gtk_tree_list_row_set_expanded" });
        const ret = cFn(self, _expanded);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_list_row_get_type" });
        return cFn();
    }
};
pub const TreeListRowClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [TreeListRowSorter](https://docs.gtk.org/gtk4/class.TreeListRowSorter.html)
/// - property [sorter](https://docs.gtk.org/gtk4/property.TreeListRowSorter.sorter.html): (rw) `gtk.Sorter`
pub const TreeListRowSorter = opaque {
    pub const Parent = gtk.Sorter;
    pub const Class = gtk.TreeListRowSorterClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeListRowSorter.new.html)
    pub fn new(_sorter: ?*gtk.Sorter) *TreeListRowSorter {
        const cFn = @extern(*const fn (?*gtk.Sorter) callconv(.c) *TreeListRowSorter, .{ .name = "gtk_tree_list_row_sorter_new" });
        const ret = cFn(_sorter);
        return ret;
    }
    /// method [get_sorter](https://docs.gtk.org/gtk4/method.TreeListRowSorter.get_sorter.html)
    pub fn getSorter(self: *TreeListRowSorter) ?*gtk.Sorter {
        const cFn = @extern(*const fn (*TreeListRowSorter) callconv(.c) ?*gtk.Sorter, .{ .name = "gtk_tree_list_row_sorter_get_sorter" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_sorter](https://docs.gtk.org/gtk4/method.TreeListRowSorter.set_sorter.html)
    pub fn setSorter(self: *TreeListRowSorter, _sorter: ?*gtk.Sorter) void {
        const cFn = @extern(*const fn (*TreeListRowSorter, ?*gtk.Sorter) callconv(.c) void, .{ .name = "gtk_tree_list_row_sorter_set_sorter" });
        const ret = cFn(self, _sorter);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_list_row_sorter_get_type" });
        return cFn();
    }
};
pub const TreeListRowSorterClass = extern struct {
    parent_class: gtk.SorterClass,
};
/// Deprecated:
/// Iface [TreeModel](https://docs.gtk.org/gtk4/iface.TreeModel.html)
pub const TreeModel = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// method [filter_new](https://docs.gtk.org/gtk4/method.TreeModel.filter_new.html)
    pub const filterNew = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn filterNew(self: *TreeModel, _root: ?*gtk.TreePath) *gtk.TreeModel {
            const cFn = @extern(*const fn (*TreeModel, ?*gtk.TreePath) callconv(.c) *gtk.TreeModel, .{ .name = "gtk_tree_model_filter_new" });
            const ret = cFn(self, _root);
            return ret;
        }
    }.filterNew;
    /// Deprecated:
    /// method [foreach](https://docs.gtk.org/gtk4/method.TreeModel.foreach.html)
    pub const foreach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn foreach(self: *TreeModel, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeModel, *gtk.TreePath, *gtk.TreeIter });
            defer closure_func.deinit();
            const _func: gtk.TreeModelForeachFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*TreeModel, gtk.TreeModelForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_tree_model_foreach" });
            const ret = cFn(self, _func, @ptrCast(_user_data));
            return ret;
        }
    }.foreach;
    /// Deprecated:
    /// method [get_column_type](https://docs.gtk.org/gtk4/method.TreeModel.get_column_type.html)
    pub const getColumnType = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColumnType(self: *TreeModel, _index_: i32) core.Type {
            const cFn = @extern(*const fn (*TreeModel, i32) callconv(.c) core.Type, .{ .name = "gtk_tree_model_get_column_type" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.getColumnType;
    /// Deprecated:
    /// method [get_flags](https://docs.gtk.org/gtk4/method.TreeModel.get_flags.html)
    pub const getFlags = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFlags(self: *TreeModel) gtk.TreeModelFlags {
            const cFn = @extern(*const fn (*TreeModel) callconv(.c) gtk.TreeModelFlags, .{ .name = "gtk_tree_model_get_flags" });
            const ret = cFn(self);
            return ret;
        }
    }.getFlags;
    /// Deprecated:
    /// method [get_iter](https://docs.gtk.org/gtk4/method.TreeModel.get_iter.html)
    pub const getIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIter(self: *TreeModel, _iter: *gtk.TreeIter, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_model_get_iter" });
            const ret = cFn(self, _iter, _path);
            return ret;
        }
    }.getIter;
    /// Deprecated:
    /// method [get_iter_first](https://docs.gtk.org/gtk4/method.TreeModel.get_iter_first.html)
    pub const getIterFirst = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIterFirst(self: *TreeModel, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_get_iter_first" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.getIterFirst;
    /// Deprecated:
    /// method [get_iter_from_string](https://docs.gtk.org/gtk4/method.TreeModel.get_iter_from_string.html)
    pub const getIterFromString = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIterFromString(self: *TreeModel, _iter: *gtk.TreeIter, _path_string: [*:0]const u8) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_tree_model_get_iter_from_string" });
            const ret = cFn(self, _iter, _path_string);
            return ret;
        }
    }.getIterFromString;
    /// Deprecated:
    /// method [get_n_columns](https://docs.gtk.org/gtk4/method.TreeModel.get_n_columns.html)
    pub const getNColumns = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getNColumns(self: *TreeModel) i32 {
            const cFn = @extern(*const fn (*TreeModel) callconv(.c) i32, .{ .name = "gtk_tree_model_get_n_columns" });
            const ret = cFn(self);
            return ret;
        }
    }.getNColumns;
    /// Deprecated:
    /// method [get_path](https://docs.gtk.org/gtk4/method.TreeModel.get_path.html)
    pub const getPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPath(self: *TreeModel, _iter: *gtk.TreeIter) *gtk.TreePath {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) *gtk.TreePath, .{ .name = "gtk_tree_model_get_path" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.getPath;
    /// Deprecated:
    /// method [get_string_from_iter](https://docs.gtk.org/gtk4/method.TreeModel.get_string_from_iter.html)
    pub const getStringFromIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getStringFromIter(self: *TreeModel, _iter: *gtk.TreeIter) ?[*:0]u8 {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) ?[*:0]u8, .{ .name = "gtk_tree_model_get_string_from_iter" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.getStringFromIter;
    /// Deprecated:
    /// method [get_value](https://docs.gtk.org/gtk4/method.TreeModel.get_value.html)
    pub const getValue = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getValue(self: *TreeModel, _iter: *gtk.TreeIter, _column: i32, _value: *gobject.Value) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, i32, *gobject.Value) callconv(.c) void, .{ .name = "gtk_tree_model_get_value" });
            const ret = cFn(self, _iter, _column, _value);
            return ret;
        }
    }.getValue;
    /// Deprecated:
    /// method [iter_children](https://docs.gtk.org/gtk4/method.TreeModel.iter_children.html)
    pub const iterChildren = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterChildren(self: *TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_children" });
            const ret = cFn(self, _iter, _parent);
            return ret;
        }
    }.iterChildren;
    /// Deprecated:
    /// method [iter_has_child](https://docs.gtk.org/gtk4/method.TreeModel.iter_has_child.html)
    pub const iterHasChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterHasChild(self: *TreeModel, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_has_child" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterHasChild;
    /// Deprecated:
    /// method [iter_n_children](https://docs.gtk.org/gtk4/method.TreeModel.iter_n_children.html)
    pub const iterNChildren = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterNChildren(self: *TreeModel, _iter: ?*gtk.TreeIter) i32 {
            const cFn = @extern(*const fn (*TreeModel, ?*gtk.TreeIter) callconv(.c) i32, .{ .name = "gtk_tree_model_iter_n_children" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterNChildren;
    /// Deprecated:
    /// method [iter_next](https://docs.gtk.org/gtk4/method.TreeModel.iter_next.html)
    pub const iterNext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterNext(self: *TreeModel, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_next" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterNext;
    /// Deprecated:
    /// method [iter_nth_child](https://docs.gtk.org/gtk4/method.TreeModel.iter_nth_child.html)
    pub const iterNthChild = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterNthChild(self: *TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _n: i32) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, ?*gtk.TreeIter, i32) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_nth_child" });
            const ret = cFn(self, _iter, _parent, _n);
            return ret;
        }
    }.iterNthChild;
    /// Deprecated:
    /// method [iter_parent](https://docs.gtk.org/gtk4/method.TreeModel.iter_parent.html)
    pub const iterParent = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterParent(self: *TreeModel, _iter: *gtk.TreeIter, _child: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_parent" });
            const ret = cFn(self, _iter, _child);
            return ret;
        }
    }.iterParent;
    /// Deprecated:
    /// method [iter_previous](https://docs.gtk.org/gtk4/method.TreeModel.iter_previous.html)
    pub const iterPrevious = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterPrevious(self: *TreeModel, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_iter_previous" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterPrevious;
    /// Deprecated:
    /// method [ref_node](https://docs.gtk.org/gtk4/method.TreeModel.ref_node.html)
    pub const refNode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn refNode(self: *TreeModel, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_ref_node" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.refNode;
    /// Deprecated:
    /// method [row_changed](https://docs.gtk.org/gtk4/method.TreeModel.row_changed.html)
    pub const rowChanged = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowChanged(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreePath, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_row_changed" });
            const ret = cFn(self, _path, _iter);
            return ret;
        }
    }.rowChanged;
    /// Deprecated:
    /// method [row_deleted](https://docs.gtk.org/gtk4/method.TreeModel.row_deleted.html)
    pub const rowDeleted = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowDeleted(self: *TreeModel, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_model_row_deleted" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.rowDeleted;
    /// Deprecated:
    /// method [row_has_child_toggled](https://docs.gtk.org/gtk4/method.TreeModel.row_has_child_toggled.html)
    pub const rowHasChildToggled = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowHasChildToggled(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreePath, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_row_has_child_toggled" });
            const ret = cFn(self, _path, _iter);
            return ret;
        }
    }.rowHasChildToggled;
    /// Deprecated:
    /// method [row_inserted](https://docs.gtk.org/gtk4/method.TreeModel.row_inserted.html)
    pub const rowInserted = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowInserted(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreePath, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_row_inserted" });
            const ret = cFn(self, _path, _iter);
            return ret;
        }
    }.rowInserted;
    /// Deprecated:
    /// method [rows_reordered](https://docs.gtk.org/gtk4/method.TreeModel.rows_reordered.html)
    pub const rowsReordered = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowsReordered(self: *TreeModel, _path: *gtk.TreePath, _iter: ?*gtk.TreeIter, _new_orders: []i32) void {
            const _new_order = _new_orders.ptr;
            const _length: i32 = @intCast(_new_orders.len);
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreePath, ?*gtk.TreeIter, [*]i32, i32) callconv(.c) void, .{ .name = "gtk_tree_model_rows_reordered_with_length" });
            const ret = cFn(self, _path, _iter, _new_order, _length);
            return ret;
        }
    }.rowsReordered;
    /// Deprecated:
    /// method [unref_node](https://docs.gtk.org/gtk4/method.TreeModel.unref_node.html)
    pub const unrefNode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unrefNode(self: *TreeModel, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModel, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_unref_node" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.unrefNode;
    /// vfunc [get_column_type](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_column_type.html)
    pub fn getColumnTypeV(self: *TreeModel, _index_: i32) core.Type {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_column_type.?;
        const ret = vFn(self, _index_);
        return ret;
    }
    /// vfunc [get_flags](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_flags.html)
    pub fn getFlagsV(self: *TreeModel) gtk.TreeModelFlags {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_flags.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_iter](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_iter.html)
    pub fn getIterV(self: *TreeModel, _iter: *gtk.TreeIter, _path: *gtk.TreePath) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_iter.?;
        const ret = vFn(self, _iter, _path);
        return ret;
    }
    /// vfunc [get_n_columns](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_n_columns.html)
    pub fn getNColumnsV(self: *TreeModel) i32 {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_n_columns.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_path](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_path.html)
    pub fn getPathV(self: *TreeModel, _iter: *gtk.TreeIter) *gtk.TreePath {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_path.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [get_value](https://docs.gtk.org/gtk4/vfunc.TreeModel.get_value.html)
    pub fn getValueV(self: *TreeModel, _iter: *gtk.TreeIter, _column: i32, _value: *gobject.Value) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_value.?;
        const ret = vFn(self, _iter, _column, _value);
        return ret;
    }
    /// vfunc [iter_children](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_children.html)
    pub fn iterChildrenV(self: *TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_children.?;
        const ret = vFn(self, _iter, _parent);
        return ret;
    }
    /// vfunc [iter_has_child](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_has_child.html)
    pub fn iterHasChildV(self: *TreeModel, _iter: *gtk.TreeIter) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_has_child.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [iter_n_children](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_n_children.html)
    pub fn iterNChildrenV(self: *TreeModel, _iter: ?*gtk.TreeIter) i32 {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_n_children.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [iter_next](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_next.html)
    pub fn iterNextV(self: *TreeModel, _iter: *gtk.TreeIter) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_next.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [iter_nth_child](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_nth_child.html)
    pub fn iterNthChildV(self: *TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _n: i32) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_nth_child.?;
        const ret = vFn(self, _iter, _parent, _n);
        return ret;
    }
    /// vfunc [iter_parent](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_parent.html)
    pub fn iterParentV(self: *TreeModel, _iter: *gtk.TreeIter, _child: *gtk.TreeIter) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_parent.?;
        const ret = vFn(self, _iter, _child);
        return ret;
    }
    /// vfunc [iter_previous](https://docs.gtk.org/gtk4/vfunc.TreeModel.iter_previous.html)
    pub fn iterPreviousV(self: *TreeModel, _iter: *gtk.TreeIter) bool {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.iter_previous.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [ref_node](https://docs.gtk.org/gtk4/vfunc.TreeModel.ref_node.html)
    pub fn refNodeV(self: *TreeModel, _iter: *gtk.TreeIter) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.ref_node.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// vfunc [row_changed](https://docs.gtk.org/gtk4/vfunc.TreeModel.row_changed.html)
    pub fn rowChangedV(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_changed.?;
        const ret = vFn(self, _path, _iter);
        return ret;
    }
    /// vfunc [row_deleted](https://docs.gtk.org/gtk4/vfunc.TreeModel.row_deleted.html)
    pub fn rowDeletedV(self: *TreeModel, _path: *gtk.TreePath) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_deleted.?;
        const ret = vFn(self, _path);
        return ret;
    }
    /// vfunc [row_has_child_toggled](https://docs.gtk.org/gtk4/vfunc.TreeModel.row_has_child_toggled.html)
    pub fn rowHasChildToggledV(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_has_child_toggled.?;
        const ret = vFn(self, _path, _iter);
        return ret;
    }
    /// vfunc [row_inserted](https://docs.gtk.org/gtk4/vfunc.TreeModel.row_inserted.html)
    pub fn rowInsertedV(self: *TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_inserted.?;
        const ret = vFn(self, _path, _iter);
        return ret;
    }
    /// vfunc [unref_node](https://docs.gtk.org/gtk4/vfunc.TreeModel.unref_node.html)
    pub fn unrefNodeV(self: *TreeModel, _iter: *gtk.TreeIter) void {
        const class: *TreeModelIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unref_node.?;
        const ret = vFn(self, _iter);
        return ret;
    }
    /// signal [row-changed](https://docs.gtk.org/gtk4/signal.TreeModel.row-changed.html)
    pub fn connectRowChanged(self: *TreeModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-changed", handler, args, flags, &.{ void, *TreeModel, *gtk.TreePath, *gtk.TreeIter });
    }
    /// signal [row-deleted](https://docs.gtk.org/gtk4/signal.TreeModel.row-deleted.html)
    pub fn connectRowDeleted(self: *TreeModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-deleted", handler, args, flags, &.{ void, *TreeModel, *gtk.TreePath });
    }
    /// signal [row-has-child-toggled](https://docs.gtk.org/gtk4/signal.TreeModel.row-has-child-toggled.html)
    pub fn connectRowHasChildToggled(self: *TreeModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-has-child-toggled", handler, args, flags, &.{ void, *TreeModel, *gtk.TreePath, *gtk.TreeIter });
    }
    /// signal [row-inserted](https://docs.gtk.org/gtk4/signal.TreeModel.row-inserted.html)
    pub fn connectRowInserted(self: *TreeModel, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-inserted", handler, args, flags, &.{ void, *TreeModel, *gtk.TreePath, *gtk.TreeIter });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_model_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [TreeModelFilter](https://docs.gtk.org/gtk4/class.TreeModelFilter.html)
/// - property [child-model](https://docs.gtk.org/gtk4/property.TreeModelFilter.child-model.html): (r-) `gtk.TreeModel`
/// - property [virtual-root](https://docs.gtk.org/gtk4/property.TreeModelFilter.virtual-root.html): (r-) `gtk.TreePath`
pub const TreeModelFilter = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gobject.Object,
    priv: ?*gtk.TreeModelFilterPrivate,
    pub const Interfaces = [_]type{ gtk.TreeDragSource, gtk.TreeModel };
    pub const Parent = gobject.Object;
    pub const Class = gtk.TreeModelFilterClass;
    /// Deprecated:
    /// method [clear_cache](https://docs.gtk.org/gtk4/method.TreeModelFilter.clear_cache.html)
    pub const clearCache = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clearCache(self: *TreeModelFilter) void {
            const cFn = @extern(*const fn (*TreeModelFilter) callconv(.c) void, .{ .name = "gtk_tree_model_filter_clear_cache" });
            const ret = cFn(self);
            return ret;
        }
    }.clearCache;
    /// Deprecated:
    /// method [convert_child_iter_to_iter](https://docs.gtk.org/gtk4/method.TreeModelFilter.convert_child_iter_to_iter.html)
    pub const convertChildIterToIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertChildIterToIter(self: *TreeModelFilter, _filter_iter: *gtk.TreeIter, _child_iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModelFilter, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_filter_convert_child_iter_to_iter" });
            const ret = cFn(self, _filter_iter, _child_iter);
            return ret;
        }
    }.convertChildIterToIter;
    /// Deprecated:
    /// method [convert_child_path_to_path](https://docs.gtk.org/gtk4/method.TreeModelFilter.convert_child_path_to_path.html)
    pub const convertChildPathToPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertChildPathToPath(self: *TreeModelFilter, _child_path: *gtk.TreePath) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*TreeModelFilter, *gtk.TreePath) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_tree_model_filter_convert_child_path_to_path" });
            const ret = cFn(self, _child_path);
            return ret;
        }
    }.convertChildPathToPath;
    /// Deprecated:
    /// method [convert_iter_to_child_iter](https://docs.gtk.org/gtk4/method.TreeModelFilter.convert_iter_to_child_iter.html)
    pub const convertIterToChildIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertIterToChildIter(self: *TreeModelFilter, _child_iter: *gtk.TreeIter, _filter_iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModelFilter, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_filter_convert_iter_to_child_iter" });
            const ret = cFn(self, _child_iter, _filter_iter);
            return ret;
        }
    }.convertIterToChildIter;
    /// Deprecated:
    /// method [convert_path_to_child_path](https://docs.gtk.org/gtk4/method.TreeModelFilter.convert_path_to_child_path.html)
    pub const convertPathToChildPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertPathToChildPath(self: *TreeModelFilter, _filter_path: *gtk.TreePath) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*TreeModelFilter, *gtk.TreePath) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_tree_model_filter_convert_path_to_child_path" });
            const ret = cFn(self, _filter_path);
            return ret;
        }
    }.convertPathToChildPath;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.TreeModelFilter.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *TreeModelFilter) *gtk.TreeModel {
            const cFn = @extern(*const fn (*TreeModelFilter) callconv(.c) *gtk.TreeModel, .{ .name = "gtk_tree_model_filter_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [refilter](https://docs.gtk.org/gtk4/method.TreeModelFilter.refilter.html)
    pub const refilter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn refilter(self: *TreeModelFilter) void {
            const cFn = @extern(*const fn (*TreeModelFilter) callconv(.c) void, .{ .name = "gtk_tree_model_filter_refilter" });
            const ret = cFn(self);
            return ret;
        }
    }.refilter;
    /// Deprecated:
    /// method [set_modify_func](https://docs.gtk.org/gtk4/method.TreeModelFilter.set_modify_func.html)
    pub const setModifyFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModifyFunc(self: *TreeModelFilter, _typess: []core.Type, func: anytype, func_args: anytype) void {
            const _n_columns: i32 = @intCast(_typess.len);
            const _types = _typess.ptr;
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TreeModel, *gtk.TreeIter, *gobject.Value, i32 });
            const _func: gtk.TreeModelFilterModifyFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeModelFilter, i32, [*]core.Type, gtk.TreeModelFilterModifyFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_model_filter_set_modify_func" });
            const ret = cFn(self, _n_columns, _types, _func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setModifyFunc;
    /// Deprecated:
    /// method [set_visible_column](https://docs.gtk.org/gtk4/method.TreeModelFilter.set_visible_column.html)
    pub const setVisibleColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setVisibleColumn(self: *TreeModelFilter, _column: i32) void {
            const cFn = @extern(*const fn (*TreeModelFilter, i32) callconv(.c) void, .{ .name = "gtk_tree_model_filter_set_visible_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setVisibleColumn;
    /// Deprecated:
    /// method [set_visible_func](https://docs.gtk.org/gtk4/method.TreeModelFilter.set_visible_func.html)
    pub const setVisibleFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setVisibleFunc(self: *TreeModelFilter, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeModel, *gtk.TreeIter });
            const _func: gtk.TreeModelFilterVisibleFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeModelFilter, gtk.TreeModelFilterVisibleFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_model_filter_set_visible_func" });
            const ret = cFn(self, _func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setVisibleFunc;
    /// vfunc [modify](https://docs.gtk.org/gtk4/vfunc.TreeModelFilter.modify.html)
    pub fn modifyV(self: *TreeModelFilter, _child_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _value: *gobject.Value, _column: i32) void {
        const class: *TreeModelFilterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.modify.?;
        const ret = vFn(self, _child_model, _iter, _value, _column);
        return ret;
    }
    /// vfunc [visible](https://docs.gtk.org/gtk4/vfunc.TreeModelFilter.visible.html)
    pub fn visibleV(self: *TreeModelFilter, _child_model: *gtk.TreeModel, _iter: *gtk.TreeIter) bool {
        const class: *TreeModelFilterClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.visible.?;
        const ret = vFn(self, _child_model, _iter);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_model_filter_get_type" });
        return cFn();
    }
};
pub const TreeModelFilterClass = extern struct {
    parent_class: gobject.ObjectClass,
    visible: ?*const fn (_self: *gtk.TreeModelFilter, _child_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) bool,
    modify: ?*const fn (_self: *gtk.TreeModelFilter, _child_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _value: *gobject.Value, _column: i32) callconv(.c) void,
    padding: [8]?*anyopaque,
};
/// callback [TreeModelFilterModifyFunc](https://docs.gtk.org/gtk4/callback.TreeModelFilterModifyFunc.html)
pub const TreeModelFilterModifyFunc = *const fn (_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _value: *gobject.Value, _column: i32, _data: ?*anyopaque) callconv(.c) void;
pub const TreeModelFilterPrivate = opaque {};
/// callback [TreeModelFilterVisibleFunc](https://docs.gtk.org/gtk4/callback.TreeModelFilterVisibleFunc.html)
pub const TreeModelFilterVisibleFunc = *const fn (_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) bool;
/// Deprecated:
/// Flags [TreeModelFlags](https://docs.gtk.org/gtk4/flags.TreeModelFlags.html)
pub const TreeModelFlags = if (config.disable_deprecated) core.Deprecated else packed struct(u32) {
    iters_persist: bool = false,
    list_only: bool = false,
    _: u30 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_model_flags_get_type" });
        return cFn();
    }
};
/// callback [TreeModelForeachFunc](https://docs.gtk.org/gtk4/callback.TreeModelForeachFunc.html)
pub const TreeModelForeachFunc = *const fn (_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) bool;
/// Struct [TreeModelIface](https://docs.gtk.org/gtk4/struct.TreeModelIface.html)
pub const TreeModelIface = extern struct {
    g_iface: gobject.TypeInterface,
    row_changed: ?*const fn (_tree_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) callconv(.c) void,
    row_inserted: ?*const fn (_tree_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) callconv(.c) void,
    row_has_child_toggled: ?*const fn (_tree_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter) callconv(.c) void,
    row_deleted: ?*const fn (_tree_model: *gtk.TreeModel, _path: *gtk.TreePath) callconv(.c) void,
    rows_reordered: ?*const fn (_tree_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter, _new_order: *i32) callconv(.c) void,
    get_flags: ?*const fn (_tree_model: *gtk.TreeModel) callconv(.c) gtk.TreeModelFlags,
    get_n_columns: ?*const fn (_tree_model: *gtk.TreeModel) callconv(.c) i32,
    get_column_type: ?*const fn (_tree_model: *gtk.TreeModel, _index_: i32) callconv(.c) core.Type,
    get_iter: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _path: *gtk.TreePath) callconv(.c) bool,
    get_path: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) *gtk.TreePath,
    get_value: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _column: i32, _value: *gobject.Value) callconv(.c) void,
    iter_next: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) bool,
    iter_previous: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) bool,
    iter_children: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter) callconv(.c) bool,
    iter_has_child: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) bool,
    iter_n_children: ?*const fn (_tree_model: *gtk.TreeModel, _iter: ?*gtk.TreeIter) callconv(.c) i32,
    iter_nth_child: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _n: i32) callconv(.c) bool,
    iter_parent: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _child: *gtk.TreeIter) callconv(.c) bool,
    ref_node: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) void,
    unref_node: ?*const fn (_tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter) callconv(.c) void,
};
/// Deprecated:
/// Class [TreeModelSort](https://docs.gtk.org/gtk4/class.TreeModelSort.html)
/// - property [model](https://docs.gtk.org/gtk4/property.TreeModelSort.model.html): (r-) `gtk.TreeModel`
pub const TreeModelSort = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gobject.Object,
    priv: ?*gtk.TreeModelSortPrivate,
    pub const Interfaces = [_]type{ gtk.TreeDragSource, gtk.TreeModel, gtk.TreeSortable };
    pub const Parent = gobject.Object;
    pub const Class = gtk.TreeModelSortClass;
    /// ctor [new_with_model](https://docs.gtk.org/gtk4/ctor.TreeModelSort.new_with_model.html)
    pub fn newWithModel(_child_model: *gtk.TreeModel) *TreeModelSort {
        const cFn = @extern(*const fn (*gtk.TreeModel) callconv(.c) *TreeModelSort, .{ .name = "gtk_tree_model_sort_new_with_model" });
        const ret = cFn(_child_model);
        return ret;
    }
    /// Deprecated:
    /// method [clear_cache](https://docs.gtk.org/gtk4/method.TreeModelSort.clear_cache.html)
    pub const clearCache = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clearCache(self: *TreeModelSort) void {
            const cFn = @extern(*const fn (*TreeModelSort) callconv(.c) void, .{ .name = "gtk_tree_model_sort_clear_cache" });
            const ret = cFn(self);
            return ret;
        }
    }.clearCache;
    /// Deprecated:
    /// method [convert_child_iter_to_iter](https://docs.gtk.org/gtk4/method.TreeModelSort.convert_child_iter_to_iter.html)
    pub const convertChildIterToIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertChildIterToIter(self: *TreeModelSort, _sort_iter: *gtk.TreeIter, _child_iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModelSort, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_sort_convert_child_iter_to_iter" });
            const ret = cFn(self, _sort_iter, _child_iter);
            return ret;
        }
    }.convertChildIterToIter;
    /// Deprecated:
    /// method [convert_child_path_to_path](https://docs.gtk.org/gtk4/method.TreeModelSort.convert_child_path_to_path.html)
    pub const convertChildPathToPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertChildPathToPath(self: *TreeModelSort, _child_path: *gtk.TreePath) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*TreeModelSort, *gtk.TreePath) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_tree_model_sort_convert_child_path_to_path" });
            const ret = cFn(self, _child_path);
            return ret;
        }
    }.convertChildPathToPath;
    /// Deprecated:
    /// method [convert_iter_to_child_iter](https://docs.gtk.org/gtk4/method.TreeModelSort.convert_iter_to_child_iter.html)
    pub const convertIterToChildIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertIterToChildIter(self: *TreeModelSort, _child_iter: *gtk.TreeIter, _sorted_iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeModelSort, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_model_sort_convert_iter_to_child_iter" });
            const ret = cFn(self, _child_iter, _sorted_iter);
            return ret;
        }
    }.convertIterToChildIter;
    /// Deprecated:
    /// method [convert_path_to_child_path](https://docs.gtk.org/gtk4/method.TreeModelSort.convert_path_to_child_path.html)
    pub const convertPathToChildPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertPathToChildPath(self: *TreeModelSort, _sorted_path: *gtk.TreePath) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*TreeModelSort, *gtk.TreePath) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_tree_model_sort_convert_path_to_child_path" });
            const ret = cFn(self, _sorted_path);
            return ret;
        }
    }.convertPathToChildPath;
    /// method [get_model](https://docs.gtk.org/gtk4/method.TreeModelSort.get_model.html)
    pub fn getModel(self: *TreeModelSort) *gtk.TreeModel {
        const cFn = @extern(*const fn (*TreeModelSort) callconv(.c) *gtk.TreeModel, .{ .name = "gtk_tree_model_sort_get_model" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [iter_is_valid](https://docs.gtk.org/gtk4/method.TreeModelSort.iter_is_valid.html)
    pub const iterIsValid = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterIsValid(self: *TreeModelSort, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeModelSort, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_model_sort_iter_is_valid" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterIsValid;
    /// Deprecated:
    /// method [reset_default_sort_func](https://docs.gtk.org/gtk4/method.TreeModelSort.reset_default_sort_func.html)
    pub const resetDefaultSortFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn resetDefaultSortFunc(self: *TreeModelSort) void {
            const cFn = @extern(*const fn (*TreeModelSort) callconv(.c) void, .{ .name = "gtk_tree_model_sort_reset_default_sort_func" });
            const ret = cFn(self);
            return ret;
        }
    }.resetDefaultSortFunc;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_model_sort_get_type" });
        return cFn();
    }
};
pub const TreeModelSortClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const TreeModelSortPrivate = opaque {};
/// Deprecated:
/// Struct [TreePath](https://docs.gtk.org/gtk4/struct.TreePath.html)
pub const TreePath = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreePath.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *TreePath {
            const cFn = @extern(*const fn () callconv(.c) *TreePath, .{ .name = "gtk_tree_path_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_first](https://docs.gtk.org/gtk4/ctor.TreePath.new_first.html)
    pub const newFirst = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFirst() *TreePath {
            const cFn = @extern(*const fn () callconv(.c) *TreePath, .{ .name = "gtk_tree_path_new_first" });
            const ret = cFn();
            return ret;
        }
    }.newFirst;
    /// Deprecated:
    /// ctor [new_from_indices](https://docs.gtk.org/gtk4/ctor.TreePath.new_from_indices.html)
    pub const newFromIndices = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromIndices(_indicess: []i32) *TreePath {
            const _indices = _indicess.ptr;
            const _length: u64 = @intCast(_indicess.len);
            const cFn = @extern(*const fn ([*]i32, u64) callconv(.c) *TreePath, .{ .name = "gtk_tree_path_new_from_indicesv" });
            const ret = cFn(_indices, _length);
            return ret;
        }
    }.newFromIndices;
    /// Deprecated:
    /// ctor [new_from_string](https://docs.gtk.org/gtk4/ctor.TreePath.new_from_string.html)
    pub const newFromString = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newFromString(_path: [*:0]const u8) ?*TreePath {
            const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) ?*TreePath, .{ .name = "gtk_tree_path_new_from_string" });
            const ret = cFn(_path);
            return ret;
        }
    }.newFromString;
    /// Deprecated:
    /// method [append_index](https://docs.gtk.org/gtk4/method.TreePath.append_index.html)
    pub const appendIndex = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendIndex(self: *TreePath, _index_: i32) void {
            const cFn = @extern(*const fn (*TreePath, i32) callconv(.c) void, .{ .name = "gtk_tree_path_append_index" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.appendIndex;
    /// Deprecated:
    /// method [compare](https://docs.gtk.org/gtk4/method.TreePath.compare.html)
    pub const compare = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn compare(self: *TreePath, _b: *gtk.TreePath) i32 {
            const cFn = @extern(*const fn (*TreePath, *gtk.TreePath) callconv(.c) i32, .{ .name = "gtk_tree_path_compare" });
            const ret = cFn(self, _b);
            return ret;
        }
    }.compare;
    /// Deprecated:
    /// method [copy](https://docs.gtk.org/gtk4/method.TreePath.copy.html)
    pub const copy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn copy(self: *TreePath) *gtk.TreePath {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) *gtk.TreePath, .{ .name = "gtk_tree_path_copy" });
            const ret = cFn(self);
            return ret;
        }
    }.copy;
    /// Deprecated:
    /// method [down](https://docs.gtk.org/gtk4/method.TreePath.down.html)
    pub const down = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn down(self: *TreePath) void {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) void, .{ .name = "gtk_tree_path_down" });
            const ret = cFn(self);
            return ret;
        }
    }.down;
    /// Deprecated:
    /// method [free](https://docs.gtk.org/gtk4/method.TreePath.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *TreePath) void {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) void, .{ .name = "gtk_tree_path_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
    /// Deprecated:
    /// method [get_depth](https://docs.gtk.org/gtk4/method.TreePath.get_depth.html)
    pub const getDepth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDepth(self: *TreePath) i32 {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) i32, .{ .name = "gtk_tree_path_get_depth" });
            const ret = cFn(self);
            return ret;
        }
    }.getDepth;
    /// Deprecated:
    /// method [get_indices](https://docs.gtk.org/gtk4/method.TreePath.get_indices.html)
    pub const getIndices = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getIndices(self: *TreePath) struct {
            ret: ?[*]i32,
            depth: i32,
        } {
            var depth_out: i32 = undefined;
            const _depth = &depth_out;
            const cFn = @extern(*const fn (*TreePath, ?*i32) callconv(.c) ?[*]i32, .{ .name = "gtk_tree_path_get_indices_with_depth" });
            const ret = cFn(self, _depth);
            return .{ .ret = ret, .depth = depth_out };
        }
    }.getIndices;
    /// Deprecated:
    /// method [is_ancestor](https://docs.gtk.org/gtk4/method.TreePath.is_ancestor.html)
    pub const isAncestor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isAncestor(self: *TreePath, _descendant: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreePath, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_path_is_ancestor" });
            const ret = cFn(self, _descendant);
            return ret;
        }
    }.isAncestor;
    /// Deprecated:
    /// method [is_descendant](https://docs.gtk.org/gtk4/method.TreePath.is_descendant.html)
    pub const isDescendant = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isDescendant(self: *TreePath, _ancestor: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreePath, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_path_is_descendant" });
            const ret = cFn(self, _ancestor);
            return ret;
        }
    }.isDescendant;
    /// Deprecated:
    /// method [next](https://docs.gtk.org/gtk4/method.TreePath.next.html)
    pub const next = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn next(self: *TreePath) void {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) void, .{ .name = "gtk_tree_path_next" });
            const ret = cFn(self);
            return ret;
        }
    }.next;
    /// Deprecated:
    /// method [prepend_index](https://docs.gtk.org/gtk4/method.TreePath.prepend_index.html)
    pub const prependIndex = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prependIndex(self: *TreePath, _index_: i32) void {
            const cFn = @extern(*const fn (*TreePath, i32) callconv(.c) void, .{ .name = "gtk_tree_path_prepend_index" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.prependIndex;
    /// Deprecated:
    /// method [prev](https://docs.gtk.org/gtk4/method.TreePath.prev.html)
    pub const prev = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prev(self: *TreePath) bool {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) bool, .{ .name = "gtk_tree_path_prev" });
            const ret = cFn(self);
            return ret;
        }
    }.prev;
    /// Deprecated:
    /// method [to_string](https://docs.gtk.org/gtk4/method.TreePath.to_string.html)
    pub const toString = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn toString(self: *TreePath) ?[*:0]u8 {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) ?[*:0]u8, .{ .name = "gtk_tree_path_to_string" });
            const ret = cFn(self);
            return ret;
        }
    }.toString;
    /// Deprecated:
    /// method [up](https://docs.gtk.org/gtk4/method.TreePath.up.html)
    pub const up = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn up(self: *TreePath) bool {
            const cFn = @extern(*const fn (*TreePath) callconv(.c) bool, .{ .name = "gtk_tree_path_up" });
            const ret = cFn(self);
            return ret;
        }
    }.up;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_path_get_type" });
        return cFn();
    }
};
/// Struct [TreeRowData](https://docs.gtk.org/gtk4/struct.TreeRowData.html)
pub const TreeRowData = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_row_data_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Struct [TreeRowReference](https://docs.gtk.org/gtk4/struct.TreeRowReference.html)
pub const TreeRowReference = if (config.disable_deprecated) core.Deprecated else opaque {
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeRowReference.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_model: *gtk.TreeModel, _path: *gtk.TreePath) ?*TreeRowReference {
            const cFn = @extern(*const fn (*gtk.TreeModel, *gtk.TreePath) callconv(.c) ?*TreeRowReference, .{ .name = "gtk_tree_row_reference_new" });
            const ret = cFn(_model, _path);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_proxy](https://docs.gtk.org/gtk4/ctor.TreeRowReference.new_proxy.html)
    pub const newProxy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newProxy(_proxy: *gobject.Object, _model: *gtk.TreeModel, _path: *gtk.TreePath) ?*TreeRowReference {
            const cFn = @extern(*const fn (*gobject.Object, *gtk.TreeModel, *gtk.TreePath) callconv(.c) ?*TreeRowReference, .{ .name = "gtk_tree_row_reference_new_proxy" });
            const ret = cFn(_proxy, _model, _path);
            return ret;
        }
    }.newProxy;
    /// Deprecated:
    /// method [copy](https://docs.gtk.org/gtk4/method.TreeRowReference.copy.html)
    pub const copy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn copy(self: *TreeRowReference) *gtk.TreeRowReference {
            const cFn = @extern(*const fn (*TreeRowReference) callconv(.c) *gtk.TreeRowReference, .{ .name = "gtk_tree_row_reference_copy" });
            const ret = cFn(self);
            return ret;
        }
    }.copy;
    /// Deprecated:
    /// method [free](https://docs.gtk.org/gtk4/method.TreeRowReference.free.html)
    pub const free = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn free(self: *TreeRowReference) void {
            const cFn = @extern(*const fn (*TreeRowReference) callconv(.c) void, .{ .name = "gtk_tree_row_reference_free" });
            const ret = cFn(self);
            return ret;
        }
    }.free;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.TreeRowReference.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *TreeRowReference) *gtk.TreeModel {
            const cFn = @extern(*const fn (*TreeRowReference) callconv(.c) *gtk.TreeModel, .{ .name = "gtk_tree_row_reference_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [get_path](https://docs.gtk.org/gtk4/method.TreeRowReference.get_path.html)
    pub const getPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPath(self: *TreeRowReference) ?*gtk.TreePath {
            const cFn = @extern(*const fn (*TreeRowReference) callconv(.c) ?*gtk.TreePath, .{ .name = "gtk_tree_row_reference_get_path" });
            const ret = cFn(self);
            return ret;
        }
    }.getPath;
    /// Deprecated:
    /// method [valid](https://docs.gtk.org/gtk4/method.TreeRowReference.valid.html)
    pub const valid = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn valid(self: *TreeRowReference) bool {
            const cFn = @extern(*const fn (*TreeRowReference) callconv(.c) bool, .{ .name = "gtk_tree_row_reference_valid" });
            const ret = cFn(self);
            return ret;
        }
    }.valid;
    /// Deprecated:
    /// type func [deleted](https://docs.gtk.org/gtk4/type_func.TreeRowReference.deleted.html)
    pub const deleted = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn deleted(_proxy: *gobject.Object, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*gobject.Object, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_row_reference_deleted" });
            const ret = cFn(_proxy, _path);
            return ret;
        }
    }.deleted;
    /// Deprecated:
    /// type func [inserted](https://docs.gtk.org/gtk4/type_func.TreeRowReference.inserted.html)
    pub const inserted = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn inserted(_proxy: *gobject.Object, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*gobject.Object, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_row_reference_inserted" });
            const ret = cFn(_proxy, _path);
            return ret;
        }
    }.inserted;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_row_reference_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [TreeSelection](https://docs.gtk.org/gtk4/class.TreeSelection.html)
/// - property [mode](https://docs.gtk.org/gtk4/property.TreeSelection.mode.html): (rw) `gtk.SelectionMode`
pub const TreeSelection = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Parent = gobject.Object;
    /// Deprecated:
    /// method [count_selected_rows](https://docs.gtk.org/gtk4/method.TreeSelection.count_selected_rows.html)
    pub const countSelectedRows = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn countSelectedRows(self: *TreeSelection) i32 {
            const cFn = @extern(*const fn (*TreeSelection) callconv(.c) i32, .{ .name = "gtk_tree_selection_count_selected_rows" });
            const ret = cFn(self);
            return ret;
        }
    }.countSelectedRows;
    /// Deprecated:
    /// method [get_mode](https://docs.gtk.org/gtk4/method.TreeSelection.get_mode.html)
    pub const getMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMode(self: *TreeSelection) gtk.SelectionMode {
            const cFn = @extern(*const fn (*TreeSelection) callconv(.c) gtk.SelectionMode, .{ .name = "gtk_tree_selection_get_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getMode;
    /// Deprecated:
    /// method [get_selected](https://docs.gtk.org/gtk4/method.TreeSelection.get_selected.html)
    pub const getSelected = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelected(self: *TreeSelection, _iter: ?*gtk.TreeIter) ?*gtk.TreeModel {
            var model_out: *gtk.TreeModel = undefined;
            const _model = &model_out;
            const cFn = @extern(*const fn (*TreeSelection, ?**gtk.TreeModel, ?*gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_selection_get_selected" });
            const ret = cFn(self, _model, _iter);
            if (!ret) return null;
            return model_out;
        }
    }.getSelected;
    /// Deprecated:
    /// method [get_selected_rows](https://docs.gtk.org/gtk4/method.TreeSelection.get_selected_rows.html)
    pub const getSelectedRows = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelectedRows(self: *TreeSelection) struct {
            ret: ?*core.List,
            model: *gtk.TreeModel,
        } {
            var model_out: *gtk.TreeModel = undefined;
            const _model = &model_out;
            const cFn = @extern(*const fn (*TreeSelection, ?**gtk.TreeModel) callconv(.c) ?*core.List, .{ .name = "gtk_tree_selection_get_selected_rows" });
            const ret = cFn(self, _model);
            return .{ .ret = ret, .model = model_out };
        }
    }.getSelectedRows;
    /// Deprecated:
    /// method [get_tree_view](https://docs.gtk.org/gtk4/method.TreeSelection.get_tree_view.html)
    pub const getTreeView = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTreeView(self: *TreeSelection) *gtk.TreeView {
            const cFn = @extern(*const fn (*TreeSelection) callconv(.c) *gtk.TreeView, .{ .name = "gtk_tree_selection_get_tree_view" });
            const ret = cFn(self);
            return ret;
        }
    }.getTreeView;
    /// Deprecated:
    /// method [iter_is_selected](https://docs.gtk.org/gtk4/method.TreeSelection.iter_is_selected.html)
    pub const iterIsSelected = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterIsSelected(self: *TreeSelection, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_selection_iter_is_selected" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterIsSelected;
    /// Deprecated:
    /// method [path_is_selected](https://docs.gtk.org/gtk4/method.TreeSelection.path_is_selected.html)
    pub const pathIsSelected = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn pathIsSelected(self: *TreeSelection, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_selection_path_is_selected" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.pathIsSelected;
    /// Deprecated:
    /// method [select_all](https://docs.gtk.org/gtk4/method.TreeSelection.select_all.html)
    pub const selectAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectAll(self: *TreeSelection) void {
            const cFn = @extern(*const fn (*TreeSelection) callconv(.c) void, .{ .name = "gtk_tree_selection_select_all" });
            const ret = cFn(self);
            return ret;
        }
    }.selectAll;
    /// Deprecated:
    /// method [select_iter](https://docs.gtk.org/gtk4/method.TreeSelection.select_iter.html)
    pub const selectIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectIter(self: *TreeSelection, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_selection_select_iter" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.selectIter;
    /// Deprecated:
    /// method [select_path](https://docs.gtk.org/gtk4/method.TreeSelection.select_path.html)
    pub const selectPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectPath(self: *TreeSelection, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_selection_select_path" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.selectPath;
    /// Deprecated:
    /// method [select_range](https://docs.gtk.org/gtk4/method.TreeSelection.select_range.html)
    pub const selectRange = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectRange(self: *TreeSelection, _start_path: *gtk.TreePath, _end_path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreePath, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_selection_select_range" });
            const ret = cFn(self, _start_path, _end_path);
            return ret;
        }
    }.selectRange;
    /// Deprecated:
    /// method [selected_foreach](https://docs.gtk.org/gtk4/method.TreeSelection.selected_foreach.html)
    pub const selectedForeach = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn selectedForeach(self: *TreeSelection, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TreeModel, *gtk.TreePath, *gtk.TreeIter });
            defer closure_func.deinit();
            const _func: gtk.TreeSelectionForeachFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*TreeSelection, gtk.TreeSelectionForeachFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_tree_selection_selected_foreach" });
            const ret = cFn(self, _func, @ptrCast(_data));
            return ret;
        }
    }.selectedForeach;
    /// Deprecated:
    /// method [set_mode](https://docs.gtk.org/gtk4/method.TreeSelection.set_mode.html)
    pub const setMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMode(self: *TreeSelection, _type: gtk.SelectionMode) void {
            const cFn = @extern(*const fn (*TreeSelection, gtk.SelectionMode) callconv(.c) void, .{ .name = "gtk_tree_selection_set_mode" });
            const ret = cFn(self, _type);
            return ret;
        }
    }.setMode;
    /// Deprecated:
    /// method [set_select_function](https://docs.gtk.org/gtk4/method.TreeSelection.set_select_function.html)
    pub const setSelectFunction = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSelectFunction(self: *TreeSelection, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeSelection, *gtk.TreeModel, *gtk.TreePath, bool });
            const _func: ?gtk.TreeSelectionFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeSelection, ?gtk.TreeSelectionFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_selection_set_select_function" });
            const ret = cFn(self, _func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setSelectFunction;
    /// Deprecated:
    /// method [unselect_all](https://docs.gtk.org/gtk4/method.TreeSelection.unselect_all.html)
    pub const unselectAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectAll(self: *TreeSelection) void {
            const cFn = @extern(*const fn (*TreeSelection) callconv(.c) void, .{ .name = "gtk_tree_selection_unselect_all" });
            const ret = cFn(self);
            return ret;
        }
    }.unselectAll;
    /// Deprecated:
    /// method [unselect_iter](https://docs.gtk.org/gtk4/method.TreeSelection.unselect_iter.html)
    pub const unselectIter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectIter(self: *TreeSelection, _iter: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_selection_unselect_iter" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.unselectIter;
    /// Deprecated:
    /// method [unselect_path](https://docs.gtk.org/gtk4/method.TreeSelection.unselect_path.html)
    pub const unselectPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectPath(self: *TreeSelection, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_selection_unselect_path" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.unselectPath;
    /// Deprecated:
    /// method [unselect_range](https://docs.gtk.org/gtk4/method.TreeSelection.unselect_range.html)
    pub const unselectRange = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unselectRange(self: *TreeSelection, _start_path: *gtk.TreePath, _end_path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeSelection, *gtk.TreePath, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_selection_unselect_range" });
            const ret = cFn(self, _start_path, _end_path);
            return ret;
        }
    }.unselectRange;
    /// signal [changed](https://docs.gtk.org/gtk4/signal.TreeSelection.changed.html)
    pub fn connectChanged(self: *TreeSelection, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("changed", handler, args, flags, &.{ void, *TreeSelection });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_selection_get_type" });
        return cFn();
    }
};
/// callback [TreeSelectionForeachFunc](https://docs.gtk.org/gtk4/callback.TreeSelectionForeachFunc.html)
pub const TreeSelectionForeachFunc = *const fn (_model: *gtk.TreeModel, _path: *gtk.TreePath, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) void;
/// callback [TreeSelectionFunc](https://docs.gtk.org/gtk4/callback.TreeSelectionFunc.html)
pub const TreeSelectionFunc = *const fn (_selection: *gtk.TreeSelection, _model: *gtk.TreeModel, _path: *gtk.TreePath, _path_currently_selected: bool, _data: ?*anyopaque) callconv(.c) bool;
/// Deprecated:
/// Iface [TreeSortable](https://docs.gtk.org/gtk4/iface.TreeSortable.html)
pub const TreeSortable = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Prerequisites = [_]type{gtk.TreeModel};
    /// Deprecated:
    /// method [get_sort_column_id](https://docs.gtk.org/gtk4/method.TreeSortable.get_sort_column_id.html)
    pub const getSortColumnId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSortColumnId(self: *TreeSortable) ?struct {
            sort_column_id: i32,
            order: gtk.SortType,
        } {
            var sort_column_id_out: i32 = undefined;
            const _sort_column_id = &sort_column_id_out;
            var order_out: gtk.SortType = undefined;
            const _order = &order_out;
            const cFn = @extern(*const fn (*TreeSortable, *i32, *gtk.SortType) callconv(.c) bool, .{ .name = "gtk_tree_sortable_get_sort_column_id" });
            const ret = cFn(self, _sort_column_id, _order);
            if (!ret) return null;
            return .{ .sort_column_id = sort_column_id_out, .order = order_out };
        }
    }.getSortColumnId;
    /// Deprecated:
    /// method [has_default_sort_func](https://docs.gtk.org/gtk4/method.TreeSortable.has_default_sort_func.html)
    pub const hasDefaultSortFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn hasDefaultSortFunc(self: *TreeSortable) bool {
            const cFn = @extern(*const fn (*TreeSortable) callconv(.c) bool, .{ .name = "gtk_tree_sortable_has_default_sort_func" });
            const ret = cFn(self);
            return ret;
        }
    }.hasDefaultSortFunc;
    /// Deprecated:
    /// method [set_default_sort_func](https://docs.gtk.org/gtk4/method.TreeSortable.set_default_sort_func.html)
    pub const setDefaultSortFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDefaultSortFunc(self: *TreeSortable, sort_func: anytype, sort_func_args: anytype) void {
            var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, *gtk.TreeModel, *gtk.TreeIter, *gtk.TreeIter });
            const _sort_func: gtk.TreeIterCompareFunc = @ptrCast(closure_sort_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
            const cFn = @extern(*const fn (*TreeSortable, gtk.TreeIterCompareFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_sortable_set_default_sort_func" });
            const ret = cFn(self, _sort_func, @ptrCast(_user_data), _destroy);
            return ret;
        }
    }.setDefaultSortFunc;
    /// Deprecated:
    /// method [set_sort_column_id](https://docs.gtk.org/gtk4/method.TreeSortable.set_sort_column_id.html)
    pub const setSortColumnId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSortColumnId(self: *TreeSortable, _sort_column_id: i32, _order: gtk.SortType) void {
            const cFn = @extern(*const fn (*TreeSortable, i32, gtk.SortType) callconv(.c) void, .{ .name = "gtk_tree_sortable_set_sort_column_id" });
            const ret = cFn(self, _sort_column_id, _order);
            return ret;
        }
    }.setSortColumnId;
    /// Deprecated:
    /// method [set_sort_func](https://docs.gtk.org/gtk4/method.TreeSortable.set_sort_func.html)
    pub const setSortFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSortFunc(self: *TreeSortable, _sort_column_id: i32, sort_func: anytype, sort_func_args: anytype) void {
            var closure_sort_func = core.zig_closure(sort_func, sort_func_args, &.{ i32, *gtk.TreeModel, *gtk.TreeIter, *gtk.TreeIter });
            const _sort_func: gtk.TreeIterCompareFunc = @ptrCast(closure_sort_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_sort_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_sort_func.c_destroy());
            const cFn = @extern(*const fn (*TreeSortable, i32, gtk.TreeIterCompareFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_sortable_set_sort_func" });
            const ret = cFn(self, _sort_column_id, _sort_func, @ptrCast(_user_data), _destroy);
            return ret;
        }
    }.setSortFunc;
    /// Deprecated:
    /// method [sort_column_changed](https://docs.gtk.org/gtk4/method.TreeSortable.sort_column_changed.html)
    pub const sortColumnChanged = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn sortColumnChanged(self: *TreeSortable) void {
            const cFn = @extern(*const fn (*TreeSortable) callconv(.c) void, .{ .name = "gtk_tree_sortable_sort_column_changed" });
            const ret = cFn(self);
            return ret;
        }
    }.sortColumnChanged;
    /// vfunc [get_sort_column_id](https://docs.gtk.org/gtk4/vfunc.TreeSortable.get_sort_column_id.html)
    pub fn getSortColumnIdV(self: *TreeSortable, _sort_column_id: *i32, _order: *gtk.SortType) bool {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_sort_column_id.?;
        const ret = vFn(self, _sort_column_id, _order);
        return ret;
    }
    /// vfunc [has_default_sort_func](https://docs.gtk.org/gtk4/vfunc.TreeSortable.has_default_sort_func.html)
    pub fn hasDefaultSortFuncV(self: *TreeSortable) bool {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.has_default_sort_func.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_default_sort_func](https://docs.gtk.org/gtk4/vfunc.TreeSortable.set_default_sort_func.html)
    pub fn setDefaultSortFuncV(self: *TreeSortable, _sort_func: gtk.TreeIterCompareFunc, _user_data: ?*anyopaque, _destroy: ?glib.DestroyNotify) void {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_default_sort_func.?;
        const ret = vFn(self, _sort_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// vfunc [set_sort_column_id](https://docs.gtk.org/gtk4/vfunc.TreeSortable.set_sort_column_id.html)
    pub fn setSortColumnIdV(self: *TreeSortable, _sort_column_id: i32, _order: gtk.SortType) void {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_sort_column_id.?;
        const ret = vFn(self, _sort_column_id, _order);
        return ret;
    }
    /// vfunc [set_sort_func](https://docs.gtk.org/gtk4/vfunc.TreeSortable.set_sort_func.html)
    pub fn setSortFuncV(self: *TreeSortable, _sort_column_id: i32, _sort_func: gtk.TreeIterCompareFunc, _user_data: ?*anyopaque, _destroy: ?glib.DestroyNotify) void {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_sort_func.?;
        const ret = vFn(self, _sort_column_id, _sort_func, @ptrCast(_user_data), _destroy);
        return ret;
    }
    /// vfunc [sort_column_changed](https://docs.gtk.org/gtk4/vfunc.TreeSortable.sort_column_changed.html)
    pub fn sortColumnChangedV(self: *TreeSortable) void {
        const class: *TreeSortableIface = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.sort_column_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [sort-column-changed](https://docs.gtk.org/gtk4/signal.TreeSortable.sort-column-changed.html)
    pub fn connectSortColumnChanged(self: *TreeSortable, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("sort-column-changed", handler, args, flags, &.{ void, *TreeSortable });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_sortable_get_type" });
        return cFn();
    }
};
/// Struct [TreeSortableIface](https://docs.gtk.org/gtk4/struct.TreeSortableIface.html)
pub const TreeSortableIface = extern struct {
    g_iface: gobject.TypeInterface,
    sort_column_changed: ?*const fn (_sortable: *gtk.TreeSortable) callconv(.c) void,
    get_sort_column_id: ?*const fn (_sortable: *gtk.TreeSortable, _sort_column_id: *i32, _order: *gtk.SortType) callconv(.c) bool,
    set_sort_column_id: ?*const fn (_sortable: *gtk.TreeSortable, _sort_column_id: i32, _order: gtk.SortType) callconv(.c) void,
    set_sort_func: ?*const fn (_sortable: *gtk.TreeSortable, _sort_column_id: i32, _sort_func: gtk.TreeIterCompareFunc, _user_data: ?*anyopaque, _destroy: ?glib.DestroyNotify) callconv(.c) void,
    set_default_sort_func: ?*const fn (_sortable: *gtk.TreeSortable, _sort_func: gtk.TreeIterCompareFunc, _user_data: ?*anyopaque, _destroy: ?glib.DestroyNotify) callconv(.c) void,
    has_default_sort_func: ?*const fn (_sortable: *gtk.TreeSortable) callconv(.c) bool,
};
/// Deprecated:
/// Class [TreeStore](https://docs.gtk.org/gtk4/class.TreeStore.html)
pub const TreeStore = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gobject.Object,
    priv: ?*gtk.TreeStorePrivate,
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.TreeDragDest, gtk.TreeDragSource, gtk.TreeModel, gtk.TreeSortable };
    pub const Parent = gobject.Object;
    pub const Class = gtk.TreeStoreClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeStore.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_typess: []core.Type) *TreeStore {
            const _n_columns: i32 = @intCast(_typess.len);
            const _types = _typess.ptr;
            const cFn = @extern(*const fn (i32, [*]core.Type) callconv(.c) *TreeStore, .{ .name = "gtk_tree_store_newv" });
            const ret = cFn(_n_columns, _types);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [append](https://docs.gtk.org/gtk4/method.TreeStore.append.html)
    pub const append = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn append(self: *TreeStore, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_append" });
            const ret = cFn(self, _iter, _parent);
            return ret;
        }
    }.append;
    /// Deprecated:
    /// method [clear](https://docs.gtk.org/gtk4/method.TreeStore.clear.html)
    pub const clear = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clear(self: *TreeStore) void {
            const cFn = @extern(*const fn (*TreeStore) callconv(.c) void, .{ .name = "gtk_tree_store_clear" });
            const ret = cFn(self);
            return ret;
        }
    }.clear;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/gtk4/method.TreeStore.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *TreeStore, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _position: i32) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter, i32) callconv(.c) void, .{ .name = "gtk_tree_store_insert" });
            const ret = cFn(self, _iter, _parent, _position);
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [insert_after](https://docs.gtk.org/gtk4/method.TreeStore.insert_after.html)
    pub const insertAfter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertAfter(self: *TreeStore, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _sibling: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_insert_after" });
            const ret = cFn(self, _iter, _parent, _sibling);
            return ret;
        }
    }.insertAfter;
    /// Deprecated:
    /// method [insert_before](https://docs.gtk.org/gtk4/method.TreeStore.insert_before.html)
    pub const insertBefore = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertBefore(self: *TreeStore, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter, _sibling: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_insert_before" });
            const ret = cFn(self, _iter, _parent, _sibling);
            return ret;
        }
    }.insertBefore;
    /// Deprecated:
    /// method [insert_with_values](https://docs.gtk.org/gtk4/method.TreeStore.insert_with_values.html)
    pub const insertWithValues = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertWithValues(self: *TreeStore, _iter: ?*gtk.TreeIter, _parent: ?*gtk.TreeIter, _position: i32, _columnss: []i32, _valuess: []gobject.Value) void {
            const _columns = _columnss.ptr;
            const _values = _valuess.ptr;
            const _n_values: i32 = @intCast(_columnss.len);
            const cFn = @extern(*const fn (*TreeStore, ?*gtk.TreeIter, ?*gtk.TreeIter, i32, [*]i32, [*]gobject.Value, i32) callconv(.c) void, .{ .name = "gtk_tree_store_insert_with_valuesv" });
            const ret = cFn(self, _iter, _parent, _position, _columns, _values, _n_values);
            return ret;
        }
    }.insertWithValues;
    /// Deprecated:
    /// method [is_ancestor](https://docs.gtk.org/gtk4/method.TreeStore.is_ancestor.html)
    pub const isAncestor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isAncestor(self: *TreeStore, _iter: *gtk.TreeIter, _descendant: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_store_is_ancestor" });
            const ret = cFn(self, _iter, _descendant);
            return ret;
        }
    }.isAncestor;
    /// Deprecated:
    /// method [iter_depth](https://docs.gtk.org/gtk4/method.TreeStore.iter_depth.html)
    pub const iterDepth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterDepth(self: *TreeStore, _iter: *gtk.TreeIter) i32 {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter) callconv(.c) i32, .{ .name = "gtk_tree_store_iter_depth" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterDepth;
    /// Deprecated:
    /// method [iter_is_valid](https://docs.gtk.org/gtk4/method.TreeStore.iter_is_valid.html)
    pub const iterIsValid = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn iterIsValid(self: *TreeStore, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_store_iter_is_valid" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.iterIsValid;
    /// Deprecated:
    /// method [move_after](https://docs.gtk.org/gtk4/method.TreeStore.move_after.html)
    pub const moveAfter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn moveAfter(self: *TreeStore, _iter: *gtk.TreeIter, _position: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_move_after" });
            const ret = cFn(self, _iter, _position);
            return ret;
        }
    }.moveAfter;
    /// Deprecated:
    /// method [move_before](https://docs.gtk.org/gtk4/method.TreeStore.move_before.html)
    pub const moveBefore = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn moveBefore(self: *TreeStore, _iter: *gtk.TreeIter, _position: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_move_before" });
            const ret = cFn(self, _iter, _position);
            return ret;
        }
    }.moveBefore;
    /// Deprecated:
    /// method [prepend](https://docs.gtk.org/gtk4/method.TreeStore.prepend.html)
    pub const prepend = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prepend(self: *TreeStore, _iter: *gtk.TreeIter, _parent: ?*gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, ?*gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_prepend" });
            const ret = cFn(self, _iter, _parent);
            return ret;
        }
    }.prepend;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gtk4/method.TreeStore.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *TreeStore, _iter: *gtk.TreeIter) bool {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_store_remove" });
            const ret = cFn(self, _iter);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [set_column_types](https://docs.gtk.org/gtk4/method.TreeStore.set_column_types.html)
    pub const setColumnTypes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setColumnTypes(self: *TreeStore, _typess: []core.Type) void {
            const _n_columns: i32 = @intCast(_typess.len);
            const _types = _typess.ptr;
            const cFn = @extern(*const fn (*TreeStore, i32, [*]core.Type) callconv(.c) void, .{ .name = "gtk_tree_store_set_column_types" });
            const ret = cFn(self, _n_columns, _types);
            return ret;
        }
    }.setColumnTypes;
    /// Deprecated:
    /// method [set_value](https://docs.gtk.org/gtk4/method.TreeStore.set_value.html)
    pub const setValue = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setValue(self: *TreeStore, _iter: *gtk.TreeIter, _column: i32, _value: *gobject.Value) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, i32, *gobject.Value) callconv(.c) void, .{ .name = "gtk_tree_store_set_value" });
            const ret = cFn(self, _iter, _column, _value);
            return ret;
        }
    }.setValue;
    /// Deprecated:
    /// method [set](https://docs.gtk.org/gtk4/method.TreeStore.set.html)
    pub const set = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn set(self: *TreeStore, _iter: *gtk.TreeIter, _columnss: []i32, _valuess: []gobject.Value) void {
            const _columns = _columnss.ptr;
            const _values = _valuess.ptr;
            const _n_values: i32 = @intCast(_columnss.len);
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, [*]i32, [*]gobject.Value, i32) callconv(.c) void, .{ .name = "gtk_tree_store_set_valuesv" });
            const ret = cFn(self, _iter, _columns, _values, _n_values);
            return ret;
        }
    }.set;
    /// Deprecated:
    /// method [swap](https://docs.gtk.org/gtk4/method.TreeStore.swap.html)
    pub const swap = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn swap(self: *TreeStore, _a: *gtk.TreeIter, _b: *gtk.TreeIter) void {
            const cFn = @extern(*const fn (*TreeStore, *gtk.TreeIter, *gtk.TreeIter) callconv(.c) void, .{ .name = "gtk_tree_store_swap" });
            const ret = cFn(self, _a, _b);
            return ret;
        }
    }.swap;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_store_get_type" });
        return cFn();
    }
};
pub const TreeStoreClass = extern struct {
    parent_class: gobject.ObjectClass,
    padding: [8]?*anyopaque,
};
pub const TreeStorePrivate = opaque {};
/// Deprecated:
/// Class [TreeView](https://docs.gtk.org/gtk4/class.TreeView.html)
/// - property [activate-on-single-click](https://docs.gtk.org/gtk4/property.TreeView.activate-on-single-click.html): (rw) `bool`
/// - property [enable-grid-lines](https://docs.gtk.org/gtk4/property.TreeView.enable-grid-lines.html): (rw) `gtk.TreeViewGridLines`
/// - property [enable-search](https://docs.gtk.org/gtk4/property.TreeView.enable-search.html): (rw) `bool`
/// - property [enable-tree-lines](https://docs.gtk.org/gtk4/property.TreeView.enable-tree-lines.html): (rw) `bool`
/// - property [expander-column](https://docs.gtk.org/gtk4/property.TreeView.expander-column.html): (rw) `gtk.TreeViewColumn`
/// - property [fixed-height-mode](https://docs.gtk.org/gtk4/property.TreeView.fixed-height-mode.html): (rw) `bool`
/// - property [headers-clickable](https://docs.gtk.org/gtk4/property.TreeView.headers-clickable.html): (rw) `bool`
/// - property [headers-visible](https://docs.gtk.org/gtk4/property.TreeView.headers-visible.html): (rw) `bool`
/// - property [hover-expand](https://docs.gtk.org/gtk4/property.TreeView.hover-expand.html): (rw) `bool`
/// - property [hover-selection](https://docs.gtk.org/gtk4/property.TreeView.hover-selection.html): (rw) `bool`
/// - property [level-indentation](https://docs.gtk.org/gtk4/property.TreeView.level-indentation.html): (rw) `i32`
/// - property [model](https://docs.gtk.org/gtk4/property.TreeView.model.html): (rw) `gtk.TreeModel`
/// - property [reorderable](https://docs.gtk.org/gtk4/property.TreeView.reorderable.html): (rw) `bool`
/// - property [rubber-banding](https://docs.gtk.org/gtk4/property.TreeView.rubber-banding.html): (rw) `bool`
/// - property [search-column](https://docs.gtk.org/gtk4/property.TreeView.search-column.html): (rw) `i32`
/// - property [show-expanders](https://docs.gtk.org/gtk4/property.TreeView.show-expanders.html): (rw) `bool`
/// - property [tooltip-column](https://docs.gtk.org/gtk4/property.TreeView.tooltip-column.html): (rw) `i32`
pub const TreeView = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.TreeViewClass;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeView.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *TreeView {
            const cFn = @extern(*const fn () callconv(.c) *TreeView, .{ .name = "gtk_tree_view_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_model](https://docs.gtk.org/gtk4/ctor.TreeView.new_with_model.html)
    pub const newWithModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithModel(_model: *gtk.TreeModel) *TreeView {
            const cFn = @extern(*const fn (*gtk.TreeModel) callconv(.c) *TreeView, .{ .name = "gtk_tree_view_new_with_model" });
            const ret = cFn(_model);
            return ret;
        }
    }.newWithModel;
    /// Deprecated:
    /// method [append_column](https://docs.gtk.org/gtk4/method.TreeView.append_column.html)
    pub const appendColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn appendColumn(self: *TreeView, _column: *gtk.TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_append_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.appendColumn;
    /// Deprecated:
    /// method [collapse_all](https://docs.gtk.org/gtk4/method.TreeView.collapse_all.html)
    pub const collapseAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn collapseAll(self: *TreeView) void {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) void, .{ .name = "gtk_tree_view_collapse_all" });
            const ret = cFn(self);
            return ret;
        }
    }.collapseAll;
    /// Deprecated:
    /// method [collapse_row](https://docs.gtk.org/gtk4/method.TreeView.collapse_row.html)
    pub const collapseRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn collapseRow(self: *TreeView, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_view_collapse_row" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.collapseRow;
    /// Deprecated:
    /// method [columns_autosize](https://docs.gtk.org/gtk4/method.TreeView.columns_autosize.html)
    pub const columnsAutosize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn columnsAutosize(self: *TreeView) void {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) void, .{ .name = "gtk_tree_view_columns_autosize" });
            const ret = cFn(self);
            return ret;
        }
    }.columnsAutosize;
    /// Deprecated:
    /// method [convert_bin_window_to_tree_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_bin_window_to_tree_coords.html)
    pub const convertBinWindowToTreeCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertBinWindowToTreeCoords(self: *TreeView, _bx: i32, _by: i32) struct {
            ret: void,
            tx: i32,
            ty: i32,
        } {
            var tx_out: i32 = undefined;
            const _tx = &tx_out;
            var ty_out: i32 = undefined;
            const _ty = &ty_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_bin_window_to_tree_coords" });
            const ret = cFn(self, _bx, _by, _tx, _ty);
            return .{ .ret = ret, .tx = tx_out, .ty = ty_out };
        }
    }.convertBinWindowToTreeCoords;
    /// Deprecated:
    /// method [convert_bin_window_to_widget_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_bin_window_to_widget_coords.html)
    pub const convertBinWindowToWidgetCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertBinWindowToWidgetCoords(self: *TreeView, _bx: i32, _by: i32) struct {
            ret: void,
            wx: i32,
            wy: i32,
        } {
            var wx_out: i32 = undefined;
            const _wx = &wx_out;
            var wy_out: i32 = undefined;
            const _wy = &wy_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_bin_window_to_widget_coords" });
            const ret = cFn(self, _bx, _by, _wx, _wy);
            return .{ .ret = ret, .wx = wx_out, .wy = wy_out };
        }
    }.convertBinWindowToWidgetCoords;
    /// Deprecated:
    /// method [convert_tree_to_bin_window_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_tree_to_bin_window_coords.html)
    pub const convertTreeToBinWindowCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertTreeToBinWindowCoords(self: *TreeView, _tx: i32, _ty: i32) struct {
            ret: void,
            bx: i32,
            by: i32,
        } {
            var bx_out: i32 = undefined;
            const _bx = &bx_out;
            var by_out: i32 = undefined;
            const _by = &by_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_tree_to_bin_window_coords" });
            const ret = cFn(self, _tx, _ty, _bx, _by);
            return .{ .ret = ret, .bx = bx_out, .by = by_out };
        }
    }.convertTreeToBinWindowCoords;
    /// Deprecated:
    /// method [convert_tree_to_widget_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_tree_to_widget_coords.html)
    pub const convertTreeToWidgetCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertTreeToWidgetCoords(self: *TreeView, _tx: i32, _ty: i32) struct {
            ret: void,
            wx: i32,
            wy: i32,
        } {
            var wx_out: i32 = undefined;
            const _wx = &wx_out;
            var wy_out: i32 = undefined;
            const _wy = &wy_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_tree_to_widget_coords" });
            const ret = cFn(self, _tx, _ty, _wx, _wy);
            return .{ .ret = ret, .wx = wx_out, .wy = wy_out };
        }
    }.convertTreeToWidgetCoords;
    /// Deprecated:
    /// method [convert_widget_to_bin_window_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_widget_to_bin_window_coords.html)
    pub const convertWidgetToBinWindowCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertWidgetToBinWindowCoords(self: *TreeView, _wx: i32, _wy: i32) struct {
            ret: void,
            bx: i32,
            by: i32,
        } {
            var bx_out: i32 = undefined;
            const _bx = &bx_out;
            var by_out: i32 = undefined;
            const _by = &by_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_widget_to_bin_window_coords" });
            const ret = cFn(self, _wx, _wy, _bx, _by);
            return .{ .ret = ret, .bx = bx_out, .by = by_out };
        }
    }.convertWidgetToBinWindowCoords;
    /// Deprecated:
    /// method [convert_widget_to_tree_coords](https://docs.gtk.org/gtk4/method.TreeView.convert_widget_to_tree_coords.html)
    pub const convertWidgetToTreeCoords = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn convertWidgetToTreeCoords(self: *TreeView, _wx: i32, _wy: i32) struct {
            ret: void,
            tx: i32,
            ty: i32,
        } {
            var tx_out: i32 = undefined;
            const _tx = &tx_out;
            var ty_out: i32 = undefined;
            const _ty = &ty_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, *i32, *i32) callconv(.c) void, .{ .name = "gtk_tree_view_convert_widget_to_tree_coords" });
            const ret = cFn(self, _wx, _wy, _tx, _ty);
            return .{ .ret = ret, .tx = tx_out, .ty = ty_out };
        }
    }.convertWidgetToTreeCoords;
    /// Deprecated:
    /// method [create_row_drag_icon](https://docs.gtk.org/gtk4/method.TreeView.create_row_drag_icon.html)
    pub const createRowDragIcon = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn createRowDragIcon(self: *TreeView, _path: *gtk.TreePath) ?*gdk.Paintable {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath) callconv(.c) ?*gdk.Paintable, .{ .name = "gtk_tree_view_create_row_drag_icon" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.createRowDragIcon;
    /// Deprecated:
    /// method [enable_model_drag_dest](https://docs.gtk.org/gtk4/method.TreeView.enable_model_drag_dest.html)
    pub const enableModelDragDest = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn enableModelDragDest(self: *TreeView, _formats: *gdk.ContentFormats, _actions: gdk.DragAction) void {
            const cFn = @extern(*const fn (*TreeView, *gdk.ContentFormats, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_tree_view_enable_model_drag_dest" });
            const ret = cFn(self, _formats, _actions);
            return ret;
        }
    }.enableModelDragDest;
    /// Deprecated:
    /// method [enable_model_drag_source](https://docs.gtk.org/gtk4/method.TreeView.enable_model_drag_source.html)
    pub const enableModelDragSource = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn enableModelDragSource(self: *TreeView, _start_button_mask: gdk.ModifierType, _formats: *gdk.ContentFormats, _actions: gdk.DragAction) void {
            const cFn = @extern(*const fn (*TreeView, gdk.ModifierType, *gdk.ContentFormats, gdk.DragAction) callconv(.c) void, .{ .name = "gtk_tree_view_enable_model_drag_source" });
            const ret = cFn(self, _start_button_mask, _formats, _actions);
            return ret;
        }
    }.enableModelDragSource;
    /// Deprecated:
    /// method [expand_all](https://docs.gtk.org/gtk4/method.TreeView.expand_all.html)
    pub const expandAll = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn expandAll(self: *TreeView) void {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) void, .{ .name = "gtk_tree_view_expand_all" });
            const ret = cFn(self);
            return ret;
        }
    }.expandAll;
    /// Deprecated:
    /// method [expand_row](https://docs.gtk.org/gtk4/method.TreeView.expand_row.html)
    pub const expandRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn expandRow(self: *TreeView, _path: *gtk.TreePath, _open_all: bool) bool {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath, bool) callconv(.c) bool, .{ .name = "gtk_tree_view_expand_row" });
            const ret = cFn(self, _path, _open_all);
            return ret;
        }
    }.expandRow;
    /// Deprecated:
    /// method [expand_to_path](https://docs.gtk.org/gtk4/method.TreeView.expand_to_path.html)
    pub const expandToPath = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn expandToPath(self: *TreeView, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_view_expand_to_path" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.expandToPath;
    /// Deprecated:
    /// method [get_activate_on_single_click](https://docs.gtk.org/gtk4/method.TreeView.get_activate_on_single_click.html)
    pub const getActivateOnSingleClick = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getActivateOnSingleClick(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_activate_on_single_click" });
            const ret = cFn(self);
            return ret;
        }
    }.getActivateOnSingleClick;
    /// Deprecated:
    /// method [get_background_area](https://docs.gtk.org/gtk4/method.TreeView.get_background_area.html)
    pub const getBackgroundArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getBackgroundArea(self: *TreeView, _path: ?*gtk.TreePath, _column: ?*gtk.TreeViewColumn, _rect: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreePath, ?*gtk.TreeViewColumn, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_tree_view_get_background_area" });
            const ret = cFn(self, _path, _column, _rect);
            return ret;
        }
    }.getBackgroundArea;
    /// Deprecated:
    /// method [get_cell_area](https://docs.gtk.org/gtk4/method.TreeView.get_cell_area.html)
    pub const getCellArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCellArea(self: *TreeView, _path: ?*gtk.TreePath, _column: ?*gtk.TreeViewColumn, _rect: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreePath, ?*gtk.TreeViewColumn, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_tree_view_get_cell_area" });
            const ret = cFn(self, _path, _column, _rect);
            return ret;
        }
    }.getCellArea;
    /// Deprecated:
    /// method [get_column](https://docs.gtk.org/gtk4/method.TreeView.get_column.html)
    pub const getColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColumn(self: *TreeView, _n: i32) ?*gtk.TreeViewColumn {
            const cFn = @extern(*const fn (*TreeView, i32) callconv(.c) ?*gtk.TreeViewColumn, .{ .name = "gtk_tree_view_get_column" });
            const ret = cFn(self, _n);
            return ret;
        }
    }.getColumn;
    /// Deprecated:
    /// method [get_columns](https://docs.gtk.org/gtk4/method.TreeView.get_columns.html)
    pub const getColumns = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getColumns(self: *TreeView) ?*core.List {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) ?*core.List, .{ .name = "gtk_tree_view_get_columns" });
            const ret = cFn(self);
            return ret;
        }
    }.getColumns;
    /// Deprecated:
    /// method [get_cursor](https://docs.gtk.org/gtk4/method.TreeView.get_cursor.html)
    pub const getCursor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getCursor(self: *TreeView) struct {
            ret: void,
            path: ?*gtk.TreePath,
            focus_column: ?*gtk.TreeViewColumn,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var focus_column_out: ?*gtk.TreeViewColumn = undefined;
            const _focus_column = &focus_column_out;
            const cFn = @extern(*const fn (*TreeView, ?*?*gtk.TreePath, ?*?*gtk.TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_get_cursor" });
            const ret = cFn(self, _path, _focus_column);
            return .{ .ret = ret, .path = path_out, .focus_column = focus_column_out };
        }
    }.getCursor;
    /// Deprecated:
    /// method [get_dest_row_at_pos](https://docs.gtk.org/gtk4/method.TreeView.get_dest_row_at_pos.html)
    pub const getDestRowAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDestRowAtPos(self: *TreeView, _drag_x: i32, _drag_y: i32) ?struct {
            path: ?*gtk.TreePath,
            pos: gtk.TreeViewDropPosition,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var pos_out: gtk.TreeViewDropPosition = undefined;
            const _pos = &pos_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, ?*?*gtk.TreePath, ?*gtk.TreeViewDropPosition) callconv(.c) bool, .{ .name = "gtk_tree_view_get_dest_row_at_pos" });
            const ret = cFn(self, _drag_x, _drag_y, _path, _pos);
            if (!ret) return null;
            return .{ .path = path_out, .pos = pos_out };
        }
    }.getDestRowAtPos;
    /// Deprecated:
    /// method [get_drag_dest_row](https://docs.gtk.org/gtk4/method.TreeView.get_drag_dest_row.html)
    pub const getDragDestRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getDragDestRow(self: *TreeView) struct {
            ret: void,
            path: ?*gtk.TreePath,
            pos: gtk.TreeViewDropPosition,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var pos_out: gtk.TreeViewDropPosition = undefined;
            const _pos = &pos_out;
            const cFn = @extern(*const fn (*TreeView, ?*?*gtk.TreePath, ?*gtk.TreeViewDropPosition) callconv(.c) void, .{ .name = "gtk_tree_view_get_drag_dest_row" });
            const ret = cFn(self, _path, _pos);
            return .{ .ret = ret, .path = path_out, .pos = pos_out };
        }
    }.getDragDestRow;
    /// Deprecated:
    /// method [get_enable_search](https://docs.gtk.org/gtk4/method.TreeView.get_enable_search.html)
    pub const getEnableSearch = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEnableSearch(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_enable_search" });
            const ret = cFn(self);
            return ret;
        }
    }.getEnableSearch;
    /// Deprecated:
    /// method [get_enable_tree_lines](https://docs.gtk.org/gtk4/method.TreeView.get_enable_tree_lines.html)
    pub const getEnableTreeLines = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getEnableTreeLines(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_enable_tree_lines" });
            const ret = cFn(self);
            return ret;
        }
    }.getEnableTreeLines;
    /// Deprecated:
    /// method [get_expander_column](https://docs.gtk.org/gtk4/method.TreeView.get_expander_column.html)
    pub const getExpanderColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getExpanderColumn(self: *TreeView) ?*gtk.TreeViewColumn {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) ?*gtk.TreeViewColumn, .{ .name = "gtk_tree_view_get_expander_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getExpanderColumn;
    /// Deprecated:
    /// method [get_fixed_height_mode](https://docs.gtk.org/gtk4/method.TreeView.get_fixed_height_mode.html)
    pub const getFixedHeightMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFixedHeightMode(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_fixed_height_mode" });
            const ret = cFn(self);
            return ret;
        }
    }.getFixedHeightMode;
    /// Deprecated:
    /// method [get_grid_lines](https://docs.gtk.org/gtk4/method.TreeView.get_grid_lines.html)
    pub const getGridLines = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getGridLines(self: *TreeView) gtk.TreeViewGridLines {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) gtk.TreeViewGridLines, .{ .name = "gtk_tree_view_get_grid_lines" });
            const ret = cFn(self);
            return ret;
        }
    }.getGridLines;
    /// Deprecated:
    /// method [get_headers_clickable](https://docs.gtk.org/gtk4/method.TreeView.get_headers_clickable.html)
    pub const getHeadersClickable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHeadersClickable(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_headers_clickable" });
            const ret = cFn(self);
            return ret;
        }
    }.getHeadersClickable;
    /// Deprecated:
    /// method [get_headers_visible](https://docs.gtk.org/gtk4/method.TreeView.get_headers_visible.html)
    pub const getHeadersVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHeadersVisible(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_headers_visible" });
            const ret = cFn(self);
            return ret;
        }
    }.getHeadersVisible;
    /// Deprecated:
    /// method [get_hover_expand](https://docs.gtk.org/gtk4/method.TreeView.get_hover_expand.html)
    pub const getHoverExpand = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHoverExpand(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_hover_expand" });
            const ret = cFn(self);
            return ret;
        }
    }.getHoverExpand;
    /// Deprecated:
    /// method [get_hover_selection](https://docs.gtk.org/gtk4/method.TreeView.get_hover_selection.html)
    pub const getHoverSelection = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getHoverSelection(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_hover_selection" });
            const ret = cFn(self);
            return ret;
        }
    }.getHoverSelection;
    /// Deprecated:
    /// method [get_level_indentation](https://docs.gtk.org/gtk4/method.TreeView.get_level_indentation.html)
    pub const getLevelIndentation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getLevelIndentation(self: *TreeView) i32 {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) i32, .{ .name = "gtk_tree_view_get_level_indentation" });
            const ret = cFn(self);
            return ret;
        }
    }.getLevelIndentation;
    /// Deprecated:
    /// method [get_model](https://docs.gtk.org/gtk4/method.TreeView.get_model.html)
    pub const getModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getModel(self: *TreeView) ?*gtk.TreeModel {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) ?*gtk.TreeModel, .{ .name = "gtk_tree_view_get_model" });
            const ret = cFn(self);
            return ret;
        }
    }.getModel;
    /// Deprecated:
    /// method [get_n_columns](https://docs.gtk.org/gtk4/method.TreeView.get_n_columns.html)
    pub const getNColumns = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getNColumns(self: *TreeView) u32 {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) u32, .{ .name = "gtk_tree_view_get_n_columns" });
            const ret = cFn(self);
            return ret;
        }
    }.getNColumns;
    /// Deprecated:
    /// method [get_path_at_pos](https://docs.gtk.org/gtk4/method.TreeView.get_path_at_pos.html)
    pub const getPathAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getPathAtPos(self: *TreeView, _x: i32, _y: i32) ?struct {
            path: ?*gtk.TreePath,
            column: ?*gtk.TreeViewColumn,
            cell_x: i32,
            cell_y: i32,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var column_out: ?*gtk.TreeViewColumn = undefined;
            const _column = &column_out;
            var cell_x_out: i32 = undefined;
            const _cell_x = &cell_x_out;
            var cell_y_out: i32 = undefined;
            const _cell_y = &cell_y_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, ?*?*gtk.TreePath, ?*?*gtk.TreeViewColumn, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "gtk_tree_view_get_path_at_pos" });
            const ret = cFn(self, _x, _y, _path, _column, _cell_x, _cell_y);
            if (!ret) return null;
            return .{ .path = path_out, .column = column_out, .cell_x = cell_x_out, .cell_y = cell_y_out };
        }
    }.getPathAtPos;
    /// Deprecated:
    /// method [get_reorderable](https://docs.gtk.org/gtk4/method.TreeView.get_reorderable.html)
    pub const getReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getReorderable(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_reorderable" });
            const ret = cFn(self);
            return ret;
        }
    }.getReorderable;
    /// Deprecated:
    /// method [get_rubber_banding](https://docs.gtk.org/gtk4/method.TreeView.get_rubber_banding.html)
    pub const getRubberBanding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getRubberBanding(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_rubber_banding" });
            const ret = cFn(self);
            return ret;
        }
    }.getRubberBanding;
    /// Deprecated:
    /// method [get_search_column](https://docs.gtk.org/gtk4/method.TreeView.get_search_column.html)
    pub const getSearchColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSearchColumn(self: *TreeView) i32 {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) i32, .{ .name = "gtk_tree_view_get_search_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getSearchColumn;
    /// Deprecated:
    /// method [get_search_entry](https://docs.gtk.org/gtk4/method.TreeView.get_search_entry.html)
    pub const getSearchEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSearchEntry(self: *TreeView) ?*gtk.Editable {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) ?*gtk.Editable, .{ .name = "gtk_tree_view_get_search_entry" });
            const ret = cFn(self);
            return ret;
        }
    }.getSearchEntry;
    /// Deprecated:
    /// method [get_selection](https://docs.gtk.org/gtk4/method.TreeView.get_selection.html)
    pub const getSelection = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSelection(self: *TreeView) *gtk.TreeSelection {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) *gtk.TreeSelection, .{ .name = "gtk_tree_view_get_selection" });
            const ret = cFn(self);
            return ret;
        }
    }.getSelection;
    /// Deprecated:
    /// method [get_show_expanders](https://docs.gtk.org/gtk4/method.TreeView.get_show_expanders.html)
    pub const getShowExpanders = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getShowExpanders(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_get_show_expanders" });
            const ret = cFn(self);
            return ret;
        }
    }.getShowExpanders;
    /// Deprecated:
    /// method [get_tooltip_column](https://docs.gtk.org/gtk4/method.TreeView.get_tooltip_column.html)
    pub const getTooltipColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTooltipColumn(self: *TreeView) i32 {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) i32, .{ .name = "gtk_tree_view_get_tooltip_column" });
            const ret = cFn(self);
            return ret;
        }
    }.getTooltipColumn;
    /// Deprecated:
    /// method [get_tooltip_context](https://docs.gtk.org/gtk4/method.TreeView.get_tooltip_context.html)
    pub const getTooltipContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTooltipContext(self: *TreeView, _x: i32, _y: i32, _keyboard_tip: bool, _iter: ?*gtk.TreeIter) ?struct {
            model: ?*gtk.TreeModel,
            path: *gtk.TreePath,
        } {
            var model_out: ?*gtk.TreeModel = undefined;
            const _model = &model_out;
            var path_out: *gtk.TreePath = undefined;
            const _path = &path_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, bool, ?*?*gtk.TreeModel, ?**gtk.TreePath, ?*gtk.TreeIter) callconv(.c) bool, .{ .name = "gtk_tree_view_get_tooltip_context" });
            const ret = cFn(self, _x, _y, _keyboard_tip, _model, _path, _iter);
            if (!ret) return null;
            return .{ .model = model_out, .path = path_out };
        }
    }.getTooltipContext;
    /// Deprecated:
    /// method [get_visible_range](https://docs.gtk.org/gtk4/method.TreeView.get_visible_range.html)
    pub const getVisibleRange = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisibleRange(self: *TreeView) ?struct {
            start_path: *gtk.TreePath,
            end_path: *gtk.TreePath,
        } {
            var start_path_out: *gtk.TreePath = undefined;
            const _start_path = &start_path_out;
            var end_path_out: *gtk.TreePath = undefined;
            const _end_path = &end_path_out;
            const cFn = @extern(*const fn (*TreeView, ?**gtk.TreePath, ?**gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_view_get_visible_range" });
            const ret = cFn(self, _start_path, _end_path);
            if (!ret) return null;
            return .{ .start_path = start_path_out, .end_path = end_path_out };
        }
    }.getVisibleRange;
    /// Deprecated:
    /// method [get_visible_rect](https://docs.gtk.org/gtk4/method.TreeView.get_visible_rect.html)
    pub const getVisibleRect = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisibleRect(self: *TreeView, _visible_rect: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*TreeView, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_tree_view_get_visible_rect" });
            const ret = cFn(self, _visible_rect);
            return ret;
        }
    }.getVisibleRect;
    /// Deprecated:
    /// method [insert_column](https://docs.gtk.org/gtk4/method.TreeView.insert_column.html)
    pub const insertColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertColumn(self: *TreeView, _column: *gtk.TreeViewColumn, _position: i32) i32 {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreeViewColumn, i32) callconv(.c) i32, .{ .name = "gtk_tree_view_insert_column" });
            const ret = cFn(self, _column, _position);
            return ret;
        }
    }.insertColumn;
    /// Deprecated:
    /// method [insert_column_with_data_func](https://docs.gtk.org/gtk4/method.TreeView.insert_column_with_data_func.html)
    pub const insertColumnWithDataFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insertColumnWithDataFunc(self: *TreeView, _position: i32, _title: [*:0]const u8, _cell: *gtk.CellRenderer, func: anytype, func_args: anytype) i32 {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TreeViewColumn, *gtk.CellRenderer, *gtk.TreeModel, *gtk.TreeIter });
            const _func: gtk.TreeCellDataFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _dnotify: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeView, i32, [*:0]const u8, *gtk.CellRenderer, gtk.TreeCellDataFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) i32, .{ .name = "gtk_tree_view_insert_column_with_data_func" });
            const ret = cFn(self, _position, _title, _cell, _func, @ptrCast(_data), _dnotify);
            return ret;
        }
    }.insertColumnWithDataFunc;
    /// Deprecated:
    /// method [is_blank_at_pos](https://docs.gtk.org/gtk4/method.TreeView.is_blank_at_pos.html)
    pub const isBlankAtPos = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isBlankAtPos(self: *TreeView, _x: i32, _y: i32) struct {
            ret: bool,
            path: ?*gtk.TreePath,
            column: ?*gtk.TreeViewColumn,
            cell_x: i32,
            cell_y: i32,
        } {
            var path_out: ?*gtk.TreePath = undefined;
            const _path = &path_out;
            var column_out: ?*gtk.TreeViewColumn = undefined;
            const _column = &column_out;
            var cell_x_out: i32 = undefined;
            const _cell_x = &cell_x_out;
            var cell_y_out: i32 = undefined;
            const _cell_y = &cell_y_out;
            const cFn = @extern(*const fn (*TreeView, i32, i32, ?*?*gtk.TreePath, ?*?*gtk.TreeViewColumn, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "gtk_tree_view_is_blank_at_pos" });
            const ret = cFn(self, _x, _y, _path, _column, _cell_x, _cell_y);
            return .{ .ret = ret, .path = path_out, .column = column_out, .cell_x = cell_x_out, .cell_y = cell_y_out };
        }
    }.isBlankAtPos;
    /// Deprecated:
    /// method [is_rubber_banding_active](https://docs.gtk.org/gtk4/method.TreeView.is_rubber_banding_active.html)
    pub const isRubberBandingActive = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn isRubberBandingActive(self: *TreeView) bool {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) bool, .{ .name = "gtk_tree_view_is_rubber_banding_active" });
            const ret = cFn(self);
            return ret;
        }
    }.isRubberBandingActive;
    /// Deprecated:
    /// method [map_expanded_rows](https://docs.gtk.org/gtk4/method.TreeView.map_expanded_rows.html)
    pub const mapExpandedRows = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn mapExpandedRows(self: *TreeView, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TreeView, *gtk.TreePath });
            defer closure_func.deinit();
            const _func: gtk.TreeViewMappingFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const cFn = @extern(*const fn (*TreeView, gtk.TreeViewMappingFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_tree_view_map_expanded_rows" });
            const ret = cFn(self, _func, @ptrCast(_data));
            return ret;
        }
    }.mapExpandedRows;
    /// Deprecated:
    /// method [move_column_after](https://docs.gtk.org/gtk4/method.TreeView.move_column_after.html)
    pub const moveColumnAfter = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn moveColumnAfter(self: *TreeView, _column: *gtk.TreeViewColumn, _base_column: ?*gtk.TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreeViewColumn, ?*gtk.TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_move_column_after" });
            const ret = cFn(self, _column, _base_column);
            return ret;
        }
    }.moveColumnAfter;
    /// Deprecated:
    /// method [remove_column](https://docs.gtk.org/gtk4/method.TreeView.remove_column.html)
    pub const removeColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn removeColumn(self: *TreeView, _column: *gtk.TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_remove_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.removeColumn;
    /// Deprecated:
    /// method [row_activated](https://docs.gtk.org/gtk4/method.TreeView.row_activated.html)
    pub const rowActivated = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowActivated(self: *TreeView, _path: *gtk.TreePath, _column: ?*gtk.TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath, ?*gtk.TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_row_activated" });
            const ret = cFn(self, _path, _column);
            return ret;
        }
    }.rowActivated;
    /// Deprecated:
    /// method [row_expanded](https://docs.gtk.org/gtk4/method.TreeView.row_expanded.html)
    pub const rowExpanded = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn rowExpanded(self: *TreeView, _path: *gtk.TreePath) bool {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_view_row_expanded" });
            const ret = cFn(self, _path);
            return ret;
        }
    }.rowExpanded;
    /// Deprecated:
    /// method [scroll_to_cell](https://docs.gtk.org/gtk4/method.TreeView.scroll_to_cell.html)
    pub const scrollToCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn scrollToCell(self: *TreeView, _path: ?*gtk.TreePath, _column: ?*gtk.TreeViewColumn, _use_align: bool, _row_align: f32, _col_align: f32) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreePath, ?*gtk.TreeViewColumn, bool, f32, f32) callconv(.c) void, .{ .name = "gtk_tree_view_scroll_to_cell" });
            const ret = cFn(self, _path, _column, _use_align, _row_align, _col_align);
            return ret;
        }
    }.scrollToCell;
    /// Deprecated:
    /// method [scroll_to_point](https://docs.gtk.org/gtk4/method.TreeView.scroll_to_point.html)
    pub const scrollToPoint = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn scrollToPoint(self: *TreeView, _tree_x: i32, _tree_y: i32) void {
            const cFn = @extern(*const fn (*TreeView, i32, i32) callconv(.c) void, .{ .name = "gtk_tree_view_scroll_to_point" });
            const ret = cFn(self, _tree_x, _tree_y);
            return ret;
        }
    }.scrollToPoint;
    /// Deprecated:
    /// method [set_activate_on_single_click](https://docs.gtk.org/gtk4/method.TreeView.set_activate_on_single_click.html)
    pub const setActivateOnSingleClick = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setActivateOnSingleClick(self: *TreeView, _single: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_activate_on_single_click" });
            const ret = cFn(self, _single);
            return ret;
        }
    }.setActivateOnSingleClick;
    /// Deprecated:
    /// method [set_column_drag_function](https://docs.gtk.org/gtk4/method.TreeView.set_column_drag_function.html)
    pub const setColumnDragFunction = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setColumnDragFunction(self: *TreeView, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeView, *gtk.TreeViewColumn, *gtk.TreeViewColumn, *gtk.TreeViewColumn });
            const _func: ?gtk.TreeViewColumnDropFunc = @ptrCast(closure_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeView, ?gtk.TreeViewColumnDropFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_view_set_column_drag_function" });
            const ret = cFn(self, _func, @ptrCast(_user_data), _destroy);
            return ret;
        }
    }.setColumnDragFunction;
    /// Deprecated:
    /// method [set_cursor](https://docs.gtk.org/gtk4/method.TreeView.set_cursor.html)
    pub const setCursor = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCursor(self: *TreeView, _path: *gtk.TreePath, _focus_column: ?*gtk.TreeViewColumn, _start_editing: bool) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath, ?*gtk.TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_cursor" });
            const ret = cFn(self, _path, _focus_column, _start_editing);
            return ret;
        }
    }.setCursor;
    /// Deprecated:
    /// method [set_cursor_on_cell](https://docs.gtk.org/gtk4/method.TreeView.set_cursor_on_cell.html)
    pub const setCursorOnCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCursorOnCell(self: *TreeView, _path: *gtk.TreePath, _focus_column: ?*gtk.TreeViewColumn, _focus_cell: ?*gtk.CellRenderer, _start_editing: bool) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.TreePath, ?*gtk.TreeViewColumn, ?*gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_cursor_on_cell" });
            const ret = cFn(self, _path, _focus_column, _focus_cell, _start_editing);
            return ret;
        }
    }.setCursorOnCell;
    /// Deprecated:
    /// method [set_drag_dest_row](https://docs.gtk.org/gtk4/method.TreeView.set_drag_dest_row.html)
    pub const setDragDestRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setDragDestRow(self: *TreeView, _path: ?*gtk.TreePath, _pos: gtk.TreeViewDropPosition) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreePath, gtk.TreeViewDropPosition) callconv(.c) void, .{ .name = "gtk_tree_view_set_drag_dest_row" });
            const ret = cFn(self, _path, _pos);
            return ret;
        }
    }.setDragDestRow;
    /// Deprecated:
    /// method [set_enable_search](https://docs.gtk.org/gtk4/method.TreeView.set_enable_search.html)
    pub const setEnableSearch = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setEnableSearch(self: *TreeView, _enable_search: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_enable_search" });
            const ret = cFn(self, _enable_search);
            return ret;
        }
    }.setEnableSearch;
    /// Deprecated:
    /// method [set_enable_tree_lines](https://docs.gtk.org/gtk4/method.TreeView.set_enable_tree_lines.html)
    pub const setEnableTreeLines = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setEnableTreeLines(self: *TreeView, _enabled: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_enable_tree_lines" });
            const ret = cFn(self, _enabled);
            return ret;
        }
    }.setEnableTreeLines;
    /// Deprecated:
    /// method [set_expander_column](https://docs.gtk.org/gtk4/method.TreeView.set_expander_column.html)
    pub const setExpanderColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setExpanderColumn(self: *TreeView, _column: ?*gtk.TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_set_expander_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setExpanderColumn;
    /// Deprecated:
    /// method [set_fixed_height_mode](https://docs.gtk.org/gtk4/method.TreeView.set_fixed_height_mode.html)
    pub const setFixedHeightMode = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFixedHeightMode(self: *TreeView, _enable: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_fixed_height_mode" });
            const ret = cFn(self, _enable);
            return ret;
        }
    }.setFixedHeightMode;
    /// Deprecated:
    /// method [set_grid_lines](https://docs.gtk.org/gtk4/method.TreeView.set_grid_lines.html)
    pub const setGridLines = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setGridLines(self: *TreeView, _grid_lines: gtk.TreeViewGridLines) void {
            const cFn = @extern(*const fn (*TreeView, gtk.TreeViewGridLines) callconv(.c) void, .{ .name = "gtk_tree_view_set_grid_lines" });
            const ret = cFn(self, _grid_lines);
            return ret;
        }
    }.setGridLines;
    /// Deprecated:
    /// method [set_headers_clickable](https://docs.gtk.org/gtk4/method.TreeView.set_headers_clickable.html)
    pub const setHeadersClickable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHeadersClickable(self: *TreeView, _setting: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_headers_clickable" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setHeadersClickable;
    /// Deprecated:
    /// method [set_headers_visible](https://docs.gtk.org/gtk4/method.TreeView.set_headers_visible.html)
    pub const setHeadersVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHeadersVisible(self: *TreeView, _headers_visible: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_headers_visible" });
            const ret = cFn(self, _headers_visible);
            return ret;
        }
    }.setHeadersVisible;
    /// Deprecated:
    /// method [set_hover_expand](https://docs.gtk.org/gtk4/method.TreeView.set_hover_expand.html)
    pub const setHoverExpand = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHoverExpand(self: *TreeView, _expand: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_hover_expand" });
            const ret = cFn(self, _expand);
            return ret;
        }
    }.setHoverExpand;
    /// Deprecated:
    /// method [set_hover_selection](https://docs.gtk.org/gtk4/method.TreeView.set_hover_selection.html)
    pub const setHoverSelection = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setHoverSelection(self: *TreeView, _hover: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_hover_selection" });
            const ret = cFn(self, _hover);
            return ret;
        }
    }.setHoverSelection;
    /// Deprecated:
    /// method [set_level_indentation](https://docs.gtk.org/gtk4/method.TreeView.set_level_indentation.html)
    pub const setLevelIndentation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setLevelIndentation(self: *TreeView, _indentation: i32) void {
            const cFn = @extern(*const fn (*TreeView, i32) callconv(.c) void, .{ .name = "gtk_tree_view_set_level_indentation" });
            const ret = cFn(self, _indentation);
            return ret;
        }
    }.setLevelIndentation;
    /// Deprecated:
    /// method [set_model](https://docs.gtk.org/gtk4/method.TreeView.set_model.html)
    pub const setModel = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setModel(self: *TreeView, _model: ?*gtk.TreeModel) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.TreeModel) callconv(.c) void, .{ .name = "gtk_tree_view_set_model" });
            const ret = cFn(self, _model);
            return ret;
        }
    }.setModel;
    /// Deprecated:
    /// method [set_reorderable](https://docs.gtk.org/gtk4/method.TreeView.set_reorderable.html)
    pub const setReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setReorderable(self: *TreeView, _reorderable: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_reorderable" });
            const ret = cFn(self, _reorderable);
            return ret;
        }
    }.setReorderable;
    /// Deprecated:
    /// method [set_row_separator_func](https://docs.gtk.org/gtk4/method.TreeView.set_row_separator_func.html)
    pub const setRowSeparatorFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRowSeparatorFunc(self: *TreeView, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.TreeModel, *gtk.TreeIter });
            const _func: ?gtk.TreeViewRowSeparatorFunc = @ptrCast(closure_func.c_closure());
            const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: ?glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeView, ?gtk.TreeViewRowSeparatorFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_view_set_row_separator_func" });
            const ret = cFn(self, _func, @ptrCast(_data), _destroy);
            return ret;
        }
    }.setRowSeparatorFunc;
    /// Deprecated:
    /// method [set_rubber_banding](https://docs.gtk.org/gtk4/method.TreeView.set_rubber_banding.html)
    pub const setRubberBanding = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setRubberBanding(self: *TreeView, _enable: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_rubber_banding" });
            const ret = cFn(self, _enable);
            return ret;
        }
    }.setRubberBanding;
    /// Deprecated:
    /// method [set_search_column](https://docs.gtk.org/gtk4/method.TreeView.set_search_column.html)
    pub const setSearchColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSearchColumn(self: *TreeView, _column: i32) void {
            const cFn = @extern(*const fn (*TreeView, i32) callconv(.c) void, .{ .name = "gtk_tree_view_set_search_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setSearchColumn;
    /// Deprecated:
    /// method [set_search_entry](https://docs.gtk.org/gtk4/method.TreeView.set_search_entry.html)
    pub const setSearchEntry = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSearchEntry(self: *TreeView, _entry: ?*gtk.Editable) void {
            const cFn = @extern(*const fn (*TreeView, ?*gtk.Editable) callconv(.c) void, .{ .name = "gtk_tree_view_set_search_entry" });
            const ret = cFn(self, _entry);
            return ret;
        }
    }.setSearchEntry;
    /// Deprecated:
    /// method [set_search_equal_func](https://docs.gtk.org/gtk4/method.TreeView.set_search_equal_func.html)
    pub const setSearchEqualFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSearchEqualFunc(self: *TreeView, search_equal_func: anytype, search_equal_func_args: anytype) void {
            var closure_search_equal_func = core.zig_closure(search_equal_func, search_equal_func_args, &.{ bool, *gtk.TreeModel, i32, [*:0]const u8, *gtk.TreeIter });
            const _search_equal_func: gtk.TreeViewSearchEqualFunc = @ptrCast(closure_search_equal_func.c_closure());
            const _search_user_data: ?*anyopaque = @ptrCast(closure_search_equal_func.c_data());
            const _search_destroy: ?glib.DestroyNotify = @ptrCast(closure_search_equal_func.c_destroy());
            const cFn = @extern(*const fn (*TreeView, gtk.TreeViewSearchEqualFunc, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_view_set_search_equal_func" });
            const ret = cFn(self, _search_equal_func, @ptrCast(_search_user_data), _search_destroy);
            return ret;
        }
    }.setSearchEqualFunc;
    /// Deprecated:
    /// method [set_show_expanders](https://docs.gtk.org/gtk4/method.TreeView.set_show_expanders.html)
    pub const setShowExpanders = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setShowExpanders(self: *TreeView, _enabled: bool) void {
            const cFn = @extern(*const fn (*TreeView, bool) callconv(.c) void, .{ .name = "gtk_tree_view_set_show_expanders" });
            const ret = cFn(self, _enabled);
            return ret;
        }
    }.setShowExpanders;
    /// Deprecated:
    /// method [set_tooltip_cell](https://docs.gtk.org/gtk4/method.TreeView.set_tooltip_cell.html)
    pub const setTooltipCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipCell(self: *TreeView, _tooltip: *gtk.Tooltip, _path: ?*gtk.TreePath, _column: ?*gtk.TreeViewColumn, _cell: ?*gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.Tooltip, ?*gtk.TreePath, ?*gtk.TreeViewColumn, ?*gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_tree_view_set_tooltip_cell" });
            const ret = cFn(self, _tooltip, _path, _column, _cell);
            return ret;
        }
    }.setTooltipCell;
    /// Deprecated:
    /// method [set_tooltip_column](https://docs.gtk.org/gtk4/method.TreeView.set_tooltip_column.html)
    pub const setTooltipColumn = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipColumn(self: *TreeView, _column: i32) void {
            const cFn = @extern(*const fn (*TreeView, i32) callconv(.c) void, .{ .name = "gtk_tree_view_set_tooltip_column" });
            const ret = cFn(self, _column);
            return ret;
        }
    }.setTooltipColumn;
    /// Deprecated:
    /// method [set_tooltip_row](https://docs.gtk.org/gtk4/method.TreeView.set_tooltip_row.html)
    pub const setTooltipRow = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTooltipRow(self: *TreeView, _tooltip: *gtk.Tooltip, _path: *gtk.TreePath) void {
            const cFn = @extern(*const fn (*TreeView, *gtk.Tooltip, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_view_set_tooltip_row" });
            const ret = cFn(self, _tooltip, _path);
            return ret;
        }
    }.setTooltipRow;
    /// Deprecated:
    /// method [unset_rows_drag_dest](https://docs.gtk.org/gtk4/method.TreeView.unset_rows_drag_dest.html)
    pub const unsetRowsDragDest = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unsetRowsDragDest(self: *TreeView) void {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) void, .{ .name = "gtk_tree_view_unset_rows_drag_dest" });
            const ret = cFn(self);
            return ret;
        }
    }.unsetRowsDragDest;
    /// Deprecated:
    /// method [unset_rows_drag_source](https://docs.gtk.org/gtk4/method.TreeView.unset_rows_drag_source.html)
    pub const unsetRowsDragSource = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn unsetRowsDragSource(self: *TreeView) void {
            const cFn = @extern(*const fn (*TreeView) callconv(.c) void, .{ .name = "gtk_tree_view_unset_rows_drag_source" });
            const ret = cFn(self);
            return ret;
        }
    }.unsetRowsDragSource;
    /// vfunc [columns_changed](https://docs.gtk.org/gtk4/vfunc.TreeView.columns_changed.html)
    pub fn columnsChangedV(self: *TreeView) void {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.columns_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [cursor_changed](https://docs.gtk.org/gtk4/vfunc.TreeView.cursor_changed.html)
    pub fn cursorChangedV(self: *TreeView) void {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.cursor_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [expand_collapse_cursor_row](https://docs.gtk.org/gtk4/vfunc.TreeView.expand_collapse_cursor_row.html)
    pub fn expandCollapseCursorRowV(self: *TreeView, _logical: bool, _expand: bool, _open_all: bool) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.expand_collapse_cursor_row.?;
        const ret = vFn(self, _logical, _expand, _open_all);
        return ret;
    }
    /// vfunc [move_cursor](https://docs.gtk.org/gtk4/vfunc.TreeView.move_cursor.html)
    pub fn moveCursorV(self: *TreeView, _step: gtk.MovementStep, _count: i32, _extend: bool, _modify: bool) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_cursor.?;
        const ret = vFn(self, _step, _count, _extend, _modify);
        return ret;
    }
    /// vfunc [row_activated](https://docs.gtk.org/gtk4/vfunc.TreeView.row_activated.html)
    pub fn rowActivatedV(self: *TreeView, _path: *gtk.TreePath, _column: ?*gtk.TreeViewColumn) void {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_activated.?;
        const ret = vFn(self, _path, _column);
        return ret;
    }
    /// vfunc [row_collapsed](https://docs.gtk.org/gtk4/vfunc.TreeView.row_collapsed.html)
    pub fn rowCollapsedV(self: *TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) void {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_collapsed.?;
        const ret = vFn(self, _iter, _path);
        return ret;
    }
    /// vfunc [row_expanded](https://docs.gtk.org/gtk4/vfunc.TreeView.row_expanded.html)
    pub fn rowExpandedV(self: *TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) void {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.row_expanded.?;
        const ret = vFn(self, _iter, _path);
        return ret;
    }
    /// vfunc [select_all](https://docs.gtk.org/gtk4/vfunc.TreeView.select_all.html)
    pub fn selectAllV(self: *TreeView) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_all.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [select_cursor_parent](https://docs.gtk.org/gtk4/vfunc.TreeView.select_cursor_parent.html)
    pub fn selectCursorParentV(self: *TreeView) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_cursor_parent.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [select_cursor_row](https://docs.gtk.org/gtk4/vfunc.TreeView.select_cursor_row.html)
    pub fn selectCursorRowV(self: *TreeView, _start_editing: bool) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.select_cursor_row.?;
        const ret = vFn(self, _start_editing);
        return ret;
    }
    /// vfunc [start_interactive_search](https://docs.gtk.org/gtk4/vfunc.TreeView.start_interactive_search.html)
    pub fn startInteractiveSearchV(self: *TreeView) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.start_interactive_search.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [test_collapse_row](https://docs.gtk.org/gtk4/vfunc.TreeView.test_collapse_row.html)
    pub fn testCollapseRowV(self: *TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.test_collapse_row.?;
        const ret = vFn(self, _iter, _path);
        return ret;
    }
    /// vfunc [test_expand_row](https://docs.gtk.org/gtk4/vfunc.TreeView.test_expand_row.html)
    pub fn testExpandRowV(self: *TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.test_expand_row.?;
        const ret = vFn(self, _iter, _path);
        return ret;
    }
    /// vfunc [toggle_cursor_row](https://docs.gtk.org/gtk4/vfunc.TreeView.toggle_cursor_row.html)
    pub fn toggleCursorRowV(self: *TreeView) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.toggle_cursor_row.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unselect_all](https://docs.gtk.org/gtk4/vfunc.TreeView.unselect_all.html)
    pub fn unselectAllV(self: *TreeView) bool {
        const class: *TreeViewClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unselect_all.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [columns-changed](https://docs.gtk.org/gtk4/signal.TreeView.columns-changed.html)
    pub fn connectColumnsChanged(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("columns-changed", handler, args, flags, &.{ void, *TreeView });
    }
    /// signal [cursor-changed](https://docs.gtk.org/gtk4/signal.TreeView.cursor-changed.html)
    pub fn connectCursorChanged(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("cursor-changed", handler, args, flags, &.{ void, *TreeView });
    }
    /// signal [expand-collapse-cursor-row](https://docs.gtk.org/gtk4/signal.TreeView.expand-collapse-cursor-row.html)
    pub fn connectExpandCollapseCursorRow(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("expand-collapse-cursor-row", handler, args, flags, &.{ bool, *TreeView, bool, bool, bool });
    }
    /// signal [move-cursor](https://docs.gtk.org/gtk4/signal.TreeView.move-cursor.html)
    pub fn connectMoveCursor(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-cursor", handler, args, flags, &.{ bool, *TreeView, gtk.MovementStep, i32, bool, bool });
    }
    /// signal [row-activated](https://docs.gtk.org/gtk4/signal.TreeView.row-activated.html)
    pub fn connectRowActivated(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-activated", handler, args, flags, &.{ void, *TreeView, *gtk.TreePath, *gtk.TreeViewColumn });
    }
    /// signal [row-collapsed](https://docs.gtk.org/gtk4/signal.TreeView.row-collapsed.html)
    pub fn connectRowCollapsed(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-collapsed", handler, args, flags, &.{ void, *TreeView, *gtk.TreeIter, *gtk.TreePath });
    }
    /// signal [row-expanded](https://docs.gtk.org/gtk4/signal.TreeView.row-expanded.html)
    pub fn connectRowExpanded(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("row-expanded", handler, args, flags, &.{ void, *TreeView, *gtk.TreeIter, *gtk.TreePath });
    }
    /// signal [select-all](https://docs.gtk.org/gtk4/signal.TreeView.select-all.html)
    pub fn connectSelectAll(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-all", handler, args, flags, &.{ bool, *TreeView });
    }
    /// signal [select-cursor-parent](https://docs.gtk.org/gtk4/signal.TreeView.select-cursor-parent.html)
    pub fn connectSelectCursorParent(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-cursor-parent", handler, args, flags, &.{ bool, *TreeView });
    }
    /// signal [select-cursor-row](https://docs.gtk.org/gtk4/signal.TreeView.select-cursor-row.html)
    pub fn connectSelectCursorRow(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("select-cursor-row", handler, args, flags, &.{ bool, *TreeView, bool });
    }
    /// signal [start-interactive-search](https://docs.gtk.org/gtk4/signal.TreeView.start-interactive-search.html)
    pub fn connectStartInteractiveSearch(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("start-interactive-search", handler, args, flags, &.{ bool, *TreeView });
    }
    /// signal [test-collapse-row](https://docs.gtk.org/gtk4/signal.TreeView.test-collapse-row.html)
    pub fn connectTestCollapseRow(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("test-collapse-row", handler, args, flags, &.{ bool, *TreeView, *gtk.TreeIter, *gtk.TreePath });
    }
    /// signal [test-expand-row](https://docs.gtk.org/gtk4/signal.TreeView.test-expand-row.html)
    pub fn connectTestExpandRow(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("test-expand-row", handler, args, flags, &.{ bool, *TreeView, *gtk.TreeIter, *gtk.TreePath });
    }
    /// signal [toggle-cursor-row](https://docs.gtk.org/gtk4/signal.TreeView.toggle-cursor-row.html)
    pub fn connectToggleCursorRow(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("toggle-cursor-row", handler, args, flags, &.{ bool, *TreeView });
    }
    /// signal [unselect-all](https://docs.gtk.org/gtk4/signal.TreeView.unselect-all.html)
    pub fn connectUnselectAll(self: *TreeView, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unselect-all", handler, args, flags, &.{ bool, *TreeView });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_view_get_type" });
        return cFn();
    }
};
pub const TreeViewClass = extern struct {
    parent_class: gtk.WidgetClass,
    row_activated: ?*const fn (_tree_view: *gtk.TreeView, _path: *gtk.TreePath, _column: ?*gtk.TreeViewColumn) callconv(.c) void,
    test_expand_row: ?*const fn (_tree_view: *gtk.TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) callconv(.c) bool,
    test_collapse_row: ?*const fn (_tree_view: *gtk.TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) callconv(.c) bool,
    row_expanded: ?*const fn (_tree_view: *gtk.TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) callconv(.c) void,
    row_collapsed: ?*const fn (_tree_view: *gtk.TreeView, _iter: *gtk.TreeIter, _path: *gtk.TreePath) callconv(.c) void,
    columns_changed: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) void,
    cursor_changed: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) void,
    move_cursor: ?*const fn (_tree_view: *gtk.TreeView, _step: gtk.MovementStep, _count: i32, _extend: bool, _modify: bool) callconv(.c) bool,
    select_all: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) bool,
    unselect_all: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) bool,
    select_cursor_row: ?*const fn (_tree_view: *gtk.TreeView, _start_editing: bool) callconv(.c) bool,
    toggle_cursor_row: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) bool,
    expand_collapse_cursor_row: ?*const fn (_tree_view: *gtk.TreeView, _logical: bool, _expand: bool, _open_all: bool) callconv(.c) bool,
    select_cursor_parent: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) bool,
    start_interactive_search: ?*const fn (_tree_view: *gtk.TreeView) callconv(.c) bool,
    _reserved: [16]?*anyopaque,
};
/// Deprecated:
/// Class [TreeViewColumn](https://docs.gtk.org/gtk4/class.TreeViewColumn.html)
/// - property [alignment](https://docs.gtk.org/gtk4/property.TreeViewColumn.alignment.html): (rw) `f32`
/// - property [cell-area](https://docs.gtk.org/gtk4/property.TreeViewColumn.cell-area.html): (r-) `gtk.CellArea`
/// - property [clickable](https://docs.gtk.org/gtk4/property.TreeViewColumn.clickable.html): (rw) `bool`
/// - property [expand](https://docs.gtk.org/gtk4/property.TreeViewColumn.expand.html): (rw) `bool`
/// - property [fixed-width](https://docs.gtk.org/gtk4/property.TreeViewColumn.fixed-width.html): (rw) `i32`
/// - property [max-width](https://docs.gtk.org/gtk4/property.TreeViewColumn.max-width.html): (rw) `i32`
/// - property [min-width](https://docs.gtk.org/gtk4/property.TreeViewColumn.min-width.html): (rw) `i32`
/// - property [reorderable](https://docs.gtk.org/gtk4/property.TreeViewColumn.reorderable.html): (rw) `bool`
/// - property [resizable](https://docs.gtk.org/gtk4/property.TreeViewColumn.resizable.html): (rw) `bool`
/// - property [sizing](https://docs.gtk.org/gtk4/property.TreeViewColumn.sizing.html): (rw) `gtk.TreeViewColumnSizing`
/// - property [sort-column-id](https://docs.gtk.org/gtk4/property.TreeViewColumn.sort-column-id.html): (rw) `i32`
/// - property [sort-indicator](https://docs.gtk.org/gtk4/property.TreeViewColumn.sort-indicator.html): (rw) `bool`
/// - property [sort-order](https://docs.gtk.org/gtk4/property.TreeViewColumn.sort-order.html): (rw) `gtk.SortType`
/// - property [spacing](https://docs.gtk.org/gtk4/property.TreeViewColumn.spacing.html): (rw) `i32`
/// - property [title](https://docs.gtk.org/gtk4/property.TreeViewColumn.title.html): (rw) `[*:0]const u8`
/// - property [visible](https://docs.gtk.org/gtk4/property.TreeViewColumn.visible.html): (rw) `bool`
/// - property [widget](https://docs.gtk.org/gtk4/property.TreeViewColumn.widget.html): (rw) `gtk.Widget`
/// - property [width](https://docs.gtk.org/gtk4/property.TreeViewColumn.width.html): (r-) `i32`
/// - property [x-offset](https://docs.gtk.org/gtk4/property.TreeViewColumn.x-offset.html): (r-) `i32`
pub const TreeViewColumn = if (config.disable_deprecated) core.Deprecated else opaque {
    pub const Interfaces = [_]type{ gtk.Buildable, gtk.CellLayout };
    pub const Parent = gobject.InitiallyUnowned;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.TreeViewColumn.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *TreeViewColumn {
            const cFn = @extern(*const fn () callconv(.c) *TreeViewColumn, .{ .name = "gtk_tree_view_column_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    /// Deprecated:
    /// ctor [new_with_area](https://docs.gtk.org/gtk4/ctor.TreeViewColumn.new_with_area.html)
    pub const newWithArea = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newWithArea(_area: *gtk.CellArea) *TreeViewColumn {
            const cFn = @extern(*const fn (*gtk.CellArea) callconv(.c) *TreeViewColumn, .{ .name = "gtk_tree_view_column_new_with_area" });
            const ret = cFn(_area);
            return ret;
        }
    }.newWithArea;
    /// Deprecated:
    /// method [add_attribute](https://docs.gtk.org/gtk4/method.TreeViewColumn.add_attribute.html)
    pub const addAttribute = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addAttribute(self: *TreeViewColumn, _cell_renderer: *gtk.CellRenderer, _attribute: [*:0]const u8, _column: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer, [*:0]const u8, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_add_attribute" });
            const ret = cFn(self, _cell_renderer, _attribute, _column);
            return ret;
        }
    }.addAttribute;
    /// Deprecated:
    /// method [cell_get_position](https://docs.gtk.org/gtk4/method.TreeViewColumn.cell_get_position.html)
    pub const cellGetPosition = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellGetPosition(self: *TreeViewColumn, _cell_renderer: *gtk.CellRenderer) struct {
            ret: bool,
            x_offset: i32,
            width: i32,
        } {
            var x_offset_out: i32 = undefined;
            const _x_offset = &x_offset_out;
            var width_out: i32 = undefined;
            const _width = &width_out;
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer, ?*i32, ?*i32) callconv(.c) bool, .{ .name = "gtk_tree_view_column_cell_get_position" });
            const ret = cFn(self, _cell_renderer, _x_offset, _width);
            return .{ .ret = ret, .x_offset = x_offset_out, .width = width_out };
        }
    }.cellGetPosition;
    /// Deprecated:
    /// method [cell_get_size](https://docs.gtk.org/gtk4/method.TreeViewColumn.cell_get_size.html)
    pub const cellGetSize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellGetSize(self: *TreeViewColumn) struct {
            ret: void,
            x_offset: i32,
            y_offset: i32,
            width: i32,
            height: i32,
        } {
            var x_offset_out: i32 = undefined;
            const _x_offset = &x_offset_out;
            var y_offset_out: i32 = undefined;
            const _y_offset = &y_offset_out;
            var width_out: i32 = undefined;
            const _width = &width_out;
            var height_out: i32 = undefined;
            const _height = &height_out;
            const cFn = @extern(*const fn (*TreeViewColumn, ?*i32, ?*i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_cell_get_size" });
            const ret = cFn(self, _x_offset, _y_offset, _width, _height);
            return .{ .ret = ret, .x_offset = x_offset_out, .y_offset = y_offset_out, .width = width_out, .height = height_out };
        }
    }.cellGetSize;
    /// Deprecated:
    /// method [cell_is_visible](https://docs.gtk.org/gtk4/method.TreeViewColumn.cell_is_visible.html)
    pub const cellIsVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellIsVisible(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_cell_is_visible" });
            const ret = cFn(self);
            return ret;
        }
    }.cellIsVisible;
    /// Deprecated:
    /// method [cell_set_cell_data](https://docs.gtk.org/gtk4/method.TreeViewColumn.cell_set_cell_data.html)
    pub const cellSetCellData = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn cellSetCellData(self: *TreeViewColumn, _tree_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _is_expander: bool, _is_expanded: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.TreeModel, *gtk.TreeIter, bool, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_cell_set_cell_data" });
            const ret = cFn(self, _tree_model, _iter, _is_expander, _is_expanded);
            return ret;
        }
    }.cellSetCellData;
    /// Deprecated:
    /// method [clear](https://docs.gtk.org/gtk4/method.TreeViewColumn.clear.html)
    pub const clear = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clear(self: *TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_column_clear" });
            const ret = cFn(self);
            return ret;
        }
    }.clear;
    /// Deprecated:
    /// method [clear_attributes](https://docs.gtk.org/gtk4/method.TreeViewColumn.clear_attributes.html)
    pub const clearAttributes = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clearAttributes(self: *TreeViewColumn, _cell_renderer: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_tree_view_column_clear_attributes" });
            const ret = cFn(self, _cell_renderer);
            return ret;
        }
    }.clearAttributes;
    /// Deprecated:
    /// method [clicked](https://docs.gtk.org/gtk4/method.TreeViewColumn.clicked.html)
    pub const clicked = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn clicked(self: *TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_column_clicked" });
            const ret = cFn(self);
            return ret;
        }
    }.clicked;
    /// Deprecated:
    /// method [focus_cell](https://docs.gtk.org/gtk4/method.TreeViewColumn.focus_cell.html)
    pub const focusCell = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn focusCell(self: *TreeViewColumn, _cell: *gtk.CellRenderer) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer) callconv(.c) void, .{ .name = "gtk_tree_view_column_focus_cell" });
            const ret = cFn(self, _cell);
            return ret;
        }
    }.focusCell;
    /// Deprecated:
    /// method [get_alignment](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_alignment.html)
    pub const getAlignment = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAlignment(self: *TreeViewColumn) f32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) f32, .{ .name = "gtk_tree_view_column_get_alignment" });
            const ret = cFn(self);
            return ret;
        }
    }.getAlignment;
    /// Deprecated:
    /// method [get_button](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_button.html)
    pub const getButton = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getButton(self: *TreeViewColumn) *gtk.Widget {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) *gtk.Widget, .{ .name = "gtk_tree_view_column_get_button" });
            const ret = cFn(self);
            return ret;
        }
    }.getButton;
    /// Deprecated:
    /// method [get_clickable](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_clickable.html)
    pub const getClickable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getClickable(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_clickable" });
            const ret = cFn(self);
            return ret;
        }
    }.getClickable;
    /// Deprecated:
    /// method [get_expand](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_expand.html)
    pub const getExpand = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getExpand(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_expand" });
            const ret = cFn(self);
            return ret;
        }
    }.getExpand;
    /// Deprecated:
    /// method [get_fixed_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_fixed_width.html)
    pub const getFixedWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getFixedWidth(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_fixed_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getFixedWidth;
    /// Deprecated:
    /// method [get_max_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_max_width.html)
    pub const getMaxWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMaxWidth(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_max_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getMaxWidth;
    /// Deprecated:
    /// method [get_min_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_min_width.html)
    pub const getMinWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getMinWidth(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_min_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getMinWidth;
    /// Deprecated:
    /// method [get_reorderable](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_reorderable.html)
    pub const getReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getReorderable(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_reorderable" });
            const ret = cFn(self);
            return ret;
        }
    }.getReorderable;
    /// Deprecated:
    /// method [get_resizable](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_resizable.html)
    pub const getResizable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getResizable(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_resizable" });
            const ret = cFn(self);
            return ret;
        }
    }.getResizable;
    /// Deprecated:
    /// method [get_sizing](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_sizing.html)
    pub const getSizing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSizing(self: *TreeViewColumn) gtk.TreeViewColumnSizing {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) gtk.TreeViewColumnSizing, .{ .name = "gtk_tree_view_column_get_sizing" });
            const ret = cFn(self);
            return ret;
        }
    }.getSizing;
    /// Deprecated:
    /// method [get_sort_column_id](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_sort_column_id.html)
    pub const getSortColumnId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSortColumnId(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_sort_column_id" });
            const ret = cFn(self);
            return ret;
        }
    }.getSortColumnId;
    /// Deprecated:
    /// method [get_sort_indicator](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_sort_indicator.html)
    pub const getSortIndicator = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSortIndicator(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_sort_indicator" });
            const ret = cFn(self);
            return ret;
        }
    }.getSortIndicator;
    /// Deprecated:
    /// method [get_sort_order](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_sort_order.html)
    pub const getSortOrder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSortOrder(self: *TreeViewColumn) gtk.SortType {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) gtk.SortType, .{ .name = "gtk_tree_view_column_get_sort_order" });
            const ret = cFn(self);
            return ret;
        }
    }.getSortOrder;
    /// Deprecated:
    /// method [get_spacing](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_spacing.html)
    pub const getSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSpacing(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_spacing" });
            const ret = cFn(self);
            return ret;
        }
    }.getSpacing;
    /// Deprecated:
    /// method [get_title](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_title.html)
    pub const getTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTitle(self: *TreeViewColumn) [*:0]u8 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) [*:0]u8, .{ .name = "gtk_tree_view_column_get_title" });
            const ret = cFn(self);
            return ret;
        }
    }.getTitle;
    /// Deprecated:
    /// method [get_tree_view](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_tree_view.html)
    pub const getTreeView = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTreeView(self: *TreeViewColumn) ?*gtk.Widget {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_tree_view_column_get_tree_view" });
            const ret = cFn(self);
            return ret;
        }
    }.getTreeView;
    /// Deprecated:
    /// method [get_visible](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_visible.html)
    pub const getVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getVisible(self: *TreeViewColumn) bool {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) bool, .{ .name = "gtk_tree_view_column_get_visible" });
            const ret = cFn(self);
            return ret;
        }
    }.getVisible;
    /// Deprecated:
    /// method [get_widget](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_widget.html)
    pub const getWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getWidget(self: *TreeViewColumn) ?*gtk.Widget {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_tree_view_column_get_widget" });
            const ret = cFn(self);
            return ret;
        }
    }.getWidget;
    /// Deprecated:
    /// method [get_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_width.html)
    pub const getWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getWidth(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getWidth;
    /// Deprecated:
    /// method [get_x_offset](https://docs.gtk.org/gtk4/method.TreeViewColumn.get_x_offset.html)
    pub const getXOffset = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getXOffset(self: *TreeViewColumn) i32 {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) i32, .{ .name = "gtk_tree_view_column_get_x_offset" });
            const ret = cFn(self);
            return ret;
        }
    }.getXOffset;
    /// Deprecated:
    /// method [pack_end](https://docs.gtk.org/gtk4/method.TreeViewColumn.pack_end.html)
    pub const packEnd = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packEnd(self: *TreeViewColumn, _cell: *gtk.CellRenderer, _expand: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_pack_end" });
            const ret = cFn(self, _cell, _expand);
            return ret;
        }
    }.packEnd;
    /// Deprecated:
    /// method [pack_start](https://docs.gtk.org/gtk4/method.TreeViewColumn.pack_start.html)
    pub const packStart = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn packStart(self: *TreeViewColumn, _cell: *gtk.CellRenderer, _expand: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_pack_start" });
            const ret = cFn(self, _cell, _expand);
            return ret;
        }
    }.packStart;
    /// Deprecated:
    /// method [queue_resize](https://docs.gtk.org/gtk4/method.TreeViewColumn.queue_resize.html)
    pub const queueResize = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn queueResize(self: *TreeViewColumn) void {
            const cFn = @extern(*const fn (*TreeViewColumn) callconv(.c) void, .{ .name = "gtk_tree_view_column_queue_resize" });
            const ret = cFn(self);
            return ret;
        }
    }.queueResize;
    /// Deprecated:
    /// method [set_alignment](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_alignment.html)
    pub const setAlignment = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setAlignment(self: *TreeViewColumn, _xalign: f32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, f32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_alignment" });
            const ret = cFn(self, _xalign);
            return ret;
        }
    }.setAlignment;
    /// Deprecated:
    /// method [set_cell_data_func](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_cell_data_func.html)
    pub const setCellDataFunc = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setCellDataFunc(self: *TreeViewColumn, _cell_renderer: *gtk.CellRenderer, func: anytype, func_args: anytype) void {
            var closure_func = core.zig_closure(func, func_args, &.{ void, *gtk.TreeViewColumn, *gtk.CellRenderer, *gtk.TreeModel, *gtk.TreeIter });
            const _func: ?gtk.TreeCellDataFunc = @ptrCast(closure_func.c_closure());
            const _func_data: ?*anyopaque = @ptrCast(closure_func.c_data());
            const _destroy: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
            const cFn = @extern(*const fn (*TreeViewColumn, *gtk.CellRenderer, ?gtk.TreeCellDataFunc, ?*anyopaque, glib.DestroyNotify) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_cell_data_func" });
            const ret = cFn(self, _cell_renderer, _func, @ptrCast(_func_data), _destroy);
            return ret;
        }
    }.setCellDataFunc;
    /// Deprecated:
    /// method [set_clickable](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_clickable.html)
    pub const setClickable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setClickable(self: *TreeViewColumn, _clickable: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_clickable" });
            const ret = cFn(self, _clickable);
            return ret;
        }
    }.setClickable;
    /// Deprecated:
    /// method [set_expand](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_expand.html)
    pub const setExpand = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setExpand(self: *TreeViewColumn, _expand: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_expand" });
            const ret = cFn(self, _expand);
            return ret;
        }
    }.setExpand;
    /// Deprecated:
    /// method [set_fixed_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_fixed_width.html)
    pub const setFixedWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setFixedWidth(self: *TreeViewColumn, _fixed_width: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_fixed_width" });
            const ret = cFn(self, _fixed_width);
            return ret;
        }
    }.setFixedWidth;
    /// Deprecated:
    /// method [set_max_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_max_width.html)
    pub const setMaxWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMaxWidth(self: *TreeViewColumn, _max_width: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_max_width" });
            const ret = cFn(self, _max_width);
            return ret;
        }
    }.setMaxWidth;
    /// Deprecated:
    /// method [set_min_width](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_min_width.html)
    pub const setMinWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setMinWidth(self: *TreeViewColumn, _min_width: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_min_width" });
            const ret = cFn(self, _min_width);
            return ret;
        }
    }.setMinWidth;
    /// Deprecated:
    /// method [set_reorderable](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_reorderable.html)
    pub const setReorderable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setReorderable(self: *TreeViewColumn, _reorderable: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_reorderable" });
            const ret = cFn(self, _reorderable);
            return ret;
        }
    }.setReorderable;
    /// Deprecated:
    /// method [set_resizable](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_resizable.html)
    pub const setResizable = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setResizable(self: *TreeViewColumn, _resizable: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_resizable" });
            const ret = cFn(self, _resizable);
            return ret;
        }
    }.setResizable;
    /// Deprecated:
    /// method [set_sizing](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_sizing.html)
    pub const setSizing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSizing(self: *TreeViewColumn, _type: gtk.TreeViewColumnSizing) void {
            const cFn = @extern(*const fn (*TreeViewColumn, gtk.TreeViewColumnSizing) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_sizing" });
            const ret = cFn(self, _type);
            return ret;
        }
    }.setSizing;
    /// Deprecated:
    /// method [set_sort_column_id](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_sort_column_id.html)
    pub const setSortColumnId = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSortColumnId(self: *TreeViewColumn, _sort_column_id: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_sort_column_id" });
            const ret = cFn(self, _sort_column_id);
            return ret;
        }
    }.setSortColumnId;
    /// Deprecated:
    /// method [set_sort_indicator](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_sort_indicator.html)
    pub const setSortIndicator = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSortIndicator(self: *TreeViewColumn, _setting: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_sort_indicator" });
            const ret = cFn(self, _setting);
            return ret;
        }
    }.setSortIndicator;
    /// Deprecated:
    /// method [set_sort_order](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_sort_order.html)
    pub const setSortOrder = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSortOrder(self: *TreeViewColumn, _order: gtk.SortType) void {
            const cFn = @extern(*const fn (*TreeViewColumn, gtk.SortType) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_sort_order" });
            const ret = cFn(self, _order);
            return ret;
        }
    }.setSortOrder;
    /// Deprecated:
    /// method [set_spacing](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_spacing.html)
    pub const setSpacing = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setSpacing(self: *TreeViewColumn, _spacing: i32) void {
            const cFn = @extern(*const fn (*TreeViewColumn, i32) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_spacing" });
            const ret = cFn(self, _spacing);
            return ret;
        }
    }.setSpacing;
    /// Deprecated:
    /// method [set_title](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_title.html)
    pub const setTitle = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setTitle(self: *TreeViewColumn, _title: [*:0]const u8) void {
            const cFn = @extern(*const fn (*TreeViewColumn, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_title" });
            const ret = cFn(self, _title);
            return ret;
        }
    }.setTitle;
    /// Deprecated:
    /// method [set_visible](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_visible.html)
    pub const setVisible = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setVisible(self: *TreeViewColumn, _visible: bool) void {
            const cFn = @extern(*const fn (*TreeViewColumn, bool) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_visible" });
            const ret = cFn(self, _visible);
            return ret;
        }
    }.setVisible;
    /// Deprecated:
    /// method [set_widget](https://docs.gtk.org/gtk4/method.TreeViewColumn.set_widget.html)
    pub const setWidget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setWidget(self: *TreeViewColumn, _widget: ?*gtk.Widget) void {
            const cFn = @extern(*const fn (*TreeViewColumn, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_tree_view_column_set_widget" });
            const ret = cFn(self, _widget);
            return ret;
        }
    }.setWidget;
    /// signal [clicked](https://docs.gtk.org/gtk4/signal.TreeViewColumn.clicked.html)
    pub fn connectClicked(self: *TreeViewColumn, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("clicked", handler, args, flags, &.{ void, *TreeViewColumn });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_view_column_get_type" });
        return cFn();
    }
};
/// callback [TreeViewColumnDropFunc](https://docs.gtk.org/gtk4/callback.TreeViewColumnDropFunc.html)
pub const TreeViewColumnDropFunc = *const fn (_tree_view: *gtk.TreeView, _column: *gtk.TreeViewColumn, _prev_column: *gtk.TreeViewColumn, _next_column: *gtk.TreeViewColumn, _data: ?*anyopaque) callconv(.c) bool;
/// Enum [TreeViewColumnSizing](https://docs.gtk.org/gtk4/enum.TreeViewColumnSizing.html)
pub const TreeViewColumnSizing = enum(u32) {
    grow_only = 0,
    autosize = 1,
    fixed = 2,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_view_column_sizing_get_type" });
        return cFn();
    }
};
/// Enum [TreeViewDropPosition](https://docs.gtk.org/gtk4/enum.TreeViewDropPosition.html)
pub const TreeViewDropPosition = enum(u32) {
    before = 0,
    after = 1,
    into_or_before = 2,
    into_or_after = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_view_drop_position_get_type" });
        return cFn();
    }
};
/// Enum [TreeViewGridLines](https://docs.gtk.org/gtk4/enum.TreeViewGridLines.html)
pub const TreeViewGridLines = enum(u32) {
    none = 0,
    horizontal = 1,
    vertical = 2,
    both = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_tree_view_grid_lines_get_type" });
        return cFn();
    }
};
/// callback [TreeViewMappingFunc](https://docs.gtk.org/gtk4/callback.TreeViewMappingFunc.html)
pub const TreeViewMappingFunc = *const fn (_tree_view: *gtk.TreeView, _path: *gtk.TreePath, _user_data: ?*anyopaque) callconv(.c) void;
/// callback [TreeViewRowSeparatorFunc](https://docs.gtk.org/gtk4/callback.TreeViewRowSeparatorFunc.html)
pub const TreeViewRowSeparatorFunc = *const fn (_model: *gtk.TreeModel, _iter: *gtk.TreeIter, _data: ?*anyopaque) callconv(.c) bool;
/// callback [TreeViewSearchEqualFunc](https://docs.gtk.org/gtk4/callback.TreeViewSearchEqualFunc.html)
pub const TreeViewSearchEqualFunc = *const fn (_model: *gtk.TreeModel, _column: i32, _key: [*:0]const u8, _iter: *gtk.TreeIter, _search_data: ?*anyopaque) callconv(.c) bool;
/// Enum [Unit](https://docs.gtk.org/gtk4/enum.Unit.html)
pub const Unit = enum(u32) {
    none = 0,
    points = 1,
    inch = 2,
    mm = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_unit_get_type" });
        return cFn();
    }
};
/// Class [UriLauncher](https://docs.gtk.org/gtk4/class.UriLauncher.html)
/// - property [uri](https://docs.gtk.org/gtk4/property.UriLauncher.uri.html): (rw) `[*:0]const u8`
pub const UriLauncher = opaque {
    pub const Parent = gobject.Object;
    pub const Class = gtk.UriLauncherClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.UriLauncher.new.html)
    pub fn new(_uri: ?[*:0]const u8) *UriLauncher {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *UriLauncher, .{ .name = "gtk_uri_launcher_new" });
        const ret = cFn(_uri);
        return ret;
    }
    /// method [get_uri](https://docs.gtk.org/gtk4/method.UriLauncher.get_uri.html)
    pub fn getUri(self: *UriLauncher) ?[*:0]u8 {
        const cFn = @extern(*const fn (*UriLauncher) callconv(.c) ?[*:0]u8, .{ .name = "gtk_uri_launcher_get_uri" });
        const ret = cFn(self);
        return ret;
    }
    /// method [launch](https://docs.gtk.org/gtk4/method.UriLauncher.launch.html)
    pub fn launch(self: *UriLauncher, _parent: ?*gtk.Window, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (*UriLauncher, ?*gtk.Window, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_uri_launcher_launch" });
        const ret = cFn(self, _parent, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
    /// method [launch_finish](https://docs.gtk.org/gtk4/method.UriLauncher.launch_finish.html)
    pub fn launchFinish(self: *UriLauncher, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*UriLauncher, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_uri_launcher_launch_finish" });
        const ret = cFn(self, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
    /// method [set_uri](https://docs.gtk.org/gtk4/method.UriLauncher.set_uri.html)
    pub fn setUri(self: *UriLauncher, _uri: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*UriLauncher, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_uri_launcher_set_uri" });
        const ret = cFn(self, _uri);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_uri_launcher_get_type" });
        return cFn();
    }
};
pub const UriLauncherClass = extern struct {
    parent_class: gobject.ObjectClass,
};
/// Class [Video](https://docs.gtk.org/gtk4/class.Video.html)
/// - property [autoplay](https://docs.gtk.org/gtk4/property.Video.autoplay.html): (rw) `bool`
/// - property [file](https://docs.gtk.org/gtk4/property.Video.file.html): (rw) `gio.File`
/// - property [graphics-offload](https://docs.gtk.org/gtk4/property.Video.graphics-offload.html): (rw) `gtk.GraphicsOffloadEnabled`
/// - property [loop](https://docs.gtk.org/gtk4/property.Video.loop.html): (rw) `bool`
/// - property [media-stream](https://docs.gtk.org/gtk4/property.Video.media-stream.html): (rw) `gtk.MediaStream`
pub const Video = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.VideoClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Video.new.html)
    pub fn new() *Video {
        const cFn = @extern(*const fn () callconv(.c) *Video, .{ .name = "gtk_video_new" });
        const ret = cFn();
        return ret;
    }
    /// ctor [new_for_file](https://docs.gtk.org/gtk4/ctor.Video.new_for_file.html)
    pub fn newForFile(_file: ?*gio.File) *Video {
        const cFn = @extern(*const fn (?*gio.File) callconv(.c) *Video, .{ .name = "gtk_video_new_for_file" });
        const ret = cFn(_file);
        return ret;
    }
    /// ctor [new_for_filename](https://docs.gtk.org/gtk4/ctor.Video.new_for_filename.html)
    pub fn newForFilename(_filename: ?[*:0]const u8) *Video {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Video, .{ .name = "gtk_video_new_for_filename" });
        const ret = cFn(_filename);
        return ret;
    }
    /// ctor [new_for_media_stream](https://docs.gtk.org/gtk4/ctor.Video.new_for_media_stream.html)
    pub fn newForMediaStream(_stream: ?*gtk.MediaStream) *Video {
        const cFn = @extern(*const fn (?*gtk.MediaStream) callconv(.c) *Video, .{ .name = "gtk_video_new_for_media_stream" });
        const ret = cFn(_stream);
        return ret;
    }
    /// ctor [new_for_resource](https://docs.gtk.org/gtk4/ctor.Video.new_for_resource.html)
    pub fn newForResource(_resource_path: ?[*:0]const u8) *Video {
        const cFn = @extern(*const fn (?[*:0]const u8) callconv(.c) *Video, .{ .name = "gtk_video_new_for_resource" });
        const ret = cFn(_resource_path);
        return ret;
    }
    /// method [get_autoplay](https://docs.gtk.org/gtk4/method.Video.get_autoplay.html)
    pub fn getAutoplay(self: *Video) bool {
        const cFn = @extern(*const fn (*Video) callconv(.c) bool, .{ .name = "gtk_video_get_autoplay" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_file](https://docs.gtk.org/gtk4/method.Video.get_file.html)
    pub fn getFile(self: *Video) ?*gio.File {
        const cFn = @extern(*const fn (*Video) callconv(.c) ?*gio.File, .{ .name = "gtk_video_get_file" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_graphics_offload](https://docs.gtk.org/gtk4/method.Video.get_graphics_offload.html)
    pub fn getGraphicsOffload(self: *Video) gtk.GraphicsOffloadEnabled {
        const cFn = @extern(*const fn (*Video) callconv(.c) gtk.GraphicsOffloadEnabled, .{ .name = "gtk_video_get_graphics_offload" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_loop](https://docs.gtk.org/gtk4/method.Video.get_loop.html)
    pub fn getLoop(self: *Video) bool {
        const cFn = @extern(*const fn (*Video) callconv(.c) bool, .{ .name = "gtk_video_get_loop" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_media_stream](https://docs.gtk.org/gtk4/method.Video.get_media_stream.html)
    pub fn getMediaStream(self: *Video) ?*gtk.MediaStream {
        const cFn = @extern(*const fn (*Video) callconv(.c) ?*gtk.MediaStream, .{ .name = "gtk_video_get_media_stream" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_autoplay](https://docs.gtk.org/gtk4/method.Video.set_autoplay.html)
    pub fn setAutoplay(self: *Video, _autoplay: bool) void {
        const cFn = @extern(*const fn (*Video, bool) callconv(.c) void, .{ .name = "gtk_video_set_autoplay" });
        const ret = cFn(self, _autoplay);
        return ret;
    }
    /// method [set_file](https://docs.gtk.org/gtk4/method.Video.set_file.html)
    pub fn setFile(self: *Video, _file: ?*gio.File) void {
        const cFn = @extern(*const fn (*Video, ?*gio.File) callconv(.c) void, .{ .name = "gtk_video_set_file" });
        const ret = cFn(self, _file);
        return ret;
    }
    /// method [set_filename](https://docs.gtk.org/gtk4/method.Video.set_filename.html)
    pub fn setFilename(self: *Video, _filename: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Video, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_video_set_filename" });
        const ret = cFn(self, _filename);
        return ret;
    }
    /// method [set_graphics_offload](https://docs.gtk.org/gtk4/method.Video.set_graphics_offload.html)
    pub fn setGraphicsOffload(self: *Video, _enabled: gtk.GraphicsOffloadEnabled) void {
        const cFn = @extern(*const fn (*Video, gtk.GraphicsOffloadEnabled) callconv(.c) void, .{ .name = "gtk_video_set_graphics_offload" });
        const ret = cFn(self, _enabled);
        return ret;
    }
    /// method [set_loop](https://docs.gtk.org/gtk4/method.Video.set_loop.html)
    pub fn setLoop(self: *Video, _loop: bool) void {
        const cFn = @extern(*const fn (*Video, bool) callconv(.c) void, .{ .name = "gtk_video_set_loop" });
        const ret = cFn(self, _loop);
        return ret;
    }
    /// method [set_media_stream](https://docs.gtk.org/gtk4/method.Video.set_media_stream.html)
    pub fn setMediaStream(self: *Video, _stream: ?*gtk.MediaStream) void {
        const cFn = @extern(*const fn (*Video, ?*gtk.MediaStream) callconv(.c) void, .{ .name = "gtk_video_set_media_stream" });
        const ret = cFn(self, _stream);
        return ret;
    }
    /// method [set_resource](https://docs.gtk.org/gtk4/method.Video.set_resource.html)
    pub fn setResource(self: *Video, _resource_path: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Video, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_video_set_resource" });
        const ret = cFn(self, _resource_path);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_video_get_type" });
        return cFn();
    }
};
pub const VideoClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Class [Viewport](https://docs.gtk.org/gtk4/class.Viewport.html)
/// - property [child](https://docs.gtk.org/gtk4/property.Viewport.child.html): (rw) `gtk.Widget`
/// - property [scroll-to-focus](https://docs.gtk.org/gtk4/property.Viewport.scroll-to-focus.html): (rw) `bool`
pub const Viewport = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Scrollable };
    pub const Parent = gtk.Widget;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Viewport.new.html)
    pub fn new(_hadjustment: ?*gtk.Adjustment, _vadjustment: ?*gtk.Adjustment) *Viewport {
        const cFn = @extern(*const fn (?*gtk.Adjustment, ?*gtk.Adjustment) callconv(.c) *Viewport, .{ .name = "gtk_viewport_new" });
        const ret = cFn(_hadjustment, _vadjustment);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Viewport.get_child.html)
    pub fn getChild(self: *Viewport) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Viewport) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_viewport_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scroll_to_focus](https://docs.gtk.org/gtk4/method.Viewport.get_scroll_to_focus.html)
    pub fn getScrollToFocus(self: *Viewport) bool {
        const cFn = @extern(*const fn (*Viewport) callconv(.c) bool, .{ .name = "gtk_viewport_get_scroll_to_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [scroll_to](https://docs.gtk.org/gtk4/method.Viewport.scroll_to.html)
    pub fn scrollTo(self: *Viewport, _descendant: *gtk.Widget, _scroll: ?*gtk.ScrollInfo) void {
        const cFn = @extern(*const fn (*Viewport, *gtk.Widget, ?*gtk.ScrollInfo) callconv(.c) void, .{ .name = "gtk_viewport_scroll_to" });
        const ret = cFn(self, _descendant, _scroll);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Viewport.set_child.html)
    pub fn setChild(self: *Viewport, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Viewport, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_viewport_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_scroll_to_focus](https://docs.gtk.org/gtk4/method.Viewport.set_scroll_to_focus.html)
    pub fn setScrollToFocus(self: *Viewport, _scroll_to_focus: bool) void {
        const cFn = @extern(*const fn (*Viewport, bool) callconv(.c) void, .{ .name = "gtk_viewport_set_scroll_to_focus" });
        const ret = cFn(self, _scroll_to_focus);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_viewport_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Class [VolumeButton](https://docs.gtk.org/gtk4/class.VolumeButton.html)
/// - property [use-symbolic](https://docs.gtk.org/gtk4/property.VolumeButton.use-symbolic.html): (rw) `bool`
pub const VolumeButton = if (config.disable_deprecated) core.Deprecated else extern struct {
    parent: gtk.ScaleButton,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.AccessibleRange, gtk.Buildable, gtk.ConstraintTarget, gtk.Orientable };
    pub const Parent = gtk.ScaleButton;
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.VolumeButton.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new() *VolumeButton {
            const cFn = @extern(*const fn () callconv(.c) *VolumeButton, .{ .name = "gtk_volume_button_new" });
            const ret = cFn();
            return ret;
        }
    }.new;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_volume_button_get_type" });
        return cFn();
    }
};
/// Class [Widget](https://docs.gtk.org/gtk4/class.Widget.html)
/// - property [can-focus](https://docs.gtk.org/gtk4/property.Widget.can-focus.html): (rw) `bool`
/// - property [can-target](https://docs.gtk.org/gtk4/property.Widget.can-target.html): (rw) `bool`
/// - property [css-classes](https://docs.gtk.org/gtk4/property.Widget.css-classes.html): (rw) `[*:null]?[*:0]const u8`
/// - property [css-name](https://docs.gtk.org/gtk4/property.Widget.css-name.html): (r-) `[*:0]const u8`
/// - property [cursor](https://docs.gtk.org/gtk4/property.Widget.cursor.html): (rw) `gdk.Cursor`
/// - property [focus-on-click](https://docs.gtk.org/gtk4/property.Widget.focus-on-click.html): (rw) `bool`
/// - property [focusable](https://docs.gtk.org/gtk4/property.Widget.focusable.html): (rw) `bool`
/// - property [halign](https://docs.gtk.org/gtk4/property.Widget.halign.html): (rw) `gtk.Align`
/// - property [has-default](https://docs.gtk.org/gtk4/property.Widget.has-default.html): (r-) `bool`
/// - property [has-focus](https://docs.gtk.org/gtk4/property.Widget.has-focus.html): (r-) `bool`
/// - property [has-tooltip](https://docs.gtk.org/gtk4/property.Widget.has-tooltip.html): (rw) `bool`
/// - property [height-request](https://docs.gtk.org/gtk4/property.Widget.height-request.html): (rw) `i32`
/// - property [hexpand](https://docs.gtk.org/gtk4/property.Widget.hexpand.html): (rw) `bool`
/// - property [hexpand-set](https://docs.gtk.org/gtk4/property.Widget.hexpand-set.html): (rw) `bool`
/// - property [layout-manager](https://docs.gtk.org/gtk4/property.Widget.layout-manager.html): (rw) `gtk.LayoutManager`
/// - property [margin-bottom](https://docs.gtk.org/gtk4/property.Widget.margin-bottom.html): (rw) `i32`
/// - property [margin-end](https://docs.gtk.org/gtk4/property.Widget.margin-end.html): (rw) `i32`
/// - property [margin-start](https://docs.gtk.org/gtk4/property.Widget.margin-start.html): (rw) `i32`
/// - property [margin-top](https://docs.gtk.org/gtk4/property.Widget.margin-top.html): (rw) `i32`
/// - property [name](https://docs.gtk.org/gtk4/property.Widget.name.html): (rw) `[*:0]const u8`
/// - property [opacity](https://docs.gtk.org/gtk4/property.Widget.opacity.html): (rw) `f64`
/// - property [overflow](https://docs.gtk.org/gtk4/property.Widget.overflow.html): (rw) `gtk.Overflow`
/// - property [parent](https://docs.gtk.org/gtk4/property.Widget.parent.html): (r-) `gtk.Widget`
/// - property [receives-default](https://docs.gtk.org/gtk4/property.Widget.receives-default.html): (rw) `bool`
/// - property [root](https://docs.gtk.org/gtk4/property.Widget.root.html): (r-) `gtk.Root`
/// - property [scale-factor](https://docs.gtk.org/gtk4/property.Widget.scale-factor.html): (r-) `i32`
/// - property [sensitive](https://docs.gtk.org/gtk4/property.Widget.sensitive.html): (rw) `bool`
/// - property [tooltip-markup](https://docs.gtk.org/gtk4/property.Widget.tooltip-markup.html): (rw) `[*:0]const u8`
/// - property [tooltip-text](https://docs.gtk.org/gtk4/property.Widget.tooltip-text.html): (rw) `[*:0]const u8`
/// - property [valign](https://docs.gtk.org/gtk4/property.Widget.valign.html): (rw) `gtk.Align`
/// - property [vexpand](https://docs.gtk.org/gtk4/property.Widget.vexpand.html): (rw) `bool`
/// - property [vexpand-set](https://docs.gtk.org/gtk4/property.Widget.vexpand-set.html): (rw) `bool`
/// - property [visible](https://docs.gtk.org/gtk4/property.Widget.visible.html): (rw) `bool`
/// - property [width-request](https://docs.gtk.org/gtk4/property.Widget.width-request.html): (rw) `i32`
pub const Widget = extern struct {
    parent_instance: gobject.InitiallyUnowned,
    priv: ?*gtk.WidgetPrivate,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gobject.InitiallyUnowned;
    pub const Class = gtk.WidgetClass;
    /// type func [get_default_direction](https://docs.gtk.org/gtk4/type_func.Widget.get_default_direction.html)
    pub fn getDefaultDirection() gtk.TextDirection {
        const cFn = @extern(*const fn () callconv(.c) gtk.TextDirection, .{ .name = "gtk_widget_get_default_direction" });
        const ret = cFn();
        return ret;
    }
    /// type func [set_default_direction](https://docs.gtk.org/gtk4/type_func.Widget.set_default_direction.html)
    pub fn setDefaultDirection(_dir: gtk.TextDirection) void {
        const cFn = @extern(*const fn (gtk.TextDirection) callconv(.c) void, .{ .name = "gtk_widget_set_default_direction" });
        const ret = cFn(_dir);
        return ret;
    }
    /// method [action_set_enabled](https://docs.gtk.org/gtk4/method.Widget.action_set_enabled.html)
    pub fn actionSetEnabled(self: *Widget, _action_name: [*:0]const u8, _enabled: bool) void {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8, bool) callconv(.c) void, .{ .name = "gtk_widget_action_set_enabled" });
        const ret = cFn(self, _action_name, _enabled);
        return ret;
    }
    /// method [activate](https://docs.gtk.org/gtk4/method.Widget.activate.html)
    pub fn activate(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_activate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [activate_action](https://docs.gtk.org/gtk4/method.Widget.activate_action.html)
    pub fn activateAction(self: *Widget, _name: [*:0]const u8, _args: ?*glib.Variant) bool {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8, ?*glib.Variant) callconv(.c) bool, .{ .name = "gtk_widget_activate_action_variant" });
        const ret = cFn(self, _name, _args);
        return ret;
    }
    /// method [activate_default](https://docs.gtk.org/gtk4/method.Widget.activate_default.html)
    pub fn activateDefault(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_activate_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [add_controller](https://docs.gtk.org/gtk4/method.Widget.add_controller.html)
    pub fn addController(self: *Widget, _controller: *gtk.EventController) void {
        const cFn = @extern(*const fn (*Widget, *gtk.EventController) callconv(.c) void, .{ .name = "gtk_widget_add_controller" });
        const ret = cFn(self, _controller);
        return ret;
    }
    /// method [add_css_class](https://docs.gtk.org/gtk4/method.Widget.add_css_class.html)
    pub fn addCssClass(self: *Widget, _css_class: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_add_css_class" });
        const ret = cFn(self, _css_class);
        return ret;
    }
    /// method [add_mnemonic_label](https://docs.gtk.org/gtk4/method.Widget.add_mnemonic_label.html)
    pub fn addMnemonicLabel(self: *Widget, _label: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_add_mnemonic_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [add_tick_callback](https://docs.gtk.org/gtk4/method.Widget.add_tick_callback.html)
    pub fn addTickCallback(self: *Widget, callback: anytype, callback_args: anytype) u32 {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ bool, *gtk.Widget, *gdk.FrameClock });
        const _callback: gtk.TickCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const _notify: glib.DestroyNotify = @ptrCast(closure_callback.c_destroy());
        const cFn = @extern(*const fn (*Widget, gtk.TickCallback, ?*anyopaque, glib.DestroyNotify) callconv(.c) u32, .{ .name = "gtk_widget_add_tick_callback" });
        const ret = cFn(self, _callback, @ptrCast(_user_data), _notify);
        return ret;
    }
    /// method [allocate](https://docs.gtk.org/gtk4/method.Widget.allocate.html)
    pub fn allocate(self: *Widget, _width: i32, _height: i32, _baseline: i32, _transform: ?*gsk.Transform) void {
        const cFn = @extern(*const fn (*Widget, i32, i32, i32, ?*gsk.Transform) callconv(.c) void, .{ .name = "gtk_widget_allocate" });
        const ret = cFn(self, _width, _height, _baseline, _transform);
        return ret;
    }
    /// method [child_focus](https://docs.gtk.org/gtk4/method.Widget.child_focus.html)
    pub fn childFocus(self: *Widget, _direction: gtk.DirectionType) bool {
        const cFn = @extern(*const fn (*Widget, gtk.DirectionType) callconv(.c) bool, .{ .name = "gtk_widget_child_focus" });
        const ret = cFn(self, _direction);
        return ret;
    }
    /// method [compute_bounds](https://docs.gtk.org/gtk4/method.Widget.compute_bounds.html)
    pub fn computeBounds(self: *Widget, _target: *gtk.Widget, _out_bounds: *graphene.Rect) bool {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, *graphene.Rect) callconv(.c) bool, .{ .name = "gtk_widget_compute_bounds" });
        const ret = cFn(self, _target, _out_bounds);
        return ret;
    }
    /// method [compute_expand](https://docs.gtk.org/gtk4/method.Widget.compute_expand.html)
    pub fn computeExpand(self: *Widget, _orientation: gtk.Orientation) bool {
        const cFn = @extern(*const fn (*Widget, gtk.Orientation) callconv(.c) bool, .{ .name = "gtk_widget_compute_expand" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// method [compute_point](https://docs.gtk.org/gtk4/method.Widget.compute_point.html)
    pub fn computePoint(self: *Widget, _target: *gtk.Widget, _point: *graphene.Point, _out_point: *graphene.Point) bool {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, *graphene.Point, *graphene.Point) callconv(.c) bool, .{ .name = "gtk_widget_compute_point" });
        const ret = cFn(self, _target, _point, _out_point);
        return ret;
    }
    /// method [compute_transform](https://docs.gtk.org/gtk4/method.Widget.compute_transform.html)
    pub fn computeTransform(self: *Widget, _target: *gtk.Widget, _out_transform: *graphene.Matrix) bool {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, *graphene.Matrix) callconv(.c) bool, .{ .name = "gtk_widget_compute_transform" });
        const ret = cFn(self, _target, _out_transform);
        return ret;
    }
    /// method [contains](https://docs.gtk.org/gtk4/method.Widget.contains.html)
    pub fn contains(self: *Widget, _x: f64, _y: f64) bool {
        const cFn = @extern(*const fn (*Widget, f64, f64) callconv(.c) bool, .{ .name = "gtk_widget_contains" });
        const ret = cFn(self, _x, _y);
        return ret;
    }
    /// method [create_pango_context](https://docs.gtk.org/gtk4/method.Widget.create_pango_context.html)
    pub fn createPangoContext(self: *Widget) *pango.Context {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *pango.Context, .{ .name = "gtk_widget_create_pango_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [create_pango_layout](https://docs.gtk.org/gtk4/method.Widget.create_pango_layout.html)
    pub fn createPangoLayout(self: *Widget, _text: ?[*:0]const u8) *pango.Layout {
        const cFn = @extern(*const fn (*Widget, ?[*:0]const u8) callconv(.c) *pango.Layout, .{ .name = "gtk_widget_create_pango_layout" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [dispose_template](https://docs.gtk.org/gtk4/method.Widget.dispose_template.html)
    pub fn disposeTemplate(self: *Widget, _widget_type: core.Type) void {
        const cFn = @extern(*const fn (*Widget, core.Type) callconv(.c) void, .{ .name = "gtk_widget_dispose_template" });
        const ret = cFn(self, _widget_type);
        return ret;
    }
    /// method [drag_check_threshold](https://docs.gtk.org/gtk4/method.Widget.drag_check_threshold.html)
    pub fn dragCheckThreshold(self: *Widget, _start_x: i32, _start_y: i32, _current_x: i32, _current_y: i32) bool {
        const cFn = @extern(*const fn (*Widget, i32, i32, i32, i32) callconv(.c) bool, .{ .name = "gtk_drag_check_threshold" });
        const ret = cFn(self, _start_x, _start_y, _current_x, _current_y);
        return ret;
    }
    /// method [error_bell](https://docs.gtk.org/gtk4/method.Widget.error_bell.html)
    pub fn errorBell(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_error_bell" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_allocated_baseline](https://docs.gtk.org/gtk4/method.Widget.get_allocated_baseline.html)
    pub const getAllocatedBaseline = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAllocatedBaseline(self: *Widget) i32 {
            const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_allocated_baseline" });
            const ret = cFn(self);
            return ret;
        }
    }.getAllocatedBaseline;
    /// Deprecated:
    /// method [get_allocated_height](https://docs.gtk.org/gtk4/method.Widget.get_allocated_height.html)
    pub const getAllocatedHeight = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAllocatedHeight(self: *Widget) i32 {
            const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_allocated_height" });
            const ret = cFn(self);
            return ret;
        }
    }.getAllocatedHeight;
    /// Deprecated:
    /// method [get_allocated_width](https://docs.gtk.org/gtk4/method.Widget.get_allocated_width.html)
    pub const getAllocatedWidth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAllocatedWidth(self: *Widget) i32 {
            const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_allocated_width" });
            const ret = cFn(self);
            return ret;
        }
    }.getAllocatedWidth;
    /// Deprecated:
    /// method [get_allocation](https://docs.gtk.org/gtk4/method.Widget.get_allocation.html)
    pub const getAllocation = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getAllocation(self: *Widget, _allocation: *gdk.Rectangle) void {
            const cFn = @extern(*const fn (*Widget, *gdk.Rectangle) callconv(.c) void, .{ .name = "gtk_widget_get_allocation" });
            const ret = cFn(self, _allocation);
            return ret;
        }
    }.getAllocation;
    /// method [get_ancestor](https://docs.gtk.org/gtk4/method.Widget.get_ancestor.html)
    pub fn getAncestor(self: *Widget, _widget_type: core.Type) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget, core.Type) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_ancestor" });
        const ret = cFn(self, _widget_type);
        return ret;
    }
    /// method [get_baseline](https://docs.gtk.org/gtk4/method.Widget.get_baseline.html)
    pub fn getBaseline(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_baseline" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_focus](https://docs.gtk.org/gtk4/method.Widget.get_can_focus.html)
    pub fn getCanFocus(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_can_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_can_target](https://docs.gtk.org/gtk4/method.Widget.get_can_target.html)
    pub fn getCanTarget(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_can_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child_visible](https://docs.gtk.org/gtk4/method.Widget.get_child_visible.html)
    pub fn getChildVisible(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_child_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_clipboard](https://docs.gtk.org/gtk4/method.Widget.get_clipboard.html)
    pub fn getClipboard(self: *Widget) *gdk.Clipboard {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gdk.Clipboard, .{ .name = "gtk_widget_get_clipboard" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_color](https://docs.gtk.org/gtk4/method.Widget.get_color.html)
    pub fn getColor(self: *Widget, _color: *gdk.RGBA) void {
        const cFn = @extern(*const fn (*Widget, *gdk.RGBA) callconv(.c) void, .{ .name = "gtk_widget_get_color" });
        const ret = cFn(self, _color);
        return ret;
    }
    /// method [get_css_classes](https://docs.gtk.org/gtk4/method.Widget.get_css_classes.html)
    pub fn getCssClasses(self: *Widget) [*:null]?[*:0]const u8 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) [*:null]?[*:0]const u8, .{ .name = "gtk_widget_get_css_classes" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_css_name](https://docs.gtk.org/gtk4/method.Widget.get_css_name.html)
    pub fn getCssName(self: *Widget) [*:0]u8 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) [*:0]u8, .{ .name = "gtk_widget_get_css_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_cursor](https://docs.gtk.org/gtk4/method.Widget.get_cursor.html)
    pub fn getCursor(self: *Widget) ?*gdk.Cursor {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gdk.Cursor, .{ .name = "gtk_widget_get_cursor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_direction](https://docs.gtk.org/gtk4/method.Widget.get_direction.html)
    pub fn getDirection(self: *Widget) gtk.TextDirection {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.TextDirection, .{ .name = "gtk_widget_get_direction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_display](https://docs.gtk.org/gtk4/method.Widget.get_display.html)
    pub fn getDisplay(self: *Widget) *gdk.Display {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gdk.Display, .{ .name = "gtk_widget_get_display" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_first_child](https://docs.gtk.org/gtk4/method.Widget.get_first_child.html)
    pub fn getFirstChild(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_first_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus_child](https://docs.gtk.org/gtk4/method.Widget.get_focus_child.html)
    pub fn getFocusChild(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_focus_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus_on_click](https://docs.gtk.org/gtk4/method.Widget.get_focus_on_click.html)
    pub fn getFocusOnClick(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_focus_on_click" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focusable](https://docs.gtk.org/gtk4/method.Widget.get_focusable.html)
    pub fn getFocusable(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_focusable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_map](https://docs.gtk.org/gtk4/method.Widget.get_font_map.html)
    pub fn getFontMap(self: *Widget) ?*pango.FontMap {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*pango.FontMap, .{ .name = "gtk_widget_get_font_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_font_options](https://docs.gtk.org/gtk4/method.Widget.get_font_options.html)
    pub fn getFontOptions(self: *Widget) ?*cairo.FontOptions {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*cairo.FontOptions, .{ .name = "gtk_widget_get_font_options" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_frame_clock](https://docs.gtk.org/gtk4/method.Widget.get_frame_clock.html)
    pub fn getFrameClock(self: *Widget) ?*gdk.FrameClock {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gdk.FrameClock, .{ .name = "gtk_widget_get_frame_clock" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_halign](https://docs.gtk.org/gtk4/method.Widget.get_halign.html)
    pub fn getHalign(self: *Widget) gtk.Align {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.Align, .{ .name = "gtk_widget_get_halign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_has_tooltip](https://docs.gtk.org/gtk4/method.Widget.get_has_tooltip.html)
    pub fn getHasTooltip(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_has_tooltip" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_height](https://docs.gtk.org/gtk4/method.Widget.get_height.html)
    pub fn getHeight(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_height" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hexpand](https://docs.gtk.org/gtk4/method.Widget.get_hexpand.html)
    pub fn getHexpand(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_hexpand" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hexpand_set](https://docs.gtk.org/gtk4/method.Widget.get_hexpand_set.html)
    pub fn getHexpandSet(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_hexpand_set" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_last_child](https://docs.gtk.org/gtk4/method.Widget.get_last_child.html)
    pub fn getLastChild(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_last_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_layout_manager](https://docs.gtk.org/gtk4/method.Widget.get_layout_manager.html)
    pub fn getLayoutManager(self: *Widget) ?*gtk.LayoutManager {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.LayoutManager, .{ .name = "gtk_widget_get_layout_manager" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mapped](https://docs.gtk.org/gtk4/method.Widget.get_mapped.html)
    pub fn getMapped(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_mapped" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_margin_bottom](https://docs.gtk.org/gtk4/method.Widget.get_margin_bottom.html)
    pub fn getMarginBottom(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_margin_bottom" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_margin_end](https://docs.gtk.org/gtk4/method.Widget.get_margin_end.html)
    pub fn getMarginEnd(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_margin_end" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_margin_start](https://docs.gtk.org/gtk4/method.Widget.get_margin_start.html)
    pub fn getMarginStart(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_margin_start" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_margin_top](https://docs.gtk.org/gtk4/method.Widget.get_margin_top.html)
    pub fn getMarginTop(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_margin_top" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gtk4/method.Widget.get_name.html)
    pub fn getName(self: *Widget) [*:0]u8 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) [*:0]u8, .{ .name = "gtk_widget_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_native](https://docs.gtk.org/gtk4/method.Widget.get_native.html)
    pub fn getNative(self: *Widget) ?*gtk.Native {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Native, .{ .name = "gtk_widget_get_native" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_next_sibling](https://docs.gtk.org/gtk4/method.Widget.get_next_sibling.html)
    pub fn getNextSibling(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_next_sibling" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_opacity](https://docs.gtk.org/gtk4/method.Widget.get_opacity.html)
    pub fn getOpacity(self: *Widget) f64 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) f64, .{ .name = "gtk_widget_get_opacity" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_overflow](https://docs.gtk.org/gtk4/method.Widget.get_overflow.html)
    pub fn getOverflow(self: *Widget) gtk.Overflow {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.Overflow, .{ .name = "gtk_widget_get_overflow" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pango_context](https://docs.gtk.org/gtk4/method.Widget.get_pango_context.html)
    pub fn getPangoContext(self: *Widget) *pango.Context {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *pango.Context, .{ .name = "gtk_widget_get_pango_context" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_parent](https://docs.gtk.org/gtk4/method.Widget.get_parent.html)
    pub fn getParent(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_preferred_size](https://docs.gtk.org/gtk4/method.Widget.get_preferred_size.html)
    pub fn getPreferredSize(self: *Widget, _minimum_size: ?*gtk.Requisition, _natural_size: ?*gtk.Requisition) void {
        const cFn = @extern(*const fn (*Widget, ?*gtk.Requisition, ?*gtk.Requisition) callconv(.c) void, .{ .name = "gtk_widget_get_preferred_size" });
        const ret = cFn(self, _minimum_size, _natural_size);
        return ret;
    }
    /// method [get_prev_sibling](https://docs.gtk.org/gtk4/method.Widget.get_prev_sibling.html)
    pub fn getPrevSibling(self: *Widget) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_get_prev_sibling" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_primary_clipboard](https://docs.gtk.org/gtk4/method.Widget.get_primary_clipboard.html)
    pub fn getPrimaryClipboard(self: *Widget) *gdk.Clipboard {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gdk.Clipboard, .{ .name = "gtk_widget_get_primary_clipboard" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_realized](https://docs.gtk.org/gtk4/method.Widget.get_realized.html)
    pub fn getRealized(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_realized" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_receives_default](https://docs.gtk.org/gtk4/method.Widget.get_receives_default.html)
    pub fn getReceivesDefault(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_receives_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_request_mode](https://docs.gtk.org/gtk4/method.Widget.get_request_mode.html)
    pub fn getRequestMode(self: *Widget) gtk.SizeRequestMode {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.SizeRequestMode, .{ .name = "gtk_widget_get_request_mode" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_root](https://docs.gtk.org/gtk4/method.Widget.get_root.html)
    pub fn getRoot(self: *Widget) ?*gtk.Root {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*gtk.Root, .{ .name = "gtk_widget_get_root" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_scale_factor](https://docs.gtk.org/gtk4/method.Widget.get_scale_factor.html)
    pub fn getScaleFactor(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_scale_factor" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_sensitive](https://docs.gtk.org/gtk4/method.Widget.get_sensitive.html)
    pub fn getSensitive(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_sensitive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_settings](https://docs.gtk.org/gtk4/method.Widget.get_settings.html)
    pub fn getSettings(self: *Widget) *gtk.Settings {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gtk.Settings, .{ .name = "gtk_widget_get_settings" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_size](https://docs.gtk.org/gtk4/method.Widget.get_size.html)
    pub fn getSize(self: *Widget, _orientation: gtk.Orientation) i32 {
        const cFn = @extern(*const fn (*Widget, gtk.Orientation) callconv(.c) i32, .{ .name = "gtk_widget_get_size" });
        const ret = cFn(self, _orientation);
        return ret;
    }
    /// method [get_size_request](https://docs.gtk.org/gtk4/method.Widget.get_size_request.html)
    pub fn getSizeRequest(self: *Widget) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Widget, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_widget_get_size_request" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_state_flags](https://docs.gtk.org/gtk4/method.Widget.get_state_flags.html)
    pub fn getStateFlags(self: *Widget) gtk.StateFlags {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.StateFlags, .{ .name = "gtk_widget_get_state_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_style_context](https://docs.gtk.org/gtk4/method.Widget.get_style_context.html)
    pub const getStyleContext = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getStyleContext(self: *Widget) *gtk.StyleContext {
            const cFn = @extern(*const fn (*Widget) callconv(.c) *gtk.StyleContext, .{ .name = "gtk_widget_get_style_context" });
            const ret = cFn(self);
            return ret;
        }
    }.getStyleContext;
    /// method [get_template_child](https://docs.gtk.org/gtk4/method.Widget.get_template_child.html)
    pub fn getTemplateChild(self: *Widget, _widget_type: core.Type, _name: [*:0]const u8) *gobject.Object {
        const cFn = @extern(*const fn (*Widget, core.Type, [*:0]const u8) callconv(.c) *gobject.Object, .{ .name = "gtk_widget_get_template_child" });
        const ret = cFn(self, _widget_type, _name);
        return ret;
    }
    /// method [get_tooltip_markup](https://docs.gtk.org/gtk4/method.Widget.get_tooltip_markup.html)
    pub fn getTooltipMarkup(self: *Widget) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?[*:0]u8, .{ .name = "gtk_widget_get_tooltip_markup" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_tooltip_text](https://docs.gtk.org/gtk4/method.Widget.get_tooltip_text.html)
    pub fn getTooltipText(self: *Widget) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?[*:0]u8, .{ .name = "gtk_widget_get_tooltip_text" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_valign](https://docs.gtk.org/gtk4/method.Widget.get_valign.html)
    pub fn getValign(self: *Widget) gtk.Align {
        const cFn = @extern(*const fn (*Widget) callconv(.c) gtk.Align, .{ .name = "gtk_widget_get_valign" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vexpand](https://docs.gtk.org/gtk4/method.Widget.get_vexpand.html)
    pub fn getVexpand(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_vexpand" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_vexpand_set](https://docs.gtk.org/gtk4/method.Widget.get_vexpand_set.html)
    pub fn getVexpandSet(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_vexpand_set" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_visible](https://docs.gtk.org/gtk4/method.Widget.get_visible.html)
    pub fn getVisible(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_get_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_width](https://docs.gtk.org/gtk4/method.Widget.get_width.html)
    pub fn getWidth(self: *Widget) i32 {
        const cFn = @extern(*const fn (*Widget) callconv(.c) i32, .{ .name = "gtk_widget_get_width" });
        const ret = cFn(self);
        return ret;
    }
    /// method [grab_focus](https://docs.gtk.org/gtk4/method.Widget.grab_focus.html)
    pub fn grabFocus(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_grab_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_css_class](https://docs.gtk.org/gtk4/method.Widget.has_css_class.html)
    pub fn hasCssClass(self: *Widget, _css_class: [*:0]const u8) bool {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8) callconv(.c) bool, .{ .name = "gtk_widget_has_css_class" });
        const ret = cFn(self, _css_class);
        return ret;
    }
    /// method [has_default](https://docs.gtk.org/gtk4/method.Widget.has_default.html)
    pub fn hasDefault(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_has_default" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_focus](https://docs.gtk.org/gtk4/method.Widget.has_focus.html)
    pub fn hasFocus(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_has_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_visible_focus](https://docs.gtk.org/gtk4/method.Widget.has_visible_focus.html)
    pub fn hasVisibleFocus(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_has_visible_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [hide](https://docs.gtk.org/gtk4/method.Widget.hide.html)
    pub const hide = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn hide(self: *Widget) void {
            const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_hide" });
            const ret = cFn(self);
            return ret;
        }
    }.hide;
    /// method [in_destruction](https://docs.gtk.org/gtk4/method.Widget.in_destruction.html)
    pub fn inDestruction(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_in_destruction" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init_template](https://docs.gtk.org/gtk4/method.Widget.init_template.html)
    pub fn initTemplate(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_init_template" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert_action_group](https://docs.gtk.org/gtk4/method.Widget.insert_action_group.html)
    pub fn insertActionGroup(self: *Widget, _name: [*:0]const u8, _group: ?*gio.ActionGroup) void {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8, ?*gio.ActionGroup) callconv(.c) void, .{ .name = "gtk_widget_insert_action_group" });
        const ret = cFn(self, _name, _group);
        return ret;
    }
    /// method [insert_after](https://docs.gtk.org/gtk4/method.Widget.insert_after.html)
    pub fn insertAfter(self: *Widget, _parent: *gtk.Widget, _previous_sibling: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_insert_after" });
        const ret = cFn(self, _parent, _previous_sibling);
        return ret;
    }
    /// method [insert_before](https://docs.gtk.org/gtk4/method.Widget.insert_before.html)
    pub fn insertBefore(self: *Widget, _parent: *gtk.Widget, _next_sibling: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_insert_before" });
        const ret = cFn(self, _parent, _next_sibling);
        return ret;
    }
    /// method [is_ancestor](https://docs.gtk.org/gtk4/method.Widget.is_ancestor.html)
    pub fn isAncestor(self: *Widget, _ancestor: *gtk.Widget) bool {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget) callconv(.c) bool, .{ .name = "gtk_widget_is_ancestor" });
        const ret = cFn(self, _ancestor);
        return ret;
    }
    /// method [is_drawable](https://docs.gtk.org/gtk4/method.Widget.is_drawable.html)
    pub fn isDrawable(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_is_drawable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_focus](https://docs.gtk.org/gtk4/method.Widget.is_focus.html)
    pub fn isFocus(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_is_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_sensitive](https://docs.gtk.org/gtk4/method.Widget.is_sensitive.html)
    pub fn isSensitive(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_is_sensitive" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_visible](https://docs.gtk.org/gtk4/method.Widget.is_visible.html)
    pub fn isVisible(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_is_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [keynav_failed](https://docs.gtk.org/gtk4/method.Widget.keynav_failed.html)
    pub fn keynavFailed(self: *Widget, _direction: gtk.DirectionType) bool {
        const cFn = @extern(*const fn (*Widget, gtk.DirectionType) callconv(.c) bool, .{ .name = "gtk_widget_keynav_failed" });
        const ret = cFn(self, _direction);
        return ret;
    }
    /// method [list_mnemonic_labels](https://docs.gtk.org/gtk4/method.Widget.list_mnemonic_labels.html)
    pub fn listMnemonicLabels(self: *Widget) ?*core.List {
        const cFn = @extern(*const fn (*Widget) callconv(.c) ?*core.List, .{ .name = "gtk_widget_list_mnemonic_labels" });
        const ret = cFn(self);
        return ret;
    }
    /// method [map](https://docs.gtk.org/gtk4/method.Widget.map.html)
    pub fn map(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_map" });
        const ret = cFn(self);
        return ret;
    }
    /// method [measure](https://docs.gtk.org/gtk4/method.Widget.measure.html)
    pub fn measure(self: *Widget, _orientation: gtk.Orientation, _for_size: i32) struct {
        ret: void,
        minimum: i32,
        natural: i32,
        minimum_baseline: i32,
        natural_baseline: i32,
    } {
        var minimum_out: i32 = undefined;
        const _minimum = &minimum_out;
        var natural_out: i32 = undefined;
        const _natural = &natural_out;
        var minimum_baseline_out: i32 = undefined;
        const _minimum_baseline = &minimum_baseline_out;
        var natural_baseline_out: i32 = undefined;
        const _natural_baseline = &natural_baseline_out;
        const cFn = @extern(*const fn (*Widget, gtk.Orientation, i32, ?*i32, ?*i32, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_widget_measure" });
        const ret = cFn(self, _orientation, _for_size, _minimum, _natural, _minimum_baseline, _natural_baseline);
        return .{ .ret = ret, .minimum = minimum_out, .natural = natural_out, .minimum_baseline = minimum_baseline_out, .natural_baseline = natural_baseline_out };
    }
    /// method [mnemonic_activate](https://docs.gtk.org/gtk4/method.Widget.mnemonic_activate.html)
    pub fn mnemonicActivate(self: *Widget, _group_cycling: bool) bool {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) bool, .{ .name = "gtk_widget_mnemonic_activate" });
        const ret = cFn(self, _group_cycling);
        return ret;
    }
    /// method [observe_children](https://docs.gtk.org/gtk4/method.Widget.observe_children.html)
    pub fn observeChildren(self: *Widget) *gio.ListModel {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gio.ListModel, .{ .name = "gtk_widget_observe_children" });
        const ret = cFn(self);
        return ret;
    }
    /// method [observe_controllers](https://docs.gtk.org/gtk4/method.Widget.observe_controllers.html)
    pub fn observeControllers(self: *Widget) *gio.ListModel {
        const cFn = @extern(*const fn (*Widget) callconv(.c) *gio.ListModel, .{ .name = "gtk_widget_observe_controllers" });
        const ret = cFn(self);
        return ret;
    }
    /// method [pick](https://docs.gtk.org/gtk4/method.Widget.pick.html)
    pub fn pick(self: *Widget, _x: f64, _y: f64, _flags: gtk.PickFlags) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Widget, f64, f64, gtk.PickFlags) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_pick" });
        const ret = cFn(self, _x, _y, _flags);
        return ret;
    }
    /// method [queue_allocate](https://docs.gtk.org/gtk4/method.Widget.queue_allocate.html)
    pub fn queueAllocate(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_queue_allocate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [queue_draw](https://docs.gtk.org/gtk4/method.Widget.queue_draw.html)
    pub fn queueDraw(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_queue_draw" });
        const ret = cFn(self);
        return ret;
    }
    /// method [queue_resize](https://docs.gtk.org/gtk4/method.Widget.queue_resize.html)
    pub fn queueResize(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_queue_resize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [realize](https://docs.gtk.org/gtk4/method.Widget.realize.html)
    pub fn realize(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_realize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_controller](https://docs.gtk.org/gtk4/method.Widget.remove_controller.html)
    pub fn removeController(self: *Widget, _controller: *gtk.EventController) void {
        const cFn = @extern(*const fn (*Widget, *gtk.EventController) callconv(.c) void, .{ .name = "gtk_widget_remove_controller" });
        const ret = cFn(self, _controller);
        return ret;
    }
    /// method [remove_css_class](https://docs.gtk.org/gtk4/method.Widget.remove_css_class.html)
    pub fn removeCssClass(self: *Widget, _css_class: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_remove_css_class" });
        const ret = cFn(self, _css_class);
        return ret;
    }
    /// method [remove_mnemonic_label](https://docs.gtk.org/gtk4/method.Widget.remove_mnemonic_label.html)
    pub fn removeMnemonicLabel(self: *Widget, _label: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_remove_mnemonic_label" });
        const ret = cFn(self, _label);
        return ret;
    }
    /// method [remove_tick_callback](https://docs.gtk.org/gtk4/method.Widget.remove_tick_callback.html)
    pub fn removeTickCallback(self: *Widget, _id: u32) void {
        const cFn = @extern(*const fn (*Widget, u32) callconv(.c) void, .{ .name = "gtk_widget_remove_tick_callback" });
        const ret = cFn(self, _id);
        return ret;
    }
    /// method [set_can_focus](https://docs.gtk.org/gtk4/method.Widget.set_can_focus.html)
    pub fn setCanFocus(self: *Widget, _can_focus: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_can_focus" });
        const ret = cFn(self, _can_focus);
        return ret;
    }
    /// method [set_can_target](https://docs.gtk.org/gtk4/method.Widget.set_can_target.html)
    pub fn setCanTarget(self: *Widget, _can_target: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_can_target" });
        const ret = cFn(self, _can_target);
        return ret;
    }
    /// method [set_child_visible](https://docs.gtk.org/gtk4/method.Widget.set_child_visible.html)
    pub fn setChildVisible(self: *Widget, _child_visible: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_child_visible" });
        const ret = cFn(self, _child_visible);
        return ret;
    }
    /// method [set_css_classes](https://docs.gtk.org/gtk4/method.Widget.set_css_classes.html)
    pub fn setCssClasses(self: *Widget, _classes: [*:null]?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, [*:null]?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_set_css_classes" });
        const ret = cFn(self, _classes);
        return ret;
    }
    /// method [set_cursor](https://docs.gtk.org/gtk4/method.Widget.set_cursor.html)
    pub fn setCursor(self: *Widget, _cursor: ?*gdk.Cursor) void {
        const cFn = @extern(*const fn (*Widget, ?*gdk.Cursor) callconv(.c) void, .{ .name = "gtk_widget_set_cursor" });
        const ret = cFn(self, _cursor);
        return ret;
    }
    /// method [set_cursor_from_name](https://docs.gtk.org/gtk4/method.Widget.set_cursor_from_name.html)
    pub fn setCursorFromName(self: *Widget, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_set_cursor_from_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_direction](https://docs.gtk.org/gtk4/method.Widget.set_direction.html)
    pub fn setDirection(self: *Widget, _dir: gtk.TextDirection) void {
        const cFn = @extern(*const fn (*Widget, gtk.TextDirection) callconv(.c) void, .{ .name = "gtk_widget_set_direction" });
        const ret = cFn(self, _dir);
        return ret;
    }
    /// method [set_focus_child](https://docs.gtk.org/gtk4/method.Widget.set_focus_child.html)
    pub fn setFocusChild(self: *Widget, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_set_focus_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_focus_on_click](https://docs.gtk.org/gtk4/method.Widget.set_focus_on_click.html)
    pub fn setFocusOnClick(self: *Widget, _focus_on_click: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_focus_on_click" });
        const ret = cFn(self, _focus_on_click);
        return ret;
    }
    /// method [set_focusable](https://docs.gtk.org/gtk4/method.Widget.set_focusable.html)
    pub fn setFocusable(self: *Widget, _focusable: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_focusable" });
        const ret = cFn(self, _focusable);
        return ret;
    }
    /// method [set_font_map](https://docs.gtk.org/gtk4/method.Widget.set_font_map.html)
    pub fn setFontMap(self: *Widget, _font_map: ?*pango.FontMap) void {
        const cFn = @extern(*const fn (*Widget, ?*pango.FontMap) callconv(.c) void, .{ .name = "gtk_widget_set_font_map" });
        const ret = cFn(self, _font_map);
        return ret;
    }
    /// method [set_font_options](https://docs.gtk.org/gtk4/method.Widget.set_font_options.html)
    pub fn setFontOptions(self: *Widget, _options: ?*cairo.FontOptions) void {
        const cFn = @extern(*const fn (*Widget, ?*cairo.FontOptions) callconv(.c) void, .{ .name = "gtk_widget_set_font_options" });
        const ret = cFn(self, _options);
        return ret;
    }
    /// method [set_halign](https://docs.gtk.org/gtk4/method.Widget.set_halign.html)
    pub fn setHalign(self: *Widget, _align: gtk.Align) void {
        const cFn = @extern(*const fn (*Widget, gtk.Align) callconv(.c) void, .{ .name = "gtk_widget_set_halign" });
        const ret = cFn(self, _align);
        return ret;
    }
    /// method [set_has_tooltip](https://docs.gtk.org/gtk4/method.Widget.set_has_tooltip.html)
    pub fn setHasTooltip(self: *Widget, _has_tooltip: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_has_tooltip" });
        const ret = cFn(self, _has_tooltip);
        return ret;
    }
    /// method [set_hexpand](https://docs.gtk.org/gtk4/method.Widget.set_hexpand.html)
    pub fn setHexpand(self: *Widget, _expand: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_hexpand" });
        const ret = cFn(self, _expand);
        return ret;
    }
    /// method [set_hexpand_set](https://docs.gtk.org/gtk4/method.Widget.set_hexpand_set.html)
    pub fn setHexpandSet(self: *Widget, _set: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_hexpand_set" });
        const ret = cFn(self, _set);
        return ret;
    }
    /// method [set_layout_manager](https://docs.gtk.org/gtk4/method.Widget.set_layout_manager.html)
    pub fn setLayoutManager(self: *Widget, _layout_manager: ?*gtk.LayoutManager) void {
        const cFn = @extern(*const fn (*Widget, ?*gtk.LayoutManager) callconv(.c) void, .{ .name = "gtk_widget_set_layout_manager" });
        const ret = cFn(self, _layout_manager);
        return ret;
    }
    /// method [set_margin_bottom](https://docs.gtk.org/gtk4/method.Widget.set_margin_bottom.html)
    pub fn setMarginBottom(self: *Widget, _margin: i32) void {
        const cFn = @extern(*const fn (*Widget, i32) callconv(.c) void, .{ .name = "gtk_widget_set_margin_bottom" });
        const ret = cFn(self, _margin);
        return ret;
    }
    /// method [set_margin_end](https://docs.gtk.org/gtk4/method.Widget.set_margin_end.html)
    pub fn setMarginEnd(self: *Widget, _margin: i32) void {
        const cFn = @extern(*const fn (*Widget, i32) callconv(.c) void, .{ .name = "gtk_widget_set_margin_end" });
        const ret = cFn(self, _margin);
        return ret;
    }
    /// method [set_margin_start](https://docs.gtk.org/gtk4/method.Widget.set_margin_start.html)
    pub fn setMarginStart(self: *Widget, _margin: i32) void {
        const cFn = @extern(*const fn (*Widget, i32) callconv(.c) void, .{ .name = "gtk_widget_set_margin_start" });
        const ret = cFn(self, _margin);
        return ret;
    }
    /// method [set_margin_top](https://docs.gtk.org/gtk4/method.Widget.set_margin_top.html)
    pub fn setMarginTop(self: *Widget, _margin: i32) void {
        const cFn = @extern(*const fn (*Widget, i32) callconv(.c) void, .{ .name = "gtk_widget_set_margin_top" });
        const ret = cFn(self, _margin);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gtk4/method.Widget.set_name.html)
    pub fn setName(self: *Widget, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_opacity](https://docs.gtk.org/gtk4/method.Widget.set_opacity.html)
    pub fn setOpacity(self: *Widget, _opacity: f64) void {
        const cFn = @extern(*const fn (*Widget, f64) callconv(.c) void, .{ .name = "gtk_widget_set_opacity" });
        const ret = cFn(self, _opacity);
        return ret;
    }
    /// method [set_overflow](https://docs.gtk.org/gtk4/method.Widget.set_overflow.html)
    pub fn setOverflow(self: *Widget, _overflow: gtk.Overflow) void {
        const cFn = @extern(*const fn (*Widget, gtk.Overflow) callconv(.c) void, .{ .name = "gtk_widget_set_overflow" });
        const ret = cFn(self, _overflow);
        return ret;
    }
    /// method [set_parent](https://docs.gtk.org/gtk4/method.Widget.set_parent.html)
    pub fn setParent(self: *Widget, _parent: *gtk.Widget) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_set_parent" });
        const ret = cFn(self, _parent);
        return ret;
    }
    /// method [set_receives_default](https://docs.gtk.org/gtk4/method.Widget.set_receives_default.html)
    pub fn setReceivesDefault(self: *Widget, _receives_default: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_receives_default" });
        const ret = cFn(self, _receives_default);
        return ret;
    }
    /// method [set_sensitive](https://docs.gtk.org/gtk4/method.Widget.set_sensitive.html)
    pub fn setSensitive(self: *Widget, _sensitive: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_sensitive" });
        const ret = cFn(self, _sensitive);
        return ret;
    }
    /// method [set_size_request](https://docs.gtk.org/gtk4/method.Widget.set_size_request.html)
    pub fn setSizeRequest(self: *Widget, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Widget, i32, i32) callconv(.c) void, .{ .name = "gtk_widget_set_size_request" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [set_state_flags](https://docs.gtk.org/gtk4/method.Widget.set_state_flags.html)
    pub fn setStateFlags(self: *Widget, _flags: gtk.StateFlags, _clear: bool) void {
        const cFn = @extern(*const fn (*Widget, gtk.StateFlags, bool) callconv(.c) void, .{ .name = "gtk_widget_set_state_flags" });
        const ret = cFn(self, _flags, _clear);
        return ret;
    }
    /// method [set_tooltip_markup](https://docs.gtk.org/gtk4/method.Widget.set_tooltip_markup.html)
    pub fn setTooltipMarkup(self: *Widget, _markup: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_set_tooltip_markup" });
        const ret = cFn(self, _markup);
        return ret;
    }
    /// method [set_tooltip_text](https://docs.gtk.org/gtk4/method.Widget.set_tooltip_text.html)
    pub fn setTooltipText(self: *Widget, _text: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Widget, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_set_tooltip_text" });
        const ret = cFn(self, _text);
        return ret;
    }
    /// method [set_valign](https://docs.gtk.org/gtk4/method.Widget.set_valign.html)
    pub fn setValign(self: *Widget, _align: gtk.Align) void {
        const cFn = @extern(*const fn (*Widget, gtk.Align) callconv(.c) void, .{ .name = "gtk_widget_set_valign" });
        const ret = cFn(self, _align);
        return ret;
    }
    /// method [set_vexpand](https://docs.gtk.org/gtk4/method.Widget.set_vexpand.html)
    pub fn setVexpand(self: *Widget, _expand: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_vexpand" });
        const ret = cFn(self, _expand);
        return ret;
    }
    /// method [set_vexpand_set](https://docs.gtk.org/gtk4/method.Widget.set_vexpand_set.html)
    pub fn setVexpandSet(self: *Widget, _set: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_vexpand_set" });
        const ret = cFn(self, _set);
        return ret;
    }
    /// method [set_visible](https://docs.gtk.org/gtk4/method.Widget.set_visible.html)
    pub fn setVisible(self: *Widget, _visible: bool) void {
        const cFn = @extern(*const fn (*Widget, bool) callconv(.c) void, .{ .name = "gtk_widget_set_visible" });
        const ret = cFn(self, _visible);
        return ret;
    }
    /// method [should_layout](https://docs.gtk.org/gtk4/method.Widget.should_layout.html)
    pub fn shouldLayout(self: *Widget) bool {
        const cFn = @extern(*const fn (*Widget) callconv(.c) bool, .{ .name = "gtk_widget_should_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [show](https://docs.gtk.org/gtk4/method.Widget.show.html)
    pub const show = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn show(self: *Widget) void {
            const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_show" });
            const ret = cFn(self);
            return ret;
        }
    }.show;
    /// method [size_allocate](https://docs.gtk.org/gtk4/method.Widget.size_allocate.html)
    pub fn sizeAllocate(self: *Widget, _allocation: *gdk.Rectangle, _baseline: i32) void {
        const cFn = @extern(*const fn (*Widget, *gdk.Rectangle, i32) callconv(.c) void, .{ .name = "gtk_widget_size_allocate" });
        const ret = cFn(self, _allocation, _baseline);
        return ret;
    }
    /// method [snapshot_child](https://docs.gtk.org/gtk4/method.Widget.snapshot_child.html)
    pub fn snapshotChild(self: *Widget, _child: *gtk.Widget, _snapshot: *gtk.Snapshot) void {
        const cFn = @extern(*const fn (*Widget, *gtk.Widget, *gtk.Snapshot) callconv(.c) void, .{ .name = "gtk_widget_snapshot_child" });
        const ret = cFn(self, _child, _snapshot);
        return ret;
    }
    /// Deprecated:
    /// method [translate_coordinates](https://docs.gtk.org/gtk4/method.Widget.translate_coordinates.html)
    pub const translateCoordinates = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn translateCoordinates(self: *Widget, _dest_widget: *gtk.Widget, _src_x: f64, _src_y: f64) struct {
            ret: bool,
            dest_x: f64,
            dest_y: f64,
        } {
            var dest_x_out: f64 = undefined;
            const _dest_x = &dest_x_out;
            var dest_y_out: f64 = undefined;
            const _dest_y = &dest_y_out;
            const cFn = @extern(*const fn (*Widget, *gtk.Widget, f64, f64, ?*f64, ?*f64) callconv(.c) bool, .{ .name = "gtk_widget_translate_coordinates" });
            const ret = cFn(self, _dest_widget, _src_x, _src_y, _dest_x, _dest_y);
            return .{ .ret = ret, .dest_x = dest_x_out, .dest_y = dest_y_out };
        }
    }.translateCoordinates;
    /// method [trigger_tooltip_query](https://docs.gtk.org/gtk4/method.Widget.trigger_tooltip_query.html)
    pub fn triggerTooltipQuery(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_trigger_tooltip_query" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unmap](https://docs.gtk.org/gtk4/method.Widget.unmap.html)
    pub fn unmap(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_unmap" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unparent](https://docs.gtk.org/gtk4/method.Widget.unparent.html)
    pub fn unparent(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_unparent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unrealize](https://docs.gtk.org/gtk4/method.Widget.unrealize.html)
    pub fn unrealize(self: *Widget) void {
        const cFn = @extern(*const fn (*Widget) callconv(.c) void, .{ .name = "gtk_widget_unrealize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unset_state_flags](https://docs.gtk.org/gtk4/method.Widget.unset_state_flags.html)
    pub fn unsetStateFlags(self: *Widget, _flags: gtk.StateFlags) void {
        const cFn = @extern(*const fn (*Widget, gtk.StateFlags) callconv(.c) void, .{ .name = "gtk_widget_unset_state_flags" });
        const ret = cFn(self, _flags);
        return ret;
    }
    /// vfunc [compute_expand](https://docs.gtk.org/gtk4/vfunc.Widget.compute_expand.html)
    pub fn computeExpandV(self: *Widget, _hexpand_p: *bool, _vexpand_p: *bool) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.compute_expand.?;
        const ret = vFn(self, _hexpand_p, _vexpand_p);
        return ret;
    }
    /// vfunc [contains](https://docs.gtk.org/gtk4/vfunc.Widget.contains.html)
    pub fn containsV(self: *Widget, _x: f64, _y: f64) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.contains.?;
        const ret = vFn(self, _x, _y);
        return ret;
    }
    /// vfunc [css_changed](https://docs.gtk.org/gtk4/vfunc.Widget.css_changed.html)
    pub fn cssChangedV(self: *Widget, _change: *gtk.CssStyleChange) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.css_changed.?;
        const ret = vFn(self, _change);
        return ret;
    }
    /// vfunc [direction_changed](https://docs.gtk.org/gtk4/vfunc.Widget.direction_changed.html)
    pub fn directionChangedV(self: *Widget, _previous_direction: gtk.TextDirection) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.direction_changed.?;
        const ret = vFn(self, _previous_direction);
        return ret;
    }
    /// vfunc [focus](https://docs.gtk.org/gtk4/vfunc.Widget.focus.html)
    pub fn focusV(self: *Widget, _direction: gtk.DirectionType) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.focus.?;
        const ret = vFn(self, _direction);
        return ret;
    }
    /// vfunc [get_request_mode](https://docs.gtk.org/gtk4/vfunc.Widget.get_request_mode.html)
    pub fn getRequestModeV(self: *Widget) gtk.SizeRequestMode {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_request_mode.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [grab_focus](https://docs.gtk.org/gtk4/vfunc.Widget.grab_focus.html)
    pub fn grabFocusV(self: *Widget) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.grab_focus.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [hide](https://docs.gtk.org/gtk4/vfunc.Widget.hide.html)
    pub fn hideV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.hide.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [keynav_failed](https://docs.gtk.org/gtk4/vfunc.Widget.keynav_failed.html)
    pub fn keynavFailedV(self: *Widget, _direction: gtk.DirectionType) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.keynav_failed.?;
        const ret = vFn(self, _direction);
        return ret;
    }
    /// vfunc [map](https://docs.gtk.org/gtk4/vfunc.Widget.map.html)
    pub fn mapV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.map.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [measure](https://docs.gtk.org/gtk4/vfunc.Widget.measure.html)
    pub fn measureV(self: *Widget, _orientation: gtk.Orientation, _for_size: i32, _minimum: ?*i32, _natural: ?*i32, _minimum_baseline: ?*i32, _natural_baseline: ?*i32) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.measure.?;
        const ret = vFn(self, _orientation, _for_size, _minimum, _natural, _minimum_baseline, _natural_baseline);
        return ret;
    }
    /// vfunc [mnemonic_activate](https://docs.gtk.org/gtk4/vfunc.Widget.mnemonic_activate.html)
    pub fn mnemonicActivateV(self: *Widget, _group_cycling: bool) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.mnemonic_activate.?;
        const ret = vFn(self, _group_cycling);
        return ret;
    }
    /// vfunc [move_focus](https://docs.gtk.org/gtk4/vfunc.Widget.move_focus.html)
    pub fn moveFocusV(self: *Widget, _direction: gtk.DirectionType) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.move_focus.?;
        const ret = vFn(self, _direction);
        return ret;
    }
    /// vfunc [query_tooltip](https://docs.gtk.org/gtk4/vfunc.Widget.query_tooltip.html)
    pub fn queryTooltipV(self: *Widget, _x: i32, _y: i32, _keyboard_tooltip: bool, _tooltip: *gtk.Tooltip) bool {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.query_tooltip.?;
        const ret = vFn(self, _x, _y, _keyboard_tooltip, _tooltip);
        return ret;
    }
    /// vfunc [realize](https://docs.gtk.org/gtk4/vfunc.Widget.realize.html)
    pub fn realizeV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.realize.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [root](https://docs.gtk.org/gtk4/vfunc.Widget.root.html)
    pub fn rootV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.root.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [set_focus_child](https://docs.gtk.org/gtk4/vfunc.Widget.set_focus_child.html)
    pub fn setFocusChildV(self: *Widget, _child: ?*gtk.Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_focus_child.?;
        const ret = vFn(self, _child);
        return ret;
    }
    /// vfunc [show](https://docs.gtk.org/gtk4/vfunc.Widget.show.html)
    pub fn showV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.show.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [size_allocate](https://docs.gtk.org/gtk4/vfunc.Widget.size_allocate.html)
    pub fn sizeAllocateV(self: *Widget, _width: i32, _height: i32, _baseline: i32) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.size_allocate.?;
        const ret = vFn(self, _width, _height, _baseline);
        return ret;
    }
    /// vfunc [snapshot](https://docs.gtk.org/gtk4/vfunc.Widget.snapshot.html)
    pub fn snapshotV(self: *Widget, _snapshot: *gtk.Snapshot) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.snapshot.?;
        const ret = vFn(self, _snapshot);
        return ret;
    }
    /// vfunc [state_flags_changed](https://docs.gtk.org/gtk4/vfunc.Widget.state_flags_changed.html)
    pub fn stateFlagsChangedV(self: *Widget, _previous_state_flags: gtk.StateFlags) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.state_flags_changed.?;
        const ret = vFn(self, _previous_state_flags);
        return ret;
    }
    /// vfunc [system_setting_changed](https://docs.gtk.org/gtk4/vfunc.Widget.system_setting_changed.html)
    pub fn systemSettingChangedV(self: *Widget, _settings: gtk.SystemSetting) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.system_setting_changed.?;
        const ret = vFn(self, _settings);
        return ret;
    }
    /// vfunc [unmap](https://docs.gtk.org/gtk4/vfunc.Widget.unmap.html)
    pub fn unmapV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unmap.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unrealize](https://docs.gtk.org/gtk4/vfunc.Widget.unrealize.html)
    pub fn unrealizeV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unrealize.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unroot](https://docs.gtk.org/gtk4/vfunc.Widget.unroot.html)
    pub fn unrootV(self: *Widget) void {
        const class: *WidgetClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unroot.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [destroy](https://docs.gtk.org/gtk4/signal.Widget.destroy.html)
    pub fn connectDestroy(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("destroy", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [direction-changed](https://docs.gtk.org/gtk4/signal.Widget.direction-changed.html)
    pub fn connectDirectionChanged(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("direction-changed", handler, args, flags, &.{ void, *Widget, gtk.TextDirection });
    }
    /// signal [hide](https://docs.gtk.org/gtk4/signal.Widget.hide.html)
    pub fn connectHide(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("hide", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [keynav-failed](https://docs.gtk.org/gtk4/signal.Widget.keynav-failed.html)
    pub fn connectKeynavFailed(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("keynav-failed", handler, args, flags, &.{ bool, *Widget, gtk.DirectionType });
    }
    /// signal [map](https://docs.gtk.org/gtk4/signal.Widget.map.html)
    pub fn connectMap(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("map", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [mnemonic-activate](https://docs.gtk.org/gtk4/signal.Widget.mnemonic-activate.html)
    pub fn connectMnemonicActivate(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("mnemonic-activate", handler, args, flags, &.{ bool, *Widget, bool });
    }
    /// signal [move-focus](https://docs.gtk.org/gtk4/signal.Widget.move-focus.html)
    pub fn connectMoveFocus(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("move-focus", handler, args, flags, &.{ void, *Widget, gtk.DirectionType });
    }
    /// signal [query-tooltip](https://docs.gtk.org/gtk4/signal.Widget.query-tooltip.html)
    pub fn connectQueryTooltip(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("query-tooltip", handler, args, flags, &.{ bool, *Widget, i32, i32, bool, *gtk.Tooltip });
    }
    /// signal [realize](https://docs.gtk.org/gtk4/signal.Widget.realize.html)
    pub fn connectRealize(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("realize", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [show](https://docs.gtk.org/gtk4/signal.Widget.show.html)
    pub fn connectShow(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("show", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [state-flags-changed](https://docs.gtk.org/gtk4/signal.Widget.state-flags-changed.html)
    pub fn connectStateFlagsChanged(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("state-flags-changed", handler, args, flags, &.{ void, *Widget, gtk.StateFlags });
    }
    /// signal [unmap](https://docs.gtk.org/gtk4/signal.Widget.unmap.html)
    pub fn connectUnmap(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unmap", handler, args, flags, &.{ void, *Widget });
    }
    /// signal [unrealize](https://docs.gtk.org/gtk4/signal.Widget.unrealize.html)
    pub fn connectUnrealize(self: *Widget, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unrealize", handler, args, flags, &.{ void, *Widget });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_widget_get_type" });
        return cFn();
    }
};
/// callback [WidgetActionActivateFunc](https://docs.gtk.org/gtk4/callback.WidgetActionActivateFunc.html)
pub const WidgetActionActivateFunc = *const fn (_widget: *gtk.Widget, _action_name: [*:0]const u8, _parameter: ?*glib.Variant) callconv(.c) void;
pub const WidgetClass = extern struct {
    parent_class: gobject.InitiallyUnownedClass,
    show: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    hide: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    map: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    unmap: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    realize: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    unrealize: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    root: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    unroot: ?*const fn (_widget: *gtk.Widget) callconv(.c) void,
    size_allocate: ?*const fn (_widget: *gtk.Widget, _width: i32, _height: i32, _baseline: i32) callconv(.c) void,
    state_flags_changed: ?*const fn (_widget: *gtk.Widget, _previous_state_flags: gtk.StateFlags) callconv(.c) void,
    direction_changed: ?*const fn (_widget: *gtk.Widget, _previous_direction: gtk.TextDirection) callconv(.c) void,
    get_request_mode: ?*const fn (_widget: *gtk.Widget) callconv(.c) gtk.SizeRequestMode,
    measure: ?*const fn (_widget: *gtk.Widget, _orientation: gtk.Orientation, _for_size: i32, _minimum: ?*i32, _natural: ?*i32, _minimum_baseline: ?*i32, _natural_baseline: ?*i32) callconv(.c) void,
    mnemonic_activate: ?*const fn (_widget: *gtk.Widget, _group_cycling: bool) callconv(.c) bool,
    grab_focus: ?*const fn (_widget: *gtk.Widget) callconv(.c) bool,
    focus: ?*const fn (_widget: *gtk.Widget, _direction: gtk.DirectionType) callconv(.c) bool,
    set_focus_child: ?*const fn (_widget: *gtk.Widget, _child: ?*gtk.Widget) callconv(.c) void,
    move_focus: ?*const fn (_widget: *gtk.Widget, _direction: gtk.DirectionType) callconv(.c) void,
    keynav_failed: ?*const fn (_widget: *gtk.Widget, _direction: gtk.DirectionType) callconv(.c) bool,
    query_tooltip: ?*const fn (_widget: *gtk.Widget, _x: i32, _y: i32, _keyboard_tooltip: bool, _tooltip: *gtk.Tooltip) callconv(.c) bool,
    compute_expand: ?*const fn (_widget: *gtk.Widget, _hexpand_p: *bool, _vexpand_p: *bool) callconv(.c) void,
    css_changed: ?*const fn (_widget: *gtk.Widget, _change: *gtk.CssStyleChange) callconv(.c) void,
    system_setting_changed: ?*const fn (_widget: *gtk.Widget, _settings: gtk.SystemSetting) callconv(.c) void,
    snapshot: ?*const fn (_widget: *gtk.Widget, _snapshot: *gtk.Snapshot) callconv(.c) void,
    contains: ?*const fn (_widget: *gtk.Widget, _x: f64, _y: f64) callconv(.c) bool,
    priv: ?*gtk.WidgetClassPrivate,
    padding: [8]?*anyopaque,
    /// class method [add_shortcut](https://docs.gtk.org/gtk4/class_method.WidgetClass.add_shortcut.html)
    pub fn addShortcut(self: *WidgetClass, _shortcut: *gtk.Shortcut) void {
        const cFn = @extern(*const fn (*WidgetClass, *gtk.Shortcut) callconv(.c) void, .{ .name = "gtk_widget_class_add_shortcut" });
        const ret = cFn(self, _shortcut);
        return ret;
    }
    /// class method [bind_template_callback_full](https://docs.gtk.org/gtk4/class_method.WidgetClass.bind_template_callback_full.html)
    pub fn bindTemplateCallbackFull(self: *WidgetClass, _callback_name: [*:0]const u8, _callback_symbol: gobject.Callback) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8, gobject.Callback) callconv(.c) void, .{ .name = "gtk_widget_class_bind_template_callback_full" });
        const ret = cFn(self, _callback_name, _callback_symbol);
        return ret;
    }
    /// class method [bind_template_child_full](https://docs.gtk.org/gtk4/class_method.WidgetClass.bind_template_child_full.html)
    pub fn bindTemplateChildFull(self: *WidgetClass, _name: [*:0]const u8, _internal_child: bool, _struct_offset: i64) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8, bool, i64) callconv(.c) void, .{ .name = "gtk_widget_class_bind_template_child_full" });
        const ret = cFn(self, _name, _internal_child, _struct_offset);
        return ret;
    }
    /// class method [get_accessible_role](https://docs.gtk.org/gtk4/class_method.WidgetClass.get_accessible_role.html)
    pub fn getAccessibleRole(self: *WidgetClass) gtk.AccessibleRole {
        const cFn = @extern(*const fn (*WidgetClass) callconv(.c) gtk.AccessibleRole, .{ .name = "gtk_widget_class_get_accessible_role" });
        const ret = cFn(self);
        return ret;
    }
    /// class method [get_activate_signal](https://docs.gtk.org/gtk4/class_method.WidgetClass.get_activate_signal.html)
    pub fn getActivateSignal(self: *WidgetClass) u32 {
        const cFn = @extern(*const fn (*WidgetClass) callconv(.c) u32, .{ .name = "gtk_widget_class_get_activate_signal" });
        const ret = cFn(self);
        return ret;
    }
    /// class method [get_css_name](https://docs.gtk.org/gtk4/class_method.WidgetClass.get_css_name.html)
    pub fn getCssName(self: *WidgetClass) [*:0]u8 {
        const cFn = @extern(*const fn (*WidgetClass) callconv(.c) [*:0]u8, .{ .name = "gtk_widget_class_get_css_name" });
        const ret = cFn(self);
        return ret;
    }
    /// class method [get_layout_manager_type](https://docs.gtk.org/gtk4/class_method.WidgetClass.get_layout_manager_type.html)
    pub fn getLayoutManagerType(self: *WidgetClass) core.Type {
        const cFn = @extern(*const fn (*WidgetClass) callconv(.c) core.Type, .{ .name = "gtk_widget_class_get_layout_manager_type" });
        const ret = cFn(self);
        return ret;
    }
    /// class method [install_action](https://docs.gtk.org/gtk4/class_method.WidgetClass.install_action.html)
    pub fn installAction(self: *WidgetClass, _action_name: [*:0]const u8, _parameter_type: ?[*:0]const u8, _activate: gtk.WidgetActionActivateFunc) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8, ?[*:0]const u8, gtk.WidgetActionActivateFunc) callconv(.c) void, .{ .name = "gtk_widget_class_install_action" });
        const ret = cFn(self, _action_name, _parameter_type, _activate);
        return ret;
    }
    /// class method [install_property_action](https://docs.gtk.org/gtk4/class_method.WidgetClass.install_property_action.html)
    pub fn installPropertyAction(self: *WidgetClass, _action_name: [*:0]const u8, _property_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_class_install_property_action" });
        const ret = cFn(self, _action_name, _property_name);
        return ret;
    }
    /// class method [query_action](https://docs.gtk.org/gtk4/class_method.WidgetClass.query_action.html)
    pub fn queryAction(self: *WidgetClass, _index_: u32) struct {
        ret: bool,
        owner: core.Type,
        action_name: [*:0]u8,
        parameter_type: ?*glib.VariantType,
        property_name: ?[*:0]u8,
    } {
        var owner_out: core.Type = undefined;
        const _owner = &owner_out;
        var action_name_out: [*:0]u8 = undefined;
        const _action_name = &action_name_out;
        var parameter_type_out: ?*glib.VariantType = undefined;
        const _parameter_type = &parameter_type_out;
        var property_name_out: ?[*:0]u8 = undefined;
        const _property_name = &property_name_out;
        const cFn = @extern(*const fn (*WidgetClass, u32, *core.Type, *[*:0]u8, *?*glib.VariantType, *?[*:0]u8) callconv(.c) bool, .{ .name = "gtk_widget_class_query_action" });
        const ret = cFn(self, _index_, _owner, _action_name, _parameter_type, _property_name);
        return .{ .ret = ret, .owner = owner_out, .action_name = action_name_out, .parameter_type = parameter_type_out, .property_name = property_name_out };
    }
    /// class method [set_accessible_role](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_accessible_role.html)
    pub fn setAccessibleRole(self: *WidgetClass, _accessible_role: gtk.AccessibleRole) void {
        const cFn = @extern(*const fn (*WidgetClass, gtk.AccessibleRole) callconv(.c) void, .{ .name = "gtk_widget_class_set_accessible_role" });
        const ret = cFn(self, _accessible_role);
        return ret;
    }
    /// class method [set_activate_signal](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_activate_signal.html)
    pub fn setActivateSignal(self: *WidgetClass, _signal_id: u32) void {
        const cFn = @extern(*const fn (*WidgetClass, u32) callconv(.c) void, .{ .name = "gtk_widget_class_set_activate_signal" });
        const ret = cFn(self, _signal_id);
        return ret;
    }
    /// class method [set_activate_signal_from_name](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_activate_signal_from_name.html)
    pub fn setActivateSignalFromName(self: *WidgetClass, _signal_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_class_set_activate_signal_from_name" });
        const ret = cFn(self, _signal_name);
        return ret;
    }
    /// class method [set_css_name](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_css_name.html)
    pub fn setCssName(self: *WidgetClass, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_class_set_css_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// class method [set_layout_manager_type](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_layout_manager_type.html)
    pub fn setLayoutManagerType(self: *WidgetClass, _type: core.Type) void {
        const cFn = @extern(*const fn (*WidgetClass, core.Type) callconv(.c) void, .{ .name = "gtk_widget_class_set_layout_manager_type" });
        const ret = cFn(self, _type);
        return ret;
    }
    /// class method [set_template](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_template.html)
    pub fn setTemplate(self: *WidgetClass, _template_bytes: *glib.Bytes) void {
        const cFn = @extern(*const fn (*WidgetClass, *glib.Bytes) callconv(.c) void, .{ .name = "gtk_widget_class_set_template" });
        const ret = cFn(self, _template_bytes);
        return ret;
    }
    /// class method [set_template_from_resource](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_template_from_resource.html)
    pub fn setTemplateFromResource(self: *WidgetClass, _resource_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*WidgetClass, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_widget_class_set_template_from_resource" });
        const ret = cFn(self, _resource_name);
        return ret;
    }
    /// class method [set_template_scope](https://docs.gtk.org/gtk4/class_method.WidgetClass.set_template_scope.html)
    pub fn setTemplateScope(self: *WidgetClass, _scope: *gtk.BuilderScope) void {
        const cFn = @extern(*const fn (*WidgetClass, *gtk.BuilderScope) callconv(.c) void, .{ .name = "gtk_widget_class_set_template_scope" });
        const ret = cFn(self, _scope);
        return ret;
    }
};
pub const WidgetClassPrivate = opaque {};
/// Class [WidgetPaintable](https://docs.gtk.org/gtk4/class.WidgetPaintable.html)
/// - property [widget](https://docs.gtk.org/gtk4/property.WidgetPaintable.widget.html): (rw) `gtk.Widget`
pub const WidgetPaintable = opaque {
    pub const Interfaces = [_]type{gdk.Paintable};
    pub const Parent = gobject.Object;
    pub const Class = gtk.WidgetPaintableClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.WidgetPaintable.new.html)
    pub fn new(_widget: ?*gtk.Widget) *WidgetPaintable {
        const cFn = @extern(*const fn (?*gtk.Widget) callconv(.c) *WidgetPaintable, .{ .name = "gtk_widget_paintable_new" });
        const ret = cFn(_widget);
        return ret;
    }
    /// method [get_widget](https://docs.gtk.org/gtk4/method.WidgetPaintable.get_widget.html)
    pub fn getWidget(self: *WidgetPaintable) ?*gtk.Widget {
        const cFn = @extern(*const fn (*WidgetPaintable) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_widget_paintable_get_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_widget](https://docs.gtk.org/gtk4/method.WidgetPaintable.set_widget.html)
    pub fn setWidget(self: *WidgetPaintable, _widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*WidgetPaintable, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_widget_paintable_set_widget" });
        const ret = cFn(self, _widget);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_widget_paintable_get_type" });
        return cFn();
    }
};
pub const WidgetPaintableClass = extern struct {
    parent_class: gobject.ObjectClass,
};
pub const WidgetPrivate = opaque {};
/// Class [Window](https://docs.gtk.org/gtk4/class.Window.html)
/// - property [application](https://docs.gtk.org/gtk4/property.Window.application.html): (rw) `gtk.Application`
/// - property [child](https://docs.gtk.org/gtk4/property.Window.child.html): (rw) `gtk.Widget`
/// - property [decorated](https://docs.gtk.org/gtk4/property.Window.decorated.html): (rw) `bool`
/// - property [default-height](https://docs.gtk.org/gtk4/property.Window.default-height.html): (rw) `i32`
/// - property [default-widget](https://docs.gtk.org/gtk4/property.Window.default-widget.html): (rw) `gtk.Widget`
/// - property [default-width](https://docs.gtk.org/gtk4/property.Window.default-width.html): (rw) `i32`
/// - property [deletable](https://docs.gtk.org/gtk4/property.Window.deletable.html): (rw) `bool`
/// - property [destroy-with-parent](https://docs.gtk.org/gtk4/property.Window.destroy-with-parent.html): (rw) `bool`
/// - property [display](https://docs.gtk.org/gtk4/property.Window.display.html): (rw) `gdk.Display`
/// - property [focus-visible](https://docs.gtk.org/gtk4/property.Window.focus-visible.html): (rw) `bool`
/// - property [focus-widget](https://docs.gtk.org/gtk4/property.Window.focus-widget.html): (rw) `gtk.Widget`
/// - property [fullscreened](https://docs.gtk.org/gtk4/property.Window.fullscreened.html): (rw) `bool`
/// - property [handle-menubar-accel](https://docs.gtk.org/gtk4/property.Window.handle-menubar-accel.html): (rw) `bool`
/// - property [hide-on-close](https://docs.gtk.org/gtk4/property.Window.hide-on-close.html): (rw) `bool`
/// - property [icon-name](https://docs.gtk.org/gtk4/property.Window.icon-name.html): (rw) `[*:0]const u8`
/// - property [is-active](https://docs.gtk.org/gtk4/property.Window.is-active.html): (r-) `bool`
/// - property [maximized](https://docs.gtk.org/gtk4/property.Window.maximized.html): (rw) `bool`
/// - property [mnemonics-visible](https://docs.gtk.org/gtk4/property.Window.mnemonics-visible.html): (rw) `bool`
/// - property [modal](https://docs.gtk.org/gtk4/property.Window.modal.html): (rw) `bool`
/// - property [resizable](https://docs.gtk.org/gtk4/property.Window.resizable.html): (rw) `bool`
/// - property [startup-id](https://docs.gtk.org/gtk4/property.Window.startup-id.html): (-w) `[*:0]const u8`
/// - property [suspended](https://docs.gtk.org/gtk4/property.Window.suspended.html): (r-) `bool`
/// - property [title](https://docs.gtk.org/gtk4/property.Window.title.html): (rw) `[*:0]const u8`
/// - property [titlebar](https://docs.gtk.org/gtk4/property.Window.titlebar.html): (rw) `gtk.Widget`
/// - property [transient-for](https://docs.gtk.org/gtk4/property.Window.transient-for.html): (rw) `gtk.Window`
pub const Window = extern struct {
    parent_instance: gtk.Widget,
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget, gtk.Native, gtk.Root, gtk.ShortcutManager };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.WindowClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.Window.new.html)
    pub fn new() *Window {
        const cFn = @extern(*const fn () callconv(.c) *Window, .{ .name = "gtk_window_new" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_default_icon_name](https://docs.gtk.org/gtk4/type_func.Window.get_default_icon_name.html)
    pub fn getDefaultIconName() ?[*:0]u8 {
        const cFn = @extern(*const fn () callconv(.c) ?[*:0]u8, .{ .name = "gtk_window_get_default_icon_name" });
        const ret = cFn();
        return ret;
    }
    /// type func [get_toplevels](https://docs.gtk.org/gtk4/type_func.Window.get_toplevels.html)
    pub fn getToplevels() *gio.ListModel {
        const cFn = @extern(*const fn () callconv(.c) *gio.ListModel, .{ .name = "gtk_window_get_toplevels" });
        const ret = cFn();
        return ret;
    }
    /// type func [list_toplevels](https://docs.gtk.org/gtk4/type_func.Window.list_toplevels.html)
    pub fn listToplevels() ?*core.List {
        const cFn = @extern(*const fn () callconv(.c) ?*core.List, .{ .name = "gtk_window_list_toplevels" });
        const ret = cFn();
        return ret;
    }
    /// type func [set_auto_startup_notification](https://docs.gtk.org/gtk4/type_func.Window.set_auto_startup_notification.html)
    pub fn setAutoStartupNotification(_setting: bool) void {
        const cFn = @extern(*const fn (bool) callconv(.c) void, .{ .name = "gtk_window_set_auto_startup_notification" });
        const ret = cFn(_setting);
        return ret;
    }
    /// type func [set_default_icon_name](https://docs.gtk.org/gtk4/type_func.Window.set_default_icon_name.html)
    pub fn setDefaultIconName(_name: [*:0]const u8) void {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) void, .{ .name = "gtk_window_set_default_icon_name" });
        const ret = cFn(_name);
        return ret;
    }
    /// type func [set_interactive_debugging](https://docs.gtk.org/gtk4/type_func.Window.set_interactive_debugging.html)
    pub fn setInteractiveDebugging(_enable: bool) void {
        const cFn = @extern(*const fn (bool) callconv(.c) void, .{ .name = "gtk_window_set_interactive_debugging" });
        const ret = cFn(_enable);
        return ret;
    }
    /// method [close](https://docs.gtk.org/gtk4/method.Window.close.html)
    pub fn close(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [destroy](https://docs.gtk.org/gtk4/method.Window.destroy.html)
    pub fn destroy(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_destroy" });
        const ret = cFn(self);
        return ret;
    }
    /// method [fullscreen](https://docs.gtk.org/gtk4/method.Window.fullscreen.html)
    pub fn fullscreen(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_fullscreen" });
        const ret = cFn(self);
        return ret;
    }
    /// method [fullscreen_on_monitor](https://docs.gtk.org/gtk4/method.Window.fullscreen_on_monitor.html)
    pub fn fullscreenOnMonitor(self: *Window, _monitor: *gdk.Monitor) void {
        const cFn = @extern(*const fn (*Window, *gdk.Monitor) callconv(.c) void, .{ .name = "gtk_window_fullscreen_on_monitor" });
        const ret = cFn(self, _monitor);
        return ret;
    }
    /// method [get_application](https://docs.gtk.org/gtk4/method.Window.get_application.html)
    pub fn getApplication(self: *Window) ?*gtk.Application {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Application, .{ .name = "gtk_window_get_application" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.Window.get_child.html)
    pub fn getChild(self: *Window) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_window_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_decorated](https://docs.gtk.org/gtk4/method.Window.get_decorated.html)
    pub fn getDecorated(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_decorated" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_size](https://docs.gtk.org/gtk4/method.Window.get_default_size.html)
    pub fn getDefaultSize(self: *Window) struct {
        ret: void,
        width: i32,
        height: i32,
    } {
        var width_out: i32 = undefined;
        const _width = &width_out;
        var height_out: i32 = undefined;
        const _height = &height_out;
        const cFn = @extern(*const fn (*Window, ?*i32, ?*i32) callconv(.c) void, .{ .name = "gtk_window_get_default_size" });
        const ret = cFn(self, _width, _height);
        return .{ .ret = ret, .width = width_out, .height = height_out };
    }
    /// method [get_default_widget](https://docs.gtk.org/gtk4/method.Window.get_default_widget.html)
    pub fn getDefaultWidget(self: *Window) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_window_get_default_widget" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_deletable](https://docs.gtk.org/gtk4/method.Window.get_deletable.html)
    pub fn getDeletable(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_deletable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_destroy_with_parent](https://docs.gtk.org/gtk4/method.Window.get_destroy_with_parent.html)
    pub fn getDestroyWithParent(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_destroy_with_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus](https://docs.gtk.org/gtk4/method.Window.get_focus.html)
    pub fn getFocus(self: *Window) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_window_get_focus" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_focus_visible](https://docs.gtk.org/gtk4/method.Window.get_focus_visible.html)
    pub fn getFocusVisible(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_focus_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_group](https://docs.gtk.org/gtk4/method.Window.get_group.html)
    pub fn getGroup(self: *Window) *gtk.WindowGroup {
        const cFn = @extern(*const fn (*Window) callconv(.c) *gtk.WindowGroup, .{ .name = "gtk_window_get_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_handle_menubar_accel](https://docs.gtk.org/gtk4/method.Window.get_handle_menubar_accel.html)
    pub fn getHandleMenubarAccel(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_handle_menubar_accel" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_hide_on_close](https://docs.gtk.org/gtk4/method.Window.get_hide_on_close.html)
    pub fn getHideOnClose(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_hide_on_close" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_icon_name](https://docs.gtk.org/gtk4/method.Window.get_icon_name.html)
    pub fn getIconName(self: *Window) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?[*:0]u8, .{ .name = "gtk_window_get_icon_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_mnemonics_visible](https://docs.gtk.org/gtk4/method.Window.get_mnemonics_visible.html)
    pub fn getMnemonicsVisible(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_mnemonics_visible" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_modal](https://docs.gtk.org/gtk4/method.Window.get_modal.html)
    pub fn getModal(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_modal" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_resizable](https://docs.gtk.org/gtk4/method.Window.get_resizable.html)
    pub fn getResizable(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_get_resizable" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_title](https://docs.gtk.org/gtk4/method.Window.get_title.html)
    pub fn getTitle(self: *Window) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?[*:0]u8, .{ .name = "gtk_window_get_title" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_titlebar](https://docs.gtk.org/gtk4/method.Window.get_titlebar.html)
    pub fn getTitlebar(self: *Window) ?*gtk.Widget {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_window_get_titlebar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_transient_for](https://docs.gtk.org/gtk4/method.Window.get_transient_for.html)
    pub fn getTransientFor(self: *Window) ?*gtk.Window {
        const cFn = @extern(*const fn (*Window) callconv(.c) ?*gtk.Window, .{ .name = "gtk_window_get_transient_for" });
        const ret = cFn(self);
        return ret;
    }
    /// method [has_group](https://docs.gtk.org/gtk4/method.Window.has_group.html)
    pub fn hasGroup(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_has_group" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_active](https://docs.gtk.org/gtk4/method.Window.is_active.html)
    pub fn isActive(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_is_active" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_fullscreen](https://docs.gtk.org/gtk4/method.Window.is_fullscreen.html)
    pub fn isFullscreen(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_is_fullscreen" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_maximized](https://docs.gtk.org/gtk4/method.Window.is_maximized.html)
    pub fn isMaximized(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_is_maximized" });
        const ret = cFn(self);
        return ret;
    }
    /// method [is_suspended](https://docs.gtk.org/gtk4/method.Window.is_suspended.html)
    pub fn isSuspended(self: *Window) bool {
        const cFn = @extern(*const fn (*Window) callconv(.c) bool, .{ .name = "gtk_window_is_suspended" });
        const ret = cFn(self);
        return ret;
    }
    /// method [maximize](https://docs.gtk.org/gtk4/method.Window.maximize.html)
    pub fn maximize(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_maximize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [minimize](https://docs.gtk.org/gtk4/method.Window.minimize.html)
    pub fn minimize(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_minimize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [present](https://docs.gtk.org/gtk4/method.Window.present.html)
    pub fn present(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_present" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [present_with_time](https://docs.gtk.org/gtk4/method.Window.present_with_time.html)
    pub const presentWithTime = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn presentWithTime(self: *Window, _timestamp: u32) void {
            const cFn = @extern(*const fn (*Window, u32) callconv(.c) void, .{ .name = "gtk_window_present_with_time" });
            const ret = cFn(self, _timestamp);
            return ret;
        }
    }.presentWithTime;
    /// method [set_application](https://docs.gtk.org/gtk4/method.Window.set_application.html)
    pub fn setApplication(self: *Window, _application: ?*gtk.Application) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Application) callconv(.c) void, .{ .name = "gtk_window_set_application" });
        const ret = cFn(self, _application);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.Window.set_child.html)
    pub fn setChild(self: *Window, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_window_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    /// method [set_decorated](https://docs.gtk.org/gtk4/method.Window.set_decorated.html)
    pub fn setDecorated(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_decorated" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_default_size](https://docs.gtk.org/gtk4/method.Window.set_default_size.html)
    pub fn setDefaultSize(self: *Window, _width: i32, _height: i32) void {
        const cFn = @extern(*const fn (*Window, i32, i32) callconv(.c) void, .{ .name = "gtk_window_set_default_size" });
        const ret = cFn(self, _width, _height);
        return ret;
    }
    /// method [set_default_widget](https://docs.gtk.org/gtk4/method.Window.set_default_widget.html)
    pub fn setDefaultWidget(self: *Window, _default_widget: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_window_set_default_widget" });
        const ret = cFn(self, _default_widget);
        return ret;
    }
    /// method [set_deletable](https://docs.gtk.org/gtk4/method.Window.set_deletable.html)
    pub fn setDeletable(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_deletable" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_destroy_with_parent](https://docs.gtk.org/gtk4/method.Window.set_destroy_with_parent.html)
    pub fn setDestroyWithParent(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_destroy_with_parent" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_display](https://docs.gtk.org/gtk4/method.Window.set_display.html)
    pub fn setDisplay(self: *Window, _display: *gdk.Display) void {
        const cFn = @extern(*const fn (*Window, *gdk.Display) callconv(.c) void, .{ .name = "gtk_window_set_display" });
        const ret = cFn(self, _display);
        return ret;
    }
    /// method [set_focus](https://docs.gtk.org/gtk4/method.Window.set_focus.html)
    pub fn setFocus(self: *Window, _focus: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_window_set_focus" });
        const ret = cFn(self, _focus);
        return ret;
    }
    /// method [set_focus_visible](https://docs.gtk.org/gtk4/method.Window.set_focus_visible.html)
    pub fn setFocusVisible(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_focus_visible" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_handle_menubar_accel](https://docs.gtk.org/gtk4/method.Window.set_handle_menubar_accel.html)
    pub fn setHandleMenubarAccel(self: *Window, _handle_menubar_accel: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_handle_menubar_accel" });
        const ret = cFn(self, _handle_menubar_accel);
        return ret;
    }
    /// method [set_hide_on_close](https://docs.gtk.org/gtk4/method.Window.set_hide_on_close.html)
    pub fn setHideOnClose(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_hide_on_close" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_icon_name](https://docs.gtk.org/gtk4/method.Window.set_icon_name.html)
    pub fn setIconName(self: *Window, _name: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Window, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_window_set_icon_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [set_mnemonics_visible](https://docs.gtk.org/gtk4/method.Window.set_mnemonics_visible.html)
    pub fn setMnemonicsVisible(self: *Window, _setting: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_mnemonics_visible" });
        const ret = cFn(self, _setting);
        return ret;
    }
    /// method [set_modal](https://docs.gtk.org/gtk4/method.Window.set_modal.html)
    pub fn setModal(self: *Window, _modal: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_modal" });
        const ret = cFn(self, _modal);
        return ret;
    }
    /// method [set_resizable](https://docs.gtk.org/gtk4/method.Window.set_resizable.html)
    pub fn setResizable(self: *Window, _resizable: bool) void {
        const cFn = @extern(*const fn (*Window, bool) callconv(.c) void, .{ .name = "gtk_window_set_resizable" });
        const ret = cFn(self, _resizable);
        return ret;
    }
    /// method [set_startup_id](https://docs.gtk.org/gtk4/method.Window.set_startup_id.html)
    pub fn setStartupId(self: *Window, _startup_id: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Window, [*:0]const u8) callconv(.c) void, .{ .name = "gtk_window_set_startup_id" });
        const ret = cFn(self, _startup_id);
        return ret;
    }
    /// method [set_title](https://docs.gtk.org/gtk4/method.Window.set_title.html)
    pub fn setTitle(self: *Window, _title: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Window, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_window_set_title" });
        const ret = cFn(self, _title);
        return ret;
    }
    /// method [set_titlebar](https://docs.gtk.org/gtk4/method.Window.set_titlebar.html)
    pub fn setTitlebar(self: *Window, _titlebar: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_window_set_titlebar" });
        const ret = cFn(self, _titlebar);
        return ret;
    }
    /// method [set_transient_for](https://docs.gtk.org/gtk4/method.Window.set_transient_for.html)
    pub fn setTransientFor(self: *Window, _parent: ?*gtk.Window) void {
        const cFn = @extern(*const fn (*Window, ?*gtk.Window) callconv(.c) void, .{ .name = "gtk_window_set_transient_for" });
        const ret = cFn(self, _parent);
        return ret;
    }
    /// method [unfullscreen](https://docs.gtk.org/gtk4/method.Window.unfullscreen.html)
    pub fn unfullscreen(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_unfullscreen" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unmaximize](https://docs.gtk.org/gtk4/method.Window.unmaximize.html)
    pub fn unmaximize(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_unmaximize" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unminimize](https://docs.gtk.org/gtk4/method.Window.unminimize.html)
    pub fn unminimize(self: *Window) void {
        const cFn = @extern(*const fn (*Window) callconv(.c) void, .{ .name = "gtk_window_unminimize" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [activate_default](https://docs.gtk.org/gtk4/vfunc.Window.activate_default.html)
    pub fn activateDefaultV(self: *Window) void {
        const class: *WindowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_default.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [activate_focus](https://docs.gtk.org/gtk4/vfunc.Window.activate_focus.html)
    pub fn activateFocusV(self: *Window) void {
        const class: *WindowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.activate_focus.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [close_request](https://docs.gtk.org/gtk4/vfunc.Window.close_request.html)
    pub fn closeRequestV(self: *Window) bool {
        const class: *WindowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.close_request.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [enable_debugging](https://docs.gtk.org/gtk4/vfunc.Window.enable_debugging.html)
    pub fn enableDebuggingV(self: *Window, _toggle: bool) bool {
        const class: *WindowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.enable_debugging.?;
        const ret = vFn(self, _toggle);
        return ret;
    }
    /// vfunc [keys_changed](https://docs.gtk.org/gtk4/vfunc.Window.keys_changed.html)
    pub fn keysChangedV(self: *Window) void {
        const class: *WindowClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.keys_changed.?;
        const ret = vFn(self);
        return ret;
    }
    /// signal [activate-default](https://docs.gtk.org/gtk4/signal.Window.activate-default.html)
    pub fn connectActivateDefault(self: *Window, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-default", handler, args, flags, &.{ void, *Window });
    }
    /// signal [activate-focus](https://docs.gtk.org/gtk4/signal.Window.activate-focus.html)
    pub fn connectActivateFocus(self: *Window, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("activate-focus", handler, args, flags, &.{ void, *Window });
    }
    /// signal [close-request](https://docs.gtk.org/gtk4/signal.Window.close-request.html)
    pub fn connectCloseRequest(self: *Window, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("close-request", handler, args, flags, &.{ bool, *Window });
    }
    /// signal [enable-debugging](https://docs.gtk.org/gtk4/signal.Window.enable-debugging.html)
    pub fn connectEnableDebugging(self: *Window, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("enable-debugging", handler, args, flags, &.{ bool, *Window, bool });
    }
    /// signal [keys-changed](https://docs.gtk.org/gtk4/signal.Window.keys-changed.html)
    pub fn connectKeysChanged(self: *Window, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("keys-changed", handler, args, flags, &.{ void, *Window });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_window_get_type" });
        return cFn();
    }
};
pub const WindowClass = extern struct {
    parent_class: gtk.WidgetClass,
    activate_focus: ?*const fn (_window: *gtk.Window) callconv(.c) void,
    activate_default: ?*const fn (_window: *gtk.Window) callconv(.c) void,
    keys_changed: ?*const fn (_window: *gtk.Window) callconv(.c) void,
    enable_debugging: ?*const fn (_window: *gtk.Window, _toggle: bool) callconv(.c) bool,
    close_request: ?*const fn (_window: *gtk.Window) callconv(.c) bool,
    padding: [8]?*anyopaque,
};
/// Class [WindowControls](https://docs.gtk.org/gtk4/class.WindowControls.html)
/// - property [decoration-layout](https://docs.gtk.org/gtk4/property.WindowControls.decoration-layout.html): (rw) `[*:0]const u8`
/// - property [empty](https://docs.gtk.org/gtk4/property.WindowControls.empty.html): (r-) `bool`
/// - property [side](https://docs.gtk.org/gtk4/property.WindowControls.side.html): (rw) `gtk.PackType`
pub const WindowControls = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.WindowControlsClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.WindowControls.new.html)
    pub fn new(_side: gtk.PackType) *WindowControls {
        const cFn = @extern(*const fn (gtk.PackType) callconv(.c) *WindowControls, .{ .name = "gtk_window_controls_new" });
        const ret = cFn(_side);
        return ret;
    }
    /// method [get_decoration_layout](https://docs.gtk.org/gtk4/method.WindowControls.get_decoration_layout.html)
    pub fn getDecorationLayout(self: *WindowControls) ?[*:0]u8 {
        const cFn = @extern(*const fn (*WindowControls) callconv(.c) ?[*:0]u8, .{ .name = "gtk_window_controls_get_decoration_layout" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_empty](https://docs.gtk.org/gtk4/method.WindowControls.get_empty.html)
    pub fn getEmpty(self: *WindowControls) bool {
        const cFn = @extern(*const fn (*WindowControls) callconv(.c) bool, .{ .name = "gtk_window_controls_get_empty" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_side](https://docs.gtk.org/gtk4/method.WindowControls.get_side.html)
    pub fn getSide(self: *WindowControls) gtk.PackType {
        const cFn = @extern(*const fn (*WindowControls) callconv(.c) gtk.PackType, .{ .name = "gtk_window_controls_get_side" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_decoration_layout](https://docs.gtk.org/gtk4/method.WindowControls.set_decoration_layout.html)
    pub fn setDecorationLayout(self: *WindowControls, _layout: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*WindowControls, ?[*:0]const u8) callconv(.c) void, .{ .name = "gtk_window_controls_set_decoration_layout" });
        const ret = cFn(self, _layout);
        return ret;
    }
    /// method [set_side](https://docs.gtk.org/gtk4/method.WindowControls.set_side.html)
    pub fn setSide(self: *WindowControls, _side: gtk.PackType) void {
        const cFn = @extern(*const fn (*WindowControls, gtk.PackType) callconv(.c) void, .{ .name = "gtk_window_controls_set_side" });
        const ret = cFn(self, _side);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_window_controls_get_type" });
        return cFn();
    }
};
pub const WindowControlsClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Class [WindowGroup](https://docs.gtk.org/gtk4/class.WindowGroup.html)
pub const WindowGroup = extern struct {
    parent_instance: gobject.Object,
    priv: ?*gtk.WindowGroupPrivate,
    pub const Parent = gobject.Object;
    pub const Class = gtk.WindowGroupClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.WindowGroup.new.html)
    pub fn new() *WindowGroup {
        const cFn = @extern(*const fn () callconv(.c) *WindowGroup, .{ .name = "gtk_window_group_new" });
        const ret = cFn();
        return ret;
    }
    /// method [add_window](https://docs.gtk.org/gtk4/method.WindowGroup.add_window.html)
    pub fn addWindow(self: *WindowGroup, _window: *gtk.Window) void {
        const cFn = @extern(*const fn (*WindowGroup, *gtk.Window) callconv(.c) void, .{ .name = "gtk_window_group_add_window" });
        const ret = cFn(self, _window);
        return ret;
    }
    /// method [list_windows](https://docs.gtk.org/gtk4/method.WindowGroup.list_windows.html)
    pub fn listWindows(self: *WindowGroup) ?*core.List {
        const cFn = @extern(*const fn (*WindowGroup) callconv(.c) ?*core.List, .{ .name = "gtk_window_group_list_windows" });
        const ret = cFn(self);
        return ret;
    }
    /// method [remove_window](https://docs.gtk.org/gtk4/method.WindowGroup.remove_window.html)
    pub fn removeWindow(self: *WindowGroup, _window: *gtk.Window) void {
        const cFn = @extern(*const fn (*WindowGroup, *gtk.Window) callconv(.c) void, .{ .name = "gtk_window_group_remove_window" });
        const ret = cFn(self, _window);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_window_group_get_type" });
        return cFn();
    }
};
pub const WindowGroupClass = extern struct {
    parent_class: gobject.ObjectClass,
    _gtk_reserved1: ?*anyopaque,
    _gtk_reserved2: ?*anyopaque,
    _gtk_reserved3: ?*anyopaque,
    _gtk_reserved4: ?*anyopaque,
};
pub const WindowGroupPrivate = opaque {};
/// Class [WindowHandle](https://docs.gtk.org/gtk4/class.WindowHandle.html)
/// - property [child](https://docs.gtk.org/gtk4/property.WindowHandle.child.html): (rw) `gtk.Widget`
pub const WindowHandle = opaque {
    pub const Interfaces = [_]type{ gtk.Accessible, gtk.Buildable, gtk.ConstraintTarget };
    pub const Parent = gtk.Widget;
    pub const Class = gtk.WindowHandleClass;
    /// ctor [new](https://docs.gtk.org/gtk4/ctor.WindowHandle.new.html)
    pub fn new() *WindowHandle {
        const cFn = @extern(*const fn () callconv(.c) *WindowHandle, .{ .name = "gtk_window_handle_new" });
        const ret = cFn();
        return ret;
    }
    /// method [get_child](https://docs.gtk.org/gtk4/method.WindowHandle.get_child.html)
    pub fn getChild(self: *WindowHandle) ?*gtk.Widget {
        const cFn = @extern(*const fn (*WindowHandle) callconv(.c) ?*gtk.Widget, .{ .name = "gtk_window_handle_get_child" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_child](https://docs.gtk.org/gtk4/method.WindowHandle.set_child.html)
    pub fn setChild(self: *WindowHandle, _child: ?*gtk.Widget) void {
        const cFn = @extern(*const fn (*WindowHandle, ?*gtk.Widget) callconv(.c) void, .{ .name = "gtk_window_handle_set_child" });
        const ret = cFn(self, _child);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_window_handle_get_type" });
        return cFn();
    }
};
pub const WindowHandleClass = extern struct {
    parent_class: gtk.WidgetClass,
};
/// Enum [WrapMode](https://docs.gtk.org/gtk4/enum.WrapMode.html)
pub const WrapMode = enum(u32) {
    none = 0,
    char = 1,
    word = 2,
    word_char = 3,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "gtk_wrap_mode_get_type" });
        return cFn();
    }
};
/// func [accelerator_get_default_mod_mask](https://docs.gtk.org/gtk4/func.accelerator_get_default_mod_mask.html)
pub fn acceleratorGetDefaultModMask() gdk.ModifierType {
    const cFn = @extern(*const fn () callconv(.c) gdk.ModifierType, .{ .name = "gtk_accelerator_get_default_mod_mask" });
    const ret = cFn();
    return ret;
}
/// func [accelerator_get_label](https://docs.gtk.org/gtk4/func.accelerator_get_label.html)
pub fn acceleratorGetLabel(_accelerator_key: u32, _accelerator_mods: gdk.ModifierType) [*:0]u8 {
    const cFn = @extern(*const fn (u32, gdk.ModifierType) callconv(.c) [*:0]u8, .{ .name = "gtk_accelerator_get_label" });
    const ret = cFn(_accelerator_key, _accelerator_mods);
    return ret;
}
/// func [accelerator_get_label_with_keycode](https://docs.gtk.org/gtk4/func.accelerator_get_label_with_keycode.html)
pub fn acceleratorGetLabelWithKeycode(_display: ?*gdk.Display, _accelerator_key: u32, _keycode: u32, _accelerator_mods: gdk.ModifierType) [*:0]u8 {
    const cFn = @extern(*const fn (?*gdk.Display, u32, u32, gdk.ModifierType) callconv(.c) [*:0]u8, .{ .name = "gtk_accelerator_get_label_with_keycode" });
    const ret = cFn(_display, _accelerator_key, _keycode, _accelerator_mods);
    return ret;
}
/// func [accelerator_name](https://docs.gtk.org/gtk4/func.accelerator_name.html)
pub fn acceleratorName(_accelerator_key: u32, _accelerator_mods: gdk.ModifierType) [*:0]u8 {
    const cFn = @extern(*const fn (u32, gdk.ModifierType) callconv(.c) [*:0]u8, .{ .name = "gtk_accelerator_name" });
    const ret = cFn(_accelerator_key, _accelerator_mods);
    return ret;
}
/// func [accelerator_name_with_keycode](https://docs.gtk.org/gtk4/func.accelerator_name_with_keycode.html)
pub fn acceleratorNameWithKeycode(_display: ?*gdk.Display, _accelerator_key: u32, _keycode: u32, _accelerator_mods: gdk.ModifierType) [*:0]u8 {
    const cFn = @extern(*const fn (?*gdk.Display, u32, u32, gdk.ModifierType) callconv(.c) [*:0]u8, .{ .name = "gtk_accelerator_name_with_keycode" });
    const ret = cFn(_display, _accelerator_key, _keycode, _accelerator_mods);
    return ret;
}
/// func [accelerator_parse](https://docs.gtk.org/gtk4/func.accelerator_parse.html)
pub fn acceleratorParse(_accelerator: [*:0]const u8) struct {
    ret: bool,
    accelerator_key: u32,
    accelerator_mods: gdk.ModifierType,
} {
    var accelerator_key_out: u32 = undefined;
    const _accelerator_key = &accelerator_key_out;
    var accelerator_mods_out: gdk.ModifierType = undefined;
    const _accelerator_mods = &accelerator_mods_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*u32, ?*gdk.ModifierType) callconv(.c) bool, .{ .name = "gtk_accelerator_parse" });
    const ret = cFn(_accelerator, _accelerator_key, _accelerator_mods);
    return .{ .ret = ret, .accelerator_key = accelerator_key_out, .accelerator_mods = accelerator_mods_out };
}
/// func [accelerator_parse_with_keycode](https://docs.gtk.org/gtk4/func.accelerator_parse_with_keycode.html)
pub fn acceleratorParseWithKeycode(_accelerator: [*:0]const u8, _display: ?*gdk.Display) struct {
    ret: bool,
    accelerator_key: u32,
    accelerator_codes: [*:0]u32,
    accelerator_mods: gdk.ModifierType,
} {
    var accelerator_key_out: u32 = undefined;
    const _accelerator_key = &accelerator_key_out;
    var accelerator_codes_out: [*:0]u32 = undefined;
    const _accelerator_codes = &accelerator_codes_out;
    var accelerator_mods_out: gdk.ModifierType = undefined;
    const _accelerator_mods = &accelerator_mods_out;
    const cFn = @extern(*const fn ([*:0]const u8, ?*gdk.Display, ?*u32, ?*[*:0]u32, ?*gdk.ModifierType) callconv(.c) bool, .{ .name = "gtk_accelerator_parse_with_keycode" });
    const ret = cFn(_accelerator, _display, _accelerator_key, _accelerator_codes, _accelerator_mods);
    return .{ .ret = ret, .accelerator_key = accelerator_key_out, .accelerator_codes = accelerator_codes_out, .accelerator_mods = accelerator_mods_out };
}
/// func [accelerator_valid](https://docs.gtk.org/gtk4/func.accelerator_valid.html)
pub fn acceleratorValid(_keyval: u32, _modifiers: gdk.ModifierType) bool {
    const cFn = @extern(*const fn (u32, gdk.ModifierType) callconv(.c) bool, .{ .name = "gtk_accelerator_valid" });
    const ret = cFn(_keyval, _modifiers);
    return ret;
}
/// func [accessible_property_init_value](https://docs.gtk.org/gtk4/func.accessible_property_init_value.html)
pub fn accessiblePropertyInitValue(_property: gtk.AccessibleProperty, _value: *gobject.Value) void {
    const cFn = @extern(*const fn (gtk.AccessibleProperty, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_property_init_value" });
    const ret = cFn(_property, _value);
    return ret;
}
/// func [accessible_relation_init_value](https://docs.gtk.org/gtk4/func.accessible_relation_init_value.html)
pub fn accessibleRelationInitValue(_relation: gtk.AccessibleRelation, _value: *gobject.Value) void {
    const cFn = @extern(*const fn (gtk.AccessibleRelation, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_relation_init_value" });
    const ret = cFn(_relation, _value);
    return ret;
}
/// func [accessible_state_init_value](https://docs.gtk.org/gtk4/func.accessible_state_init_value.html)
pub fn accessibleStateInitValue(_state: gtk.AccessibleState, _value: *gobject.Value) void {
    const cFn = @extern(*const fn (gtk.AccessibleState, *gobject.Value) callconv(.c) void, .{ .name = "gtk_accessible_state_init_value" });
    const ret = cFn(_state, _value);
    return ret;
}
/// func [bitset_iter_init_at](https://docs.gtk.org/gtk4/func.bitset_iter_init_at.html)
pub fn bitsetIterInitAt(_iter: *gtk.BitsetIter, _set: *gtk.Bitset, _target: u32) struct {
    ret: bool,
    value: u32,
} {
    var value_out: u32 = undefined;
    const _value = &value_out;
    const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, u32, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_at" });
    const ret = cFn(_iter, _set, _target, _value);
    return .{ .ret = ret, .value = value_out };
}
/// func [bitset_iter_init_first](https://docs.gtk.org/gtk4/func.bitset_iter_init_first.html)
pub fn bitsetIterInitFirst(_iter: *gtk.BitsetIter, _set: *gtk.Bitset) struct {
    ret: bool,
    value: u32,
} {
    var value_out: u32 = undefined;
    const _value = &value_out;
    const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_first" });
    const ret = cFn(_iter, _set, _value);
    return .{ .ret = ret, .value = value_out };
}
/// func [bitset_iter_init_last](https://docs.gtk.org/gtk4/func.bitset_iter_init_last.html)
pub fn bitsetIterInitLast(_iter: *gtk.BitsetIter, _set: *gtk.Bitset) struct {
    ret: bool,
    value: u32,
} {
    var value_out: u32 = undefined;
    const _value = &value_out;
    const cFn = @extern(*const fn (*gtk.BitsetIter, *gtk.Bitset, ?*u32) callconv(.c) bool, .{ .name = "gtk_bitset_iter_init_last" });
    const ret = cFn(_iter, _set, _value);
    return .{ .ret = ret, .value = value_out };
}
/// func [builder_error_quark](https://docs.gtk.org/gtk4/func.builder_error_quark.html)
pub fn builderErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_builder_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [check_version](https://docs.gtk.org/gtk4/func.check_version.html)
pub fn checkVersion(_required_major: u32, _required_minor: u32, _required_micro: u32) ?[*:0]u8 {
    const cFn = @extern(*const fn (u32, u32, u32) callconv(.c) ?[*:0]u8, .{ .name = "gtk_check_version" });
    const ret = cFn(_required_major, _required_minor, _required_micro);
    return ret;
}
/// func [constraint_vfl_parser_error_quark](https://docs.gtk.org/gtk4/func.constraint_vfl_parser_error_quark.html)
pub fn constraintVflParserErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_constraint_vfl_parser_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [css_parser_error_quark](https://docs.gtk.org/gtk4/func.css_parser_error_quark.html)
pub fn cssParserErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_css_parser_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [css_parser_warning_quark](https://docs.gtk.org/gtk4/func.css_parser_warning_quark.html)
pub fn cssParserWarningQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_css_parser_warning_quark" });
    const ret = cFn();
    return ret;
}
/// func [dialog_error_quark](https://docs.gtk.org/gtk4/func.dialog_error_quark.html)
pub fn dialogErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_dialog_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [disable_setlocale](https://docs.gtk.org/gtk4/func.disable_setlocale.html)
pub fn disableSetlocale() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "gtk_disable_setlocale" });
    const ret = cFn();
    return ret;
}
/// func [distribute_natural_allocation](https://docs.gtk.org/gtk4/func.distribute_natural_allocation.html)
pub fn distributeNaturalAllocation(_extra_space: i32, _sizess: []gtk.RequestedSize) i32 {
    const _n_requested_sizes: u32 = @intCast(_sizess.len);
    const _sizes = _sizess.ptr;
    const cFn = @extern(*const fn (i32, u32, [*]gtk.RequestedSize) callconv(.c) i32, .{ .name = "gtk_distribute_natural_allocation" });
    const ret = cFn(_extra_space, _n_requested_sizes, _sizes);
    return ret;
}
/// func [editable_delegate_get_property](https://docs.gtk.org/gtk4/func.editable_delegate_get_property.html)
pub fn editableDelegateGetProperty(_object: *gobject.Object, _prop_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) bool {
    const cFn = @extern(*const fn (*gobject.Object, u32, *gobject.Value, *gobject.ParamSpec) callconv(.c) bool, .{ .name = "gtk_editable_delegate_get_property" });
    const ret = cFn(_object, _prop_id, _value, _pspec);
    return ret;
}
/// func [editable_delegate_set_property](https://docs.gtk.org/gtk4/func.editable_delegate_set_property.html)
pub fn editableDelegateSetProperty(_object: *gobject.Object, _prop_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) bool {
    const cFn = @extern(*const fn (*gobject.Object, u32, *gobject.Value, *gobject.ParamSpec) callconv(.c) bool, .{ .name = "gtk_editable_delegate_set_property" });
    const ret = cFn(_object, _prop_id, _value, _pspec);
    return ret;
}
/// func [editable_install_properties](https://docs.gtk.org/gtk4/func.editable_install_properties.html)
pub fn editableInstallProperties(_object_class: *gobject.ObjectClass, _first_prop: u32) u32 {
    const cFn = @extern(*const fn (*gobject.ObjectClass, u32) callconv(.c) u32, .{ .name = "gtk_editable_install_properties" });
    const ret = cFn(_object_class, _first_prop);
    return ret;
}
/// func [enumerate_printers](https://docs.gtk.org/gtk4/func.enumerate_printers.html)
pub fn enumeratePrinters(func: anytype, func_args: anytype, _wait: bool) void {
    var closure_func = core.zig_closure(func, func_args, &.{ bool, *gtk.Printer });
    const _func: gtk.PrinterFunc = @ptrCast(closure_func.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_func.c_data());
    const _destroy: glib.DestroyNotify = @ptrCast(closure_func.c_destroy());
    const cFn = @extern(*const fn (gtk.PrinterFunc, ?*anyopaque, glib.DestroyNotify, bool) callconv(.c) void, .{ .name = "gtk_enumerate_printers" });
    const ret = cFn(_func, @ptrCast(_data), _destroy, _wait);
    return ret;
}
/// func [file_chooser_error_quark](https://docs.gtk.org/gtk4/func.file_chooser_error_quark.html)
pub fn fileChooserErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_file_chooser_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [get_binary_age](https://docs.gtk.org/gtk4/func.get_binary_age.html)
pub fn getBinaryAge() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_get_binary_age" });
    const ret = cFn();
    return ret;
}
/// func [get_debug_flags](https://docs.gtk.org/gtk4/func.get_debug_flags.html)
pub fn getDebugFlags() gtk.DebugFlags {
    const cFn = @extern(*const fn () callconv(.c) gtk.DebugFlags, .{ .name = "gtk_get_debug_flags" });
    const ret = cFn();
    return ret;
}
/// func [get_default_language](https://docs.gtk.org/gtk4/func.get_default_language.html)
pub fn getDefaultLanguage() *pango.Language {
    const cFn = @extern(*const fn () callconv(.c) *pango.Language, .{ .name = "gtk_get_default_language" });
    const ret = cFn();
    return ret;
}
/// func [get_interface_age](https://docs.gtk.org/gtk4/func.get_interface_age.html)
pub fn getInterfaceAge() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_get_interface_age" });
    const ret = cFn();
    return ret;
}
/// func [get_locale_direction](https://docs.gtk.org/gtk4/func.get_locale_direction.html)
pub fn getLocaleDirection() gtk.TextDirection {
    const cFn = @extern(*const fn () callconv(.c) gtk.TextDirection, .{ .name = "gtk_get_locale_direction" });
    const ret = cFn();
    return ret;
}
/// func [get_major_version](https://docs.gtk.org/gtk4/func.get_major_version.html)
pub fn getMajorVersion() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_get_major_version" });
    const ret = cFn();
    return ret;
}
/// func [get_micro_version](https://docs.gtk.org/gtk4/func.get_micro_version.html)
pub fn getMicroVersion() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_get_micro_version" });
    const ret = cFn();
    return ret;
}
/// func [get_minor_version](https://docs.gtk.org/gtk4/func.get_minor_version.html)
pub fn getMinorVersion() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_get_minor_version" });
    const ret = cFn();
    return ret;
}
/// func [hsv_to_rgb](https://docs.gtk.org/gtk4/func.hsv_to_rgb.html)
pub fn hsvToRgb(_h: f32, _s: f32, _v: f32) struct {
    ret: void,
    r: f32,
    g: f32,
    b: f32,
} {
    var r_out: f32 = undefined;
    const _r = &r_out;
    var g_out: f32 = undefined;
    const _g = &g_out;
    var b_out: f32 = undefined;
    const _b = &b_out;
    const cFn = @extern(*const fn (f32, f32, f32, *f32, *f32, *f32) callconv(.c) void, .{ .name = "gtk_hsv_to_rgb" });
    const ret = cFn(_h, _s, _v, _r, _g, _b);
    return .{ .ret = ret, .r = r_out, .g = g_out, .b = b_out };
}
/// func [icon_theme_error_quark](https://docs.gtk.org/gtk4/func.icon_theme_error_quark.html)
pub fn iconThemeErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_icon_theme_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [init](https://docs.gtk.org/gtk4/func.init.html)
pub fn init() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "gtk_init" });
    const ret = cFn();
    return ret;
}
/// func [init_check](https://docs.gtk.org/gtk4/func.init_check.html)
pub fn initCheck() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "gtk_init_check" });
    const ret = cFn();
    return ret;
}
/// func [is_initialized](https://docs.gtk.org/gtk4/func.is_initialized.html)
pub fn isInitialized() bool {
    const cFn = @extern(*const fn () callconv(.c) bool, .{ .name = "gtk_is_initialized" });
    const ret = cFn();
    return ret;
}
/// func [native_get_for_surface](https://docs.gtk.org/gtk4/func.native_get_for_surface.html)
pub fn nativeGetForSurface(_surface: *gdk.Surface) ?*gtk.Native {
    const cFn = @extern(*const fn (*gdk.Surface) callconv(.c) ?*gtk.Native, .{ .name = "gtk_native_get_for_surface" });
    const ret = cFn(_surface);
    return ret;
}
/// func [paper_size_get_default](https://docs.gtk.org/gtk4/func.paper_size_get_default.html)
pub fn paperSizeGetDefault() [*:0]u8 {
    const cFn = @extern(*const fn () callconv(.c) [*:0]u8, .{ .name = "gtk_paper_size_get_default" });
    const ret = cFn();
    return ret;
}
/// func [paper_size_get_paper_sizes](https://docs.gtk.org/gtk4/func.paper_size_get_paper_sizes.html)
pub fn paperSizeGetPaperSizes(_include_custom: bool) ?*core.List {
    const cFn = @extern(*const fn (bool) callconv(.c) ?*core.List, .{ .name = "gtk_paper_size_get_paper_sizes" });
    const ret = cFn(_include_custom);
    return ret;
}
/// func [param_spec_expression](https://docs.gtk.org/gtk4/func.param_spec_expression.html)
pub fn paramSpecExpression(_name: [*:0]const u8, _nick: [*:0]const u8, _blurb: [*:0]const u8, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, [*:0]const u8, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "gtk_param_spec_expression" });
    const ret = cFn(_name, _nick, _blurb, _flags);
    return ret;
}
/// func [print_error_quark](https://docs.gtk.org/gtk4/func.print_error_quark.html)
pub fn printErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_print_error_quark" });
    const ret = cFn();
    return ret;
}
/// func [print_run_page_setup_dialog](https://docs.gtk.org/gtk4/func.print_run_page_setup_dialog.html)
pub fn printRunPageSetupDialog(_parent: ?*gtk.Window, _page_setup: ?*gtk.PageSetup, _settings: *gtk.PrintSettings) *gtk.PageSetup {
    const cFn = @extern(*const fn (?*gtk.Window, ?*gtk.PageSetup, *gtk.PrintSettings) callconv(.c) *gtk.PageSetup, .{ .name = "gtk_print_run_page_setup_dialog" });
    const ret = cFn(_parent, _page_setup, _settings);
    return ret;
}
/// func [print_run_page_setup_dialog_async](https://docs.gtk.org/gtk4/func.print_run_page_setup_dialog_async.html)
pub fn printRunPageSetupDialogAsync(_parent: ?*gtk.Window, _page_setup: ?*gtk.PageSetup, _settings: *gtk.PrintSettings, done_cb: anytype, done_cb_args: anytype) void {
    var closure_done_cb = core.zig_closure(done_cb, done_cb_args, &.{ void, *gtk.PageSetup });
    closure_done_cb.setOnce();
    const _done_cb: gtk.PageSetupDoneFunc = @ptrCast(closure_done_cb.c_closure());
    const _data: ?*anyopaque = @ptrCast(closure_done_cb.c_data());
    const cFn = @extern(*const fn (?*gtk.Window, ?*gtk.PageSetup, *gtk.PrintSettings, gtk.PageSetupDoneFunc, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_print_run_page_setup_dialog_async" });
    const ret = cFn(_parent, _page_setup, _settings, _done_cb, @ptrCast(_data));
    return ret;
}
/// func [recent_manager_error_quark](https://docs.gtk.org/gtk4/func.recent_manager_error_quark.html)
pub fn recentManagerErrorQuark() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "gtk_recent_manager_error_quark" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [render_activity](https://docs.gtk.org/gtk4/func.render_activity.html)
pub const renderActivity = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderActivity(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_activity" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderActivity;
/// Deprecated:
/// func [render_arrow](https://docs.gtk.org/gtk4/func.render_arrow.html)
pub const renderArrow = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderArrow(_context: *gtk.StyleContext, _cr: *cairo.Context, _angle: f64, _x: f64, _y: f64, _size: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_arrow" });
        const ret = cFn(_context, _cr, _angle, _x, _y, _size);
        return ret;
    }
}.renderArrow;
/// Deprecated:
/// func [render_background](https://docs.gtk.org/gtk4/func.render_background.html)
pub const renderBackground = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderBackground(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_background" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderBackground;
/// Deprecated:
/// func [render_check](https://docs.gtk.org/gtk4/func.render_check.html)
pub const renderCheck = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderCheck(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_check" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderCheck;
/// Deprecated:
/// func [render_expander](https://docs.gtk.org/gtk4/func.render_expander.html)
pub const renderExpander = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderExpander(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_expander" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderExpander;
/// Deprecated:
/// func [render_focus](https://docs.gtk.org/gtk4/func.render_focus.html)
pub const renderFocus = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderFocus(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_focus" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderFocus;
/// Deprecated:
/// func [render_frame](https://docs.gtk.org/gtk4/func.render_frame.html)
pub const renderFrame = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderFrame(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_frame" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderFrame;
/// Deprecated:
/// func [render_handle](https://docs.gtk.org/gtk4/func.render_handle.html)
pub const renderHandle = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderHandle(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_handle" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderHandle;
/// Deprecated:
/// func [render_icon](https://docs.gtk.org/gtk4/func.render_icon.html)
pub const renderIcon = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderIcon(_context: *gtk.StyleContext, _cr: *cairo.Context, _texture: *gdk.Texture, _x: f64, _y: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, *gdk.Texture, f64, f64) callconv(.c) void, .{ .name = "gtk_render_icon" });
        const ret = cFn(_context, _cr, _texture, _x, _y);
        return ret;
    }
}.renderIcon;
/// Deprecated:
/// func [render_layout](https://docs.gtk.org/gtk4/func.render_layout.html)
pub const renderLayout = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderLayout(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _layout: *pango.Layout) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, *pango.Layout) callconv(.c) void, .{ .name = "gtk_render_layout" });
        const ret = cFn(_context, _cr, _x, _y, _layout);
        return ret;
    }
}.renderLayout;
/// Deprecated:
/// func [render_line](https://docs.gtk.org/gtk4/func.render_line.html)
pub const renderLine = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderLine(_context: *gtk.StyleContext, _cr: *cairo.Context, _x0: f64, _y0: f64, _x1: f64, _y1: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_line" });
        const ret = cFn(_context, _cr, _x0, _y0, _x1, _y1);
        return ret;
    }
}.renderLine;
/// Deprecated:
/// func [render_option](https://docs.gtk.org/gtk4/func.render_option.html)
pub const renderOption = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn renderOption(_context: *gtk.StyleContext, _cr: *cairo.Context, _x: f64, _y: f64, _width: f64, _height: f64) void {
        const cFn = @extern(*const fn (*gtk.StyleContext, *cairo.Context, f64, f64, f64, f64) callconv(.c) void, .{ .name = "gtk_render_option" });
        const ret = cFn(_context, _cr, _x, _y, _width, _height);
        return ret;
    }
}.renderOption;
/// func [rgb_to_hsv](https://docs.gtk.org/gtk4/func.rgb_to_hsv.html)
pub fn rgbToHsv(_r: f32, _g: f32, _b: f32) struct {
    ret: void,
    h: f32,
    s: f32,
    v: f32,
} {
    var h_out: f32 = undefined;
    const _h = &h_out;
    var s_out: f32 = undefined;
    const _s = &s_out;
    var v_out: f32 = undefined;
    const _v = &v_out;
    const cFn = @extern(*const fn (f32, f32, f32, *f32, *f32, *f32) callconv(.c) void, .{ .name = "gtk_rgb_to_hsv" });
    const ret = cFn(_r, _g, _b, _h, _s, _v);
    return .{ .ret = ret, .h = h_out, .s = s_out, .v = v_out };
}
/// func [set_debug_flags](https://docs.gtk.org/gtk4/func.set_debug_flags.html)
pub fn setDebugFlags(_flags: gtk.DebugFlags) void {
    const cFn = @extern(*const fn (gtk.DebugFlags) callconv(.c) void, .{ .name = "gtk_set_debug_flags" });
    const ret = cFn(_flags);
    return ret;
}
/// Deprecated:
/// func [show_uri](https://docs.gtk.org/gtk4/func.show_uri.html)
pub const showUri = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn showUri(_parent: ?*gtk.Window, _uri: [*:0]const u8, _timestamp: u32) void {
        const cFn = @extern(*const fn (?*gtk.Window, [*:0]const u8, u32) callconv(.c) void, .{ .name = "gtk_show_uri" });
        const ret = cFn(_parent, _uri, _timestamp);
        return ret;
    }
}.showUri;
/// Deprecated:
/// func [show_uri_full](https://docs.gtk.org/gtk4/func.show_uri_full.html)
pub const showUriFull = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn showUriFull(_parent: ?*gtk.Window, _uri: [*:0]const u8, _timestamp: u32, _cancellable: ?*gio.Cancellable, callback: anytype, callback_args: anytype) void {
        var closure_callback = core.zig_closure(callback, callback_args, &.{ void, ?*gobject.Object, *gio.AsyncResult });
        closure_callback.setOnce();
        const _callback: ?gio.AsyncReadyCallback = @ptrCast(closure_callback.c_closure());
        const _user_data: ?*anyopaque = @ptrCast(closure_callback.c_data());
        const cFn = @extern(*const fn (?*gtk.Window, [*:0]const u8, u32, ?*gio.Cancellable, ?gio.AsyncReadyCallback, ?*anyopaque) callconv(.c) void, .{ .name = "gtk_show_uri_full" });
        const ret = cFn(_parent, _uri, _timestamp, _cancellable, _callback, @ptrCast(_user_data));
        return ret;
    }
}.showUriFull;
/// Deprecated:
/// func [show_uri_full_finish](https://docs.gtk.org/gtk4/func.show_uri_full_finish.html)
pub const showUriFullFinish = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn showUriFullFinish(_parent: *gtk.Window, _result: *gio.AsyncResult, _error: *?*core.Error) error{GError}!bool {
        const cFn = @extern(*const fn (*gtk.Window, *gio.AsyncResult, *?*core.Error) callconv(.c) bool, .{ .name = "gtk_show_uri_full_finish" });
        const ret = cFn(_parent, _result, _error);
        if (_error.* != null) return error.GError;
        return ret;
    }
}.showUriFullFinish;
/// func [test_accessible_assertion_message_role](https://docs.gtk.org/gtk4/func.test_accessible_assertion_message_role.html)
pub fn testAccessibleAssertionMessageRole(_domain: [*:0]const u8, _file: [*:0]const u8, _line: i32, _func: [*:0]const u8, _expr: [*:0]const u8, _accessible: *gtk.Accessible, _expected_role: gtk.AccessibleRole, _actual_role: gtk.AccessibleRole) void {
    const cFn = @extern(*const fn ([*:0]const u8, [*:0]const u8, i32, [*:0]const u8, [*:0]const u8, *gtk.Accessible, gtk.AccessibleRole, gtk.AccessibleRole) callconv(.c) void, .{ .name = "gtk_test_accessible_assertion_message_role" });
    const ret = cFn(_domain, _file, _line, _func, _expr, _accessible, _expected_role, _actual_role);
    return ret;
}
/// func [test_accessible_has_property](https://docs.gtk.org/gtk4/func.test_accessible_has_property.html)
pub fn testAccessibleHasProperty(_accessible: *gtk.Accessible, _property: gtk.AccessibleProperty) bool {
    const cFn = @extern(*const fn (*gtk.Accessible, gtk.AccessibleProperty) callconv(.c) bool, .{ .name = "gtk_test_accessible_has_property" });
    const ret = cFn(_accessible, _property);
    return ret;
}
/// func [test_accessible_has_relation](https://docs.gtk.org/gtk4/func.test_accessible_has_relation.html)
pub fn testAccessibleHasRelation(_accessible: *gtk.Accessible, _relation: gtk.AccessibleRelation) bool {
    const cFn = @extern(*const fn (*gtk.Accessible, gtk.AccessibleRelation) callconv(.c) bool, .{ .name = "gtk_test_accessible_has_relation" });
    const ret = cFn(_accessible, _relation);
    return ret;
}
/// func [test_accessible_has_role](https://docs.gtk.org/gtk4/func.test_accessible_has_role.html)
pub fn testAccessibleHasRole(_accessible: *gtk.Accessible, _role: gtk.AccessibleRole) bool {
    const cFn = @extern(*const fn (*gtk.Accessible, gtk.AccessibleRole) callconv(.c) bool, .{ .name = "gtk_test_accessible_has_role" });
    const ret = cFn(_accessible, _role);
    return ret;
}
/// func [test_accessible_has_state](https://docs.gtk.org/gtk4/func.test_accessible_has_state.html)
pub fn testAccessibleHasState(_accessible: *gtk.Accessible, _state: gtk.AccessibleState) bool {
    const cFn = @extern(*const fn (*gtk.Accessible, gtk.AccessibleState) callconv(.c) bool, .{ .name = "gtk_test_accessible_has_state" });
    const ret = cFn(_accessible, _state);
    return ret;
}
/// func [test_list_all_types](https://docs.gtk.org/gtk4/func.test_list_all_types.html)
pub fn testListAllTypes() struct {
    ret: [*]core.Type,
    n_types: u32,
} {
    var n_types_out: u32 = undefined;
    const _n_types = &n_types_out;
    const cFn = @extern(*const fn (*u32) callconv(.c) [*]core.Type, .{ .name = "gtk_test_list_all_types" });
    const ret = cFn(_n_types);
    return .{ .ret = ret, .n_types = n_types_out };
}
/// func [test_register_all_types](https://docs.gtk.org/gtk4/func.test_register_all_types.html)
pub fn testRegisterAllTypes() void {
    const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "gtk_test_register_all_types" });
    const ret = cFn();
    return ret;
}
/// func [test_widget_wait_for_draw](https://docs.gtk.org/gtk4/func.test_widget_wait_for_draw.html)
pub fn testWidgetWaitForDraw(_widget: *gtk.Widget) void {
    const cFn = @extern(*const fn (*gtk.Widget) callconv(.c) void, .{ .name = "gtk_test_widget_wait_for_draw" });
    const ret = cFn(_widget);
    return ret;
}
/// Deprecated:
/// func [tree_create_row_drag_content](https://docs.gtk.org/gtk4/func.tree_create_row_drag_content.html)
pub const treeCreateRowDragContent = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn treeCreateRowDragContent(_tree_model: *gtk.TreeModel, _path: *gtk.TreePath) *gdk.ContentProvider {
        const cFn = @extern(*const fn (*gtk.TreeModel, *gtk.TreePath) callconv(.c) *gdk.ContentProvider, .{ .name = "gtk_tree_create_row_drag_content" });
        const ret = cFn(_tree_model, _path);
        return ret;
    }
}.treeCreateRowDragContent;
/// Deprecated:
/// func [tree_get_row_drag_data](https://docs.gtk.org/gtk4/func.tree_get_row_drag_data.html)
pub const treeGetRowDragData = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn treeGetRowDragData(_value: *gobject.Value) struct {
        ret: bool,
        tree_model: ?*gtk.TreeModel,
        path: ?*gtk.TreePath,
    } {
        var tree_model_out: ?*gtk.TreeModel = undefined;
        const _tree_model = &tree_model_out;
        var path_out: ?*gtk.TreePath = undefined;
        const _path = &path_out;
        const cFn = @extern(*const fn (*gobject.Value, ?*?*gtk.TreeModel, ?*?*gtk.TreePath) callconv(.c) bool, .{ .name = "gtk_tree_get_row_drag_data" });
        const ret = cFn(_value, _tree_model, _path);
        return .{ .ret = ret, .tree_model = tree_model_out, .path = path_out };
    }
}.treeGetRowDragData;
/// Deprecated:
/// func [tree_row_reference_deleted](https://docs.gtk.org/gtk4/func.tree_row_reference_deleted.html)
pub const treeRowReferenceDeleted = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn treeRowReferenceDeleted(_proxy: *gobject.Object, _path: *gtk.TreePath) void {
        const cFn = @extern(*const fn (*gobject.Object, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_row_reference_deleted" });
        const ret = cFn(_proxy, _path);
        return ret;
    }
}.treeRowReferenceDeleted;
/// Deprecated:
/// func [tree_row_reference_inserted](https://docs.gtk.org/gtk4/func.tree_row_reference_inserted.html)
pub const treeRowReferenceInserted = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn treeRowReferenceInserted(_proxy: *gobject.Object, _path: *gtk.TreePath) void {
        const cFn = @extern(*const fn (*gobject.Object, *gtk.TreePath) callconv(.c) void, .{ .name = "gtk_tree_row_reference_inserted" });
        const ret = cFn(_proxy, _path);
        return ret;
    }
}.treeRowReferenceInserted;
/// func [value_dup_expression](https://docs.gtk.org/gtk4/func.value_dup_expression.html)
pub fn valueDupExpression(_value: *gobject.Value) ?*gtk.Expression {
    const cFn = @extern(*const fn (*gobject.Value) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_value_dup_expression" });
    const ret = cFn(_value);
    return ret;
}
/// func [value_get_expression](https://docs.gtk.org/gtk4/func.value_get_expression.html)
pub fn valueGetExpression(_value: *gobject.Value) ?*gtk.Expression {
    const cFn = @extern(*const fn (*gobject.Value) callconv(.c) ?*gtk.Expression, .{ .name = "gtk_value_get_expression" });
    const ret = cFn(_value);
    return ret;
}
/// func [value_set_expression](https://docs.gtk.org/gtk4/func.value_set_expression.html)
pub fn valueSetExpression(_value: *gobject.Value, _expression: *gtk.Expression) void {
    const cFn = @extern(*const fn (*gobject.Value, *gtk.Expression) callconv(.c) void, .{ .name = "gtk_value_set_expression" });
    const ret = cFn(_value, _expression);
    return ret;
}
/// func [value_take_expression](https://docs.gtk.org/gtk4/func.value_take_expression.html)
pub fn valueTakeExpression(_value: *gobject.Value, _expression: ?*gtk.Expression) void {
    const cFn = @extern(*const fn (*gobject.Value, ?*gtk.Expression) callconv(.c) void, .{ .name = "gtk_value_take_expression" });
    const ret = cFn(_value, _expression);
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
