// This file is auto-generated by zig-gir-ffi
const gobject = @This();
pub const glib = @import("glib");
pub const core = @import("core");
const std = @import("std");
const config = core.config;
/// Struct [Array](https://docs.gtk.org/gobject/struct.Array.html)
pub const Array = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_array_get_type" });
        return cFn();
    }
};
/// callback [BaseFinalizeFunc](https://docs.gtk.org/gobject/callback.BaseFinalizeFunc.html)
pub const BaseFinalizeFunc = *const fn (_g_class: *gobject.TypeClass) callconv(.c) void;
/// callback [BaseInitFunc](https://docs.gtk.org/gobject/callback.BaseInitFunc.html)
pub const BaseInitFunc = *const fn (_g_class: *gobject.TypeClass) callconv(.c) void;
/// Class [Binding](https://docs.gtk.org/gobject/class.Binding.html)
/// - property [flags](https://docs.gtk.org/gobject/property.Binding.flags.html): (r-) `gobject.BindingFlags`
/// - property [source](https://docs.gtk.org/gobject/property.Binding.source.html): (r-) `gobject.Object`
/// - property [source-property](https://docs.gtk.org/gobject/property.Binding.source-property.html): (r-) `[*:0]const u8`
/// - property [target](https://docs.gtk.org/gobject/property.Binding.target.html): (r-) `gobject.Object`
/// - property [target-property](https://docs.gtk.org/gobject/property.Binding.target-property.html): (r-) `[*:0]const u8`
pub const Binding = opaque {
    pub const Parent = gobject.Object;
    /// method [dup_source](https://docs.gtk.org/gobject/method.Binding.dup_source.html)
    pub fn dupSource(self: *Binding) ?*gobject.Object {
        const cFn = @extern(*const fn (*Binding) callconv(.c) ?*gobject.Object, .{ .name = "g_binding_dup_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [dup_target](https://docs.gtk.org/gobject/method.Binding.dup_target.html)
    pub fn dupTarget(self: *Binding) ?*gobject.Object {
        const cFn = @extern(*const fn (*Binding) callconv(.c) ?*gobject.Object, .{ .name = "g_binding_dup_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gobject/method.Binding.get_flags.html)
    pub fn getFlags(self: *Binding) gobject.BindingFlags {
        const cFn = @extern(*const fn (*Binding) callconv(.c) gobject.BindingFlags, .{ .name = "g_binding_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_source](https://docs.gtk.org/gobject/method.Binding.get_source.html)
    pub const getSource = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getSource(self: *Binding) ?*gobject.Object {
            const cFn = @extern(*const fn (*Binding) callconv(.c) ?*gobject.Object, .{ .name = "g_binding_get_source" });
            const ret = cFn(self);
            return ret;
        }
    }.getSource;
    /// method [get_source_property](https://docs.gtk.org/gobject/method.Binding.get_source_property.html)
    pub fn getSourceProperty(self: *Binding) [*:0]u8 {
        const cFn = @extern(*const fn (*Binding) callconv(.c) [*:0]u8, .{ .name = "g_binding_get_source_property" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_target](https://docs.gtk.org/gobject/method.Binding.get_target.html)
    pub const getTarget = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getTarget(self: *Binding) ?*gobject.Object {
            const cFn = @extern(*const fn (*Binding) callconv(.c) ?*gobject.Object, .{ .name = "g_binding_get_target" });
            const ret = cFn(self);
            return ret;
        }
    }.getTarget;
    /// method [get_target_property](https://docs.gtk.org/gobject/method.Binding.get_target_property.html)
    pub fn getTargetProperty(self: *Binding) [*:0]u8 {
        const cFn = @extern(*const fn (*Binding) callconv(.c) [*:0]u8, .{ .name = "g_binding_get_target_property" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unbind](https://docs.gtk.org/gobject/method.Binding.unbind.html)
    pub fn unbind(self: *Binding) void {
        const cFn = @extern(*const fn (*Binding) callconv(.c) void, .{ .name = "g_binding_unbind" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_binding_get_type" });
        return cFn();
    }
};
/// Flags [BindingFlags](https://docs.gtk.org/gobject/flags.BindingFlags.html)
pub const BindingFlags = packed struct(u32) {
    bidirectional: bool = false,
    sync_create: bool = false,
    invert_boolean: bool = false,
    _: u29 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_binding_flags_get_type" });
        return cFn();
    }
};
/// Class [BindingGroup](https://docs.gtk.org/gobject/class.BindingGroup.html)
/// - property [source](https://docs.gtk.org/gobject/property.BindingGroup.source.html): (rw) `gobject.Object`
pub const BindingGroup = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gobject/ctor.BindingGroup.new.html)
    pub fn new() *BindingGroup {
        const cFn = @extern(*const fn () callconv(.c) *BindingGroup, .{ .name = "g_binding_group_new" });
        const ret = cFn();
        return ret;
    }
    /// method [bind](https://docs.gtk.org/gobject/method.BindingGroup.bind.html)
    pub fn bind(self: *BindingGroup, _source_property: [*:0]const u8, _target: *gobject.Object, _target_property: [*:0]const u8, _flags: gobject.BindingFlags) void {
        const cFn = @extern(*const fn (*BindingGroup, [*:0]const u8, *gobject.Object, [*:0]const u8, gobject.BindingFlags) callconv(.c) void, .{ .name = "g_binding_group_bind" });
        const ret = cFn(self, _source_property, _target, _target_property, _flags);
        return ret;
    }
    /// method [bind_full](https://docs.gtk.org/gobject/method.BindingGroup.bind_full.html)
    pub fn bindFull(self: *BindingGroup, _source_property: [*:0]const u8, _target: *gobject.Object, _target_property: [*:0]const u8, _flags: gobject.BindingFlags, _transform_to: ?*gobject.Closure, _transform_from: ?*gobject.Closure) void {
        const cFn = @extern(*const fn (*BindingGroup, [*:0]const u8, *gobject.Object, [*:0]const u8, gobject.BindingFlags, ?*gobject.Closure, ?*gobject.Closure) callconv(.c) void, .{ .name = "g_binding_group_bind_with_closures" });
        const ret = cFn(self, _source_property, _target, _target_property, _flags, _transform_to, _transform_from);
        return ret;
    }
    /// method [dup_source](https://docs.gtk.org/gobject/method.BindingGroup.dup_source.html)
    pub fn dupSource(self: *BindingGroup) ?*gobject.Object {
        const cFn = @extern(*const fn (*BindingGroup) callconv(.c) ?*gobject.Object, .{ .name = "g_binding_group_dup_source" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_source](https://docs.gtk.org/gobject/method.BindingGroup.set_source.html)
    pub fn setSource(self: *BindingGroup, _source: ?*gobject.Object) void {
        const cFn = @extern(*const fn (*BindingGroup, ?*gobject.Object) callconv(.c) void, .{ .name = "g_binding_group_set_source" });
        const ret = cFn(self, _source);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_binding_group_get_type" });
        return cFn();
    }
};
/// callback [BindingTransformFunc](https://docs.gtk.org/gobject/callback.BindingTransformFunc.html)
pub const BindingTransformFunc = *const fn (_binding: *gobject.Binding, _from_value: *gobject.Value, _to_value: *gobject.Value, _user_data: ?*anyopaque) callconv(.c) bool;
/// Struct [BookmarkFile](https://docs.gtk.org/gobject/struct.BookmarkFile.html)
pub const BookmarkFile = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bookmark_file_get_type" });
        return cFn();
    }
};
/// callback [BoxedCopyFunc](https://docs.gtk.org/gobject/callback.BoxedCopyFunc.html)
pub const BoxedCopyFunc = *const fn (_boxed: *anyopaque) callconv(.c) *anyopaque;
/// callback [BoxedFreeFunc](https://docs.gtk.org/gobject/callback.BoxedFreeFunc.html)
pub const BoxedFreeFunc = *const fn (_boxed: *anyopaque) callconv(.c) void;
/// Struct [ByteArray](https://docs.gtk.org/gobject/struct.ByteArray.html)
pub const ByteArray = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_byte_array_get_type" });
        return cFn();
    }
};
/// Struct [Bytes](https://docs.gtk.org/gobject/struct.Bytes.html)
pub const Bytes = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_bytes_get_type" });
        return cFn();
    }
};
/// Struct [CClosure](https://docs.gtk.org/gobject/struct.CClosure.html)
pub const CClosure = extern struct {
    closure: gobject.Closure,
    callback: ?*anyopaque,
    /// type func [marshal_BOOLEAN__BOXED_BOXED](https://docs.gtk.org/gobject/type_func.CClosure.marshal_BOOLEAN__BOXED_BOXED.html)
    pub fn marshalBOOLEANBOXEDBOXED(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_BOOLEAN__BOXED_BOXED" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_BOOLEAN__FLAGS](https://docs.gtk.org/gobject/type_func.CClosure.marshal_BOOLEAN__FLAGS.html)
    pub fn marshalBOOLEANFLAGS(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_BOOLEAN__FLAGS" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_STRING__OBJECT_POINTER](https://docs.gtk.org/gobject/type_func.CClosure.marshal_STRING__OBJECT_POINTER.html)
    pub fn marshalSTRINGOBJECTPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_STRING__OBJECT_POINTER" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__BOOLEAN](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__BOOLEAN.html)
    pub fn marshalVOIDBOOLEAN(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__BOOLEAN" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__BOXED](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__BOXED.html)
    pub fn marshalVOIDBOXED(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__BOXED" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__CHAR](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__CHAR.html)
    pub fn marshalVOIDCHAR(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__CHAR" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__DOUBLE](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__DOUBLE.html)
    pub fn marshalVOIDDOUBLE(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__DOUBLE" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__ENUM](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__ENUM.html)
    pub fn marshalVOIDENUM(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__ENUM" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__FLAGS](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__FLAGS.html)
    pub fn marshalVOIDFLAGS(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__FLAGS" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__FLOAT](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__FLOAT.html)
    pub fn marshalVOIDFLOAT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__FLOAT" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__INT](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__INT.html)
    pub fn marshalVOIDINT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__INT" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__LONG](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__LONG.html)
    pub fn marshalVOIDLONG(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__LONG" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__OBJECT](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__OBJECT.html)
    pub fn marshalVOIDOBJECT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__OBJECT" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__PARAM](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__PARAM.html)
    pub fn marshalVOIDPARAM(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__PARAM" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__POINTER](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__POINTER.html)
    pub fn marshalVOIDPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__POINTER" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__STRING](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__STRING.html)
    pub fn marshalVOIDSTRING(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__STRING" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__UCHAR](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__UCHAR.html)
    pub fn marshalVOIDUCHAR(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UCHAR" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__UINT](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__UINT.html)
    pub fn marshalVOIDUINT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UINT" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__UINT_POINTER](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__UINT_POINTER.html)
    pub fn marshalVOIDUINTPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UINT_POINTER" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__ULONG](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__ULONG.html)
    pub fn marshalVOIDULONG(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__ULONG" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__VARIANT](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__VARIANT.html)
    pub fn marshalVOIDVARIANT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__VARIANT" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_VOID__VOID](https://docs.gtk.org/gobject/type_func.CClosure.marshal_VOID__VOID.html)
    pub fn marshalVOIDVOID(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__VOID" });
        const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
    /// type func [marshal_generic](https://docs.gtk.org/gobject/type_func.CClosure.marshal_generic.html)
    pub fn marshalGeneric(_closure: *gobject.Closure, _return_gvalue: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_generic" });
        const ret = cFn(_closure, _return_gvalue, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
        return ret;
    }
};
/// callback [Callback](https://docs.gtk.org/gobject/callback.Callback.html)
pub const Callback = *const fn () callconv(.c) void;
/// Struct [Checksum](https://docs.gtk.org/gobject/struct.Checksum.html)
pub const Checksum = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_checksum_get_type" });
        return cFn();
    }
};
/// callback [ClassFinalizeFunc](https://docs.gtk.org/gobject/callback.ClassFinalizeFunc.html)
pub const ClassFinalizeFunc = *const fn (_g_class: *gobject.TypeClass, _class_data: ?*anyopaque) callconv(.c) void;
/// callback [ClassInitFunc](https://docs.gtk.org/gobject/callback.ClassInitFunc.html)
pub const ClassInitFunc = *const fn (_g_class: *gobject.TypeClass, _class_data: ?*anyopaque) callconv(.c) void;
/// Struct [Closure](https://docs.gtk.org/gobject/struct.Closure.html)
pub const Closure = extern struct {
    ref_count: u32,
    meta_marshal_nouse: u32,
    n_guards: u32,
    n_fnotifiers: u32,
    n_inotifiers: u32,
    in_inotify: u32,
    floating: u32,
    derivative_flag: u32,
    in_marshal: u32,
    is_invalid: u32,
    marshal: ?*const fn (_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: *anyopaque, _marshal_data: *anyopaque) callconv(.c) void,
    data: ?*anyopaque,
    notifiers: ?*gobject.ClosureNotifyData,
    /// ctor [new_object](https://docs.gtk.org/gobject/ctor.Closure.new_object.html)
    pub fn newObject(_sizeof_closure: u32, _object: *gobject.Object) *Closure {
        const cFn = @extern(*const fn (u32, *gobject.Object) callconv(.c) *Closure, .{ .name = "g_closure_new_object" });
        const ret = cFn(_sizeof_closure, _object);
        return ret;
    }
    /// ctor [new_simple](https://docs.gtk.org/gobject/ctor.Closure.new_simple.html)
    pub fn newSimple(_sizeof_closure: u32, _data: ?*anyopaque) *Closure {
        const cFn = @extern(*const fn (u32, ?*anyopaque) callconv(.c) *Closure, .{ .name = "g_closure_new_simple" });
        const ret = cFn(_sizeof_closure, @ptrCast(_data));
        return ret;
    }
    /// method [invalidate](https://docs.gtk.org/gobject/method.Closure.invalidate.html)
    pub fn invalidate(self: *Closure) void {
        const cFn = @extern(*const fn (*Closure) callconv(.c) void, .{ .name = "g_closure_invalidate" });
        const ret = cFn(self);
        return ret;
    }
    /// method [invoke](https://docs.gtk.org/gobject/method.Closure.invoke.html)
    pub fn invoke(self: *Closure, _return_value: ?*gobject.Value, _param_valuess: []gobject.Value, _invocation_hint: ?*anyopaque) void {
        const _n_param_values: u32 = @intCast(_param_valuess.len);
        const _param_values = _param_valuess.ptr;
        const cFn = @extern(*const fn (*Closure, ?*gobject.Value, u32, [*]gobject.Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_closure_invoke" });
        const ret = cFn(self, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint));
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gobject/method.Closure.ref.html)
    pub fn ref(self: *Closure) *gobject.Closure {
        const cFn = @extern(*const fn (*Closure) callconv(.c) *gobject.Closure, .{ .name = "g_closure_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [sink](https://docs.gtk.org/gobject/method.Closure.sink.html)
    pub fn sink(self: *Closure) void {
        const cFn = @extern(*const fn (*Closure) callconv(.c) void, .{ .name = "g_closure_sink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gobject/method.Closure.unref.html)
    pub fn unref(self: *Closure) void {
        const cFn = @extern(*const fn (*Closure) callconv(.c) void, .{ .name = "g_closure_unref" });
        const ret = cFn(self);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_closure_get_type" });
        return cFn();
    }
};
/// callback [ClosureMarshal](https://docs.gtk.org/gobject/callback.ClosureMarshal.html)
pub const ClosureMarshal = *const fn (_closure: *gobject.Closure, _return_value: ?*gobject.Value, _n_param_values: u32, _param_values: [*]gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) callconv(.c) void;
/// callback [ClosureNotify](https://docs.gtk.org/gobject/callback.ClosureNotify.html)
pub const ClosureNotify = *const fn (_data: ?*anyopaque, _closure: *gobject.Closure) callconv(.c) void;
/// Struct [ClosureNotifyData](https://docs.gtk.org/gobject/struct.ClosureNotifyData.html)
pub const ClosureNotifyData = extern struct {
    data: ?*anyopaque,
    notify: ?*const fn (_data: ?*anyopaque, _closure: *gobject.Closure) callconv(.c) void,
};
/// Flags [ConnectFlags](https://docs.gtk.org/gobject/flags.ConnectFlags.html)
pub const ConnectFlags = packed struct(u32) {
    after: bool = false,
    swapped: bool = false,
    _: u30 = 0,
};
/// Struct [Date](https://docs.gtk.org/gobject/struct.Date.html)
pub const Date = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_date_get_type" });
        return cFn();
    }
};
/// Struct [DateTime](https://docs.gtk.org/gobject/struct.DateTime.html)
pub const DateTime = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_date_time_get_type" });
        return cFn();
    }
};
/// Struct [Dir](https://docs.gtk.org/gobject/struct.Dir.html)
pub const Dir = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_dir_get_type" });
        return cFn();
    }
};
/// Struct [EnumClass](https://docs.gtk.org/gobject/struct.EnumClass.html)
pub const EnumClass = extern struct {
    g_type_class: gobject.TypeClass,
    minimum: i32,
    maximum: i32,
    n_values: u32,
    values: ?*gobject.EnumValue,
};
/// Struct [EnumValue](https://docs.gtk.org/gobject/struct.EnumValue.html)
pub const EnumValue = extern struct {
    value: i32,
    value_name: ?[*:0]const u8,
    value_nick: ?[*:0]const u8,
};
/// Struct [Error](https://docs.gtk.org/gobject/struct.Error.html)
pub const Error = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_error_get_type" });
        return cFn();
    }
};
/// Struct [FlagsClass](https://docs.gtk.org/gobject/struct.FlagsClass.html)
pub const FlagsClass = extern struct {
    g_type_class: gobject.TypeClass,
    mask: u32,
    n_values: u32,
    values: ?*gobject.FlagsValue,
};
/// Struct [FlagsValue](https://docs.gtk.org/gobject/struct.FlagsValue.html)
pub const FlagsValue = extern struct {
    value: u32,
    value_name: ?[*:0]const u8,
    value_nick: ?[*:0]const u8,
};
/// Struct [HashTable](https://docs.gtk.org/gobject/struct.HashTable.html)
pub const HashTable = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_hash_table_get_type" });
        return cFn();
    }
};
/// Struct [Hmac](https://docs.gtk.org/gobject/struct.Hmac.html)
pub const Hmac = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_hmac_get_type" });
        return cFn();
    }
};
/// Struct [IOChannel](https://docs.gtk.org/gobject/struct.IOChannel.html)
pub const IOChannel = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_channel_get_type" });
        return cFn();
    }
};
/// Flags [IOCondition](https://docs.gtk.org/gobject/flags.IOCondition.html)
pub const IOCondition = packed struct(u32) {
    in: bool = false,
    pri: bool = false,
    out: bool = false,
    err: bool = false,
    hup: bool = false,
    nval: bool = false,
    _: u26 = 0,
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_io_condition_get_type" });
        return cFn();
    }
};
/// Class [InitiallyUnowned](https://docs.gtk.org/gobject/class.InitiallyUnowned.html)
pub const InitiallyUnowned = extern struct {
    g_type_instance: gobject.TypeInstance,
    ref_count: u32,
    qdata: ?*glib.Data,
    pub const Parent = gobject.Object;
    pub const Class = gobject.InitiallyUnownedClass;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_initially_unowned_get_type" });
        return cFn();
    }
};
pub const InitiallyUnownedClass = extern struct {
    g_type_class: gobject.TypeClass,
    construct_properties: ?*core.SList,
    constructor: ?*anyopaque,
    set_property: ?*const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    get_property: ?*const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    dispose: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    finalize: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    dispatch_properties_changed: ?*const fn (_object: *gobject.Object, _n_pspecs: u32, _pspecs: *gobject.ParamSpec) callconv(.c) void,
    notify: ?*const fn (_object: *gobject.Object, _pspec: *gobject.ParamSpec) callconv(.c) void,
    constructed: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    flags: u64,
    n_construct_properties: u64,
    pspecs: ?*anyopaque,
    n_pspecs: u64,
    pdummy: [3]?*anyopaque,
};
/// callback [InstanceInitFunc](https://docs.gtk.org/gobject/callback.InstanceInitFunc.html)
pub const InstanceInitFunc = *const fn (_instance: *gobject.TypeInstance, _g_class: *gobject.TypeClass) callconv(.c) void;
/// callback [InterfaceFinalizeFunc](https://docs.gtk.org/gobject/callback.InterfaceFinalizeFunc.html)
pub const InterfaceFinalizeFunc = *const fn (_g_iface: *gobject.TypeInterface, _iface_data: ?*anyopaque) callconv(.c) void;
/// Struct [InterfaceInfo](https://docs.gtk.org/gobject/struct.InterfaceInfo.html)
pub const InterfaceInfo = extern struct {
    interface_init: ?*const fn (_g_iface: *gobject.TypeInterface, _iface_data: ?*anyopaque) callconv(.c) void,
    interface_finalize: ?*const fn (_g_iface: *gobject.TypeInterface, _iface_data: ?*anyopaque) callconv(.c) void,
    interface_data: ?*anyopaque,
};
/// callback [InterfaceInitFunc](https://docs.gtk.org/gobject/callback.InterfaceInitFunc.html)
pub const InterfaceInitFunc = *const fn (_g_iface: *gobject.TypeInterface, _iface_data: ?*anyopaque) callconv(.c) void;
/// Struct [KeyFile](https://docs.gtk.org/gobject/struct.KeyFile.html)
pub const KeyFile = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_key_file_get_type" });
        return cFn();
    }
};
/// Struct [MainContext](https://docs.gtk.org/gobject/struct.MainContext.html)
pub const MainContext = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_main_context_get_type" });
        return cFn();
    }
};
/// Struct [MainLoop](https://docs.gtk.org/gobject/struct.MainLoop.html)
pub const MainLoop = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_main_loop_get_type" });
        return cFn();
    }
};
/// Struct [MappedFile](https://docs.gtk.org/gobject/struct.MappedFile.html)
pub const MappedFile = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_mapped_file_get_type" });
        return cFn();
    }
};
/// Struct [MarkupParseContext](https://docs.gtk.org/gobject/struct.MarkupParseContext.html)
pub const MarkupParseContext = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_markup_parse_context_get_type" });
        return cFn();
    }
};
/// Struct [MatchInfo](https://docs.gtk.org/gobject/struct.MatchInfo.html)
pub const MatchInfo = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_match_info_get_type" });
        return cFn();
    }
};
/// Class [Object](https://docs.gtk.org/gobject/class.Object.html)
pub const Object = extern struct {
    g_type_instance: gobject.TypeInstance,
    ref_count: u32,
    qdata: ?*glib.Data,
    pub const Class = gobject.ObjectClass;
    /// Deprecated:
    /// ctor [newv](https://docs.gtk.org/gobject/ctor.Object.newv.html)
    pub const newv = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn newv(_object_type: core.Type, _parameterss: []gobject.Parameter) *Object {
            const _n_parameters: u32 = @intCast(_parameterss.len);
            const _parameters = _parameterss.ptr;
            const cFn = @extern(*const fn (core.Type, u32, [*]gobject.Parameter) callconv(.c) *Object, .{ .name = "g_object_newv" });
            const ret = cFn(_object_type, _n_parameters, _parameters);
            return ret;
        }
    }.newv;
    /// type func [compat_control](https://docs.gtk.org/gobject/type_func.Object.compat_control.html)
    pub fn compatControl(_what: u64, _data: ?*anyopaque) u64 {
        const cFn = @extern(*const fn (u64, ?*anyopaque) callconv(.c) u64, .{ .name = "g_object_compat_control" });
        const ret = cFn(_what, @ptrCast(_data));
        return ret;
    }
    /// type func [interface_find_property](https://docs.gtk.org/gobject/type_func.Object.interface_find_property.html)
    pub fn interfaceFindProperty(_g_iface: *gobject.TypeInterface, _property_name: [*:0]const u8) *gobject.ParamSpec {
        const cFn = @extern(*const fn (*gobject.TypeInterface, [*:0]const u8) callconv(.c) *gobject.ParamSpec, .{ .name = "g_object_interface_find_property" });
        const ret = cFn(_g_iface, _property_name);
        return ret;
    }
    /// type func [interface_install_property](https://docs.gtk.org/gobject/type_func.Object.interface_install_property.html)
    pub fn interfaceInstallProperty(_g_iface: *gobject.TypeInterface, _pspec: *gobject.ParamSpec) void {
        const cFn = @extern(*const fn (*gobject.TypeInterface, *gobject.ParamSpec) callconv(.c) void, .{ .name = "g_object_interface_install_property" });
        const ret = cFn(_g_iface, _pspec);
        return ret;
    }
    /// type func [interface_list_properties](https://docs.gtk.org/gobject/type_func.Object.interface_list_properties.html)
    pub fn interfaceListProperties(_g_iface: *gobject.TypeInterface) struct {
        ret: [*]*gobject.ParamSpec,
        n_properties_p: u32,
    } {
        var n_properties_p_out: u32 = undefined;
        const _n_properties_p = &n_properties_p_out;
        const cFn = @extern(*const fn (*gobject.TypeInterface, *u32) callconv(.c) [*]*gobject.ParamSpec, .{ .name = "g_object_interface_list_properties" });
        const ret = cFn(_g_iface, _n_properties_p);
        return .{ .ret = ret, .n_properties_p = n_properties_p_out };
    }
    /// method [bind_property](https://docs.gtk.org/gobject/method.Object.bind_property.html)
    pub fn bindProperty(self: *Object, _source_property: [*:0]const u8, _target: *gobject.Object, _target_property: [*:0]const u8, _flags: gobject.BindingFlags) *gobject.Binding {
        const cFn = @extern(*const fn (*Object, [*:0]const u8, *gobject.Object, [*:0]const u8, gobject.BindingFlags) callconv(.c) *gobject.Binding, .{ .name = "g_object_bind_property" });
        const ret = cFn(self, _source_property, _target, _target_property, _flags);
        return ret;
    }
    /// method [bind_property_full](https://docs.gtk.org/gobject/method.Object.bind_property_full.html)
    pub fn bindPropertyFull(self: *Object, _source_property: [*:0]const u8, _target: *gobject.Object, _target_property: [*:0]const u8, _flags: gobject.BindingFlags, _transform_to: *gobject.Closure, _transform_from: *gobject.Closure) *gobject.Binding {
        const cFn = @extern(*const fn (*Object, [*:0]const u8, *gobject.Object, [*:0]const u8, gobject.BindingFlags, *gobject.Closure, *gobject.Closure) callconv(.c) *gobject.Binding, .{ .name = "g_object_bind_property_with_closures" });
        const ret = cFn(self, _source_property, _target, _target_property, _flags, _transform_to, _transform_from);
        return ret;
    }
    /// method [force_floating](https://docs.gtk.org/gobject/method.Object.force_floating.html)
    pub fn forceFloating(self: *Object) void {
        const cFn = @extern(*const fn (*Object) callconv(.c) void, .{ .name = "g_object_force_floating" });
        const ret = cFn(self);
        return ret;
    }
    /// method [freeze_notify](https://docs.gtk.org/gobject/method.Object.freeze_notify.html)
    pub fn freezeNotify(self: *Object) void {
        const cFn = @extern(*const fn (*Object) callconv(.c) void, .{ .name = "g_object_freeze_notify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_data](https://docs.gtk.org/gobject/method.Object.get_data.html)
    pub fn getData(self: *Object, _key: [*:0]const u8) ?*anyopaque {
        const cFn = @extern(*const fn (*Object, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_object_get_data" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [get_property](https://docs.gtk.org/gobject/method.Object.get_property.html)
    pub fn getProperty(self: *Object, _property_name: [*:0]const u8, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (*Object, [*:0]const u8, *gobject.Value) callconv(.c) void, .{ .name = "g_object_get_property" });
        const ret = cFn(self, _property_name, _value);
        return ret;
    }
    /// method [get_qdata](https://docs.gtk.org/gobject/method.Object.get_qdata.html)
    pub fn getQdata(self: *Object, _quark: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*Object, u32) callconv(.c) ?*anyopaque, .{ .name = "g_object_get_qdata" });
        const ret = cFn(self, _quark);
        return ret;
    }
    /// method [getv](https://docs.gtk.org/gobject/method.Object.getv.html)
    pub fn getv(self: *Object, _namess: [][*:0]const u8, _valuess: []gobject.Value) void {
        const _n_properties: u32 = @intCast(_namess.len);
        const _names = _namess.ptr;
        const _values = _valuess.ptr;
        const cFn = @extern(*const fn (*Object, u32, [*][*:0]const u8, [*]gobject.Value) callconv(.c) void, .{ .name = "g_object_getv" });
        const ret = cFn(self, _n_properties, _names, _values);
        return ret;
    }
    /// method [is_floating](https://docs.gtk.org/gobject/method.Object.is_floating.html)
    pub fn isFloating(self: *Object) bool {
        const cFn = @extern(*const fn (*Object) callconv(.c) bool, .{ .name = "g_object_is_floating" });
        const ret = cFn(self);
        return ret;
    }
    /// method [notify](https://docs.gtk.org/gobject/method.Object.notify.html)
    pub fn notify(self: *Object, _property_name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*Object, [*:0]const u8) callconv(.c) void, .{ .name = "g_object_notify" });
        const ret = cFn(self, _property_name);
        return ret;
    }
    /// method [notify_by_pspec](https://docs.gtk.org/gobject/method.Object.notify_by_pspec.html)
    pub fn notifyByPspec(self: *Object, _pspec: *gobject.ParamSpec) void {
        const cFn = @extern(*const fn (*Object, *gobject.ParamSpec) callconv(.c) void, .{ .name = "g_object_notify_by_pspec" });
        const ret = cFn(self, _pspec);
        return ret;
    }
    /// method [ref](https://docs.gtk.org/gobject/method.Object.ref.html)
    pub fn ref(self: *Object) *gobject.Object {
        const cFn = @extern(*const fn (*Object) callconv(.c) *gobject.Object, .{ .name = "g_object_ref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [ref_sink](https://docs.gtk.org/gobject/method.Object.ref_sink.html)
    pub fn refSink(self: *Object) *gobject.Object {
        const cFn = @extern(*const fn (*Object) callconv(.c) *gobject.Object, .{ .name = "g_object_ref_sink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [run_dispose](https://docs.gtk.org/gobject/method.Object.run_dispose.html)
    pub fn runDispose(self: *Object) void {
        const cFn = @extern(*const fn (*Object) callconv(.c) void, .{ .name = "g_object_run_dispose" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_data](https://docs.gtk.org/gobject/method.Object.set_data.html)
    pub fn setData(self: *Object, _key: [*:0]const u8, _data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Object, [*:0]const u8, ?*anyopaque) callconv(.c) void, .{ .name = "g_object_set_data" });
        const ret = cFn(self, _key, @ptrCast(_data));
        return ret;
    }
    /// method [set_property](https://docs.gtk.org/gobject/method.Object.set_property.html)
    pub fn setProperty(self: *Object, _property_name: [*:0]const u8, _value: *gobject.Value) void {
        const cFn = @extern(*const fn (*Object, [*:0]const u8, *gobject.Value) callconv(.c) void, .{ .name = "g_object_set_property" });
        const ret = cFn(self, _property_name, _value);
        return ret;
    }
    /// method [steal_data](https://docs.gtk.org/gobject/method.Object.steal_data.html)
    pub fn stealData(self: *Object, _key: [*:0]const u8) ?*anyopaque {
        const cFn = @extern(*const fn (*Object, [*:0]const u8) callconv(.c) ?*anyopaque, .{ .name = "g_object_steal_data" });
        const ret = cFn(self, _key);
        return ret;
    }
    /// method [steal_qdata](https://docs.gtk.org/gobject/method.Object.steal_qdata.html)
    pub fn stealQdata(self: *Object, _quark: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*Object, u32) callconv(.c) ?*anyopaque, .{ .name = "g_object_steal_qdata" });
        const ret = cFn(self, _quark);
        return ret;
    }
    /// method [thaw_notify](https://docs.gtk.org/gobject/method.Object.thaw_notify.html)
    pub fn thawNotify(self: *Object) void {
        const cFn = @extern(*const fn (*Object) callconv(.c) void, .{ .name = "g_object_thaw_notify" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gobject/method.Object.unref.html)
    pub fn unref(self: *Object) void {
        const cFn = @extern(*const fn (*Object) callconv(.c) void, .{ .name = "g_object_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// method [watch_closure](https://docs.gtk.org/gobject/method.Object.watch_closure.html)
    pub fn watchClosure(self: *Object, _closure: *gobject.Closure) void {
        const cFn = @extern(*const fn (*Object, *gobject.Closure) callconv(.c) void, .{ .name = "g_object_watch_closure" });
        const ret = cFn(self, _closure);
        return ret;
    }
    /// vfunc [constructed](https://docs.gtk.org/gobject/vfunc.Object.constructed.html)
    pub fn constructedV(self: *Object) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.constructed.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [dispatch_properties_changed](https://docs.gtk.org/gobject/vfunc.Object.dispatch_properties_changed.html)
    pub fn dispatchPropertiesChangedV(self: *Object, _n_pspecs: u32, _pspecs: *gobject.ParamSpec) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dispatch_properties_changed.?;
        const ret = vFn(self, _n_pspecs, _pspecs);
        return ret;
    }
    /// vfunc [dispose](https://docs.gtk.org/gobject/vfunc.Object.dispose.html)
    pub fn disposeV(self: *Object) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.dispose.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [finalize](https://docs.gtk.org/gobject/vfunc.Object.finalize.html)
    pub fn finalizeV(self: *Object) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.finalize.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [get_property](https://docs.gtk.org/gobject/vfunc.Object.get_property.html)
    pub fn getPropertyV(self: *Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.get_property.?;
        const ret = vFn(self, _property_id, _value, _pspec);
        return ret;
    }
    /// vfunc [notify](https://docs.gtk.org/gobject/vfunc.Object.notify.html)
    pub fn notifyV(self: *Object, _pspec: *gobject.ParamSpec) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.notify.?;
        const ret = vFn(self, _pspec);
        return ret;
    }
    /// vfunc [set_property](https://docs.gtk.org/gobject/vfunc.Object.set_property.html)
    pub fn setPropertyV(self: *Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) void {
        const class: *ObjectClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.set_property.?;
        const ret = vFn(self, _property_id, _value, _pspec);
        return ret;
    }
    /// signal [notify](https://docs.gtk.org/gobject/signal.Object.notify.html)
    pub fn connectNotify(self: *Object, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("notify", handler, args, flags, &.{ void, *Object, *gobject.ParamSpec });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_object_get_type" });
        return cFn();
    }
};
pub const ObjectClass = extern struct {
    g_type_class: gobject.TypeClass,
    construct_properties: ?*core.SList,
    constructor: ?*anyopaque,
    set_property: ?*const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    get_property: ?*const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void,
    dispose: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    finalize: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    dispatch_properties_changed: ?*const fn (_object: *gobject.Object, _n_pspecs: u32, _pspecs: *gobject.ParamSpec) callconv(.c) void,
    notify: ?*const fn (_object: *gobject.Object, _pspec: *gobject.ParamSpec) callconv(.c) void,
    constructed: ?*const fn (_object: *gobject.Object) callconv(.c) void,
    flags: u64,
    n_construct_properties: u64,
    pspecs: ?*anyopaque,
    n_pspecs: u64,
    pdummy: [3]?*anyopaque,
    /// class method [find_property](https://docs.gtk.org/gobject/class_method.ObjectClass.find_property.html)
    pub fn findProperty(self: *ObjectClass, _property_name: [*:0]const u8) *gobject.ParamSpec {
        const cFn = @extern(*const fn (*ObjectClass, [*:0]const u8) callconv(.c) *gobject.ParamSpec, .{ .name = "g_object_class_find_property" });
        const ret = cFn(self, _property_name);
        return ret;
    }
    /// class method [install_properties](https://docs.gtk.org/gobject/class_method.ObjectClass.install_properties.html)
    pub fn installProperties(self: *ObjectClass, _pspecss: []*gobject.ParamSpec) void {
        const _n_pspecs: u32 = @intCast(_pspecss.len);
        const _pspecs = _pspecss.ptr;
        const cFn = @extern(*const fn (*ObjectClass, u32, [*]*gobject.ParamSpec) callconv(.c) void, .{ .name = "g_object_class_install_properties" });
        const ret = cFn(self, _n_pspecs, _pspecs);
        return ret;
    }
    /// class method [install_property](https://docs.gtk.org/gobject/class_method.ObjectClass.install_property.html)
    pub fn installProperty(self: *ObjectClass, _property_id: u32, _pspec: *gobject.ParamSpec) void {
        const cFn = @extern(*const fn (*ObjectClass, u32, *gobject.ParamSpec) callconv(.c) void, .{ .name = "g_object_class_install_property" });
        const ret = cFn(self, _property_id, _pspec);
        return ret;
    }
    /// class method [list_properties](https://docs.gtk.org/gobject/class_method.ObjectClass.list_properties.html)
    pub fn listProperties(self: *ObjectClass) struct {
        ret: [*]*gobject.ParamSpec,
        n_properties: u32,
    } {
        var n_properties_out: u32 = undefined;
        const _n_properties = &n_properties_out;
        const cFn = @extern(*const fn (*ObjectClass, *u32) callconv(.c) [*]*gobject.ParamSpec, .{ .name = "g_object_class_list_properties" });
        const ret = cFn(self, _n_properties);
        return .{ .ret = ret, .n_properties = n_properties_out };
    }
    /// class method [override_property](https://docs.gtk.org/gobject/class_method.ObjectClass.override_property.html)
    pub fn overrideProperty(self: *ObjectClass, _property_id: u32, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*ObjectClass, u32, [*:0]const u8) callconv(.c) void, .{ .name = "g_object_class_override_property" });
        const ret = cFn(self, _property_id, _name);
        return ret;
    }
};
/// Struct [ObjectConstructParam](https://docs.gtk.org/gobject/struct.ObjectConstructParam.html)
pub const ObjectConstructParam = extern struct {
    pspec: ?*gobject.ParamSpec,
    value: ?*gobject.Value,
};
/// callback [ObjectFinalizeFunc](https://docs.gtk.org/gobject/callback.ObjectFinalizeFunc.html)
pub const ObjectFinalizeFunc = *const fn (_object: *gobject.Object) callconv(.c) void;
/// callback [ObjectGetPropertyFunc](https://docs.gtk.org/gobject/callback.ObjectGetPropertyFunc.html)
pub const ObjectGetPropertyFunc = *const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void;
/// callback [ObjectSetPropertyFunc](https://docs.gtk.org/gobject/callback.ObjectSetPropertyFunc.html)
pub const ObjectSetPropertyFunc = *const fn (_object: *gobject.Object, _property_id: u32, _value: *gobject.Value, _pspec: *gobject.ParamSpec) callconv(.c) void;
/// Struct [OptionGroup](https://docs.gtk.org/gobject/struct.OptionGroup.html)
pub const OptionGroup = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_option_group_get_type" });
        return cFn();
    }
};
/// const [PARAM_MASK](https://docs.gtk.org/gobject/const.PARAM_MASK.html)
pub const PARAM_MASK = 255;
/// const [PARAM_STATIC_STRINGS](https://docs.gtk.org/gobject/const.PARAM_STATIC_STRINGS.html)
pub const PARAM_STATIC_STRINGS = 224;
/// const [PARAM_USER_SHIFT](https://docs.gtk.org/gobject/const.PARAM_USER_SHIFT.html)
pub const PARAM_USER_SHIFT = 8;
/// Flags [ParamFlags](https://docs.gtk.org/gobject/flags.ParamFlags.html)
pub const ParamFlags = packed struct(u32) {
    readable: bool = false,
    writable: bool = false,
    construct: bool = false,
    construct_only: bool = false,
    lax_validation: bool = false,
    static_name: bool = false,
    static_nick: bool = false,
    static_blurb: bool = false,
    _8: u22 = 0,
    explicit_notify: bool = false,
    deprecated: bool = false,
    pub const readwrite: @This() = @bitCast(@as(u32, 3));
};
/// Class [ParamSpec](https://docs.gtk.org/gobject/class.ParamSpec.html)
pub const ParamSpec = extern struct {
    g_type_instance: gobject.TypeInstance,
    name: ?[*:0]const u8,
    flags: gobject.ParamFlags,
    value_type: core.Type,
    owner_type: core.Type,
    _nick: ?[*:0]const u8,
    _blurb: ?[*:0]const u8,
    qdata: ?*glib.Data,
    ref_count: u32,
    param_id: u32,
    pub const Class = gobject.ParamSpecClass;
    /// type func [is_valid_name](https://docs.gtk.org/gobject/type_func.ParamSpec.is_valid_name.html)
    pub fn isValidName(_name: [*:0]const u8) bool {
        const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_param_spec_is_valid_name" });
        const ret = cFn(_name);
        return ret;
    }
    /// method [get_blurb](https://docs.gtk.org/gobject/method.ParamSpec.get_blurb.html)
    pub fn getBlurb(self: *ParamSpec) ?[*:0]u8 {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) ?[*:0]u8, .{ .name = "g_param_spec_get_blurb" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_default_value](https://docs.gtk.org/gobject/method.ParamSpec.get_default_value.html)
    pub fn getDefaultValue(self: *ParamSpec) *gobject.Value {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) *gobject.Value, .{ .name = "g_param_spec_get_default_value" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name](https://docs.gtk.org/gobject/method.ParamSpec.get_name.html)
    pub fn getName(self: *ParamSpec) [*:0]u8 {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) [*:0]u8, .{ .name = "g_param_spec_get_name" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_name_quark](https://docs.gtk.org/gobject/method.ParamSpec.get_name_quark.html)
    pub fn getNameQuark(self: *ParamSpec) u32 {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) u32, .{ .name = "g_param_spec_get_name_quark" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_nick](https://docs.gtk.org/gobject/method.ParamSpec.get_nick.html)
    pub fn getNick(self: *ParamSpec) [*:0]u8 {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) [*:0]u8, .{ .name = "g_param_spec_get_nick" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_qdata](https://docs.gtk.org/gobject/method.ParamSpec.get_qdata.html)
    pub fn getQdata(self: *ParamSpec, _quark: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*ParamSpec, u32) callconv(.c) ?*anyopaque, .{ .name = "g_param_spec_get_qdata" });
        const ret = cFn(self, _quark);
        return ret;
    }
    /// method [get_redirect_target](https://docs.gtk.org/gobject/method.ParamSpec.get_redirect_target.html)
    pub fn getRedirectTarget(self: *ParamSpec) ?*gobject.ParamSpec {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) ?*gobject.ParamSpec, .{ .name = "g_param_spec_get_redirect_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_qdata](https://docs.gtk.org/gobject/method.ParamSpec.set_qdata.html)
    pub fn setQdata(self: *ParamSpec, _quark: u32, _data: ?*anyopaque) void {
        const cFn = @extern(*const fn (*ParamSpec, u32, ?*anyopaque) callconv(.c) void, .{ .name = "g_param_spec_set_qdata" });
        const ret = cFn(self, _quark, @ptrCast(_data));
        return ret;
    }
    /// method [sink](https://docs.gtk.org/gobject/method.ParamSpec.sink.html)
    pub fn sink(self: *ParamSpec) void {
        const cFn = @extern(*const fn (*ParamSpec) callconv(.c) void, .{ .name = "g_param_spec_sink" });
        const ret = cFn(self);
        return ret;
    }
    /// method [steal_qdata](https://docs.gtk.org/gobject/method.ParamSpec.steal_qdata.html)
    pub fn stealQdata(self: *ParamSpec, _quark: u32) ?*anyopaque {
        const cFn = @extern(*const fn (*ParamSpec, u32) callconv(.c) ?*anyopaque, .{ .name = "g_param_spec_steal_qdata" });
        const ret = cFn(self, _quark);
        return ret;
    }
    /// vfunc [finalize](https://docs.gtk.org/gobject/vfunc.ParamSpec.finalize.html)
    pub fn finalizeV(self: *ParamSpec) void {
        const class: *ParamSpecClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.finalize.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [value_is_valid](https://docs.gtk.org/gobject/vfunc.ParamSpec.value_is_valid.html)
    pub fn valueIsValidV(self: *ParamSpec, _value: *gobject.Value) bool {
        const class: *ParamSpecClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_is_valid.?;
        const ret = vFn(self, _value);
        return ret;
    }
    /// vfunc [value_set_default](https://docs.gtk.org/gobject/vfunc.ParamSpec.value_set_default.html)
    pub fn valueSetDefaultV(self: *ParamSpec, _value: *gobject.Value) void {
        const class: *ParamSpecClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_set_default.?;
        const ret = vFn(self, _value);
        return ret;
    }
    /// vfunc [value_validate](https://docs.gtk.org/gobject/vfunc.ParamSpec.value_validate.html)
    pub fn valueValidateV(self: *ParamSpec, _value: *gobject.Value) bool {
        const class: *ParamSpecClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.value_validate.?;
        const ret = vFn(self, _value);
        return ret;
    }
    /// vfunc [values_cmp](https://docs.gtk.org/gobject/vfunc.ParamSpec.values_cmp.html)
    pub fn valuesCmpV(self: *ParamSpec, _value1: *gobject.Value, _value2: *gobject.Value) i32 {
        const class: *ParamSpecClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.values_cmp.?;
        const ret = vFn(self, _value1, _value2);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        return @enumFromInt(76);
    }
};
/// Class [ParamSpecBoolean](https://docs.gtk.org/gobject/class.ParamSpecBoolean.html)
pub const ParamSpecBoolean = extern struct {
    parent_instance: gobject.ParamSpec,
    default_value: bool,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[2];
    }
};
/// Class [ParamSpecBoxed](https://docs.gtk.org/gobject/class.ParamSpecBoxed.html)
pub const ParamSpecBoxed = extern struct {
    parent_instance: gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[16];
    }
};
/// Class [ParamSpecChar](https://docs.gtk.org/gobject/class.ParamSpecChar.html)
pub const ParamSpecChar = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: i8,
    maximum: i8,
    default_value: i8,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[0];
    }
};
pub const ParamSpecClass = extern struct {
    g_type_class: gobject.TypeClass,
    value_type: core.Type,
    finalize: ?*const fn (_pspec: *gobject.ParamSpec) callconv(.c) void,
    value_set_default: ?*const fn (_pspec: *gobject.ParamSpec, _value: *gobject.Value) callconv(.c) void,
    value_validate: ?*const fn (_pspec: *gobject.ParamSpec, _value: *gobject.Value) callconv(.c) bool,
    values_cmp: ?*const fn (_pspec: *gobject.ParamSpec, _value1: *gobject.Value, _value2: *gobject.Value) callconv(.c) i32,
    value_is_valid: ?*const fn (_pspec: *gobject.ParamSpec, _value: *gobject.Value) callconv(.c) bool,
    dummy: [3]?*anyopaque,
};
/// Class [ParamSpecDouble](https://docs.gtk.org/gobject/class.ParamSpecDouble.html)
pub const ParamSpecDouble = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: f64,
    maximum: f64,
    default_value: f64,
    epsilon: f64,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[13];
    }
};
/// Class [ParamSpecEnum](https://docs.gtk.org/gobject/class.ParamSpecEnum.html)
pub const ParamSpecEnum = extern struct {
    parent_instance: gobject.ParamSpec,
    enum_class: ?*gobject.EnumClass,
    default_value: i32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[10];
    }
};
/// Class [ParamSpecFlags](https://docs.gtk.org/gobject/class.ParamSpecFlags.html)
pub const ParamSpecFlags = extern struct {
    parent_instance: gobject.ParamSpec,
    flags_class: ?*gobject.FlagsClass,
    default_value: u32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[11];
    }
};
/// Class [ParamSpecFloat](https://docs.gtk.org/gobject/class.ParamSpecFloat.html)
pub const ParamSpecFloat = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: f32,
    maximum: f32,
    default_value: f32,
    epsilon: f32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[12];
    }
};
/// Class [ParamSpecGType](https://docs.gtk.org/gobject/class.ParamSpecGType.html)
pub const ParamSpecGType = extern struct {
    parent_instance: gobject.ParamSpec,
    is_a_type: core.Type,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[21];
    }
};
/// Class [ParamSpecInt](https://docs.gtk.org/gobject/class.ParamSpecInt.html)
pub const ParamSpecInt = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: i32,
    maximum: i32,
    default_value: i32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[3];
    }
};
/// Class [ParamSpecInt64](https://docs.gtk.org/gobject/class.ParamSpecInt64.html)
pub const ParamSpecInt64 = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: i64,
    maximum: i64,
    default_value: i64,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[7];
    }
};
/// Class [ParamSpecLong](https://docs.gtk.org/gobject/class.ParamSpecLong.html)
pub const ParamSpecLong = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: i64,
    maximum: i64,
    default_value: i64,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[5];
    }
};
/// Class [ParamSpecObject](https://docs.gtk.org/gobject/class.ParamSpecObject.html)
pub const ParamSpecObject = extern struct {
    parent_instance: gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[19];
    }
};
/// Class [ParamSpecOverride](https://docs.gtk.org/gobject/class.ParamSpecOverride.html)
pub const ParamSpecOverride = extern struct {
    parent_instance: gobject.ParamSpec,
    overridden: ?*gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[20];
    }
};
/// Class [ParamSpecParam](https://docs.gtk.org/gobject/class.ParamSpecParam.html)
pub const ParamSpecParam = extern struct {
    parent_instance: gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[15];
    }
};
/// Class [ParamSpecPointer](https://docs.gtk.org/gobject/class.ParamSpecPointer.html)
pub const ParamSpecPointer = extern struct {
    parent_instance: gobject.ParamSpec,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[17];
    }
};
/// Struct [ParamSpecPool](https://docs.gtk.org/gobject/struct.ParamSpecPool.html)
pub const ParamSpecPool = opaque {
    /// method [free](https://docs.gtk.org/gobject/method.ParamSpecPool.free.html)
    pub fn free(self: *ParamSpecPool) void {
        const cFn = @extern(*const fn (*ParamSpecPool) callconv(.c) void, .{ .name = "g_param_spec_pool_free" });
        const ret = cFn(self);
        return ret;
    }
    /// method [insert](https://docs.gtk.org/gobject/method.ParamSpecPool.insert.html)
    pub fn insert(self: *ParamSpecPool, _pspec: *gobject.ParamSpec, _owner_type: core.Type) void {
        const cFn = @extern(*const fn (*ParamSpecPool, *gobject.ParamSpec, core.Type) callconv(.c) void, .{ .name = "g_param_spec_pool_insert" });
        const ret = cFn(self, _pspec, _owner_type);
        return ret;
    }
    /// method [list](https://docs.gtk.org/gobject/method.ParamSpecPool.list.html)
    pub fn list(self: *ParamSpecPool, _owner_type: core.Type) struct {
        ret: [*]*gobject.ParamSpec,
        n_pspecs_p: u32,
    } {
        var n_pspecs_p_out: u32 = undefined;
        const _n_pspecs_p = &n_pspecs_p_out;
        const cFn = @extern(*const fn (*ParamSpecPool, core.Type, *u32) callconv(.c) [*]*gobject.ParamSpec, .{ .name = "g_param_spec_pool_list" });
        const ret = cFn(self, _owner_type, _n_pspecs_p);
        return .{ .ret = ret, .n_pspecs_p = n_pspecs_p_out };
    }
    /// method [list_owned](https://docs.gtk.org/gobject/method.ParamSpecPool.list_owned.html)
    pub fn listOwned(self: *ParamSpecPool, _owner_type: core.Type) ?*core.List {
        const cFn = @extern(*const fn (*ParamSpecPool, core.Type) callconv(.c) ?*core.List, .{ .name = "g_param_spec_pool_list_owned" });
        const ret = cFn(self, _owner_type);
        return ret;
    }
    /// method [lookup](https://docs.gtk.org/gobject/method.ParamSpecPool.lookup.html)
    pub fn lookup(self: *ParamSpecPool, _param_name: [*:0]const u8, _owner_type: core.Type, _walk_ancestors: bool) ?*gobject.ParamSpec {
        const cFn = @extern(*const fn (*ParamSpecPool, [*:0]const u8, core.Type, bool) callconv(.c) ?*gobject.ParamSpec, .{ .name = "g_param_spec_pool_lookup" });
        const ret = cFn(self, _param_name, _owner_type, _walk_ancestors);
        return ret;
    }
    /// method [remove](https://docs.gtk.org/gobject/method.ParamSpecPool.remove.html)
    pub fn remove(self: *ParamSpecPool, _pspec: *gobject.ParamSpec) void {
        const cFn = @extern(*const fn (*ParamSpecPool, *gobject.ParamSpec) callconv(.c) void, .{ .name = "g_param_spec_pool_remove" });
        const ret = cFn(self, _pspec);
        return ret;
    }
};
/// Class [ParamSpecString](https://docs.gtk.org/gobject/class.ParamSpecString.html)
pub const ParamSpecString = extern struct {
    parent_instance: gobject.ParamSpec,
    default_value: ?[*:0]const u8,
    cset_first: ?[*:0]const u8,
    cset_nth: ?[*:0]const u8,
    substitutor: i8,
    null_fold_if_empty: u32,
    ensure_non_null: u32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[14];
    }
};
/// Struct [ParamSpecTypeInfo](https://docs.gtk.org/gobject/struct.ParamSpecTypeInfo.html)
pub const ParamSpecTypeInfo = extern struct {
    instance_size: u16,
    n_preallocs: u16,
    instance_init: ?*const fn (_pspec: *gobject.ParamSpec) callconv(.c) void,
    value_type: core.Type,
    finalize: ?*const fn (_pspec: *gobject.ParamSpec) callconv(.c) void,
    value_set_default: ?*const fn (_pspec: *gobject.ParamSpec, _value: *gobject.Value) callconv(.c) void,
    value_validate: ?*const fn (_pspec: *gobject.ParamSpec, _value: *gobject.Value) callconv(.c) bool,
    values_cmp: ?*const fn (_pspec: *gobject.ParamSpec, _value1: *gobject.Value, _value2: *gobject.Value) callconv(.c) i32,
};
/// Class [ParamSpecUChar](https://docs.gtk.org/gobject/class.ParamSpecUChar.html)
pub const ParamSpecUChar = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: u8,
    maximum: u8,
    default_value: u8,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[1];
    }
};
/// Class [ParamSpecUInt](https://docs.gtk.org/gobject/class.ParamSpecUInt.html)
pub const ParamSpecUInt = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: u32,
    maximum: u32,
    default_value: u32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[4];
    }
};
/// Class [ParamSpecUInt64](https://docs.gtk.org/gobject/class.ParamSpecUInt64.html)
pub const ParamSpecUInt64 = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: u64,
    maximum: u64,
    default_value: u64,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[8];
    }
};
/// Class [ParamSpecULong](https://docs.gtk.org/gobject/class.ParamSpecULong.html)
pub const ParamSpecULong = extern struct {
    parent_instance: gobject.ParamSpec,
    minimum: u64,
    maximum: u64,
    default_value: u64,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[6];
    }
};
/// Class [ParamSpecUnichar](https://docs.gtk.org/gobject/class.ParamSpecUnichar.html)
pub const ParamSpecUnichar = extern struct {
    parent_instance: gobject.ParamSpec,
    default_value: core.Unichar,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[9];
    }
};
/// Class [ParamSpecValueArray](https://docs.gtk.org/gobject/class.ParamSpecValueArray.html)
pub const ParamSpecValueArray = extern struct {
    parent_instance: gobject.ParamSpec,
    element_spec: ?*gobject.ParamSpec,
    fixed_n_elements: u32,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[18];
    }
};
/// Class [ParamSpecVariant](https://docs.gtk.org/gobject/class.ParamSpecVariant.html)
pub const ParamSpecVariant = extern struct {
    parent_instance: gobject.ParamSpec,
    type: ?*glib.VariantType,
    default_value: ?*glib.Variant,
    padding: [4]?*anyopaque,
    pub const Parent = gobject.ParamSpec;
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const g_param_spec_types = @extern([*]core.Type, .{ .name = "g_param_spec_types" });
        return g_param_spec_types[22];
    }
};
/// Deprecated:
/// Struct [Parameter](https://docs.gtk.org/gobject/struct.Parameter.html)
pub const Parameter = if (config.disable_deprecated) core.Deprecated else extern struct {
    name: ?[*:0]const u8,
    value: gobject.Value,
};
/// Struct [PatternSpec](https://docs.gtk.org/gobject/struct.PatternSpec.html)
pub const PatternSpec = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pattern_spec_get_type" });
        return cFn();
    }
};
/// Struct [PollFD](https://docs.gtk.org/gobject/struct.PollFD.html)
pub const PollFD = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_pollfd_get_type" });
        return cFn();
    }
};
/// Struct [PtrArray](https://docs.gtk.org/gobject/struct.PtrArray.html)
pub const PtrArray = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_ptr_array_get_type" });
        return cFn();
    }
};
/// Struct [Rand](https://docs.gtk.org/gobject/struct.Rand.html)
pub const Rand = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_rand_get_type" });
        return cFn();
    }
};
/// Struct [Regex](https://docs.gtk.org/gobject/struct.Regex.html)
pub const Regex = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_regex_get_type" });
        return cFn();
    }
};
/// const [SIGNAL_FLAGS_MASK](https://docs.gtk.org/gobject/const.SIGNAL_FLAGS_MASK.html)
pub const SIGNAL_FLAGS_MASK = 511;
/// const [SIGNAL_MATCH_MASK](https://docs.gtk.org/gobject/const.SIGNAL_MATCH_MASK.html)
pub const SIGNAL_MATCH_MASK = 63;
/// callback [SignalAccumulator](https://docs.gtk.org/gobject/callback.SignalAccumulator.html)
pub const SignalAccumulator = *const fn (_ihint: *gobject.SignalInvocationHint, _return_accu: *gobject.Value, _handler_return: *gobject.Value, _data: ?*anyopaque) callconv(.c) bool;
/// callback [SignalEmissionHook](https://docs.gtk.org/gobject/callback.SignalEmissionHook.html)
pub const SignalEmissionHook = *const fn (_ihint: *gobject.SignalInvocationHint, _n_param_values: u32, _param_values: [*]gobject.Value, _data: ?*anyopaque) callconv(.c) bool;
/// Flags [SignalFlags](https://docs.gtk.org/gobject/flags.SignalFlags.html)
pub const SignalFlags = packed struct(u32) {
    run_first: bool = false,
    run_last: bool = false,
    run_cleanup: bool = false,
    no_recurse: bool = false,
    detailed: bool = false,
    action: bool = false,
    no_hooks: bool = false,
    must_collect: bool = false,
    deprecated: bool = false,
    _9: u8 = 0,
    accumulator_first_run: bool = false,
    _: u14 = 0,
};
/// Class [SignalGroup](https://docs.gtk.org/gobject/class.SignalGroup.html)
/// - property [target](https://docs.gtk.org/gobject/property.SignalGroup.target.html): (rw) `gobject.Object`
/// - property [target-type](https://docs.gtk.org/gobject/property.SignalGroup.target-type.html): (r-) `core.Type`
pub const SignalGroup = opaque {
    pub const Parent = gobject.Object;
    /// ctor [new](https://docs.gtk.org/gobject/ctor.SignalGroup.new.html)
    pub fn new(_target_type: core.Type) *SignalGroup {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *SignalGroup, .{ .name = "g_signal_group_new" });
        const ret = cFn(_target_type);
        return ret;
    }
    /// method [block](https://docs.gtk.org/gobject/method.SignalGroup.block.html)
    pub fn block(self: *SignalGroup) void {
        const cFn = @extern(*const fn (*SignalGroup) callconv(.c) void, .{ .name = "g_signal_group_block" });
        const ret = cFn(self);
        return ret;
    }
    /// method [connect_closure](https://docs.gtk.org/gobject/method.SignalGroup.connect_closure.html)
    pub fn connectClosure(self: *SignalGroup, _detailed_signal: [*:0]const u8, _closure: *gobject.Closure, _after: bool) void {
        const cFn = @extern(*const fn (*SignalGroup, [*:0]const u8, *gobject.Closure, bool) callconv(.c) void, .{ .name = "g_signal_group_connect_closure" });
        const ret = cFn(self, _detailed_signal, _closure, _after);
        return ret;
    }
    /// method [connect_data](https://docs.gtk.org/gobject/method.SignalGroup.connect_data.html)
    pub fn connectData(self: *SignalGroup, _detailed_signal: [*:0]const u8, c_handler: anytype, c_handler_args: anytype, _flags: gobject.ConnectFlags) void {
        var closure_c_handler = core.zig_closure(c_handler, c_handler_args, &.{void});
        const _c_handler: gobject.Callback = @ptrCast(closure_c_handler.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_c_handler.c_data());
        const _notify: gobject.ClosureNotify = @ptrCast(closure_c_handler.c_destroy());
        const cFn = @extern(*const fn (*SignalGroup, [*:0]const u8, gobject.Callback, ?*anyopaque, gobject.ClosureNotify, gobject.ConnectFlags) callconv(.c) void, .{ .name = "g_signal_group_connect_data" });
        const ret = cFn(self, _detailed_signal, _c_handler, @ptrCast(_data), _notify, _flags);
        return ret;
    }
    /// method [connect_swapped](https://docs.gtk.org/gobject/method.SignalGroup.connect_swapped.html)
    pub fn connectSwapped(self: *SignalGroup, _detailed_signal: [*:0]const u8, c_handler: anytype, c_handler_args: anytype) void {
        var closure_c_handler = core.zig_closure(c_handler, c_handler_args, &.{void});
        closure_c_handler.setOnce();
        const _c_handler: gobject.Callback = @ptrCast(closure_c_handler.c_closure());
        const _data: ?*anyopaque = @ptrCast(closure_c_handler.c_data());
        const cFn = @extern(*const fn (*SignalGroup, [*:0]const u8, gobject.Callback, ?*anyopaque) callconv(.c) void, .{ .name = "g_signal_group_connect_swapped" });
        const ret = cFn(self, _detailed_signal, _c_handler, @ptrCast(_data));
        return ret;
    }
    /// method [dup_target](https://docs.gtk.org/gobject/method.SignalGroup.dup_target.html)
    pub fn dupTarget(self: *SignalGroup) ?*gobject.Object {
        const cFn = @extern(*const fn (*SignalGroup) callconv(.c) ?*gobject.Object, .{ .name = "g_signal_group_dup_target" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_target](https://docs.gtk.org/gobject/method.SignalGroup.set_target.html)
    pub fn setTarget(self: *SignalGroup, _target: ?*gobject.Object) void {
        const cFn = @extern(*const fn (*SignalGroup, ?*gobject.Object) callconv(.c) void, .{ .name = "g_signal_group_set_target" });
        const ret = cFn(self, _target);
        return ret;
    }
    /// method [unblock](https://docs.gtk.org/gobject/method.SignalGroup.unblock.html)
    pub fn unblock(self: *SignalGroup) void {
        const cFn = @extern(*const fn (*SignalGroup) callconv(.c) void, .{ .name = "g_signal_group_unblock" });
        const ret = cFn(self);
        return ret;
    }
    /// signal [bind](https://docs.gtk.org/gobject/signal.SignalGroup.bind.html)
    pub fn connectBind(self: *SignalGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("bind", handler, args, flags, &.{ void, *SignalGroup, *gobject.Object });
    }
    /// signal [unbind](https://docs.gtk.org/gobject/signal.SignalGroup.unbind.html)
    pub fn connectUnbind(self: *SignalGroup, handler: anytype, args: anytype, comptime flags: gobject.ConnectFlags) usize {
        return self.signalConnect("unbind", handler, args, flags, &.{ void, *SignalGroup });
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_signal_group_get_type" });
        return cFn();
    }
};
/// Struct [SignalInvocationHint](https://docs.gtk.org/gobject/struct.SignalInvocationHint.html)
pub const SignalInvocationHint = extern struct {
    signal_id: u32,
    detail: u32,
    run_type: gobject.SignalFlags,
};
/// Flags [SignalMatchType](https://docs.gtk.org/gobject/flags.SignalMatchType.html)
pub const SignalMatchType = packed struct(u32) {
    id: bool = false,
    detail: bool = false,
    closure: bool = false,
    func: bool = false,
    data: bool = false,
    unblocked: bool = false,
    _: u26 = 0,
};
/// Struct [SignalQuery](https://docs.gtk.org/gobject/struct.SignalQuery.html)
pub const SignalQuery = extern struct {
    signal_id: u32,
    signal_name: ?[*:0]const u8,
    itype: core.Type,
    signal_flags: gobject.SignalFlags,
    return_type: core.Type,
    n_params: u32,
    param_types: ?[*]core.Type,
};
/// Struct [Source](https://docs.gtk.org/gobject/struct.Source.html)
pub const Source = opaque {
    /// type func [set_closure](https://docs.gtk.org/gobject/type_func.Source.set_closure.html)
    pub fn setClosure(_source: *glib.Source, _closure: *gobject.Closure) void {
        const cFn = @extern(*const fn (*glib.Source, *gobject.Closure) callconv(.c) void, .{ .name = "g_source_set_closure" });
        const ret = cFn(_source, _closure);
        return ret;
    }
    /// type func [set_dummy_callback](https://docs.gtk.org/gobject/type_func.Source.set_dummy_callback.html)
    pub fn setDummyCallback(_source: *glib.Source) void {
        const cFn = @extern(*const fn (*glib.Source) callconv(.c) void, .{ .name = "g_source_set_dummy_callback" });
        const ret = cFn(_source);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_source_get_type" });
        return cFn();
    }
};
/// Struct [String](https://docs.gtk.org/gobject/struct.String.html)
pub const String = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_gstring_get_type" });
        return cFn();
    }
};
/// Struct [Strv](https://docs.gtk.org/gobject/struct.Strv.html)
pub const Strv = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_strv_get_type" });
        return cFn();
    }
};
/// Struct [StrvBuilder](https://docs.gtk.org/gobject/struct.StrvBuilder.html)
pub const StrvBuilder = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_strv_builder_get_type" });
        return cFn();
    }
};
/// const [TYPE_FLAG_RESERVED_ID_BIT](https://docs.gtk.org/gobject/const.TYPE_FLAG_RESERVED_ID_BIT.html)
pub const TYPE_FLAG_RESERVED_ID_BIT = 1;
/// const [TYPE_FUNDAMENTAL_MAX](https://docs.gtk.org/gobject/const.TYPE_FUNDAMENTAL_MAX.html)
pub const TYPE_FUNDAMENTAL_MAX = 1020;
/// const [TYPE_FUNDAMENTAL_SHIFT](https://docs.gtk.org/gobject/const.TYPE_FUNDAMENTAL_SHIFT.html)
pub const TYPE_FUNDAMENTAL_SHIFT = 2;
/// const [TYPE_RESERVED_BSE_FIRST](https://docs.gtk.org/gobject/const.TYPE_RESERVED_BSE_FIRST.html)
pub const TYPE_RESERVED_BSE_FIRST = 32;
/// const [TYPE_RESERVED_BSE_LAST](https://docs.gtk.org/gobject/const.TYPE_RESERVED_BSE_LAST.html)
pub const TYPE_RESERVED_BSE_LAST = 48;
/// const [TYPE_RESERVED_GLIB_FIRST](https://docs.gtk.org/gobject/const.TYPE_RESERVED_GLIB_FIRST.html)
pub const TYPE_RESERVED_GLIB_FIRST = 22;
/// const [TYPE_RESERVED_GLIB_LAST](https://docs.gtk.org/gobject/const.TYPE_RESERVED_GLIB_LAST.html)
pub const TYPE_RESERVED_GLIB_LAST = 31;
/// const [TYPE_RESERVED_USER_FIRST](https://docs.gtk.org/gobject/const.TYPE_RESERVED_USER_FIRST.html)
pub const TYPE_RESERVED_USER_FIRST = 49;
/// Struct [Thread](https://docs.gtk.org/gobject/struct.Thread.html)
pub const Thread = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_thread_get_type" });
        return cFn();
    }
};
/// Struct [TimeZone](https://docs.gtk.org/gobject/struct.TimeZone.html)
pub const TimeZone = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_time_zone_get_type" });
        return cFn();
    }
};
/// callback [ToggleNotify](https://docs.gtk.org/gobject/callback.ToggleNotify.html)
pub const ToggleNotify = *const fn (_data: ?*anyopaque, _object: *gobject.Object, _is_last_ref: bool) callconv(.c) void;
/// Struct [Tree](https://docs.gtk.org/gobject/struct.Tree.html)
pub const Tree = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_tree_get_type" });
        return cFn();
    }
};
/// Union [TypeCValue](https://docs.gtk.org/gobject/union.TypeCValue.html)
pub const TypeCValue = extern union {
    v_int: i32,
    v_long: i64,
    v_int64: i64,
    v_double: f64,
    v_pointer: ?*anyopaque,
};
/// Struct [TypeClass](https://docs.gtk.org/gobject/struct.TypeClass.html)
pub const TypeClass = extern struct {
    g_type: core.Type,
    /// Deprecated:
    /// method [add_private](https://docs.gtk.org/gobject/method.TypeClass.add_private.html)
    pub const addPrivate = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn addPrivate(self: *TypeClass, _private_size: u64) void {
            const cFn = @extern(*const fn (*TypeClass, u64) callconv(.c) void, .{ .name = "g_type_class_add_private" });
            const ret = cFn(self, _private_size);
            return ret;
        }
    }.addPrivate;
    /// method [get_private](https://docs.gtk.org/gobject/method.TypeClass.get_private.html)
    pub fn getPrivate(self: *TypeClass, _private_type: core.Type) ?*anyopaque {
        const cFn = @extern(*const fn (*TypeClass, core.Type) callconv(.c) ?*anyopaque, .{ .name = "g_type_class_get_private" });
        const ret = cFn(self, _private_type);
        return ret;
    }
    /// method [peek_parent](https://docs.gtk.org/gobject/method.TypeClass.peek_parent.html)
    pub fn peekParent(self: *TypeClass) *gobject.TypeClass {
        const cFn = @extern(*const fn (*TypeClass) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_peek_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// method [unref](https://docs.gtk.org/gobject/method.TypeClass.unref.html)
    pub fn unref(self: *TypeClass) void {
        const cFn = @extern(*const fn (*TypeClass) callconv(.c) void, .{ .name = "g_type_class_unref" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [adjust_private_offset](https://docs.gtk.org/gobject/type_func.TypeClass.adjust_private_offset.html)
    pub fn adjustPrivateOffset(_g_class: ?*anyopaque, _private_size_or_offset: *i32) void {
        const cFn = @extern(*const fn (?*anyopaque, *i32) callconv(.c) void, .{ .name = "g_type_class_adjust_private_offset" });
        const ret = cFn(@ptrCast(_g_class), _private_size_or_offset);
        return ret;
    }
    /// type func [peek](https://docs.gtk.org/gobject/type_func.TypeClass.peek.html)
    pub fn peek(_type: core.Type) *gobject.TypeClass {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_peek" });
        const ret = cFn(_type);
        return ret;
    }
    /// type func [peek_static](https://docs.gtk.org/gobject/type_func.TypeClass.peek_static.html)
    pub fn peekStatic(_type: core.Type) *gobject.TypeClass {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_peek_static" });
        const ret = cFn(_type);
        return ret;
    }
    /// type func [ref](https://docs.gtk.org/gobject/type_func.TypeClass.ref.html)
    pub fn ref(_type: core.Type) *gobject.TypeClass {
        const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_ref" });
        const ret = cFn(_type);
        return ret;
    }
};
/// callback [TypeClassCacheFunc](https://docs.gtk.org/gobject/callback.TypeClassCacheFunc.html)
pub const TypeClassCacheFunc = *const fn (_cache_data: ?*anyopaque, _g_class: *gobject.TypeClass) callconv(.c) bool;
/// Deprecated:
/// Flags [TypeDebugFlags](https://docs.gtk.org/gobject/flags.TypeDebugFlags.html)
pub const TypeDebugFlags = if (config.disable_deprecated) core.Deprecated else packed struct(u32) {
    objects: bool = false,
    signals: bool = false,
    instance_count: bool = false,
    _: u29 = 0,
    pub const mask: @This() = @bitCast(@as(u32, 7));
};
/// Flags [TypeFlags](https://docs.gtk.org/gobject/flags.TypeFlags.html)
pub const TypeFlags = packed struct(u32) {
    _0: u4 = 0,
    abstract: bool = false,
    value_abstract: bool = false,
    final: bool = false,
    deprecated: bool = false,
    _: u24 = 0,
};
/// Flags [TypeFundamentalFlags](https://docs.gtk.org/gobject/flags.TypeFundamentalFlags.html)
pub const TypeFundamentalFlags = packed struct(u32) {
    classed: bool = false,
    instantiatable: bool = false,
    derivable: bool = false,
    deep_derivable: bool = false,
    _: u28 = 0,
};
/// Struct [TypeFundamentalInfo](https://docs.gtk.org/gobject/struct.TypeFundamentalInfo.html)
pub const TypeFundamentalInfo = extern struct {
    type_flags: gobject.TypeFundamentalFlags,
};
/// Struct [TypeInfo](https://docs.gtk.org/gobject/struct.TypeInfo.html)
pub const TypeInfo = extern struct {
    class_size: u16,
    base_init: ?*const fn (_g_class: *gobject.TypeClass) callconv(.c) void,
    base_finalize: ?*const fn (_g_class: *gobject.TypeClass) callconv(.c) void,
    class_init: ?*const fn (_g_class: *gobject.TypeClass, _class_data: ?*anyopaque) callconv(.c) void,
    class_finalize: ?*const fn (_g_class: *gobject.TypeClass, _class_data: ?*anyopaque) callconv(.c) void,
    class_data: ?*anyopaque,
    instance_size: u16,
    n_preallocs: u16,
    instance_init: ?*const fn (_instance: *gobject.TypeInstance, _g_class: *gobject.TypeClass) callconv(.c) void,
    value_table: ?*gobject.TypeValueTable,
};
/// Struct [TypeInstance](https://docs.gtk.org/gobject/struct.TypeInstance.html)
pub const TypeInstance = extern struct {
    g_class: ?*gobject.TypeClass,
    /// method [get_private](https://docs.gtk.org/gobject/method.TypeInstance.get_private.html)
    pub fn getPrivate(self: *TypeInstance, _private_type: core.Type) ?*anyopaque {
        const cFn = @extern(*const fn (*TypeInstance, core.Type) callconv(.c) ?*anyopaque, .{ .name = "g_type_instance_get_private" });
        const ret = cFn(self, _private_type);
        return ret;
    }
};
/// Struct [TypeInterface](https://docs.gtk.org/gobject/struct.TypeInterface.html)
pub const TypeInterface = extern struct {
    g_type: core.Type,
    g_instance_type: core.Type,
    /// method [peek_parent](https://docs.gtk.org/gobject/method.TypeInterface.peek_parent.html)
    pub fn peekParent(self: *TypeInterface) *gobject.TypeInterface {
        const cFn = @extern(*const fn (*TypeInterface) callconv(.c) *gobject.TypeInterface, .{ .name = "g_type_interface_peek_parent" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [add_prerequisite](https://docs.gtk.org/gobject/type_func.TypeInterface.add_prerequisite.html)
    pub fn addPrerequisite(_interface_type: core.Type, _prerequisite_type: core.Type) void {
        const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) void, .{ .name = "g_type_interface_add_prerequisite" });
        const ret = cFn(_interface_type, _prerequisite_type);
        return ret;
    }
    /// type func [get_plugin](https://docs.gtk.org/gobject/type_func.TypeInterface.get_plugin.html)
    pub fn getPlugin(_instance_type: core.Type, _interface_type: core.Type) *gobject.TypePlugin {
        const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) *gobject.TypePlugin, .{ .name = "g_type_interface_get_plugin" });
        const ret = cFn(_instance_type, _interface_type);
        return ret;
    }
    /// type func [instantiatable_prerequisite](https://docs.gtk.org/gobject/type_func.TypeInterface.instantiatable_prerequisite.html)
    pub fn instantiatablePrerequisite(_interface_type: core.Type) core.Type {
        const cFn = @extern(*const fn (core.Type) callconv(.c) core.Type, .{ .name = "g_type_interface_instantiatable_prerequisite" });
        const ret = cFn(_interface_type);
        return ret;
    }
    /// type func [peek](https://docs.gtk.org/gobject/type_func.TypeInterface.peek.html)
    pub fn peek(_instance_class: *gobject.TypeClass, _iface_type: core.Type) *gobject.TypeInterface {
        const cFn = @extern(*const fn (*gobject.TypeClass, core.Type) callconv(.c) *gobject.TypeInterface, .{ .name = "g_type_interface_peek" });
        const ret = cFn(_instance_class, _iface_type);
        return ret;
    }
    /// type func [prerequisites](https://docs.gtk.org/gobject/type_func.TypeInterface.prerequisites.html)
    pub fn prerequisites(_interface_type: core.Type) struct {
        ret: [*]core.Type,
        n_prerequisites: u32,
    } {
        var n_prerequisites_out: u32 = undefined;
        const _n_prerequisites = &n_prerequisites_out;
        const cFn = @extern(*const fn (core.Type, ?*u32) callconv(.c) [*]core.Type, .{ .name = "g_type_interface_prerequisites" });
        const ret = cFn(_interface_type, _n_prerequisites);
        return .{ .ret = ret, .n_prerequisites = n_prerequisites_out };
    }
};
/// callback [TypeInterfaceCheckFunc](https://docs.gtk.org/gobject/callback.TypeInterfaceCheckFunc.html)
pub const TypeInterfaceCheckFunc = *const fn (_check_data: ?*anyopaque, _g_iface: *gobject.TypeInterface) callconv(.c) void;
/// Class [TypeModule](https://docs.gtk.org/gobject/class.TypeModule.html)
pub const TypeModule = extern struct {
    parent_instance: gobject.Object,
    use_count: u32,
    type_infos: ?*core.SList,
    interface_infos: ?*core.SList,
    name: ?[*:0]const u8,
    pub const Interfaces = [_]type{gobject.TypePlugin};
    pub const Parent = gobject.Object;
    pub const Class = gobject.TypeModuleClass;
    /// method [add_interface](https://docs.gtk.org/gobject/method.TypeModule.add_interface.html)
    pub fn addInterface(self: *TypeModule, _instance_type: core.Type, _interface_type: core.Type, _interface_info: *gobject.InterfaceInfo) void {
        const cFn = @extern(*const fn (*TypeModule, core.Type, core.Type, *gobject.InterfaceInfo) callconv(.c) void, .{ .name = "g_type_module_add_interface" });
        const ret = cFn(self, _instance_type, _interface_type, _interface_info);
        return ret;
    }
    /// method [register_enum](https://docs.gtk.org/gobject/method.TypeModule.register_enum.html)
    pub fn registerEnum(self: *TypeModule, _name: [*:0]const u8, _const_static_values: *gobject.EnumValue) core.Type {
        const cFn = @extern(*const fn (*TypeModule, [*:0]const u8, *gobject.EnumValue) callconv(.c) core.Type, .{ .name = "g_type_module_register_enum" });
        const ret = cFn(self, _name, _const_static_values);
        return ret;
    }
    /// method [register_flags](https://docs.gtk.org/gobject/method.TypeModule.register_flags.html)
    pub fn registerFlags(self: *TypeModule, _name: [*:0]const u8, _const_static_values: *gobject.FlagsValue) core.Type {
        const cFn = @extern(*const fn (*TypeModule, [*:0]const u8, *gobject.FlagsValue) callconv(.c) core.Type, .{ .name = "g_type_module_register_flags" });
        const ret = cFn(self, _name, _const_static_values);
        return ret;
    }
    /// method [register_type](https://docs.gtk.org/gobject/method.TypeModule.register_type.html)
    pub fn registerType(self: *TypeModule, _parent_type: core.Type, _type_name: [*:0]const u8, _type_info: *gobject.TypeInfo, _flags: gobject.TypeFlags) core.Type {
        const cFn = @extern(*const fn (*TypeModule, core.Type, [*:0]const u8, *gobject.TypeInfo, gobject.TypeFlags) callconv(.c) core.Type, .{ .name = "g_type_module_register_type" });
        const ret = cFn(self, _parent_type, _type_name, _type_info, _flags);
        return ret;
    }
    /// method [set_name](https://docs.gtk.org/gobject/method.TypeModule.set_name.html)
    pub fn setName(self: *TypeModule, _name: [*:0]const u8) void {
        const cFn = @extern(*const fn (*TypeModule, [*:0]const u8) callconv(.c) void, .{ .name = "g_type_module_set_name" });
        const ret = cFn(self, _name);
        return ret;
    }
    /// method [unuse](https://docs.gtk.org/gobject/method.TypeModule.unuse.html)
    pub fn unuse(self: *TypeModule) void {
        const cFn = @extern(*const fn (*TypeModule) callconv(.c) void, .{ .name = "g_type_module_unuse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [use](https://docs.gtk.org/gobject/method.TypeModule.use.html)
    pub fn use(self: *TypeModule) bool {
        const cFn = @extern(*const fn (*TypeModule) callconv(.c) bool, .{ .name = "g_type_module_use" });
        const ret = cFn(self);
        return ret;
    }
    /// vfunc [load](https://docs.gtk.org/gobject/vfunc.TypeModule.load.html)
    pub fn loadV(self: *TypeModule) bool {
        const class: *TypeModuleClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.load.?;
        const ret = vFn(self);
        return ret;
    }
    /// vfunc [unload](https://docs.gtk.org/gobject/vfunc.TypeModule.unload.html)
    pub fn unloadV(self: *TypeModule) void {
        const class: *TypeModuleClass = @ptrCast(core.unsafeCast(gobject.TypeInstance, self).g_class.?);
        const vFn = class.unload.?;
        const ret = vFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub const property = Ext.property;
    pub const signalConnect = Ext.signalConnect;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_type_module_get_type" });
        return cFn();
    }
};
pub const TypeModuleClass = extern struct {
    parent_class: gobject.ObjectClass,
    load: ?*const fn (_module: *gobject.TypeModule) callconv(.c) bool,
    unload: ?*const fn (_module: *gobject.TypeModule) callconv(.c) void,
    reserved1: ?*const fn () callconv(.c) void,
    reserved2: ?*const fn () callconv(.c) void,
    reserved3: ?*const fn () callconv(.c) void,
    reserved4: ?*const fn () callconv(.c) void,
};
/// Iface [TypePlugin](https://docs.gtk.org/gobject/iface.TypePlugin.html)
pub const TypePlugin = opaque {
    /// method [complete_interface_info](https://docs.gtk.org/gobject/method.TypePlugin.complete_interface_info.html)
    pub fn completeInterfaceInfo(self: *TypePlugin, _instance_type: core.Type, _interface_type: core.Type, _info: *gobject.InterfaceInfo) void {
        const cFn = @extern(*const fn (*TypePlugin, core.Type, core.Type, *gobject.InterfaceInfo) callconv(.c) void, .{ .name = "g_type_plugin_complete_interface_info" });
        const ret = cFn(self, _instance_type, _interface_type, _info);
        return ret;
    }
    /// method [complete_type_info](https://docs.gtk.org/gobject/method.TypePlugin.complete_type_info.html)
    pub fn completeTypeInfo(self: *TypePlugin, _g_type: core.Type, _info: *gobject.TypeInfo, _value_table: *gobject.TypeValueTable) void {
        const cFn = @extern(*const fn (*TypePlugin, core.Type, *gobject.TypeInfo, *gobject.TypeValueTable) callconv(.c) void, .{ .name = "g_type_plugin_complete_type_info" });
        const ret = cFn(self, _g_type, _info, _value_table);
        return ret;
    }
    /// method [unuse](https://docs.gtk.org/gobject/method.TypePlugin.unuse.html)
    pub fn unuse(self: *TypePlugin) void {
        const cFn = @extern(*const fn (*TypePlugin) callconv(.c) void, .{ .name = "g_type_plugin_unuse" });
        const ret = cFn(self);
        return ret;
    }
    /// method [use](https://docs.gtk.org/gobject/method.TypePlugin.use.html)
    pub fn use(self: *TypePlugin) void {
        const cFn = @extern(*const fn (*TypePlugin) callconv(.c) void, .{ .name = "g_type_plugin_use" });
        const ret = cFn(self);
        return ret;
    }
    const Ext = core.Extend(@This());
    pub const __call = Ext.__call;
    pub const into = Ext.into;
    pub const tryInto = Ext.tryInto;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_type_plugin_get_type" });
        return cFn();
    }
};
/// Struct [TypePluginClass](https://docs.gtk.org/gobject/struct.TypePluginClass.html)
pub const TypePluginClass = extern struct {
    base_iface: gobject.TypeInterface,
    use_plugin: ?*const fn (_plugin: *gobject.TypePlugin) callconv(.c) void,
    unuse_plugin: ?*const fn (_plugin: *gobject.TypePlugin) callconv(.c) void,
    complete_type_info: ?*const fn (_plugin: *gobject.TypePlugin, _g_type: core.Type, _info: *gobject.TypeInfo, _value_table: *gobject.TypeValueTable) callconv(.c) void,
    complete_interface_info: ?*const fn (_plugin: *gobject.TypePlugin, _instance_type: core.Type, _interface_type: core.Type, _info: *gobject.InterfaceInfo) callconv(.c) void,
};
/// callback [TypePluginCompleteInterfaceInfo](https://docs.gtk.org/gobject/callback.TypePluginCompleteInterfaceInfo.html)
pub const TypePluginCompleteInterfaceInfo = *const fn (_plugin: *gobject.TypePlugin, _instance_type: core.Type, _interface_type: core.Type, _info: *gobject.InterfaceInfo) callconv(.c) void;
/// callback [TypePluginCompleteTypeInfo](https://docs.gtk.org/gobject/callback.TypePluginCompleteTypeInfo.html)
pub const TypePluginCompleteTypeInfo = *const fn (_plugin: *gobject.TypePlugin, _g_type: core.Type, _info: *gobject.TypeInfo, _value_table: *gobject.TypeValueTable) callconv(.c) void;
/// callback [TypePluginUnuse](https://docs.gtk.org/gobject/callback.TypePluginUnuse.html)
pub const TypePluginUnuse = *const fn (_plugin: *gobject.TypePlugin) callconv(.c) void;
/// callback [TypePluginUse](https://docs.gtk.org/gobject/callback.TypePluginUse.html)
pub const TypePluginUse = *const fn (_plugin: *gobject.TypePlugin) callconv(.c) void;
/// Struct [TypeQuery](https://docs.gtk.org/gobject/struct.TypeQuery.html)
pub const TypeQuery = extern struct {
    type: core.Type,
    type_name: ?[*:0]const u8,
    class_size: u32,
    instance_size: u32,
};
/// callback [TypeValueCollectFunc](https://docs.gtk.org/gobject/callback.TypeValueCollectFunc.html)
pub const TypeValueCollectFunc = *const fn (_value: *gobject.Value, _n_collect_values: u32, _collect_values: [*]gobject.TypeCValue, _collect_flags: u32) callconv(.c) ?[*:0]u8;
/// callback [TypeValueCopyFunc](https://docs.gtk.org/gobject/callback.TypeValueCopyFunc.html)
pub const TypeValueCopyFunc = *const fn (_src_value: *gobject.Value, _dest_value: *gobject.Value) callconv(.c) void;
/// callback [TypeValueFreeFunc](https://docs.gtk.org/gobject/callback.TypeValueFreeFunc.html)
pub const TypeValueFreeFunc = *const fn (_value: *gobject.Value) callconv(.c) void;
/// callback [TypeValueInitFunc](https://docs.gtk.org/gobject/callback.TypeValueInitFunc.html)
pub const TypeValueInitFunc = *const fn (_value: *gobject.Value) callconv(.c) void;
/// callback [TypeValueLCopyFunc](https://docs.gtk.org/gobject/callback.TypeValueLCopyFunc.html)
pub const TypeValueLCopyFunc = *const fn (_value: *gobject.Value, _n_collect_values: u32, _collect_values: [*]gobject.TypeCValue, _collect_flags: u32) callconv(.c) ?[*:0]u8;
/// callback [TypeValuePeekPointerFunc](https://docs.gtk.org/gobject/callback.TypeValuePeekPointerFunc.html)
pub const TypeValuePeekPointerFunc = *const fn (_value: *gobject.Value) callconv(.c) ?*anyopaque;
/// Struct [TypeValueTable](https://docs.gtk.org/gobject/struct.TypeValueTable.html)
pub const TypeValueTable = extern struct {
    value_init: ?*const fn (_value: *gobject.Value) callconv(.c) void,
    value_free: ?*const fn (_value: *gobject.Value) callconv(.c) void,
    value_copy: ?*const fn (_src_value: *gobject.Value, _dest_value: *gobject.Value) callconv(.c) void,
    value_peek_pointer: ?*const fn (_value: *gobject.Value) callconv(.c) ?*anyopaque,
    collect_format: ?[*:0]const u8,
    collect_value: ?*const fn (_value: *gobject.Value, _n_collect_values: u32, _collect_values: [*]gobject.TypeCValue, _collect_flags: u32) callconv(.c) ?[*:0]u8,
    lcopy_format: ?[*:0]const u8,
    lcopy_value: ?*const fn (_value: *gobject.Value, _n_collect_values: u32, _collect_values: [*]gobject.TypeCValue, _collect_flags: u32) callconv(.c) ?[*:0]u8,
};
/// Struct [Uri](https://docs.gtk.org/gobject/struct.Uri.html)
pub const Uri = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_uri_get_type" });
        return cFn();
    }
};
/// const [VALUE_COLLECT_FORMAT_MAX_LENGTH](https://docs.gtk.org/gobject/const.VALUE_COLLECT_FORMAT_MAX_LENGTH.html)
pub const VALUE_COLLECT_FORMAT_MAX_LENGTH = 8;
/// const [VALUE_INTERNED_STRING](https://docs.gtk.org/gobject/const.VALUE_INTERNED_STRING.html)
pub const VALUE_INTERNED_STRING = 268435456;
/// const [VALUE_NOCOPY_CONTENTS](https://docs.gtk.org/gobject/const.VALUE_NOCOPY_CONTENTS.html)
pub const VALUE_NOCOPY_CONTENTS = 134217728;
/// Struct [Value](https://docs.gtk.org/gobject/struct.Value.html)
pub const Value = extern struct {
    g_type: core.Type,
    data: [2]gobject._Value__data__union,
    /// method [copy](https://docs.gtk.org/gobject/method.Value.copy.html)
    pub fn copy(self: *Value, _dest_value: *gobject.Value) void {
        const cFn = @extern(*const fn (*Value, *gobject.Value) callconv(.c) void, .{ .name = "g_value_copy" });
        const ret = cFn(self, _dest_value);
        return ret;
    }
    /// method [dup_object](https://docs.gtk.org/gobject/method.Value.dup_object.html)
    pub fn dupObject(self: *Value) ?*gobject.Object {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*gobject.Object, .{ .name = "g_value_dup_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [dup_string](https://docs.gtk.org/gobject/method.Value.dup_string.html)
    pub fn dupString(self: *Value) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?[*:0]u8, .{ .name = "g_value_dup_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [dup_variant](https://docs.gtk.org/gobject/method.Value.dup_variant.html)
    pub fn dupVariant(self: *Value) ?*glib.Variant {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*glib.Variant, .{ .name = "g_value_dup_variant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [fits_pointer](https://docs.gtk.org/gobject/method.Value.fits_pointer.html)
    pub fn fitsPointer(self: *Value) bool {
        const cFn = @extern(*const fn (*Value) callconv(.c) bool, .{ .name = "g_value_fits_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_boolean](https://docs.gtk.org/gobject/method.Value.get_boolean.html)
    pub fn getBoolean(self: *Value) bool {
        const cFn = @extern(*const fn (*Value) callconv(.c) bool, .{ .name = "g_value_get_boolean" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_boxed](https://docs.gtk.org/gobject/method.Value.get_boxed.html)
    pub fn getBoxed(self: *Value) ?*anyopaque {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*anyopaque, .{ .name = "g_value_get_boxed" });
        const ret = cFn(self);
        return ret;
    }
    /// Deprecated:
    /// method [get_char](https://docs.gtk.org/gobject/method.Value.get_char.html)
    pub const getChar = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getChar(self: *Value) i8 {
            const cFn = @extern(*const fn (*Value) callconv(.c) i8, .{ .name = "g_value_get_char" });
            const ret = cFn(self);
            return ret;
        }
    }.getChar;
    /// method [get_double](https://docs.gtk.org/gobject/method.Value.get_double.html)
    pub fn getDouble(self: *Value) f64 {
        const cFn = @extern(*const fn (*Value) callconv(.c) f64, .{ .name = "g_value_get_double" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_enum](https://docs.gtk.org/gobject/method.Value.get_enum.html)
    pub fn getEnum(self: *Value) i32 {
        const cFn = @extern(*const fn (*Value) callconv(.c) i32, .{ .name = "g_value_get_enum" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_flags](https://docs.gtk.org/gobject/method.Value.get_flags.html)
    pub fn getFlags(self: *Value) u32 {
        const cFn = @extern(*const fn (*Value) callconv(.c) u32, .{ .name = "g_value_get_flags" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_float](https://docs.gtk.org/gobject/method.Value.get_float.html)
    pub fn getFloat(self: *Value) f32 {
        const cFn = @extern(*const fn (*Value) callconv(.c) f32, .{ .name = "g_value_get_float" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_gtype](https://docs.gtk.org/gobject/method.Value.get_gtype.html)
    pub fn getGtype(self: *Value) core.Type {
        const cFn = @extern(*const fn (*Value) callconv(.c) core.Type, .{ .name = "g_value_get_gtype" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int](https://docs.gtk.org/gobject/method.Value.get_int.html)
    pub fn getInt(self: *Value) i32 {
        const cFn = @extern(*const fn (*Value) callconv(.c) i32, .{ .name = "g_value_get_int" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_int64](https://docs.gtk.org/gobject/method.Value.get_int64.html)
    pub fn getInt64(self: *Value) i64 {
        const cFn = @extern(*const fn (*Value) callconv(.c) i64, .{ .name = "g_value_get_int64" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_long](https://docs.gtk.org/gobject/method.Value.get_long.html)
    pub fn getLong(self: *Value) i64 {
        const cFn = @extern(*const fn (*Value) callconv(.c) i64, .{ .name = "g_value_get_long" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_object](https://docs.gtk.org/gobject/method.Value.get_object.html)
    pub fn getObject(self: *Value) ?*gobject.Object {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*gobject.Object, .{ .name = "g_value_get_object" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_param](https://docs.gtk.org/gobject/method.Value.get_param.html)
    pub fn getParam(self: *Value) *gobject.ParamSpec {
        const cFn = @extern(*const fn (*Value) callconv(.c) *gobject.ParamSpec, .{ .name = "g_value_get_param" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_pointer](https://docs.gtk.org/gobject/method.Value.get_pointer.html)
    pub fn getPointer(self: *Value) ?*anyopaque {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*anyopaque, .{ .name = "g_value_get_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_schar](https://docs.gtk.org/gobject/method.Value.get_schar.html)
    pub fn getSchar(self: *Value) i8 {
        const cFn = @extern(*const fn (*Value) callconv(.c) i8, .{ .name = "g_value_get_schar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_string](https://docs.gtk.org/gobject/method.Value.get_string.html)
    pub fn getString(self: *Value) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?[*:0]u8, .{ .name = "g_value_get_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uchar](https://docs.gtk.org/gobject/method.Value.get_uchar.html)
    pub fn getUchar(self: *Value) u8 {
        const cFn = @extern(*const fn (*Value) callconv(.c) u8, .{ .name = "g_value_get_uchar" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uint](https://docs.gtk.org/gobject/method.Value.get_uint.html)
    pub fn getUint(self: *Value) u32 {
        const cFn = @extern(*const fn (*Value) callconv(.c) u32, .{ .name = "g_value_get_uint" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_uint64](https://docs.gtk.org/gobject/method.Value.get_uint64.html)
    pub fn getUint64(self: *Value) u64 {
        const cFn = @extern(*const fn (*Value) callconv(.c) u64, .{ .name = "g_value_get_uint64" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_ulong](https://docs.gtk.org/gobject/method.Value.get_ulong.html)
    pub fn getUlong(self: *Value) u64 {
        const cFn = @extern(*const fn (*Value) callconv(.c) u64, .{ .name = "g_value_get_ulong" });
        const ret = cFn(self);
        return ret;
    }
    /// method [get_variant](https://docs.gtk.org/gobject/method.Value.get_variant.html)
    pub fn getVariant(self: *Value) ?*glib.Variant {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*glib.Variant, .{ .name = "g_value_get_variant" });
        const ret = cFn(self);
        return ret;
    }
    /// method [init](https://docs.gtk.org/gobject/method.Value.init.html)
    pub fn init(self: *Value, _g_type: core.Type) *gobject.Value {
        const cFn = @extern(*const fn (*Value, core.Type) callconv(.c) *gobject.Value, .{ .name = "g_value_init" });
        const ret = cFn(self, _g_type);
        return ret;
    }
    /// method [init_from_instance](https://docs.gtk.org/gobject/method.Value.init_from_instance.html)
    pub fn initFromInstance(self: *Value, _instance: *gobject.TypeInstance) void {
        const cFn = @extern(*const fn (*Value, *gobject.TypeInstance) callconv(.c) void, .{ .name = "g_value_init_from_instance" });
        const ret = cFn(self, _instance);
        return ret;
    }
    /// method [peek_pointer](https://docs.gtk.org/gobject/method.Value.peek_pointer.html)
    pub fn peekPointer(self: *Value) ?*anyopaque {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?*anyopaque, .{ .name = "g_value_peek_pointer" });
        const ret = cFn(self);
        return ret;
    }
    /// method [reset](https://docs.gtk.org/gobject/method.Value.reset.html)
    pub fn reset(self: *Value) *gobject.Value {
        const cFn = @extern(*const fn (*Value) callconv(.c) *gobject.Value, .{ .name = "g_value_reset" });
        const ret = cFn(self);
        return ret;
    }
    /// method [set_boolean](https://docs.gtk.org/gobject/method.Value.set_boolean.html)
    pub fn setBoolean(self: *Value, _v_boolean: bool) void {
        const cFn = @extern(*const fn (*Value, bool) callconv(.c) void, .{ .name = "g_value_set_boolean" });
        const ret = cFn(self, _v_boolean);
        return ret;
    }
    /// method [set_boxed](https://docs.gtk.org/gobject/method.Value.set_boxed.html)
    pub fn setBoxed(self: *Value, _v_boxed: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_set_boxed" });
        const ret = cFn(self, @ptrCast(_v_boxed));
        return ret;
    }
    /// Deprecated:
    /// method [set_boxed_take_ownership](https://docs.gtk.org/gobject/method.Value.set_boxed_take_ownership.html)
    pub const setBoxedTakeOwnership = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setBoxedTakeOwnership(self: *Value, _v_boxed: ?*anyopaque) void {
            const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_set_boxed_take_ownership" });
            const ret = cFn(self, @ptrCast(_v_boxed));
            return ret;
        }
    }.setBoxedTakeOwnership;
    /// Deprecated:
    /// method [set_char](https://docs.gtk.org/gobject/method.Value.set_char.html)
    pub const setChar = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setChar(self: *Value, _v_char: i8) void {
            const cFn = @extern(*const fn (*Value, i8) callconv(.c) void, .{ .name = "g_value_set_char" });
            const ret = cFn(self, _v_char);
            return ret;
        }
    }.setChar;
    /// method [set_double](https://docs.gtk.org/gobject/method.Value.set_double.html)
    pub fn setDouble(self: *Value, _v_double: f64) void {
        const cFn = @extern(*const fn (*Value, f64) callconv(.c) void, .{ .name = "g_value_set_double" });
        const ret = cFn(self, _v_double);
        return ret;
    }
    /// method [set_enum](https://docs.gtk.org/gobject/method.Value.set_enum.html)
    pub fn setEnum(self: *Value, _v_enum: i32) void {
        const cFn = @extern(*const fn (*Value, i32) callconv(.c) void, .{ .name = "g_value_set_enum" });
        const ret = cFn(self, _v_enum);
        return ret;
    }
    /// method [set_flags](https://docs.gtk.org/gobject/method.Value.set_flags.html)
    pub fn setFlags(self: *Value, _v_flags: u32) void {
        const cFn = @extern(*const fn (*Value, u32) callconv(.c) void, .{ .name = "g_value_set_flags" });
        const ret = cFn(self, _v_flags);
        return ret;
    }
    /// method [set_float](https://docs.gtk.org/gobject/method.Value.set_float.html)
    pub fn setFloat(self: *Value, _v_float: f32) void {
        const cFn = @extern(*const fn (*Value, f32) callconv(.c) void, .{ .name = "g_value_set_float" });
        const ret = cFn(self, _v_float);
        return ret;
    }
    /// method [set_gtype](https://docs.gtk.org/gobject/method.Value.set_gtype.html)
    pub fn setGtype(self: *Value, _v_gtype: core.Type) void {
        const cFn = @extern(*const fn (*Value, core.Type) callconv(.c) void, .{ .name = "g_value_set_gtype" });
        const ret = cFn(self, _v_gtype);
        return ret;
    }
    /// method [set_instance](https://docs.gtk.org/gobject/method.Value.set_instance.html)
    pub fn setInstance(self: *Value, _instance: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_set_instance" });
        const ret = cFn(self, @ptrCast(_instance));
        return ret;
    }
    /// method [set_int](https://docs.gtk.org/gobject/method.Value.set_int.html)
    pub fn setInt(self: *Value, _v_int: i32) void {
        const cFn = @extern(*const fn (*Value, i32) callconv(.c) void, .{ .name = "g_value_set_int" });
        const ret = cFn(self, _v_int);
        return ret;
    }
    /// method [set_int64](https://docs.gtk.org/gobject/method.Value.set_int64.html)
    pub fn setInt64(self: *Value, _v_int64: i64) void {
        const cFn = @extern(*const fn (*Value, i64) callconv(.c) void, .{ .name = "g_value_set_int64" });
        const ret = cFn(self, _v_int64);
        return ret;
    }
    /// method [set_interned_string](https://docs.gtk.org/gobject/method.Value.set_interned_string.html)
    pub fn setInternedString(self: *Value, _v_string: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Value, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_value_set_interned_string" });
        const ret = cFn(self, _v_string);
        return ret;
    }
    /// method [set_long](https://docs.gtk.org/gobject/method.Value.set_long.html)
    pub fn setLong(self: *Value, _v_long: i64) void {
        const cFn = @extern(*const fn (*Value, i64) callconv(.c) void, .{ .name = "g_value_set_long" });
        const ret = cFn(self, _v_long);
        return ret;
    }
    /// method [set_object](https://docs.gtk.org/gobject/method.Value.set_object.html)
    pub fn setObject(self: *Value, _v_object: ?*gobject.Object) void {
        const cFn = @extern(*const fn (*Value, ?*gobject.Object) callconv(.c) void, .{ .name = "g_value_set_object" });
        const ret = cFn(self, _v_object);
        return ret;
    }
    /// method [set_param](https://docs.gtk.org/gobject/method.Value.set_param.html)
    pub fn setParam(self: *Value, _param: ?*gobject.ParamSpec) void {
        const cFn = @extern(*const fn (*Value, ?*gobject.ParamSpec) callconv(.c) void, .{ .name = "g_value_set_param" });
        const ret = cFn(self, _param);
        return ret;
    }
    /// method [set_pointer](https://docs.gtk.org/gobject/method.Value.set_pointer.html)
    pub fn setPointer(self: *Value, _v_pointer: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_set_pointer" });
        const ret = cFn(self, @ptrCast(_v_pointer));
        return ret;
    }
    /// method [set_schar](https://docs.gtk.org/gobject/method.Value.set_schar.html)
    pub fn setSchar(self: *Value, _v_char: i8) void {
        const cFn = @extern(*const fn (*Value, i8) callconv(.c) void, .{ .name = "g_value_set_schar" });
        const ret = cFn(self, _v_char);
        return ret;
    }
    /// method [set_static_boxed](https://docs.gtk.org/gobject/method.Value.set_static_boxed.html)
    pub fn setStaticBoxed(self: *Value, _v_boxed: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_set_static_boxed" });
        const ret = cFn(self, @ptrCast(_v_boxed));
        return ret;
    }
    /// method [set_static_string](https://docs.gtk.org/gobject/method.Value.set_static_string.html)
    pub fn setStaticString(self: *Value, _v_string: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Value, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_value_set_static_string" });
        const ret = cFn(self, _v_string);
        return ret;
    }
    /// method [set_string](https://docs.gtk.org/gobject/method.Value.set_string.html)
    pub fn setString(self: *Value, _v_string: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Value, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_value_set_string" });
        const ret = cFn(self, _v_string);
        return ret;
    }
    /// Deprecated:
    /// method [set_string_take_ownership](https://docs.gtk.org/gobject/method.Value.set_string_take_ownership.html)
    pub const setStringTakeOwnership = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn setStringTakeOwnership(self: *Value, _v_string: ?[*:0]const u8) void {
            const cFn = @extern(*const fn (*Value, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_value_set_string_take_ownership" });
            const ret = cFn(self, _v_string);
            return ret;
        }
    }.setStringTakeOwnership;
    /// method [set_uchar](https://docs.gtk.org/gobject/method.Value.set_uchar.html)
    pub fn setUchar(self: *Value, _v_uchar: u8) void {
        const cFn = @extern(*const fn (*Value, u8) callconv(.c) void, .{ .name = "g_value_set_uchar" });
        const ret = cFn(self, _v_uchar);
        return ret;
    }
    /// method [set_uint](https://docs.gtk.org/gobject/method.Value.set_uint.html)
    pub fn setUint(self: *Value, _v_uint: u32) void {
        const cFn = @extern(*const fn (*Value, u32) callconv(.c) void, .{ .name = "g_value_set_uint" });
        const ret = cFn(self, _v_uint);
        return ret;
    }
    /// method [set_uint64](https://docs.gtk.org/gobject/method.Value.set_uint64.html)
    pub fn setUint64(self: *Value, _v_uint64: u64) void {
        const cFn = @extern(*const fn (*Value, u64) callconv(.c) void, .{ .name = "g_value_set_uint64" });
        const ret = cFn(self, _v_uint64);
        return ret;
    }
    /// method [set_ulong](https://docs.gtk.org/gobject/method.Value.set_ulong.html)
    pub fn setUlong(self: *Value, _v_ulong: u64) void {
        const cFn = @extern(*const fn (*Value, u64) callconv(.c) void, .{ .name = "g_value_set_ulong" });
        const ret = cFn(self, _v_ulong);
        return ret;
    }
    /// method [set_variant](https://docs.gtk.org/gobject/method.Value.set_variant.html)
    pub fn setVariant(self: *Value, _variant: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Value, ?*glib.Variant) callconv(.c) void, .{ .name = "g_value_set_variant" });
        const ret = cFn(self, _variant);
        return ret;
    }
    /// method [steal_string](https://docs.gtk.org/gobject/method.Value.steal_string.html)
    pub fn stealString(self: *Value) ?[*:0]u8 {
        const cFn = @extern(*const fn (*Value) callconv(.c) ?[*:0]u8, .{ .name = "g_value_steal_string" });
        const ret = cFn(self);
        return ret;
    }
    /// method [take_boxed](https://docs.gtk.org/gobject/method.Value.take_boxed.html)
    pub fn takeBoxed(self: *Value, _v_boxed: ?*anyopaque) void {
        const cFn = @extern(*const fn (*Value, ?*anyopaque) callconv(.c) void, .{ .name = "g_value_take_boxed" });
        const ret = cFn(self, @ptrCast(_v_boxed));
        return ret;
    }
    /// method [take_string](https://docs.gtk.org/gobject/method.Value.take_string.html)
    pub fn takeString(self: *Value, _v_string: ?[*:0]const u8) void {
        const cFn = @extern(*const fn (*Value, ?[*:0]const u8) callconv(.c) void, .{ .name = "g_value_take_string" });
        const ret = cFn(self, _v_string);
        return ret;
    }
    /// method [take_variant](https://docs.gtk.org/gobject/method.Value.take_variant.html)
    pub fn takeVariant(self: *Value, _variant: ?*glib.Variant) void {
        const cFn = @extern(*const fn (*Value, ?*glib.Variant) callconv(.c) void, .{ .name = "g_value_take_variant" });
        const ret = cFn(self, _variant);
        return ret;
    }
    /// method [transform](https://docs.gtk.org/gobject/method.Value.transform.html)
    pub fn transform(self: *Value, _dest_value: *gobject.Value) bool {
        const cFn = @extern(*const fn (*Value, *gobject.Value) callconv(.c) bool, .{ .name = "g_value_transform" });
        const ret = cFn(self, _dest_value);
        return ret;
    }
    /// method [unset](https://docs.gtk.org/gobject/method.Value.unset.html)
    pub fn unset(self: *Value) void {
        const cFn = @extern(*const fn (*Value) callconv(.c) void, .{ .name = "g_value_unset" });
        const ret = cFn(self);
        return ret;
    }
    /// type func [type_compatible](https://docs.gtk.org/gobject/type_func.Value.type_compatible.html)
    pub fn typeCompatible(_src_type: core.Type, _dest_type: core.Type) bool {
        const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) bool, .{ .name = "g_value_type_compatible" });
        const ret = cFn(_src_type, _dest_type);
        return ret;
    }
    /// type func [type_transformable](https://docs.gtk.org/gobject/type_func.Value.type_transformable.html)
    pub fn typeTransformable(_src_type: core.Type, _dest_type: core.Type) bool {
        const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) bool, .{ .name = "g_value_type_transformable" });
        const ret = cFn(_src_type, _dest_type);
        return ret;
    }
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_value_get_type" });
        return cFn();
    }
};
/// Deprecated:
/// Struct [ValueArray](https://docs.gtk.org/gobject/struct.ValueArray.html)
pub const ValueArray = if (config.disable_deprecated) core.Deprecated else extern struct {
    n_values: u32,
    values: ?*gobject.Value,
    n_prealloced: u32,
    /// Deprecated:
    /// ctor [new](https://docs.gtk.org/gobject/ctor.ValueArray.new.html)
    pub const new = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn new(_n_prealloced: u32) *ValueArray {
            const cFn = @extern(*const fn (u32) callconv(.c) *ValueArray, .{ .name = "g_value_array_new" });
            const ret = cFn(_n_prealloced);
            return ret;
        }
    }.new;
    /// Deprecated:
    /// method [append](https://docs.gtk.org/gobject/method.ValueArray.append.html)
    pub const append = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn append(self: *ValueArray, _value: ?*gobject.Value) *gobject.ValueArray {
            const cFn = @extern(*const fn (*ValueArray, ?*gobject.Value) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_append" });
            const ret = cFn(self, _value);
            return ret;
        }
    }.append;
    /// Deprecated:
    /// method [copy](https://docs.gtk.org/gobject/method.ValueArray.copy.html)
    pub const copy = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn copy(self: *ValueArray) *gobject.ValueArray {
            const cFn = @extern(*const fn (*ValueArray) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_copy" });
            const ret = cFn(self);
            return ret;
        }
    }.copy;
    /// Deprecated:
    /// method [get_nth](https://docs.gtk.org/gobject/method.ValueArray.get_nth.html)
    pub const getNth = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn getNth(self: *ValueArray, _index_: u32) *gobject.Value {
            const cFn = @extern(*const fn (*ValueArray, u32) callconv(.c) *gobject.Value, .{ .name = "g_value_array_get_nth" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.getNth;
    /// Deprecated:
    /// method [insert](https://docs.gtk.org/gobject/method.ValueArray.insert.html)
    pub const insert = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn insert(self: *ValueArray, _index_: u32, _value: ?*gobject.Value) *gobject.ValueArray {
            const cFn = @extern(*const fn (*ValueArray, u32, ?*gobject.Value) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_insert" });
            const ret = cFn(self, _index_, _value);
            return ret;
        }
    }.insert;
    /// Deprecated:
    /// method [prepend](https://docs.gtk.org/gobject/method.ValueArray.prepend.html)
    pub const prepend = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn prepend(self: *ValueArray, _value: ?*gobject.Value) *gobject.ValueArray {
            const cFn = @extern(*const fn (*ValueArray, ?*gobject.Value) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_prepend" });
            const ret = cFn(self, _value);
            return ret;
        }
    }.prepend;
    /// Deprecated:
    /// method [remove](https://docs.gtk.org/gobject/method.ValueArray.remove.html)
    pub const remove = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn remove(self: *ValueArray, _index_: u32) *gobject.ValueArray {
            const cFn = @extern(*const fn (*ValueArray, u32) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_remove" });
            const ret = cFn(self, _index_);
            return ret;
        }
    }.remove;
    /// Deprecated:
    /// method [sort](https://docs.gtk.org/gobject/method.ValueArray.sort.html)
    pub const sort = if (config.disable_deprecated) core.Deprecated else struct {
        pub fn sort(self: *ValueArray, compare_func: anytype, compare_func_args: anytype) *gobject.ValueArray {
            var closure_compare_func = core.zig_closure(compare_func, compare_func_args, &.{ i32, ?*anyopaque, ?*anyopaque });
            defer closure_compare_func.deinit();
            const _compare_func: glib.CompareDataFunc = @ptrCast(closure_compare_func.c_closure());
            const _user_data: ?*anyopaque = @ptrCast(closure_compare_func.c_data());
            const cFn = @extern(*const fn (*ValueArray, glib.CompareDataFunc, ?*anyopaque) callconv(.c) *gobject.ValueArray, .{ .name = "g_value_array_sort_with_data" });
            const ret = cFn(self, _compare_func, @ptrCast(_user_data));
            return ret;
        }
    }.sort;
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_value_array_get_type" });
        return cFn();
    }
};
/// callback [ValueTransform](https://docs.gtk.org/gobject/callback.ValueTransform.html)
pub const ValueTransform = *const fn (_src_value: *gobject.Value, _dest_value: *gobject.Value) callconv(.c) void;
/// Struct [VariantBuilder](https://docs.gtk.org/gobject/struct.VariantBuilder.html)
pub const VariantBuilder = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_builder_get_type" });
        return cFn();
    }
};
/// Struct [VariantDict](https://docs.gtk.org/gobject/struct.VariantDict.html)
pub const VariantDict = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_dict_get_type" });
        return cFn();
    }
};
/// Struct [VariantType](https://docs.gtk.org/gobject/struct.VariantType.html)
pub const VariantType = opaque {
    pub fn gType() core.Type {
        const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_type_get_gtype" });
        return cFn();
    }
};
/// callback [WeakNotify](https://docs.gtk.org/gobject/callback.WeakNotify.html)
pub const WeakNotify = *const fn (_data: ?*anyopaque, _where_the_object_was: *gobject.Object) callconv(.c) void;
/// Struct [WeakRef](https://docs.gtk.org/gobject/struct.WeakRef.html)
pub const WeakRef = opaque {};
/// Union [_Value__data__union](https://docs.gtk.org/gobject/union._Value__data__union.html)
pub const _Value__data__union = extern union {
    v_int: i32,
    v_uint: u32,
    v_long: i64,
    v_ulong: u64,
    v_int64: i64,
    v_uint64: u64,
    v_float: f32,
    v_double: f64,
    v_pointer: ?*anyopaque,
};
/// func [boxed_copy](https://docs.gtk.org/gobject/func.boxed_copy.html)
pub fn boxedCopy(_boxed_type: core.Type, _src_boxed: *anyopaque) *anyopaque {
    const cFn = @extern(*const fn (core.Type, *anyopaque) callconv(.c) *anyopaque, .{ .name = "g_boxed_copy" });
    const ret = cFn(_boxed_type, @ptrCast(_src_boxed));
    return ret;
}
/// func [boxed_free](https://docs.gtk.org/gobject/func.boxed_free.html)
pub fn boxedFree(_boxed_type: core.Type, _boxed: *anyopaque) void {
    const cFn = @extern(*const fn (core.Type, *anyopaque) callconv(.c) void, .{ .name = "g_boxed_free" });
    const ret = cFn(_boxed_type, @ptrCast(_boxed));
    return ret;
}
/// func [boxed_type_register_static](https://docs.gtk.org/gobject/func.boxed_type_register_static.html)
pub fn boxedTypeRegisterStatic(_name: [*:0]const u8, _boxed_copy: gobject.BoxedCopyFunc, _boxed_free: gobject.BoxedFreeFunc) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8, gobject.BoxedCopyFunc, gobject.BoxedFreeFunc) callconv(.c) core.Type, .{ .name = "g_boxed_type_register_static" });
    const ret = cFn(_name, _boxed_copy, _boxed_free);
    return ret;
}
/// func [cclosure_marshal_BOOLEAN__BOXED_BOXED](https://docs.gtk.org/gobject/func.cclosure_marshal_BOOLEAN__BOXED_BOXED.html)
pub fn cclosureMarshalBOOLEANBOXEDBOXED(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_BOOLEAN__BOXED_BOXED" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_BOOLEAN__FLAGS](https://docs.gtk.org/gobject/func.cclosure_marshal_BOOLEAN__FLAGS.html)
pub fn cclosureMarshalBOOLEANFLAGS(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_BOOLEAN__FLAGS" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_STRING__OBJECT_POINTER](https://docs.gtk.org/gobject/func.cclosure_marshal_STRING__OBJECT_POINTER.html)
pub fn cclosureMarshalSTRINGOBJECTPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_STRING__OBJECT_POINTER" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__BOOLEAN](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__BOOLEAN.html)
pub fn cclosureMarshalVOIDBOOLEAN(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__BOOLEAN" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__BOXED](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__BOXED.html)
pub fn cclosureMarshalVOIDBOXED(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__BOXED" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__CHAR](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__CHAR.html)
pub fn cclosureMarshalVOIDCHAR(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__CHAR" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__DOUBLE](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__DOUBLE.html)
pub fn cclosureMarshalVOIDDOUBLE(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__DOUBLE" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__ENUM](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__ENUM.html)
pub fn cclosureMarshalVOIDENUM(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__ENUM" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__FLAGS](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__FLAGS.html)
pub fn cclosureMarshalVOIDFLAGS(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__FLAGS" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__FLOAT](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__FLOAT.html)
pub fn cclosureMarshalVOIDFLOAT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__FLOAT" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__INT](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__INT.html)
pub fn cclosureMarshalVOIDINT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__INT" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__LONG](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__LONG.html)
pub fn cclosureMarshalVOIDLONG(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__LONG" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__OBJECT](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__OBJECT.html)
pub fn cclosureMarshalVOIDOBJECT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__OBJECT" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__PARAM](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__PARAM.html)
pub fn cclosureMarshalVOIDPARAM(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__PARAM" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__POINTER](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__POINTER.html)
pub fn cclosureMarshalVOIDPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__POINTER" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__STRING](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__STRING.html)
pub fn cclosureMarshalVOIDSTRING(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__STRING" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__UCHAR](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__UCHAR.html)
pub fn cclosureMarshalVOIDUCHAR(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UCHAR" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__UINT](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__UINT.html)
pub fn cclosureMarshalVOIDUINT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UINT" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__UINT_POINTER](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__UINT_POINTER.html)
pub fn cclosureMarshalVOIDUINTPOINTER(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__UINT_POINTER" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__ULONG](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__ULONG.html)
pub fn cclosureMarshalVOIDULONG(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__ULONG" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__VARIANT](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__VARIANT.html)
pub fn cclosureMarshalVOIDVARIANT(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__VARIANT" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_VOID__VOID](https://docs.gtk.org/gobject/func.cclosure_marshal_VOID__VOID.html)
pub fn cclosureMarshalVOIDVOID(_closure: *gobject.Closure, _return_value: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_VOID__VOID" });
    const ret = cFn(_closure, _return_value, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [cclosure_marshal_generic](https://docs.gtk.org/gobject/func.cclosure_marshal_generic.html)
pub fn cclosureMarshalGeneric(_closure: *gobject.Closure, _return_gvalue: *gobject.Value, _n_param_values: u32, _param_values: *gobject.Value, _invocation_hint: ?*anyopaque, _marshal_data: ?*anyopaque) void {
    const cFn = @extern(*const fn (*gobject.Closure, *gobject.Value, u32, *gobject.Value, ?*anyopaque, ?*anyopaque) callconv(.c) void, .{ .name = "g_cclosure_marshal_generic" });
    const ret = cFn(_closure, _return_gvalue, _n_param_values, _param_values, @ptrCast(_invocation_hint), @ptrCast(_marshal_data));
    return ret;
}
/// func [clear_signal_handler](https://docs.gtk.org/gobject/func.clear_signal_handler.html)
pub fn clearSignalHandler(_handler_id_ptr: *u64, _instance: *gobject.Object) void {
    const cFn = @extern(*const fn (*u64, *gobject.Object) callconv(.c) void, .{ .name = "g_clear_signal_handler" });
    const ret = cFn(_handler_id_ptr, _instance);
    return ret;
}
/// func [enum_complete_type_info](https://docs.gtk.org/gobject/func.enum_complete_type_info.html)
pub fn enumCompleteTypeInfo(_g_enum_type: core.Type, _const_values: *gobject.EnumValue) struct {
    ret: void,
    info: gobject.TypeInfo,
} {
    var info_out: gobject.TypeInfo = undefined;
    const _info = &info_out;
    const cFn = @extern(*const fn (core.Type, *gobject.TypeInfo, *gobject.EnumValue) callconv(.c) void, .{ .name = "g_enum_complete_type_info" });
    const ret = cFn(_g_enum_type, _info, _const_values);
    return .{ .ret = ret, .info = info_out };
}
/// func [enum_get_value](https://docs.gtk.org/gobject/func.enum_get_value.html)
pub fn enumGetValue(_enum_class: *gobject.EnumClass, _value: i32) ?*gobject.EnumValue {
    const cFn = @extern(*const fn (*gobject.EnumClass, i32) callconv(.c) ?*gobject.EnumValue, .{ .name = "g_enum_get_value" });
    const ret = cFn(_enum_class, _value);
    return ret;
}
/// func [enum_get_value_by_name](https://docs.gtk.org/gobject/func.enum_get_value_by_name.html)
pub fn enumGetValueByName(_enum_class: *gobject.EnumClass, _name: [*:0]const u8) ?*gobject.EnumValue {
    const cFn = @extern(*const fn (*gobject.EnumClass, [*:0]const u8) callconv(.c) ?*gobject.EnumValue, .{ .name = "g_enum_get_value_by_name" });
    const ret = cFn(_enum_class, _name);
    return ret;
}
/// func [enum_get_value_by_nick](https://docs.gtk.org/gobject/func.enum_get_value_by_nick.html)
pub fn enumGetValueByNick(_enum_class: *gobject.EnumClass, _nick: [*:0]const u8) ?*gobject.EnumValue {
    const cFn = @extern(*const fn (*gobject.EnumClass, [*:0]const u8) callconv(.c) ?*gobject.EnumValue, .{ .name = "g_enum_get_value_by_nick" });
    const ret = cFn(_enum_class, _nick);
    return ret;
}
/// func [enum_register_static](https://docs.gtk.org/gobject/func.enum_register_static.html)
pub fn enumRegisterStatic(_name: [*:0]const u8, _const_static_values: *gobject.EnumValue) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8, *gobject.EnumValue) callconv(.c) core.Type, .{ .name = "g_enum_register_static" });
    const ret = cFn(_name, _const_static_values);
    return ret;
}
/// func [enum_to_string](https://docs.gtk.org/gobject/func.enum_to_string.html)
pub fn enumToString(_g_enum_type: core.Type, _value: i32) [*:0]u8 {
    const cFn = @extern(*const fn (core.Type, i32) callconv(.c) [*:0]u8, .{ .name = "g_enum_to_string" });
    const ret = cFn(_g_enum_type, _value);
    return ret;
}
/// func [flags_complete_type_info](https://docs.gtk.org/gobject/func.flags_complete_type_info.html)
pub fn flagsCompleteTypeInfo(_g_flags_type: core.Type, _const_values: *gobject.FlagsValue) struct {
    ret: void,
    info: gobject.TypeInfo,
} {
    var info_out: gobject.TypeInfo = undefined;
    const _info = &info_out;
    const cFn = @extern(*const fn (core.Type, *gobject.TypeInfo, *gobject.FlagsValue) callconv(.c) void, .{ .name = "g_flags_complete_type_info" });
    const ret = cFn(_g_flags_type, _info, _const_values);
    return .{ .ret = ret, .info = info_out };
}
/// func [flags_get_first_value](https://docs.gtk.org/gobject/func.flags_get_first_value.html)
pub fn flagsGetFirstValue(_flags_class: *gobject.FlagsClass, _value: u32) ?*gobject.FlagsValue {
    const cFn = @extern(*const fn (*gobject.FlagsClass, u32) callconv(.c) ?*gobject.FlagsValue, .{ .name = "g_flags_get_first_value" });
    const ret = cFn(_flags_class, _value);
    return ret;
}
/// func [flags_get_value_by_name](https://docs.gtk.org/gobject/func.flags_get_value_by_name.html)
pub fn flagsGetValueByName(_flags_class: *gobject.FlagsClass, _name: [*:0]const u8) ?*gobject.FlagsValue {
    const cFn = @extern(*const fn (*gobject.FlagsClass, [*:0]const u8) callconv(.c) ?*gobject.FlagsValue, .{ .name = "g_flags_get_value_by_name" });
    const ret = cFn(_flags_class, _name);
    return ret;
}
/// func [flags_get_value_by_nick](https://docs.gtk.org/gobject/func.flags_get_value_by_nick.html)
pub fn flagsGetValueByNick(_flags_class: *gobject.FlagsClass, _nick: [*:0]const u8) ?*gobject.FlagsValue {
    const cFn = @extern(*const fn (*gobject.FlagsClass, [*:0]const u8) callconv(.c) ?*gobject.FlagsValue, .{ .name = "g_flags_get_value_by_nick" });
    const ret = cFn(_flags_class, _nick);
    return ret;
}
/// func [flags_register_static](https://docs.gtk.org/gobject/func.flags_register_static.html)
pub fn flagsRegisterStatic(_name: [*:0]const u8, _const_static_values: *gobject.FlagsValue) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8, *gobject.FlagsValue) callconv(.c) core.Type, .{ .name = "g_flags_register_static" });
    const ret = cFn(_name, _const_static_values);
    return ret;
}
/// func [flags_to_string](https://docs.gtk.org/gobject/func.flags_to_string.html)
pub fn flagsToString(_flags_type: core.Type, _value: u32) [*:0]u8 {
    const cFn = @extern(*const fn (core.Type, u32) callconv(.c) [*:0]u8, .{ .name = "g_flags_to_string" });
    const ret = cFn(_flags_type, _value);
    return ret;
}
/// func [gtype_get_type](https://docs.gtk.org/gobject/func.gtype_get_type.html)
pub fn gtypeGetType() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_gtype_get_type" });
    const ret = cFn();
    return ret;
}
/// func [param_spec_boolean](https://docs.gtk.org/gobject/func.param_spec_boolean.html)
pub fn paramSpecBoolean(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _default_value: bool, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, bool, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_boolean" });
    const ret = cFn(_name, _nick, _blurb, _default_value, _flags);
    return ret;
}
/// func [param_spec_boxed](https://docs.gtk.org/gobject/func.param_spec_boxed.html)
pub fn paramSpecBoxed(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _boxed_type: core.Type, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_boxed" });
    const ret = cFn(_name, _nick, _blurb, _boxed_type, _flags);
    return ret;
}
/// func [param_spec_char](https://docs.gtk.org/gobject/func.param_spec_char.html)
pub fn paramSpecChar(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: i8, _maximum: i8, _default_value: i8, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i8, i8, i8, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_char" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_double](https://docs.gtk.org/gobject/func.param_spec_double.html)
pub fn paramSpecDouble(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: f64, _maximum: f64, _default_value: f64, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, f64, f64, f64, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_double" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_enum](https://docs.gtk.org/gobject/func.param_spec_enum.html)
pub fn paramSpecEnum(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _enum_type: core.Type, _default_value: i32, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, i32, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_enum" });
    const ret = cFn(_name, _nick, _blurb, _enum_type, _default_value, _flags);
    return ret;
}
/// func [param_spec_flags](https://docs.gtk.org/gobject/func.param_spec_flags.html)
pub fn paramSpecFlags(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _flags_type: core.Type, _default_value: u32, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, u32, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_flags" });
    const ret = cFn(_name, _nick, _blurb, _flags_type, _default_value, _flags);
    return ret;
}
/// func [param_spec_float](https://docs.gtk.org/gobject/func.param_spec_float.html)
pub fn paramSpecFloat(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: f32, _maximum: f32, _default_value: f32, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, f32, f32, f32, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_float" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_gtype](https://docs.gtk.org/gobject/func.param_spec_gtype.html)
pub fn paramSpecGtype(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _is_a_type: core.Type, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_gtype" });
    const ret = cFn(_name, _nick, _blurb, _is_a_type, _flags);
    return ret;
}
/// func [param_spec_int](https://docs.gtk.org/gobject/func.param_spec_int.html)
pub fn paramSpecInt(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: i32, _maximum: i32, _default_value: i32, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i32, i32, i32, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_int" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_int64](https://docs.gtk.org/gobject/func.param_spec_int64.html)
pub fn paramSpecInt64(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: i64, _maximum: i64, _default_value: i64, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i64, i64, i64, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_int64" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_long](https://docs.gtk.org/gobject/func.param_spec_long.html)
pub fn paramSpecLong(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: i64, _maximum: i64, _default_value: i64, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, i64, i64, i64, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_long" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_object](https://docs.gtk.org/gobject/func.param_spec_object.html)
pub fn paramSpecObject(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _object_type: core.Type, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_object" });
    const ret = cFn(_name, _nick, _blurb, _object_type, _flags);
    return ret;
}
/// func [param_spec_param](https://docs.gtk.org/gobject/func.param_spec_param.html)
pub fn paramSpecParam(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _param_type: core.Type, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Type, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_param" });
    const ret = cFn(_name, _nick, _blurb, _param_type, _flags);
    return ret;
}
/// func [param_spec_pointer](https://docs.gtk.org/gobject/func.param_spec_pointer.html)
pub fn paramSpecPointer(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_pointer" });
    const ret = cFn(_name, _nick, _blurb, _flags);
    return ret;
}
/// func [param_spec_string](https://docs.gtk.org/gobject/func.param_spec_string.html)
pub fn paramSpecString(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _default_value: ?[*:0]const u8, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_string" });
    const ret = cFn(_name, _nick, _blurb, _default_value, _flags);
    return ret;
}
/// func [param_spec_uchar](https://docs.gtk.org/gobject/func.param_spec_uchar.html)
pub fn paramSpecUchar(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: u8, _maximum: u8, _default_value: u8, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, u8, u8, u8, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_uchar" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_uint](https://docs.gtk.org/gobject/func.param_spec_uint.html)
pub fn paramSpecUint(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: u32, _maximum: u32, _default_value: u32, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, u32, u32, u32, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_uint" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_uint64](https://docs.gtk.org/gobject/func.param_spec_uint64.html)
pub fn paramSpecUint64(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: u64, _maximum: u64, _default_value: u64, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, u64, u64, u64, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_uint64" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_ulong](https://docs.gtk.org/gobject/func.param_spec_ulong.html)
pub fn paramSpecUlong(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _minimum: u64, _maximum: u64, _default_value: u64, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, u64, u64, u64, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_ulong" });
    const ret = cFn(_name, _nick, _blurb, _minimum, _maximum, _default_value, _flags);
    return ret;
}
/// func [param_spec_unichar](https://docs.gtk.org/gobject/func.param_spec_unichar.html)
pub fn paramSpecUnichar(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _default_value: core.Unichar, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, core.Unichar, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_unichar" });
    const ret = cFn(_name, _nick, _blurb, _default_value, _flags);
    return ret;
}
/// func [param_spec_variant](https://docs.gtk.org/gobject/func.param_spec_variant.html)
pub fn paramSpecVariant(_name: [*:0]const u8, _nick: ?[*:0]const u8, _blurb: ?[*:0]const u8, _type: *glib.VariantType, _default_value: ?*glib.Variant, _flags: gobject.ParamFlags) *gobject.ParamSpec {
    const cFn = @extern(*const fn ([*:0]const u8, ?[*:0]const u8, ?[*:0]const u8, *glib.VariantType, ?*glib.Variant, gobject.ParamFlags) callconv(.c) *gobject.ParamSpec, .{ .name = "g_param_spec_variant" });
    const ret = cFn(_name, _nick, _blurb, _type, _default_value, _flags);
    return ret;
}
/// func [param_type_register_static](https://docs.gtk.org/gobject/func.param_type_register_static.html)
pub fn paramTypeRegisterStatic(_name: [*:0]const u8, _pspec_info: *gobject.ParamSpecTypeInfo) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8, *gobject.ParamSpecTypeInfo) callconv(.c) core.Type, .{ .name = "g_param_type_register_static" });
    const ret = cFn(_name, _pspec_info);
    return ret;
}
/// func [param_value_convert](https://docs.gtk.org/gobject/func.param_value_convert.html)
pub fn paramValueConvert(_pspec: *gobject.ParamSpec, _src_value: *gobject.Value, _dest_value: *gobject.Value, _strict_validation: bool) bool {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value, *gobject.Value, bool) callconv(.c) bool, .{ .name = "g_param_value_convert" });
    const ret = cFn(_pspec, _src_value, _dest_value, _strict_validation);
    return ret;
}
/// func [param_value_defaults](https://docs.gtk.org/gobject/func.param_value_defaults.html)
pub fn paramValueDefaults(_pspec: *gobject.ParamSpec, _value: *gobject.Value) bool {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value) callconv(.c) bool, .{ .name = "g_param_value_defaults" });
    const ret = cFn(_pspec, _value);
    return ret;
}
/// func [param_value_is_valid](https://docs.gtk.org/gobject/func.param_value_is_valid.html)
pub fn paramValueIsValid(_pspec: *gobject.ParamSpec, _value: *gobject.Value) bool {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value) callconv(.c) bool, .{ .name = "g_param_value_is_valid" });
    const ret = cFn(_pspec, _value);
    return ret;
}
/// func [param_value_set_default](https://docs.gtk.org/gobject/func.param_value_set_default.html)
pub fn paramValueSetDefault(_pspec: *gobject.ParamSpec, _value: *gobject.Value) void {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value) callconv(.c) void, .{ .name = "g_param_value_set_default" });
    const ret = cFn(_pspec, _value);
    return ret;
}
/// func [param_value_validate](https://docs.gtk.org/gobject/func.param_value_validate.html)
pub fn paramValueValidate(_pspec: *gobject.ParamSpec, _value: *gobject.Value) bool {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value) callconv(.c) bool, .{ .name = "g_param_value_validate" });
    const ret = cFn(_pspec, _value);
    return ret;
}
/// func [param_values_cmp](https://docs.gtk.org/gobject/func.param_values_cmp.html)
pub fn paramValuesCmp(_pspec: *gobject.ParamSpec, _value1: *gobject.Value, _value2: *gobject.Value) i32 {
    const cFn = @extern(*const fn (*gobject.ParamSpec, *gobject.Value, *gobject.Value) callconv(.c) i32, .{ .name = "g_param_values_cmp" });
    const ret = cFn(_pspec, _value1, _value2);
    return ret;
}
/// func [pointer_type_register_static](https://docs.gtk.org/gobject/func.pointer_type_register_static.html)
pub fn pointerTypeRegisterStatic(_name: [*:0]const u8) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) core.Type, .{ .name = "g_pointer_type_register_static" });
    const ret = cFn(_name);
    return ret;
}
/// func [signal_accumulator_first_wins](https://docs.gtk.org/gobject/func.signal_accumulator_first_wins.html)
pub fn signalAccumulatorFirstWins(_ihint: *gobject.SignalInvocationHint, _return_accu: *gobject.Value, _handler_return: *gobject.Value, _dummy: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*gobject.SignalInvocationHint, *gobject.Value, *gobject.Value, ?*anyopaque) callconv(.c) bool, .{ .name = "g_signal_accumulator_first_wins" });
    const ret = cFn(_ihint, _return_accu, _handler_return, @ptrCast(_dummy));
    return ret;
}
/// func [signal_accumulator_true_handled](https://docs.gtk.org/gobject/func.signal_accumulator_true_handled.html)
pub fn signalAccumulatorTrueHandled(_ihint: *gobject.SignalInvocationHint, _return_accu: *gobject.Value, _handler_return: *gobject.Value, _dummy: ?*anyopaque) bool {
    const cFn = @extern(*const fn (*gobject.SignalInvocationHint, *gobject.Value, *gobject.Value, ?*anyopaque) callconv(.c) bool, .{ .name = "g_signal_accumulator_true_handled" });
    const ret = cFn(_ihint, _return_accu, _handler_return, @ptrCast(_dummy));
    return ret;
}
/// func [signal_add_emission_hook](https://docs.gtk.org/gobject/func.signal_add_emission_hook.html)
pub fn signalAddEmissionHook(_signal_id: u32, _detail: u32, hook_func: anytype, hook_func_args: anytype) u64 {
    var closure_hook_func = core.zig_closure(hook_func, hook_func_args, &.{ bool, *gobject.SignalInvocationHint, u32, [*]gobject.Value });
    const _hook_func: gobject.SignalEmissionHook = @ptrCast(closure_hook_func.c_closure());
    const _hook_data: ?*anyopaque = @ptrCast(closure_hook_func.c_data());
    const _data_destroy: ?glib.DestroyNotify = @ptrCast(closure_hook_func.c_destroy());
    const cFn = @extern(*const fn (u32, u32, gobject.SignalEmissionHook, ?*anyopaque, ?glib.DestroyNotify) callconv(.c) u64, .{ .name = "g_signal_add_emission_hook" });
    const ret = cFn(_signal_id, _detail, _hook_func, @ptrCast(_hook_data), _data_destroy);
    return ret;
}
/// func [signal_chain_from_overridden](https://docs.gtk.org/gobject/func.signal_chain_from_overridden.html)
pub fn signalChainFromOverridden(_instance_and_params: [*]gobject.Value, _return_value: *gobject.Value) void {
    const cFn = @extern(*const fn ([*]gobject.Value, *gobject.Value) callconv(.c) void, .{ .name = "g_signal_chain_from_overridden" });
    const ret = cFn(_instance_and_params, _return_value);
    return ret;
}
/// func [signal_connect_closure](https://docs.gtk.org/gobject/func.signal_connect_closure.html)
pub fn signalConnectClosure(_instance: *gobject.Object, _detailed_signal: [*:0]const u8, _closure: *gobject.Closure, _after: bool) u64 {
    const cFn = @extern(*const fn (*gobject.Object, [*:0]const u8, *gobject.Closure, bool) callconv(.c) u64, .{ .name = "g_signal_connect_closure" });
    const ret = cFn(_instance, _detailed_signal, _closure, _after);
    return ret;
}
/// func [signal_connect_closure_by_id](https://docs.gtk.org/gobject/func.signal_connect_closure_by_id.html)
pub fn signalConnectClosureById(_instance: *gobject.Object, _signal_id: u32, _detail: u32, _closure: *gobject.Closure, _after: bool) u64 {
    const cFn = @extern(*const fn (*gobject.Object, u32, u32, *gobject.Closure, bool) callconv(.c) u64, .{ .name = "g_signal_connect_closure_by_id" });
    const ret = cFn(_instance, _signal_id, _detail, _closure, _after);
    return ret;
}
/// func [signal_emitv](https://docs.gtk.org/gobject/func.signal_emitv.html)
pub fn signalEmitv(_instance_and_params: [*]gobject.Value, _signal_id: u32, _detail: u32, _return_value: ?*gobject.Value) void {
    const cFn = @extern(*const fn ([*]gobject.Value, u32, u32, ?*gobject.Value) callconv(.c) void, .{ .name = "g_signal_emitv" });
    const ret = cFn(_instance_and_params, _signal_id, _detail, _return_value);
    return ret;
}
/// func [signal_get_invocation_hint](https://docs.gtk.org/gobject/func.signal_get_invocation_hint.html)
pub fn signalGetInvocationHint(_instance: *gobject.Object) ?*gobject.SignalInvocationHint {
    const cFn = @extern(*const fn (*gobject.Object) callconv(.c) ?*gobject.SignalInvocationHint, .{ .name = "g_signal_get_invocation_hint" });
    const ret = cFn(_instance);
    return ret;
}
/// func [signal_handler_block](https://docs.gtk.org/gobject/func.signal_handler_block.html)
pub fn signalHandlerBlock(_instance: *gobject.Object, _handler_id: u64) void {
    const cFn = @extern(*const fn (*gobject.Object, u64) callconv(.c) void, .{ .name = "g_signal_handler_block" });
    const ret = cFn(_instance, _handler_id);
    return ret;
}
/// func [signal_handler_disconnect](https://docs.gtk.org/gobject/func.signal_handler_disconnect.html)
pub fn signalHandlerDisconnect(_instance: *gobject.Object, _handler_id: u64) void {
    const cFn = @extern(*const fn (*gobject.Object, u64) callconv(.c) void, .{ .name = "g_signal_handler_disconnect" });
    const ret = cFn(_instance, _handler_id);
    return ret;
}
/// func [signal_handler_find](https://docs.gtk.org/gobject/func.signal_handler_find.html)
pub fn signalHandlerFind(_instance: *gobject.Object, _mask: gobject.SignalMatchType, _signal_id: u32, _detail: u32, _closure: ?*gobject.Closure, _func: ?*anyopaque, _data: ?*anyopaque) u64 {
    const cFn = @extern(*const fn (*gobject.Object, gobject.SignalMatchType, u32, u32, ?*gobject.Closure, ?*anyopaque, ?*anyopaque) callconv(.c) u64, .{ .name = "g_signal_handler_find" });
    const ret = cFn(_instance, _mask, _signal_id, _detail, _closure, @ptrCast(_func), @ptrCast(_data));
    return ret;
}
/// func [signal_handler_is_connected](https://docs.gtk.org/gobject/func.signal_handler_is_connected.html)
pub fn signalHandlerIsConnected(_instance: *gobject.Object, _handler_id: u64) bool {
    const cFn = @extern(*const fn (*gobject.Object, u64) callconv(.c) bool, .{ .name = "g_signal_handler_is_connected" });
    const ret = cFn(_instance, _handler_id);
    return ret;
}
/// func [signal_handler_unblock](https://docs.gtk.org/gobject/func.signal_handler_unblock.html)
pub fn signalHandlerUnblock(_instance: *gobject.Object, _handler_id: u64) void {
    const cFn = @extern(*const fn (*gobject.Object, u64) callconv(.c) void, .{ .name = "g_signal_handler_unblock" });
    const ret = cFn(_instance, _handler_id);
    return ret;
}
/// func [signal_handlers_block_matched](https://docs.gtk.org/gobject/func.signal_handlers_block_matched.html)
pub fn signalHandlersBlockMatched(_instance: *gobject.Object, _mask: gobject.SignalMatchType, _signal_id: u32, _detail: u32, _closure: ?*gobject.Closure, _func: ?*anyopaque, _data: ?*anyopaque) u32 {
    const cFn = @extern(*const fn (*gobject.Object, gobject.SignalMatchType, u32, u32, ?*gobject.Closure, ?*anyopaque, ?*anyopaque) callconv(.c) u32, .{ .name = "g_signal_handlers_block_matched" });
    const ret = cFn(_instance, _mask, _signal_id, _detail, _closure, @ptrCast(_func), @ptrCast(_data));
    return ret;
}
/// func [signal_handlers_destroy](https://docs.gtk.org/gobject/func.signal_handlers_destroy.html)
pub fn signalHandlersDestroy(_instance: *gobject.Object) void {
    const cFn = @extern(*const fn (*gobject.Object) callconv(.c) void, .{ .name = "g_signal_handlers_destroy" });
    const ret = cFn(_instance);
    return ret;
}
/// func [signal_handlers_disconnect_matched](https://docs.gtk.org/gobject/func.signal_handlers_disconnect_matched.html)
pub fn signalHandlersDisconnectMatched(_instance: *gobject.Object, _mask: gobject.SignalMatchType, _signal_id: u32, _detail: u32, _closure: ?*gobject.Closure, _func: ?*anyopaque, _data: ?*anyopaque) u32 {
    const cFn = @extern(*const fn (*gobject.Object, gobject.SignalMatchType, u32, u32, ?*gobject.Closure, ?*anyopaque, ?*anyopaque) callconv(.c) u32, .{ .name = "g_signal_handlers_disconnect_matched" });
    const ret = cFn(_instance, _mask, _signal_id, _detail, _closure, @ptrCast(_func), @ptrCast(_data));
    return ret;
}
/// func [signal_handlers_unblock_matched](https://docs.gtk.org/gobject/func.signal_handlers_unblock_matched.html)
pub fn signalHandlersUnblockMatched(_instance: *gobject.Object, _mask: gobject.SignalMatchType, _signal_id: u32, _detail: u32, _closure: ?*gobject.Closure, _func: ?*anyopaque, _data: ?*anyopaque) u32 {
    const cFn = @extern(*const fn (*gobject.Object, gobject.SignalMatchType, u32, u32, ?*gobject.Closure, ?*anyopaque, ?*anyopaque) callconv(.c) u32, .{ .name = "g_signal_handlers_unblock_matched" });
    const ret = cFn(_instance, _mask, _signal_id, _detail, _closure, @ptrCast(_func), @ptrCast(_data));
    return ret;
}
/// func [signal_has_handler_pending](https://docs.gtk.org/gobject/func.signal_has_handler_pending.html)
pub fn signalHasHandlerPending(_instance: *gobject.Object, _signal_id: u32, _detail: u32, _may_be_blocked: bool) bool {
    const cFn = @extern(*const fn (*gobject.Object, u32, u32, bool) callconv(.c) bool, .{ .name = "g_signal_has_handler_pending" });
    const ret = cFn(_instance, _signal_id, _detail, _may_be_blocked);
    return ret;
}
/// func [signal_is_valid_name](https://docs.gtk.org/gobject/func.signal_is_valid_name.html)
pub fn signalIsValidName(_name: [*:0]const u8) bool {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) bool, .{ .name = "g_signal_is_valid_name" });
    const ret = cFn(_name);
    return ret;
}
/// func [signal_list_ids](https://docs.gtk.org/gobject/func.signal_list_ids.html)
pub fn signalListIds(_itype: core.Type) struct {
    ret: [*]u32,
    n_ids: u32,
} {
    var n_ids_out: u32 = undefined;
    const _n_ids = &n_ids_out;
    const cFn = @extern(*const fn (core.Type, *u32) callconv(.c) [*]u32, .{ .name = "g_signal_list_ids" });
    const ret = cFn(_itype, _n_ids);
    return .{ .ret = ret, .n_ids = n_ids_out };
}
/// func [signal_lookup](https://docs.gtk.org/gobject/func.signal_lookup.html)
pub fn signalLookup(_name: [*:0]const u8, _itype: core.Type) u32 {
    const cFn = @extern(*const fn ([*:0]const u8, core.Type) callconv(.c) u32, .{ .name = "g_signal_lookup" });
    const ret = cFn(_name, _itype);
    return ret;
}
/// func [signal_name](https://docs.gtk.org/gobject/func.signal_name.html)
pub fn signalName(_signal_id: u32) ?[*:0]u8 {
    const cFn = @extern(*const fn (u32) callconv(.c) ?[*:0]u8, .{ .name = "g_signal_name" });
    const ret = cFn(_signal_id);
    return ret;
}
/// func [signal_newv](https://docs.gtk.org/gobject/func.signal_newv.html)
pub fn signalNewv(_signal_name: [*:0]const u8, _itype: core.Type, _signal_flags: gobject.SignalFlags, _class_closure: ?*gobject.Closure, accumulator: anytype, accumulator_args: anytype, _c_marshaller: ?gobject.ClosureMarshal, _return_type: core.Type, _param_typess: []core.Type) u32 {
    var closure_accumulator = core.zig_closure(accumulator, accumulator_args, &.{ bool, *gobject.SignalInvocationHint, *gobject.Value, *gobject.Value });
    const _accumulator: ?gobject.SignalAccumulator = @ptrCast(closure_accumulator.c_closure());
    const _accu_data: ?*anyopaque = @ptrCast(closure_accumulator.c_data());
    const _n_params: u32 = @intCast(_param_typess.len);
    const _param_types = _param_typess.ptr;
    const cFn = @extern(*const fn ([*:0]const u8, core.Type, gobject.SignalFlags, ?*gobject.Closure, ?gobject.SignalAccumulator, ?*anyopaque, ?gobject.ClosureMarshal, core.Type, u32, ?[*]core.Type) callconv(.c) u32, .{ .name = "g_signal_newv" });
    const ret = cFn(_signal_name, _itype, _signal_flags, _class_closure, _accumulator, @ptrCast(_accu_data), _c_marshaller, _return_type, _n_params, _param_types);
    return ret;
}
/// func [signal_override_class_closure](https://docs.gtk.org/gobject/func.signal_override_class_closure.html)
pub fn signalOverrideClassClosure(_signal_id: u32, _instance_type: core.Type, _class_closure: *gobject.Closure) void {
    const cFn = @extern(*const fn (u32, core.Type, *gobject.Closure) callconv(.c) void, .{ .name = "g_signal_override_class_closure" });
    const ret = cFn(_signal_id, _instance_type, _class_closure);
    return ret;
}
/// func [signal_override_class_handler](https://docs.gtk.org/gobject/func.signal_override_class_handler.html)
pub fn signalOverrideClassHandler(_signal_name: [*:0]const u8, _instance_type: core.Type, _class_handler: gobject.Callback) void {
    const cFn = @extern(*const fn ([*:0]const u8, core.Type, gobject.Callback) callconv(.c) void, .{ .name = "g_signal_override_class_handler" });
    const ret = cFn(_signal_name, _instance_type, _class_handler);
    return ret;
}
/// func [signal_parse_name](https://docs.gtk.org/gobject/func.signal_parse_name.html)
pub fn signalParseName(_detailed_signal: [*:0]const u8, _itype: core.Type, _force_detail_quark: bool) struct {
    ret: bool,
    signal_id_p: u32,
    detail_p: u32,
} {
    var signal_id_p_out: u32 = undefined;
    const _signal_id_p = &signal_id_p_out;
    var detail_p_out: u32 = undefined;
    const _detail_p = &detail_p_out;
    const cFn = @extern(*const fn ([*:0]const u8, core.Type, *u32, *u32, bool) callconv(.c) bool, .{ .name = "g_signal_parse_name" });
    const ret = cFn(_detailed_signal, _itype, _signal_id_p, _detail_p, _force_detail_quark);
    return .{ .ret = ret, .signal_id_p = signal_id_p_out, .detail_p = detail_p_out };
}
/// func [signal_query](https://docs.gtk.org/gobject/func.signal_query.html)
pub fn signalQuery(_signal_id: u32, _query: *gobject.SignalQuery) void {
    const cFn = @extern(*const fn (u32, *gobject.SignalQuery) callconv(.c) void, .{ .name = "g_signal_query" });
    const ret = cFn(_signal_id, _query);
    return ret;
}
/// func [signal_remove_emission_hook](https://docs.gtk.org/gobject/func.signal_remove_emission_hook.html)
pub fn signalRemoveEmissionHook(_signal_id: u32, _hook_id: u64) void {
    const cFn = @extern(*const fn (u32, u64) callconv(.c) void, .{ .name = "g_signal_remove_emission_hook" });
    const ret = cFn(_signal_id, _hook_id);
    return ret;
}
/// func [signal_set_va_marshaller](https://docs.gtk.org/gobject/func.signal_set_va_marshaller.html)
pub fn signalSetVaMarshaller(_signal_id: u32, _instance_type: core.Type, _va_marshaller: *anyopaque) void {
    const cFn = @extern(*const fn (u32, core.Type, *anyopaque) callconv(.c) void, .{ .name = "g_signal_set_va_marshaller" });
    const ret = cFn(_signal_id, _instance_type, _va_marshaller);
    return ret;
}
/// func [signal_stop_emission](https://docs.gtk.org/gobject/func.signal_stop_emission.html)
pub fn signalStopEmission(_instance: *gobject.Object, _signal_id: u32, _detail: u32) void {
    const cFn = @extern(*const fn (*gobject.Object, u32, u32) callconv(.c) void, .{ .name = "g_signal_stop_emission" });
    const ret = cFn(_instance, _signal_id, _detail);
    return ret;
}
/// func [signal_stop_emission_by_name](https://docs.gtk.org/gobject/func.signal_stop_emission_by_name.html)
pub fn signalStopEmissionByName(_instance: *gobject.Object, _detailed_signal: [*:0]const u8) void {
    const cFn = @extern(*const fn (*gobject.Object, [*:0]const u8) callconv(.c) void, .{ .name = "g_signal_stop_emission_by_name" });
    const ret = cFn(_instance, _detailed_signal);
    return ret;
}
/// func [signal_type_cclosure_new](https://docs.gtk.org/gobject/func.signal_type_cclosure_new.html)
pub fn signalTypeCclosureNew(_itype: core.Type, _struct_offset: u32) *gobject.Closure {
    const cFn = @extern(*const fn (core.Type, u32) callconv(.c) *gobject.Closure, .{ .name = "g_signal_type_cclosure_new" });
    const ret = cFn(_itype, _struct_offset);
    return ret;
}
/// func [source_set_closure](https://docs.gtk.org/gobject/func.source_set_closure.html)
pub fn sourceSetClosure(_source: *glib.Source, _closure: *gobject.Closure) void {
    const cFn = @extern(*const fn (*glib.Source, *gobject.Closure) callconv(.c) void, .{ .name = "g_source_set_closure" });
    const ret = cFn(_source, _closure);
    return ret;
}
/// func [source_set_dummy_callback](https://docs.gtk.org/gobject/func.source_set_dummy_callback.html)
pub fn sourceSetDummyCallback(_source: *glib.Source) void {
    const cFn = @extern(*const fn (*glib.Source) callconv(.c) void, .{ .name = "g_source_set_dummy_callback" });
    const ret = cFn(_source);
    return ret;
}
/// func [strdup_value_contents](https://docs.gtk.org/gobject/func.strdup_value_contents.html)
pub fn strdupValueContents(_value: *gobject.Value) [*:0]u8 {
    const cFn = @extern(*const fn (*gobject.Value) callconv(.c) [*:0]u8, .{ .name = "g_strdup_value_contents" });
    const ret = cFn(_value);
    return ret;
}
/// func [type_add_class_private](https://docs.gtk.org/gobject/func.type_add_class_private.html)
pub fn typeAddClassPrivate(_class_type: core.Type, _private_size: u64) void {
    const cFn = @extern(*const fn (core.Type, u64) callconv(.c) void, .{ .name = "g_type_add_class_private" });
    const ret = cFn(_class_type, _private_size);
    return ret;
}
/// func [type_add_instance_private](https://docs.gtk.org/gobject/func.type_add_instance_private.html)
pub fn typeAddInstancePrivate(_class_type: core.Type, _private_size: u64) i32 {
    const cFn = @extern(*const fn (core.Type, u64) callconv(.c) i32, .{ .name = "g_type_add_instance_private" });
    const ret = cFn(_class_type, _private_size);
    return ret;
}
/// func [type_add_interface_dynamic](https://docs.gtk.org/gobject/func.type_add_interface_dynamic.html)
pub fn typeAddInterfaceDynamic(_instance_type: core.Type, _interface_type: core.Type, _plugin: *gobject.TypePlugin) void {
    const cFn = @extern(*const fn (core.Type, core.Type, *gobject.TypePlugin) callconv(.c) void, .{ .name = "g_type_add_interface_dynamic" });
    const ret = cFn(_instance_type, _interface_type, _plugin);
    return ret;
}
/// func [type_add_interface_static](https://docs.gtk.org/gobject/func.type_add_interface_static.html)
pub fn typeAddInterfaceStatic(_instance_type: core.Type, _interface_type: core.Type, _info: *gobject.InterfaceInfo) void {
    const cFn = @extern(*const fn (core.Type, core.Type, *gobject.InterfaceInfo) callconv(.c) void, .{ .name = "g_type_add_interface_static" });
    const ret = cFn(_instance_type, _interface_type, _info);
    return ret;
}
/// func [type_check_class_is_a](https://docs.gtk.org/gobject/func.type_check_class_is_a.html)
pub fn typeCheckClassIsA(_g_class: *gobject.TypeClass, _is_a_type: core.Type) bool {
    const cFn = @extern(*const fn (*gobject.TypeClass, core.Type) callconv(.c) bool, .{ .name = "g_type_check_class_is_a" });
    const ret = cFn(_g_class, _is_a_type);
    return ret;
}
/// func [type_check_instance](https://docs.gtk.org/gobject/func.type_check_instance.html)
pub fn typeCheckInstance(_instance: *gobject.TypeInstance) bool {
    const cFn = @extern(*const fn (*gobject.TypeInstance) callconv(.c) bool, .{ .name = "g_type_check_instance" });
    const ret = cFn(_instance);
    return ret;
}
/// func [type_check_instance_is_a](https://docs.gtk.org/gobject/func.type_check_instance_is_a.html)
pub fn typeCheckInstanceIsA(_instance: *gobject.TypeInstance, _iface_type: core.Type) bool {
    const cFn = @extern(*const fn (*gobject.TypeInstance, core.Type) callconv(.c) bool, .{ .name = "g_type_check_instance_is_a" });
    const ret = cFn(_instance, _iface_type);
    return ret;
}
/// func [type_check_instance_is_fundamentally_a](https://docs.gtk.org/gobject/func.type_check_instance_is_fundamentally_a.html)
pub fn typeCheckInstanceIsFundamentallyA(_instance: *gobject.TypeInstance, _fundamental_type: core.Type) bool {
    const cFn = @extern(*const fn (*gobject.TypeInstance, core.Type) callconv(.c) bool, .{ .name = "g_type_check_instance_is_fundamentally_a" });
    const ret = cFn(_instance, _fundamental_type);
    return ret;
}
/// func [type_check_is_value_type](https://docs.gtk.org/gobject/func.type_check_is_value_type.html)
pub fn typeCheckIsValueType(_type: core.Type) bool {
    const cFn = @extern(*const fn (core.Type) callconv(.c) bool, .{ .name = "g_type_check_is_value_type" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_check_value](https://docs.gtk.org/gobject/func.type_check_value.html)
pub fn typeCheckValue(_value: *gobject.Value) bool {
    const cFn = @extern(*const fn (*gobject.Value) callconv(.c) bool, .{ .name = "g_type_check_value" });
    const ret = cFn(_value);
    return ret;
}
/// func [type_check_value_holds](https://docs.gtk.org/gobject/func.type_check_value_holds.html)
pub fn typeCheckValueHolds(_value: *gobject.Value, _type: core.Type) bool {
    const cFn = @extern(*const fn (*gobject.Value, core.Type) callconv(.c) bool, .{ .name = "g_type_check_value_holds" });
    const ret = cFn(_value, _type);
    return ret;
}
/// func [type_children](https://docs.gtk.org/gobject/func.type_children.html)
pub fn typeChildren(_type: core.Type) struct {
    ret: [*]core.Type,
    n_children: u32,
} {
    var n_children_out: u32 = undefined;
    const _n_children = &n_children_out;
    const cFn = @extern(*const fn (core.Type, ?*u32) callconv(.c) [*]core.Type, .{ .name = "g_type_children" });
    const ret = cFn(_type, _n_children);
    return .{ .ret = ret, .n_children = n_children_out };
}
/// func [type_class_adjust_private_offset](https://docs.gtk.org/gobject/func.type_class_adjust_private_offset.html)
pub fn typeClassAdjustPrivateOffset(_g_class: ?*anyopaque, _private_size_or_offset: *i32) void {
    const cFn = @extern(*const fn (?*anyopaque, *i32) callconv(.c) void, .{ .name = "g_type_class_adjust_private_offset" });
    const ret = cFn(@ptrCast(_g_class), _private_size_or_offset);
    return ret;
}
/// func [type_class_peek](https://docs.gtk.org/gobject/func.type_class_peek.html)
pub fn typeClassPeek(_type: core.Type) *gobject.TypeClass {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_peek" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_class_peek_static](https://docs.gtk.org/gobject/func.type_class_peek_static.html)
pub fn typeClassPeekStatic(_type: core.Type) *gobject.TypeClass {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_peek_static" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_class_ref](https://docs.gtk.org/gobject/func.type_class_ref.html)
pub fn typeClassRef(_type: core.Type) *gobject.TypeClass {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeClass, .{ .name = "g_type_class_ref" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_default_interface_peek](https://docs.gtk.org/gobject/func.type_default_interface_peek.html)
pub fn typeDefaultInterfacePeek(_g_type: core.Type) *gobject.TypeInterface {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeInterface, .{ .name = "g_type_default_interface_peek" });
    const ret = cFn(_g_type);
    return ret;
}
/// func [type_default_interface_ref](https://docs.gtk.org/gobject/func.type_default_interface_ref.html)
pub fn typeDefaultInterfaceRef(_g_type: core.Type) *gobject.TypeInterface {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypeInterface, .{ .name = "g_type_default_interface_ref" });
    const ret = cFn(_g_type);
    return ret;
}
/// func [type_default_interface_unref](https://docs.gtk.org/gobject/func.type_default_interface_unref.html)
pub fn typeDefaultInterfaceUnref(_g_iface: *gobject.TypeInterface) void {
    const cFn = @extern(*const fn (*gobject.TypeInterface) callconv(.c) void, .{ .name = "g_type_default_interface_unref" });
    const ret = cFn(_g_iface);
    return ret;
}
/// func [type_depth](https://docs.gtk.org/gobject/func.type_depth.html)
pub fn typeDepth(_type: core.Type) u32 {
    const cFn = @extern(*const fn (core.Type) callconv(.c) u32, .{ .name = "g_type_depth" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_ensure](https://docs.gtk.org/gobject/func.type_ensure.html)
pub fn typeEnsure(_type: core.Type) void {
    const cFn = @extern(*const fn (core.Type) callconv(.c) void, .{ .name = "g_type_ensure" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_free_instance](https://docs.gtk.org/gobject/func.type_free_instance.html)
pub fn typeFreeInstance(_instance: *gobject.TypeInstance) void {
    const cFn = @extern(*const fn (*gobject.TypeInstance) callconv(.c) void, .{ .name = "g_type_free_instance" });
    const ret = cFn(_instance);
    return ret;
}
/// func [type_from_name](https://docs.gtk.org/gobject/func.type_from_name.html)
pub fn typeFromName(_name: [*:0]const u8) core.Type {
    const cFn = @extern(*const fn ([*:0]const u8) callconv(.c) core.Type, .{ .name = "g_type_from_name" });
    const ret = cFn(_name);
    return ret;
}
/// func [type_fundamental](https://docs.gtk.org/gobject/func.type_fundamental.html)
pub fn typeFundamental(_type_id: core.Type) core.Type {
    const cFn = @extern(*const fn (core.Type) callconv(.c) core.Type, .{ .name = "g_type_fundamental" });
    const ret = cFn(_type_id);
    return ret;
}
/// func [type_fundamental_next](https://docs.gtk.org/gobject/func.type_fundamental_next.html)
pub fn typeFundamentalNext() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_type_fundamental_next" });
    const ret = cFn();
    return ret;
}
/// func [type_get_instance_count](https://docs.gtk.org/gobject/func.type_get_instance_count.html)
pub fn typeGetInstanceCount(_type: core.Type) i32 {
    const cFn = @extern(*const fn (core.Type) callconv(.c) i32, .{ .name = "g_type_get_instance_count" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_get_plugin](https://docs.gtk.org/gobject/func.type_get_plugin.html)
pub fn typeGetPlugin(_type: core.Type) *gobject.TypePlugin {
    const cFn = @extern(*const fn (core.Type) callconv(.c) *gobject.TypePlugin, .{ .name = "g_type_get_plugin" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_get_qdata](https://docs.gtk.org/gobject/func.type_get_qdata.html)
pub fn typeGetQdata(_type: core.Type, _quark: u32) ?*anyopaque {
    const cFn = @extern(*const fn (core.Type, u32) callconv(.c) ?*anyopaque, .{ .name = "g_type_get_qdata" });
    const ret = cFn(_type, _quark);
    return ret;
}
/// func [type_get_type_registration_serial](https://docs.gtk.org/gobject/func.type_get_type_registration_serial.html)
pub fn typeGetTypeRegistrationSerial() u32 {
    const cFn = @extern(*const fn () callconv(.c) u32, .{ .name = "g_type_get_type_registration_serial" });
    const ret = cFn();
    return ret;
}
/// Deprecated:
/// func [type_init](https://docs.gtk.org/gobject/func.type_init.html)
pub const typeInit = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn typeInit() void {
        const cFn = @extern(*const fn () callconv(.c) void, .{ .name = "g_type_init" });
        const ret = cFn();
        return ret;
    }
}.typeInit;
/// Deprecated:
/// func [type_init_with_debug_flags](https://docs.gtk.org/gobject/func.type_init_with_debug_flags.html)
pub const typeInitWithDebugFlags = if (config.disable_deprecated) core.Deprecated else struct {
    pub fn typeInitWithDebugFlags(_debug_flags: gobject.TypeDebugFlags) void {
        const cFn = @extern(*const fn (gobject.TypeDebugFlags) callconv(.c) void, .{ .name = "g_type_init_with_debug_flags" });
        const ret = cFn(_debug_flags);
        return ret;
    }
}.typeInitWithDebugFlags;
/// func [type_interface_add_prerequisite](https://docs.gtk.org/gobject/func.type_interface_add_prerequisite.html)
pub fn typeInterfaceAddPrerequisite(_interface_type: core.Type, _prerequisite_type: core.Type) void {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) void, .{ .name = "g_type_interface_add_prerequisite" });
    const ret = cFn(_interface_type, _prerequisite_type);
    return ret;
}
/// func [type_interface_get_plugin](https://docs.gtk.org/gobject/func.type_interface_get_plugin.html)
pub fn typeInterfaceGetPlugin(_instance_type: core.Type, _interface_type: core.Type) *gobject.TypePlugin {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) *gobject.TypePlugin, .{ .name = "g_type_interface_get_plugin" });
    const ret = cFn(_instance_type, _interface_type);
    return ret;
}
/// func [type_interface_instantiatable_prerequisite](https://docs.gtk.org/gobject/func.type_interface_instantiatable_prerequisite.html)
pub fn typeInterfaceInstantiatablePrerequisite(_interface_type: core.Type) core.Type {
    const cFn = @extern(*const fn (core.Type) callconv(.c) core.Type, .{ .name = "g_type_interface_instantiatable_prerequisite" });
    const ret = cFn(_interface_type);
    return ret;
}
/// func [type_interface_peek](https://docs.gtk.org/gobject/func.type_interface_peek.html)
pub fn typeInterfacePeek(_instance_class: *gobject.TypeClass, _iface_type: core.Type) *gobject.TypeInterface {
    const cFn = @extern(*const fn (*gobject.TypeClass, core.Type) callconv(.c) *gobject.TypeInterface, .{ .name = "g_type_interface_peek" });
    const ret = cFn(_instance_class, _iface_type);
    return ret;
}
/// func [type_interface_prerequisites](https://docs.gtk.org/gobject/func.type_interface_prerequisites.html)
pub fn typeInterfacePrerequisites(_interface_type: core.Type) struct {
    ret: [*]core.Type,
    n_prerequisites: u32,
} {
    var n_prerequisites_out: u32 = undefined;
    const _n_prerequisites = &n_prerequisites_out;
    const cFn = @extern(*const fn (core.Type, ?*u32) callconv(.c) [*]core.Type, .{ .name = "g_type_interface_prerequisites" });
    const ret = cFn(_interface_type, _n_prerequisites);
    return .{ .ret = ret, .n_prerequisites = n_prerequisites_out };
}
/// func [type_interfaces](https://docs.gtk.org/gobject/func.type_interfaces.html)
pub fn typeInterfaces(_type: core.Type) struct {
    ret: [*]core.Type,
    n_interfaces: u32,
} {
    var n_interfaces_out: u32 = undefined;
    const _n_interfaces = &n_interfaces_out;
    const cFn = @extern(*const fn (core.Type, ?*u32) callconv(.c) [*]core.Type, .{ .name = "g_type_interfaces" });
    const ret = cFn(_type, _n_interfaces);
    return .{ .ret = ret, .n_interfaces = n_interfaces_out };
}
/// func [type_is_a](https://docs.gtk.org/gobject/func.type_is_a.html)
pub fn typeIsA(_type: core.Type, _is_a_type: core.Type) bool {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) bool, .{ .name = "g_type_is_a" });
    const ret = cFn(_type, _is_a_type);
    return ret;
}
/// func [type_name](https://docs.gtk.org/gobject/func.type_name.html)
pub fn typeName(_type: core.Type) ?[*:0]u8 {
    const cFn = @extern(*const fn (core.Type) callconv(.c) ?[*:0]u8, .{ .name = "g_type_name" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_name_from_class](https://docs.gtk.org/gobject/func.type_name_from_class.html)
pub fn typeNameFromClass(_g_class: *gobject.TypeClass) [*:0]u8 {
    const cFn = @extern(*const fn (*gobject.TypeClass) callconv(.c) [*:0]u8, .{ .name = "g_type_name_from_class" });
    const ret = cFn(_g_class);
    return ret;
}
/// func [type_name_from_instance](https://docs.gtk.org/gobject/func.type_name_from_instance.html)
pub fn typeNameFromInstance(_instance: *gobject.TypeInstance) [*:0]u8 {
    const cFn = @extern(*const fn (*gobject.TypeInstance) callconv(.c) [*:0]u8, .{ .name = "g_type_name_from_instance" });
    const ret = cFn(_instance);
    return ret;
}
/// func [type_next_base](https://docs.gtk.org/gobject/func.type_next_base.html)
pub fn typeNextBase(_leaf_type: core.Type, _root_type: core.Type) core.Type {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) core.Type, .{ .name = "g_type_next_base" });
    const ret = cFn(_leaf_type, _root_type);
    return ret;
}
/// func [type_parent](https://docs.gtk.org/gobject/func.type_parent.html)
pub fn typeParent(_type: core.Type) core.Type {
    const cFn = @extern(*const fn (core.Type) callconv(.c) core.Type, .{ .name = "g_type_parent" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_qname](https://docs.gtk.org/gobject/func.type_qname.html)
pub fn typeQname(_type: core.Type) u32 {
    const cFn = @extern(*const fn (core.Type) callconv(.c) u32, .{ .name = "g_type_qname" });
    const ret = cFn(_type);
    return ret;
}
/// func [type_query](https://docs.gtk.org/gobject/func.type_query.html)
pub fn typeQuery(_type: core.Type, _query: *gobject.TypeQuery) void {
    const cFn = @extern(*const fn (core.Type, *gobject.TypeQuery) callconv(.c) void, .{ .name = "g_type_query" });
    const ret = cFn(_type, _query);
    return ret;
}
/// func [type_register_dynamic](https://docs.gtk.org/gobject/func.type_register_dynamic.html)
pub fn typeRegisterDynamic(_parent_type: core.Type, _type_name: [*:0]const u8, _plugin: *gobject.TypePlugin, _flags: gobject.TypeFlags) core.Type {
    const cFn = @extern(*const fn (core.Type, [*:0]const u8, *gobject.TypePlugin, gobject.TypeFlags) callconv(.c) core.Type, .{ .name = "g_type_register_dynamic" });
    const ret = cFn(_parent_type, _type_name, _plugin, _flags);
    return ret;
}
/// func [type_register_fundamental](https://docs.gtk.org/gobject/func.type_register_fundamental.html)
pub fn typeRegisterFundamental(_type_id: core.Type, _type_name: [*:0]const u8, _info: *gobject.TypeInfo, _finfo: *gobject.TypeFundamentalInfo, _flags: gobject.TypeFlags) core.Type {
    const cFn = @extern(*const fn (core.Type, [*:0]const u8, *gobject.TypeInfo, *gobject.TypeFundamentalInfo, gobject.TypeFlags) callconv(.c) core.Type, .{ .name = "g_type_register_fundamental" });
    const ret = cFn(_type_id, _type_name, _info, _finfo, _flags);
    return ret;
}
/// func [type_register_static](https://docs.gtk.org/gobject/func.type_register_static.html)
pub fn typeRegisterStatic(_parent_type: core.Type, _type_name: [*:0]const u8, _info: *gobject.TypeInfo, _flags: gobject.TypeFlags) core.Type {
    const cFn = @extern(*const fn (core.Type, [*:0]const u8, *gobject.TypeInfo, gobject.TypeFlags) callconv(.c) core.Type, .{ .name = "g_type_register_static" });
    const ret = cFn(_parent_type, _type_name, _info, _flags);
    return ret;
}
/// func [type_set_qdata](https://docs.gtk.org/gobject/func.type_set_qdata.html)
pub fn typeSetQdata(_type: core.Type, _quark: u32, _data: ?*anyopaque) void {
    const cFn = @extern(*const fn (core.Type, u32, ?*anyopaque) callconv(.c) void, .{ .name = "g_type_set_qdata" });
    const ret = cFn(_type, _quark, @ptrCast(_data));
    return ret;
}
/// func [type_test_flags](https://docs.gtk.org/gobject/func.type_test_flags.html)
pub fn typeTestFlags(_type: core.Type, _flags: u32) bool {
    const cFn = @extern(*const fn (core.Type, u32) callconv(.c) bool, .{ .name = "g_type_test_flags" });
    const ret = cFn(_type, _flags);
    return ret;
}
/// func [value_type_compatible](https://docs.gtk.org/gobject/func.value_type_compatible.html)
pub fn valueTypeCompatible(_src_type: core.Type, _dest_type: core.Type) bool {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) bool, .{ .name = "g_value_type_compatible" });
    const ret = cFn(_src_type, _dest_type);
    return ret;
}
/// func [value_type_transformable](https://docs.gtk.org/gobject/func.value_type_transformable.html)
pub fn valueTypeTransformable(_src_type: core.Type, _dest_type: core.Type) bool {
    const cFn = @extern(*const fn (core.Type, core.Type) callconv(.c) bool, .{ .name = "g_value_type_transformable" });
    const ret = cFn(_src_type, _dest_type);
    return ret;
}
/// func [variant_get_gtype](https://docs.gtk.org/gobject/func.variant_get_gtype.html)
pub fn variantGetGtype() core.Type {
    const cFn = @extern(*const fn () callconv(.c) core.Type, .{ .name = "g_variant_get_gtype" });
    const ret = cFn();
    return ret;
}
test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDecls(@This());
}
